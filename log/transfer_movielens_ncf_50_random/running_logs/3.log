[2024-12-02 17:37:36.048080] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 3, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 568
test users = ['41481' '41484' '41486' '41507' '41532' '41578' '41613' '41638' '41651'
 '41669' '41719' '41724' '41777' '41833' '41859' '41879' '41904' '41929'
 '41930' '41941' '42015' '42029' '42032' '42046' '42069' '42103' '42124'
 '42162' '42177' '42239' '42245' '42252' '42259' '42281' '42298' '42365'
 '42366' '42369' '42372' '42390' '42399' '42424' '42429' '42441' '42493'
 '42506' '42534' '42610' '42671' '42682' '42687' '42688' '42706' '42784'
 '42836' '42871' '42886' '42895' '42910' '42924' '42927' '42945' '43032'
 '43050' '43081' '43188' '43194' '43213' '43217' '43298' '43329' '43350'
 '43383' '43384' '43403' '43413' '43451' '43478' '43525' '43539' '43545'
 '43563' '43572' '43596' '43599' '43605' '43636' '43644' '43691' '43756'
 '43770' '43800' '43829' '43914' '43936' '43940' '43945' '43952' '44060'
 '44096' '44112' '44113' '44172' '44205' '44214' '44225' '44243' '44256'
 '44271' '44296' '44321' '44341' '44362' '44365' '44384' '44412' '44429'
 '44430' '44440' '44477' '44508' '44535' '44576' '44608' '44615' '44642'
 '44696' '44762' '44780' '44826' '44875' '44952' '44963' '44989' '45015'
 '45028' '45039' '45064' '45112' '45120' '45135' '45143' '45148' '45182'
 '45189' '45214' '45267' '45300' '45303' '45322' '45346' '45461' '45483'
 '45499' '45619' '45666' '45681' '45769' '45775' '45787' '45805' '45925'
 '45928' '45982' '46063' '46069' '46095' '46104' '46121' '46169' '46190'
 '46207' '46233' '46251' '46314' '46329' '46355' '46370' '46403' '46404'
 '46436' '46443' '46465' '46470' '46482' '46514' '46555' '46569' '46577'
 '46628' '46636' '46645' '46698' '46704' '46729' '46742' '46764' '46809'
 '46820' '46845' '46880' '46929' '46974' '47031' '47044' '47053' '47075'
 '47148' '47154' '47160' '47230' '47242' '47271' '47292' '47301' '47311'
 '47361' '47370' '47385' '47397' '47414' '47421' '47422' '47476' '47507'
 '47594' '47620' '47661' '47762' '47816' '47855' '47860' '47866' '47890'
 '47901' '47931' '47938' '47951' '47953' '47986' '48000' '48033' '48045'
 '48071' '48099' '48134' '48255' '48256' '48305' '48325' '48335' '48344'
 '48355' '48382' '48392' '48405' '48452' '48485' '48509' '48512' '48527'
 '48554' '48564' '48568' '48571' '48579' '48591' '48596' '48627' '48641'
 '48677' '48684' '48712' '48821' '48876' '48904' '48929' '48937' '49056'
 '49065' '49067' '49086' '49091' '49096' '49138' '49194' '49199' '49205'
 '49229' '49239' '49276' '49307' '49363' '49381' '49417' '49443' '49479'
 '49486' '49510' '49520' '49529' '49554' '49574' '49632' '49645' '49650'
 '49663' '49668' '49738' '49756' '49830' '49857' '49897' '49928' '49938'
 '49955' '49965' '50003' '50021' '50030' '50032' '50045' '50049' '50064'
 '50154' '50166' '50179' '50192' '50206' '50210' '50211' '50275' '50310'
 '50334' '50357' '50360' '50421' '50441' '50488' '50535' '50541' '50543'
 '50550' '50566' '50567' '50568' '50574' '50641' '50721' '50722' '50764'
 '50767' '50788' '50817' '50898' '50913' '50934' '50943' '50952' '51026'
 '51057' '51075' '51080' '51085' '51099' '51100' '51127' '51130' '51161'
 '51198' '51199' '51227' '51247' '51266' '51384' '51385' '51411' '51415'
 '51466' '51507' '51549' '51558' '51559' '51560' '51616' '51641' '51664'
 '51669' '51703' '51745' '51782' '51783' '51789' '51791' '51832' '51848'
 '51859' '51965' '51978' '52004' '52009' '52011' '52075' '52095' '52208'
 '52221' '52232' '52242' '52263' '52311' '52378' '52381' '52395' '52405'
 '52439' '52440' '52452' '52457' '52462' '52479' '52502' '52509' '52512'
 '52514' '52520' '52563' '52617' '52619' '52623' '52661' '52670' '52698'
 '52726' '52727' '52747' '52760' '52877' '52890' '52893' '52895' '53017'
 '53049' '53089' '53096' '53167' '53170' '53214' '53236' '53246' '53258'
 '53346' '53364' '53413' '53416' '53422' '53515' '53521' '53573' '53596'
 '53604' '53640' '53657' '53680' '53719' '53725' '53799' '53830' '53858'
 '53888' '53910' '53930' '53931' '53941' '53942' '53984' '53998' '54057'
 '54059' '54113' '54154' '54187' '54204' '54241' '54305' '54325' '54339'
 '54351' '54358' '54415' '54421' '54463' '54510' '54537' '54541' '54575'
 '54633' '54641' '54688' '54703' '54730' '54733' '54754' '54807' '54817'
 '54819' '54825' '54866' '54894' '54910' '54919' '54989' '55004' '55008'
 '55019' '55032' '55046' '55069' '55071' '55078' '55090' '55118' '55153'
 '55172' '55176' '55196' '55204' '55209' '55237' '55258' '55278' '55282'
 '55285' '55303' '55304' '55316' '55345' '55354' '55389' '55391' '55430'
 '55431' '55433' '55466' '55470' '55479' '55514' '55579' '55595' '55618'
 '55628' '55676' '55688' '55701' '55702' '55703' '55722' '55737' '55738'
 '55741' '55765' '55767' '55846' '55856' '55903' '55914' '55928' '55954'
 '55975']
[2024-12-02 17:37:36.063521] start test on test users
[2024-12-02 17:37:36.063566] start test user 41481 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:38.473826] start test user 41481 0/568 recall augumented users by random, augumented_users = [89539, 27329, 84944, 109752, 25349, 56831, 125709, 113910, 137660, 76999, 53052, 90737, 92084, 72115, 26565, 97233, 28661, 108903, 63309, 127641, 86449, 11461, 46534, 125755, 10820, 27767, 59101, 67005, 100655, 58763, 63014, 101692, 128623, 72836, 56709, 42355, 23492, 3430, 12015, 16925, 68096, 40065, 73876, 21255, 2784, 83395, 61749, 125719, 13620, 39556]
[2024-12-02 17:37:38.499733] user = 41481 Cloud 0/568
[2024-12-02 17:37:43.174028] user = 41481 Local 0/568
[2024-12-02 17:37:43.746656] user = 41481 Local+ 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:45.381292] user = 41481 MPDA- 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5385964912280702
Training on augumented user 89539 0/50 current_auc = 0.5385964912280702
User 89539 AUC after training: 0.5346491228070176
User 89539 does not improve AUC. Reverting changes.
Training on augumented user 27329 1/50 current_auc = 0.5385964912280702
User 27329 AUC after training: 0.5355263157894736
User 27329 does not improve AUC. Reverting changes.
Training on augumented user 84944 2/50 current_auc = 0.5385964912280702
User 84944 AUC after training: 0.5355263157894736
User 84944 does not improve AUC. Reverting changes.
Training on augumented user 109752 3/50 current_auc = 0.5385964912280702
User 109752 AUC after training: 0.5394736842105263
User 109752 improves AUC. Keeping the model.
Training on augumented user 25349 4/50 current_auc = 0.5394736842105263
User 25349 AUC after training: 0.5346491228070175
User 25349 does not improve AUC. Reverting changes.
Training on augumented user 56831 5/50 current_auc = 0.5394736842105263
User 56831 AUC after training: 0.5392543859649123
User 56831 does not improve AUC. Reverting changes.
Training on augumented user 125709 6/50 current_auc = 0.5394736842105263
User 125709 AUC after training: 0.537938596491228
User 125709 does not improve AUC. Reverting changes.
Training on augumented user 113910 7/50 current_auc = 0.5394736842105263
User 113910 AUC after training: 0.5350877192982456
User 113910 does not improve AUC. Reverting changes.
Training on augumented user 137660 8/50 current_auc = 0.5394736842105263
User 137660 AUC after training: 0.5350877192982456
User 137660 does not improve AUC. Reverting changes.
Training on augumented user 76999 9/50 current_auc = 0.5394736842105263
User 76999 AUC after training: 0.5385964912280702
User 76999 does not improve AUC. Reverting changes.
Training on augumented user 53052 10/50 current_auc = 0.5394736842105263
User 53052 AUC after training: 0.5425438596491228
User 53052 improves AUC. Keeping the model.
Training on augumented user 90737 11/50 current_auc = 0.5425438596491228
User 90737 AUC after training: 0.5416666666666667
User 90737 does not improve AUC. Reverting changes.
Training on augumented user 92084 12/50 current_auc = 0.5425438596491228
User 92084 AUC after training: 0.5407894736842105
User 92084 does not improve AUC. Reverting changes.
Training on augumented user 72115 13/50 current_auc = 0.5425438596491228
User 72115 AUC after training: 0.5302631578947368
User 72115 does not improve AUC. Reverting changes.
Training on augumented user 26565 14/50 current_auc = 0.5425438596491228
User 26565 AUC after training: 0.543421052631579
User 26565 improves AUC. Keeping the model.
Training on augumented user 97233 15/50 current_auc = 0.543421052631579
User 97233 AUC after training: 0.5416666666666666
User 97233 does not improve AUC. Reverting changes.
Training on augumented user 28661 16/50 current_auc = 0.543421052631579
User 28661 AUC after training: 0.5407894736842105
User 28661 does not improve AUC. Reverting changes.
Training on augumented user 108903 17/50 current_auc = 0.543421052631579
User 108903 AUC after training: 0.5394736842105263
User 108903 does not improve AUC. Reverting changes.
Training on augumented user 63309 18/50 current_auc = 0.543421052631579
User 63309 AUC after training: 0.5412280701754386
User 63309 does not improve AUC. Reverting changes.
Training on augumented user 127641 19/50 current_auc = 0.543421052631579
User 127641 AUC after training: 0.5416666666666666
User 127641 does not improve AUC. Reverting changes.
Training on augumented user 86449 20/50 current_auc = 0.543421052631579
User 86449 AUC after training: 0.5394736842105263
User 86449 does not improve AUC. Reverting changes.
Training on augumented user 11461 21/50 current_auc = 0.543421052631579
User 11461 AUC after training: 0.537938596491228
User 11461 does not improve AUC. Reverting changes.
Training on augumented user 46534 22/50 current_auc = 0.543421052631579
User 46534 AUC after training: 0.5429824561403509
User 46534 does not improve AUC. Reverting changes.
Training on augumented user 125755 23/50 current_auc = 0.543421052631579
User 125755 AUC after training: 0.5429824561403509
User 125755 does not improve AUC. Reverting changes.
Training on augumented user 10820 24/50 current_auc = 0.543421052631579
User 10820 AUC after training: 0.5394736842105263
User 10820 does not improve AUC. Reverting changes.
Training on augumented user 27767 25/50 current_auc = 0.543421052631579
User 27767 AUC after training: 0.5355263157894736
User 27767 does not improve AUC. Reverting changes.
Training on augumented user 59101 26/50 current_auc = 0.543421052631579
User 59101 AUC after training: 0.5394736842105263
User 59101 does not improve AUC. Reverting changes.
Training on augumented user 67005 27/50 current_auc = 0.543421052631579
User 67005 AUC after training: 0.5421052631578946
User 67005 does not improve AUC. Reverting changes.
Training on augumented user 100655 28/50 current_auc = 0.543421052631579
User 100655 AUC after training: 0.5296052631578948
User 100655 does not improve AUC. Reverting changes.
Training on augumented user 58763 29/50 current_auc = 0.543421052631579
User 58763 AUC after training: 0.5412280701754386
User 58763 does not improve AUC. Reverting changes.
Training on augumented user 63014 30/50 current_auc = 0.543421052631579
User 63014 AUC after training: 0.5399122807017545
User 63014 does not improve AUC. Reverting changes.
Training on augumented user 101692 31/50 current_auc = 0.543421052631579
User 101692 AUC after training: 0.5381578947368422
User 101692 does not improve AUC. Reverting changes.
Training on augumented user 128623 32/50 current_auc = 0.543421052631579
User 128623 AUC after training: 0.5359649122807018
User 128623 does not improve AUC. Reverting changes.
Training on augumented user 72836 33/50 current_auc = 0.543421052631579
User 72836 AUC after training: 0.5421052631578949
User 72836 does not improve AUC. Reverting changes.
Training on augumented user 56709 34/50 current_auc = 0.543421052631579
User 56709 AUC after training: 0.5381578947368422
User 56709 does not improve AUC. Reverting changes.
Training on augumented user 42355 35/50 current_auc = 0.543421052631579
User 42355 AUC after training: 0.5324561403508772
User 42355 does not improve AUC. Reverting changes.
Training on augumented user 23492 36/50 current_auc = 0.543421052631579
User 23492 AUC after training: 0.5425438596491228
User 23492 does not improve AUC. Reverting changes.
Training on augumented user 3430 37/50 current_auc = 0.543421052631579
User 3430 AUC after training: 0.5394736842105263
User 3430 does not improve AUC. Reverting changes.
Training on augumented user 12015 38/50 current_auc = 0.543421052631579
User 12015 AUC after training: 0.5390350877192982
User 12015 does not improve AUC. Reverting changes.
Training on augumented user 16925 39/50 current_auc = 0.543421052631579
User 16925 AUC after training: 0.5355263157894736
User 16925 does not improve AUC. Reverting changes.
Training on augumented user 68096 40/50 current_auc = 0.543421052631579
User 68096 AUC after training: 0.5304824561403509
User 68096 does not improve AUC. Reverting changes.
Training on augumented user 40065 41/50 current_auc = 0.543421052631579
User 40065 AUC after training: 0.5388157894736842
User 40065 does not improve AUC. Reverting changes.
Training on augumented user 73876 42/50 current_auc = 0.543421052631579
User 73876 AUC after training: 0.5385964912280702
User 73876 does not improve AUC. Reverting changes.
Training on augumented user 21255 43/50 current_auc = 0.543421052631579
User 21255 AUC after training: 0.5355263157894736
User 21255 does not improve AUC. Reverting changes.
Training on augumented user 2784 44/50 current_auc = 0.543421052631579
User 2784 AUC after training: 0.5399122807017545
User 2784 does not improve AUC. Reverting changes.
Training on augumented user 83395 45/50 current_auc = 0.543421052631579
User 83395 AUC after training: 0.5440789473684211
User 83395 improves AUC. Keeping the model.
Training on augumented user 61749 46/50 current_auc = 0.5440789473684211
User 61749 AUC after training: 0.5403508771929825
User 61749 does not improve AUC. Reverting changes.
Training on augumented user 125719 47/50 current_auc = 0.5440789473684211
User 125719 AUC after training: 0.5460526315789473
User 125719 improves AUC. Keeping the model.
Training on augumented user 13620 48/50 current_auc = 0.5460526315789473
User 13620 AUC after training: 0.5359649122807018
User 13620 does not improve AUC. Reverting changes.
Training on augumented user 39556 49/50 current_auc = 0.5460526315789473
User 39556 AUC after training: 0.5429824561403509
User 39556 does not improve AUC. Reverting changes.
[2024-12-02 17:38:14.014086] start test user 41484 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:14.452700] start test user 41484 1/568 recall augumented users by random, augumented_users = [130850, 9120, 45048, 121514, 76198, 52152, 98664, 65617, 104015, 30056, 113338, 51185, 54402, 76193, 129553, 78933, 73281, 111519, 102562, 130484, 41845, 89625, 113794, 115943, 79939, 42051, 9298, 117645, 62284, 28545, 95866, 27201, 55637, 101434, 2873, 57019, 18788, 23377, 26109, 8067, 109723, 55535, 24421, 112391, 123129, 92096, 642, 42657, 124937, 114937]
[2024-12-02 17:38:14.467942] user = 41484 Cloud 1/568
[2024-12-02 17:38:14.507015] user = 41484 Local 1/568
[2024-12-02 17:38:14.671116] user = 41484 Local+ 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:16.855040] user = 41484 MPDA- 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7606060606060606
Training on augumented user 130850 0/50 current_auc = 0.7606060606060606
User 130850 AUC after training: 0.76
User 130850 does not improve AUC. Reverting changes.
Training on augumented user 9120 1/50 current_auc = 0.7606060606060606
User 9120 AUC after training: 0.76
User 9120 does not improve AUC. Reverting changes.
Training on augumented user 45048 2/50 current_auc = 0.7606060606060606
User 45048 AUC after training: 0.76
User 45048 does not improve AUC. Reverting changes.
Training on augumented user 121514 3/50 current_auc = 0.7606060606060606
User 121514 AUC after training: 0.76
User 121514 does not improve AUC. Reverting changes.
Training on augumented user 76198 4/50 current_auc = 0.7606060606060606
User 76198 AUC after training: 0.76
User 76198 does not improve AUC. Reverting changes.
Training on augumented user 52152 5/50 current_auc = 0.7606060606060606
User 52152 AUC after training: 0.7587878787878788
User 52152 does not improve AUC. Reverting changes.
Training on augumented user 98664 6/50 current_auc = 0.7606060606060606
User 98664 AUC after training: 0.7593939393939394
User 98664 does not improve AUC. Reverting changes.
Training on augumented user 65617 7/50 current_auc = 0.7606060606060606
User 65617 AUC after training: 0.76
User 65617 does not improve AUC. Reverting changes.
Training on augumented user 104015 8/50 current_auc = 0.7606060606060606
User 104015 AUC after training: 0.756969696969697
User 104015 does not improve AUC. Reverting changes.
Training on augumented user 30056 9/50 current_auc = 0.7606060606060606
User 30056 AUC after training: 0.7612121212121212
User 30056 improves AUC. Keeping the model.
Training on augumented user 113338 10/50 current_auc = 0.7612121212121212
User 113338 AUC after training: 0.76
User 113338 does not improve AUC. Reverting changes.
Training on augumented user 51185 11/50 current_auc = 0.7612121212121212
User 51185 AUC after training: 0.7593939393939394
User 51185 does not improve AUC. Reverting changes.
Training on augumented user 54402 12/50 current_auc = 0.7612121212121212
User 54402 AUC after training: 0.7606060606060606
User 54402 does not improve AUC. Reverting changes.
Training on augumented user 76193 13/50 current_auc = 0.7612121212121212
User 76193 AUC after training: 0.7606060606060606
User 76193 does not improve AUC. Reverting changes.
Training on augumented user 129553 14/50 current_auc = 0.7612121212121212
User 129553 AUC after training: 0.7612121212121212
User 129553 does not improve AUC. Reverting changes.
Training on augumented user 78933 15/50 current_auc = 0.7612121212121212
User 78933 AUC after training: 0.7612121212121212
User 78933 does not improve AUC. Reverting changes.
Training on augumented user 73281 16/50 current_auc = 0.7612121212121212
User 73281 AUC after training: 0.7612121212121212
User 73281 does not improve AUC. Reverting changes.
Training on augumented user 111519 17/50 current_auc = 0.7612121212121212
User 111519 AUC after training: 0.76
User 111519 does not improve AUC. Reverting changes.
Training on augumented user 102562 18/50 current_auc = 0.7612121212121212
User 102562 AUC after training: 0.7606060606060606
User 102562 does not improve AUC. Reverting changes.
Training on augumented user 130484 19/50 current_auc = 0.7612121212121212
User 130484 AUC after training: 0.7581818181818181
User 130484 does not improve AUC. Reverting changes.
Training on augumented user 41845 20/50 current_auc = 0.7612121212121212
User 41845 AUC after training: 0.7612121212121212
User 41845 does not improve AUC. Reverting changes.
Training on augumented user 89625 21/50 current_auc = 0.7612121212121212
User 89625 AUC after training: 0.7606060606060606
User 89625 does not improve AUC. Reverting changes.
Training on augumented user 113794 22/50 current_auc = 0.7612121212121212
User 113794 AUC after training: 0.7612121212121212
User 113794 does not improve AUC. Reverting changes.
Training on augumented user 115943 23/50 current_auc = 0.7612121212121212
User 115943 AUC after training: 0.7606060606060606
User 115943 does not improve AUC. Reverting changes.
Training on augumented user 79939 24/50 current_auc = 0.7612121212121212
User 79939 AUC after training: 0.7606060606060606
User 79939 does not improve AUC. Reverting changes.
Training on augumented user 42051 25/50 current_auc = 0.7612121212121212
User 42051 AUC after training: 0.7612121212121212
User 42051 does not improve AUC. Reverting changes.
Training on augumented user 9298 26/50 current_auc = 0.7612121212121212
User 9298 AUC after training: 0.7581818181818182
User 9298 does not improve AUC. Reverting changes.
Training on augumented user 117645 27/50 current_auc = 0.7612121212121212
User 117645 AUC after training: 0.7612121212121212
User 117645 does not improve AUC. Reverting changes.
Training on augumented user 62284 28/50 current_auc = 0.7612121212121212
User 62284 AUC after training: 0.7606060606060606
User 62284 does not improve AUC. Reverting changes.
Training on augumented user 28545 29/50 current_auc = 0.7612121212121212
User 28545 AUC after training: 0.7606060606060606
User 28545 does not improve AUC. Reverting changes.
Training on augumented user 95866 30/50 current_auc = 0.7612121212121212
User 95866 AUC after training: 0.7606060606060606
User 95866 does not improve AUC. Reverting changes.
Training on augumented user 27201 31/50 current_auc = 0.7612121212121212
User 27201 AUC after training: 0.7612121212121212
User 27201 does not improve AUC. Reverting changes.
Training on augumented user 55637 32/50 current_auc = 0.7612121212121212
User 55637 AUC after training: 0.7606060606060606
User 55637 does not improve AUC. Reverting changes.
Training on augumented user 101434 33/50 current_auc = 0.7612121212121212
User 101434 AUC after training: 0.7612121212121212
User 101434 does not improve AUC. Reverting changes.
Training on augumented user 2873 34/50 current_auc = 0.7612121212121212
User 2873 AUC after training: 0.76
User 2873 does not improve AUC. Reverting changes.
Training on augumented user 57019 35/50 current_auc = 0.7612121212121212
User 57019 AUC after training: 0.76
User 57019 does not improve AUC. Reverting changes.
Training on augumented user 18788 36/50 current_auc = 0.7612121212121212
User 18788 AUC after training: 0.7612121212121212
User 18788 does not improve AUC. Reverting changes.
Training on augumented user 23377 37/50 current_auc = 0.7612121212121212
User 23377 AUC after training: 0.7606060606060606
User 23377 does not improve AUC. Reverting changes.
Training on augumented user 26109 38/50 current_auc = 0.7612121212121212
User 26109 AUC after training: 0.7630303030303031
User 26109 improves AUC. Keeping the model.
Training on augumented user 8067 39/50 current_auc = 0.7630303030303031
User 8067 AUC after training: 0.7624242424242424
User 8067 does not improve AUC. Reverting changes.
Training on augumented user 109723 40/50 current_auc = 0.7630303030303031
User 109723 AUC after training: 0.7624242424242423
User 109723 does not improve AUC. Reverting changes.
Training on augumented user 55535 41/50 current_auc = 0.7630303030303031
User 55535 AUC after training: 0.7612121212121212
User 55535 does not improve AUC. Reverting changes.
Training on augumented user 24421 42/50 current_auc = 0.7630303030303031
User 24421 AUC after training: 0.7618181818181817
User 24421 does not improve AUC. Reverting changes.
Training on augumented user 112391 43/50 current_auc = 0.7630303030303031
User 112391 AUC after training: 0.7624242424242423
User 112391 does not improve AUC. Reverting changes.
Training on augumented user 123129 44/50 current_auc = 0.7630303030303031
User 123129 AUC after training: 0.7630303030303031
User 123129 does not improve AUC. Reverting changes.
Training on augumented user 92096 45/50 current_auc = 0.7630303030303031
User 92096 AUC after training: 0.7612121212121211
User 92096 does not improve AUC. Reverting changes.
Training on augumented user 642 46/50 current_auc = 0.7630303030303031
User 642 AUC after training: 0.7624242424242423
User 642 does not improve AUC. Reverting changes.
Training on augumented user 42657 47/50 current_auc = 0.7630303030303031
User 42657 AUC after training: 0.7630303030303031
User 42657 does not improve AUC. Reverting changes.
Training on augumented user 124937 48/50 current_auc = 0.7630303030303031
User 124937 AUC after training: 0.7624242424242423
User 124937 does not improve AUC. Reverting changes.
Training on augumented user 114937 49/50 current_auc = 0.7630303030303031
User 114937 AUC after training: 0.7618181818181818
User 114937 does not improve AUC. Reverting changes.
[2024-12-02 17:38:46.747282] start test user 41486 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:47.204051] start test user 41486 2/568 recall augumented users by random, augumented_users = [123733, 68272, 59715, 11841, 3099, 15362, 79613, 77494, 97050, 133194, 81887, 17541, 104667, 127231, 115958, 118724, 101752, 117570, 14170, 12900, 99786, 42945, 98908, 46890, 47729, 9516, 49510, 117097, 89396, 5849, 43282, 85761, 15458, 60772, 72396, 62353, 62426, 54487, 39882, 113660, 53362, 110170, 13968, 30606, 77797, 122301, 99996, 50426, 59730, 122908]
[2024-12-02 17:38:47.219864] user = 41486 Cloud 2/568
[2024-12-02 17:38:47.251888] user = 41486 Local 2/568
[2024-12-02 17:38:47.334794] user = 41486 Local+ 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:49.407229] user = 41486 MPDA- 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5492993388795748
Training on augumented user 123733 0/50 current_auc = 0.5492993388795748
User 123733 AUC after training: 0.5493309714358017
User 123733 improves AUC. Keeping the model.
Training on augumented user 68272 1/50 current_auc = 0.5493309714358017
User 68272 AUC after training: 0.5494891342169361
User 68272 improves AUC. Keeping the model.
Training on augumented user 59715 2/50 current_auc = 0.5494891342169361
User 59715 AUC after training: 0.5496156644418435
User 59715 improves AUC. Keeping the model.
Training on augumented user 11841 3/50 current_auc = 0.5496156644418435
User 11841 AUC after training: 0.5496472969980704
User 11841 improves AUC. Keeping the model.
Training on augumented user 3099 4/50 current_auc = 0.5496472969980704
User 3099 AUC after training: 0.549014645873533
User 3099 does not improve AUC. Reverting changes.
Training on augumented user 15362 5/50 current_auc = 0.5496472969980704
User 15362 AUC after training: 0.5492044412108943
User 15362 does not improve AUC. Reverting changes.
Training on augumented user 79613 6/50 current_auc = 0.5496472969980704
User 79613 AUC after training: 0.5491411760984405
User 79613 does not improve AUC. Reverting changes.
Training on augumented user 77494 7/50 current_auc = 0.5496472969980704
User 77494 AUC after training: 0.5493942365482554
User 77494 does not improve AUC. Reverting changes.
Training on augumented user 97050 8/50 current_auc = 0.5496472969980704
User 97050 AUC after training: 0.5493942365482555
User 97050 does not improve AUC. Reverting changes.
Training on augumented user 133194 9/50 current_auc = 0.5496472969980704
User 133194 AUC after training: 0.5490779109859867
User 133194 does not improve AUC. Reverting changes.
Training on augumented user 81887 10/50 current_auc = 0.5496472969980704
User 81887 AUC after training: 0.548761585423718
User 81887 does not improve AUC. Reverting changes.
Training on augumented user 17541 11/50 current_auc = 0.5496472969980704
User 17541 AUC after training: 0.5494575016607092
User 17541 does not improve AUC. Reverting changes.
Training on augumented user 104667 12/50 current_auc = 0.5496472969980704
User 104667 AUC after training: 0.5498054597792048
User 104667 improves AUC. Keeping the model.
Training on augumented user 127231 13/50 current_auc = 0.5498054597792048
User 127231 AUC after training: 0.549773827222978
User 127231 does not improve AUC. Reverting changes.
Training on augumented user 115958 14/50 current_auc = 0.5498054597792048
User 115958 AUC after training: 0.5499003574478853
User 115958 improves AUC. Keeping the model.
Training on augumented user 118724 15/50 current_auc = 0.5499003574478853
User 118724 AUC after training: 0.5495840318856167
User 118724 does not improve AUC. Reverting changes.
Training on augumented user 101752 16/50 current_auc = 0.5499003574478853
User 101752 AUC after training: 0.5498687248916585
User 101752 does not improve AUC. Reverting changes.
Training on augumented user 117570 17/50 current_auc = 0.5499003574478853
User 117570 AUC after training: 0.5498687248916585
User 117570 does not improve AUC. Reverting changes.
Training on augumented user 14170 18/50 current_auc = 0.5499003574478853
User 14170 AUC after training: 0.5496472969980704
User 14170 does not improve AUC. Reverting changes.
Training on augumented user 12900 19/50 current_auc = 0.5499003574478853
User 12900 AUC after training: 0.5497105621105242
User 12900 does not improve AUC. Reverting changes.
Training on augumented user 99786 20/50 current_auc = 0.5499003574478853
User 99786 AUC after training: 0.549520766773163
User 99786 does not improve AUC. Reverting changes.
Training on augumented user 42945 21/50 current_auc = 0.5499003574478853
User 42945 AUC after training: 0.5494891342169361
User 42945 does not improve AUC. Reverting changes.
Training on augumented user 98908 22/50 current_auc = 0.5499003574478853
User 98908 AUC after training: 0.549520766773163
User 98908 does not improve AUC. Reverting changes.
Training on augumented user 46890 23/50 current_auc = 0.5499003574478853
User 46890 AUC after training: 0.5493309714358017
User 46890 does not improve AUC. Reverting changes.
Training on augumented user 47729 24/50 current_auc = 0.5499003574478853
User 47729 AUC after training: 0.549710562110524
User 47729 does not improve AUC. Reverting changes.
Training on augumented user 9516 25/50 current_auc = 0.5499003574478853
User 9516 AUC after training: 0.5498687248916585
User 9516 does not improve AUC. Reverting changes.
Training on augumented user 49510 26/50 current_auc = 0.5499003574478853
User 49510 AUC after training: 0.549742194666751
User 49510 does not improve AUC. Reverting changes.
Training on augumented user 117097 27/50 current_auc = 0.5499003574478853
User 117097 AUC after training: 0.5500901527852465
User 117097 improves AUC. Keeping the model.
Training on augumented user 89396 28/50 current_auc = 0.5500901527852465
User 89396 AUC after training: 0.5499319900041122
User 89396 does not improve AUC. Reverting changes.
Training on augumented user 5849 29/50 current_auc = 0.5500901527852465
User 5849 AUC after training: 0.5498054597792047
User 5849 does not improve AUC. Reverting changes.
Training on augumented user 43282 30/50 current_auc = 0.5500901527852465
User 43282 AUC after training: 0.5498687248916585
User 43282 does not improve AUC. Reverting changes.
Training on augumented user 85761 31/50 current_auc = 0.5500901527852465
User 85761 AUC after training: 0.5498370923354317
User 85761 does not improve AUC. Reverting changes.
Training on augumented user 15458 32/50 current_auc = 0.5500901527852465
User 15458 AUC after training: 0.549014645873533
User 15458 does not improve AUC. Reverting changes.
Training on augumented user 60772 33/50 current_auc = 0.5500901527852465
User 60772 AUC after training: 0.5498687248916585
User 60772 does not improve AUC. Reverting changes.
Training on augumented user 72396 34/50 current_auc = 0.5500901527852465
User 72396 AUC after training: 0.5501850504539272
User 72396 improves AUC. Keeping the model.
Training on augumented user 62353 35/50 current_auc = 0.5501850504539272
User 62353 AUC after training: 0.5494891342169361
User 62353 does not improve AUC. Reverting changes.
Training on augumented user 62426 36/50 current_auc = 0.5501850504539272
User 62426 AUC after training: 0.549995255116566
User 62426 does not improve AUC. Reverting changes.
Training on augumented user 54487 37/50 current_auc = 0.5501850504539272
User 54487 AUC after training: 0.549963622560339
User 54487 does not improve AUC. Reverting changes.
Training on augumented user 39882 38/50 current_auc = 0.5501850504539272
User 39882 AUC after training: 0.5500268876727928
User 39882 does not improve AUC. Reverting changes.
Training on augumented user 113660 39/50 current_auc = 0.5501850504539272
User 113660 AUC after training: 0.5498054597792048
User 113660 does not improve AUC. Reverting changes.
Training on augumented user 53362 40/50 current_auc = 0.5501850504539272
User 53362 AUC after training: 0.5499319900041122
User 53362 does not improve AUC. Reverting changes.
Training on augumented user 110170 41/50 current_auc = 0.5501850504539272
User 110170 AUC after training: 0.5500585202290197
User 110170 does not improve AUC. Reverting changes.
Training on augumented user 13968 42/50 current_auc = 0.5501850504539272
User 13968 AUC after training: 0.5498054597792048
User 13968 does not improve AUC. Reverting changes.
Training on augumented user 30606 43/50 current_auc = 0.5501850504539272
User 30606 AUC after training: 0.5498370923354317
User 30606 does not improve AUC. Reverting changes.
Training on augumented user 77797 44/50 current_auc = 0.5501850504539272
User 77797 AUC after training: 0.5499003574478853
User 77797 does not improve AUC. Reverting changes.
Training on augumented user 122301 45/50 current_auc = 0.5501850504539272
User 122301 AUC after training: 0.54854015753013
User 122301 does not improve AUC. Reverting changes.
Training on augumented user 99996 46/50 current_auc = 0.5501850504539272
User 99996 AUC after training: 0.5501534178977003
User 99996 does not improve AUC. Reverting changes.
Training on augumented user 50426 47/50 current_auc = 0.5501850504539272
User 50426 AUC after training: 0.5499636225603391
User 50426 does not improve AUC. Reverting changes.
Training on augumented user 59730 48/50 current_auc = 0.5501850504539272
User 59730 AUC after training: 0.5495840318856167
User 59730 does not improve AUC. Reverting changes.
Training on augumented user 122908 49/50 current_auc = 0.5501850504539272
User 122908 AUC after training: 0.549995255116566
User 122908 does not improve AUC. Reverting changes.
[2024-12-02 17:39:19.493912] start test user 41507 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:19.997669] start test user 41507 3/568 recall augumented users by random, augumented_users = [43915, 79977, 45378, 23655, 96945, 78586, 107183, 60295, 86383, 8220, 27600, 135346, 27360, 67965, 54373, 117008, 124615, 127693, 30404, 44133, 69958, 1854, 67927, 11943, 86289, 126877, 19502, 28925, 136673, 47655, 85159, 41216, 115600, 9157, 39384, 31585, 117897, 62932, 110638, 13132, 72878, 54147, 43905, 128593, 90388, 88388, 106109, 27443, 92128, 19439]
[2024-12-02 17:39:20.012881] user = 41507 Cloud 3/568
[2024-12-02 17:39:20.030938] user = 41507 Local 3/568
[2024-12-02 17:39:20.158019] user = 41507 Local+ 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:22.315840] user = 41507 MPDA- 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7505175983436854
Training on augumented user 43915 0/50 current_auc = 0.7505175983436854
User 43915 AUC after training: 0.7505175983436853
User 43915 does not improve AUC. Reverting changes.
Training on augumented user 79977 1/50 current_auc = 0.7505175983436854
User 79977 AUC after training: 0.7484472049689441
User 79977 does not improve AUC. Reverting changes.
Training on augumented user 45378 2/50 current_auc = 0.7505175983436854
User 45378 AUC after training: 0.7494824016563146
User 45378 does not improve AUC. Reverting changes.
Training on augumented user 23655 3/50 current_auc = 0.7505175983436854
User 23655 AUC after training: 0.7505175983436854
User 23655 does not improve AUC. Reverting changes.
Training on augumented user 96945 4/50 current_auc = 0.7505175983436854
User 96945 AUC after training: 0.7505175983436854
User 96945 does not improve AUC. Reverting changes.
Training on augumented user 78586 5/50 current_auc = 0.7505175983436854
User 78586 AUC after training: 0.7494824016563146
User 78586 does not improve AUC. Reverting changes.
Training on augumented user 107183 6/50 current_auc = 0.7505175983436854
User 107183 AUC after training: 0.7515527950310559
User 107183 improves AUC. Keeping the model.
Training on augumented user 60295 7/50 current_auc = 0.7515527950310559
User 60295 AUC after training: 0.7505175983436854
User 60295 does not improve AUC. Reverting changes.
Training on augumented user 86383 8/50 current_auc = 0.7515527950310559
User 86383 AUC after training: 0.7505175983436854
User 86383 does not improve AUC. Reverting changes.
Training on augumented user 8220 9/50 current_auc = 0.7515527950310559
User 8220 AUC after training: 0.7494824016563146
User 8220 does not improve AUC. Reverting changes.
Training on augumented user 27600 10/50 current_auc = 0.7515527950310559
User 27600 AUC after training: 0.7484472049689441
User 27600 does not improve AUC. Reverting changes.
Training on augumented user 135346 11/50 current_auc = 0.7515527950310559
User 135346 AUC after training: 0.7505175983436853
User 135346 does not improve AUC. Reverting changes.
Training on augumented user 27360 12/50 current_auc = 0.7515527950310559
User 27360 AUC after training: 0.7494824016563146
User 27360 does not improve AUC. Reverting changes.
Training on augumented user 67965 13/50 current_auc = 0.7515527950310559
User 67965 AUC after training: 0.7505175983436854
User 67965 does not improve AUC. Reverting changes.
Training on augumented user 54373 14/50 current_auc = 0.7515527950310559
User 54373 AUC after training: 0.7505175983436854
User 54373 does not improve AUC. Reverting changes.
Training on augumented user 117008 15/50 current_auc = 0.7515527950310559
User 117008 AUC after training: 0.7505175983436854
User 117008 does not improve AUC. Reverting changes.
Training on augumented user 124615 16/50 current_auc = 0.7515527950310559
User 124615 AUC after training: 0.7505175983436854
User 124615 does not improve AUC. Reverting changes.
Training on augumented user 127693 17/50 current_auc = 0.7515527950310559
User 127693 AUC after training: 0.7515527950310559
User 127693 does not improve AUC. Reverting changes.
Training on augumented user 30404 18/50 current_auc = 0.7515527950310559
User 30404 AUC after training: 0.7515527950310559
User 30404 does not improve AUC. Reverting changes.
Training on augumented user 44133 19/50 current_auc = 0.7515527950310559
User 44133 AUC after training: 0.7505175983436854
User 44133 does not improve AUC. Reverting changes.
Training on augumented user 69958 20/50 current_auc = 0.7515527950310559
User 69958 AUC after training: 0.7515527950310559
User 69958 does not improve AUC. Reverting changes.
Training on augumented user 1854 21/50 current_auc = 0.7515527950310559
User 1854 AUC after training: 0.7484472049689441
User 1854 does not improve AUC. Reverting changes.
Training on augumented user 67927 22/50 current_auc = 0.7515527950310559
User 67927 AUC after training: 0.7505175983436854
User 67927 does not improve AUC. Reverting changes.
Training on augumented user 11943 23/50 current_auc = 0.7515527950310559
User 11943 AUC after training: 0.7494824016563146
User 11943 does not improve AUC. Reverting changes.
Training on augumented user 86289 24/50 current_auc = 0.7515527950310559
User 86289 AUC after training: 0.7525879917184265
User 86289 improves AUC. Keeping the model.
Training on augumented user 126877 25/50 current_auc = 0.7525879917184265
User 126877 AUC after training: 0.7505175983436854
User 126877 does not improve AUC. Reverting changes.
Training on augumented user 19502 26/50 current_auc = 0.7525879917184265
User 19502 AUC after training: 0.7505175983436854
User 19502 does not improve AUC. Reverting changes.
Training on augumented user 28925 27/50 current_auc = 0.7525879917184265
User 28925 AUC after training: 0.7505175983436854
User 28925 does not improve AUC. Reverting changes.
Training on augumented user 136673 28/50 current_auc = 0.7525879917184265
User 136673 AUC after training: 0.7515527950310559
User 136673 does not improve AUC. Reverting changes.
Training on augumented user 47655 29/50 current_auc = 0.7525879917184265
User 47655 AUC after training: 0.7515527950310559
User 47655 does not improve AUC. Reverting changes.
Training on augumented user 85159 30/50 current_auc = 0.7525879917184265
User 85159 AUC after training: 0.7525879917184265
User 85159 does not improve AUC. Reverting changes.
Training on augumented user 41216 31/50 current_auc = 0.7525879917184265
User 41216 AUC after training: 0.7505175983436854
User 41216 does not improve AUC. Reverting changes.
Training on augumented user 115600 32/50 current_auc = 0.7525879917184265
User 115600 AUC after training: 0.7515527950310559
User 115600 does not improve AUC. Reverting changes.
Training on augumented user 9157 33/50 current_auc = 0.7525879917184265
User 9157 AUC after training: 0.7505175983436854
User 9157 does not improve AUC. Reverting changes.
Training on augumented user 39384 34/50 current_auc = 0.7525879917184265
User 39384 AUC after training: 0.7494824016563147
User 39384 does not improve AUC. Reverting changes.
Training on augumented user 31585 35/50 current_auc = 0.7525879917184265
User 31585 AUC after training: 0.7515527950310559
User 31585 does not improve AUC. Reverting changes.
Training on augumented user 117897 36/50 current_auc = 0.7525879917184265
User 117897 AUC after training: 0.7515527950310559
User 117897 does not improve AUC. Reverting changes.
Training on augumented user 62932 37/50 current_auc = 0.7525879917184265
User 62932 AUC after training: 0.7525879917184265
User 62932 does not improve AUC. Reverting changes.
Training on augumented user 110638 38/50 current_auc = 0.7525879917184265
User 110638 AUC after training: 0.7505175983436853
User 110638 does not improve AUC. Reverting changes.
Training on augumented user 13132 39/50 current_auc = 0.7525879917184265
User 13132 AUC after training: 0.7525879917184265
User 13132 does not improve AUC. Reverting changes.
Training on augumented user 72878 40/50 current_auc = 0.7525879917184265
User 72878 AUC after training: 0.7494824016563146
User 72878 does not improve AUC. Reverting changes.
Training on augumented user 54147 41/50 current_auc = 0.7525879917184265
User 54147 AUC after training: 0.7484472049689441
User 54147 does not improve AUC. Reverting changes.
Training on augumented user 43905 42/50 current_auc = 0.7525879917184265
User 43905 AUC after training: 0.7474120082815734
User 43905 does not improve AUC. Reverting changes.
Training on augumented user 128593 43/50 current_auc = 0.7525879917184265
User 128593 AUC after training: 0.7525879917184265
User 128593 does not improve AUC. Reverting changes.
Training on augumented user 90388 44/50 current_auc = 0.7525879917184265
User 90388 AUC after training: 0.7494824016563146
User 90388 does not improve AUC. Reverting changes.
Training on augumented user 88388 45/50 current_auc = 0.7525879917184265
User 88388 AUC after training: 0.7505175983436854
User 88388 does not improve AUC. Reverting changes.
Training on augumented user 106109 46/50 current_auc = 0.7525879917184265
User 106109 AUC after training: 0.7515527950310559
User 106109 does not improve AUC. Reverting changes.
Training on augumented user 27443 47/50 current_auc = 0.7525879917184265
User 27443 AUC after training: 0.7515527950310559
User 27443 does not improve AUC. Reverting changes.
Training on augumented user 92128 48/50 current_auc = 0.7525879917184265
User 92128 AUC after training: 0.7505175983436854
User 92128 does not improve AUC. Reverting changes.
Training on augumented user 19439 49/50 current_auc = 0.7525879917184265
User 19439 AUC after training: 0.7505175983436854
User 19439 does not improve AUC. Reverting changes.
[2024-12-02 17:39:49.605230] start test user 41532 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:50.040513] start test user 41532 4/568 recall augumented users by random, augumented_users = [23781, 86926, 99526, 80679, 76921, 88787, 89828, 71234, 20981, 124499, 85025, 122432, 32708, 25737, 93549, 10482, 31127, 13593, 14785, 106442, 9832, 78432, 109700, 95667, 74293, 5692, 59486, 92141, 49037, 88810, 55279, 50737, 99688, 2046, 29968, 8953, 11593, 134496, 112239, 23415, 58499, 16198, 71938, 79018, 70212, 118269, 137751, 76896, 65599, 126039]
[2024-12-02 17:39:50.056723] user = 41532 Cloud 4/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:39:50.063581] user = 41532 Local 4/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:39:50.136763] user = 41532 Local+ 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:39:51.759698] user = 41532 MPDA- 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 23781 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23781 AUC after training: 0.5
User 23781 does not improve AUC. Reverting changes.
Training on augumented user 86926 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86926 AUC after training: 0.5
User 86926 does not improve AUC. Reverting changes.
Training on augumented user 99526 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99526 AUC after training: 0.5
User 99526 does not improve AUC. Reverting changes.
Training on augumented user 80679 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80679 AUC after training: 0.5
User 80679 does not improve AUC. Reverting changes.
Training on augumented user 76921 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76921 AUC after training: 0.5
User 76921 does not improve AUC. Reverting changes.
Training on augumented user 88787 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88787 AUC after training: 0.5
User 88787 does not improve AUC. Reverting changes.
Training on augumented user 89828 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89828 AUC after training: 0.5
User 89828 does not improve AUC. Reverting changes.
Training on augumented user 71234 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71234 AUC after training: 0.5
User 71234 does not improve AUC. Reverting changes.
Training on augumented user 20981 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20981 AUC after training: 0.5
User 20981 does not improve AUC. Reverting changes.
Training on augumented user 124499 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124499 AUC after training: 0.5
User 124499 does not improve AUC. Reverting changes.
Training on augumented user 85025 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85025 AUC after training: 0.5
User 85025 does not improve AUC. Reverting changes.
Training on augumented user 122432 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122432 AUC after training: 0.5
User 122432 does not improve AUC. Reverting changes.
Training on augumented user 32708 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32708 AUC after training: 0.5
User 32708 does not improve AUC. Reverting changes.
Training on augumented user 25737 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25737 AUC after training: 0.5
User 25737 does not improve AUC. Reverting changes.
Training on augumented user 93549 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93549 AUC after training: 0.5
User 93549 does not improve AUC. Reverting changes.
Training on augumented user 10482 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10482 AUC after training: 0.5
User 10482 does not improve AUC. Reverting changes.
Training on augumented user 31127 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31127 AUC after training: 0.5
User 31127 does not improve AUC. Reverting changes.
Training on augumented user 13593 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13593 AUC after training: 0.5
User 13593 does not improve AUC. Reverting changes.
Training on augumented user 14785 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14785 AUC after training: 0.5
User 14785 does not improve AUC. Reverting changes.
Training on augumented user 106442 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106442 AUC after training: 0.5
User 106442 does not improve AUC. Reverting changes.
Training on augumented user 9832 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9832 AUC after training: 0.5
User 9832 does not improve AUC. Reverting changes.
Training on augumented user 78432 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78432 AUC after training: 0.5
User 78432 does not improve AUC. Reverting changes.
Training on augumented user 109700 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109700 AUC after training: 0.5
User 109700 does not improve AUC. Reverting changes.
Training on augumented user 95667 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95667 AUC after training: 0.5
User 95667 does not improve AUC. Reverting changes.
Training on augumented user 74293 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74293 AUC after training: 0.5
User 74293 does not improve AUC. Reverting changes.
Training on augumented user 5692 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5692 AUC after training: 0.5
User 5692 does not improve AUC. Reverting changes.
Training on augumented user 59486 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59486 AUC after training: 0.5
User 59486 does not improve AUC. Reverting changes.
Training on augumented user 92141 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92141 AUC after training: 0.5
User 92141 does not improve AUC. Reverting changes.
Training on augumented user 49037 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49037 AUC after training: 0.5
User 49037 does not improve AUC. Reverting changes.
Training on augumented user 88810 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88810 AUC after training: 0.5
User 88810 does not improve AUC. Reverting changes.
Training on augumented user 55279 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55279 AUC after training: 0.5
User 55279 does not improve AUC. Reverting changes.
Training on augumented user 50737 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50737 AUC after training: 0.5
User 50737 does not improve AUC. Reverting changes.
Training on augumented user 99688 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99688 AUC after training: 0.5
User 99688 does not improve AUC. Reverting changes.
Training on augumented user 2046 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2046 AUC after training: 0.5
User 2046 does not improve AUC. Reverting changes.
Training on augumented user 29968 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29968 AUC after training: 0.5
User 29968 does not improve AUC. Reverting changes.
Training on augumented user 8953 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8953 AUC after training: 0.5
User 8953 does not improve AUC. Reverting changes.
Training on augumented user 11593 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11593 AUC after training: 0.5
User 11593 does not improve AUC. Reverting changes.
Training on augumented user 134496 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134496 AUC after training: 0.5
User 134496 does not improve AUC. Reverting changes.
Training on augumented user 112239 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112239 AUC after training: 0.5
User 112239 does not improve AUC. Reverting changes.
Training on augumented user 23415 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23415 AUC after training: 0.5
User 23415 does not improve AUC. Reverting changes.
Training on augumented user 58499 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58499 AUC after training: 0.5
User 58499 does not improve AUC. Reverting changes.
Training on augumented user 16198 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16198 AUC after training: 0.5
User 16198 does not improve AUC. Reverting changes.
Training on augumented user 71938 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71938 AUC after training: 0.5
User 71938 does not improve AUC. Reverting changes.
Training on augumented user 79018 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79018 AUC after training: 0.5
User 79018 does not improve AUC. Reverting changes.
Training on augumented user 70212 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70212 AUC after training: 0.5
User 70212 does not improve AUC. Reverting changes.
Training on augumented user 118269 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118269 AUC after training: 0.5
User 118269 does not improve AUC. Reverting changes.
Training on augumented user 137751 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137751 AUC after training: 0.5
User 137751 does not improve AUC. Reverting changes.
Training on augumented user 76896 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76896 AUC after training: 0.5
User 76896 does not improve AUC. Reverting changes.
Training on augumented user 65599 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65599 AUC after training: 0.5
User 65599 does not improve AUC. Reverting changes.
Training on augumented user 126039 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126039 AUC after training: 0.5
User 126039 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:40:20.534493] start test user 41578 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:21.222230] start test user 41578 5/568 recall augumented users by random, augumented_users = [63723, 126161, 79105, 89106, 92907, 56594, 39389, 112979, 98912, 11075, 83945, 81761, 54939, 61416, 128926, 83256, 73939, 43992, 50413, 115835, 111702, 117807, 112343, 26059, 102295, 90660, 43579, 77399, 81777, 87191, 25003, 67652, 126709, 21582, 61632, 13189, 83583, 62731, 18753, 86300, 111500, 119977, 1610, 39096, 49495, 120139, 123591, 90462, 32444, 88777]
[2024-12-02 17:40:21.249624] user = 41578 Cloud 5/568
[2024-12-02 17:40:21.259757] user = 41578 Local 5/568
[2024-12-02 17:40:21.279045] user = 41578 Local+ 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:23.262857] user = 41578 MPDA- 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 63723 0/50 current_auc = 0.5
User 63723 AUC after training: 0.5
User 63723 does not improve AUC. Reverting changes.
Training on augumented user 126161 1/50 current_auc = 0.5
User 126161 AUC after training: 0.5
User 126161 does not improve AUC. Reverting changes.
Training on augumented user 79105 2/50 current_auc = 0.5
User 79105 AUC after training: 0.5
User 79105 does not improve AUC. Reverting changes.
Training on augumented user 89106 3/50 current_auc = 0.5
User 89106 AUC after training: 0.5
User 89106 does not improve AUC. Reverting changes.
Training on augumented user 92907 4/50 current_auc = 0.5
User 92907 AUC after training: 0.5
User 92907 does not improve AUC. Reverting changes.
Training on augumented user 56594 5/50 current_auc = 0.5
User 56594 AUC after training: 0.5
User 56594 does not improve AUC. Reverting changes.
Training on augumented user 39389 6/50 current_auc = 0.5
User 39389 AUC after training: 0.5
User 39389 does not improve AUC. Reverting changes.
Training on augumented user 112979 7/50 current_auc = 0.5
User 112979 AUC after training: 0.5
User 112979 does not improve AUC. Reverting changes.
Training on augumented user 98912 8/50 current_auc = 0.5
User 98912 AUC after training: 0.5
User 98912 does not improve AUC. Reverting changes.
Training on augumented user 11075 9/50 current_auc = 0.5
User 11075 AUC after training: 0.5
User 11075 does not improve AUC. Reverting changes.
Training on augumented user 83945 10/50 current_auc = 0.5
User 83945 AUC after training: 0.5
User 83945 does not improve AUC. Reverting changes.
Training on augumented user 81761 11/50 current_auc = 0.5
User 81761 AUC after training: 0.5
User 81761 does not improve AUC. Reverting changes.
Training on augumented user 54939 12/50 current_auc = 0.5
User 54939 AUC after training: 0.5
User 54939 does not improve AUC. Reverting changes.
Training on augumented user 61416 13/50 current_auc = 0.5
User 61416 AUC after training: 0.5
User 61416 does not improve AUC. Reverting changes.
Training on augumented user 128926 14/50 current_auc = 0.5
User 128926 AUC after training: 0.5
User 128926 does not improve AUC. Reverting changes.
Training on augumented user 83256 15/50 current_auc = 0.5
User 83256 AUC after training: 0.5
User 83256 does not improve AUC. Reverting changes.
Training on augumented user 73939 16/50 current_auc = 0.5
User 73939 AUC after training: 0.5
User 73939 does not improve AUC. Reverting changes.
Training on augumented user 43992 17/50 current_auc = 0.5
User 43992 AUC after training: 0.5
User 43992 does not improve AUC. Reverting changes.
Training on augumented user 50413 18/50 current_auc = 0.5
User 50413 AUC after training: 0.5
User 50413 does not improve AUC. Reverting changes.
Training on augumented user 115835 19/50 current_auc = 0.5
User 115835 AUC after training: 0.5
User 115835 does not improve AUC. Reverting changes.
Training on augumented user 111702 20/50 current_auc = 0.5
User 111702 AUC after training: 0.5
User 111702 does not improve AUC. Reverting changes.
Training on augumented user 117807 21/50 current_auc = 0.5
User 117807 AUC after training: 0.5
User 117807 does not improve AUC. Reverting changes.
Training on augumented user 112343 22/50 current_auc = 0.5
User 112343 AUC after training: 0.5
User 112343 does not improve AUC. Reverting changes.
Training on augumented user 26059 23/50 current_auc = 0.5
User 26059 AUC after training: 0.5
User 26059 does not improve AUC. Reverting changes.
Training on augumented user 102295 24/50 current_auc = 0.5
User 102295 AUC after training: 0.5
User 102295 does not improve AUC. Reverting changes.
Training on augumented user 90660 25/50 current_auc = 0.5
User 90660 AUC after training: 0.5
User 90660 does not improve AUC. Reverting changes.
Training on augumented user 43579 26/50 current_auc = 0.5
User 43579 AUC after training: 0.5
User 43579 does not improve AUC. Reverting changes.
Training on augumented user 77399 27/50 current_auc = 0.5
User 77399 AUC after training: 0.5
User 77399 does not improve AUC. Reverting changes.
Training on augumented user 81777 28/50 current_auc = 0.5
User 81777 AUC after training: 0.5
User 81777 does not improve AUC. Reverting changes.
Training on augumented user 87191 29/50 current_auc = 0.5
User 87191 AUC after training: 0.5
User 87191 does not improve AUC. Reverting changes.
Training on augumented user 25003 30/50 current_auc = 0.5
User 25003 AUC after training: 0.5
User 25003 does not improve AUC. Reverting changes.
Training on augumented user 67652 31/50 current_auc = 0.5
User 67652 AUC after training: 0.5
User 67652 does not improve AUC. Reverting changes.
Training on augumented user 126709 32/50 current_auc = 0.5
User 126709 AUC after training: 0.5
User 126709 does not improve AUC. Reverting changes.
Training on augumented user 21582 33/50 current_auc = 0.5
User 21582 AUC after training: 0.5
User 21582 does not improve AUC. Reverting changes.
Training on augumented user 61632 34/50 current_auc = 0.5
User 61632 AUC after training: 0.5
User 61632 does not improve AUC. Reverting changes.
Training on augumented user 13189 35/50 current_auc = 0.5
User 13189 AUC after training: 0.5
User 13189 does not improve AUC. Reverting changes.
Training on augumented user 83583 36/50 current_auc = 0.5
User 83583 AUC after training: 0.5
User 83583 does not improve AUC. Reverting changes.
Training on augumented user 62731 37/50 current_auc = 0.5
User 62731 AUC after training: 0.5
User 62731 does not improve AUC. Reverting changes.
Training on augumented user 18753 38/50 current_auc = 0.5
User 18753 AUC after training: 0.5
User 18753 does not improve AUC. Reverting changes.
Training on augumented user 86300 39/50 current_auc = 0.5
User 86300 AUC after training: 0.5
User 86300 does not improve AUC. Reverting changes.
Training on augumented user 111500 40/50 current_auc = 0.5
User 111500 AUC after training: 0.5
User 111500 does not improve AUC. Reverting changes.
Training on augumented user 119977 41/50 current_auc = 0.5
User 119977 AUC after training: 0.5
User 119977 does not improve AUC. Reverting changes.
Training on augumented user 1610 42/50 current_auc = 0.5
User 1610 AUC after training: 0.5
User 1610 does not improve AUC. Reverting changes.
Training on augumented user 39096 43/50 current_auc = 0.5
User 39096 AUC after training: 0.5
User 39096 does not improve AUC. Reverting changes.
Training on augumented user 49495 44/50 current_auc = 0.5
User 49495 AUC after training: 0.5
User 49495 does not improve AUC. Reverting changes.
Training on augumented user 120139 45/50 current_auc = 0.5
User 120139 AUC after training: 0.5
User 120139 does not improve AUC. Reverting changes.
Training on augumented user 123591 46/50 current_auc = 0.5
User 123591 AUC after training: 0.5
User 123591 does not improve AUC. Reverting changes.
Training on augumented user 90462 47/50 current_auc = 0.5
User 90462 AUC after training: 0.5
User 90462 does not improve AUC. Reverting changes.
Training on augumented user 32444 48/50 current_auc = 0.5
User 32444 AUC after training: 0.5
User 32444 does not improve AUC. Reverting changes.
Training on augumented user 88777 49/50 current_auc = 0.5
User 88777 AUC after training: 0.5
User 88777 does not improve AUC. Reverting changes.
[2024-12-02 17:40:48.664762] start test user 41613 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:49.064525] start test user 41613 6/568 recall augumented users by random, augumented_users = [75297, 23626, 110625, 129092, 34258, 32832, 95244, 84834, 49663, 101324, 17503, 28780, 23579, 45798, 95933, 51787, 43792, 126264, 70335, 12325, 3946, 92332, 136749, 25972, 134934, 69861, 27716, 93921, 65345, 29074, 14030, 134565, 38881, 15060, 91130, 133851, 40659, 62614, 79356, 137730, 5846, 59612, 41555, 7698, 49717, 95379, 109214, 46152, 99366, 30538]
[2024-12-02 17:40:49.081693] user = 41613 Cloud 6/568
[2024-12-02 17:40:49.123759] user = 41613 Local 6/568
[2024-12-02 17:40:49.543912] user = 41613 Local+ 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:51.854037] user = 41613 MPDA- 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6396650326797385
Training on augumented user 75297 0/50 current_auc = 0.6396650326797385
User 75297 AUC after training: 0.6394607843137254
User 75297 does not improve AUC. Reverting changes.
Training on augumented user 23626 1/50 current_auc = 0.6396650326797385
User 23626 AUC after training: 0.6402369281045751
User 23626 improves AUC. Keeping the model.
Training on augumented user 110625 2/50 current_auc = 0.6402369281045751
User 110625 AUC after training: 0.6409313725490196
User 110625 improves AUC. Keeping the model.
Training on augumented user 129092 3/50 current_auc = 0.6409313725490196
User 129092 AUC after training: 0.6367238562091504
User 129092 does not improve AUC. Reverting changes.
Training on augumented user 34258 4/50 current_auc = 0.6409313725490196
User 34258 AUC after training: 0.6395833333333333
User 34258 does not improve AUC. Reverting changes.
Training on augumented user 32832 5/50 current_auc = 0.6409313725490196
User 32832 AUC after training: 0.6412990196078431
User 32832 improves AUC. Keeping the model.
Training on augumented user 95244 6/50 current_auc = 0.6412990196078431
User 95244 AUC after training: 0.6412173202614379
User 95244 does not improve AUC. Reverting changes.
Training on augumented user 84834 7/50 current_auc = 0.6412990196078431
User 84834 AUC after training: 0.6411764705882352
User 84834 does not improve AUC. Reverting changes.
Training on augumented user 49663 8/50 current_auc = 0.6412990196078431
User 49663 AUC after training: 0.6408905228758169
User 49663 does not improve AUC. Reverting changes.
Training on augumented user 101324 9/50 current_auc = 0.6412990196078431
User 101324 AUC after training: 0.6402777777777778
User 101324 does not improve AUC. Reverting changes.
Training on augumented user 17503 10/50 current_auc = 0.6412990196078431
User 17503 AUC after training: 0.6424836601307189
User 17503 improves AUC. Keeping the model.
Training on augumented user 28780 11/50 current_auc = 0.6424836601307189
User 28780 AUC after training: 0.6427287581699347
User 28780 improves AUC. Keeping the model.
Training on augumented user 23579 12/50 current_auc = 0.6427287581699347
User 23579 AUC after training: 0.6411356209150326
User 23579 does not improve AUC. Reverting changes.
Training on augumented user 45798 13/50 current_auc = 0.6427287581699347
User 45798 AUC after training: 0.6421977124183007
User 45798 does not improve AUC. Reverting changes.
Training on augumented user 95933 14/50 current_auc = 0.6427287581699347
User 95933 AUC after training: 0.6429738562091504
User 95933 improves AUC. Keeping the model.
Training on augumented user 51787 15/50 current_auc = 0.6429738562091504
User 51787 AUC after training: 0.642483660130719
User 51787 does not improve AUC. Reverting changes.
Training on augumented user 43792 16/50 current_auc = 0.6429738562091504
User 43792 AUC after training: 0.643014705882353
User 43792 improves AUC. Keeping the model.
Training on augumented user 126264 17/50 current_auc = 0.643014705882353
User 126264 AUC after training: 0.6428513071895425
User 126264 does not improve AUC. Reverting changes.
Training on augumented user 70335 18/50 current_auc = 0.643014705882353
User 70335 AUC after training: 0.6423611111111112
User 70335 does not improve AUC. Reverting changes.
Training on augumented user 12325 19/50 current_auc = 0.643014705882353
User 12325 AUC after training: 0.6426062091503267
User 12325 does not improve AUC. Reverting changes.
Training on augumented user 3946 20/50 current_auc = 0.643014705882353
User 3946 AUC after training: 0.6431781045751634
User 3946 improves AUC. Keeping the model.
Training on augumented user 92332 21/50 current_auc = 0.6431781045751634
User 92332 AUC after training: 0.642483660130719
User 92332 does not improve AUC. Reverting changes.
Training on augumented user 136749 22/50 current_auc = 0.6431781045751634
User 136749 AUC after training: 0.6430964052287582
User 136749 does not improve AUC. Reverting changes.
Training on augumented user 25972 23/50 current_auc = 0.6431781045751634
User 25972 AUC after training: 0.643014705882353
User 25972 does not improve AUC. Reverting changes.
Training on augumented user 134934 24/50 current_auc = 0.6431781045751634
User 134934 AUC after training: 0.6425653594771242
User 134934 does not improve AUC. Reverting changes.
Training on augumented user 69861 25/50 current_auc = 0.6431781045751634
User 69861 AUC after training: 0.6423202614379085
User 69861 does not improve AUC. Reverting changes.
Training on augumented user 27716 26/50 current_auc = 0.6431781045751634
User 27716 AUC after training: 0.6428513071895425
User 27716 does not improve AUC. Reverting changes.
Training on augumented user 93921 27/50 current_auc = 0.6431781045751634
User 93921 AUC after training: 0.6422385620915033
User 93921 does not improve AUC. Reverting changes.
Training on augumented user 65345 28/50 current_auc = 0.6431781045751634
User 65345 AUC after training: 0.6411764705882352
User 65345 does not improve AUC. Reverting changes.
Training on augumented user 29074 29/50 current_auc = 0.6431781045751634
User 29074 AUC after training: 0.6426470588235293
User 29074 does not improve AUC. Reverting changes.
Training on augumented user 14030 30/50 current_auc = 0.6431781045751634
User 14030 AUC after training: 0.6429738562091504
User 14030 does not improve AUC. Reverting changes.
Training on augumented user 134565 31/50 current_auc = 0.6431781045751634
User 134565 AUC after training: 0.6420751633986929
User 134565 does not improve AUC. Reverting changes.
Training on augumented user 38881 32/50 current_auc = 0.6431781045751634
User 38881 AUC after training: 0.6422794117647058
User 38881 does not improve AUC. Reverting changes.
Training on augumented user 15060 33/50 current_auc = 0.6431781045751634
User 15060 AUC after training: 0.6427696078431372
User 15060 does not improve AUC. Reverting changes.
Training on augumented user 91130 34/50 current_auc = 0.6431781045751634
User 91130 AUC after training: 0.6428921568627451
User 91130 does not improve AUC. Reverting changes.
Training on augumented user 133851 35/50 current_auc = 0.6431781045751634
User 133851 AUC after training: 0.6425245098039215
User 133851 does not improve AUC. Reverting changes.
Training on augumented user 40659 36/50 current_auc = 0.6431781045751634
User 40659 AUC after training: 0.6432598039215687
User 40659 improves AUC. Keeping the model.
Training on augumented user 62614 37/50 current_auc = 0.6432598039215687
User 62614 AUC after training: 0.6432189542483661
User 62614 does not improve AUC. Reverting changes.
Training on augumented user 79356 38/50 current_auc = 0.6432598039215687
User 79356 AUC after training: 0.6428513071895424
User 79356 does not improve AUC. Reverting changes.
Training on augumented user 137730 39/50 current_auc = 0.6432598039215687
User 137730 AUC after training: 0.6426062091503267
User 137730 does not improve AUC. Reverting changes.
Training on augumented user 5846 40/50 current_auc = 0.6432598039215687
User 5846 AUC after training: 0.6433823529411764
User 5846 improves AUC. Keeping the model.
Training on augumented user 59612 41/50 current_auc = 0.6433823529411764
User 59612 AUC after training: 0.6433006535947712
User 59612 does not improve AUC. Reverting changes.
Training on augumented user 41555 42/50 current_auc = 0.6433823529411764
User 41555 AUC after training: 0.643218954248366
User 41555 does not improve AUC. Reverting changes.
Training on augumented user 7698 43/50 current_auc = 0.6433823529411764
User 7698 AUC after training: 0.642687908496732
User 7698 does not improve AUC. Reverting changes.
Training on augumented user 49717 44/50 current_auc = 0.6433823529411764
User 49717 AUC after training: 0.6433823529411765
User 49717 improves AUC. Keeping the model.
Training on augumented user 95379 45/50 current_auc = 0.6433823529411765
User 95379 AUC after training: 0.643014705882353
User 95379 does not improve AUC. Reverting changes.
Training on augumented user 109214 46/50 current_auc = 0.6433823529411765
User 109214 AUC after training: 0.6430964052287581
User 109214 does not improve AUC. Reverting changes.
Training on augumented user 46152 47/50 current_auc = 0.6433823529411765
User 46152 AUC after training: 0.6437091503267974
User 46152 improves AUC. Keeping the model.
Training on augumented user 99366 48/50 current_auc = 0.6437091503267974
User 99366 AUC after training: 0.643423202614379
User 99366 does not improve AUC. Reverting changes.
Training on augumented user 30538 49/50 current_auc = 0.6437091503267974
User 30538 AUC after training: 0.6436274509803921
User 30538 does not improve AUC. Reverting changes.
[2024-12-02 17:41:21.685211] start test user 41638 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:22.299435] start test user 41638 7/568 recall augumented users by random, augumented_users = [101353, 117661, 110183, 119519, 84642, 133519, 87639, 4597, 130723, 71066, 58206, 129115, 2013, 57699, 24971, 4443, 85819, 120616, 34185, 77552, 28711, 101425, 58489, 30534, 36845, 11180, 129183, 94900, 127800, 96781, 47629, 46110, 7118, 104886, 120633, 98937, 70348, 80765, 79305, 21659, 64206, 103604, 69385, 58208, 102338, 68871, 44968, 12565, 14896, 28028]
[2024-12-02 17:41:22.328566] user = 41638 Cloud 7/568
[2024-12-02 17:41:22.499426] user = 41638 Local 7/568
[2024-12-02 17:41:22.821207] user = 41638 Local+ 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:24.650670] user = 41638 MPDA- 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6108009923799398
Training on augumented user 101353 0/50 current_auc = 0.6108009923799398
User 101353 AUC after training: 0.6111288321814639
User 101353 improves AUC. Keeping the model.
Training on augumented user 117661 1/50 current_auc = 0.6111288321814639
User 117661 AUC after training: 0.611053517632465
User 117661 does not improve AUC. Reverting changes.
Training on augumented user 110183 2/50 current_auc = 0.6111288321814639
User 110183 AUC after training: 0.6109117490696439
User 110183 does not improve AUC. Reverting changes.
Training on augumented user 119519 3/50 current_auc = 0.6111288321814639
User 119519 AUC after training: 0.6109914938862306
User 119519 does not improve AUC. Reverting changes.
Training on augumented user 84642 4/50 current_auc = 0.6111288321814639
User 84642 AUC after training: 0.6111731348573454
User 84642 improves AUC. Keeping the model.
Training on augumented user 133519 5/50 current_auc = 0.6111731348573454
User 133519 AUC after training: 0.6113547758284601
User 133519 improves AUC. Keeping the model.
Training on augumented user 87639 6/50 current_auc = 0.6113547758284601
User 87639 AUC after training: 0.6114832535885167
User 87639 improves AUC. Keeping the model.
Training on augumented user 4597 7/50 current_auc = 0.6114832535885167
User 4597 AUC after training: 0.6127325890483786
User 4597 improves AUC. Keeping the model.
Training on augumented user 130723 8/50 current_auc = 0.6127325890483786
User 130723 AUC after training: 0.6127901825270246
User 130723 improves AUC. Keeping the model.
Training on augumented user 71066 9/50 current_auc = 0.6127901825270246
User 71066 AUC after training: 0.6125598086124402
User 71066 does not improve AUC. Reverting changes.
Training on augumented user 58206 10/50 current_auc = 0.6127901825270246
User 58206 AUC after training: 0.6128389154704944
User 58206 improves AUC. Keeping the model.
Training on augumented user 129115 11/50 current_auc = 0.6128389154704944
User 129115 AUC after training: 0.6125199362041468
User 129115 does not improve AUC. Reverting changes.
Training on augumented user 2013 12/50 current_auc = 0.6128389154704944
User 2013 AUC after training: 0.6128256246677299
User 2013 does not improve AUC. Reverting changes.
Training on augumented user 57699 13/50 current_auc = 0.6128389154704944
User 57699 AUC after training: 0.6128211944001418
User 57699 does not improve AUC. Reverting changes.
Training on augumented user 24971 14/50 current_auc = 0.6128389154704944
User 24971 AUC after training: 0.6114788233209285
User 24971 does not improve AUC. Reverting changes.
Training on augumented user 4443 15/50 current_auc = 0.6128389154704944
User 4443 AUC after training: 0.6127015771752614
User 4443 does not improve AUC. Reverting changes.
Training on augumented user 85819 16/50 current_auc = 0.6128389154704944
User 85819 AUC after training: 0.6131313131313132
User 85819 improves AUC. Keeping the model.
Training on augumented user 120616 17/50 current_auc = 0.6131313131313132
User 120616 AUC after training: 0.6130781499202551
User 120616 does not improve AUC. Reverting changes.
Training on augumented user 34185 18/50 current_auc = 0.6131313131313132
User 34185 AUC after training: 0.6118819776714514
User 34185 does not improve AUC. Reverting changes.
Training on augumented user 77552 19/50 current_auc = 0.6131313131313132
User 77552 AUC after training: 0.6130692893850789
User 77552 does not improve AUC. Reverting changes.
Training on augumented user 28711 20/50 current_auc = 0.6131313131313132
User 28711 AUC after training: 0.6133218146376042
User 28711 improves AUC. Keeping the model.
Training on augumented user 101425 21/50 current_auc = 0.6133218146376042
User 101425 AUC after training: 0.6132775119617224
User 101425 does not improve AUC. Reverting changes.
Training on augumented user 58489 22/50 current_auc = 0.6133218146376042
User 58489 AUC after training: 0.6132021974127237
User 58489 does not improve AUC. Reverting changes.
Training on augumented user 30534 23/50 current_auc = 0.6133218146376042
User 30534 AUC after training: 0.6128034733297891
User 30534 does not improve AUC. Reverting changes.
Training on augumented user 36845 24/50 current_auc = 0.6133218146376042
User 36845 AUC after training: 0.6130294169767854
User 36845 does not improve AUC. Reverting changes.
Training on augumented user 11180 25/50 current_auc = 0.6133218146376042
User 11180 AUC after training: 0.6129097997519051
User 11180 does not improve AUC. Reverting changes.
Training on augumented user 129183 26/50 current_auc = 0.6133218146376042
User 129183 AUC after training: 0.6137449051922736
User 129183 improves AUC. Keeping the model.
Training on augumented user 94900 27/50 current_auc = 0.6137449051922736
User 94900 AUC after training: 0.6138357256778311
User 94900 improves AUC. Keeping the model.
Training on augumented user 127800 28/50 current_auc = 0.6138357256778311
User 127800 AUC after training: 0.6136585149743043
User 127800 does not improve AUC. Reverting changes.
Training on augumented user 96781 29/50 current_auc = 0.6138357256778311
User 96781 AUC after training: 0.6138091440723019
User 96781 does not improve AUC. Reverting changes.
Training on augumented user 47629 30/50 current_auc = 0.6138357256778311
User 47629 AUC after training: 0.6144205209994683
User 47629 improves AUC. Keeping the model.
Training on augumented user 46110 31/50 current_auc = 0.6144205209994683
User 46110 AUC after training: 0.6139066099592416
User 46110 does not improve AUC. Reverting changes.
Training on augumented user 7118 32/50 current_auc = 0.6144205209994683
User 7118 AUC after training: 0.614409445330498
User 7118 does not improve AUC. Reverting changes.
Training on augumented user 104886 33/50 current_auc = 0.6144205209994683
User 104886 AUC after training: 0.614739500265816
User 104886 improves AUC. Keeping the model.
Training on augumented user 120633 34/50 current_auc = 0.614739500265816
User 120633 AUC after training: 0.6150318979266347
User 120633 improves AUC. Keeping the model.
Training on augumented user 98937 35/50 current_auc = 0.6150318979266347
User 98937 AUC after training: 0.614327485380117
User 98937 does not improve AUC. Reverting changes.
Training on augumented user 70348 36/50 current_auc = 0.6150318979266347
User 70348 AUC after training: 0.6148856990962254
User 70348 does not improve AUC. Reverting changes.
Training on augumented user 80765 37/50 current_auc = 0.6150318979266347
User 80765 AUC after training: 0.6150451887293993
User 80765 improves AUC. Keeping the model.
Training on augumented user 79305 38/50 current_auc = 0.6150451887293993
User 79305 AUC after training: 0.6151027822080454
User 79305 improves AUC. Keeping the model.
Training on augumented user 21659 39/50 current_auc = 0.6151027822080454
User 21659 AUC after training: 0.6150894914052809
User 21659 does not improve AUC. Reverting changes.
Training on augumented user 64206 40/50 current_auc = 0.6151027822080454
User 64206 AUC after training: 0.6149676590466064
User 64206 does not improve AUC. Reverting changes.
Training on augumented user 103604 41/50 current_auc = 0.6151027822080454
User 103604 AUC after training: 0.6148591174906963
User 103604 does not improve AUC. Reverting changes.
Training on augumented user 69385 42/50 current_auc = 0.6151027822080454
User 69385 AUC after training: 0.6149964557859294
User 69385 does not improve AUC. Reverting changes.
Training on augumented user 58208 43/50 current_auc = 0.6151027822080454
User 58208 AUC after training: 0.6145578592947014
User 58208 does not improve AUC. Reverting changes.
Training on augumented user 102338 44/50 current_auc = 0.6151027822080454
User 102338 AUC after training: 0.615093921672869
User 102338 does not improve AUC. Reverting changes.
Training on augumented user 68871 45/50 current_auc = 0.6151027822080454
User 68871 AUC after training: 0.6152977139819245
User 68871 improves AUC. Keeping the model.
Training on augumented user 44968 46/50 current_auc = 0.6152977139819245
User 44968 AUC after training: 0.6153021442495126
User 44968 improves AUC. Keeping the model.
Training on augumented user 12565 47/50 current_auc = 0.6153021442495126
User 12565 AUC after training: 0.6152246145667197
User 12565 does not improve AUC. Reverting changes.
Training on augumented user 14896 48/50 current_auc = 0.6153021442495126
User 14896 AUC after training: 0.6150318979266347
User 14896 does not improve AUC. Reverting changes.
Training on augumented user 28028 49/50 current_auc = 0.6153021442495126
User 28028 AUC after training: 0.6153553074605707
User 28028 improves AUC. Keeping the model.
[2024-12-02 17:42:00.381139] start test user 41651 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:01.324639] start test user 41651 8/568 recall augumented users by random, augumented_users = [8477, 116500, 48127, 26975, 30102, 14587, 119176, 6527, 121026, 36065, 110122, 50876, 49820, 91408, 63062, 118143, 121282, 118400, 50860, 96853, 104906, 79446, 5276, 88004, 91030, 42030, 115387, 115755, 104746, 103023, 27741, 32384, 61661, 109531, 70420, 131489, 18308, 85325, 2597, 22184, 56830, 91658, 87988, 25126, 126651, 79795, 15704, 7033, 7512, 42704]
[2024-12-02 17:42:01.350934] user = 41651 Cloud 8/568
[2024-12-02 17:42:01.362723] user = 41651 Local 8/568
[2024-12-02 17:42:01.469892] user = 41651 Local+ 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:04.125992] user = 41651 MPDA- 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7904761904761904
Training on augumented user 8477 0/50 current_auc = 0.7904761904761904
User 8477 AUC after training: 0.7904761904761904
User 8477 does not improve AUC. Reverting changes.
Training on augumented user 116500 1/50 current_auc = 0.7904761904761904
User 116500 AUC after training: 0.7904761904761904
User 116500 does not improve AUC. Reverting changes.
Training on augumented user 48127 2/50 current_auc = 0.7904761904761904
User 48127 AUC after training: 0.7904761904761904
User 48127 does not improve AUC. Reverting changes.
Training on augumented user 26975 3/50 current_auc = 0.7904761904761904
User 26975 AUC after training: 0.7904761904761904
User 26975 does not improve AUC. Reverting changes.
Training on augumented user 30102 4/50 current_auc = 0.7904761904761904
User 30102 AUC after training: 0.7904761904761904
User 30102 does not improve AUC. Reverting changes.
Training on augumented user 14587 5/50 current_auc = 0.7904761904761904
User 14587 AUC after training: 0.7904761904761904
User 14587 does not improve AUC. Reverting changes.
Training on augumented user 119176 6/50 current_auc = 0.7904761904761904
User 119176 AUC after training: 0.7904761904761904
User 119176 does not improve AUC. Reverting changes.
Training on augumented user 6527 7/50 current_auc = 0.7904761904761904
User 6527 AUC after training: 0.7904761904761904
User 6527 does not improve AUC. Reverting changes.
Training on augumented user 121026 8/50 current_auc = 0.7904761904761904
User 121026 AUC after training: 0.7904761904761904
User 121026 does not improve AUC. Reverting changes.
Training on augumented user 36065 9/50 current_auc = 0.7904761904761904
User 36065 AUC after training: 0.7904761904761904
User 36065 does not improve AUC. Reverting changes.
Training on augumented user 110122 10/50 current_auc = 0.7904761904761904
User 110122 AUC after training: 0.7904761904761904
User 110122 does not improve AUC. Reverting changes.
Training on augumented user 50876 11/50 current_auc = 0.7904761904761904
User 50876 AUC after training: 0.7904761904761904
User 50876 does not improve AUC. Reverting changes.
Training on augumented user 49820 12/50 current_auc = 0.7904761904761904
User 49820 AUC after training: 0.7904761904761904
User 49820 does not improve AUC. Reverting changes.
Training on augumented user 91408 13/50 current_auc = 0.7904761904761904
User 91408 AUC after training: 0.7904761904761904
User 91408 does not improve AUC. Reverting changes.
Training on augumented user 63062 14/50 current_auc = 0.7904761904761904
User 63062 AUC after training: 0.7904761904761904
User 63062 does not improve AUC. Reverting changes.
Training on augumented user 118143 15/50 current_auc = 0.7904761904761904
User 118143 AUC after training: 0.7904761904761904
User 118143 does not improve AUC. Reverting changes.
Training on augumented user 121282 16/50 current_auc = 0.7904761904761904
User 121282 AUC after training: 0.7904761904761904
User 121282 does not improve AUC. Reverting changes.
Training on augumented user 118400 17/50 current_auc = 0.7904761904761904
User 118400 AUC after training: 0.7904761904761904
User 118400 does not improve AUC. Reverting changes.
Training on augumented user 50860 18/50 current_auc = 0.7904761904761904
User 50860 AUC after training: 0.7904761904761904
User 50860 does not improve AUC. Reverting changes.
Training on augumented user 96853 19/50 current_auc = 0.7904761904761904
User 96853 AUC after training: 0.7904761904761904
User 96853 does not improve AUC. Reverting changes.
Training on augumented user 104906 20/50 current_auc = 0.7904761904761904
User 104906 AUC after training: 0.7904761904761904
User 104906 does not improve AUC. Reverting changes.
Training on augumented user 79446 21/50 current_auc = 0.7904761904761904
User 79446 AUC after training: 0.7904761904761904
User 79446 does not improve AUC. Reverting changes.
Training on augumented user 5276 22/50 current_auc = 0.7904761904761904
User 5276 AUC after training: 0.7904761904761904
User 5276 does not improve AUC. Reverting changes.
Training on augumented user 88004 23/50 current_auc = 0.7904761904761904
User 88004 AUC after training: 0.7904761904761904
User 88004 does not improve AUC. Reverting changes.
Training on augumented user 91030 24/50 current_auc = 0.7904761904761904
User 91030 AUC after training: 0.8
User 91030 improves AUC. Keeping the model.
Training on augumented user 42030 25/50 current_auc = 0.8
User 42030 AUC after training: 0.8
User 42030 does not improve AUC. Reverting changes.
Training on augumented user 115387 26/50 current_auc = 0.8
User 115387 AUC after training: 0.8
User 115387 does not improve AUC. Reverting changes.
Training on augumented user 115755 27/50 current_auc = 0.8
User 115755 AUC after training: 0.8
User 115755 does not improve AUC. Reverting changes.
Training on augumented user 104746 28/50 current_auc = 0.8
User 104746 AUC after training: 0.8
User 104746 does not improve AUC. Reverting changes.
Training on augumented user 103023 29/50 current_auc = 0.8
User 103023 AUC after training: 0.8095238095238095
User 103023 improves AUC. Keeping the model.
Training on augumented user 27741 30/50 current_auc = 0.8095238095238095
User 27741 AUC after training: 0.8095238095238095
User 27741 does not improve AUC. Reverting changes.
Training on augumented user 32384 31/50 current_auc = 0.8095238095238095
User 32384 AUC after training: 0.8095238095238095
User 32384 does not improve AUC. Reverting changes.
Training on augumented user 61661 32/50 current_auc = 0.8095238095238095
User 61661 AUC after training: 0.8095238095238095
User 61661 does not improve AUC. Reverting changes.
Training on augumented user 109531 33/50 current_auc = 0.8095238095238095
User 109531 AUC after training: 0.8095238095238095
User 109531 does not improve AUC. Reverting changes.
Training on augumented user 70420 34/50 current_auc = 0.8095238095238095
User 70420 AUC after training: 0.8095238095238095
User 70420 does not improve AUC. Reverting changes.
Training on augumented user 131489 35/50 current_auc = 0.8095238095238095
User 131489 AUC after training: 0.8095238095238095
User 131489 does not improve AUC. Reverting changes.
Training on augumented user 18308 36/50 current_auc = 0.8095238095238095
User 18308 AUC after training: 0.8
User 18308 does not improve AUC. Reverting changes.
Training on augumented user 85325 37/50 current_auc = 0.8095238095238095
User 85325 AUC after training: 0.8095238095238095
User 85325 does not improve AUC. Reverting changes.
Training on augumented user 2597 38/50 current_auc = 0.8095238095238095
User 2597 AUC after training: 0.8095238095238095
User 2597 does not improve AUC. Reverting changes.
Training on augumented user 22184 39/50 current_auc = 0.8095238095238095
User 22184 AUC after training: 0.8
User 22184 does not improve AUC. Reverting changes.
Training on augumented user 56830 40/50 current_auc = 0.8095238095238095
User 56830 AUC after training: 0.8
User 56830 does not improve AUC. Reverting changes.
Training on augumented user 91658 41/50 current_auc = 0.8095238095238095
User 91658 AUC after training: 0.8095238095238095
User 91658 does not improve AUC. Reverting changes.
Training on augumented user 87988 42/50 current_auc = 0.8095238095238095
User 87988 AUC after training: 0.8095238095238095
User 87988 does not improve AUC. Reverting changes.
Training on augumented user 25126 43/50 current_auc = 0.8095238095238095
User 25126 AUC after training: 0.7904761904761904
User 25126 does not improve AUC. Reverting changes.
Training on augumented user 126651 44/50 current_auc = 0.8095238095238095
User 126651 AUC after training: 0.8095238095238095
User 126651 does not improve AUC. Reverting changes.
Training on augumented user 79795 45/50 current_auc = 0.8095238095238095
User 79795 AUC after training: 0.8095238095238095
User 79795 does not improve AUC. Reverting changes.
Training on augumented user 15704 46/50 current_auc = 0.8095238095238095
User 15704 AUC after training: 0.8
User 15704 does not improve AUC. Reverting changes.
Training on augumented user 7033 47/50 current_auc = 0.8095238095238095
User 7033 AUC after training: 0.8095238095238095
User 7033 does not improve AUC. Reverting changes.
Training on augumented user 7512 48/50 current_auc = 0.8095238095238095
User 7512 AUC after training: 0.8095238095238095
User 7512 does not improve AUC. Reverting changes.
Training on augumented user 42704 49/50 current_auc = 0.8095238095238095
User 42704 AUC after training: 0.8
User 42704 does not improve AUC. Reverting changes.
[2024-12-02 17:42:30.353774] start test user 41669 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:30.998398] start test user 41669 9/568 recall augumented users by random, augumented_users = [95001, 133202, 53477, 65297, 101813, 57614, 115933, 75848, 43957, 7817, 54675, 112088, 128077, 30363, 70916, 61400, 113293, 10768, 64118, 90201, 15341, 7213, 138080, 114991, 26812, 27806, 48597, 93129, 25421, 94735, 19447, 14392, 137194, 62738, 73479, 123817, 53416, 113705, 38281, 13168, 117735, 75923, 128701, 2470, 102923, 75190, 36612, 125280, 72789, 91872]
[2024-12-02 17:42:31.014017] user = 41669 Cloud 9/568
[2024-12-02 17:42:31.041724] user = 41669 Local 9/568
[2024-12-02 17:42:31.164630] user = 41669 Local+ 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:34.555158] user = 41669 MPDA- 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6277062208824336
Training on augumented user 95001 0/50 current_auc = 0.6277062208824336
User 95001 AUC after training: 0.6280487804878049
User 95001 improves AUC. Keeping the model.
Training on augumented user 133202 1/50 current_auc = 0.6280487804878049
User 133202 AUC after training: 0.6277747328035078
User 133202 does not improve AUC. Reverting changes.
Training on augumented user 53477 2/50 current_auc = 0.6280487804878049
User 53477 AUC after training: 0.6282543162510276
User 53477 improves AUC. Keeping the model.
Training on augumented user 65297 3/50 current_auc = 0.6282543162510276
User 65297 AUC after training: 0.6278432447245821
User 65297 does not improve AUC. Reverting changes.
Training on augumented user 101813 4/50 current_auc = 0.6282543162510276
User 101813 AUC after training: 0.6273636612770622
User 101813 does not improve AUC. Reverting changes.
Training on augumented user 57614 5/50 current_auc = 0.6282543162510276
User 57614 AUC after training: 0.6280487804878049
User 57614 does not improve AUC. Reverting changes.
Training on augumented user 115933 6/50 current_auc = 0.6282543162510276
User 115933 AUC after training: 0.6270211016716909
User 115933 does not improve AUC. Reverting changes.
Training on augumented user 75848 7/50 current_auc = 0.6282543162510276
User 75848 AUC after training: 0.6281172924088791
User 75848 does not improve AUC. Reverting changes.
Training on augumented user 43957 8/50 current_auc = 0.6282543162510276
User 43957 AUC after training: 0.6277062208824336
User 43957 does not improve AUC. Reverting changes.
Training on augumented user 7817 9/50 current_auc = 0.6282543162510276
User 7817 AUC after training: 0.6280487804878049
User 7817 does not improve AUC. Reverting changes.
Training on augumented user 54675 10/50 current_auc = 0.6282543162510276
User 54675 AUC after training: 0.6276377089613593
User 54675 does not improve AUC. Reverting changes.
Training on augumented user 112088 11/50 current_auc = 0.6282543162510276
User 112088 AUC after training: 0.6279117566456563
User 112088 does not improve AUC. Reverting changes.
Training on augumented user 128077 12/50 current_auc = 0.6282543162510276
User 128077 AUC after training: 0.6283913400931762
User 128077 improves AUC. Keeping the model.
Training on augumented user 30363 13/50 current_auc = 0.6283913400931762
User 30363 AUC after training: 0.6283913400931762
User 30363 does not improve AUC. Reverting changes.
Training on augumented user 70916 14/50 current_auc = 0.6283913400931762
User 70916 AUC after training: 0.6283228281721019
User 70916 does not improve AUC. Reverting changes.
Training on augumented user 61400 15/50 current_auc = 0.6283913400931762
User 61400 AUC after training: 0.6288024116196218
User 61400 improves AUC. Keeping the model.
Training on augumented user 113293 16/50 current_auc = 0.6288024116196218
User 113293 AUC after training: 0.6284598520142505
User 113293 does not improve AUC. Reverting changes.
Training on augumented user 10768 17/50 current_auc = 0.6288024116196218
User 10768 AUC after training: 0.6288024116196218
User 10768 does not improve AUC. Reverting changes.
Training on augumented user 64118 18/50 current_auc = 0.6288024116196218
User 64118 AUC after training: 0.6283913400931762
User 64118 does not improve AUC. Reverting changes.
Training on augumented user 90201 19/50 current_auc = 0.6288024116196218
User 90201 AUC after training: 0.6285283639353247
User 90201 does not improve AUC. Reverting changes.
Training on augumented user 15341 20/50 current_auc = 0.6288024116196218
User 15341 AUC after training: 0.6281858043299534
User 15341 does not improve AUC. Reverting changes.
Training on augumented user 7213 21/50 current_auc = 0.6288024116196218
User 7213 AUC after training: 0.6280487804878049
User 7213 does not improve AUC. Reverting changes.
Training on augumented user 138080 22/50 current_auc = 0.6288024116196218
User 138080 AUC after training: 0.6280487804878049
User 138080 does not improve AUC. Reverting changes.
Training on augumented user 114991 23/50 current_auc = 0.6288024116196218
User 114991 AUC after training: 0.6285283639353247
User 114991 does not improve AUC. Reverting changes.
Training on augumented user 26812 24/50 current_auc = 0.6288024116196218
User 26812 AUC after training: 0.6279117566456563
User 26812 does not improve AUC. Reverting changes.
Training on augumented user 27806 25/50 current_auc = 0.6288024116196218
User 27806 AUC after training: 0.6291449712249931
User 27806 improves AUC. Keeping the model.
Training on augumented user 48597 26/50 current_auc = 0.6291449712249931
User 48597 AUC after training: 0.6289394354617704
User 48597 does not improve AUC. Reverting changes.
Training on augumented user 93129 27/50 current_auc = 0.6291449712249931
User 93129 AUC after training: 0.629350506988216
User 93129 improves AUC. Keeping the model.
Training on augumented user 25421 28/50 current_auc = 0.629350506988216
User 25421 AUC after training: 0.6281172924088791
User 25421 does not improve AUC. Reverting changes.
Training on augumented user 94735 29/50 current_auc = 0.629350506988216
User 94735 AUC after training: 0.6291449712249931
User 94735 does not improve AUC. Reverting changes.
Training on augumented user 19447 30/50 current_auc = 0.629350506988216
User 19447 AUC after training: 0.6288024116196218
User 19447 does not improve AUC. Reverting changes.
Training on augumented user 14392 31/50 current_auc = 0.629350506988216
User 14392 AUC after training: 0.6283913400931763
User 14392 does not improve AUC. Reverting changes.
Training on augumented user 137194 32/50 current_auc = 0.629350506988216
User 137194 AUC after training: 0.6288024116196218
User 137194 does not improve AUC. Reverting changes.
Training on augumented user 62738 33/50 current_auc = 0.629350506988216
User 62738 AUC after training: 0.6292819950671417
User 62738 does not improve AUC. Reverting changes.
Training on augumented user 73479 34/50 current_auc = 0.629350506988216
User 73479 AUC after training: 0.6271581255138394
User 73479 does not improve AUC. Reverting changes.
Training on augumented user 123817 35/50 current_auc = 0.629350506988216
User 123817 AUC after training: 0.6279117566456563
User 123817 does not improve AUC. Reverting changes.
Training on augumented user 53416 36/50 current_auc = 0.629350506988216
User 53416 AUC after training: 0.6287338996985475
User 53416 does not improve AUC. Reverting changes.
Training on augumented user 113705 37/50 current_auc = 0.629350506988216
User 113705 AUC after training: 0.6290079473828446
User 113705 does not improve AUC. Reverting changes.
Training on augumented user 38281 38/50 current_auc = 0.629350506988216
User 38281 AUC after training: 0.6292477391066046
User 38281 does not improve AUC. Reverting changes.
Training on augumented user 13168 39/50 current_auc = 0.629350506988216
User 13168 AUC after training: 0.6292819950671417
User 13168 does not improve AUC. Reverting changes.
Training on augumented user 117735 40/50 current_auc = 0.629350506988216
User 117735 AUC after training: 0.629076459303919
User 117735 does not improve AUC. Reverting changes.
Training on augumented user 75923 41/50 current_auc = 0.629350506988216
User 75923 AUC after training: 0.628596875856399
User 75923 does not improve AUC. Reverting changes.
Training on augumented user 128701 42/50 current_auc = 0.629350506988216
User 128701 AUC after training: 0.6278432447245822
User 128701 does not improve AUC. Reverting changes.
Training on augumented user 2470 43/50 current_auc = 0.629350506988216
User 2470 AUC after training: 0.6281172924088791
User 2470 does not improve AUC. Reverting changes.
Training on augumented user 102923 44/50 current_auc = 0.629350506988216
User 102923 AUC after training: 0.6280487804878049
User 102923 does not improve AUC. Reverting changes.
Training on augumented user 75190 45/50 current_auc = 0.629350506988216
User 75190 AUC after training: 0.6285283639353247
User 75190 does not improve AUC. Reverting changes.
Training on augumented user 36612 46/50 current_auc = 0.629350506988216
User 36612 AUC after training: 0.6287338996985475
User 36612 does not improve AUC. Reverting changes.
Training on augumented user 125280 47/50 current_auc = 0.629350506988216
User 125280 AUC after training: 0.6288709235406961
User 125280 does not improve AUC. Reverting changes.
Training on augumented user 72789 48/50 current_auc = 0.629350506988216
User 72789 AUC after training: 0.6285968758563991
User 72789 does not improve AUC. Reverting changes.
Training on augumented user 91872 49/50 current_auc = 0.629350506988216
User 91872 AUC after training: 0.6288709235406961
User 91872 does not improve AUC. Reverting changes.
[2024-12-02 17:43:06.315707] start test user 41719 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:06.903843] start test user 41719 10/568 recall augumented users by random, augumented_users = [51178, 5712, 81043, 86939, 90155, 135873, 101339, 78423, 132389, 60310, 4926, 12714, 64854, 47776, 110126, 135302, 130789, 127537, 37931, 87568, 95060, 98627, 104191, 30050, 88353, 81448, 135910, 123661, 70451, 27554, 42278, 67314, 131385, 114830, 44717, 10527, 62397, 107403, 28692, 56364, 102541, 138405, 131341, 133111, 397, 45259, 77229, 87906, 64360, 44563]
[2024-12-02 17:43:06.926503] user = 41719 Cloud 10/568
[2024-12-02 17:43:06.974191] user = 41719 Local 10/568
[2024-12-02 17:43:07.106479] user = 41719 Local+ 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:09.744311] user = 41719 MPDA- 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6677631578947368
Training on augumented user 51178 0/50 current_auc = 0.6677631578947368
User 51178 AUC after training: 0.6681743421052632
User 51178 improves AUC. Keeping the model.
Training on augumented user 5712 1/50 current_auc = 0.6681743421052632
User 5712 AUC after training: 0.6683799342105263
User 5712 improves AUC. Keeping the model.
Training on augumented user 81043 2/50 current_auc = 0.6683799342105263
User 81043 AUC after training: 0.6677631578947368
User 81043 does not improve AUC. Reverting changes.
Training on augumented user 86939 3/50 current_auc = 0.6683799342105263
User 86939 AUC after training: 0.6681743421052632
User 86939 does not improve AUC. Reverting changes.
Training on augumented user 90155 4/50 current_auc = 0.6683799342105263
User 90155 AUC after training: 0.6675575657894737
User 90155 does not improve AUC. Reverting changes.
Training on augumented user 135873 5/50 current_auc = 0.6683799342105263
User 135873 AUC after training: 0.6685855263157895
User 135873 improves AUC. Keeping the model.
Training on augumented user 101339 6/50 current_auc = 0.6685855263157895
User 101339 AUC after training: 0.66796875
User 101339 does not improve AUC. Reverting changes.
Training on augumented user 78423 7/50 current_auc = 0.6685855263157895
User 78423 AUC after training: 0.6675575657894738
User 78423 does not improve AUC. Reverting changes.
Training on augumented user 132389 8/50 current_auc = 0.6685855263157895
User 132389 AUC after training: 0.6677631578947368
User 132389 does not improve AUC. Reverting changes.
Training on augumented user 60310 9/50 current_auc = 0.6685855263157895
User 60310 AUC after training: 0.6683799342105263
User 60310 does not improve AUC. Reverting changes.
Training on augumented user 4926 10/50 current_auc = 0.6685855263157895
User 4926 AUC after training: 0.6679687500000001
User 4926 does not improve AUC. Reverting changes.
Training on augumented user 12714 11/50 current_auc = 0.6685855263157895
User 12714 AUC after training: 0.6685855263157895
User 12714 does not improve AUC. Reverting changes.
Training on augumented user 64854 12/50 current_auc = 0.6685855263157895
User 64854 AUC after training: 0.6683799342105264
User 64854 does not improve AUC. Reverting changes.
Training on augumented user 47776 13/50 current_auc = 0.6685855263157895
User 47776 AUC after training: 0.6685855263157895
User 47776 does not improve AUC. Reverting changes.
Training on augumented user 110126 14/50 current_auc = 0.6685855263157895
User 110126 AUC after training: 0.6683799342105264
User 110126 does not improve AUC. Reverting changes.
Training on augumented user 135302 15/50 current_auc = 0.6685855263157895
User 135302 AUC after training: 0.6687911184210527
User 135302 improves AUC. Keeping the model.
Training on augumented user 130789 16/50 current_auc = 0.6687911184210527
User 130789 AUC after training: 0.6681743421052632
User 130789 does not improve AUC. Reverting changes.
Training on augumented user 127537 17/50 current_auc = 0.6687911184210527
User 127537 AUC after training: 0.6657072368421052
User 127537 does not improve AUC. Reverting changes.
Training on augumented user 37931 18/50 current_auc = 0.6687911184210527
User 37931 AUC after training: 0.6683799342105263
User 37931 does not improve AUC. Reverting changes.
Training on augumented user 87568 19/50 current_auc = 0.6687911184210527
User 87568 AUC after training: 0.6689967105263158
User 87568 improves AUC. Keeping the model.
Training on augumented user 95060 20/50 current_auc = 0.6689967105263158
User 95060 AUC after training: 0.6687911184210525
User 95060 does not improve AUC. Reverting changes.
Training on augumented user 98627 21/50 current_auc = 0.6689967105263158
User 98627 AUC after training: 0.6681743421052632
User 98627 does not improve AUC. Reverting changes.
Training on augumented user 104191 22/50 current_auc = 0.6689967105263158
User 104191 AUC after training: 0.6681743421052632
User 104191 does not improve AUC. Reverting changes.
Training on augumented user 30050 23/50 current_auc = 0.6689967105263158
User 30050 AUC after training: 0.6689967105263158
User 30050 does not improve AUC. Reverting changes.
Training on augumented user 88353 24/50 current_auc = 0.6689967105263158
User 88353 AUC after training: 0.6687911184210528
User 88353 does not improve AUC. Reverting changes.
Training on augumented user 81448 25/50 current_auc = 0.6689967105263158
User 81448 AUC after training: 0.6677631578947368
User 81448 does not improve AUC. Reverting changes.
Training on augumented user 135910 26/50 current_auc = 0.6689967105263158
User 135910 AUC after training: 0.6683799342105263
User 135910 does not improve AUC. Reverting changes.
Training on augumented user 123661 27/50 current_auc = 0.6689967105263158
User 123661 AUC after training: 0.6694078947368421
User 123661 improves AUC. Keeping the model.
Training on augumented user 70451 28/50 current_auc = 0.6694078947368421
User 70451 AUC after training: 0.6689967105263158
User 70451 does not improve AUC. Reverting changes.
Training on augumented user 27554 29/50 current_auc = 0.6694078947368421
User 27554 AUC after training: 0.6683799342105263
User 27554 does not improve AUC. Reverting changes.
Training on augumented user 42278 30/50 current_auc = 0.6694078947368421
User 42278 AUC after training: 0.6689967105263158
User 42278 does not improve AUC. Reverting changes.
Training on augumented user 67314 31/50 current_auc = 0.6694078947368421
User 67314 AUC after training: 0.66796875
User 67314 does not improve AUC. Reverting changes.
Training on augumented user 131385 32/50 current_auc = 0.6694078947368421
User 131385 AUC after training: 0.666735197368421
User 131385 does not improve AUC. Reverting changes.
Training on augumented user 114830 33/50 current_auc = 0.6694078947368421
User 114830 AUC after training: 0.6669407894736842
User 114830 does not improve AUC. Reverting changes.
Training on augumented user 44717 34/50 current_auc = 0.6694078947368421
User 44717 AUC after training: 0.66796875
User 44717 does not improve AUC. Reverting changes.
Training on augumented user 10527 35/50 current_auc = 0.6694078947368421
User 10527 AUC after training: 0.6687911184210527
User 10527 does not improve AUC. Reverting changes.
Training on augumented user 62397 36/50 current_auc = 0.6694078947368421
User 62397 AUC after training: 0.6689967105263158
User 62397 does not improve AUC. Reverting changes.
Training on augumented user 107403 37/50 current_auc = 0.6694078947368421
User 107403 AUC after training: 0.6696134868421052
User 107403 improves AUC. Keeping the model.
Training on augumented user 28692 38/50 current_auc = 0.6696134868421052
User 28692 AUC after training: 0.6685855263157895
User 28692 does not improve AUC. Reverting changes.
Training on augumented user 56364 39/50 current_auc = 0.6696134868421052
User 56364 AUC after training: 0.6694078947368421
User 56364 does not improve AUC. Reverting changes.
Training on augumented user 102541 40/50 current_auc = 0.6696134868421052
User 102541 AUC after training: 0.6679687500000001
User 102541 does not improve AUC. Reverting changes.
Training on augumented user 138405 41/50 current_auc = 0.6696134868421052
User 138405 AUC after training: 0.6700246710526316
User 138405 improves AUC. Keeping the model.
Training on augumented user 131341 42/50 current_auc = 0.6700246710526316
User 131341 AUC after training: 0.6700246710526315
User 131341 does not improve AUC. Reverting changes.
Training on augumented user 133111 43/50 current_auc = 0.6700246710526316
User 133111 AUC after training: 0.670641447368421
User 133111 improves AUC. Keeping the model.
Training on augumented user 397 44/50 current_auc = 0.670641447368421
User 397 AUC after training: 0.6700246710526316
User 397 does not improve AUC. Reverting changes.
Training on augumented user 45259 45/50 current_auc = 0.670641447368421
User 45259 AUC after training: 0.6700246710526316
User 45259 does not improve AUC. Reverting changes.
Training on augumented user 77229 46/50 current_auc = 0.670641447368421
User 77229 AUC after training: 0.6685855263157895
User 77229 does not improve AUC. Reverting changes.
Training on augumented user 87906 47/50 current_auc = 0.670641447368421
User 87906 AUC after training: 0.6700246710526315
User 87906 does not improve AUC. Reverting changes.
Training on augumented user 64360 48/50 current_auc = 0.670641447368421
User 64360 AUC after training: 0.6704358552631579
User 64360 does not improve AUC. Reverting changes.
Training on augumented user 44563 49/50 current_auc = 0.670641447368421
User 44563 AUC after training: 0.6696134868421052
User 44563 does not improve AUC. Reverting changes.
[2024-12-02 17:43:43.513541] start test user 41724 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:44.439635] start test user 41724 11/568 recall augumented users by random, augumented_users = [108774, 9575, 23845, 56935, 68439, 51540, 19788, 130072, 60141, 20759, 36188, 90250, 84570, 54680, 128687, 45799, 64113, 129075, 52395, 37534, 35273, 114801, 118521, 130762, 60939, 61932, 27487, 122725, 40094, 85041, 105911, 1312, 56216, 65968, 24565, 107212, 50893, 35728, 37837, 89040, 133042, 134772, 52563, 36090, 21108, 34650, 59219, 99387, 71483, 13366]
[2024-12-02 17:43:44.473614] user = 41724 Cloud 11/568
[2024-12-02 17:43:44.492509] user = 41724 Local 11/568
[2024-12-02 17:43:44.514646] user = 41724 Local+ 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:47.014724] user = 41724 MPDA- 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5476190476190477
Training on augumented user 108774 0/50 current_auc = 0.5476190476190477
User 108774 AUC after training: 0.5456349206349207
User 108774 does not improve AUC. Reverting changes.
Training on augumented user 9575 1/50 current_auc = 0.5476190476190477
User 9575 AUC after training: 0.5436507936507936
User 9575 does not improve AUC. Reverting changes.
Training on augumented user 23845 2/50 current_auc = 0.5476190476190477
User 23845 AUC after training: 0.5476190476190477
User 23845 does not improve AUC. Reverting changes.
Training on augumented user 56935 3/50 current_auc = 0.5476190476190477
User 56935 AUC after training: 0.5426587301587301
User 56935 does not improve AUC. Reverting changes.
Training on augumented user 68439 4/50 current_auc = 0.5476190476190477
User 68439 AUC after training: 0.5406746031746031
User 68439 does not improve AUC. Reverting changes.
Training on augumented user 51540 5/50 current_auc = 0.5476190476190477
User 51540 AUC after training: 0.5466269841269842
User 51540 does not improve AUC. Reverting changes.
Training on augumented user 19788 6/50 current_auc = 0.5476190476190477
User 19788 AUC after training: 0.5436507936507936
User 19788 does not improve AUC. Reverting changes.
Training on augumented user 130072 7/50 current_auc = 0.5476190476190477
User 130072 AUC after training: 0.5466269841269842
User 130072 does not improve AUC. Reverting changes.
Training on augumented user 60141 8/50 current_auc = 0.5476190476190477
User 60141 AUC after training: 0.5436507936507936
User 60141 does not improve AUC. Reverting changes.
Training on augumented user 20759 9/50 current_auc = 0.5476190476190477
User 20759 AUC after training: 0.5456349206349207
User 20759 does not improve AUC. Reverting changes.
Training on augumented user 36188 10/50 current_auc = 0.5476190476190477
User 36188 AUC after training: 0.5456349206349207
User 36188 does not improve AUC. Reverting changes.
Training on augumented user 90250 11/50 current_auc = 0.5476190476190477
User 90250 AUC after training: 0.5456349206349206
User 90250 does not improve AUC. Reverting changes.
Training on augumented user 84570 12/50 current_auc = 0.5476190476190477
User 84570 AUC after training: 0.5406746031746031
User 84570 does not improve AUC. Reverting changes.
Training on augumented user 54680 13/50 current_auc = 0.5476190476190477
User 54680 AUC after training: 0.5456349206349207
User 54680 does not improve AUC. Reverting changes.
Training on augumented user 128687 14/50 current_auc = 0.5476190476190477
User 128687 AUC after training: 0.5456349206349206
User 128687 does not improve AUC. Reverting changes.
Training on augumented user 45799 15/50 current_auc = 0.5476190476190477
User 45799 AUC after training: 0.5486111111111112
User 45799 improves AUC. Keeping the model.
Training on augumented user 64113 16/50 current_auc = 0.5486111111111112
User 64113 AUC after training: 0.5446428571428571
User 64113 does not improve AUC. Reverting changes.
Training on augumented user 129075 17/50 current_auc = 0.5486111111111112
User 129075 AUC after training: 0.5436507936507936
User 129075 does not improve AUC. Reverting changes.
Training on augumented user 52395 18/50 current_auc = 0.5486111111111112
User 52395 AUC after training: 0.5446428571428571
User 52395 does not improve AUC. Reverting changes.
Training on augumented user 37534 19/50 current_auc = 0.5486111111111112
User 37534 AUC after training: 0.5456349206349207
User 37534 does not improve AUC. Reverting changes.
Training on augumented user 35273 20/50 current_auc = 0.5486111111111112
User 35273 AUC after training: 0.5456349206349207
User 35273 does not improve AUC. Reverting changes.
Training on augumented user 114801 21/50 current_auc = 0.5486111111111112
User 114801 AUC after training: 0.5426587301587302
User 114801 does not improve AUC. Reverting changes.
Training on augumented user 118521 22/50 current_auc = 0.5486111111111112
User 118521 AUC after training: 0.5446428571428572
User 118521 does not improve AUC. Reverting changes.
Training on augumented user 130762 23/50 current_auc = 0.5486111111111112
User 130762 AUC after training: 0.5476190476190477
User 130762 does not improve AUC. Reverting changes.
Training on augumented user 60939 24/50 current_auc = 0.5486111111111112
User 60939 AUC after training: 0.5476190476190477
User 60939 does not improve AUC. Reverting changes.
Training on augumented user 61932 25/50 current_auc = 0.5486111111111112
User 61932 AUC after training: 0.5456349206349207
User 61932 does not improve AUC. Reverting changes.
Training on augumented user 27487 26/50 current_auc = 0.5486111111111112
User 27487 AUC after training: 0.5446428571428571
User 27487 does not improve AUC. Reverting changes.
Training on augumented user 122725 27/50 current_auc = 0.5486111111111112
User 122725 AUC after training: 0.5446428571428571
User 122725 does not improve AUC. Reverting changes.
Training on augumented user 40094 28/50 current_auc = 0.5486111111111112
User 40094 AUC after training: 0.5456349206349207
User 40094 does not improve AUC. Reverting changes.
Training on augumented user 85041 29/50 current_auc = 0.5486111111111112
User 85041 AUC after training: 0.5446428571428571
User 85041 does not improve AUC. Reverting changes.
Training on augumented user 105911 30/50 current_auc = 0.5486111111111112
User 105911 AUC after training: 0.5416666666666666
User 105911 does not improve AUC. Reverting changes.
Training on augumented user 1312 31/50 current_auc = 0.5486111111111112
User 1312 AUC after training: 0.5456349206349206
User 1312 does not improve AUC. Reverting changes.
Training on augumented user 56216 32/50 current_auc = 0.5486111111111112
User 56216 AUC after training: 0.5446428571428571
User 56216 does not improve AUC. Reverting changes.
Training on augumented user 65968 33/50 current_auc = 0.5486111111111112
User 65968 AUC after training: 0.5436507936507937
User 65968 does not improve AUC. Reverting changes.
Training on augumented user 24565 34/50 current_auc = 0.5486111111111112
User 24565 AUC after training: 0.5426587301587301
User 24565 does not improve AUC. Reverting changes.
Training on augumented user 107212 35/50 current_auc = 0.5486111111111112
User 107212 AUC after training: 0.5426587301587301
User 107212 does not improve AUC. Reverting changes.
Training on augumented user 50893 36/50 current_auc = 0.5486111111111112
User 50893 AUC after training: 0.5466269841269842
User 50893 does not improve AUC. Reverting changes.
Training on augumented user 35728 37/50 current_auc = 0.5486111111111112
User 35728 AUC after training: 0.5436507936507937
User 35728 does not improve AUC. Reverting changes.
Training on augumented user 37837 38/50 current_auc = 0.5486111111111112
User 37837 AUC after training: 0.5376984126984127
User 37837 does not improve AUC. Reverting changes.
Training on augumented user 89040 39/50 current_auc = 0.5486111111111112
User 89040 AUC after training: 0.5466269841269842
User 89040 does not improve AUC. Reverting changes.
Training on augumented user 133042 40/50 current_auc = 0.5486111111111112
User 133042 AUC after training: 0.5406746031746031
User 133042 does not improve AUC. Reverting changes.
Training on augumented user 134772 41/50 current_auc = 0.5486111111111112
User 134772 AUC after training: 0.5466269841269842
User 134772 does not improve AUC. Reverting changes.
Training on augumented user 52563 42/50 current_auc = 0.5486111111111112
User 52563 AUC after training: 0.5456349206349207
User 52563 does not improve AUC. Reverting changes.
Training on augumented user 36090 43/50 current_auc = 0.5486111111111112
User 36090 AUC after training: 0.5446428571428572
User 36090 does not improve AUC. Reverting changes.
Training on augumented user 21108 44/50 current_auc = 0.5486111111111112
User 21108 AUC after training: 0.5426587301587301
User 21108 does not improve AUC. Reverting changes.
Training on augumented user 34650 45/50 current_auc = 0.5486111111111112
User 34650 AUC after training: 0.5416666666666666
User 34650 does not improve AUC. Reverting changes.
Training on augumented user 59219 46/50 current_auc = 0.5486111111111112
User 59219 AUC after training: 0.5476190476190477
User 59219 does not improve AUC. Reverting changes.
Training on augumented user 99387 47/50 current_auc = 0.5486111111111112
User 99387 AUC after training: 0.5466269841269842
User 99387 does not improve AUC. Reverting changes.
Training on augumented user 71483 48/50 current_auc = 0.5486111111111112
User 71483 AUC after training: 0.5436507936507937
User 71483 does not improve AUC. Reverting changes.
Training on augumented user 13366 49/50 current_auc = 0.5486111111111112
User 13366 AUC after training: 0.5456349206349207
User 13366 does not improve AUC. Reverting changes.
[2024-12-02 17:44:18.278370] start test user 41777 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:18.718923] start test user 41777 12/568 recall augumented users by random, augumented_users = [66708, 100150, 48830, 22740, 133063, 2051, 41935, 104171, 12136, 33379, 117557, 50393, 29198, 9409, 17231, 43027, 52958, 66016, 9906, 28105, 76452, 62380, 71597, 62272, 65893, 68375, 6620, 91450, 60019, 91159, 25408, 104517, 76045, 65946, 103821, 93484, 58877, 80561, 34076, 51822, 64844, 130069, 70814, 11327, 74638, 30837, 52875, 132903, 37841, 6377]
[2024-12-02 17:44:18.733508] user = 41777 Cloud 12/568
[2024-12-02 17:44:18.743105] user = 41777 Local 12/568
[2024-12-02 17:44:18.767699] user = 41777 Local+ 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:20.683359] user = 41777 MPDA- 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.888888888888889
Training on augumented user 66708 0/50 current_auc = 0.888888888888889
User 66708 AUC after training: 0.888888888888889
User 66708 does not improve AUC. Reverting changes.
Training on augumented user 100150 1/50 current_auc = 0.888888888888889
User 100150 AUC after training: 0.888888888888889
User 100150 does not improve AUC. Reverting changes.
Training on augumented user 48830 2/50 current_auc = 0.888888888888889
User 48830 AUC after training: 0.888888888888889
User 48830 does not improve AUC. Reverting changes.
Training on augumented user 22740 3/50 current_auc = 0.888888888888889
User 22740 AUC after training: 0.888888888888889
User 22740 does not improve AUC. Reverting changes.
Training on augumented user 133063 4/50 current_auc = 0.888888888888889
User 133063 AUC after training: 0.888888888888889
User 133063 does not improve AUC. Reverting changes.
Training on augumented user 2051 5/50 current_auc = 0.888888888888889
User 2051 AUC after training: 0.888888888888889
User 2051 does not improve AUC. Reverting changes.
Training on augumented user 41935 6/50 current_auc = 0.888888888888889
User 41935 AUC after training: 0.888888888888889
User 41935 does not improve AUC. Reverting changes.
Training on augumented user 104171 7/50 current_auc = 0.888888888888889
User 104171 AUC after training: 0.888888888888889
User 104171 does not improve AUC. Reverting changes.
Training on augumented user 12136 8/50 current_auc = 0.888888888888889
User 12136 AUC after training: 0.888888888888889
User 12136 does not improve AUC. Reverting changes.
Training on augumented user 33379 9/50 current_auc = 0.888888888888889
User 33379 AUC after training: 0.888888888888889
User 33379 does not improve AUC. Reverting changes.
Training on augumented user 117557 10/50 current_auc = 0.888888888888889
User 117557 AUC after training: 0.888888888888889
User 117557 does not improve AUC. Reverting changes.
Training on augumented user 50393 11/50 current_auc = 0.888888888888889
User 50393 AUC after training: 0.888888888888889
User 50393 does not improve AUC. Reverting changes.
Training on augumented user 29198 12/50 current_auc = 0.888888888888889
User 29198 AUC after training: 0.888888888888889
User 29198 does not improve AUC. Reverting changes.
Training on augumented user 9409 13/50 current_auc = 0.888888888888889
User 9409 AUC after training: 0.888888888888889
User 9409 does not improve AUC. Reverting changes.
Training on augumented user 17231 14/50 current_auc = 0.888888888888889
User 17231 AUC after training: 0.888888888888889
User 17231 does not improve AUC. Reverting changes.
Training on augumented user 43027 15/50 current_auc = 0.888888888888889
User 43027 AUC after training: 0.888888888888889
User 43027 does not improve AUC. Reverting changes.
Training on augumented user 52958 16/50 current_auc = 0.888888888888889
User 52958 AUC after training: 0.888888888888889
User 52958 does not improve AUC. Reverting changes.
Training on augumented user 66016 17/50 current_auc = 0.888888888888889
User 66016 AUC after training: 0.888888888888889
User 66016 does not improve AUC. Reverting changes.
Training on augumented user 9906 18/50 current_auc = 0.888888888888889
User 9906 AUC after training: 0.888888888888889
User 9906 does not improve AUC. Reverting changes.
Training on augumented user 28105 19/50 current_auc = 0.888888888888889
User 28105 AUC after training: 0.888888888888889
User 28105 does not improve AUC. Reverting changes.
Training on augumented user 76452 20/50 current_auc = 0.888888888888889
User 76452 AUC after training: 0.888888888888889
User 76452 does not improve AUC. Reverting changes.
Training on augumented user 62380 21/50 current_auc = 0.888888888888889
User 62380 AUC after training: 0.888888888888889
User 62380 does not improve AUC. Reverting changes.
Training on augumented user 71597 22/50 current_auc = 0.888888888888889
User 71597 AUC after training: 0.888888888888889
User 71597 does not improve AUC. Reverting changes.
Training on augumented user 62272 23/50 current_auc = 0.888888888888889
User 62272 AUC after training: 0.888888888888889
User 62272 does not improve AUC. Reverting changes.
Training on augumented user 65893 24/50 current_auc = 0.888888888888889
User 65893 AUC after training: 0.888888888888889
User 65893 does not improve AUC. Reverting changes.
Training on augumented user 68375 25/50 current_auc = 0.888888888888889
User 68375 AUC after training: 0.888888888888889
User 68375 does not improve AUC. Reverting changes.
Training on augumented user 6620 26/50 current_auc = 0.888888888888889
User 6620 AUC after training: 0.888888888888889
User 6620 does not improve AUC. Reverting changes.
Training on augumented user 91450 27/50 current_auc = 0.888888888888889
User 91450 AUC after training: 0.888888888888889
User 91450 does not improve AUC. Reverting changes.
Training on augumented user 60019 28/50 current_auc = 0.888888888888889
User 60019 AUC after training: 0.888888888888889
User 60019 does not improve AUC. Reverting changes.
Training on augumented user 91159 29/50 current_auc = 0.888888888888889
User 91159 AUC after training: 0.888888888888889
User 91159 does not improve AUC. Reverting changes.
Training on augumented user 25408 30/50 current_auc = 0.888888888888889
User 25408 AUC after training: 0.888888888888889
User 25408 does not improve AUC. Reverting changes.
Training on augumented user 104517 31/50 current_auc = 0.888888888888889
User 104517 AUC after training: 0.888888888888889
User 104517 does not improve AUC. Reverting changes.
Training on augumented user 76045 32/50 current_auc = 0.888888888888889
User 76045 AUC after training: 0.888888888888889
User 76045 does not improve AUC. Reverting changes.
Training on augumented user 65946 33/50 current_auc = 0.888888888888889
User 65946 AUC after training: 0.888888888888889
User 65946 does not improve AUC. Reverting changes.
Training on augumented user 103821 34/50 current_auc = 0.888888888888889
User 103821 AUC after training: 0.888888888888889
User 103821 does not improve AUC. Reverting changes.
Training on augumented user 93484 35/50 current_auc = 0.888888888888889
User 93484 AUC after training: 0.888888888888889
User 93484 does not improve AUC. Reverting changes.
Training on augumented user 58877 36/50 current_auc = 0.888888888888889
User 58877 AUC after training: 0.888888888888889
User 58877 does not improve AUC. Reverting changes.
Training on augumented user 80561 37/50 current_auc = 0.888888888888889
User 80561 AUC after training: 0.888888888888889
User 80561 does not improve AUC. Reverting changes.
Training on augumented user 34076 38/50 current_auc = 0.888888888888889
User 34076 AUC after training: 0.888888888888889
User 34076 does not improve AUC. Reverting changes.
Training on augumented user 51822 39/50 current_auc = 0.888888888888889
User 51822 AUC after training: 0.888888888888889
User 51822 does not improve AUC. Reverting changes.
Training on augumented user 64844 40/50 current_auc = 0.888888888888889
User 64844 AUC after training: 0.888888888888889
User 64844 does not improve AUC. Reverting changes.
Training on augumented user 130069 41/50 current_auc = 0.888888888888889
User 130069 AUC after training: 0.888888888888889
User 130069 does not improve AUC. Reverting changes.
Training on augumented user 70814 42/50 current_auc = 0.888888888888889
User 70814 AUC after training: 0.888888888888889
User 70814 does not improve AUC. Reverting changes.
Training on augumented user 11327 43/50 current_auc = 0.888888888888889
User 11327 AUC after training: 0.888888888888889
User 11327 does not improve AUC. Reverting changes.
Training on augumented user 74638 44/50 current_auc = 0.888888888888889
User 74638 AUC after training: 0.888888888888889
User 74638 does not improve AUC. Reverting changes.
Training on augumented user 30837 45/50 current_auc = 0.888888888888889
User 30837 AUC after training: 0.888888888888889
User 30837 does not improve AUC. Reverting changes.
Training on augumented user 52875 46/50 current_auc = 0.888888888888889
User 52875 AUC after training: 0.888888888888889
User 52875 does not improve AUC. Reverting changes.
Training on augumented user 132903 47/50 current_auc = 0.888888888888889
User 132903 AUC after training: 0.888888888888889
User 132903 does not improve AUC. Reverting changes.
Training on augumented user 37841 48/50 current_auc = 0.888888888888889
User 37841 AUC after training: 0.888888888888889
User 37841 does not improve AUC. Reverting changes.
Training on augumented user 6377 49/50 current_auc = 0.888888888888889
User 6377 AUC after training: 0.888888888888889
User 6377 does not improve AUC. Reverting changes.
[2024-12-02 17:44:50.384497] start test user 41833 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:51.165096] start test user 41833 13/568 recall augumented users by random, augumented_users = [8023, 105475, 52759, 99587, 99716, 113756, 47550, 55381, 119444, 125148, 78261, 38136, 26277, 79300, 119411, 55642, 115340, 55879, 135022, 61190, 96144, 132227, 82970, 42087, 116661, 10339, 107749, 72290, 90060, 97544, 34993, 32133, 124546, 97543, 99644, 103020, 27908, 122255, 124520, 64641, 9307, 66208, 126158, 102340, 62505, 16711, 68973, 94339, 58895, 22668]
[2024-12-02 17:44:51.182298] user = 41833 Cloud 13/568
[2024-12-02 17:44:51.204733] user = 41833 Local 13/568
[2024-12-02 17:44:51.258250] user = 41833 Local+ 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:53.621751] user = 41833 MPDA- 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 8023 0/50 current_auc = 0.5
User 8023 AUC after training: 0.5
User 8023 does not improve AUC. Reverting changes.
Training on augumented user 105475 1/50 current_auc = 0.5
User 105475 AUC after training: 0.5
User 105475 does not improve AUC. Reverting changes.
Training on augumented user 52759 2/50 current_auc = 0.5
User 52759 AUC after training: 0.5
User 52759 does not improve AUC. Reverting changes.
Training on augumented user 99587 3/50 current_auc = 0.5
User 99587 AUC after training: 0.5
User 99587 does not improve AUC. Reverting changes.
Training on augumented user 99716 4/50 current_auc = 0.5
User 99716 AUC after training: 0.5
User 99716 does not improve AUC. Reverting changes.
Training on augumented user 113756 5/50 current_auc = 0.5
User 113756 AUC after training: 0.5
User 113756 does not improve AUC. Reverting changes.
Training on augumented user 47550 6/50 current_auc = 0.5
User 47550 AUC after training: 0.5
User 47550 does not improve AUC. Reverting changes.
Training on augumented user 55381 7/50 current_auc = 0.5
User 55381 AUC after training: 0.5
User 55381 does not improve AUC. Reverting changes.
Training on augumented user 119444 8/50 current_auc = 0.5
User 119444 AUC after training: 0.5
User 119444 does not improve AUC. Reverting changes.
Training on augumented user 125148 9/50 current_auc = 0.5
User 125148 AUC after training: 0.5
User 125148 does not improve AUC. Reverting changes.
Training on augumented user 78261 10/50 current_auc = 0.5
User 78261 AUC after training: 0.5
User 78261 does not improve AUC. Reverting changes.
Training on augumented user 38136 11/50 current_auc = 0.5
User 38136 AUC after training: 0.5
User 38136 does not improve AUC. Reverting changes.
Training on augumented user 26277 12/50 current_auc = 0.5
User 26277 AUC after training: 0.5
User 26277 does not improve AUC. Reverting changes.
Training on augumented user 79300 13/50 current_auc = 0.5
User 79300 AUC after training: 0.5
User 79300 does not improve AUC. Reverting changes.
Training on augumented user 119411 14/50 current_auc = 0.5
User 119411 AUC after training: 0.5
User 119411 does not improve AUC. Reverting changes.
Training on augumented user 55642 15/50 current_auc = 0.5
User 55642 AUC after training: 0.5
User 55642 does not improve AUC. Reverting changes.
Training on augumented user 115340 16/50 current_auc = 0.5
User 115340 AUC after training: 0.5
User 115340 does not improve AUC. Reverting changes.
Training on augumented user 55879 17/50 current_auc = 0.5
User 55879 AUC after training: 0.5
User 55879 does not improve AUC. Reverting changes.
Training on augumented user 135022 18/50 current_auc = 0.5
User 135022 AUC after training: 0.5
User 135022 does not improve AUC. Reverting changes.
Training on augumented user 61190 19/50 current_auc = 0.5
User 61190 AUC after training: 0.5
User 61190 does not improve AUC. Reverting changes.
Training on augumented user 96144 20/50 current_auc = 0.5
User 96144 AUC after training: 0.5
User 96144 does not improve AUC. Reverting changes.
Training on augumented user 132227 21/50 current_auc = 0.5
User 132227 AUC after training: 0.5
User 132227 does not improve AUC. Reverting changes.
Training on augumented user 82970 22/50 current_auc = 0.5
User 82970 AUC after training: 0.5
User 82970 does not improve AUC. Reverting changes.
Training on augumented user 42087 23/50 current_auc = 0.5
User 42087 AUC after training: 0.5
User 42087 does not improve AUC. Reverting changes.
Training on augumented user 116661 24/50 current_auc = 0.5
User 116661 AUC after training: 0.5
User 116661 does not improve AUC. Reverting changes.
Training on augumented user 10339 25/50 current_auc = 0.5
User 10339 AUC after training: 0.5
User 10339 does not improve AUC. Reverting changes.
Training on augumented user 107749 26/50 current_auc = 0.5
User 107749 AUC after training: 0.5
User 107749 does not improve AUC. Reverting changes.
Training on augumented user 72290 27/50 current_auc = 0.5
User 72290 AUC after training: 0.5
User 72290 does not improve AUC. Reverting changes.
Training on augumented user 90060 28/50 current_auc = 0.5
User 90060 AUC after training: 0.5
User 90060 does not improve AUC. Reverting changes.
Training on augumented user 97544 29/50 current_auc = 0.5
User 97544 AUC after training: 0.5
User 97544 does not improve AUC. Reverting changes.
Training on augumented user 34993 30/50 current_auc = 0.5
User 34993 AUC after training: 0.5
User 34993 does not improve AUC. Reverting changes.
Training on augumented user 32133 31/50 current_auc = 0.5
User 32133 AUC after training: 0.5
User 32133 does not improve AUC. Reverting changes.
Training on augumented user 124546 32/50 current_auc = 0.5
User 124546 AUC after training: 0.5
User 124546 does not improve AUC. Reverting changes.
Training on augumented user 97543 33/50 current_auc = 0.5
User 97543 AUC after training: 0.5
User 97543 does not improve AUC. Reverting changes.
Training on augumented user 99644 34/50 current_auc = 0.5
User 99644 AUC after training: 0.5
User 99644 does not improve AUC. Reverting changes.
Training on augumented user 103020 35/50 current_auc = 0.5
User 103020 AUC after training: 0.5
User 103020 does not improve AUC. Reverting changes.
Training on augumented user 27908 36/50 current_auc = 0.5
User 27908 AUC after training: 0.5
User 27908 does not improve AUC. Reverting changes.
Training on augumented user 122255 37/50 current_auc = 0.5
User 122255 AUC after training: 0.5
User 122255 does not improve AUC. Reverting changes.
Training on augumented user 124520 38/50 current_auc = 0.5
User 124520 AUC after training: 0.5
User 124520 does not improve AUC. Reverting changes.
Training on augumented user 64641 39/50 current_auc = 0.5
User 64641 AUC after training: 0.5
User 64641 does not improve AUC. Reverting changes.
Training on augumented user 9307 40/50 current_auc = 0.5
User 9307 AUC after training: 0.5
User 9307 does not improve AUC. Reverting changes.
Training on augumented user 66208 41/50 current_auc = 0.5
User 66208 AUC after training: 0.5
User 66208 does not improve AUC. Reverting changes.
Training on augumented user 126158 42/50 current_auc = 0.5
User 126158 AUC after training: 0.5
User 126158 does not improve AUC. Reverting changes.
Training on augumented user 102340 43/50 current_auc = 0.5
User 102340 AUC after training: 0.5
User 102340 does not improve AUC. Reverting changes.
Training on augumented user 62505 44/50 current_auc = 0.5
User 62505 AUC after training: 0.5
User 62505 does not improve AUC. Reverting changes.
Training on augumented user 16711 45/50 current_auc = 0.5
User 16711 AUC after training: 0.5
User 16711 does not improve AUC. Reverting changes.
Training on augumented user 68973 46/50 current_auc = 0.5
User 68973 AUC after training: 0.5
User 68973 does not improve AUC. Reverting changes.
Training on augumented user 94339 47/50 current_auc = 0.5
User 94339 AUC after training: 0.5
User 94339 does not improve AUC. Reverting changes.
Training on augumented user 58895 48/50 current_auc = 0.5
User 58895 AUC after training: 0.5
User 58895 does not improve AUC. Reverting changes.
Training on augumented user 22668 49/50 current_auc = 0.5
User 22668 AUC after training: 0.5
User 22668 does not improve AUC. Reverting changes.
[2024-12-02 17:45:18.941994] start test user 41859 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:19.444889] start test user 41859 14/568 recall augumented users by random, augumented_users = [80976, 93925, 111503, 133788, 46957, 40701, 104369, 74774, 10759, 31881, 47930, 137274, 8330, 123102, 86665, 57906, 124652, 10509, 93986, 36955, 135407, 114029, 79542, 43604, 42092, 1157, 132698, 2947, 2864, 24405, 64004, 83935, 23747, 113609, 92439, 118708, 10831, 36804, 116806, 48963, 32385, 52320, 137009, 44845, 133510, 20708, 74895, 39548, 5146, 41933]
[2024-12-02 17:45:19.474493] user = 41859 Cloud 14/568
[2024-12-02 17:45:19.514319] user = 41859 Local 14/568
[2024-12-02 17:45:19.737601] user = 41859 Local+ 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:22.131266] user = 41859 MPDA- 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7036585365853658
Training on augumented user 80976 0/50 current_auc = 0.7036585365853658
User 80976 AUC after training: 0.7024390243902439
User 80976 does not improve AUC. Reverting changes.
Training on augumented user 93925 1/50 current_auc = 0.7036585365853658
User 93925 AUC after training: 0.7024390243902439
User 93925 does not improve AUC. Reverting changes.
Training on augumented user 111503 2/50 current_auc = 0.7036585365853658
User 111503 AUC after training: 0.7073170731707317
User 111503 improves AUC. Keeping the model.
Training on augumented user 133788 3/50 current_auc = 0.7073170731707317
User 133788 AUC after training: 0.7060975609756097
User 133788 does not improve AUC. Reverting changes.
Training on augumented user 46957 4/50 current_auc = 0.7073170731707317
User 46957 AUC after training: 0.7036585365853658
User 46957 does not improve AUC. Reverting changes.
Training on augumented user 40701 5/50 current_auc = 0.7073170731707317
User 40701 AUC after training: 0.7060975609756097
User 40701 does not improve AUC. Reverting changes.
Training on augumented user 104369 6/50 current_auc = 0.7073170731707317
User 104369 AUC after training: 0.7073170731707317
User 104369 does not improve AUC. Reverting changes.
Training on augumented user 74774 7/50 current_auc = 0.7073170731707317
User 74774 AUC after training: 0.7073170731707317
User 74774 does not improve AUC. Reverting changes.
Training on augumented user 10759 8/50 current_auc = 0.7073170731707317
User 10759 AUC after training: 0.7036585365853658
User 10759 does not improve AUC. Reverting changes.
Training on augumented user 31881 9/50 current_auc = 0.7073170731707317
User 31881 AUC after training: 0.7073170731707317
User 31881 does not improve AUC. Reverting changes.
Training on augumented user 47930 10/50 current_auc = 0.7073170731707317
User 47930 AUC after training: 0.7073170731707317
User 47930 does not improve AUC. Reverting changes.
Training on augumented user 137274 11/50 current_auc = 0.7073170731707317
User 137274 AUC after training: 0.7073170731707317
User 137274 does not improve AUC. Reverting changes.
Training on augumented user 8330 12/50 current_auc = 0.7073170731707317
User 8330 AUC after training: 0.7036585365853658
User 8330 does not improve AUC. Reverting changes.
Training on augumented user 123102 13/50 current_auc = 0.7073170731707317
User 123102 AUC after training: 0.7073170731707317
User 123102 does not improve AUC. Reverting changes.
Training on augumented user 86665 14/50 current_auc = 0.7073170731707317
User 86665 AUC after training: 0.7048780487804878
User 86665 does not improve AUC. Reverting changes.
Training on augumented user 57906 15/50 current_auc = 0.7073170731707317
User 57906 AUC after training: 0.7024390243902439
User 57906 does not improve AUC. Reverting changes.
Training on augumented user 124652 16/50 current_auc = 0.7073170731707317
User 124652 AUC after training: 0.7060975609756097
User 124652 does not improve AUC. Reverting changes.
Training on augumented user 10509 17/50 current_auc = 0.7073170731707317
User 10509 AUC after training: 0.7060975609756097
User 10509 does not improve AUC. Reverting changes.
Training on augumented user 93986 18/50 current_auc = 0.7073170731707317
User 93986 AUC after training: 0.7036585365853658
User 93986 does not improve AUC. Reverting changes.
Training on augumented user 36955 19/50 current_auc = 0.7073170731707317
User 36955 AUC after training: 0.7036585365853658
User 36955 does not improve AUC. Reverting changes.
Training on augumented user 135407 20/50 current_auc = 0.7073170731707317
User 135407 AUC after training: 0.7060975609756097
User 135407 does not improve AUC. Reverting changes.
Training on augumented user 114029 21/50 current_auc = 0.7073170731707317
User 114029 AUC after training: 0.7060975609756097
User 114029 does not improve AUC. Reverting changes.
Training on augumented user 79542 22/50 current_auc = 0.7073170731707317
User 79542 AUC after training: 0.7060975609756097
User 79542 does not improve AUC. Reverting changes.
Training on augumented user 43604 23/50 current_auc = 0.7073170731707317
User 43604 AUC after training: 0.7073170731707317
User 43604 does not improve AUC. Reverting changes.
Training on augumented user 42092 24/50 current_auc = 0.7073170731707317
User 42092 AUC after training: 0.7073170731707317
User 42092 does not improve AUC. Reverting changes.
Training on augumented user 1157 25/50 current_auc = 0.7073170731707317
User 1157 AUC after training: 0.7060975609756097
User 1157 does not improve AUC. Reverting changes.
Training on augumented user 132698 26/50 current_auc = 0.7073170731707317
User 132698 AUC after training: 0.7073170731707317
User 132698 does not improve AUC. Reverting changes.
Training on augumented user 2947 27/50 current_auc = 0.7073170731707317
User 2947 AUC after training: 0.7060975609756097
User 2947 does not improve AUC. Reverting changes.
Training on augumented user 2864 28/50 current_auc = 0.7073170731707317
User 2864 AUC after training: 0.7060975609756097
User 2864 does not improve AUC. Reverting changes.
Training on augumented user 24405 29/50 current_auc = 0.7073170731707317
User 24405 AUC after training: 0.7073170731707317
User 24405 does not improve AUC. Reverting changes.
Training on augumented user 64004 30/50 current_auc = 0.7073170731707317
User 64004 AUC after training: 0.7073170731707317
User 64004 does not improve AUC. Reverting changes.
Training on augumented user 83935 31/50 current_auc = 0.7073170731707317
User 83935 AUC after training: 0.7060975609756097
User 83935 does not improve AUC. Reverting changes.
Training on augumented user 23747 32/50 current_auc = 0.7073170731707317
User 23747 AUC after training: 0.7073170731707317
User 23747 does not improve AUC. Reverting changes.
Training on augumented user 113609 33/50 current_auc = 0.7073170731707317
User 113609 AUC after training: 0.7109756097560975
User 113609 improves AUC. Keeping the model.
Training on augumented user 92439 34/50 current_auc = 0.7109756097560975
User 92439 AUC after training: 0.7109756097560975
User 92439 does not improve AUC. Reverting changes.
Training on augumented user 118708 35/50 current_auc = 0.7109756097560975
User 118708 AUC after training: 0.7073170731707317
User 118708 does not improve AUC. Reverting changes.
Training on augumented user 10831 36/50 current_auc = 0.7109756097560975
User 10831 AUC after training: 0.7109756097560975
User 10831 does not improve AUC. Reverting changes.
Training on augumented user 36804 37/50 current_auc = 0.7109756097560975
User 36804 AUC after training: 0.7097560975609756
User 36804 does not improve AUC. Reverting changes.
Training on augumented user 116806 38/50 current_auc = 0.7109756097560975
User 116806 AUC after training: 0.7121951219512195
User 116806 improves AUC. Keeping the model.
Training on augumented user 48963 39/50 current_auc = 0.7121951219512195
User 48963 AUC after training: 0.7109756097560975
User 48963 does not improve AUC. Reverting changes.
Training on augumented user 32385 40/50 current_auc = 0.7121951219512195
User 32385 AUC after training: 0.7121951219512195
User 32385 does not improve AUC. Reverting changes.
Training on augumented user 52320 41/50 current_auc = 0.7121951219512195
User 52320 AUC after training: 0.7109756097560975
User 52320 does not improve AUC. Reverting changes.
Training on augumented user 137009 42/50 current_auc = 0.7121951219512195
User 137009 AUC after training: 0.7121951219512195
User 137009 does not improve AUC. Reverting changes.
Training on augumented user 44845 43/50 current_auc = 0.7121951219512195
User 44845 AUC after training: 0.7109756097560975
User 44845 does not improve AUC. Reverting changes.
Training on augumented user 133510 44/50 current_auc = 0.7121951219512195
User 133510 AUC after training: 0.7109756097560975
User 133510 does not improve AUC. Reverting changes.
Training on augumented user 20708 45/50 current_auc = 0.7121951219512195
User 20708 AUC after training: 0.7109756097560975
User 20708 does not improve AUC. Reverting changes.
Training on augumented user 74895 46/50 current_auc = 0.7121951219512195
User 74895 AUC after training: 0.7097560975609756
User 74895 does not improve AUC. Reverting changes.
Training on augumented user 39548 47/50 current_auc = 0.7121951219512195
User 39548 AUC after training: 0.7097560975609756
User 39548 does not improve AUC. Reverting changes.
Training on augumented user 5146 48/50 current_auc = 0.7121951219512195
User 5146 AUC after training: 0.7121951219512195
User 5146 does not improve AUC. Reverting changes.
Training on augumented user 41933 49/50 current_auc = 0.7121951219512195
User 41933 AUC after training: 0.7109756097560975
User 41933 does not improve AUC. Reverting changes.
[2024-12-02 17:45:53.096306] start test user 41879 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:53.513128] start test user 41879 15/568 recall augumented users by random, augumented_users = [126317, 68731, 77487, 40003, 39915, 23588, 30264, 126114, 70593, 34420, 97051, 111826, 67382, 107329, 107496, 29760, 60572, 122083, 124345, 137333, 124167, 35308, 69932, 52589, 7782, 3572, 102021, 52568, 77013, 102757, 37589, 90807, 68448, 50998, 101220, 134425, 5187, 43149, 19331, 39933, 10299, 91766, 137131, 83198, 130864, 83455, 93546, 109370, 40891, 11058]
[2024-12-02 17:45:53.527333] user = 41879 Cloud 15/568
[2024-12-02 17:45:53.537581] user = 41879 Local 15/568
[2024-12-02 17:45:53.573024] user = 41879 Local+ 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:56.287684] user = 41879 MPDA- 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8742857142857143
Training on augumented user 126317 0/50 current_auc = 0.8742857142857143
User 126317 AUC after training: 0.8742857142857143
User 126317 does not improve AUC. Reverting changes.
Training on augumented user 68731 1/50 current_auc = 0.8742857142857143
User 68731 AUC after training: 0.8742857142857143
User 68731 does not improve AUC. Reverting changes.
Training on augumented user 77487 2/50 current_auc = 0.8742857142857143
User 77487 AUC after training: 0.8742857142857143
User 77487 does not improve AUC. Reverting changes.
Training on augumented user 40003 3/50 current_auc = 0.8742857142857143
User 40003 AUC after training: 0.8742857142857143
User 40003 does not improve AUC. Reverting changes.
Training on augumented user 39915 4/50 current_auc = 0.8742857142857143
User 39915 AUC after training: 0.88
User 39915 improves AUC. Keeping the model.
Training on augumented user 23588 5/50 current_auc = 0.88
User 23588 AUC after training: 0.88
User 23588 does not improve AUC. Reverting changes.
Training on augumented user 30264 6/50 current_auc = 0.88
User 30264 AUC after training: 0.88
User 30264 does not improve AUC. Reverting changes.
Training on augumented user 126114 7/50 current_auc = 0.88
User 126114 AUC after training: 0.88
User 126114 does not improve AUC. Reverting changes.
Training on augumented user 70593 8/50 current_auc = 0.88
User 70593 AUC after training: 0.88
User 70593 does not improve AUC. Reverting changes.
Training on augumented user 34420 9/50 current_auc = 0.88
User 34420 AUC after training: 0.88
User 34420 does not improve AUC. Reverting changes.
Training on augumented user 97051 10/50 current_auc = 0.88
User 97051 AUC after training: 0.88
User 97051 does not improve AUC. Reverting changes.
Training on augumented user 111826 11/50 current_auc = 0.88
User 111826 AUC after training: 0.88
User 111826 does not improve AUC. Reverting changes.
Training on augumented user 67382 12/50 current_auc = 0.88
User 67382 AUC after training: 0.8742857142857143
User 67382 does not improve AUC. Reverting changes.
Training on augumented user 107329 13/50 current_auc = 0.88
User 107329 AUC after training: 0.88
User 107329 does not improve AUC. Reverting changes.
Training on augumented user 107496 14/50 current_auc = 0.88
User 107496 AUC after training: 0.88
User 107496 does not improve AUC. Reverting changes.
Training on augumented user 29760 15/50 current_auc = 0.88
User 29760 AUC after training: 0.88
User 29760 does not improve AUC. Reverting changes.
Training on augumented user 60572 16/50 current_auc = 0.88
User 60572 AUC after training: 0.88
User 60572 does not improve AUC. Reverting changes.
Training on augumented user 122083 17/50 current_auc = 0.88
User 122083 AUC after training: 0.8742857142857143
User 122083 does not improve AUC. Reverting changes.
Training on augumented user 124345 18/50 current_auc = 0.88
User 124345 AUC after training: 0.88
User 124345 does not improve AUC. Reverting changes.
Training on augumented user 137333 19/50 current_auc = 0.88
User 137333 AUC after training: 0.88
User 137333 does not improve AUC. Reverting changes.
Training on augumented user 124167 20/50 current_auc = 0.88
User 124167 AUC after training: 0.88
User 124167 does not improve AUC. Reverting changes.
Training on augumented user 35308 21/50 current_auc = 0.88
User 35308 AUC after training: 0.88
User 35308 does not improve AUC. Reverting changes.
Training on augumented user 69932 22/50 current_auc = 0.88
User 69932 AUC after training: 0.88
User 69932 does not improve AUC. Reverting changes.
Training on augumented user 52589 23/50 current_auc = 0.88
User 52589 AUC after training: 0.88
User 52589 does not improve AUC. Reverting changes.
Training on augumented user 7782 24/50 current_auc = 0.88
User 7782 AUC after training: 0.88
User 7782 does not improve AUC. Reverting changes.
Training on augumented user 3572 25/50 current_auc = 0.88
User 3572 AUC after training: 0.8742857142857143
User 3572 does not improve AUC. Reverting changes.
Training on augumented user 102021 26/50 current_auc = 0.88
User 102021 AUC after training: 0.88
User 102021 does not improve AUC. Reverting changes.
Training on augumented user 52568 27/50 current_auc = 0.88
User 52568 AUC after training: 0.88
User 52568 does not improve AUC. Reverting changes.
Training on augumented user 77013 28/50 current_auc = 0.88
User 77013 AUC after training: 0.8742857142857143
User 77013 does not improve AUC. Reverting changes.
Training on augumented user 102757 29/50 current_auc = 0.88
User 102757 AUC after training: 0.88
User 102757 does not improve AUC. Reverting changes.
Training on augumented user 37589 30/50 current_auc = 0.88
User 37589 AUC after training: 0.88
User 37589 does not improve AUC. Reverting changes.
Training on augumented user 90807 31/50 current_auc = 0.88
User 90807 AUC after training: 0.88
User 90807 does not improve AUC. Reverting changes.
Training on augumented user 68448 32/50 current_auc = 0.88
User 68448 AUC after training: 0.88
User 68448 does not improve AUC. Reverting changes.
Training on augumented user 50998 33/50 current_auc = 0.88
User 50998 AUC after training: 0.88
User 50998 does not improve AUC. Reverting changes.
Training on augumented user 101220 34/50 current_auc = 0.88
User 101220 AUC after training: 0.8742857142857143
User 101220 does not improve AUC. Reverting changes.
Training on augumented user 134425 35/50 current_auc = 0.88
User 134425 AUC after training: 0.88
User 134425 does not improve AUC. Reverting changes.
Training on augumented user 5187 36/50 current_auc = 0.88
User 5187 AUC after training: 0.88
User 5187 does not improve AUC. Reverting changes.
Training on augumented user 43149 37/50 current_auc = 0.88
User 43149 AUC after training: 0.88
User 43149 does not improve AUC. Reverting changes.
Training on augumented user 19331 38/50 current_auc = 0.88
User 19331 AUC after training: 0.88
User 19331 does not improve AUC. Reverting changes.
Training on augumented user 39933 39/50 current_auc = 0.88
User 39933 AUC after training: 0.88
User 39933 does not improve AUC. Reverting changes.
Training on augumented user 10299 40/50 current_auc = 0.88
User 10299 AUC after training: 0.88
User 10299 does not improve AUC. Reverting changes.
Training on augumented user 91766 41/50 current_auc = 0.88
User 91766 AUC after training: 0.88
User 91766 does not improve AUC. Reverting changes.
Training on augumented user 137131 42/50 current_auc = 0.88
User 137131 AUC after training: 0.8742857142857143
User 137131 does not improve AUC. Reverting changes.
Training on augumented user 83198 43/50 current_auc = 0.88
User 83198 AUC after training: 0.88
User 83198 does not improve AUC. Reverting changes.
Training on augumented user 130864 44/50 current_auc = 0.88
User 130864 AUC after training: 0.88
User 130864 does not improve AUC. Reverting changes.
Training on augumented user 83455 45/50 current_auc = 0.88
User 83455 AUC after training: 0.88
User 83455 does not improve AUC. Reverting changes.
Training on augumented user 93546 46/50 current_auc = 0.88
User 93546 AUC after training: 0.88
User 93546 does not improve AUC. Reverting changes.
Training on augumented user 109370 47/50 current_auc = 0.88
User 109370 AUC after training: 0.88
User 109370 does not improve AUC. Reverting changes.
Training on augumented user 40891 48/50 current_auc = 0.88
User 40891 AUC after training: 0.88
User 40891 does not improve AUC. Reverting changes.
Training on augumented user 11058 49/50 current_auc = 0.88
User 11058 AUC after training: 0.88
User 11058 does not improve AUC. Reverting changes.
[2024-12-02 17:46:23.241088] start test user 41904 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:23.802609] start test user 41904 16/568 recall augumented users by random, augumented_users = [79508, 20446, 43595, 76502, 19570, 44224, 60866, 71236, 131833, 120639, 133490, 112386, 74094, 90707, 54604, 126395, 837, 85298, 88844, 136347, 119738, 74453, 123101, 95437, 28773, 83921, 62947, 84128, 70720, 111816, 92200, 11940, 96556, 34053, 46023, 66770, 15424, 45041, 136998, 3120, 73782, 42325, 40388, 33512, 10543, 66898, 58991, 45829, 8413, 42334]
[2024-12-02 17:46:23.823452] user = 41904 Cloud 16/568
[2024-12-02 17:46:23.844573] user = 41904 Local 16/568
[2024-12-02 17:46:23.872503] user = 41904 Local+ 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:27.114837] user = 41904 MPDA- 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6400000000000001
Training on augumented user 79508 0/50 current_auc = 0.6400000000000001
User 79508 AUC after training: 0.6400000000000001
User 79508 does not improve AUC. Reverting changes.
Training on augumented user 20446 1/50 current_auc = 0.6400000000000001
User 20446 AUC after training: 0.6400000000000001
User 20446 does not improve AUC. Reverting changes.
Training on augumented user 43595 2/50 current_auc = 0.6400000000000001
User 43595 AUC after training: 0.6400000000000001
User 43595 does not improve AUC. Reverting changes.
Training on augumented user 76502 3/50 current_auc = 0.6400000000000001
User 76502 AUC after training: 0.6600000000000001
User 76502 improves AUC. Keeping the model.
Training on augumented user 19570 4/50 current_auc = 0.6600000000000001
User 19570 AUC after training: 0.6600000000000001
User 19570 does not improve AUC. Reverting changes.
Training on augumented user 44224 5/50 current_auc = 0.6600000000000001
User 44224 AUC after training: 0.6600000000000001
User 44224 does not improve AUC. Reverting changes.
Training on augumented user 60866 6/50 current_auc = 0.6600000000000001
User 60866 AUC after training: 0.6600000000000001
User 60866 does not improve AUC. Reverting changes.
Training on augumented user 71236 7/50 current_auc = 0.6600000000000001
User 71236 AUC after training: 0.6600000000000001
User 71236 does not improve AUC. Reverting changes.
Training on augumented user 131833 8/50 current_auc = 0.6600000000000001
User 131833 AUC after training: 0.6600000000000001
User 131833 does not improve AUC. Reverting changes.
Training on augumented user 120639 9/50 current_auc = 0.6600000000000001
User 120639 AUC after training: 0.6600000000000001
User 120639 does not improve AUC. Reverting changes.
Training on augumented user 133490 10/50 current_auc = 0.6600000000000001
User 133490 AUC after training: 0.6600000000000001
User 133490 does not improve AUC. Reverting changes.
Training on augumented user 112386 11/50 current_auc = 0.6600000000000001
User 112386 AUC after training: 0.6600000000000001
User 112386 does not improve AUC. Reverting changes.
Training on augumented user 74094 12/50 current_auc = 0.6600000000000001
User 74094 AUC after training: 0.6600000000000001
User 74094 does not improve AUC. Reverting changes.
Training on augumented user 90707 13/50 current_auc = 0.6600000000000001
User 90707 AUC after training: 0.6600000000000001
User 90707 does not improve AUC. Reverting changes.
Training on augumented user 54604 14/50 current_auc = 0.6600000000000001
User 54604 AUC after training: 0.6600000000000001
User 54604 does not improve AUC. Reverting changes.
Training on augumented user 126395 15/50 current_auc = 0.6600000000000001
User 126395 AUC after training: 0.6600000000000001
User 126395 does not improve AUC. Reverting changes.
Training on augumented user 837 16/50 current_auc = 0.6600000000000001
User 837 AUC after training: 0.6600000000000001
User 837 does not improve AUC. Reverting changes.
Training on augumented user 85298 17/50 current_auc = 0.6600000000000001
User 85298 AUC after training: 0.6600000000000001
User 85298 does not improve AUC. Reverting changes.
Training on augumented user 88844 18/50 current_auc = 0.6600000000000001
User 88844 AUC after training: 0.6600000000000001
User 88844 does not improve AUC. Reverting changes.
Training on augumented user 136347 19/50 current_auc = 0.6600000000000001
User 136347 AUC after training: 0.6600000000000001
User 136347 does not improve AUC. Reverting changes.
Training on augumented user 119738 20/50 current_auc = 0.6600000000000001
User 119738 AUC after training: 0.6600000000000001
User 119738 does not improve AUC. Reverting changes.
Training on augumented user 74453 21/50 current_auc = 0.6600000000000001
User 74453 AUC after training: 0.6600000000000001
User 74453 does not improve AUC. Reverting changes.
Training on augumented user 123101 22/50 current_auc = 0.6600000000000001
User 123101 AUC after training: 0.6600000000000001
User 123101 does not improve AUC. Reverting changes.
Training on augumented user 95437 23/50 current_auc = 0.6600000000000001
User 95437 AUC after training: 0.6600000000000001
User 95437 does not improve AUC. Reverting changes.
Training on augumented user 28773 24/50 current_auc = 0.6600000000000001
User 28773 AUC after training: 0.6600000000000001
User 28773 does not improve AUC. Reverting changes.
Training on augumented user 83921 25/50 current_auc = 0.6600000000000001
User 83921 AUC after training: 0.6600000000000001
User 83921 does not improve AUC. Reverting changes.
Training on augumented user 62947 26/50 current_auc = 0.6600000000000001
User 62947 AUC after training: 0.6600000000000001
User 62947 does not improve AUC. Reverting changes.
Training on augumented user 84128 27/50 current_auc = 0.6600000000000001
User 84128 AUC after training: 0.6600000000000001
User 84128 does not improve AUC. Reverting changes.
Training on augumented user 70720 28/50 current_auc = 0.6600000000000001
User 70720 AUC after training: 0.6600000000000001
User 70720 does not improve AUC. Reverting changes.
Training on augumented user 111816 29/50 current_auc = 0.6600000000000001
User 111816 AUC after training: 0.6600000000000001
User 111816 does not improve AUC. Reverting changes.
Training on augumented user 92200 30/50 current_auc = 0.6600000000000001
User 92200 AUC after training: 0.6600000000000001
User 92200 does not improve AUC. Reverting changes.
Training on augumented user 11940 31/50 current_auc = 0.6600000000000001
User 11940 AUC after training: 0.6600000000000001
User 11940 does not improve AUC. Reverting changes.
Training on augumented user 96556 32/50 current_auc = 0.6600000000000001
User 96556 AUC after training: 0.6600000000000001
User 96556 does not improve AUC. Reverting changes.
Training on augumented user 34053 33/50 current_auc = 0.6600000000000001
User 34053 AUC after training: 0.6600000000000001
User 34053 does not improve AUC. Reverting changes.
Training on augumented user 46023 34/50 current_auc = 0.6600000000000001
User 46023 AUC after training: 0.6600000000000001
User 46023 does not improve AUC. Reverting changes.
Training on augumented user 66770 35/50 current_auc = 0.6600000000000001
User 66770 AUC after training: 0.6600000000000001
User 66770 does not improve AUC. Reverting changes.
Training on augumented user 15424 36/50 current_auc = 0.6600000000000001
User 15424 AUC after training: 0.6600000000000001
User 15424 does not improve AUC. Reverting changes.
Training on augumented user 45041 37/50 current_auc = 0.6600000000000001
User 45041 AUC after training: 0.6600000000000001
User 45041 does not improve AUC. Reverting changes.
Training on augumented user 136998 38/50 current_auc = 0.6600000000000001
User 136998 AUC after training: 0.6400000000000001
User 136998 does not improve AUC. Reverting changes.
Training on augumented user 3120 39/50 current_auc = 0.6600000000000001
User 3120 AUC after training: 0.6600000000000001
User 3120 does not improve AUC. Reverting changes.
Training on augumented user 73782 40/50 current_auc = 0.6600000000000001
User 73782 AUC after training: 0.6600000000000001
User 73782 does not improve AUC. Reverting changes.
Training on augumented user 42325 41/50 current_auc = 0.6600000000000001
User 42325 AUC after training: 0.6600000000000001
User 42325 does not improve AUC. Reverting changes.
Training on augumented user 40388 42/50 current_auc = 0.6600000000000001
User 40388 AUC after training: 0.6600000000000001
User 40388 does not improve AUC. Reverting changes.
Training on augumented user 33512 43/50 current_auc = 0.6600000000000001
User 33512 AUC after training: 0.6600000000000001
User 33512 does not improve AUC. Reverting changes.
Training on augumented user 10543 44/50 current_auc = 0.6600000000000001
User 10543 AUC after training: 0.6600000000000001
User 10543 does not improve AUC. Reverting changes.
Training on augumented user 66898 45/50 current_auc = 0.6600000000000001
User 66898 AUC after training: 0.6600000000000001
User 66898 does not improve AUC. Reverting changes.
Training on augumented user 58991 46/50 current_auc = 0.6600000000000001
User 58991 AUC after training: 0.6600000000000001
User 58991 does not improve AUC. Reverting changes.
Training on augumented user 45829 47/50 current_auc = 0.6600000000000001
User 45829 AUC after training: 0.6600000000000001
User 45829 does not improve AUC. Reverting changes.
Training on augumented user 8413 48/50 current_auc = 0.6600000000000001
User 8413 AUC after training: 0.6600000000000001
User 8413 does not improve AUC. Reverting changes.
Training on augumented user 42334 49/50 current_auc = 0.6600000000000001
User 42334 AUC after training: 0.6200000000000001
User 42334 does not improve AUC. Reverting changes.
[2024-12-02 17:46:54.315675] start test user 41929 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:54.723651] start test user 41929 17/568 recall augumented users by random, augumented_users = [135352, 98224, 96578, 133954, 54136, 377, 99028, 12308, 3502, 62929, 104351, 84196, 71687, 109108, 13912, 93622, 107607, 102738, 133965, 80956, 55517, 99355, 4765, 54738, 101976, 135053, 20815, 71175, 43334, 94061, 131695, 23561, 73339, 99343, 57456, 20942, 101508, 102935, 12432, 83634, 111884, 108347, 1555, 117590, 123334, 6854, 85214, 8547, 35370, 40026]
[2024-12-02 17:46:54.739854] user = 41929 Cloud 17/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:54.746770] user = 41929 Local 17/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:54.938287] user = 41929 Local+ 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:57.054616] user = 41929 MPDA- 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 135352 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135352 AUC after training: 0.5
User 135352 does not improve AUC. Reverting changes.
Training on augumented user 98224 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98224 AUC after training: 0.5
User 98224 does not improve AUC. Reverting changes.
Training on augumented user 96578 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96578 AUC after training: 0.5
User 96578 does not improve AUC. Reverting changes.
Training on augumented user 133954 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133954 AUC after training: 0.5
User 133954 does not improve AUC. Reverting changes.
Training on augumented user 54136 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54136 AUC after training: 0.5
User 54136 does not improve AUC. Reverting changes.
Training on augumented user 377 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 377 AUC after training: 0.5
User 377 does not improve AUC. Reverting changes.
Training on augumented user 99028 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99028 AUC after training: 0.5
User 99028 does not improve AUC. Reverting changes.
Training on augumented user 12308 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12308 AUC after training: 0.5
User 12308 does not improve AUC. Reverting changes.
Training on augumented user 3502 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3502 AUC after training: 0.5
User 3502 does not improve AUC. Reverting changes.
Training on augumented user 62929 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62929 AUC after training: 0.5
User 62929 does not improve AUC. Reverting changes.
Training on augumented user 104351 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104351 AUC after training: 0.5
User 104351 does not improve AUC. Reverting changes.
Training on augumented user 84196 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84196 AUC after training: 0.5
User 84196 does not improve AUC. Reverting changes.
Training on augumented user 71687 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71687 AUC after training: 0.5
User 71687 does not improve AUC. Reverting changes.
Training on augumented user 109108 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109108 AUC after training: 0.5
User 109108 does not improve AUC. Reverting changes.
Training on augumented user 13912 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13912 AUC after training: 0.5
User 13912 does not improve AUC. Reverting changes.
Training on augumented user 93622 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93622 AUC after training: 0.5
User 93622 does not improve AUC. Reverting changes.
Training on augumented user 107607 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107607 AUC after training: 0.5
User 107607 does not improve AUC. Reverting changes.
Training on augumented user 102738 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102738 AUC after training: 0.5
User 102738 does not improve AUC. Reverting changes.
Training on augumented user 133965 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133965 AUC after training: 0.5
User 133965 does not improve AUC. Reverting changes.
Training on augumented user 80956 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80956 AUC after training: 0.5
User 80956 does not improve AUC. Reverting changes.
Training on augumented user 55517 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55517 AUC after training: 0.5
User 55517 does not improve AUC. Reverting changes.
Training on augumented user 99355 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99355 AUC after training: 0.5
User 99355 does not improve AUC. Reverting changes.
Training on augumented user 4765 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4765 AUC after training: 0.5
User 4765 does not improve AUC. Reverting changes.
Training on augumented user 54738 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54738 AUC after training: 0.5
User 54738 does not improve AUC. Reverting changes.
Training on augumented user 101976 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101976 AUC after training: 0.5
User 101976 does not improve AUC. Reverting changes.
Training on augumented user 135053 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135053 AUC after training: 0.5
User 135053 does not improve AUC. Reverting changes.
Training on augumented user 20815 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20815 AUC after training: 0.5
User 20815 does not improve AUC. Reverting changes.
Training on augumented user 71175 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71175 AUC after training: 0.5
User 71175 does not improve AUC. Reverting changes.
Training on augumented user 43334 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43334 AUC after training: 0.5
User 43334 does not improve AUC. Reverting changes.
Training on augumented user 94061 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94061 AUC after training: 0.5
User 94061 does not improve AUC. Reverting changes.
Training on augumented user 131695 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131695 AUC after training: 0.5
User 131695 does not improve AUC. Reverting changes.
Training on augumented user 23561 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23561 AUC after training: 0.5
User 23561 does not improve AUC. Reverting changes.
Training on augumented user 73339 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73339 AUC after training: 0.5
User 73339 does not improve AUC. Reverting changes.
Training on augumented user 99343 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99343 AUC after training: 0.5
User 99343 does not improve AUC. Reverting changes.
Training on augumented user 57456 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57456 AUC after training: 0.5
User 57456 does not improve AUC. Reverting changes.
Training on augumented user 20942 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20942 AUC after training: 0.5
User 20942 does not improve AUC. Reverting changes.
Training on augumented user 101508 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101508 AUC after training: 0.5
User 101508 does not improve AUC. Reverting changes.
Training on augumented user 102935 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102935 AUC after training: 0.5
User 102935 does not improve AUC. Reverting changes.
Training on augumented user 12432 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12432 AUC after training: 0.5
User 12432 does not improve AUC. Reverting changes.
Training on augumented user 83634 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83634 AUC after training: 0.5
User 83634 does not improve AUC. Reverting changes.
Training on augumented user 111884 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111884 AUC after training: 0.5
User 111884 does not improve AUC. Reverting changes.
Training on augumented user 108347 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108347 AUC after training: 0.5
User 108347 does not improve AUC. Reverting changes.
Training on augumented user 1555 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1555 AUC after training: 0.5
User 1555 does not improve AUC. Reverting changes.
Training on augumented user 117590 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117590 AUC after training: 0.5
User 117590 does not improve AUC. Reverting changes.
Training on augumented user 123334 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123334 AUC after training: 0.5
User 123334 does not improve AUC. Reverting changes.
Training on augumented user 6854 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6854 AUC after training: 0.5
User 6854 does not improve AUC. Reverting changes.
Training on augumented user 85214 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85214 AUC after training: 0.5
User 85214 does not improve AUC. Reverting changes.
Training on augumented user 8547 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8547 AUC after training: 0.5
User 8547 does not improve AUC. Reverting changes.
Training on augumented user 35370 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35370 AUC after training: 0.5
User 35370 does not improve AUC. Reverting changes.
Training on augumented user 40026 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40026 AUC after training: 0.5
User 40026 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:47:29.776985] start test user 41930 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:30.430243] start test user 41930 18/568 recall augumented users by random, augumented_users = [2101, 70736, 85992, 22634, 125045, 105949, 102912, 45629, 99879, 114417, 10820, 36916, 63250, 30986, 28683, 94825, 61430, 17448, 53215, 121095, 116706, 34965, 134399, 91937, 79583, 68938, 122149, 10670, 98910, 90554, 38802, 65793, 20530, 17444, 130929, 117055, 42141, 74796, 38874, 78757, 43671, 87025, 96915, 56262, 25984, 63605, 62016, 51075, 15202, 108702]
[2024-12-02 17:47:30.449850] user = 41930 Cloud 18/568
[2024-12-02 17:47:30.460581] user = 41930 Local 18/568
[2024-12-02 17:47:30.494653] user = 41930 Local+ 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:33.375094] user = 41930 MPDA- 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 2101 0/50 current_auc = 0.0
User 2101 AUC after training: 0.0
User 2101 does not improve AUC. Reverting changes.
Training on augumented user 70736 1/50 current_auc = 0.0
User 70736 AUC after training: 0.0
User 70736 does not improve AUC. Reverting changes.
Training on augumented user 85992 2/50 current_auc = 0.0
User 85992 AUC after training: 0.0
User 85992 does not improve AUC. Reverting changes.
Training on augumented user 22634 3/50 current_auc = 0.0
User 22634 AUC after training: 0.0
User 22634 does not improve AUC. Reverting changes.
Training on augumented user 125045 4/50 current_auc = 0.0
User 125045 AUC after training: 0.0
User 125045 does not improve AUC. Reverting changes.
Training on augumented user 105949 5/50 current_auc = 0.0
User 105949 AUC after training: 0.0
User 105949 does not improve AUC. Reverting changes.
Training on augumented user 102912 6/50 current_auc = 0.0
User 102912 AUC after training: 0.0
User 102912 does not improve AUC. Reverting changes.
Training on augumented user 45629 7/50 current_auc = 0.0
User 45629 AUC after training: 0.0
User 45629 does not improve AUC. Reverting changes.
Training on augumented user 99879 8/50 current_auc = 0.0
User 99879 AUC after training: 0.0
User 99879 does not improve AUC. Reverting changes.
Training on augumented user 114417 9/50 current_auc = 0.0
User 114417 AUC after training: 0.0
User 114417 does not improve AUC. Reverting changes.
Training on augumented user 10820 10/50 current_auc = 0.0
User 10820 AUC after training: 0.0
User 10820 does not improve AUC. Reverting changes.
Training on augumented user 36916 11/50 current_auc = 0.0
User 36916 AUC after training: 0.0
User 36916 does not improve AUC. Reverting changes.
Training on augumented user 63250 12/50 current_auc = 0.0
User 63250 AUC after training: 0.0
User 63250 does not improve AUC. Reverting changes.
Training on augumented user 30986 13/50 current_auc = 0.0
User 30986 AUC after training: 0.0
User 30986 does not improve AUC. Reverting changes.
Training on augumented user 28683 14/50 current_auc = 0.0
User 28683 AUC after training: 0.0
User 28683 does not improve AUC. Reverting changes.
Training on augumented user 94825 15/50 current_auc = 0.0
User 94825 AUC after training: 0.0
User 94825 does not improve AUC. Reverting changes.
Training on augumented user 61430 16/50 current_auc = 0.0
User 61430 AUC after training: 0.0
User 61430 does not improve AUC. Reverting changes.
Training on augumented user 17448 17/50 current_auc = 0.0
User 17448 AUC after training: 0.0
User 17448 does not improve AUC. Reverting changes.
Training on augumented user 53215 18/50 current_auc = 0.0
User 53215 AUC after training: 0.0
User 53215 does not improve AUC. Reverting changes.
Training on augumented user 121095 19/50 current_auc = 0.0
User 121095 AUC after training: 0.0
User 121095 does not improve AUC. Reverting changes.
Training on augumented user 116706 20/50 current_auc = 0.0
User 116706 AUC after training: 0.0
User 116706 does not improve AUC. Reverting changes.
Training on augumented user 34965 21/50 current_auc = 0.0
User 34965 AUC after training: 0.0
User 34965 does not improve AUC. Reverting changes.
Training on augumented user 134399 22/50 current_auc = 0.0
User 134399 AUC after training: 0.0
User 134399 does not improve AUC. Reverting changes.
Training on augumented user 91937 23/50 current_auc = 0.0
User 91937 AUC after training: 0.0
User 91937 does not improve AUC. Reverting changes.
Training on augumented user 79583 24/50 current_auc = 0.0
User 79583 AUC after training: 0.0
User 79583 does not improve AUC. Reverting changes.
Training on augumented user 68938 25/50 current_auc = 0.0
User 68938 AUC after training: 0.0
User 68938 does not improve AUC. Reverting changes.
Training on augumented user 122149 26/50 current_auc = 0.0
User 122149 AUC after training: 0.0
User 122149 does not improve AUC. Reverting changes.
Training on augumented user 10670 27/50 current_auc = 0.0
User 10670 AUC after training: 0.0
User 10670 does not improve AUC. Reverting changes.
Training on augumented user 98910 28/50 current_auc = 0.0
User 98910 AUC after training: 0.0
User 98910 does not improve AUC. Reverting changes.
Training on augumented user 90554 29/50 current_auc = 0.0
User 90554 AUC after training: 0.0
User 90554 does not improve AUC. Reverting changes.
Training on augumented user 38802 30/50 current_auc = 0.0
User 38802 AUC after training: 0.0
User 38802 does not improve AUC. Reverting changes.
Training on augumented user 65793 31/50 current_auc = 0.0
User 65793 AUC after training: 0.0
User 65793 does not improve AUC. Reverting changes.
Training on augumented user 20530 32/50 current_auc = 0.0
User 20530 AUC after training: 0.0
User 20530 does not improve AUC. Reverting changes.
Training on augumented user 17444 33/50 current_auc = 0.0
User 17444 AUC after training: 0.0
User 17444 does not improve AUC. Reverting changes.
Training on augumented user 130929 34/50 current_auc = 0.0
User 130929 AUC after training: 0.0
User 130929 does not improve AUC. Reverting changes.
Training on augumented user 117055 35/50 current_auc = 0.0
User 117055 AUC after training: 0.0
User 117055 does not improve AUC. Reverting changes.
Training on augumented user 42141 36/50 current_auc = 0.0
User 42141 AUC after training: 0.0
User 42141 does not improve AUC. Reverting changes.
Training on augumented user 74796 37/50 current_auc = 0.0
User 74796 AUC after training: 0.0
User 74796 does not improve AUC. Reverting changes.
Training on augumented user 38874 38/50 current_auc = 0.0
User 38874 AUC after training: 0.0
User 38874 does not improve AUC. Reverting changes.
Training on augumented user 78757 39/50 current_auc = 0.0
User 78757 AUC after training: 0.0
User 78757 does not improve AUC. Reverting changes.
Training on augumented user 43671 40/50 current_auc = 0.0
User 43671 AUC after training: 0.0
User 43671 does not improve AUC. Reverting changes.
Training on augumented user 87025 41/50 current_auc = 0.0
User 87025 AUC after training: 0.0
User 87025 does not improve AUC. Reverting changes.
Training on augumented user 96915 42/50 current_auc = 0.0
User 96915 AUC after training: 0.0
User 96915 does not improve AUC. Reverting changes.
Training on augumented user 56262 43/50 current_auc = 0.0
User 56262 AUC after training: 0.0
User 56262 does not improve AUC. Reverting changes.
Training on augumented user 25984 44/50 current_auc = 0.0
User 25984 AUC after training: 0.0
User 25984 does not improve AUC. Reverting changes.
Training on augumented user 63605 45/50 current_auc = 0.0
User 63605 AUC after training: 0.0
User 63605 does not improve AUC. Reverting changes.
Training on augumented user 62016 46/50 current_auc = 0.0
User 62016 AUC after training: 0.0
User 62016 does not improve AUC. Reverting changes.
Training on augumented user 51075 47/50 current_auc = 0.0
User 51075 AUC after training: 0.0
User 51075 does not improve AUC. Reverting changes.
Training on augumented user 15202 48/50 current_auc = 0.0
User 15202 AUC after training: 0.0
User 15202 does not improve AUC. Reverting changes.
Training on augumented user 108702 49/50 current_auc = 0.0
User 108702 AUC after training: 0.0
User 108702 does not improve AUC. Reverting changes.
[2024-12-02 17:48:05.593558] start test user 41941 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:06.486280] start test user 41941 19/568 recall augumented users by random, augumented_users = [104697, 88657, 34246, 52580, 48329, 116652, 22027, 55338, 28630, 78088, 98983, 22834, 44387, 64694, 64566, 59281, 31081, 2892, 71487, 1205, 101184, 15152, 77799, 1138, 40967, 41777, 36099, 37337, 6156, 76750, 113821, 109878, 44773, 99995, 93004, 70853, 53627, 58323, 65987, 126259, 122222, 57618, 6300, 108746, 100234, 116689, 78513, 43640, 41970, 3583]
[2024-12-02 17:48:06.507985] user = 41941 Cloud 19/568
[2024-12-02 17:48:06.610126] user = 41941 Local 19/568
[2024-12-02 17:48:06.739965] user = 41941 Local+ 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:09.289284] user = 41941 MPDA- 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5938093945153408
Training on augumented user 104697 0/50 current_auc = 0.5938093945153408
User 104697 AUC after training: 0.5939451534075483
User 104697 improves AUC. Keeping the model.
Training on augumented user 88657 1/50 current_auc = 0.5939451534075483
User 88657 AUC after training: 0.592098832473527
User 88657 does not improve AUC. Reverting changes.
Training on augumented user 34246 2/50 current_auc = 0.5939451534075483
User 34246 AUC after training: 0.5940537605213141
User 34246 improves AUC. Keeping the model.
Training on augumented user 52580 3/50 current_auc = 0.5940537605213141
User 52580 AUC after training: 0.594108064078197
User 52580 improves AUC. Keeping the model.
Training on augumented user 48329 4/50 current_auc = 0.594108064078197
User 48329 AUC after training: 0.5938093945153408
User 48329 does not improve AUC. Reverting changes.
Training on augumented user 116652 5/50 current_auc = 0.594108064078197
User 116652 AUC after training: 0.594270974748846
User 116652 improves AUC. Keeping the model.
Training on augumented user 22027 6/50 current_auc = 0.594270974748846
User 22027 AUC after training: 0.5943524300841705
User 22027 improves AUC. Keeping the model.
Training on augumented user 55338 7/50 current_auc = 0.5943524300841705
User 55338 AUC after training: 0.5942438229704046
User 55338 does not improve AUC. Reverting changes.
Training on augumented user 28630 8/50 current_auc = 0.5943524300841705
User 28630 AUC after training: 0.5935921802878088
User 28630 does not improve AUC. Reverting changes.
Training on augumented user 78088 9/50 current_auc = 0.5943524300841705
User 78088 AUC after training: 0.5946782514254683
User 78088 improves AUC. Keeping the model.
Training on augumented user 98983 10/50 current_auc = 0.5946782514254683
User 98983 AUC after training: 0.5935921802878089
User 98983 does not improve AUC. Reverting changes.
Training on augumented user 22834 11/50 current_auc = 0.5946782514254683
User 22834 AUC after training: 0.5938093945153408
User 22834 does not improve AUC. Reverting changes.
Training on augumented user 44387 12/50 current_auc = 0.5946782514254683
User 44387 AUC after training: 0.5946239478685853
User 44387 does not improve AUC. Reverting changes.
Training on augumented user 64694 13/50 current_auc = 0.5946782514254683
User 64694 AUC after training: 0.5946239478685854
User 64694 does not improve AUC. Reverting changes.
Training on augumented user 64566 14/50 current_auc = 0.5946782514254683
User 64566 AUC after training: 0.5948411620961174
User 64566 improves AUC. Keeping the model.
Training on augumented user 59281 15/50 current_auc = 0.5948411620961174
User 59281 AUC after training: 0.5947325549823512
User 59281 does not improve AUC. Reverting changes.
Training on augumented user 31081 16/50 current_auc = 0.5948411620961174
User 31081 AUC after training: 0.5946782514254684
User 31081 does not improve AUC. Reverting changes.
Training on augumented user 2892 17/50 current_auc = 0.5948411620961174
User 2892 AUC after training: 0.5947325549823513
User 2892 does not improve AUC. Reverting changes.
Training on augumented user 71487 18/50 current_auc = 0.5948411620961174
User 71487 AUC after training: 0.5952212869942981
User 71487 improves AUC. Keeping the model.
Training on augumented user 1205 19/50 current_auc = 0.5952212869942981
User 1205 AUC after training: 0.5952212869942981
User 1205 does not improve AUC. Reverting changes.
Training on augumented user 101184 20/50 current_auc = 0.5952212869942981
User 101184 AUC after training: 0.5952755905511811
User 101184 improves AUC. Keeping the model.
Training on augumented user 15152 21/50 current_auc = 0.5952755905511811
User 15152 AUC after training: 0.5954385012218301
User 15152 improves AUC. Keeping the model.
Training on augumented user 77799 22/50 current_auc = 0.5954385012218301
User 77799 AUC after training: 0.5950040727667663
User 77799 does not improve AUC. Reverting changes.
Training on augumented user 1138 23/50 current_auc = 0.5954385012218301
User 1138 AUC after training: 0.5950583763236492
User 1138 does not improve AUC. Reverting changes.
Training on augumented user 40967 24/50 current_auc = 0.5954385012218301
User 40967 AUC after training: 0.5953027423296227
User 40967 does not improve AUC. Reverting changes.
Training on augumented user 41777 25/50 current_auc = 0.5954385012218301
User 41777 AUC after training: 0.5952212869942981
User 41777 does not improve AUC. Reverting changes.
Training on augumented user 36099 26/50 current_auc = 0.5954385012218301
User 36099 AUC after training: 0.5934292696171599
User 36099 does not improve AUC. Reverting changes.
Training on augumented user 37337 27/50 current_auc = 0.5954385012218301
User 37337 AUC after training: 0.594542492533261
User 37337 does not improve AUC. Reverting changes.
Training on augumented user 6156 28/50 current_auc = 0.5954385012218301
User 6156 AUC after training: 0.5951669834374151
User 6156 does not improve AUC. Reverting changes.
Training on augumented user 76750 29/50 current_auc = 0.5954385012218301
User 76750 AUC after training: 0.5951126798805322
User 76750 does not improve AUC. Reverting changes.
Training on augumented user 113821 30/50 current_auc = 0.5954385012218301
User 113821 AUC after training: 0.5946239478685855
User 113821 does not improve AUC. Reverting changes.
Training on augumented user 109878 31/50 current_auc = 0.5954385012218301
User 109878 AUC after training: 0.5945153407548194
User 109878 does not improve AUC. Reverting changes.
Training on augumented user 44773 32/50 current_auc = 0.5954385012218301
User 44773 AUC after training: 0.5942438229704046
User 44773 does not improve AUC. Reverting changes.
Training on augumented user 99995 33/50 current_auc = 0.5954385012218301
User 99995 AUC after training: 0.5948411620961173
User 99995 does not improve AUC. Reverting changes.
Training on augumented user 93004 34/50 current_auc = 0.5954385012218301
User 93004 AUC after training: 0.5931849036111866
User 93004 does not improve AUC. Reverting changes.
Training on augumented user 70853 35/50 current_auc = 0.5954385012218301
User 70853 AUC after training: 0.5952755905511811
User 70853 does not improve AUC. Reverting changes.
Training on augumented user 53627 36/50 current_auc = 0.5954385012218301
User 53627 AUC after training: 0.5950583763236492
User 53627 does not improve AUC. Reverting changes.
Training on augumented user 58323 37/50 current_auc = 0.5954385012218301
User 58323 AUC after training: 0.595547108335596
User 58323 improves AUC. Keeping the model.
Training on augumented user 65987 38/50 current_auc = 0.595547108335596
User 65987 AUC after training: 0.5941895194135216
User 65987 does not improve AUC. Reverting changes.
Training on augumented user 126259 39/50 current_auc = 0.595547108335596
User 126259 AUC after training: 0.5950583763236492
User 126259 does not improve AUC. Reverting changes.
Training on augumented user 122222 40/50 current_auc = 0.595547108335596
User 122222 AUC after training: 0.5929948411620961
User 122222 does not improve AUC. Reverting changes.
Training on augumented user 57618 41/50 current_auc = 0.595547108335596
User 57618 AUC after training: 0.5942981265272875
User 57618 does not improve AUC. Reverting changes.
Training on augumented user 6300 42/50 current_auc = 0.595547108335596
User 6300 AUC after training: 0.5951126798805322
User 6300 does not improve AUC. Reverting changes.
Training on augumented user 108746 43/50 current_auc = 0.595547108335596
User 108746 AUC after training: 0.595329894108064
User 108746 does not improve AUC. Reverting changes.
Training on augumented user 100234 44/50 current_auc = 0.595547108335596
User 100234 AUC after training: 0.5949497692098833
User 100234 does not improve AUC. Reverting changes.
Training on augumented user 116689 45/50 current_auc = 0.595547108335596
User 116689 AUC after training: 0.5941895194135216
User 116689 does not improve AUC. Reverting changes.
Training on augumented user 78513 46/50 current_auc = 0.595547108335596
User 78513 AUC after training: 0.5951669834374151
User 78513 does not improve AUC. Reverting changes.
Training on augumented user 43640 47/50 current_auc = 0.595547108335596
User 43640 AUC after training: 0.5948954656530002
User 43640 does not improve AUC. Reverting changes.
Training on augumented user 41970 48/50 current_auc = 0.595547108335596
User 41970 AUC after training: 0.5951669834374151
User 41970 does not improve AUC. Reverting changes.
Training on augumented user 3583 49/50 current_auc = 0.595547108335596
User 3583 AUC after training: 0.5944067336410536
User 3583 does not improve AUC. Reverting changes.
[2024-12-02 17:48:40.130943] start test user 42015 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:40.629553] start test user 42015 20/568 recall augumented users by random, augumented_users = [7749, 14954, 43869, 120301, 83924, 15480, 18699, 72245, 48715, 103676, 71840, 52187, 16097, 94691, 63422, 51023, 68992, 102438, 113869, 104252, 134884, 6810, 56583, 52898, 81178, 74800, 102013, 124574, 22871, 9263, 104111, 108759, 28934, 119250, 91229, 26041, 62598, 114624, 117528, 26976, 44139, 123968, 79036, 42157, 73811, 5149, 36421, 27301, 107855, 37008]
[2024-12-02 17:48:40.650224] user = 42015 Cloud 20/568
[2024-12-02 17:48:40.668254] user = 42015 Local 20/568
[2024-12-02 17:48:40.692007] user = 42015 Local+ 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:42.988285] user = 42015 MPDA- 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.875
Training on augumented user 7749 0/50 current_auc = 0.875
User 7749 AUC after training: 0.75
User 7749 does not improve AUC. Reverting changes.
Training on augumented user 14954 1/50 current_auc = 0.875
User 14954 AUC after training: 0.875
User 14954 does not improve AUC. Reverting changes.
Training on augumented user 43869 2/50 current_auc = 0.875
User 43869 AUC after training: 0.75
User 43869 does not improve AUC. Reverting changes.
Training on augumented user 120301 3/50 current_auc = 0.875
User 120301 AUC after training: 0.75
User 120301 does not improve AUC. Reverting changes.
Training on augumented user 83924 4/50 current_auc = 0.875
User 83924 AUC after training: 0.75
User 83924 does not improve AUC. Reverting changes.
Training on augumented user 15480 5/50 current_auc = 0.875
User 15480 AUC after training: 0.875
User 15480 does not improve AUC. Reverting changes.
Training on augumented user 18699 6/50 current_auc = 0.875
User 18699 AUC after training: 0.875
User 18699 does not improve AUC. Reverting changes.
Training on augumented user 72245 7/50 current_auc = 0.875
User 72245 AUC after training: 0.75
User 72245 does not improve AUC. Reverting changes.
Training on augumented user 48715 8/50 current_auc = 0.875
User 48715 AUC after training: 0.75
User 48715 does not improve AUC. Reverting changes.
Training on augumented user 103676 9/50 current_auc = 0.875
User 103676 AUC after training: 0.75
User 103676 does not improve AUC. Reverting changes.
Training on augumented user 71840 10/50 current_auc = 0.875
User 71840 AUC after training: 0.75
User 71840 does not improve AUC. Reverting changes.
Training on augumented user 52187 11/50 current_auc = 0.875
User 52187 AUC after training: 0.75
User 52187 does not improve AUC. Reverting changes.
Training on augumented user 16097 12/50 current_auc = 0.875
User 16097 AUC after training: 0.75
User 16097 does not improve AUC. Reverting changes.
Training on augumented user 94691 13/50 current_auc = 0.875
User 94691 AUC after training: 0.75
User 94691 does not improve AUC. Reverting changes.
Training on augumented user 63422 14/50 current_auc = 0.875
User 63422 AUC after training: 0.875
User 63422 does not improve AUC. Reverting changes.
Training on augumented user 51023 15/50 current_auc = 0.875
User 51023 AUC after training: 0.75
User 51023 does not improve AUC. Reverting changes.
Training on augumented user 68992 16/50 current_auc = 0.875
User 68992 AUC after training: 0.75
User 68992 does not improve AUC. Reverting changes.
Training on augumented user 102438 17/50 current_auc = 0.875
User 102438 AUC after training: 0.875
User 102438 does not improve AUC. Reverting changes.
Training on augumented user 113869 18/50 current_auc = 0.875
User 113869 AUC after training: 0.75
User 113869 does not improve AUC. Reverting changes.
Training on augumented user 104252 19/50 current_auc = 0.875
User 104252 AUC after training: 0.875
User 104252 does not improve AUC. Reverting changes.
Training on augumented user 134884 20/50 current_auc = 0.875
User 134884 AUC after training: 0.875
User 134884 does not improve AUC. Reverting changes.
Training on augumented user 6810 21/50 current_auc = 0.875
User 6810 AUC after training: 0.875
User 6810 does not improve AUC. Reverting changes.
Training on augumented user 56583 22/50 current_auc = 0.875
User 56583 AUC after training: 0.75
User 56583 does not improve AUC. Reverting changes.
Training on augumented user 52898 23/50 current_auc = 0.875
User 52898 AUC after training: 0.875
User 52898 does not improve AUC. Reverting changes.
Training on augumented user 81178 24/50 current_auc = 0.875
User 81178 AUC after training: 0.75
User 81178 does not improve AUC. Reverting changes.
Training on augumented user 74800 25/50 current_auc = 0.875
User 74800 AUC after training: 0.75
User 74800 does not improve AUC. Reverting changes.
Training on augumented user 102013 26/50 current_auc = 0.875
User 102013 AUC after training: 0.75
User 102013 does not improve AUC. Reverting changes.
Training on augumented user 124574 27/50 current_auc = 0.875
User 124574 AUC after training: 0.875
User 124574 does not improve AUC. Reverting changes.
Training on augumented user 22871 28/50 current_auc = 0.875
User 22871 AUC after training: 0.875
User 22871 does not improve AUC. Reverting changes.
Training on augumented user 9263 29/50 current_auc = 0.875
User 9263 AUC after training: 0.875
User 9263 does not improve AUC. Reverting changes.
Training on augumented user 104111 30/50 current_auc = 0.875
User 104111 AUC after training: 0.875
User 104111 does not improve AUC. Reverting changes.
Training on augumented user 108759 31/50 current_auc = 0.875
User 108759 AUC after training: 0.75
User 108759 does not improve AUC. Reverting changes.
Training on augumented user 28934 32/50 current_auc = 0.875
User 28934 AUC after training: 0.75
User 28934 does not improve AUC. Reverting changes.
Training on augumented user 119250 33/50 current_auc = 0.875
User 119250 AUC after training: 0.875
User 119250 does not improve AUC. Reverting changes.
Training on augumented user 91229 34/50 current_auc = 0.875
User 91229 AUC after training: 0.75
User 91229 does not improve AUC. Reverting changes.
Training on augumented user 26041 35/50 current_auc = 0.875
User 26041 AUC after training: 0.875
User 26041 does not improve AUC. Reverting changes.
Training on augumented user 62598 36/50 current_auc = 0.875
User 62598 AUC after training: 0.75
User 62598 does not improve AUC. Reverting changes.
Training on augumented user 114624 37/50 current_auc = 0.875
User 114624 AUC after training: 0.75
User 114624 does not improve AUC. Reverting changes.
Training on augumented user 117528 38/50 current_auc = 0.875
User 117528 AUC after training: 0.875
User 117528 does not improve AUC. Reverting changes.
Training on augumented user 26976 39/50 current_auc = 0.875
User 26976 AUC after training: 0.75
User 26976 does not improve AUC. Reverting changes.
Training on augumented user 44139 40/50 current_auc = 0.875
User 44139 AUC after training: 0.875
User 44139 does not improve AUC. Reverting changes.
Training on augumented user 123968 41/50 current_auc = 0.875
User 123968 AUC after training: 0.875
User 123968 does not improve AUC. Reverting changes.
Training on augumented user 79036 42/50 current_auc = 0.875
User 79036 AUC after training: 0.75
User 79036 does not improve AUC. Reverting changes.
Training on augumented user 42157 43/50 current_auc = 0.875
User 42157 AUC after training: 0.75
User 42157 does not improve AUC. Reverting changes.
Training on augumented user 73811 44/50 current_auc = 0.875
User 73811 AUC after training: 0.875
User 73811 does not improve AUC. Reverting changes.
Training on augumented user 5149 45/50 current_auc = 0.875
User 5149 AUC after training: 0.75
User 5149 does not improve AUC. Reverting changes.
Training on augumented user 36421 46/50 current_auc = 0.875
User 36421 AUC after training: 0.75
User 36421 does not improve AUC. Reverting changes.
Training on augumented user 27301 47/50 current_auc = 0.875
User 27301 AUC after training: 0.875
User 27301 does not improve AUC. Reverting changes.
Training on augumented user 107855 48/50 current_auc = 0.875
User 107855 AUC after training: 0.75
User 107855 does not improve AUC. Reverting changes.
Training on augumented user 37008 49/50 current_auc = 0.875
User 37008 AUC after training: 0.75
User 37008 does not improve AUC. Reverting changes.
[2024-12-02 17:49:09.540985] start test user 42029 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:10.224333] start test user 42029 21/568 recall augumented users by random, augumented_users = [66217, 63673, 129974, 47064, 76035, 20575, 130282, 116591, 115012, 113740, 51249, 78993, 107067, 45812, 130595, 124538, 117881, 104440, 108388, 42191, 110055, 58180, 28085, 120229, 58919, 22859, 6049, 20304, 87717, 81945, 88741, 4565, 41361, 15172, 104467, 12896, 18478, 114380, 104349, 95164, 91493, 90579, 28080, 11049, 134320, 69531, 3749, 46681, 60667, 84271]
[2024-12-02 17:49:10.238372] user = 42029 Cloud 21/568
[2024-12-02 17:49:10.253397] user = 42029 Local 21/568
[2024-12-02 17:49:10.339610] user = 42029 Local+ 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:12.747523] user = 42029 MPDA- 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6732740021574973
Training on augumented user 66217 0/50 current_auc = 0.6732740021574973
User 66217 AUC after training: 0.6723975188781014
User 66217 does not improve AUC. Reverting changes.
Training on augumented user 63673 1/50 current_auc = 0.6732740021574973
User 63673 AUC after training: 0.6720604099244876
User 63673 does not improve AUC. Reverting changes.
Training on augumented user 129974 2/50 current_auc = 0.6732740021574973
User 129974 AUC after training: 0.6724649406688242
User 129974 does not improve AUC. Reverting changes.
Training on augumented user 47064 3/50 current_auc = 0.6732740021574973
User 47064 AUC after training: 0.6719929881337648
User 47064 does not improve AUC. Reverting changes.
Training on augumented user 76035 4/50 current_auc = 0.6732740021574973
User 76035 AUC after training: 0.6723300970873787
User 76035 does not improve AUC. Reverting changes.
Training on augumented user 20575 5/50 current_auc = 0.6732740021574973
User 20575 AUC after training: 0.6717233009708738
User 20575 does not improve AUC. Reverting changes.
Training on augumented user 130282 6/50 current_auc = 0.6732740021574973
User 130282 AUC after training: 0.6725997842502697
User 130282 does not improve AUC. Reverting changes.
Training on augumented user 116591 7/50 current_auc = 0.6732740021574973
User 116591 AUC after training: 0.6718581445523193
User 116591 does not improve AUC. Reverting changes.
Training on augumented user 115012 8/50 current_auc = 0.6732740021574973
User 115012 AUC after training: 0.672195253505933
User 115012 does not improve AUC. Reverting changes.
Training on augumented user 113740 9/50 current_auc = 0.6732740021574973
User 113740 AUC after training: 0.6727346278317152
User 113740 does not improve AUC. Reverting changes.
Training on augumented user 51249 10/50 current_auc = 0.6732740021574973
User 51249 AUC after training: 0.67334142394822
User 51249 improves AUC. Keeping the model.
Training on augumented user 78993 11/50 current_auc = 0.67334142394822
User 78993 AUC after training: 0.672802049622438
User 78993 does not improve AUC. Reverting changes.
Training on augumented user 107067 12/50 current_auc = 0.67334142394822
User 107067 AUC after training: 0.6719929881337648
User 107067 does not improve AUC. Reverting changes.
Training on augumented user 45812 13/50 current_auc = 0.67334142394822
User 45812 AUC after training: 0.672802049622438
User 45812 does not improve AUC. Reverting changes.
Training on augumented user 130595 14/50 current_auc = 0.67334142394822
User 130595 AUC after training: 0.6732065803667746
User 130595 does not improve AUC. Reverting changes.
Training on augumented user 124538 15/50 current_auc = 0.67334142394822
User 124538 AUC after training: 0.6722626752966558
User 124538 does not improve AUC. Reverting changes.
Training on augumented user 117881 16/50 current_auc = 0.67334142394822
User 117881 AUC after training: 0.6718581445523193
User 117881 does not improve AUC. Reverting changes.
Training on augumented user 104440 17/50 current_auc = 0.67334142394822
User 104440 AUC after training: 0.6718581445523193
User 104440 does not improve AUC. Reverting changes.
Training on augumented user 108388 18/50 current_auc = 0.67334142394822
User 108388 AUC after training: 0.6734762675296656
User 108388 improves AUC. Keeping the model.
Training on augumented user 42191 19/50 current_auc = 0.6734762675296656
User 42191 AUC after training: 0.6734088457389429
User 42191 does not improve AUC. Reverting changes.
Training on augumented user 110055 20/50 current_auc = 0.6734762675296656
User 110055 AUC after training: 0.6721278317152103
User 110055 does not improve AUC. Reverting changes.
Training on augumented user 58180 21/50 current_auc = 0.6734762675296656
User 58180 AUC after training: 0.6722626752966558
User 58180 does not improve AUC. Reverting changes.
Training on augumented user 28085 22/50 current_auc = 0.6734762675296656
User 28085 AUC after training: 0.6723975188781014
User 28085 does not improve AUC. Reverting changes.
Training on augumented user 120229 23/50 current_auc = 0.6734762675296656
User 120229 AUC after training: 0.6732065803667745
User 120229 does not improve AUC. Reverting changes.
Training on augumented user 58919 24/50 current_auc = 0.6734762675296656
User 58919 AUC after training: 0.6735436893203883
User 58919 improves AUC. Keeping the model.
Training on augumented user 22859 25/50 current_auc = 0.6735436893203883
User 22859 AUC after training: 0.6738133764832794
User 22859 improves AUC. Keeping the model.
Training on augumented user 6049 26/50 current_auc = 0.6738133764832794
User 6049 AUC after training: 0.6738133764832794
User 6049 does not improve AUC. Reverting changes.
Training on augumented user 20304 27/50 current_auc = 0.6738133764832794
User 20304 AUC after training: 0.6703748651564185
User 20304 does not improve AUC. Reverting changes.
Training on augumented user 87717 28/50 current_auc = 0.6738133764832794
User 87717 AUC after training: 0.6743527508090614
User 87717 improves AUC. Keeping the model.
Training on augumented user 81945 29/50 current_auc = 0.6743527508090614
User 81945 AUC after training: 0.6734088457389428
User 81945 does not improve AUC. Reverting changes.
Training on augumented user 88741 30/50 current_auc = 0.6743527508090614
User 88741 AUC after training: 0.6730043149946063
User 88741 does not improve AUC. Reverting changes.
Training on augumented user 4565 31/50 current_auc = 0.6743527508090614
User 4565 AUC after training: 0.6722626752966558
User 4565 does not improve AUC. Reverting changes.
Training on augumented user 41361 32/50 current_auc = 0.6743527508090614
User 41361 AUC after training: 0.6735436893203884
User 41361 does not improve AUC. Reverting changes.
Training on augumented user 15172 33/50 current_auc = 0.6743527508090614
User 15172 AUC after training: 0.6740830636461704
User 15172 does not improve AUC. Reverting changes.
Training on augumented user 104467 34/50 current_auc = 0.6743527508090614
User 104467 AUC after training: 0.6746224379719525
User 104467 improves AUC. Keeping the model.
Training on augumented user 12896 35/50 current_auc = 0.6746224379719525
User 12896 AUC after training: 0.6743527508090614
User 12896 does not improve AUC. Reverting changes.
Training on augumented user 18478 36/50 current_auc = 0.6746224379719525
User 18478 AUC after training: 0.674217907227616
User 18478 does not improve AUC. Reverting changes.
Training on augumented user 114380 37/50 current_auc = 0.6746224379719525
User 114380 AUC after training: 0.6740830636461705
User 114380 does not improve AUC. Reverting changes.
Training on augumented user 104349 38/50 current_auc = 0.6746224379719525
User 104349 AUC after training: 0.6701725997842503
User 104349 does not improve AUC. Reverting changes.
Training on augumented user 95164 39/50 current_auc = 0.6746224379719525
User 95164 AUC after training: 0.6736785329018339
User 95164 does not improve AUC. Reverting changes.
Training on augumented user 91493 40/50 current_auc = 0.6746224379719525
User 91493 AUC after training: 0.6735436893203883
User 91493 does not improve AUC. Reverting changes.
Training on augumented user 90579 41/50 current_auc = 0.6746224379719525
User 90579 AUC after training: 0.6740156418554477
User 90579 does not improve AUC. Reverting changes.
Training on augumented user 28080 42/50 current_auc = 0.6746224379719525
User 28080 AUC after training: 0.674217907227616
User 28080 does not improve AUC. Reverting changes.
Training on augumented user 11049 43/50 current_auc = 0.6746224379719525
User 11049 AUC after training: 0.6738133764832793
User 11049 does not improve AUC. Reverting changes.
Training on augumented user 134320 44/50 current_auc = 0.6746224379719525
User 134320 AUC after training: 0.6723975188781014
User 134320 does not improve AUC. Reverting changes.
Training on augumented user 69531 45/50 current_auc = 0.6746224379719525
User 69531 AUC after training: 0.674487594390507
User 69531 does not improve AUC. Reverting changes.
Training on augumented user 3749 46/50 current_auc = 0.6746224379719525
User 3749 AUC after training: 0.674217907227616
User 3749 does not improve AUC. Reverting changes.
Training on augumented user 46681 47/50 current_auc = 0.6746224379719525
User 46681 AUC after training: 0.6738133764832793
User 46681 does not improve AUC. Reverting changes.
Training on augumented user 60667 48/50 current_auc = 0.6746224379719525
User 60667 AUC after training: 0.6747572815533981
User 60667 improves AUC. Keeping the model.
Training on augumented user 84271 49/50 current_auc = 0.6747572815533981
User 84271 AUC after training: 0.6743527508090615
User 84271 does not improve AUC. Reverting changes.
[2024-12-02 17:49:42.207335] start test user 42032 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:42.706254] start test user 42032 22/568 recall augumented users by random, augumented_users = [1069, 15242, 131884, 35065, 41058, 5838, 138161, 120084, 85649, 2296, 46719, 88345, 61912, 93998, 132602, 131540, 123492, 56124, 2494, 70652, 131522, 20734, 102754, 65162, 79188, 18316, 78353, 53785, 6052, 27262, 86692, 25931, 74244, 1895, 86886, 86859, 93548, 74190, 39870, 79166, 17895, 56397, 23254, 122080, 61695, 38552, 11082, 38898, 106413, 28530]
[2024-12-02 17:49:42.736618] user = 42032 Cloud 22/568
[2024-12-02 17:49:42.912703] user = 42032 Local 22/568
[2024-12-02 17:49:43.360439] user = 42032 Local+ 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:45.646878] user = 42032 MPDA- 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6819561220300255
Training on augumented user 1069 0/50 current_auc = 0.6819561220300255
User 1069 AUC after training: 0.6817508345382817
User 1069 does not improve AUC. Reverting changes.
Training on augumented user 15242 1/50 current_auc = 0.6819561220300255
User 15242 AUC after training: 0.6827281815098449
User 15242 improves AUC. Keeping the model.
Training on augumented user 131884 2/50 current_auc = 0.6827281815098449
User 131884 AUC after training: 0.6832726396401221
User 131884 improves AUC. Keeping the model.
Training on augumented user 35065 3/50 current_auc = 0.6832726396401221
User 35065 AUC after training: 0.6822417394098431
User 35065 does not improve AUC. Reverting changes.
Training on augumented user 41058 4/50 current_auc = 0.6832726396401221
User 41058 AUC after training: 0.6834109855584712
User 41058 improves AUC. Keeping the model.
Training on augumented user 5838 5/50 current_auc = 0.6834109855584712
User 5838 AUC after training: 0.6833217301272783
User 5838 does not improve AUC. Reverting changes.
Training on augumented user 138161 6/50 current_auc = 0.6834109855584712
User 138161 AUC after training: 0.6830718149199378
User 138161 does not improve AUC. Reverting changes.
Training on augumented user 120084 7/50 current_auc = 0.6834109855584712
User 120084 AUC after training: 0.6822506649529625
User 120084 does not improve AUC. Reverting changes.
Training on augumented user 85649 8/50 current_auc = 0.6834109855584712
User 85649 AUC after training: 0.6832503257823238
User 85649 does not improve AUC. Reverting changes.
Training on augumented user 2296 9/50 current_auc = 0.6834109855584712
User 2296 AUC after training: 0.6827103304236063
User 2296 does not improve AUC. Reverting changes.
Training on augumented user 46719 10/50 current_auc = 0.6834109855584712
User 46719 AUC after training: 0.6821881861511273
User 46719 does not improve AUC. Reverting changes.
Training on augumented user 88345 11/50 current_auc = 0.6834109855584712
User 88345 AUC after training: 0.6827683464538816
User 88345 does not improve AUC. Reverting changes.
Training on augumented user 61912 12/50 current_auc = 0.6834109855584712
User 61912 AUC after training: 0.6841161034648958
User 61912 improves AUC. Keeping the model.
Training on augumented user 93998 13/50 current_auc = 0.6841161034648958
User 93998 AUC after training: 0.6836966029382887
User 93998 does not improve AUC. Reverting changes.
Training on augumented user 132602 14/50 current_auc = 0.6841161034648958
User 132602 AUC after training: 0.6841696567236116
User 132602 improves AUC. Keeping the model.
Training on augumented user 131540 15/50 current_auc = 0.6841696567236116
User 131540 AUC after training: 0.684026848033703
User 131540 does not improve AUC. Reverting changes.
Training on augumented user 123492 16/50 current_auc = 0.6841696567236116
User 123492 AUC after training: 0.6826523143933309
User 123492 does not improve AUC. Reverting changes.
Training on augumented user 56124 17/50 current_auc = 0.6841696567236116
User 56124 AUC after training: 0.6838483371713169
User 56124 does not improve AUC. Reverting changes.
Training on augumented user 2494 18/50 current_auc = 0.6841696567236116
User 2494 AUC after training: 0.6829825594887449
User 2494 does not improve AUC. Reverting changes.
Training on augumented user 70652 19/50 current_auc = 0.6841696567236116
User 70652 AUC after training: 0.683821560541959
User 70652 does not improve AUC. Reverting changes.
Training on augumented user 131522 20/50 current_auc = 0.6841696567236116
User 131522 AUC after training: 0.6845177529052643
User 131522 improves AUC. Keeping the model.
Training on augumented user 20734 21/50 current_auc = 0.6845177529052643
User 20734 AUC after training: 0.6840804012924186
User 20734 does not improve AUC. Reverting changes.
Training on augumented user 102754 22/50 current_auc = 0.6845177529052643
User 102754 AUC after training: 0.6846427105089344
User 102754 improves AUC. Keeping the model.
Training on augumented user 65162 23/50 current_auc = 0.6846427105089344
User 65162 AUC after training: 0.6845623806208607
User 65162 does not improve AUC. Reverting changes.
Training on augumented user 79188 24/50 current_auc = 0.6846427105089344
User 79188 AUC after training: 0.6821346328924115
User 79188 does not improve AUC. Reverting changes.
Training on augumented user 18316 25/50 current_auc = 0.6846427105089344
User 18316 AUC after training: 0.6842053588960888
User 18316 does not improve AUC. Reverting changes.
Training on augumented user 78353 26/50 current_auc = 0.6846427105089344
User 78353 AUC after training: 0.6844284974740712
User 78353 does not improve AUC. Reverting changes.
Training on augumented user 53785 27/50 current_auc = 0.6846427105089344
User 53785 AUC after training: 0.6853746050447169
User 53785 improves AUC. Keeping the model.
Training on augumented user 6052 28/50 current_auc = 0.6853746050447169
User 6052 AUC after training: 0.6839018904300327
User 6052 does not improve AUC. Reverting changes.
Training on augumented user 27262 29/50 current_auc = 0.6853746050447169
User 27262 AUC after training: 0.685196094182331
User 27262 does not improve AUC. Reverting changes.
Training on augumented user 86692 30/50 current_auc = 0.6853746050447169
User 86692 AUC after training: 0.6855798925364609
User 86692 improves AUC. Keeping the model.
Training on augumented user 25931 31/50 current_auc = 0.6855798925364609
User 25931 AUC after training: 0.6852407218979275
User 25931 does not improve AUC. Reverting changes.
Training on augumented user 74244 32/50 current_auc = 0.6855798925364609
User 74244 AUC after training: 0.6854549349327907
User 74244 does not improve AUC. Reverting changes.
Training on augumented user 1895 33/50 current_auc = 0.6855798925364609
User 1895 AUC after training: 0.6863742658740783
User 1895 improves AUC. Keeping the model.
Training on augumented user 86886 34/50 current_auc = 0.6863742658740783
User 86886 AUC after training: 0.6841294917795747
User 86886 does not improve AUC. Reverting changes.
Training on augumented user 86859 35/50 current_auc = 0.6863742658740783
User 86859 AUC after training: 0.6865081490208679
User 86859 improves AUC. Keeping the model.
Training on augumented user 93548 36/50 current_auc = 0.6865081490208679
User 93548 AUC after training: 0.6835894964208571
User 93548 does not improve AUC. Reverting changes.
Training on augumented user 74190 37/50 current_auc = 0.6865081490208679
User 74190 AUC after training: 0.6856780735107731
User 74190 does not improve AUC. Reverting changes.
Training on augumented user 39870 38/50 current_auc = 0.6865081490208679
User 39870 AUC after training: 0.6865527767364644
User 39870 improves AUC. Keeping the model.
Training on augumented user 79166 39/50 current_auc = 0.6865527767364644
User 79166 AUC after training: 0.6863117870722434
User 79166 does not improve AUC. Reverting changes.
Training on augumented user 17895 40/50 current_auc = 0.6865527767364644
User 17895 AUC after training: 0.6863564147878398
User 17895 does not improve AUC. Reverting changes.
Training on augumented user 56397 41/50 current_auc = 0.6865527767364644
User 56397 AUC after training: 0.6861422017529766
User 56397 does not improve AUC. Reverting changes.
Training on augumented user 23254 42/50 current_auc = 0.6865527767364644
User 23254 AUC after training: 0.686646494939217
User 23254 improves AUC. Keeping the model.
Training on augumented user 122080 43/50 current_auc = 0.686646494939217
User 122080 AUC after training: 0.686088648494261
User 122080 does not improve AUC. Reverting changes.
Training on augumented user 61695 44/50 current_auc = 0.686646494939217
User 61695 AUC after training: 0.6871552508970171
User 61695 improves AUC. Keeping the model.
Training on augumented user 38552 45/50 current_auc = 0.6871552508970171
User 38552 AUC after training: 0.6863653403309592
User 38552 does not improve AUC. Reverting changes.
Training on augumented user 11082 46/50 current_auc = 0.6871552508970171
User 11082 AUC after training: 0.6868696335171995
User 11082 does not improve AUC. Reverting changes.
Training on augumented user 38898 47/50 current_auc = 0.6871552508970171
User 38898 AUC after training: 0.6866688087970153
User 38898 does not improve AUC. Reverting changes.
Training on augumented user 106413 48/50 current_auc = 0.6871552508970171
User 106413 AUC after training: 0.6865974044520609
User 106413 does not improve AUC. Reverting changes.
Training on augumented user 28530 49/50 current_auc = 0.6871552508970171
User 28530 AUC after training: 0.6865974044520609
User 28530 does not improve AUC. Reverting changes.
[2024-12-02 17:50:20.628979] start test user 42046 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:21.120996] start test user 42046 23/568 recall augumented users by random, augumented_users = [58668, 86499, 114920, 2901, 87568, 67121, 90956, 8985, 32332, 1425, 31334, 83904, 57959, 46425, 79126, 23291, 26000, 51290, 4370, 93597, 123709, 37639, 33800, 62309, 41222, 72631, 41140, 73355, 49576, 116860, 128029, 116517, 291, 48244, 9692, 79151, 12271, 31645, 62520, 108098, 1854, 58567, 58832, 100067, 132342, 134879, 26819, 69393, 36388, 80645]
[2024-12-02 17:50:21.142468] user = 42046 Cloud 23/568
[2024-12-02 17:50:21.151657] user = 42046 Local 23/568
[2024-12-02 17:50:21.209977] user = 42046 Local+ 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:24.227876] user = 42046 MPDA- 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.875
Training on augumented user 58668 0/50 current_auc = 0.875
User 58668 AUC after training: 0.875
User 58668 does not improve AUC. Reverting changes.
Training on augumented user 86499 1/50 current_auc = 0.875
User 86499 AUC after training: 0.875
User 86499 does not improve AUC. Reverting changes.
Training on augumented user 114920 2/50 current_auc = 0.875
User 114920 AUC after training: 0.875
User 114920 does not improve AUC. Reverting changes.
Training on augumented user 2901 3/50 current_auc = 0.875
User 2901 AUC after training: 0.875
User 2901 does not improve AUC. Reverting changes.
Training on augumented user 87568 4/50 current_auc = 0.875
User 87568 AUC after training: 0.875
User 87568 does not improve AUC. Reverting changes.
Training on augumented user 67121 5/50 current_auc = 0.875
User 67121 AUC after training: 0.875
User 67121 does not improve AUC. Reverting changes.
Training on augumented user 90956 6/50 current_auc = 0.875
User 90956 AUC after training: 0.875
User 90956 does not improve AUC. Reverting changes.
Training on augumented user 8985 7/50 current_auc = 0.875
User 8985 AUC after training: 0.875
User 8985 does not improve AUC. Reverting changes.
Training on augumented user 32332 8/50 current_auc = 0.875
User 32332 AUC after training: 0.875
User 32332 does not improve AUC. Reverting changes.
Training on augumented user 1425 9/50 current_auc = 0.875
User 1425 AUC after training: 0.875
User 1425 does not improve AUC. Reverting changes.
Training on augumented user 31334 10/50 current_auc = 0.875
User 31334 AUC after training: 0.875
User 31334 does not improve AUC. Reverting changes.
Training on augumented user 83904 11/50 current_auc = 0.875
User 83904 AUC after training: 0.875
User 83904 does not improve AUC. Reverting changes.
Training on augumented user 57959 12/50 current_auc = 0.875
User 57959 AUC after training: 0.875
User 57959 does not improve AUC. Reverting changes.
Training on augumented user 46425 13/50 current_auc = 0.875
User 46425 AUC after training: 0.875
User 46425 does not improve AUC. Reverting changes.
Training on augumented user 79126 14/50 current_auc = 0.875
User 79126 AUC after training: 0.875
User 79126 does not improve AUC. Reverting changes.
Training on augumented user 23291 15/50 current_auc = 0.875
User 23291 AUC after training: 0.875
User 23291 does not improve AUC. Reverting changes.
Training on augumented user 26000 16/50 current_auc = 0.875
User 26000 AUC after training: 0.875
User 26000 does not improve AUC. Reverting changes.
Training on augumented user 51290 17/50 current_auc = 0.875
User 51290 AUC after training: 0.875
User 51290 does not improve AUC. Reverting changes.
Training on augumented user 4370 18/50 current_auc = 0.875
User 4370 AUC after training: 0.875
User 4370 does not improve AUC. Reverting changes.
Training on augumented user 93597 19/50 current_auc = 0.875
User 93597 AUC after training: 0.875
User 93597 does not improve AUC. Reverting changes.
Training on augumented user 123709 20/50 current_auc = 0.875
User 123709 AUC after training: 0.875
User 123709 does not improve AUC. Reverting changes.
Training on augumented user 37639 21/50 current_auc = 0.875
User 37639 AUC after training: 0.875
User 37639 does not improve AUC. Reverting changes.
Training on augumented user 33800 22/50 current_auc = 0.875
User 33800 AUC after training: 0.875
User 33800 does not improve AUC. Reverting changes.
Training on augumented user 62309 23/50 current_auc = 0.875
User 62309 AUC after training: 0.875
User 62309 does not improve AUC. Reverting changes.
Training on augumented user 41222 24/50 current_auc = 0.875
User 41222 AUC after training: 0.875
User 41222 does not improve AUC. Reverting changes.
Training on augumented user 72631 25/50 current_auc = 0.875
User 72631 AUC after training: 0.875
User 72631 does not improve AUC. Reverting changes.
Training on augumented user 41140 26/50 current_auc = 0.875
User 41140 AUC after training: 0.875
User 41140 does not improve AUC. Reverting changes.
Training on augumented user 73355 27/50 current_auc = 0.875
User 73355 AUC after training: 0.875
User 73355 does not improve AUC. Reverting changes.
Training on augumented user 49576 28/50 current_auc = 0.875
User 49576 AUC after training: 0.875
User 49576 does not improve AUC. Reverting changes.
Training on augumented user 116860 29/50 current_auc = 0.875
User 116860 AUC after training: 0.875
User 116860 does not improve AUC. Reverting changes.
Training on augumented user 128029 30/50 current_auc = 0.875
User 128029 AUC after training: 0.875
User 128029 does not improve AUC. Reverting changes.
Training on augumented user 116517 31/50 current_auc = 0.875
User 116517 AUC after training: 0.875
User 116517 does not improve AUC. Reverting changes.
Training on augumented user 291 32/50 current_auc = 0.875
User 291 AUC after training: 0.875
User 291 does not improve AUC. Reverting changes.
Training on augumented user 48244 33/50 current_auc = 0.875
User 48244 AUC after training: 0.875
User 48244 does not improve AUC. Reverting changes.
Training on augumented user 9692 34/50 current_auc = 0.875
User 9692 AUC after training: 0.875
User 9692 does not improve AUC. Reverting changes.
Training on augumented user 79151 35/50 current_auc = 0.875
User 79151 AUC after training: 0.8333333333333334
User 79151 does not improve AUC. Reverting changes.
Training on augumented user 12271 36/50 current_auc = 0.875
User 12271 AUC after training: 0.875
User 12271 does not improve AUC. Reverting changes.
Training on augumented user 31645 37/50 current_auc = 0.875
User 31645 AUC after training: 0.875
User 31645 does not improve AUC. Reverting changes.
Training on augumented user 62520 38/50 current_auc = 0.875
User 62520 AUC after training: 0.875
User 62520 does not improve AUC. Reverting changes.
Training on augumented user 108098 39/50 current_auc = 0.875
User 108098 AUC after training: 0.875
User 108098 does not improve AUC. Reverting changes.
Training on augumented user 1854 40/50 current_auc = 0.875
User 1854 AUC after training: 0.875
User 1854 does not improve AUC. Reverting changes.
Training on augumented user 58567 41/50 current_auc = 0.875
User 58567 AUC after training: 0.875
User 58567 does not improve AUC. Reverting changes.
Training on augumented user 58832 42/50 current_auc = 0.875
User 58832 AUC after training: 0.875
User 58832 does not improve AUC. Reverting changes.
Training on augumented user 100067 43/50 current_auc = 0.875
User 100067 AUC after training: 0.875
User 100067 does not improve AUC. Reverting changes.
Training on augumented user 132342 44/50 current_auc = 0.875
User 132342 AUC after training: 0.875
User 132342 does not improve AUC. Reverting changes.
Training on augumented user 134879 45/50 current_auc = 0.875
User 134879 AUC after training: 0.875
User 134879 does not improve AUC. Reverting changes.
Training on augumented user 26819 46/50 current_auc = 0.875
User 26819 AUC after training: 0.875
User 26819 does not improve AUC. Reverting changes.
Training on augumented user 69393 47/50 current_auc = 0.875
User 69393 AUC after training: 0.875
User 69393 does not improve AUC. Reverting changes.
Training on augumented user 36388 48/50 current_auc = 0.875
User 36388 AUC after training: 0.875
User 36388 does not improve AUC. Reverting changes.
Training on augumented user 80645 49/50 current_auc = 0.875
User 80645 AUC after training: 0.875
User 80645 does not improve AUC. Reverting changes.
[2024-12-02 17:50:50.050627] start test user 42069 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:50.469770] start test user 42069 24/568 recall augumented users by random, augumented_users = [42128, 127021, 21825, 96443, 91020, 56030, 87972, 56527, 12255, 91154, 110729, 109099, 5355, 124704, 36064, 2250, 63701, 77053, 69989, 52590, 105592, 23776, 27770, 114694, 51268, 9190, 31687, 51826, 116749, 47479, 105122, 96436, 48084, 107655, 4714, 134571, 6924, 36212, 49855, 18150, 9422, 1859, 77415, 51089, 9916, 48625, 63069, 48786, 115744, 114]
[2024-12-02 17:50:50.486651] user = 42069 Cloud 24/568
[2024-12-02 17:50:50.497113] user = 42069 Local 24/568
[2024-12-02 17:50:50.780193] user = 42069 Local+ 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:53.230626] user = 42069 MPDA- 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6904761904761905
Training on augumented user 42128 0/50 current_auc = 0.6904761904761905
User 42128 AUC after training: 0.6904761904761905
User 42128 does not improve AUC. Reverting changes.
Training on augumented user 127021 1/50 current_auc = 0.6904761904761905
User 127021 AUC after training: 0.6904761904761905
User 127021 does not improve AUC. Reverting changes.
Training on augumented user 21825 2/50 current_auc = 0.6904761904761905
User 21825 AUC after training: 0.6904761904761905
User 21825 does not improve AUC. Reverting changes.
Training on augumented user 96443 3/50 current_auc = 0.6904761904761905
User 96443 AUC after training: 0.6904761904761905
User 96443 does not improve AUC. Reverting changes.
Training on augumented user 91020 4/50 current_auc = 0.6904761904761905
User 91020 AUC after training: 0.7142857142857143
User 91020 improves AUC. Keeping the model.
Training on augumented user 56030 5/50 current_auc = 0.7142857142857143
User 56030 AUC after training: 0.7142857142857143
User 56030 does not improve AUC. Reverting changes.
Training on augumented user 87972 6/50 current_auc = 0.7142857142857143
User 87972 AUC after training: 0.7142857142857143
User 87972 does not improve AUC. Reverting changes.
Training on augumented user 56527 7/50 current_auc = 0.7142857142857143
User 56527 AUC after training: 0.7142857142857143
User 56527 does not improve AUC. Reverting changes.
Training on augumented user 12255 8/50 current_auc = 0.7142857142857143
User 12255 AUC after training: 0.7142857142857143
User 12255 does not improve AUC. Reverting changes.
Training on augumented user 91154 9/50 current_auc = 0.7142857142857143
User 91154 AUC after training: 0.7142857142857143
User 91154 does not improve AUC. Reverting changes.
Training on augumented user 110729 10/50 current_auc = 0.7142857142857143
User 110729 AUC after training: 0.7142857142857143
User 110729 does not improve AUC. Reverting changes.
Training on augumented user 109099 11/50 current_auc = 0.7142857142857143
User 109099 AUC after training: 0.7142857142857143
User 109099 does not improve AUC. Reverting changes.
Training on augumented user 5355 12/50 current_auc = 0.7142857142857143
User 5355 AUC after training: 0.7142857142857143
User 5355 does not improve AUC. Reverting changes.
Training on augumented user 124704 13/50 current_auc = 0.7142857142857143
User 124704 AUC after training: 0.7142857142857143
User 124704 does not improve AUC. Reverting changes.
Training on augumented user 36064 14/50 current_auc = 0.7142857142857143
User 36064 AUC after training: 0.7142857142857143
User 36064 does not improve AUC. Reverting changes.
Training on augumented user 2250 15/50 current_auc = 0.7142857142857143
User 2250 AUC after training: 0.7142857142857143
User 2250 does not improve AUC. Reverting changes.
Training on augumented user 63701 16/50 current_auc = 0.7142857142857143
User 63701 AUC after training: 0.7142857142857143
User 63701 does not improve AUC. Reverting changes.
Training on augumented user 77053 17/50 current_auc = 0.7142857142857143
User 77053 AUC after training: 0.7142857142857143
User 77053 does not improve AUC. Reverting changes.
Training on augumented user 69989 18/50 current_auc = 0.7142857142857143
User 69989 AUC after training: 0.7142857142857143
User 69989 does not improve AUC. Reverting changes.
Training on augumented user 52590 19/50 current_auc = 0.7142857142857143
User 52590 AUC after training: 0.7142857142857143
User 52590 does not improve AUC. Reverting changes.
Training on augumented user 105592 20/50 current_auc = 0.7142857142857143
User 105592 AUC after training: 0.7142857142857143
User 105592 does not improve AUC. Reverting changes.
Training on augumented user 23776 21/50 current_auc = 0.7142857142857143
User 23776 AUC after training: 0.7142857142857143
User 23776 does not improve AUC. Reverting changes.
Training on augumented user 27770 22/50 current_auc = 0.7142857142857143
User 27770 AUC after training: 0.7142857142857143
User 27770 does not improve AUC. Reverting changes.
Training on augumented user 114694 23/50 current_auc = 0.7142857142857143
User 114694 AUC after training: 0.7142857142857143
User 114694 does not improve AUC. Reverting changes.
Training on augumented user 51268 24/50 current_auc = 0.7142857142857143
User 51268 AUC after training: 0.7142857142857143
User 51268 does not improve AUC. Reverting changes.
Training on augumented user 9190 25/50 current_auc = 0.7142857142857143
User 9190 AUC after training: 0.7142857142857143
User 9190 does not improve AUC. Reverting changes.
Training on augumented user 31687 26/50 current_auc = 0.7142857142857143
User 31687 AUC after training: 0.7142857142857143
User 31687 does not improve AUC. Reverting changes.
Training on augumented user 51826 27/50 current_auc = 0.7142857142857143
User 51826 AUC after training: 0.7142857142857143
User 51826 does not improve AUC. Reverting changes.
Training on augumented user 116749 28/50 current_auc = 0.7142857142857143
User 116749 AUC after training: 0.7142857142857143
User 116749 does not improve AUC. Reverting changes.
Training on augumented user 47479 29/50 current_auc = 0.7142857142857143
User 47479 AUC after training: 0.7142857142857143
User 47479 does not improve AUC. Reverting changes.
Training on augumented user 105122 30/50 current_auc = 0.7142857142857143
User 105122 AUC after training: 0.7142857142857143
User 105122 does not improve AUC. Reverting changes.
Training on augumented user 96436 31/50 current_auc = 0.7142857142857143
User 96436 AUC after training: 0.7142857142857143
User 96436 does not improve AUC. Reverting changes.
Training on augumented user 48084 32/50 current_auc = 0.7142857142857143
User 48084 AUC after training: 0.7142857142857143
User 48084 does not improve AUC. Reverting changes.
Training on augumented user 107655 33/50 current_auc = 0.7142857142857143
User 107655 AUC after training: 0.7142857142857143
User 107655 does not improve AUC. Reverting changes.
Training on augumented user 4714 34/50 current_auc = 0.7142857142857143
User 4714 AUC after training: 0.7142857142857143
User 4714 does not improve AUC. Reverting changes.
Training on augumented user 134571 35/50 current_auc = 0.7142857142857143
User 134571 AUC after training: 0.7142857142857143
User 134571 does not improve AUC. Reverting changes.
Training on augumented user 6924 36/50 current_auc = 0.7142857142857143
User 6924 AUC after training: 0.7142857142857143
User 6924 does not improve AUC. Reverting changes.
Training on augumented user 36212 37/50 current_auc = 0.7142857142857143
User 36212 AUC after training: 0.7142857142857143
User 36212 does not improve AUC. Reverting changes.
Training on augumented user 49855 38/50 current_auc = 0.7142857142857143
User 49855 AUC after training: 0.7142857142857143
User 49855 does not improve AUC. Reverting changes.
Training on augumented user 18150 39/50 current_auc = 0.7142857142857143
User 18150 AUC after training: 0.7142857142857143
User 18150 does not improve AUC. Reverting changes.
Training on augumented user 9422 40/50 current_auc = 0.7142857142857143
User 9422 AUC after training: 0.7142857142857143
User 9422 does not improve AUC. Reverting changes.
Training on augumented user 1859 41/50 current_auc = 0.7142857142857143
User 1859 AUC after training: 0.7142857142857143
User 1859 does not improve AUC. Reverting changes.
Training on augumented user 77415 42/50 current_auc = 0.7142857142857143
User 77415 AUC after training: 0.7142857142857143
User 77415 does not improve AUC. Reverting changes.
Training on augumented user 51089 43/50 current_auc = 0.7142857142857143
User 51089 AUC after training: 0.7142857142857143
User 51089 does not improve AUC. Reverting changes.
Training on augumented user 9916 44/50 current_auc = 0.7142857142857143
User 9916 AUC after training: 0.7142857142857143
User 9916 does not improve AUC. Reverting changes.
Training on augumented user 48625 45/50 current_auc = 0.7142857142857143
User 48625 AUC after training: 0.7142857142857143
User 48625 does not improve AUC. Reverting changes.
Training on augumented user 63069 46/50 current_auc = 0.7142857142857143
User 63069 AUC after training: 0.7142857142857143
User 63069 does not improve AUC. Reverting changes.
Training on augumented user 48786 47/50 current_auc = 0.7142857142857143
User 48786 AUC after training: 0.7142857142857143
User 48786 does not improve AUC. Reverting changes.
Training on augumented user 115744 48/50 current_auc = 0.7142857142857143
User 115744 AUC after training: 0.7142857142857143
User 115744 does not improve AUC. Reverting changes.
Training on augumented user 114 49/50 current_auc = 0.7142857142857143
User 114 AUC after training: 0.7142857142857143
User 114 does not improve AUC. Reverting changes.
[2024-12-02 17:51:23.116517] start test user 42103 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:23.901792] start test user 42103 25/568 recall augumented users by random, augumented_users = [2074, 9177, 87370, 3852, 45390, 133515, 50759, 112958, 13791, 115949, 74991, 61070, 116391, 22850, 49770, 50437, 121681, 107938, 12413, 39729, 100532, 85132, 919, 23492, 58069, 32299, 80984, 42727, 107422, 24409, 12156, 68687, 45038, 13392, 95279, 79992, 32998, 19471, 10523, 56448, 128019, 10484, 8739, 71032, 126807, 49081, 74513, 46158, 123343, 113357]
[2024-12-02 17:51:23.930895] user = 42103 Cloud 25/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:23.937466] user = 42103 Local 25/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:24.020213] user = 42103 Local+ 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:27.062327] user = 42103 MPDA- 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 2074 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2074 AUC after training: 0.5
User 2074 does not improve AUC. Reverting changes.
Training on augumented user 9177 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9177 AUC after training: 0.5
User 9177 does not improve AUC. Reverting changes.
Training on augumented user 87370 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87370 AUC after training: 0.5
User 87370 does not improve AUC. Reverting changes.
Training on augumented user 3852 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3852 AUC after training: 0.5
User 3852 does not improve AUC. Reverting changes.
Training on augumented user 45390 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45390 AUC after training: 0.5
User 45390 does not improve AUC. Reverting changes.
Training on augumented user 133515 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133515 AUC after training: 0.5
User 133515 does not improve AUC. Reverting changes.
Training on augumented user 50759 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50759 AUC after training: 0.5
User 50759 does not improve AUC. Reverting changes.
Training on augumented user 112958 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112958 AUC after training: 0.5
User 112958 does not improve AUC. Reverting changes.
Training on augumented user 13791 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13791 AUC after training: 0.5
User 13791 does not improve AUC. Reverting changes.
Training on augumented user 115949 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115949 AUC after training: 0.5
User 115949 does not improve AUC. Reverting changes.
Training on augumented user 74991 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74991 AUC after training: 0.5
User 74991 does not improve AUC. Reverting changes.
Training on augumented user 61070 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61070 AUC after training: 0.5
User 61070 does not improve AUC. Reverting changes.
Training on augumented user 116391 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116391 AUC after training: 0.5
User 116391 does not improve AUC. Reverting changes.
Training on augumented user 22850 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22850 AUC after training: 0.5
User 22850 does not improve AUC. Reverting changes.
Training on augumented user 49770 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49770 AUC after training: 0.5
User 49770 does not improve AUC. Reverting changes.
Training on augumented user 50437 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50437 AUC after training: 0.5
User 50437 does not improve AUC. Reverting changes.
Training on augumented user 121681 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121681 AUC after training: 0.5
User 121681 does not improve AUC. Reverting changes.
Training on augumented user 107938 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107938 AUC after training: 0.5
User 107938 does not improve AUC. Reverting changes.
Training on augumented user 12413 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12413 AUC after training: 0.5
User 12413 does not improve AUC. Reverting changes.
Training on augumented user 39729 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39729 AUC after training: 0.5
User 39729 does not improve AUC. Reverting changes.
Training on augumented user 100532 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100532 AUC after training: 0.5
User 100532 does not improve AUC. Reverting changes.
Training on augumented user 85132 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85132 AUC after training: 0.5
User 85132 does not improve AUC. Reverting changes.
Training on augumented user 919 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 919 AUC after training: 0.5
User 919 does not improve AUC. Reverting changes.
Training on augumented user 23492 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23492 AUC after training: 0.5
User 23492 does not improve AUC. Reverting changes.
Training on augumented user 58069 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58069 AUC after training: 0.5
User 58069 does not improve AUC. Reverting changes.
Training on augumented user 32299 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32299 AUC after training: 0.5
User 32299 does not improve AUC. Reverting changes.
Training on augumented user 80984 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80984 AUC after training: 0.5
User 80984 does not improve AUC. Reverting changes.
Training on augumented user 42727 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42727 AUC after training: 0.5
User 42727 does not improve AUC. Reverting changes.
Training on augumented user 107422 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107422 AUC after training: 0.5
User 107422 does not improve AUC. Reverting changes.
Training on augumented user 24409 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24409 AUC after training: 0.5
User 24409 does not improve AUC. Reverting changes.
Training on augumented user 12156 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12156 AUC after training: 0.5
User 12156 does not improve AUC. Reverting changes.
Training on augumented user 68687 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68687 AUC after training: 0.5
User 68687 does not improve AUC. Reverting changes.
Training on augumented user 45038 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45038 AUC after training: 0.5
User 45038 does not improve AUC. Reverting changes.
Training on augumented user 13392 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13392 AUC after training: 0.5
User 13392 does not improve AUC. Reverting changes.
Training on augumented user 95279 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95279 AUC after training: 0.5
User 95279 does not improve AUC. Reverting changes.
Training on augumented user 79992 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79992 AUC after training: 0.5
User 79992 does not improve AUC. Reverting changes.
Training on augumented user 32998 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32998 AUC after training: 0.5
User 32998 does not improve AUC. Reverting changes.
Training on augumented user 19471 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19471 AUC after training: 0.5
User 19471 does not improve AUC. Reverting changes.
Training on augumented user 10523 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10523 AUC after training: 0.5
User 10523 does not improve AUC. Reverting changes.
Training on augumented user 56448 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56448 AUC after training: 0.5
User 56448 does not improve AUC. Reverting changes.
Training on augumented user 128019 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128019 AUC after training: 0.5
User 128019 does not improve AUC. Reverting changes.
Training on augumented user 10484 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10484 AUC after training: 0.5
User 10484 does not improve AUC. Reverting changes.
Training on augumented user 8739 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8739 AUC after training: 0.5
User 8739 does not improve AUC. Reverting changes.
Training on augumented user 71032 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71032 AUC after training: 0.5
User 71032 does not improve AUC. Reverting changes.
Training on augumented user 126807 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126807 AUC after training: 0.5
User 126807 does not improve AUC. Reverting changes.
Training on augumented user 49081 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49081 AUC after training: 0.5
User 49081 does not improve AUC. Reverting changes.
Training on augumented user 74513 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74513 AUC after training: 0.5
User 74513 does not improve AUC. Reverting changes.
Training on augumented user 46158 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46158 AUC after training: 0.5
User 46158 does not improve AUC. Reverting changes.
Training on augumented user 123343 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123343 AUC after training: 0.5
User 123343 does not improve AUC. Reverting changes.
Training on augumented user 113357 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113357 AUC after training: 0.5
User 113357 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:56.224804] start test user 42124 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:56.886152] start test user 42124 26/568 recall augumented users by random, augumented_users = [137753, 65239, 33563, 48916, 70704, 115106, 32482, 60251, 76916, 136485, 101382, 106444, 83873, 110601, 63172, 84515, 78229, 27869, 103430, 19149, 36427, 127917, 37225, 133258, 72926, 11343, 1183, 92906, 70391, 31418, 28175, 117586, 81933, 32837, 55979, 21345, 55736, 41086, 112235, 873, 46814, 77320, 65431, 131325, 90581, 92120, 17861, 65810, 87443, 19693]
[2024-12-02 17:51:56.908884] user = 42124 Cloud 26/568
[2024-12-02 17:51:56.926783] user = 42124 Local 26/568
[2024-12-02 17:51:57.198094] user = 42124 Local+ 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:59.350751] user = 42124 MPDA- 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.44568965517241377
Training on augumented user 137753 0/50 current_auc = 0.44568965517241377
User 137753 AUC after training: 0.446551724137931
User 137753 improves AUC. Keeping the model.
Training on augumented user 65239 1/50 current_auc = 0.446551724137931
User 65239 AUC after training: 0.44568965517241377
User 65239 does not improve AUC. Reverting changes.
Training on augumented user 33563 2/50 current_auc = 0.446551724137931
User 33563 AUC after training: 0.44741379310344825
User 33563 improves AUC. Keeping the model.
Training on augumented user 48916 3/50 current_auc = 0.44741379310344825
User 48916 AUC after training: 0.44741379310344825
User 48916 does not improve AUC. Reverting changes.
Training on augumented user 70704 4/50 current_auc = 0.44741379310344825
User 70704 AUC after training: 0.44482758620689655
User 70704 does not improve AUC. Reverting changes.
Training on augumented user 115106 5/50 current_auc = 0.44741379310344825
User 115106 AUC after training: 0.446551724137931
User 115106 does not improve AUC. Reverting changes.
Training on augumented user 32482 6/50 current_auc = 0.44741379310344825
User 32482 AUC after training: 0.44741379310344825
User 32482 does not improve AUC. Reverting changes.
Training on augumented user 60251 7/50 current_auc = 0.44741379310344825
User 60251 AUC after training: 0.44741379310344825
User 60251 does not improve AUC. Reverting changes.
Training on augumented user 76916 8/50 current_auc = 0.44741379310344825
User 76916 AUC after training: 0.44568965517241377
User 76916 does not improve AUC. Reverting changes.
Training on augumented user 136485 9/50 current_auc = 0.44741379310344825
User 136485 AUC after training: 0.446551724137931
User 136485 does not improve AUC. Reverting changes.
Training on augumented user 101382 10/50 current_auc = 0.44741379310344825
User 101382 AUC after training: 0.44741379310344825
User 101382 does not improve AUC. Reverting changes.
Training on augumented user 106444 11/50 current_auc = 0.44741379310344825
User 106444 AUC after training: 0.4482758620689655
User 106444 improves AUC. Keeping the model.
Training on augumented user 83873 12/50 current_auc = 0.4482758620689655
User 83873 AUC after training: 0.44655172413793104
User 83873 does not improve AUC. Reverting changes.
Training on augumented user 110601 13/50 current_auc = 0.4482758620689655
User 110601 AUC after training: 0.4482758620689655
User 110601 does not improve AUC. Reverting changes.
Training on augumented user 63172 14/50 current_auc = 0.4482758620689655
User 63172 AUC after training: 0.44655172413793104
User 63172 does not improve AUC. Reverting changes.
Training on augumented user 84515 15/50 current_auc = 0.4482758620689655
User 84515 AUC after training: 0.4482758620689655
User 84515 does not improve AUC. Reverting changes.
Training on augumented user 78229 16/50 current_auc = 0.4482758620689655
User 78229 AUC after training: 0.44568965517241377
User 78229 does not improve AUC. Reverting changes.
Training on augumented user 27869 17/50 current_auc = 0.4482758620689655
User 27869 AUC after training: 0.4482758620689655
User 27869 does not improve AUC. Reverting changes.
Training on augumented user 103430 18/50 current_auc = 0.4482758620689655
User 103430 AUC after training: 0.44741379310344825
User 103430 does not improve AUC. Reverting changes.
Training on augumented user 19149 19/50 current_auc = 0.4482758620689655
User 19149 AUC after training: 0.44741379310344825
User 19149 does not improve AUC. Reverting changes.
Training on augumented user 36427 20/50 current_auc = 0.4482758620689655
User 36427 AUC after training: 0.44827586206896547
User 36427 does not improve AUC. Reverting changes.
Training on augumented user 127917 21/50 current_auc = 0.4482758620689655
User 127917 AUC after training: 0.4482758620689655
User 127917 does not improve AUC. Reverting changes.
Training on augumented user 37225 22/50 current_auc = 0.4482758620689655
User 37225 AUC after training: 0.44741379310344825
User 37225 does not improve AUC. Reverting changes.
Training on augumented user 133258 23/50 current_auc = 0.4482758620689655
User 133258 AUC after training: 0.4482758620689655
User 133258 does not improve AUC. Reverting changes.
Training on augumented user 72926 24/50 current_auc = 0.4482758620689655
User 72926 AUC after training: 0.4456896551724138
User 72926 does not improve AUC. Reverting changes.
Training on augumented user 11343 25/50 current_auc = 0.4482758620689655
User 11343 AUC after training: 0.4482758620689655
User 11343 does not improve AUC. Reverting changes.
Training on augumented user 1183 26/50 current_auc = 0.4482758620689655
User 1183 AUC after training: 0.4482758620689655
User 1183 does not improve AUC. Reverting changes.
Training on augumented user 92906 27/50 current_auc = 0.4482758620689655
User 92906 AUC after training: 0.44655172413793104
User 92906 does not improve AUC. Reverting changes.
Training on augumented user 70391 28/50 current_auc = 0.4482758620689655
User 70391 AUC after training: 0.44568965517241377
User 70391 does not improve AUC. Reverting changes.
Training on augumented user 31418 29/50 current_auc = 0.4482758620689655
User 31418 AUC after training: 0.4482758620689655
User 31418 does not improve AUC. Reverting changes.
Training on augumented user 28175 30/50 current_auc = 0.4482758620689655
User 28175 AUC after training: 0.4482758620689655
User 28175 does not improve AUC. Reverting changes.
Training on augumented user 117586 31/50 current_auc = 0.4482758620689655
User 117586 AUC after training: 0.4482758620689655
User 117586 does not improve AUC. Reverting changes.
Training on augumented user 81933 32/50 current_auc = 0.4482758620689655
User 81933 AUC after training: 0.44655172413793104
User 81933 does not improve AUC. Reverting changes.
Training on augumented user 32837 33/50 current_auc = 0.4482758620689655
User 32837 AUC after training: 0.4482758620689655
User 32837 does not improve AUC. Reverting changes.
Training on augumented user 55979 34/50 current_auc = 0.4482758620689655
User 55979 AUC after training: 0.44741379310344825
User 55979 does not improve AUC. Reverting changes.
Training on augumented user 21345 35/50 current_auc = 0.4482758620689655
User 21345 AUC after training: 0.4482758620689655
User 21345 does not improve AUC. Reverting changes.
Training on augumented user 55736 36/50 current_auc = 0.4482758620689655
User 55736 AUC after training: 0.44741379310344825
User 55736 does not improve AUC. Reverting changes.
Training on augumented user 41086 37/50 current_auc = 0.4482758620689655
User 41086 AUC after training: 0.44741379310344825
User 41086 does not improve AUC. Reverting changes.
Training on augumented user 112235 38/50 current_auc = 0.4482758620689655
User 112235 AUC after training: 0.4482758620689655
User 112235 does not improve AUC. Reverting changes.
Training on augumented user 873 39/50 current_auc = 0.4482758620689655
User 873 AUC after training: 0.4482758620689655
User 873 does not improve AUC. Reverting changes.
Training on augumented user 46814 40/50 current_auc = 0.4482758620689655
User 46814 AUC after training: 0.44655172413793104
User 46814 does not improve AUC. Reverting changes.
Training on augumented user 77320 41/50 current_auc = 0.4482758620689655
User 77320 AUC after training: 0.4422413793103448
User 77320 does not improve AUC. Reverting changes.
Training on augumented user 65431 42/50 current_auc = 0.4482758620689655
User 65431 AUC after training: 0.4474137931034483
User 65431 does not improve AUC. Reverting changes.
Training on augumented user 131325 43/50 current_auc = 0.4482758620689655
User 131325 AUC after training: 0.4482758620689655
User 131325 does not improve AUC. Reverting changes.
Training on augumented user 90581 44/50 current_auc = 0.4482758620689655
User 90581 AUC after training: 0.4482758620689655
User 90581 does not improve AUC. Reverting changes.
Training on augumented user 92120 45/50 current_auc = 0.4482758620689655
User 92120 AUC after training: 0.44655172413793104
User 92120 does not improve AUC. Reverting changes.
Training on augumented user 17861 46/50 current_auc = 0.4482758620689655
User 17861 AUC after training: 0.44568965517241377
User 17861 does not improve AUC. Reverting changes.
Training on augumented user 65810 47/50 current_auc = 0.4482758620689655
User 65810 AUC after training: 0.4482758620689655
User 65810 does not improve AUC. Reverting changes.
Training on augumented user 87443 48/50 current_auc = 0.4482758620689655
User 87443 AUC after training: 0.44655172413793104
User 87443 does not improve AUC. Reverting changes.
Training on augumented user 19693 49/50 current_auc = 0.4482758620689655
User 19693 AUC after training: 0.4482758620689655
User 19693 does not improve AUC. Reverting changes.
[2024-12-02 17:52:28.620686] start test user 42162 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:29.030436] start test user 42162 27/568 recall augumented users by random, augumented_users = [108786, 75192, 60358, 852, 79897, 91954, 44791, 40534, 61733, 18486, 116634, 27656, 109497, 19462, 72926, 113650, 106028, 96970, 72328, 54170, 4865, 73763, 35937, 73458, 57704, 25033, 58241, 62868, 17833, 37501, 36692, 9046, 126055, 111540, 68685, 46158, 108626, 75310, 89951, 133536, 95539, 118905, 39173, 40496, 69663, 1346, 85143, 97892, 108090, 12661]
[2024-12-02 17:52:29.045504] user = 42162 Cloud 27/568
[2024-12-02 17:52:29.067829] user = 42162 Local 27/568
[2024-12-02 17:52:29.109400] user = 42162 Local+ 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:31.105534] user = 42162 MPDA- 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7765724988294054
Training on augumented user 108786 0/50 current_auc = 0.7765724988294054
User 108786 AUC after training: 0.7770017168721711
User 108786 improves AUC. Keeping the model.
Training on augumented user 75192 1/50 current_auc = 0.7770017168721711
User 75192 AUC after training: 0.7766505384735445
User 75192 does not improve AUC. Reverting changes.
Training on augumented user 60358 2/50 current_auc = 0.7770017168721711
User 60358 AUC after training: 0.7762213204307788
User 60358 does not improve AUC. Reverting changes.
Training on augumented user 852 3/50 current_auc = 0.7770017168721711
User 852 AUC after training: 0.7767675979397534
User 852 does not improve AUC. Reverting changes.
Training on augumented user 79897 4/50 current_auc = 0.7770017168721711
User 79897 AUC after training: 0.7766115186514749
User 79897 does not improve AUC. Reverting changes.
Training on augumented user 91954 5/50 current_auc = 0.7770017168721711
User 91954 AUC after training: 0.7765334790073357
User 91954 does not improve AUC. Reverting changes.
Training on augumented user 44791 6/50 current_auc = 0.7770017168721711
User 44791 AUC after training: 0.7770407366942407
User 44791 improves AUC. Keeping the model.
Training on augumented user 40534 7/50 current_auc = 0.7770407366942407
User 40534 AUC after training: 0.7774309349149368
User 40534 improves AUC. Keeping the model.
Training on augumented user 61733 8/50 current_auc = 0.7774309349149368
User 61733 AUC after training: 0.7766115186514749
User 61733 does not improve AUC. Reverting changes.
Training on augumented user 18486 9/50 current_auc = 0.7774309349149368
User 18486 AUC after training: 0.7764554393631966
User 18486 does not improve AUC. Reverting changes.
Training on augumented user 116634 10/50 current_auc = 0.7774309349149368
User 116634 AUC after training: 0.7770797565163103
User 116634 does not improve AUC. Reverting changes.
Training on augumented user 27656 11/50 current_auc = 0.7774309349149368
User 27656 AUC after training: 0.776806617761823
User 27656 does not improve AUC. Reverting changes.
Training on augumented user 109497 12/50 current_auc = 0.7774309349149368
User 109497 AUC after training: 0.7771577961604496
User 109497 does not improve AUC. Reverting changes.
Training on augumented user 19462 13/50 current_auc = 0.7774309349149368
User 19462 AUC after training: 0.7779381926018417
User 19462 improves AUC. Keeping the model.
Training on augumented user 72926 14/50 current_auc = 0.7779381926018417
User 72926 AUC after training: 0.7769236772280318
User 72926 does not improve AUC. Reverting changes.
Training on augumented user 113650 15/50 current_auc = 0.7779381926018417
User 113650 AUC after training: 0.7769236772280319
User 113650 does not improve AUC. Reverting changes.
Training on augumented user 106028 16/50 current_auc = 0.7779381926018417
User 106028 AUC after training: 0.7777430934914937
User 106028 does not improve AUC. Reverting changes.
Training on augumented user 96970 17/50 current_auc = 0.7779381926018417
User 96970 AUC after training: 0.7775870142032153
User 96970 does not improve AUC. Reverting changes.
Training on augumented user 72328 18/50 current_auc = 0.7779381926018417
User 72328 AUC after training: 0.7786795692211643
User 72328 improves AUC. Keeping the model.
Training on augumented user 54170 19/50 current_auc = 0.7786795692211643
User 54170 AUC after training: 0.7788356485094428
User 54170 improves AUC. Keeping the model.
Training on augumented user 4865 20/50 current_auc = 0.7788356485094428
User 4865 AUC after training: 0.7774699547370064
User 4865 does not improve AUC. Reverting changes.
Training on augumented user 73763 21/50 current_auc = 0.7788356485094428
User 73763 AUC after training: 0.777508974559076
User 73763 does not improve AUC. Reverting changes.
Training on augumented user 35937 22/50 current_auc = 0.7788356485094428
User 35937 AUC after training: 0.7790697674418604
User 35937 improves AUC. Keeping the model.
Training on augumented user 73458 23/50 current_auc = 0.7790697674418604
User 73458 AUC after training: 0.7787576088653035
User 73458 does not improve AUC. Reverting changes.
Training on augumented user 57704 24/50 current_auc = 0.7790697674418604
User 57704 AUC after training: 0.7793038863742782
User 57704 improves AUC. Keeping the model.
Training on augumented user 25033 25/50 current_auc = 0.7793038863742782
User 25033 AUC after training: 0.778718589043234
User 25033 does not improve AUC. Reverting changes.
Training on augumented user 58241 26/50 current_auc = 0.7793038863742782
User 58241 AUC after training: 0.7789527079756516
User 58241 does not improve AUC. Reverting changes.
Training on augumented user 62868 27/50 current_auc = 0.7793038863742782
User 62868 AUC after training: 0.7783674106446075
User 62868 does not improve AUC. Reverting changes.
Training on augumented user 17833 28/50 current_auc = 0.7793038863742782
User 17833 AUC after training: 0.7789917277977213
User 17833 does not improve AUC. Reverting changes.
Training on augumented user 37501 29/50 current_auc = 0.7793038863742782
User 37501 AUC after training: 0.7791478070859997
User 37501 does not improve AUC. Reverting changes.
Training on augumented user 36692 30/50 current_auc = 0.7793038863742782
User 36692 AUC after training: 0.778523489932886
User 36692 does not improve AUC. Reverting changes.
Training on augumented user 9046 31/50 current_auc = 0.7793038863742782
User 9046 AUC after training: 0.7798501638832527
User 9046 improves AUC. Keeping the model.
Training on augumented user 126055 32/50 current_auc = 0.7798501638832527
User 126055 AUC after training: 0.7789136881535821
User 126055 does not improve AUC. Reverting changes.
Training on augumented user 111540 33/50 current_auc = 0.7798501638832527
User 111540 AUC after training: 0.7795380053066959
User 111540 does not improve AUC. Reverting changes.
Training on augumented user 68685 34/50 current_auc = 0.7798501638832527
User 68685 AUC after training: 0.7793038863742782
User 68685 does not improve AUC. Reverting changes.
Training on augumented user 46158 35/50 current_auc = 0.7798501638832527
User 46158 AUC after training: 0.7798501638832527
User 46158 does not improve AUC. Reverting changes.
Training on augumented user 108626 36/50 current_auc = 0.7798501638832527
User 108626 AUC after training: 0.7797721242391136
User 108626 does not improve AUC. Reverting changes.
Training on augumented user 75310 37/50 current_auc = 0.7798501638832527
User 75310 AUC after training: 0.7798111440611831
User 75310 does not improve AUC. Reverting changes.
Training on augumented user 89951 38/50 current_auc = 0.7798501638832527
User 89951 AUC after training: 0.7791478070859997
User 89951 does not improve AUC. Reverting changes.
Training on augumented user 133536 39/50 current_auc = 0.7798501638832527
User 133536 AUC after training: 0.7800842828156703
User 133536 improves AUC. Keeping the model.
Training on augumented user 95539 40/50 current_auc = 0.7800842828156703
User 95539 AUC after training: 0.7799672233494617
User 95539 does not improve AUC. Reverting changes.
Training on augumented user 118905 41/50 current_auc = 0.7800842828156703
User 118905 AUC after training: 0.7797721242391135
User 118905 does not improve AUC. Reverting changes.
Training on augumented user 39173 42/50 current_auc = 0.7800842828156703
User 39173 AUC after training: 0.7793819260184175
User 39173 does not improve AUC. Reverting changes.
Training on augumented user 40496 43/50 current_auc = 0.7800842828156703
User 40496 AUC after training: 0.7799282035273919
User 40496 does not improve AUC. Reverting changes.
Training on augumented user 69663 44/50 current_auc = 0.7800842828156703
User 69663 AUC after training: 0.7793819260184173
User 69663 does not improve AUC. Reverting changes.
Training on augumented user 1346 45/50 current_auc = 0.7800842828156703
User 1346 AUC after training: 0.7800452629936008
User 1346 does not improve AUC. Reverting changes.
Training on augumented user 85143 46/50 current_auc = 0.7800842828156703
User 85143 AUC after training: 0.7800062431715312
User 85143 does not improve AUC. Reverting changes.
Training on augumented user 97892 47/50 current_auc = 0.7800842828156703
User 97892 AUC after training: 0.7793038863742782
User 97892 does not improve AUC. Reverting changes.
Training on augumented user 108090 48/50 current_auc = 0.7800842828156703
User 108090 AUC after training: 0.7796940845949744
User 108090 does not improve AUC. Reverting changes.
Training on augumented user 12661 49/50 current_auc = 0.7800842828156703
User 12661 AUC after training: 0.7798501638832527
User 12661 does not improve AUC. Reverting changes.
[2024-12-02 17:53:05.404559] start test user 42177 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:05.881261] start test user 42177 28/568 recall augumented users by random, augumented_users = [50944, 95139, 34449, 104139, 13951, 119004, 128973, 42758, 60934, 86132, 91938, 51777, 1484, 134010, 28212, 119550, 35286, 38104, 98689, 45958, 11313, 3269, 56468, 82976, 77303, 22952, 12621, 21558, 67203, 43566, 16710, 79446, 75382, 39222, 38836, 117344, 27706, 121887, 138015, 1506, 73674, 11189, 93683, 126521, 78670, 97345, 44995, 23370, 136092, 36303]
[2024-12-02 17:53:05.897365] user = 42177 Cloud 28/568
[2024-12-02 17:53:05.928139] user = 42177 Local 28/568
[2024-12-02 17:53:06.038636] user = 42177 Local+ 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:08.336880] user = 42177 MPDA- 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6914116126948234
Training on augumented user 50944 0/50 current_auc = 0.6914116126948234
User 50944 AUC after training: 0.6916538803197932
User 50944 improves AUC. Keeping the model.
Training on augumented user 95139 1/50 current_auc = 0.6916538803197932
User 95139 AUC after training: 0.6916538803197932
User 95139 does not improve AUC. Reverting changes.
Training on augumented user 34449 2/50 current_auc = 0.6916538803197932
User 34449 AUC after training: 0.6915327465073086
User 34449 does not improve AUC. Reverting changes.
Training on augumented user 104139 3/50 current_auc = 0.6916538803197932
User 104139 AUC after training: 0.6916942582572881
User 104139 improves AUC. Keeping the model.
Training on augumented user 13951 4/50 current_auc = 0.6916942582572881
User 13951 AUC after training: 0.6918557700072681
User 13951 improves AUC. Keeping the model.
Training on augumented user 119004 5/50 current_auc = 0.6918557700072681
User 119004 AUC after training: 0.6922191714447227
User 119004 improves AUC. Keeping the model.
Training on augumented user 128973 6/50 current_auc = 0.6922191714447227
User 128973 AUC after training: 0.6921989824759752
User 128973 does not improve AUC. Reverting changes.
Training on augumented user 42758 7/50 current_auc = 0.6922191714447227
User 42758 AUC after training: 0.6921787935072277
User 42758 does not improve AUC. Reverting changes.
Training on augumented user 60934 8/50 current_auc = 0.6922191714447227
User 60934 AUC after training: 0.6921586045384802
User 60934 does not improve AUC. Reverting changes.
Training on augumented user 86132 9/50 current_auc = 0.6922191714447227
User 86132 AUC after training: 0.6919567148510054
User 86132 does not improve AUC. Reverting changes.
Training on augumented user 91938 10/50 current_auc = 0.6922191714447227
User 91938 AUC after training: 0.6913106678510863
User 91938 does not improve AUC. Reverting changes.
Training on augumented user 51777 11/50 current_auc = 0.6922191714447227
User 51777 AUC after training: 0.6922999273197125
User 51777 improves AUC. Keeping the model.
Training on augumented user 1484 12/50 current_auc = 0.6922999273197125
User 1484 AUC after training: 0.6920374707259953
User 1484 does not improve AUC. Reverting changes.
Training on augumented user 134010 13/50 current_auc = 0.6922999273197125
User 134010 AUC after training: 0.6923604942259549
User 134010 improves AUC. Keeping the model.
Training on augumented user 28212 14/50 current_auc = 0.6923604942259549
User 28212 AUC after training: 0.6922393604134702
User 28212 does not improve AUC. Reverting changes.
Training on augumented user 119550 15/50 current_auc = 0.6923604942259549
User 119550 AUC after training: 0.6921182266009852
User 119550 does not improve AUC. Reverting changes.
Training on augumented user 35286 16/50 current_auc = 0.6923604942259549
User 35286 AUC after training: 0.6924614390696924
User 35286 improves AUC. Keeping the model.
Training on augumented user 38104 17/50 current_auc = 0.6924614390696924
User 38104 AUC after training: 0.6922999273197126
User 38104 does not improve AUC. Reverting changes.
Training on augumented user 98689 18/50 current_auc = 0.6924614390696924
User 98689 AUC after training: 0.6924210611321973
User 98689 does not improve AUC. Reverting changes.
Training on augumented user 45958 19/50 current_auc = 0.6924614390696924
User 45958 AUC after training: 0.6926229508196722
User 45958 improves AUC. Keeping the model.
Training on augumented user 11313 20/50 current_auc = 0.6926229508196722
User 11313 AUC after training: 0.6925018170071873
User 11313 does not improve AUC. Reverting changes.
Training on augumented user 3269 21/50 current_auc = 0.6926229508196722
User 3269 AUC after training: 0.6926229508196722
User 3269 does not improve AUC. Reverting changes.
Training on augumented user 56468 22/50 current_auc = 0.6926229508196722
User 56468 AUC after training: 0.6926431397884196
User 56468 improves AUC. Keeping the model.
Training on augumented user 82976 23/50 current_auc = 0.6926431397884196
User 82976 AUC after training: 0.6931680529758539
User 82976 improves AUC. Keeping the model.
Training on augumented user 77303 24/50 current_auc = 0.6931680529758539
User 77303 AUC after training: 0.6928248405071469
User 77303 does not improve AUC. Reverting changes.
Training on augumented user 22952 25/50 current_auc = 0.6931680529758539
User 22952 AUC after training: 0.6930469191633691
User 22952 does not improve AUC. Reverting changes.
Training on augumented user 12621 26/50 current_auc = 0.6931680529758539
User 12621 AUC after training: 0.6930872971008641
User 12621 does not improve AUC. Reverting changes.
Training on augumented user 21558 27/50 current_auc = 0.6931680529758539
User 21558 AUC after training: 0.6928046515383994
User 21558 does not improve AUC. Reverting changes.
Training on augumented user 67203 28/50 current_auc = 0.6931680529758539
User 67203 AUC after training: 0.693248808850844
User 67203 improves AUC. Keeping the model.
Training on augumented user 43566 29/50 current_auc = 0.693248808850844
User 43566 AUC after training: 0.6930065412258742
User 43566 does not improve AUC. Reverting changes.
Training on augumented user 16710 30/50 current_auc = 0.693248808850844
User 16710 AUC after training: 0.693168052975854
User 16710 does not improve AUC. Reverting changes.
Training on augumented user 79446 31/50 current_auc = 0.693248808850844
User 79446 AUC after training: 0.6931478640071066
User 79446 does not improve AUC. Reverting changes.
Training on augumented user 75382 32/50 current_auc = 0.693248808850844
User 75382 AUC after training: 0.693208430913349
User 75382 does not improve AUC. Reverting changes.
Training on augumented user 39222 33/50 current_auc = 0.693248808850844
User 39222 AUC after training: 0.6929863522571267
User 39222 does not improve AUC. Reverting changes.
Training on augumented user 38836 34/50 current_auc = 0.693248808850844
User 38836 AUC after training: 0.6928450294758943
User 38836 does not improve AUC. Reverting changes.
Training on augumented user 117344 35/50 current_auc = 0.693248808850844
User 117344 AUC after training: 0.6929459743196319
User 117344 does not improve AUC. Reverting changes.
Training on augumented user 27706 36/50 current_auc = 0.693248808850844
User 27706 AUC after training: 0.6932286198820964
User 27706 does not improve AUC. Reverting changes.
Training on augumented user 121887 37/50 current_auc = 0.693248808850844
User 121887 AUC after training: 0.6932488088508438
User 121887 does not improve AUC. Reverting changes.
Training on augumented user 138015 38/50 current_auc = 0.693248808850844
User 138015 AUC after training: 0.6930469191633691
User 138015 does not improve AUC. Reverting changes.
Training on augumented user 1506 39/50 current_auc = 0.693248808850844
User 1506 AUC after training: 0.6932286198820965
User 1506 does not improve AUC. Reverting changes.
Training on augumented user 73674 40/50 current_auc = 0.693248808850844
User 73674 AUC after training: 0.693168052975854
User 73674 does not improve AUC. Reverting changes.
Training on augumented user 11189 41/50 current_auc = 0.693248808850844
User 11189 AUC after training: 0.692784462569652
User 11189 does not improve AUC. Reverting changes.
Training on augumented user 93683 42/50 current_auc = 0.693248808850844
User 93683 AUC after training: 0.6933295647258337
User 93683 improves AUC. Keeping the model.
Training on augumented user 126521 43/50 current_auc = 0.6933295647258337
User 126521 AUC after training: 0.6933901316320762
User 126521 improves AUC. Keeping the model.
Training on augumented user 78670 44/50 current_auc = 0.6933901316320762
User 78670 AUC after training: 0.6932286198820964
User 78670 does not improve AUC. Reverting changes.
Training on augumented user 97345 45/50 current_auc = 0.6933901316320762
User 97345 AUC after training: 0.6938342889445207
User 97345 improves AUC. Keeping the model.
Training on augumented user 44995 46/50 current_auc = 0.6938342889445207
User 44995 AUC after training: 0.693592021319551
User 44995 does not improve AUC. Reverting changes.
Training on augumented user 23370 47/50 current_auc = 0.6938342889445207
User 23370 AUC after training: 0.6938746668820157
User 23370 improves AUC. Keeping the model.
Training on augumented user 136092 48/50 current_auc = 0.6938746668820157
User 136092 AUC after training: 0.6932689978195914
User 136092 does not improve AUC. Reverting changes.
Training on augumented user 36303 49/50 current_auc = 0.6938746668820157
User 36303 AUC after training: 0.6935920213195511
User 36303 does not improve AUC. Reverting changes.
[2024-12-02 17:53:38.217104] start test user 42239 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:38.647780] start test user 42239 29/568 recall augumented users by random, augumented_users = [130253, 45444, 104766, 78535, 92898, 58113, 122618, 52316, 41508, 48408, 128401, 63758, 22042, 76669, 110557, 24966, 63957, 53476, 89805, 1174, 30853, 29054, 110029, 130692, 87350, 44310, 48903, 62236, 256, 68164, 108273, 60788, 90758, 111933, 82451, 101079, 74832, 44970, 120371, 2955, 93114, 70646, 106279, 56491, 77348, 108090, 101615, 67951, 52563, 18295]
[2024-12-02 17:53:38.662239] user = 42239 Cloud 29/568
[2024-12-02 17:53:38.696061] user = 42239 Local 29/568
[2024-12-02 17:53:38.718580] user = 42239 Local+ 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:41.444344] user = 42239 MPDA- 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2826086956521739
Training on augumented user 130253 0/50 current_auc = 0.2826086956521739
User 130253 AUC after training: 0.2826086956521739
User 130253 does not improve AUC. Reverting changes.
Training on augumented user 45444 1/50 current_auc = 0.2826086956521739
User 45444 AUC after training: 0.2826086956521739
User 45444 does not improve AUC. Reverting changes.
Training on augumented user 104766 2/50 current_auc = 0.2826086956521739
User 104766 AUC after training: 0.2826086956521739
User 104766 does not improve AUC. Reverting changes.
Training on augumented user 78535 3/50 current_auc = 0.2826086956521739
User 78535 AUC after training: 0.2826086956521739
User 78535 does not improve AUC. Reverting changes.
Training on augumented user 92898 4/50 current_auc = 0.2826086956521739
User 92898 AUC after training: 0.2826086956521739
User 92898 does not improve AUC. Reverting changes.
Training on augumented user 58113 5/50 current_auc = 0.2826086956521739
User 58113 AUC after training: 0.2826086956521739
User 58113 does not improve AUC. Reverting changes.
Training on augumented user 122618 6/50 current_auc = 0.2826086956521739
User 122618 AUC after training: 0.2826086956521739
User 122618 does not improve AUC. Reverting changes.
Training on augumented user 52316 7/50 current_auc = 0.2826086956521739
User 52316 AUC after training: 0.2826086956521739
User 52316 does not improve AUC. Reverting changes.
Training on augumented user 41508 8/50 current_auc = 0.2826086956521739
User 41508 AUC after training: 0.2826086956521739
User 41508 does not improve AUC. Reverting changes.
Training on augumented user 48408 9/50 current_auc = 0.2826086956521739
User 48408 AUC after training: 0.2826086956521739
User 48408 does not improve AUC. Reverting changes.
Training on augumented user 128401 10/50 current_auc = 0.2826086956521739
User 128401 AUC after training: 0.2608695652173913
User 128401 does not improve AUC. Reverting changes.
Training on augumented user 63758 11/50 current_auc = 0.2826086956521739
User 63758 AUC after training: 0.2826086956521739
User 63758 does not improve AUC. Reverting changes.
Training on augumented user 22042 12/50 current_auc = 0.2826086956521739
User 22042 AUC after training: 0.2826086956521739
User 22042 does not improve AUC. Reverting changes.
Training on augumented user 76669 13/50 current_auc = 0.2826086956521739
User 76669 AUC after training: 0.2826086956521739
User 76669 does not improve AUC. Reverting changes.
Training on augumented user 110557 14/50 current_auc = 0.2826086956521739
User 110557 AUC after training: 0.31521739130434784
User 110557 improves AUC. Keeping the model.
Training on augumented user 24966 15/50 current_auc = 0.31521739130434784
User 24966 AUC after training: 0.30434782608695654
User 24966 does not improve AUC. Reverting changes.
Training on augumented user 63957 16/50 current_auc = 0.31521739130434784
User 63957 AUC after training: 0.32608695652173914
User 63957 improves AUC. Keeping the model.
Training on augumented user 53476 17/50 current_auc = 0.32608695652173914
User 53476 AUC after training: 0.32608695652173914
User 53476 does not improve AUC. Reverting changes.
Training on augumented user 89805 18/50 current_auc = 0.32608695652173914
User 89805 AUC after training: 0.32608695652173914
User 89805 does not improve AUC. Reverting changes.
Training on augumented user 1174 19/50 current_auc = 0.32608695652173914
User 1174 AUC after training: 0.32608695652173914
User 1174 does not improve AUC. Reverting changes.
Training on augumented user 30853 20/50 current_auc = 0.32608695652173914
User 30853 AUC after training: 0.30434782608695654
User 30853 does not improve AUC. Reverting changes.
Training on augumented user 29054 21/50 current_auc = 0.32608695652173914
User 29054 AUC after training: 0.32608695652173914
User 29054 does not improve AUC. Reverting changes.
Training on augumented user 110029 22/50 current_auc = 0.32608695652173914
User 110029 AUC after training: 0.31521739130434784
User 110029 does not improve AUC. Reverting changes.
Training on augumented user 130692 23/50 current_auc = 0.32608695652173914
User 130692 AUC after training: 0.32608695652173914
User 130692 does not improve AUC. Reverting changes.
Training on augumented user 87350 24/50 current_auc = 0.32608695652173914
User 87350 AUC after training: 0.32608695652173914
User 87350 does not improve AUC. Reverting changes.
Training on augumented user 44310 25/50 current_auc = 0.32608695652173914
User 44310 AUC after training: 0.30434782608695654
User 44310 does not improve AUC. Reverting changes.
Training on augumented user 48903 26/50 current_auc = 0.32608695652173914
User 48903 AUC after training: 0.32608695652173914
User 48903 does not improve AUC. Reverting changes.
Training on augumented user 62236 27/50 current_auc = 0.32608695652173914
User 62236 AUC after training: 0.31521739130434784
User 62236 does not improve AUC. Reverting changes.
Training on augumented user 256 28/50 current_auc = 0.32608695652173914
User 256 AUC after training: 0.32608695652173914
User 256 does not improve AUC. Reverting changes.
Training on augumented user 68164 29/50 current_auc = 0.32608695652173914
User 68164 AUC after training: 0.2826086956521739
User 68164 does not improve AUC. Reverting changes.
Training on augumented user 108273 30/50 current_auc = 0.32608695652173914
User 108273 AUC after training: 0.30434782608695654
User 108273 does not improve AUC. Reverting changes.
Training on augumented user 60788 31/50 current_auc = 0.32608695652173914
User 60788 AUC after training: 0.32608695652173914
User 60788 does not improve AUC. Reverting changes.
Training on augumented user 90758 32/50 current_auc = 0.32608695652173914
User 90758 AUC after training: 0.32608695652173914
User 90758 does not improve AUC. Reverting changes.
Training on augumented user 111933 33/50 current_auc = 0.32608695652173914
User 111933 AUC after training: 0.32608695652173914
User 111933 does not improve AUC. Reverting changes.
Training on augumented user 82451 34/50 current_auc = 0.32608695652173914
User 82451 AUC after training: 0.32608695652173914
User 82451 does not improve AUC. Reverting changes.
Training on augumented user 101079 35/50 current_auc = 0.32608695652173914
User 101079 AUC after training: 0.32608695652173914
User 101079 does not improve AUC. Reverting changes.
Training on augumented user 74832 36/50 current_auc = 0.32608695652173914
User 74832 AUC after training: 0.32608695652173914
User 74832 does not improve AUC. Reverting changes.
Training on augumented user 44970 37/50 current_auc = 0.32608695652173914
User 44970 AUC after training: 0.30434782608695654
User 44970 does not improve AUC. Reverting changes.
Training on augumented user 120371 38/50 current_auc = 0.32608695652173914
User 120371 AUC after training: 0.32608695652173914
User 120371 does not improve AUC. Reverting changes.
Training on augumented user 2955 39/50 current_auc = 0.32608695652173914
User 2955 AUC after training: 0.30434782608695654
User 2955 does not improve AUC. Reverting changes.
Training on augumented user 93114 40/50 current_auc = 0.32608695652173914
User 93114 AUC after training: 0.31521739130434784
User 93114 does not improve AUC. Reverting changes.
Training on augumented user 70646 41/50 current_auc = 0.32608695652173914
User 70646 AUC after training: 0.32608695652173914
User 70646 does not improve AUC. Reverting changes.
Training on augumented user 106279 42/50 current_auc = 0.32608695652173914
User 106279 AUC after training: 0.31521739130434784
User 106279 does not improve AUC. Reverting changes.
Training on augumented user 56491 43/50 current_auc = 0.32608695652173914
User 56491 AUC after training: 0.29347826086956524
User 56491 does not improve AUC. Reverting changes.
Training on augumented user 77348 44/50 current_auc = 0.32608695652173914
User 77348 AUC after training: 0.30434782608695654
User 77348 does not improve AUC. Reverting changes.
Training on augumented user 108090 45/50 current_auc = 0.32608695652173914
User 108090 AUC after training: 0.32608695652173914
User 108090 does not improve AUC. Reverting changes.
Training on augumented user 101615 46/50 current_auc = 0.32608695652173914
User 101615 AUC after training: 0.30434782608695654
User 101615 does not improve AUC. Reverting changes.
Training on augumented user 67951 47/50 current_auc = 0.32608695652173914
User 67951 AUC after training: 0.30434782608695654
User 67951 does not improve AUC. Reverting changes.
Training on augumented user 52563 48/50 current_auc = 0.32608695652173914
User 52563 AUC after training: 0.32608695652173914
User 52563 does not improve AUC. Reverting changes.
Training on augumented user 18295 49/50 current_auc = 0.32608695652173914
User 18295 AUC after training: 0.33695652173913043
User 18295 improves AUC. Keeping the model.
[2024-12-02 17:54:12.338353] start test user 42245 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:13.037987] start test user 42245 30/568 recall augumented users by random, augumented_users = [137064, 72527, 127636, 38720, 70465, 88435, 103608, 17134, 67236, 116626, 93236, 45224, 49332, 2047, 112602, 5124, 84309, 11197, 82508, 37834, 97924, 61150, 28489, 120904, 57924, 70551, 83160, 117394, 15893, 55854, 137521, 28040, 37757, 14549, 46115, 131529, 18886, 30746, 44625, 100020, 17014, 25985, 17041, 54310, 65128, 42830, 87959, 9681, 107814, 18787]
[2024-12-02 17:54:13.053289] user = 42245 Cloud 30/568
[2024-12-02 17:54:13.098315] user = 42245 Local 30/568
[2024-12-02 17:54:13.201109] user = 42245 Local+ 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:15.629801] user = 42245 MPDA- 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7479651396289058
Training on augumented user 137064 0/50 current_auc = 0.7479651396289058
User 137064 AUC after training: 0.7480923184020991
User 137064 improves AUC. Keeping the model.
Training on augumented user 72527 1/50 current_auc = 0.7480923184020991
User 72527 AUC after training: 0.7480990120217409
User 72527 improves AUC. Keeping the model.
Training on augumented user 127636 2/50 current_auc = 0.7480990120217409
User 127636 AUC after training: 0.7483734504270528
User 127636 improves AUC. Keeping the model.
Training on augumented user 38720 3/50 current_auc = 0.7483734504270528
User 38720 AUC after training: 0.7481391737395914
User 38720 does not improve AUC. Reverting changes.
Training on augumented user 70465 4/50 current_auc = 0.7483734504270528
User 70465 AUC after training: 0.7484403866234705
User 70465 improves AUC. Keeping the model.
Training on augumented user 88435 5/50 current_auc = 0.7484403866234705
User 88435 AUC after training: 0.7487482931269913
User 88435 improves AUC. Keeping the model.
Training on augumented user 103608 6/50 current_auc = 0.7487482931269913
User 103608 AUC after training: 0.7485742590163056
User 103608 does not improve AUC. Reverting changes.
Training on augumented user 17134 7/50 current_auc = 0.7487482931269913
User 17134 AUC after training: 0.7487215186484243
User 17134 does not improve AUC. Reverting changes.
Training on augumented user 67236 8/50 current_auc = 0.7487482931269913
User 67236 AUC after training: 0.7488018420841254
User 67236 improves AUC. Keeping the model.
Training on augumented user 116626 9/50 current_auc = 0.7488018420841254
User 116626 AUC after training: 0.7485541781573802
User 116626 does not improve AUC. Reverting changes.
Training on augumented user 93236 10/50 current_auc = 0.7488018420841254
User 93236 AUC after training: 0.7486077271145144
User 93236 does not improve AUC. Reverting changes.
Training on augumented user 45224 11/50 current_auc = 0.7488018420841254
User 45224 AUC after training: 0.7490160379126617
User 45224 improves AUC. Keeping the model.
Training on augumented user 49332 12/50 current_auc = 0.7490160379126617
User 49332 AUC after training: 0.7489758761948111
User 49332 does not improve AUC. Reverting changes.
Training on augumented user 2047 13/50 current_auc = 0.7490160379126617
User 2047 AUC after training: 0.748922327237677
User 2047 does not improve AUC. Reverting changes.
Training on augumented user 112602 14/50 current_auc = 0.7490160379126617
User 112602 AUC after training: 0.7484136121449035
User 112602 does not improve AUC. Reverting changes.
Training on augumented user 5124 15/50 current_auc = 0.7490160379126617
User 5124 AUC after training: 0.7489156336180353
User 5124 does not improve AUC. Reverting changes.
Training on augumented user 84309 16/50 current_auc = 0.7490160379126617
User 84309 AUC after training: 0.748701437789499
User 84309 does not improve AUC. Reverting changes.
Training on augumented user 11197 17/50 current_auc = 0.7490160379126617
User 11197 AUC after training: 0.7488085357037672
User 11197 does not improve AUC. Reverting changes.
Training on augumented user 82508 18/50 current_auc = 0.7490160379126617
User 82508 AUC after training: 0.7483332887092025
User 82508 does not improve AUC. Reverting changes.
Training on augumented user 37834 19/50 current_auc = 0.7490160379126617
User 37834 AUC after training: 0.7487081314091409
User 37834 does not improve AUC. Reverting changes.
Training on augumented user 97924 20/50 current_auc = 0.7490160379126617
User 97924 AUC after training: 0.748868778280543
User 97924 does not improve AUC. Reverting changes.
Training on augumented user 61150 21/50 current_auc = 0.7490160379126617
User 61150 AUC after training: 0.7489089399983935
User 61150 does not improve AUC. Reverting changes.
Training on augumented user 28489 22/50 current_auc = 0.7490160379126617
User 28489 AUC after training: 0.7488219229430506
User 28489 does not improve AUC. Reverting changes.
Training on augumented user 120904 23/50 current_auc = 0.7490160379126617
User 120904 AUC after training: 0.7488888591394682
User 120904 does not improve AUC. Reverting changes.
Training on augumented user 57924 24/50 current_auc = 0.7490160379126617
User 57924 AUC after training: 0.7485608717770221
User 57924 does not improve AUC. Reverting changes.
Training on augumented user 70551 25/50 current_auc = 0.7490160379126617
User 70551 AUC after training: 0.748701437789499
User 70551 does not improve AUC. Reverting changes.
Training on augumented user 83160 26/50 current_auc = 0.7490160379126617
User 83160 AUC after training: 0.7486679696912903
User 83160 does not improve AUC. Reverting changes.
Training on augumented user 117394 27/50 current_auc = 0.7490160379126617
User 117394 AUC after training: 0.7487349058877079
User 117394 does not improve AUC. Reverting changes.
Training on augumented user 15893 28/50 current_auc = 0.7490160379126617
User 15893 AUC after training: 0.7485608717770221
User 15893 does not improve AUC. Reverting changes.
Training on augumented user 55854 29/50 current_auc = 0.7490160379126617
User 55854 AUC after training: 0.7482931269913519
User 55854 does not improve AUC. Reverting changes.
Training on augumented user 137521 30/50 current_auc = 0.7490160379126617
User 137521 AUC after training: 0.7487616803662749
User 137521 does not improve AUC. Reverting changes.
Training on augumented user 28040 31/50 current_auc = 0.7490160379126617
User 28040 AUC after training: 0.7489624889555275
User 28040 does not improve AUC. Reverting changes.
Training on augumented user 37757 32/50 current_auc = 0.7490160379126617
User 37757 AUC after training: 0.7490294251519453
User 37757 improves AUC. Keeping the model.
Training on augumented user 14549 33/50 current_auc = 0.7490294251519453
User 14549 AUC after training: 0.7489959570537364
User 14549 does not improve AUC. Reverting changes.
Training on augumented user 46115 34/50 current_auc = 0.7490294251519453
User 46115 AUC after training: 0.7491365230662133
User 46115 improves AUC. Keeping the model.
Training on augumented user 131529 35/50 current_auc = 0.7491365230662133
User 131529 AUC after training: 0.7491499103054968
User 131529 improves AUC. Keeping the model.
Training on augumented user 18886 36/50 current_auc = 0.7491499103054968
User 18886 AUC after training: 0.7491632975447803
User 18886 improves AUC. Keeping the model.
Training on augumented user 30746 37/50 current_auc = 0.7491632975447803
User 30746 AUC after training: 0.7488821655198266
User 30746 does not improve AUC. Reverting changes.
Training on augumented user 44625 38/50 current_auc = 0.7491632975447803
User 44625 AUC after training: 0.7490026506733781
User 44625 does not improve AUC. Reverting changes.
Training on augumented user 100020 39/50 current_auc = 0.7491632975447803
User 100020 AUC after training: 0.7495716083429275
User 100020 improves AUC. Keeping the model.
Training on augumented user 17014 40/50 current_auc = 0.7495716083429275
User 17014 AUC after training: 0.7491097485876461
User 17014 does not improve AUC. Reverting changes.
Training on augumented user 25985 41/50 current_auc = 0.7495716083429275
User 25985 AUC after training: 0.7495515274840022
User 25985 does not improve AUC. Reverting changes.
Training on augumented user 17041 42/50 current_auc = 0.7495716083429275
User 17041 AUC after training: 0.7494912849072265
User 17041 does not improve AUC. Reverting changes.
Training on augumented user 54310 43/50 current_auc = 0.7495716083429275
User 54310 AUC after training: 0.7496050764411363
User 54310 improves AUC. Keeping the model.
Training on augumented user 65128 44/50 current_auc = 0.7496050764411363
User 65128 AUC after training: 0.7495247530054353
User 65128 does not improve AUC. Reverting changes.
Training on augumented user 42830 45/50 current_auc = 0.7496050764411363
User 42830 AUC after training: 0.7494444295697341
User 42830 does not improve AUC. Reverting changes.
Training on augumented user 87959 46/50 current_auc = 0.7496050764411363
User 87959 AUC after training: 0.7496853998768374
User 87959 improves AUC. Keeping the model.
Training on augumented user 9681 47/50 current_auc = 0.7496853998768374
User 9681 AUC after training: 0.7496586253982704
User 9681 does not improve AUC. Reverting changes.
Training on augumented user 107814 48/50 current_auc = 0.7496853998768374
User 107814 AUC after training: 0.7495113657661516
User 107814 does not improve AUC. Reverting changes.
Training on augumented user 18787 49/50 current_auc = 0.7496853998768374
User 18787 AUC after training: 0.7495247530054352
User 18787 does not improve AUC. Reverting changes.
[2024-12-02 17:54:46.814382] start test user 42252 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:47.370223] start test user 42252 31/568 recall augumented users by random, augumented_users = [65047, 75249, 23375, 127732, 74730, 96032, 50450, 98730, 102057, 70861, 135128, 52077, 59461, 89600, 62177, 118583, 36358, 111566, 48709, 37609, 96104, 59957, 82548, 79642, 7935, 119733, 118737, 124013, 117344, 113048, 129908, 32550, 85562, 88931, 108030, 52664, 18836, 3654, 39041, 27293, 32180, 7729, 68466, 21185, 90054, 90908, 50034, 128442, 101914, 639]
[2024-12-02 17:54:47.385652] user = 42252 Cloud 31/568
[2024-12-02 17:54:47.397473] user = 42252 Local 31/568
[2024-12-02 17:54:47.455669] user = 42252 Local+ 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:49.600198] user = 42252 MPDA- 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3606060606060606
Training on augumented user 65047 0/50 current_auc = 0.3606060606060606
User 65047 AUC after training: 0.3606060606060606
User 65047 does not improve AUC. Reverting changes.
Training on augumented user 75249 1/50 current_auc = 0.3606060606060606
User 75249 AUC after training: 0.36969696969696975
User 75249 improves AUC. Keeping the model.
Training on augumented user 23375 2/50 current_auc = 0.36969696969696975
User 23375 AUC after training: 0.3727272727272728
User 23375 improves AUC. Keeping the model.
Training on augumented user 127732 3/50 current_auc = 0.3727272727272728
User 127732 AUC after training: 0.3666666666666667
User 127732 does not improve AUC. Reverting changes.
Training on augumented user 74730 4/50 current_auc = 0.3727272727272728
User 74730 AUC after training: 0.38181818181818183
User 74730 improves AUC. Keeping the model.
Training on augumented user 96032 5/50 current_auc = 0.38181818181818183
User 96032 AUC after training: 0.38181818181818183
User 96032 does not improve AUC. Reverting changes.
Training on augumented user 50450 6/50 current_auc = 0.38181818181818183
User 50450 AUC after training: 0.3787878787878788
User 50450 does not improve AUC. Reverting changes.
Training on augumented user 98730 7/50 current_auc = 0.38181818181818183
User 98730 AUC after training: 0.3787878787878788
User 98730 does not improve AUC. Reverting changes.
Training on augumented user 102057 8/50 current_auc = 0.38181818181818183
User 102057 AUC after training: 0.38787878787878793
User 102057 improves AUC. Keeping the model.
Training on augumented user 70861 9/50 current_auc = 0.38787878787878793
User 70861 AUC after training: 0.3848484848484849
User 70861 does not improve AUC. Reverting changes.
Training on augumented user 135128 10/50 current_auc = 0.38787878787878793
User 135128 AUC after training: 0.3878787878787879
User 135128 does not improve AUC. Reverting changes.
Training on augumented user 52077 11/50 current_auc = 0.38787878787878793
User 52077 AUC after training: 0.3848484848484849
User 52077 does not improve AUC. Reverting changes.
Training on augumented user 59461 12/50 current_auc = 0.38787878787878793
User 59461 AUC after training: 0.3848484848484849
User 59461 does not improve AUC. Reverting changes.
Training on augumented user 89600 13/50 current_auc = 0.38787878787878793
User 89600 AUC after training: 0.3848484848484849
User 89600 does not improve AUC. Reverting changes.
Training on augumented user 62177 14/50 current_auc = 0.38787878787878793
User 62177 AUC after training: 0.3878787878787878
User 62177 does not improve AUC. Reverting changes.
Training on augumented user 118583 15/50 current_auc = 0.38787878787878793
User 118583 AUC after training: 0.3878787878787878
User 118583 does not improve AUC. Reverting changes.
Training on augumented user 36358 16/50 current_auc = 0.38787878787878793
User 36358 AUC after training: 0.3878787878787878
User 36358 does not improve AUC. Reverting changes.
Training on augumented user 111566 17/50 current_auc = 0.38787878787878793
User 111566 AUC after training: 0.38787878787878793
User 111566 does not improve AUC. Reverting changes.
Training on augumented user 48709 18/50 current_auc = 0.38787878787878793
User 48709 AUC after training: 0.3848484848484849
User 48709 does not improve AUC. Reverting changes.
Training on augumented user 37609 19/50 current_auc = 0.38787878787878793
User 37609 AUC after training: 0.38181818181818183
User 37609 does not improve AUC. Reverting changes.
Training on augumented user 96104 20/50 current_auc = 0.38787878787878793
User 96104 AUC after training: 0.3848484848484849
User 96104 does not improve AUC. Reverting changes.
Training on augumented user 59957 21/50 current_auc = 0.38787878787878793
User 59957 AUC after training: 0.3848484848484849
User 59957 does not improve AUC. Reverting changes.
Training on augumented user 82548 22/50 current_auc = 0.38787878787878793
User 82548 AUC after training: 0.3878787878787878
User 82548 does not improve AUC. Reverting changes.
Training on augumented user 79642 23/50 current_auc = 0.38787878787878793
User 79642 AUC after training: 0.38181818181818183
User 79642 does not improve AUC. Reverting changes.
Training on augumented user 7935 24/50 current_auc = 0.38787878787878793
User 7935 AUC after training: 0.3848484848484849
User 7935 does not improve AUC. Reverting changes.
Training on augumented user 119733 25/50 current_auc = 0.38787878787878793
User 119733 AUC after training: 0.3848484848484849
User 119733 does not improve AUC. Reverting changes.
Training on augumented user 118737 26/50 current_auc = 0.38787878787878793
User 118737 AUC after training: 0.3878787878787878
User 118737 does not improve AUC. Reverting changes.
Training on augumented user 124013 27/50 current_auc = 0.38787878787878793
User 124013 AUC after training: 0.3848484848484849
User 124013 does not improve AUC. Reverting changes.
Training on augumented user 117344 28/50 current_auc = 0.38787878787878793
User 117344 AUC after training: 0.38181818181818183
User 117344 does not improve AUC. Reverting changes.
Training on augumented user 113048 29/50 current_auc = 0.38787878787878793
User 113048 AUC after training: 0.3878787878787878
User 113048 does not improve AUC. Reverting changes.
Training on augumented user 129908 30/50 current_auc = 0.38787878787878793
User 129908 AUC after training: 0.3848484848484849
User 129908 does not improve AUC. Reverting changes.
Training on augumented user 32550 31/50 current_auc = 0.38787878787878793
User 32550 AUC after training: 0.3848484848484849
User 32550 does not improve AUC. Reverting changes.
Training on augumented user 85562 32/50 current_auc = 0.38787878787878793
User 85562 AUC after training: 0.38181818181818183
User 85562 does not improve AUC. Reverting changes.
Training on augumented user 88931 33/50 current_auc = 0.38787878787878793
User 88931 AUC after training: 0.3848484848484849
User 88931 does not improve AUC. Reverting changes.
Training on augumented user 108030 34/50 current_auc = 0.38787878787878793
User 108030 AUC after training: 0.37575757575757573
User 108030 does not improve AUC. Reverting changes.
Training on augumented user 52664 35/50 current_auc = 0.38787878787878793
User 52664 AUC after training: 0.3878787878787878
User 52664 does not improve AUC. Reverting changes.
Training on augumented user 18836 36/50 current_auc = 0.38787878787878793
User 18836 AUC after training: 0.3848484848484849
User 18836 does not improve AUC. Reverting changes.
Training on augumented user 3654 37/50 current_auc = 0.38787878787878793
User 3654 AUC after training: 0.3848484848484849
User 3654 does not improve AUC. Reverting changes.
Training on augumented user 39041 38/50 current_auc = 0.38787878787878793
User 39041 AUC after training: 0.3787878787878788
User 39041 does not improve AUC. Reverting changes.
Training on augumented user 27293 39/50 current_auc = 0.38787878787878793
User 27293 AUC after training: 0.3848484848484849
User 27293 does not improve AUC. Reverting changes.
Training on augumented user 32180 40/50 current_auc = 0.38787878787878793
User 32180 AUC after training: 0.38181818181818183
User 32180 does not improve AUC. Reverting changes.
Training on augumented user 7729 41/50 current_auc = 0.38787878787878793
User 7729 AUC after training: 0.37575757575757573
User 7729 does not improve AUC. Reverting changes.
Training on augumented user 68466 42/50 current_auc = 0.38787878787878793
User 68466 AUC after training: 0.3787878787878788
User 68466 does not improve AUC. Reverting changes.
Training on augumented user 21185 43/50 current_auc = 0.38787878787878793
User 21185 AUC after training: 0.36363636363636365
User 21185 does not improve AUC. Reverting changes.
Training on augumented user 90054 44/50 current_auc = 0.38787878787878793
User 90054 AUC after training: 0.3848484848484849
User 90054 does not improve AUC. Reverting changes.
Training on augumented user 90908 45/50 current_auc = 0.38787878787878793
User 90908 AUC after training: 0.3848484848484849
User 90908 does not improve AUC. Reverting changes.
Training on augumented user 50034 46/50 current_auc = 0.38787878787878793
User 50034 AUC after training: 0.3878787878787878
User 50034 does not improve AUC. Reverting changes.
Training on augumented user 128442 47/50 current_auc = 0.38787878787878793
User 128442 AUC after training: 0.3848484848484849
User 128442 does not improve AUC. Reverting changes.
Training on augumented user 101914 48/50 current_auc = 0.38787878787878793
User 101914 AUC after training: 0.38181818181818183
User 101914 does not improve AUC. Reverting changes.
Training on augumented user 639 49/50 current_auc = 0.38787878787878793
User 639 AUC after training: 0.3848484848484849
User 639 does not improve AUC. Reverting changes.
[2024-12-02 17:55:15.238521] start test user 42259 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:15.658298] start test user 42259 32/568 recall augumented users by random, augumented_users = [65300, 64964, 23843, 49839, 114796, 9137, 101051, 136988, 29968, 124225, 6379, 37367, 112562, 133406, 128527, 15887, 89996, 136183, 44099, 23901, 43967, 83066, 69724, 66317, 121411, 46592, 19191, 77159, 50457, 32806, 29781, 11189, 19057, 29991, 82578, 22904, 48868, 135996, 10259, 23201, 136837, 136300, 37518, 37779, 71143, 69618, 128834, 33323, 4714, 102574]
[2024-12-02 17:55:15.673441] user = 42259 Cloud 32/568
[2024-12-02 17:55:15.683272] user = 42259 Local 32/568
[2024-12-02 17:55:15.787077] user = 42259 Local+ 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:18.882029] user = 42259 MPDA- 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.875
Training on augumented user 65300 0/50 current_auc = 0.875
User 65300 AUC after training: 0.875
User 65300 does not improve AUC. Reverting changes.
Training on augumented user 64964 1/50 current_auc = 0.875
User 64964 AUC after training: 0.875
User 64964 does not improve AUC. Reverting changes.
Training on augumented user 23843 2/50 current_auc = 0.875
User 23843 AUC after training: 0.875
User 23843 does not improve AUC. Reverting changes.
Training on augumented user 49839 3/50 current_auc = 0.875
User 49839 AUC after training: 0.875
User 49839 does not improve AUC. Reverting changes.
Training on augumented user 114796 4/50 current_auc = 0.875
User 114796 AUC after training: 0.875
User 114796 does not improve AUC. Reverting changes.
Training on augumented user 9137 5/50 current_auc = 0.875
User 9137 AUC after training: 0.875
User 9137 does not improve AUC. Reverting changes.
Training on augumented user 101051 6/50 current_auc = 0.875
User 101051 AUC after training: 0.875
User 101051 does not improve AUC. Reverting changes.
Training on augumented user 136988 7/50 current_auc = 0.875
User 136988 AUC after training: 0.875
User 136988 does not improve AUC. Reverting changes.
Training on augumented user 29968 8/50 current_auc = 0.875
User 29968 AUC after training: 0.875
User 29968 does not improve AUC. Reverting changes.
Training on augumented user 124225 9/50 current_auc = 0.875
User 124225 AUC after training: 0.875
User 124225 does not improve AUC. Reverting changes.
Training on augumented user 6379 10/50 current_auc = 0.875
User 6379 AUC after training: 0.875
User 6379 does not improve AUC. Reverting changes.
Training on augumented user 37367 11/50 current_auc = 0.875
User 37367 AUC after training: 0.875
User 37367 does not improve AUC. Reverting changes.
Training on augumented user 112562 12/50 current_auc = 0.875
User 112562 AUC after training: 0.875
User 112562 does not improve AUC. Reverting changes.
Training on augumented user 133406 13/50 current_auc = 0.875
User 133406 AUC after training: 0.875
User 133406 does not improve AUC. Reverting changes.
Training on augumented user 128527 14/50 current_auc = 0.875
User 128527 AUC after training: 0.875
User 128527 does not improve AUC. Reverting changes.
Training on augumented user 15887 15/50 current_auc = 0.875
User 15887 AUC after training: 0.875
User 15887 does not improve AUC. Reverting changes.
Training on augumented user 89996 16/50 current_auc = 0.875
User 89996 AUC after training: 0.875
User 89996 does not improve AUC. Reverting changes.
Training on augumented user 136183 17/50 current_auc = 0.875
User 136183 AUC after training: 0.875
User 136183 does not improve AUC. Reverting changes.
Training on augumented user 44099 18/50 current_auc = 0.875
User 44099 AUC after training: 0.875
User 44099 does not improve AUC. Reverting changes.
Training on augumented user 23901 19/50 current_auc = 0.875
User 23901 AUC after training: 0.875
User 23901 does not improve AUC. Reverting changes.
Training on augumented user 43967 20/50 current_auc = 0.875
User 43967 AUC after training: 0.875
User 43967 does not improve AUC. Reverting changes.
Training on augumented user 83066 21/50 current_auc = 0.875
User 83066 AUC after training: 0.875
User 83066 does not improve AUC. Reverting changes.
Training on augumented user 69724 22/50 current_auc = 0.875
User 69724 AUC after training: 0.875
User 69724 does not improve AUC. Reverting changes.
Training on augumented user 66317 23/50 current_auc = 0.875
User 66317 AUC after training: 0.875
User 66317 does not improve AUC. Reverting changes.
Training on augumented user 121411 24/50 current_auc = 0.875
User 121411 AUC after training: 0.875
User 121411 does not improve AUC. Reverting changes.
Training on augumented user 46592 25/50 current_auc = 0.875
User 46592 AUC after training: 0.875
User 46592 does not improve AUC. Reverting changes.
Training on augumented user 19191 26/50 current_auc = 0.875
User 19191 AUC after training: 0.875
User 19191 does not improve AUC. Reverting changes.
Training on augumented user 77159 27/50 current_auc = 0.875
User 77159 AUC after training: 0.875
User 77159 does not improve AUC. Reverting changes.
Training on augumented user 50457 28/50 current_auc = 0.875
User 50457 AUC after training: 0.875
User 50457 does not improve AUC. Reverting changes.
Training on augumented user 32806 29/50 current_auc = 0.875
User 32806 AUC after training: 0.875
User 32806 does not improve AUC. Reverting changes.
Training on augumented user 29781 30/50 current_auc = 0.875
User 29781 AUC after training: 0.875
User 29781 does not improve AUC. Reverting changes.
Training on augumented user 11189 31/50 current_auc = 0.875
User 11189 AUC after training: 0.875
User 11189 does not improve AUC. Reverting changes.
Training on augumented user 19057 32/50 current_auc = 0.875
User 19057 AUC after training: 0.875
User 19057 does not improve AUC. Reverting changes.
Training on augumented user 29991 33/50 current_auc = 0.875
User 29991 AUC after training: 0.875
User 29991 does not improve AUC. Reverting changes.
Training on augumented user 82578 34/50 current_auc = 0.875
User 82578 AUC after training: 0.875
User 82578 does not improve AUC. Reverting changes.
Training on augumented user 22904 35/50 current_auc = 0.875
User 22904 AUC after training: 0.875
User 22904 does not improve AUC. Reverting changes.
Training on augumented user 48868 36/50 current_auc = 0.875
User 48868 AUC after training: 0.875
User 48868 does not improve AUC. Reverting changes.
Training on augumented user 135996 37/50 current_auc = 0.875
User 135996 AUC after training: 0.875
User 135996 does not improve AUC. Reverting changes.
Training on augumented user 10259 38/50 current_auc = 0.875
User 10259 AUC after training: 0.875
User 10259 does not improve AUC. Reverting changes.
Training on augumented user 23201 39/50 current_auc = 0.875
User 23201 AUC after training: 0.875
User 23201 does not improve AUC. Reverting changes.
Training on augumented user 136837 40/50 current_auc = 0.875
User 136837 AUC after training: 0.875
User 136837 does not improve AUC. Reverting changes.
Training on augumented user 136300 41/50 current_auc = 0.875
User 136300 AUC after training: 0.875
User 136300 does not improve AUC. Reverting changes.
Training on augumented user 37518 42/50 current_auc = 0.875
User 37518 AUC after training: 0.875
User 37518 does not improve AUC. Reverting changes.
Training on augumented user 37779 43/50 current_auc = 0.875
User 37779 AUC after training: 0.875
User 37779 does not improve AUC. Reverting changes.
Training on augumented user 71143 44/50 current_auc = 0.875
User 71143 AUC after training: 0.875
User 71143 does not improve AUC. Reverting changes.
Training on augumented user 69618 45/50 current_auc = 0.875
User 69618 AUC after training: 0.875
User 69618 does not improve AUC. Reverting changes.
Training on augumented user 128834 46/50 current_auc = 0.875
User 128834 AUC after training: 0.875
User 128834 does not improve AUC. Reverting changes.
Training on augumented user 33323 47/50 current_auc = 0.875
User 33323 AUC after training: 0.875
User 33323 does not improve AUC. Reverting changes.
Training on augumented user 4714 48/50 current_auc = 0.875
User 4714 AUC after training: 0.875
User 4714 does not improve AUC. Reverting changes.
Training on augumented user 102574 49/50 current_auc = 0.875
User 102574 AUC after training: 0.875
User 102574 does not improve AUC. Reverting changes.
[2024-12-02 17:55:45.378022] start test user 42281 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:46.014820] start test user 42281 33/568 recall augumented users by random, augumented_users = [55087, 14442, 24928, 120362, 16267, 121920, 60667, 28693, 98380, 87150, 76274, 63026, 103035, 76983, 20858, 32755, 61875, 35593, 26540, 123776, 102609, 83639, 14016, 149, 120393, 60750, 30599, 98098, 107893, 10458, 25128, 31364, 46370, 16882, 33638, 73365, 90376, 67962, 90777, 115356, 16526, 25786, 3856, 20437, 121346, 94588, 109354, 90187, 130509, 83618]
[2024-12-02 17:55:46.031050] user = 42281 Cloud 33/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:55:46.042357] user = 42281 Local 33/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:55:46.165680] user = 42281 Local+ 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:55:48.705416] user = 42281 MPDA- 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 55087 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55087 AUC after training: 0.5
User 55087 does not improve AUC. Reverting changes.
Training on augumented user 14442 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14442 AUC after training: 0.5
User 14442 does not improve AUC. Reverting changes.
Training on augumented user 24928 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24928 AUC after training: 0.5
User 24928 does not improve AUC. Reverting changes.
Training on augumented user 120362 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120362 AUC after training: 0.5
User 120362 does not improve AUC. Reverting changes.
Training on augumented user 16267 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16267 AUC after training: 0.5
User 16267 does not improve AUC. Reverting changes.
Training on augumented user 121920 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121920 AUC after training: 0.5
User 121920 does not improve AUC. Reverting changes.
Training on augumented user 60667 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60667 AUC after training: 0.5
User 60667 does not improve AUC. Reverting changes.
Training on augumented user 28693 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28693 AUC after training: 0.5
User 28693 does not improve AUC. Reverting changes.
Training on augumented user 98380 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98380 AUC after training: 0.5
User 98380 does not improve AUC. Reverting changes.
Training on augumented user 87150 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87150 AUC after training: 0.5
User 87150 does not improve AUC. Reverting changes.
Training on augumented user 76274 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76274 AUC after training: 0.5
User 76274 does not improve AUC. Reverting changes.
Training on augumented user 63026 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63026 AUC after training: 0.5
User 63026 does not improve AUC. Reverting changes.
Training on augumented user 103035 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103035 AUC after training: 0.5
User 103035 does not improve AUC. Reverting changes.
Training on augumented user 76983 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76983 AUC after training: 0.5
User 76983 does not improve AUC. Reverting changes.
Training on augumented user 20858 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20858 AUC after training: 0.5
User 20858 does not improve AUC. Reverting changes.
Training on augumented user 32755 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32755 AUC after training: 0.5
User 32755 does not improve AUC. Reverting changes.
Training on augumented user 61875 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61875 AUC after training: 0.5
User 61875 does not improve AUC. Reverting changes.
Training on augumented user 35593 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35593 AUC after training: 0.5
User 35593 does not improve AUC. Reverting changes.
Training on augumented user 26540 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26540 AUC after training: 0.5
User 26540 does not improve AUC. Reverting changes.
Training on augumented user 123776 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123776 AUC after training: 0.5
User 123776 does not improve AUC. Reverting changes.
Training on augumented user 102609 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102609 AUC after training: 0.5
User 102609 does not improve AUC. Reverting changes.
Training on augumented user 83639 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83639 AUC after training: 0.5
User 83639 does not improve AUC. Reverting changes.
Training on augumented user 14016 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14016 AUC after training: 0.5
User 14016 does not improve AUC. Reverting changes.
Training on augumented user 149 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 149 AUC after training: 0.5
User 149 does not improve AUC. Reverting changes.
Training on augumented user 120393 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120393 AUC after training: 0.5
User 120393 does not improve AUC. Reverting changes.
Training on augumented user 60750 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60750 AUC after training: 0.5
User 60750 does not improve AUC. Reverting changes.
Training on augumented user 30599 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30599 AUC after training: 0.5
User 30599 does not improve AUC. Reverting changes.
Training on augumented user 98098 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98098 AUC after training: 0.5
User 98098 does not improve AUC. Reverting changes.
Training on augumented user 107893 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107893 AUC after training: 0.5
User 107893 does not improve AUC. Reverting changes.
Training on augumented user 10458 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10458 AUC after training: 0.5
User 10458 does not improve AUC. Reverting changes.
Training on augumented user 25128 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25128 AUC after training: 0.5
User 25128 does not improve AUC. Reverting changes.
Training on augumented user 31364 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31364 AUC after training: 0.5
User 31364 does not improve AUC. Reverting changes.
Training on augumented user 46370 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46370 AUC after training: 0.5
User 46370 does not improve AUC. Reverting changes.
Training on augumented user 16882 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16882 AUC after training: 0.5
User 16882 does not improve AUC. Reverting changes.
Training on augumented user 33638 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33638 AUC after training: 0.5
User 33638 does not improve AUC. Reverting changes.
Training on augumented user 73365 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73365 AUC after training: 0.5
User 73365 does not improve AUC. Reverting changes.
Training on augumented user 90376 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90376 AUC after training: 0.5
User 90376 does not improve AUC. Reverting changes.
Training on augumented user 67962 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67962 AUC after training: 0.5
User 67962 does not improve AUC. Reverting changes.
Training on augumented user 90777 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90777 AUC after training: 0.5
User 90777 does not improve AUC. Reverting changes.
Training on augumented user 115356 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115356 AUC after training: 0.5
User 115356 does not improve AUC. Reverting changes.
Training on augumented user 16526 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16526 AUC after training: 0.5
User 16526 does not improve AUC. Reverting changes.
Training on augumented user 25786 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25786 AUC after training: 0.5
User 25786 does not improve AUC. Reverting changes.
Training on augumented user 3856 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3856 AUC after training: 0.5
User 3856 does not improve AUC. Reverting changes.
Training on augumented user 20437 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20437 AUC after training: 0.5
User 20437 does not improve AUC. Reverting changes.
Training on augumented user 121346 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121346 AUC after training: 0.5
User 121346 does not improve AUC. Reverting changes.
Training on augumented user 94588 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94588 AUC after training: 0.5
User 94588 does not improve AUC. Reverting changes.
Training on augumented user 109354 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109354 AUC after training: 0.5
User 109354 does not improve AUC. Reverting changes.
Training on augumented user 90187 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90187 AUC after training: 0.5
User 90187 does not improve AUC. Reverting changes.
Training on augumented user 130509 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130509 AUC after training: 0.5
User 130509 does not improve AUC. Reverting changes.
Training on augumented user 83618 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83618 AUC after training: 0.5
User 83618 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:16.538795] start test user 42298 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:17.071539] start test user 42298 34/568 recall augumented users by random, augumented_users = [62555, 111089, 24391, 107493, 132313, 102089, 111555, 56706, 99072, 17819, 32916, 65949, 112435, 68197, 12366, 135531, 69499, 19287, 18081, 106923, 69194, 87384, 39554, 90457, 33986, 95947, 75438, 82501, 101781, 105475, 125319, 38751, 80517, 121920, 77326, 58566, 65721, 121864, 26227, 116380, 53856, 126508, 91445, 32167, 64039, 63280, 126797, 2537, 88061, 27520]
[2024-12-02 17:56:17.088771] user = 42298 Cloud 34/568
[2024-12-02 17:56:17.114316] user = 42298 Local 34/568
[2024-12-02 17:56:17.162940] user = 42298 Local+ 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:19.733941] user = 42298 MPDA- 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6713550600343053
Training on augumented user 62555 0/50 current_auc = 0.6713550600343053
User 62555 AUC after training: 0.6699828473413378
User 62555 does not improve AUC. Reverting changes.
Training on augumented user 111089 1/50 current_auc = 0.6713550600343053
User 111089 AUC after training: 0.6701543739279587
User 111089 does not improve AUC. Reverting changes.
Training on augumented user 24391 2/50 current_auc = 0.6713550600343053
User 24391 AUC after training: 0.6692967409948541
User 24391 does not improve AUC. Reverting changes.
Training on augumented user 107493 3/50 current_auc = 0.6713550600343053
User 107493 AUC after training: 0.6723842195540308
User 107493 improves AUC. Keeping the model.
Training on augumented user 132313 4/50 current_auc = 0.6723842195540308
User 132313 AUC after training: 0.6727272727272727
User 132313 improves AUC. Keeping the model.
Training on augumented user 102089 5/50 current_auc = 0.6727272727272727
User 102089 AUC after training: 0.6734133790737564
User 102089 improves AUC. Keeping the model.
Training on augumented user 111555 6/50 current_auc = 0.6734133790737564
User 111555 AUC after training: 0.6737564322469982
User 111555 improves AUC. Keeping the model.
Training on augumented user 56706 7/50 current_auc = 0.6737564322469982
User 56706 AUC after training: 0.6737564322469982
User 56706 does not improve AUC. Reverting changes.
Training on augumented user 99072 8/50 current_auc = 0.6737564322469982
User 99072 AUC after training: 0.6692967409948543
User 99072 does not improve AUC. Reverting changes.
Training on augumented user 17819 9/50 current_auc = 0.6737564322469982
User 17819 AUC after training: 0.6737564322469982
User 17819 does not improve AUC. Reverting changes.
Training on augumented user 32916 10/50 current_auc = 0.6737564322469982
User 32916 AUC after training: 0.6730703259005146
User 32916 does not improve AUC. Reverting changes.
Training on augumented user 65949 11/50 current_auc = 0.6737564322469982
User 65949 AUC after training: 0.6686106346483704
User 65949 does not improve AUC. Reverting changes.
Training on augumented user 112435 12/50 current_auc = 0.6737564322469982
User 112435 AUC after training: 0.672041166380789
User 112435 does not improve AUC. Reverting changes.
Training on augumented user 68197 13/50 current_auc = 0.6737564322469982
User 68197 AUC after training: 0.6730703259005146
User 68197 does not improve AUC. Reverting changes.
Training on augumented user 12366 14/50 current_auc = 0.6737564322469982
User 12366 AUC after training: 0.6644939965694682
User 12366 does not improve AUC. Reverting changes.
Training on augumented user 135531 15/50 current_auc = 0.6737564322469982
User 135531 AUC after training: 0.6692967409948543
User 135531 does not improve AUC. Reverting changes.
Training on augumented user 69499 16/50 current_auc = 0.6737564322469982
User 69499 AUC after training: 0.6737564322469982
User 69499 does not improve AUC. Reverting changes.
Training on augumented user 19287 17/50 current_auc = 0.6737564322469982
User 19287 AUC after training: 0.674442538593482
User 19287 improves AUC. Keeping the model.
Training on augumented user 18081 18/50 current_auc = 0.674442538593482
User 18081 AUC after training: 0.6751286449399656
User 18081 improves AUC. Keeping the model.
Training on augumented user 106923 19/50 current_auc = 0.6751286449399656
User 106923 AUC after training: 0.6744425385934819
User 106923 does not improve AUC. Reverting changes.
Training on augumented user 69194 20/50 current_auc = 0.6751286449399656
User 69194 AUC after training: 0.6658662092624356
User 69194 does not improve AUC. Reverting changes.
Training on augumented user 87384 21/50 current_auc = 0.6751286449399656
User 87384 AUC after training: 0.6747855917667238
User 87384 does not improve AUC. Reverting changes.
Training on augumented user 39554 22/50 current_auc = 0.6751286449399656
User 39554 AUC after training: 0.674442538593482
User 39554 does not improve AUC. Reverting changes.
Training on augumented user 90457 23/50 current_auc = 0.6751286449399656
User 90457 AUC after training: 0.6737564322469982
User 90457 does not improve AUC. Reverting changes.
Training on augumented user 33986 24/50 current_auc = 0.6751286449399656
User 33986 AUC after training: 0.6751286449399656
User 33986 does not improve AUC. Reverting changes.
Training on augumented user 95947 25/50 current_auc = 0.6751286449399656
User 95947 AUC after training: 0.6723842195540309
User 95947 does not improve AUC. Reverting changes.
Training on augumented user 75438 26/50 current_auc = 0.6751286449399656
User 75438 AUC after training: 0.6716981132075472
User 75438 does not improve AUC. Reverting changes.
Training on augumented user 82501 27/50 current_auc = 0.6751286449399656
User 82501 AUC after training: 0.6723842195540308
User 82501 does not improve AUC. Reverting changes.
Training on augumented user 101781 28/50 current_auc = 0.6751286449399656
User 101781 AUC after training: 0.6716981132075471
User 101781 does not improve AUC. Reverting changes.
Training on augumented user 105475 29/50 current_auc = 0.6751286449399656
User 105475 AUC after training: 0.6751286449399656
User 105475 does not improve AUC. Reverting changes.
Training on augumented user 125319 30/50 current_auc = 0.6751286449399656
User 125319 AUC after training: 0.6734133790737564
User 125319 does not improve AUC. Reverting changes.
Training on augumented user 38751 31/50 current_auc = 0.6751286449399656
User 38751 AUC after training: 0.6751286449399656
User 38751 does not improve AUC. Reverting changes.
Training on augumented user 80517 32/50 current_auc = 0.6751286449399656
User 80517 AUC after training: 0.6754716981132075
User 80517 improves AUC. Keeping the model.
Training on augumented user 121920 33/50 current_auc = 0.6754716981132075
User 121920 AUC after training: 0.6723842195540308
User 121920 does not improve AUC. Reverting changes.
Training on augumented user 77326 34/50 current_auc = 0.6754716981132075
User 77326 AUC after training: 0.6751286449399656
User 77326 does not improve AUC. Reverting changes.
Training on augumented user 58566 35/50 current_auc = 0.6754716981132075
User 58566 AUC after training: 0.6727272727272726
User 58566 does not improve AUC. Reverting changes.
Training on augumented user 65721 36/50 current_auc = 0.6754716981132075
User 65721 AUC after training: 0.6758147512864494
User 65721 improves AUC. Keeping the model.
Training on augumented user 121864 37/50 current_auc = 0.6758147512864494
User 121864 AUC after training: 0.6747855917667238
User 121864 does not improve AUC. Reverting changes.
Training on augumented user 26227 38/50 current_auc = 0.6758147512864494
User 26227 AUC after training: 0.6680960548885078
User 26227 does not improve AUC. Reverting changes.
Training on augumented user 116380 39/50 current_auc = 0.6758147512864494
User 116380 AUC after training: 0.6703259005145796
User 116380 does not improve AUC. Reverting changes.
Training on augumented user 53856 40/50 current_auc = 0.6758147512864494
User 53856 AUC after training: 0.6758147512864494
User 53856 does not improve AUC. Reverting changes.
Training on augumented user 126508 41/50 current_auc = 0.6758147512864494
User 126508 AUC after training: 0.6751286449399656
User 126508 does not improve AUC. Reverting changes.
Training on augumented user 91445 42/50 current_auc = 0.6758147512864494
User 91445 AUC after training: 0.6758147512864494
User 91445 does not improve AUC. Reverting changes.
Training on augumented user 32167 43/50 current_auc = 0.6758147512864494
User 32167 AUC after training: 0.6679245283018868
User 32167 does not improve AUC. Reverting changes.
Training on augumented user 64039 44/50 current_auc = 0.6758147512864494
User 64039 AUC after training: 0.6706689536878216
User 64039 does not improve AUC. Reverting changes.
Training on augumented user 63280 45/50 current_auc = 0.6758147512864494
User 63280 AUC after training: 0.6686106346483704
User 63280 does not improve AUC. Reverting changes.
Training on augumented user 126797 46/50 current_auc = 0.6758147512864494
User 126797 AUC after training: 0.6754716981132076
User 126797 does not improve AUC. Reverting changes.
Training on augumented user 2537 47/50 current_auc = 0.6758147512864494
User 2537 AUC after training: 0.6754716981132076
User 2537 does not improve AUC. Reverting changes.
Training on augumented user 88061 48/50 current_auc = 0.6758147512864494
User 88061 AUC after training: 0.6744425385934819
User 88061 does not improve AUC. Reverting changes.
Training on augumented user 27520 49/50 current_auc = 0.6758147512864494
User 27520 AUC after training: 0.6761578044596912
User 27520 improves AUC. Keeping the model.
[2024-12-02 17:56:44.516008] start test user 42365 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:45.036533] start test user 42365 35/568 recall augumented users by random, augumented_users = [92906, 15046, 68958, 134504, 3585, 123020, 126063, 23830, 103241, 60446, 90677, 20525, 138145, 57010, 25249, 62120, 114595, 52204, 122307, 113181, 33334, 126043, 135563, 57233, 121323, 84831, 35406, 134715, 69777, 120685, 25790, 95086, 90460, 49278, 44244, 74538, 92080, 13744, 104403, 99510, 53668, 130003, 99972, 125737, 9148, 75250, 113983, 55171, 109517, 15184]
[2024-12-02 17:56:45.052770] user = 42365 Cloud 35/568
[2024-12-02 17:56:45.063639] user = 42365 Local 35/568
[2024-12-02 17:56:45.145205] user = 42365 Local+ 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:47.857848] user = 42365 MPDA- 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33333333333333337
Training on augumented user 92906 0/50 current_auc = 0.33333333333333337
User 92906 AUC after training: 0.33333333333333337
User 92906 does not improve AUC. Reverting changes.
Training on augumented user 15046 1/50 current_auc = 0.33333333333333337
User 15046 AUC after training: 0.33333333333333337
User 15046 does not improve AUC. Reverting changes.
Training on augumented user 68958 2/50 current_auc = 0.33333333333333337
User 68958 AUC after training: 0.33333333333333337
User 68958 does not improve AUC. Reverting changes.
Training on augumented user 134504 3/50 current_auc = 0.33333333333333337
User 134504 AUC after training: 0.33333333333333337
User 134504 does not improve AUC. Reverting changes.
Training on augumented user 3585 4/50 current_auc = 0.33333333333333337
User 3585 AUC after training: 0.33333333333333337
User 3585 does not improve AUC. Reverting changes.
Training on augumented user 123020 5/50 current_auc = 0.33333333333333337
User 123020 AUC after training: 0.22222222222222224
User 123020 does not improve AUC. Reverting changes.
Training on augumented user 126063 6/50 current_auc = 0.33333333333333337
User 126063 AUC after training: 0.33333333333333337
User 126063 does not improve AUC. Reverting changes.
Training on augumented user 23830 7/50 current_auc = 0.33333333333333337
User 23830 AUC after training: 0.33333333333333337
User 23830 does not improve AUC. Reverting changes.
Training on augumented user 103241 8/50 current_auc = 0.33333333333333337
User 103241 AUC after training: 0.33333333333333337
User 103241 does not improve AUC. Reverting changes.
Training on augumented user 60446 9/50 current_auc = 0.33333333333333337
User 60446 AUC after training: 0.33333333333333337
User 60446 does not improve AUC. Reverting changes.
Training on augumented user 90677 10/50 current_auc = 0.33333333333333337
User 90677 AUC after training: 0.33333333333333337
User 90677 does not improve AUC. Reverting changes.
Training on augumented user 20525 11/50 current_auc = 0.33333333333333337
User 20525 AUC after training: 0.33333333333333337
User 20525 does not improve AUC. Reverting changes.
Training on augumented user 138145 12/50 current_auc = 0.33333333333333337
User 138145 AUC after training: 0.33333333333333337
User 138145 does not improve AUC. Reverting changes.
Training on augumented user 57010 13/50 current_auc = 0.33333333333333337
User 57010 AUC after training: 0.33333333333333337
User 57010 does not improve AUC. Reverting changes.
Training on augumented user 25249 14/50 current_auc = 0.33333333333333337
User 25249 AUC after training: 0.33333333333333337
User 25249 does not improve AUC. Reverting changes.
Training on augumented user 62120 15/50 current_auc = 0.33333333333333337
User 62120 AUC after training: 0.33333333333333337
User 62120 does not improve AUC. Reverting changes.
Training on augumented user 114595 16/50 current_auc = 0.33333333333333337
User 114595 AUC after training: 0.33333333333333337
User 114595 does not improve AUC. Reverting changes.
Training on augumented user 52204 17/50 current_auc = 0.33333333333333337
User 52204 AUC after training: 0.33333333333333337
User 52204 does not improve AUC. Reverting changes.
Training on augumented user 122307 18/50 current_auc = 0.33333333333333337
User 122307 AUC after training: 0.33333333333333337
User 122307 does not improve AUC. Reverting changes.
Training on augumented user 113181 19/50 current_auc = 0.33333333333333337
User 113181 AUC after training: 0.33333333333333337
User 113181 does not improve AUC. Reverting changes.
Training on augumented user 33334 20/50 current_auc = 0.33333333333333337
User 33334 AUC after training: 0.33333333333333337
User 33334 does not improve AUC. Reverting changes.
Training on augumented user 126043 21/50 current_auc = 0.33333333333333337
User 126043 AUC after training: 0.33333333333333337
User 126043 does not improve AUC. Reverting changes.
Training on augumented user 135563 22/50 current_auc = 0.33333333333333337
User 135563 AUC after training: 0.33333333333333337
User 135563 does not improve AUC. Reverting changes.
Training on augumented user 57233 23/50 current_auc = 0.33333333333333337
User 57233 AUC after training: 0.33333333333333337
User 57233 does not improve AUC. Reverting changes.
Training on augumented user 121323 24/50 current_auc = 0.33333333333333337
User 121323 AUC after training: 0.33333333333333337
User 121323 does not improve AUC. Reverting changes.
Training on augumented user 84831 25/50 current_auc = 0.33333333333333337
User 84831 AUC after training: 0.33333333333333337
User 84831 does not improve AUC. Reverting changes.
Training on augumented user 35406 26/50 current_auc = 0.33333333333333337
User 35406 AUC after training: 0.33333333333333337
User 35406 does not improve AUC. Reverting changes.
Training on augumented user 134715 27/50 current_auc = 0.33333333333333337
User 134715 AUC after training: 0.33333333333333337
User 134715 does not improve AUC. Reverting changes.
Training on augumented user 69777 28/50 current_auc = 0.33333333333333337
User 69777 AUC after training: 0.33333333333333337
User 69777 does not improve AUC. Reverting changes.
Training on augumented user 120685 29/50 current_auc = 0.33333333333333337
User 120685 AUC after training: 0.33333333333333337
User 120685 does not improve AUC. Reverting changes.
Training on augumented user 25790 30/50 current_auc = 0.33333333333333337
User 25790 AUC after training: 0.33333333333333337
User 25790 does not improve AUC. Reverting changes.
Training on augumented user 95086 31/50 current_auc = 0.33333333333333337
User 95086 AUC after training: 0.33333333333333337
User 95086 does not improve AUC. Reverting changes.
Training on augumented user 90460 32/50 current_auc = 0.33333333333333337
User 90460 AUC after training: 0.33333333333333337
User 90460 does not improve AUC. Reverting changes.
Training on augumented user 49278 33/50 current_auc = 0.33333333333333337
User 49278 AUC after training: 0.33333333333333337
User 49278 does not improve AUC. Reverting changes.
Training on augumented user 44244 34/50 current_auc = 0.33333333333333337
User 44244 AUC after training: 0.33333333333333337
User 44244 does not improve AUC. Reverting changes.
Training on augumented user 74538 35/50 current_auc = 0.33333333333333337
User 74538 AUC after training: 0.33333333333333337
User 74538 does not improve AUC. Reverting changes.
Training on augumented user 92080 36/50 current_auc = 0.33333333333333337
User 92080 AUC after training: 0.33333333333333337
User 92080 does not improve AUC. Reverting changes.
Training on augumented user 13744 37/50 current_auc = 0.33333333333333337
User 13744 AUC after training: 0.33333333333333337
User 13744 does not improve AUC. Reverting changes.
Training on augumented user 104403 38/50 current_auc = 0.33333333333333337
User 104403 AUC after training: 0.33333333333333337
User 104403 does not improve AUC. Reverting changes.
Training on augumented user 99510 39/50 current_auc = 0.33333333333333337
User 99510 AUC after training: 0.33333333333333337
User 99510 does not improve AUC. Reverting changes.
Training on augumented user 53668 40/50 current_auc = 0.33333333333333337
User 53668 AUC after training: 0.33333333333333337
User 53668 does not improve AUC. Reverting changes.
Training on augumented user 130003 41/50 current_auc = 0.33333333333333337
User 130003 AUC after training: 0.33333333333333337
User 130003 does not improve AUC. Reverting changes.
Training on augumented user 99972 42/50 current_auc = 0.33333333333333337
User 99972 AUC after training: 0.33333333333333337
User 99972 does not improve AUC. Reverting changes.
Training on augumented user 125737 43/50 current_auc = 0.33333333333333337
User 125737 AUC after training: 0.33333333333333337
User 125737 does not improve AUC. Reverting changes.
Training on augumented user 9148 44/50 current_auc = 0.33333333333333337
User 9148 AUC after training: 0.33333333333333337
User 9148 does not improve AUC. Reverting changes.
Training on augumented user 75250 45/50 current_auc = 0.33333333333333337
User 75250 AUC after training: 0.22222222222222224
User 75250 does not improve AUC. Reverting changes.
Training on augumented user 113983 46/50 current_auc = 0.33333333333333337
User 113983 AUC after training: 0.33333333333333337
User 113983 does not improve AUC. Reverting changes.
Training on augumented user 55171 47/50 current_auc = 0.33333333333333337
User 55171 AUC after training: 0.33333333333333337
User 55171 does not improve AUC. Reverting changes.
Training on augumented user 109517 48/50 current_auc = 0.33333333333333337
User 109517 AUC after training: 0.33333333333333337
User 109517 does not improve AUC. Reverting changes.
Training on augumented user 15184 49/50 current_auc = 0.33333333333333337
User 15184 AUC after training: 0.33333333333333337
User 15184 does not improve AUC. Reverting changes.
[2024-12-02 17:57:16.065586] start test user 42366 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:16.785280] start test user 42366 36/568 recall augumented users by random, augumented_users = [97471, 122080, 34475, 61323, 118573, 131664, 131163, 114215, 21856, 136084, 29247, 136248, 7440, 50624, 131593, 103671, 29448, 102128, 104764, 92388, 31691, 6603, 116030, 3318, 1689, 5886, 71517, 27273, 86632, 29102, 87055, 22941, 76786, 100285, 105300, 131866, 62846, 25244, 41787, 77661, 115493, 117030, 23541, 83104, 62751, 121763, 108345, 17872, 78577, 108289]
[2024-12-02 17:57:16.801470] user = 42366 Cloud 36/568
[2024-12-02 17:57:16.964811] user = 42366 Local 36/568
[2024-12-02 17:57:17.257504] user = 42366 Local+ 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:20.465972] user = 42366 MPDA- 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6987654320987654
Training on augumented user 97471 0/50 current_auc = 0.6987654320987654
User 97471 AUC after training: 0.699030539311241
User 97471 improves AUC. Keeping the model.
Training on augumented user 122080 1/50 current_auc = 0.699030539311241
User 122080 AUC after training: 0.6987862248213126
User 122080 does not improve AUC. Reverting changes.
Training on augumented user 34475 2/50 current_auc = 0.699030539311241
User 34475 AUC after training: 0.6989733593242365
User 34475 does not improve AUC. Reverting changes.
Training on augumented user 61323 3/50 current_auc = 0.699030539311241
User 61323 AUC after training: 0.6987082521117609
User 61323 does not improve AUC. Reverting changes.
Training on augumented user 118573 4/50 current_auc = 0.699030539311241
User 118573 AUC after training: 0.6991137102014295
User 118573 improves AUC. Keeping the model.
Training on augumented user 131664 5/50 current_auc = 0.6991137102014295
User 131664 AUC after training: 0.699137102014295
User 131664 improves AUC. Keeping the model.
Training on augumented user 131163 6/50 current_auc = 0.699137102014295
User 131163 AUC after training: 0.6990851202079273
User 131163 does not improve AUC. Reverting changes.
Training on augumented user 114215 7/50 current_auc = 0.699137102014295
User 114215 AUC after training: 0.6993294346978558
User 114215 improves AUC. Keeping the model.
Training on augumented user 21856 8/50 current_auc = 0.6993294346978558
User 21856 AUC after training: 0.6992982456140351
User 21856 does not improve AUC. Reverting changes.
Training on augumented user 136084 9/50 current_auc = 0.6993294346978558
User 136084 AUC after training: 0.6991111111111111
User 136084 does not improve AUC. Reverting changes.
Training on augumented user 29247 10/50 current_auc = 0.6993294346978558
User 29247 AUC after training: 0.6993008447043535
User 29247 does not improve AUC. Reverting changes.
Training on augumented user 136248 11/50 current_auc = 0.6993294346978558
User 136248 AUC after training: 0.6994256010396361
User 136248 improves AUC. Keeping the model.
Training on augumented user 7440 12/50 current_auc = 0.6994256010396361
User 7440 AUC after training: 0.6997141000649773
User 7440 improves AUC. Keeping the model.
Training on augumented user 50624 13/50 current_auc = 0.6997141000649773
User 50624 AUC after training: 0.6994879792072776
User 50624 does not improve AUC. Reverting changes.
Training on augumented user 131593 14/50 current_auc = 0.6997141000649773
User 131593 AUC after training: 0.6998102664067576
User 131593 improves AUC. Keeping the model.
Training on augumented user 103671 15/50 current_auc = 0.6998102664067576
User 103671 AUC after training: 0.6999532163742691
User 103671 improves AUC. Keeping the model.
Training on augumented user 29448 16/50 current_auc = 0.6999532163742691
User 29448 AUC after training: 0.699987004548408
User 29448 improves AUC. Keeping the model.
Training on augumented user 102128 17/50 current_auc = 0.699987004548408
User 102128 AUC after training: 0.6998570500324887
User 102128 does not improve AUC. Reverting changes.
Training on augumented user 104764 18/50 current_auc = 0.699987004548408
User 104764 AUC after training: 0.6996231319038339
User 104764 does not improve AUC. Reverting changes.
Training on augumented user 92388 19/50 current_auc = 0.699987004548408
User 92388 AUC after training: 0.6995659519168291
User 92388 does not improve AUC. Reverting changes.
Training on augumented user 31691 20/50 current_auc = 0.699987004548408
User 31691 AUC after training: 0.699779077322937
User 31691 does not improve AUC. Reverting changes.
Training on augumented user 6603 21/50 current_auc = 0.699987004548408
User 6603 AUC after training: 0.6997868745938921
User 6603 does not improve AUC. Reverting changes.
Training on augumented user 116030 22/50 current_auc = 0.699987004548408
User 116030 AUC after training: 0.6997063027940221
User 116030 does not improve AUC. Reverting changes.
Training on augumented user 3318 23/50 current_auc = 0.699987004548408
User 3318 AUC after training: 0.7003144899285251
User 3318 improves AUC. Keeping the model.
Training on augumented user 1689 24/50 current_auc = 0.7003144899285251
User 1689 AUC after training: 0.7003040935672515
User 1689 does not improve AUC. Reverting changes.
Training on augumented user 5886 25/50 current_auc = 0.7003144899285251
User 5886 AUC after training: 0.700340480831709
User 5886 improves AUC. Keeping the model.
Training on augumented user 71517 26/50 current_auc = 0.700340480831709
User 71517 AUC after training: 0.7002573099415206
User 71517 does not improve AUC. Reverting changes.
Training on augumented user 27273 27/50 current_auc = 0.700340480831709
User 27273 AUC after training: 0.700361273554256
User 27273 improves AUC. Keeping the model.
Training on augumented user 86632 28/50 current_auc = 0.700361273554256
User 86632 AUC after training: 0.7003404808317089
User 86632 does not improve AUC. Reverting changes.
Training on augumented user 29102 29/50 current_auc = 0.700361273554256
User 29102 AUC after training: 0.700535412605588
User 29102 improves AUC. Keeping the model.
Training on augumented user 87055 30/50 current_auc = 0.700535412605588
User 87055 AUC after training: 0.7004912280701755
User 87055 does not improve AUC. Reverting changes.
Training on augumented user 22941 31/50 current_auc = 0.700535412605588
User 22941 AUC after training: 0.7001793372319689
User 22941 does not improve AUC. Reverting changes.
Training on augumented user 76786 32/50 current_auc = 0.700535412605588
User 76786 AUC after training: 0.7005406107862248
User 76786 improves AUC. Keeping the model.
Training on augumented user 100285 33/50 current_auc = 0.7005406107862248
User 100285 AUC after training: 0.700166341780377
User 100285 does not improve AUC. Reverting changes.
Training on augumented user 105300 34/50 current_auc = 0.7005406107862248
User 105300 AUC after training: 0.7004496426250811
User 105300 does not improve AUC. Reverting changes.
Training on augumented user 131866 35/50 current_auc = 0.7005406107862248
User 131866 AUC after training: 0.7006289798570501
User 131866 improves AUC. Keeping the model.
Training on augumented user 62846 36/50 current_auc = 0.7006289798570501
User 62846 AUC after training: 0.700654970760234
User 62846 improves AUC. Keeping the model.
Training on augumented user 25244 37/50 current_auc = 0.700654970760234
User 25244 AUC after training: 0.7007667316439247
User 25244 improves AUC. Keeping the model.
Training on augumented user 41787 38/50 current_auc = 0.7007667316439247
User 41787 AUC after training: 0.7003456790123457
User 41787 does not improve AUC. Reverting changes.
Training on augumented user 77661 39/50 current_auc = 0.7007667316439247
User 77661 AUC after training: 0.7007745289148798
User 77661 improves AUC. Keeping the model.
Training on augumented user 115493 40/50 current_auc = 0.7007745289148798
User 115493 AUC after training: 0.7001507472384665
User 115493 does not improve AUC. Reverting changes.
Training on augumented user 117030 41/50 current_auc = 0.7007745289148798
User 117030 AUC after training: 0.7008914879792073
User 117030 improves AUC. Keeping the model.
Training on augumented user 23541 42/50 current_auc = 0.7008914879792073
User 23541 AUC after training: 0.7010084470435347
User 23541 improves AUC. Keeping the model.
Training on augumented user 83104 43/50 current_auc = 0.7010084470435347
User 83104 AUC after training: 0.7008888888888889
User 83104 does not improve AUC. Reverting changes.
Training on augumented user 62751 44/50 current_auc = 0.7010084470435347
User 62751 AUC after training: 0.7009252761533463
User 62751 does not improve AUC. Reverting changes.
Training on augumented user 121763 45/50 current_auc = 0.7010084470435347
User 121763 AUC after training: 0.7011591942820012
User 121763 improves AUC. Keeping the model.
Training on augumented user 108345 46/50 current_auc = 0.7011591942820012
User 108345 AUC after training: 0.7010630279402209
User 108345 does not improve AUC. Reverting changes.
Training on augumented user 17872 47/50 current_auc = 0.7011591942820012
User 17872 AUC after training: 0.700735542560104
User 17872 does not improve AUC. Reverting changes.
Training on augumented user 78577 48/50 current_auc = 0.7011591942820012
User 78577 AUC after training: 0.7009382716049383
User 78577 does not improve AUC. Reverting changes.
Training on augumented user 108289 49/50 current_auc = 0.7011591942820012
User 108289 AUC after training: 0.7007355425601041
User 108289 does not improve AUC. Reverting changes.
[2024-12-02 17:57:56.370746] start test user 42369 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:57.078386] start test user 42369 37/568 recall augumented users by random, augumented_users = [32242, 103449, 73710, 115532, 20857, 59775, 99547, 81569, 132802, 46577, 49923, 69960, 129446, 108952, 40695, 132683, 136153, 115713, 14501, 38262, 38576, 126821, 87933, 109747, 56357, 41236, 4371, 116252, 88334, 50823, 120390, 38718, 78771, 124422, 57933, 65411, 63841, 74083, 125108, 73563, 24421, 101923, 90945, 52238, 59862, 20485, 81277, 119906, 36807, 26939]
[2024-12-02 17:57:57.101677] user = 42369 Cloud 37/568
[2024-12-02 17:57:57.219506] user = 42369 Local 37/568
[2024-12-02 17:57:57.627738] user = 42369 Local+ 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:00.547489] user = 42369 MPDA- 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6005277001881153
Training on augumented user 32242 0/50 current_auc = 0.6005277001881153
User 32242 AUC after training: 0.6007394317450752
User 32242 improves AUC. Keeping the model.
Training on augumented user 103449 1/50 current_auc = 0.6007394317450752
User 103449 AUC after training: 0.6007882928736045
User 103449 improves AUC. Keeping the model.
Training on augumented user 73710 2/50 current_auc = 0.6007882928736045
User 73710 AUC after training: 0.6007638623093399
User 73710 does not improve AUC. Reverting changes.
Training on augumented user 115532 3/50 current_auc = 0.6007882928736045
User 115532 AUC after training: 0.6009104456949274
User 115532 improves AUC. Keeping the model.
Training on augumented user 20857 4/50 current_auc = 0.6009104456949274
User 20857 AUC after training: 0.600951163302035
User 20857 improves AUC. Keeping the model.
Training on augumented user 59775 5/50 current_auc = 0.600951163302035
User 59775 AUC after training: 0.6008534410449766
User 59775 does not improve AUC. Reverting changes.
Training on augumented user 99547 6/50 current_auc = 0.600951163302035
User 99547 AUC after training: 0.6012687606374749
User 99547 improves AUC. Keeping the model.
Training on augumented user 81569 7/50 current_auc = 0.6012687606374749
User 81569 AUC after training: 0.6006172789237522
User 81569 does not improve AUC. Reverting changes.
Training on augumented user 132802 8/50 current_auc = 0.6012687606374749
User 132802 AUC after training: 0.6008127234378691
User 132802 does not improve AUC. Reverting changes.
Training on augumented user 46577 9/50 current_auc = 0.6012687606374749
User 46577 AUC after training: 0.6010896031662012
User 46577 does not improve AUC. Reverting changes.
Training on augumented user 49923 10/50 current_auc = 0.6012687606374749
User 49923 AUC after training: 0.6006172789237522
User 49923 does not improve AUC. Reverting changes.
Training on augumented user 69960 11/50 current_auc = 0.6012687606374749
User 69960 AUC after training: 0.6012198995089457
User 69960 does not improve AUC. Reverting changes.
Training on augumented user 129446 12/50 current_auc = 0.6012687606374749
User 129446 AUC after training: 0.6008697280878197
User 129446 does not improve AUC. Reverting changes.
Training on augumented user 108952 13/50 current_auc = 0.6012687606374749
User 108952 AUC after training: 0.6010163114734073
User 108952 does not improve AUC. Reverting changes.
Training on augumented user 40695 14/50 current_auc = 0.6012687606374749
User 40695 AUC after training: 0.6011466078161518
User 40695 does not improve AUC. Reverting changes.
Training on augumented user 132683 15/50 current_auc = 0.6012687606374749
User 132683 AUC after training: 0.6006946423772568
User 132683 does not improve AUC. Reverting changes.
Training on augumented user 136153 16/50 current_auc = 0.6012687606374749
User 136153 AUC after training: 0.6014642051515916
User 136153 improves AUC. Keeping the model.
Training on augumented user 115713 17/50 current_auc = 0.6014642051515916
User 115713 AUC after training: 0.6012931912017395
User 115713 does not improve AUC. Reverting changes.
Training on augumented user 14501 18/50 current_auc = 0.6014642051515916
User 14501 AUC after training: 0.601317621766004
User 14501 does not improve AUC. Reverting changes.
Training on augumented user 38262 19/50 current_auc = 0.6014642051515916
User 38262 AUC after training: 0.6012931912017394
User 38262 does not improve AUC. Reverting changes.
Training on augumented user 38576 20/50 current_auc = 0.6014642051515916
User 38576 AUC after training: 0.6014560616301701
User 38576 does not improve AUC. Reverting changes.
Training on augumented user 126821 21/50 current_auc = 0.6014642051515916
User 126821 AUC after training: 0.6013094782445826
User 126821 does not improve AUC. Reverting changes.
Training on augumented user 87933 22/50 current_auc = 0.6014642051515916
User 87933 AUC after training: 0.601301334723161
User 87933 does not improve AUC. Reverting changes.
Training on augumented user 109747 23/50 current_auc = 0.6014642051515916
User 109747 AUC after training: 0.6013501958516901
User 109747 does not improve AUC. Reverting changes.
Training on augumented user 56357 24/50 current_auc = 0.6014642051515916
User 56357 AUC after training: 0.6012198995089456
User 56357 does not improve AUC. Reverting changes.
Training on augumented user 41236 25/50 current_auc = 0.6014642051515916
User 41236 AUC after training: 0.6015293533229639
User 41236 improves AUC. Keeping the model.
Training on augumented user 4371 26/50 current_auc = 0.6015293533229639
User 4371 AUC after training: 0.6013257652874255
User 4371 does not improve AUC. Reverting changes.
Training on augumented user 116252 27/50 current_auc = 0.6015293533229639
User 116252 AUC after training: 0.6015130662801208
User 116252 does not improve AUC. Reverting changes.
Training on augumented user 88334 28/50 current_auc = 0.6015293533229639
User 88334 AUC after training: 0.6016759367085515
User 88334 improves AUC. Keeping the model.
Training on augumented user 50823 29/50 current_auc = 0.6016759367085515
User 50823 AUC after training: 0.6018388071369822
User 50823 improves AUC. Keeping the model.
Training on augumented user 120390 30/50 current_auc = 0.6018388071369822
User 120390 AUC after training: 0.6022296961652158
User 120390 improves AUC. Keeping the model.
Training on augumented user 38718 31/50 current_auc = 0.6022296961652158
User 38718 AUC after training: 0.6024088536364895
User 38718 improves AUC. Keeping the model.
Training on augumented user 78771 32/50 current_auc = 0.6024088536364895
User 78771 AUC after training: 0.6022215526437942
User 78771 does not improve AUC. Reverting changes.
Training on augumented user 124422 33/50 current_auc = 0.6024088536364895
User 124422 AUC after training: 0.6021767632759758
User 124422 does not improve AUC. Reverting changes.
Training on augumented user 57933 34/50 current_auc = 0.6024088536364895
User 57933 AUC after training: 0.6019691034797267
User 57933 does not improve AUC. Reverting changes.
Training on augumented user 65411 35/50 current_auc = 0.6024088536364895
User 65411 AUC after training: 0.6022459832080589
User 65411 does not improve AUC. Reverting changes.
Training on augumented user 63841 36/50 current_auc = 0.6024088536364895
User 63841 AUC after training: 0.6020423951725206
User 63841 does not improve AUC. Reverting changes.
Training on augumented user 74083 37/50 current_auc = 0.6024088536364895
User 74083 AUC after training: 0.602140117429579
User 74083 does not improve AUC. Reverting changes.
Training on augumented user 125108 38/50 current_auc = 0.6024088536364895
User 125108 AUC after training: 0.6027345944933509
User 125108 improves AUC. Keeping the model.
Training on augumented user 73563 39/50 current_auc = 0.6027345944933509
User 73563 AUC after training: 0.6023152031401419
User 73563 does not improve AUC. Reverting changes.
Training on augumented user 24421 40/50 current_auc = 0.6027345944933509
User 24421 AUC after training: 0.6027753121004584
User 24421 improves AUC. Keeping the model.
Training on augumented user 101923 41/50 current_auc = 0.6027753121004584
User 101923 AUC after training: 0.6028160297075661
User 101923 improves AUC. Keeping the model.
Training on augumented user 90945 42/50 current_auc = 0.6028160297075661
User 90945 AUC after training: 0.6026124416720279
User 90945 does not improve AUC. Reverting changes.
Training on augumented user 52238 43/50 current_auc = 0.6028160297075661
User 52238 AUC after training: 0.6028323167504092
User 52238 improves AUC. Keeping the model.
Training on augumented user 59862 44/50 current_auc = 0.6028323167504092
User 59862 AUC after training: 0.6029137519646245
User 59862 improves AUC. Keeping the model.
Training on augumented user 20485 45/50 current_auc = 0.6029137519646245
User 20485 AUC after training: 0.6026857333648217
User 20485 does not improve AUC. Reverting changes.
Training on augumented user 81277 46/50 current_auc = 0.6029137519646245
User 81277 AUC after training: 0.6026531592791355
User 81277 does not improve AUC. Reverting changes.
Training on augumented user 119906 47/50 current_auc = 0.6029137519646245
User 119906 AUC after training: 0.6026694463219785
User 119906 does not improve AUC. Reverting changes.
Training on augumented user 36807 48/50 current_auc = 0.6029137519646245
User 36807 AUC after training: 0.6023884948329357
User 36807 does not improve AUC. Reverting changes.
Training on augumented user 26939 49/50 current_auc = 0.6029137519646245
User 26939 AUC after training: 0.6025717240649202
User 26939 does not improve AUC. Reverting changes.
[2024-12-02 17:58:37.211619] start test user 42372 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:37.693678] start test user 42372 38/568 recall augumented users by random, augumented_users = [40853, 7116, 49699, 63796, 28426, 42086, 88094, 110105, 58421, 138314, 11292, 98870, 71194, 115889, 86172, 91060, 102137, 101500, 68321, 41585, 73321, 31076, 63564, 25869, 93794, 31307, 12995, 118783, 52062, 53742, 134886, 2546, 123354, 63975, 76890, 102130, 97262, 35893, 16479, 117286, 137946, 1653, 21918, 1945, 26874, 126214, 57511, 21044, 49969, 104522]
[2024-12-02 17:58:37.724155] user = 42372 Cloud 38/568
[2024-12-02 17:58:37.744842] user = 42372 Local 38/568
[2024-12-02 17:58:37.857705] user = 42372 Local+ 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:40.536056] user = 42372 MPDA- 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6706349206349206
Training on augumented user 40853 0/50 current_auc = 0.6706349206349206
User 40853 AUC after training: 0.6706349206349206
User 40853 does not improve AUC. Reverting changes.
Training on augumented user 7116 1/50 current_auc = 0.6706349206349206
User 7116 AUC after training: 0.6706349206349206
User 7116 does not improve AUC. Reverting changes.
Training on augumented user 49699 2/50 current_auc = 0.6706349206349206
User 49699 AUC after training: 0.6706349206349206
User 49699 does not improve AUC. Reverting changes.
Training on augumented user 63796 3/50 current_auc = 0.6706349206349206
User 63796 AUC after training: 0.6706349206349206
User 63796 does not improve AUC. Reverting changes.
Training on augumented user 28426 4/50 current_auc = 0.6706349206349206
User 28426 AUC after training: 0.6698412698412699
User 28426 does not improve AUC. Reverting changes.
Training on augumented user 42086 5/50 current_auc = 0.6706349206349206
User 42086 AUC after training: 0.6706349206349206
User 42086 does not improve AUC. Reverting changes.
Training on augumented user 88094 6/50 current_auc = 0.6706349206349206
User 88094 AUC after training: 0.6706349206349206
User 88094 does not improve AUC. Reverting changes.
Training on augumented user 110105 7/50 current_auc = 0.6706349206349206
User 110105 AUC after training: 0.6706349206349206
User 110105 does not improve AUC. Reverting changes.
Training on augumented user 58421 8/50 current_auc = 0.6706349206349206
User 58421 AUC after training: 0.6698412698412699
User 58421 does not improve AUC. Reverting changes.
Training on augumented user 138314 9/50 current_auc = 0.6706349206349206
User 138314 AUC after training: 0.6706349206349206
User 138314 does not improve AUC. Reverting changes.
Training on augumented user 11292 10/50 current_auc = 0.6706349206349206
User 11292 AUC after training: 0.6706349206349206
User 11292 does not improve AUC. Reverting changes.
Training on augumented user 98870 11/50 current_auc = 0.6706349206349206
User 98870 AUC after training: 0.6706349206349206
User 98870 does not improve AUC. Reverting changes.
Training on augumented user 71194 12/50 current_auc = 0.6706349206349206
User 71194 AUC after training: 0.6706349206349206
User 71194 does not improve AUC. Reverting changes.
Training on augumented user 115889 13/50 current_auc = 0.6706349206349206
User 115889 AUC after training: 0.6706349206349206
User 115889 does not improve AUC. Reverting changes.
Training on augumented user 86172 14/50 current_auc = 0.6706349206349206
User 86172 AUC after training: 0.6698412698412699
User 86172 does not improve AUC. Reverting changes.
Training on augumented user 91060 15/50 current_auc = 0.6706349206349206
User 91060 AUC after training: 0.6706349206349206
User 91060 does not improve AUC. Reverting changes.
Training on augumented user 102137 16/50 current_auc = 0.6706349206349206
User 102137 AUC after training: 0.6706349206349206
User 102137 does not improve AUC. Reverting changes.
Training on augumented user 101500 17/50 current_auc = 0.6706349206349206
User 101500 AUC after training: 0.6706349206349206
User 101500 does not improve AUC. Reverting changes.
Training on augumented user 68321 18/50 current_auc = 0.6706349206349206
User 68321 AUC after training: 0.6706349206349206
User 68321 does not improve AUC. Reverting changes.
Training on augumented user 41585 19/50 current_auc = 0.6706349206349206
User 41585 AUC after training: 0.6706349206349206
User 41585 does not improve AUC. Reverting changes.
Training on augumented user 73321 20/50 current_auc = 0.6706349206349206
User 73321 AUC after training: 0.6706349206349206
User 73321 does not improve AUC. Reverting changes.
Training on augumented user 31076 21/50 current_auc = 0.6706349206349206
User 31076 AUC after training: 0.6722222222222223
User 31076 improves AUC. Keeping the model.
Training on augumented user 63564 22/50 current_auc = 0.6722222222222223
User 63564 AUC after training: 0.6714285714285714
User 63564 does not improve AUC. Reverting changes.
Training on augumented user 25869 23/50 current_auc = 0.6722222222222223
User 25869 AUC after training: 0.6714285714285714
User 25869 does not improve AUC. Reverting changes.
Training on augumented user 93794 24/50 current_auc = 0.6722222222222223
User 93794 AUC after training: 0.6722222222222223
User 93794 does not improve AUC. Reverting changes.
Training on augumented user 31307 25/50 current_auc = 0.6722222222222223
User 31307 AUC after training: 0.6730158730158731
User 31307 improves AUC. Keeping the model.
Training on augumented user 12995 26/50 current_auc = 0.6730158730158731
User 12995 AUC after training: 0.6730158730158731
User 12995 does not improve AUC. Reverting changes.
Training on augumented user 118783 27/50 current_auc = 0.6730158730158731
User 118783 AUC after training: 0.6722222222222223
User 118783 does not improve AUC. Reverting changes.
Training on augumented user 52062 28/50 current_auc = 0.6730158730158731
User 52062 AUC after training: 0.6722222222222223
User 52062 does not improve AUC. Reverting changes.
Training on augumented user 53742 29/50 current_auc = 0.6730158730158731
User 53742 AUC after training: 0.6722222222222223
User 53742 does not improve AUC. Reverting changes.
Training on augumented user 134886 30/50 current_auc = 0.6730158730158731
User 134886 AUC after training: 0.6722222222222223
User 134886 does not improve AUC. Reverting changes.
Training on augumented user 2546 31/50 current_auc = 0.6730158730158731
User 2546 AUC after training: 0.6730158730158731
User 2546 does not improve AUC. Reverting changes.
Training on augumented user 123354 32/50 current_auc = 0.6730158730158731
User 123354 AUC after training: 0.6730158730158731
User 123354 does not improve AUC. Reverting changes.
Training on augumented user 63975 33/50 current_auc = 0.6730158730158731
User 63975 AUC after training: 0.6730158730158731
User 63975 does not improve AUC. Reverting changes.
Training on augumented user 76890 34/50 current_auc = 0.6730158730158731
User 76890 AUC after training: 0.6714285714285714
User 76890 does not improve AUC. Reverting changes.
Training on augumented user 102130 35/50 current_auc = 0.6730158730158731
User 102130 AUC after training: 0.6730158730158731
User 102130 does not improve AUC. Reverting changes.
Training on augumented user 97262 36/50 current_auc = 0.6730158730158731
User 97262 AUC after training: 0.6730158730158731
User 97262 does not improve AUC. Reverting changes.
Training on augumented user 35893 37/50 current_auc = 0.6730158730158731
User 35893 AUC after training: 0.6730158730158731
User 35893 does not improve AUC. Reverting changes.
Training on augumented user 16479 38/50 current_auc = 0.6730158730158731
User 16479 AUC after training: 0.6730158730158731
User 16479 does not improve AUC. Reverting changes.
Training on augumented user 117286 39/50 current_auc = 0.6730158730158731
User 117286 AUC after training: 0.6730158730158731
User 117286 does not improve AUC. Reverting changes.
Training on augumented user 137946 40/50 current_auc = 0.6730158730158731
User 137946 AUC after training: 0.6738095238095239
User 137946 improves AUC. Keeping the model.
Training on augumented user 1653 41/50 current_auc = 0.6738095238095239
User 1653 AUC after training: 0.6722222222222223
User 1653 does not improve AUC. Reverting changes.
Training on augumented user 21918 42/50 current_auc = 0.6738095238095239
User 21918 AUC after training: 0.6730158730158731
User 21918 does not improve AUC. Reverting changes.
Training on augumented user 1945 43/50 current_auc = 0.6738095238095239
User 1945 AUC after training: 0.6738095238095239
User 1945 does not improve AUC. Reverting changes.
Training on augumented user 26874 44/50 current_auc = 0.6738095238095239
User 26874 AUC after training: 0.6722222222222223
User 26874 does not improve AUC. Reverting changes.
Training on augumented user 126214 45/50 current_auc = 0.6738095238095239
User 126214 AUC after training: 0.6730158730158731
User 126214 does not improve AUC. Reverting changes.
Training on augumented user 57511 46/50 current_auc = 0.6738095238095239
User 57511 AUC after training: 0.6738095238095239
User 57511 does not improve AUC. Reverting changes.
Training on augumented user 21044 47/50 current_auc = 0.6738095238095239
User 21044 AUC after training: 0.6722222222222223
User 21044 does not improve AUC. Reverting changes.
Training on augumented user 49969 48/50 current_auc = 0.6738095238095239
User 49969 AUC after training: 0.6738095238095239
User 49969 does not improve AUC. Reverting changes.
Training on augumented user 104522 49/50 current_auc = 0.6738095238095239
User 104522 AUC after training: 0.6730158730158731
User 104522 does not improve AUC. Reverting changes.
[2024-12-02 17:59:08.943232] start test user 42390 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:09.369382] start test user 42390 39/568 recall augumented users by random, augumented_users = [83088, 109257, 103956, 66603, 30142, 18557, 70148, 18863, 8966, 49143, 68877, 39035, 137469, 9093, 116269, 100198, 50414, 2602, 93251, 28853, 40940, 114893, 21539, 104065, 5021, 77280, 8094, 11908, 58927, 66202, 36361, 12769, 10167, 37969, 113202, 107263, 84151, 35483, 47428, 99782, 87909, 42220, 107264, 13792, 101145, 13236, 93517, 20760, 63321, 35958]
[2024-12-02 17:59:09.385508] user = 42390 Cloud 39/568
[2024-12-02 17:59:09.418031] user = 42390 Local 39/568
[2024-12-02 17:59:09.486688] user = 42390 Local+ 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:12.331472] user = 42390 MPDA- 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7894503546099292
Training on augumented user 83088 0/50 current_auc = 0.7894503546099292
User 83088 AUC after training: 0.7896403242147924
User 83088 improves AUC. Keeping the model.
Training on augumented user 109257 1/50 current_auc = 0.7896403242147924
User 109257 AUC after training: 0.7897669706180345
User 109257 improves AUC. Keeping the model.
Training on augumented user 103956 2/50 current_auc = 0.7897669706180345
User 103956 AUC after training: 0.7897036474164134
User 103956 does not improve AUC. Reverting changes.
Training on augumented user 66603 3/50 current_auc = 0.7897669706180345
User 66603 AUC after training: 0.7896719858156029
User 66603 does not improve AUC. Reverting changes.
Training on augumented user 30142 4/50 current_auc = 0.7897669706180345
User 30142 AUC after training: 0.7897036474164134
User 30142 does not improve AUC. Reverting changes.
Training on augumented user 18557 5/50 current_auc = 0.7897669706180345
User 18557 AUC after training: 0.7898619554204661
User 18557 improves AUC. Keeping the model.
Training on augumented user 70148 6/50 current_auc = 0.7898619554204661
User 70148 AUC after training: 0.789861955420466
User 70148 does not improve AUC. Reverting changes.
Training on augumented user 18863 7/50 current_auc = 0.7898619554204661
User 18863 AUC after training: 0.7897036474164133
User 18863 does not improve AUC. Reverting changes.
Training on augumented user 8966 8/50 current_auc = 0.7898619554204661
User 8966 AUC after training: 0.7901152482269503
User 8966 improves AUC. Keeping the model.
Training on augumented user 49143 9/50 current_auc = 0.7901152482269503
User 49143 AUC after training: 0.7900519250253293
User 49143 does not improve AUC. Reverting changes.
Training on augumented user 68877 10/50 current_auc = 0.7901152482269503
User 68877 AUC after training: 0.7900519250253293
User 68877 does not improve AUC. Reverting changes.
Training on augumented user 39035 11/50 current_auc = 0.7901152482269503
User 39035 AUC after training: 0.7899569402228976
User 39035 does not improve AUC. Reverting changes.
Training on augumented user 137469 12/50 current_auc = 0.7901152482269503
User 137469 AUC after training: 0.7901469098277609
User 137469 improves AUC. Keeping the model.
Training on augumented user 9093 13/50 current_auc = 0.7901469098277609
User 9093 AUC after training: 0.7900835866261399
User 9093 does not improve AUC. Reverting changes.
Training on augumented user 116269 14/50 current_auc = 0.7901469098277609
User 116269 AUC after training: 0.790099417426545
User 116269 does not improve AUC. Reverting changes.
Training on augumented user 100198 15/50 current_auc = 0.7901469098277609
User 100198 AUC after training: 0.7901152482269503
User 100198 does not improve AUC. Reverting changes.
Training on augumented user 50414 16/50 current_auc = 0.7901469098277609
User 50414 AUC after training: 0.7901469098277608
User 50414 does not improve AUC. Reverting changes.
Training on augumented user 2602 17/50 current_auc = 0.7901469098277609
User 2602 AUC after training: 0.790273556231003
User 2602 improves AUC. Keeping the model.
Training on augumented user 93251 18/50 current_auc = 0.790273556231003
User 93251 AUC after training: 0.790210233029382
User 93251 does not improve AUC. Reverting changes.
Training on augumented user 28853 19/50 current_auc = 0.790273556231003
User 28853 AUC after training: 0.7903052178318136
User 28853 improves AUC. Keeping the model.
Training on augumented user 40940 20/50 current_auc = 0.7903052178318136
User 40940 AUC after training: 0.7902418946301925
User 40940 does not improve AUC. Reverting changes.
Training on augumented user 114893 21/50 current_auc = 0.7903052178318136
User 114893 AUC after training: 0.7901785714285714
User 114893 does not improve AUC. Reverting changes.
Training on augumented user 21539 22/50 current_auc = 0.7903052178318136
User 21539 AUC after training: 0.7902418946301925
User 21539 does not improve AUC. Reverting changes.
Training on augumented user 104065 23/50 current_auc = 0.7903052178318136
User 104065 AUC after training: 0.790210233029382
User 104065 does not improve AUC. Reverting changes.
Training on augumented user 5021 24/50 current_auc = 0.7903052178318136
User 5021 AUC after training: 0.7902102330293819
User 5021 does not improve AUC. Reverting changes.
Training on augumented user 77280 25/50 current_auc = 0.7903052178318136
User 77280 AUC after training: 0.7903368794326241
User 77280 improves AUC. Keeping the model.
Training on augumented user 8094 26/50 current_auc = 0.7903368794326241
User 8094 AUC after training: 0.7904002026342452
User 8094 improves AUC. Keeping the model.
Training on augumented user 11908 27/50 current_auc = 0.7904002026342452
User 11908 AUC after training: 0.7905268490374874
User 11908 improves AUC. Keeping the model.
Training on augumented user 58927 28/50 current_auc = 0.7905268490374874
User 58927 AUC after training: 0.7908434650455927
User 58927 improves AUC. Keeping the model.
Training on augumented user 66202 29/50 current_auc = 0.7908434650455927
User 66202 AUC after training: 0.7908751266464032
User 66202 improves AUC. Keeping the model.
Training on augumented user 36361 30/50 current_auc = 0.7908751266464032
User 36361 AUC after training: 0.791096757852077
User 36361 improves AUC. Keeping the model.
Training on augumented user 12769 31/50 current_auc = 0.791096757852077
User 12769 AUC after training: 0.7911284194528876
User 12769 improves AUC. Keeping the model.
Training on augumented user 10167 32/50 current_auc = 0.7911284194528876
User 10167 AUC after training: 0.7908434650455927
User 10167 does not improve AUC. Reverting changes.
Training on augumented user 37969 33/50 current_auc = 0.7911284194528876
User 37969 AUC after training: 0.7911917426545085
User 37969 improves AUC. Keeping the model.
Training on augumented user 113202 34/50 current_auc = 0.7911917426545085
User 113202 AUC after training: 0.7911917426545085
User 113202 does not improve AUC. Reverting changes.
Training on augumented user 107263 35/50 current_auc = 0.7911917426545085
User 107263 AUC after training: 0.7911917426545085
User 107263 does not improve AUC. Reverting changes.
Training on augumented user 84151 36/50 current_auc = 0.7911917426545085
User 84151 AUC after training: 0.7905110182370819
User 84151 does not improve AUC. Reverting changes.
Training on augumented user 35483 37/50 current_auc = 0.7911917426545085
User 35483 AUC after training: 0.7910650962512665
User 35483 does not improve AUC. Reverting changes.
Training on augumented user 47428 38/50 current_auc = 0.7911917426545085
User 47428 AUC after training: 0.7910017730496454
User 47428 does not improve AUC. Reverting changes.
Training on augumented user 99782 39/50 current_auc = 0.7911917426545085
User 99782 AUC after training: 0.7912867274569402
User 99782 improves AUC. Keeping the model.
Training on augumented user 87909 40/50 current_auc = 0.7912867274569402
User 87909 AUC after training: 0.7911600810536981
User 87909 does not improve AUC. Reverting changes.
Training on augumented user 42220 41/50 current_auc = 0.7912867274569402
User 42220 AUC after training: 0.7911284194528876
User 42220 does not improve AUC. Reverting changes.
Training on augumented user 107264 42/50 current_auc = 0.7912867274569402
User 107264 AUC after training: 0.791033434650456
User 107264 does not improve AUC. Reverting changes.
Training on augumented user 13792 43/50 current_auc = 0.7912867274569402
User 13792 AUC after training: 0.7912867274569403
User 13792 improves AUC. Keeping the model.
Training on augumented user 101145 44/50 current_auc = 0.7912867274569403
User 101145 AUC after training: 0.7912234042553192
User 101145 does not improve AUC. Reverting changes.
Training on augumented user 13236 45/50 current_auc = 0.7912867274569403
User 13236 AUC after training: 0.7913817122593718
User 13236 improves AUC. Keeping the model.
Training on augumented user 93517 46/50 current_auc = 0.7913817122593718
User 93517 AUC after training: 0.7912867274569402
User 93517 does not improve AUC. Reverting changes.
Training on augumented user 20760 47/50 current_auc = 0.7913817122593718
User 20760 AUC after training: 0.7910809270516718
User 20760 does not improve AUC. Reverting changes.
Training on augumented user 63321 48/50 current_auc = 0.7913817122593718
User 63321 AUC after training: 0.7912234042553192
User 63321 does not improve AUC. Reverting changes.
Training on augumented user 35958 49/50 current_auc = 0.7913817122593718
User 35958 AUC after training: 0.7912550658561297
User 35958 does not improve AUC. Reverting changes.
[2024-12-02 17:59:44.028053] start test user 42399 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:44.487565] start test user 42399 40/568 recall augumented users by random, augumented_users = [73319, 74615, 126091, 40968, 45530, 30779, 83593, 51581, 90583, 85665, 97797, 134902, 109207, 75489, 60696, 22292, 104320, 110981, 116649, 80287, 78554, 85988, 98262, 107663, 20383, 107750, 7138, 69989, 11981, 118202, 51580, 70851, 33567, 30743, 103364, 136602, 34784, 75081, 57505, 25410, 97446, 29900, 85929, 41523, 120566, 56465, 52929, 116091, 79756, 1640]
[2024-12-02 17:59:44.517310] user = 42399 Cloud 40/568
[2024-12-02 17:59:44.536364] user = 42399 Local 40/568
[2024-12-02 17:59:44.718290] user = 42399 Local+ 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:47.265741] user = 42399 MPDA- 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4
Training on augumented user 73319 0/50 current_auc = 0.4
User 73319 AUC after training: 0.4
User 73319 does not improve AUC. Reverting changes.
Training on augumented user 74615 1/50 current_auc = 0.4
User 74615 AUC after training: 0.4
User 74615 does not improve AUC. Reverting changes.
Training on augumented user 126091 2/50 current_auc = 0.4
User 126091 AUC after training: 0.4
User 126091 does not improve AUC. Reverting changes.
Training on augumented user 40968 3/50 current_auc = 0.4
User 40968 AUC after training: 0.4
User 40968 does not improve AUC. Reverting changes.
Training on augumented user 45530 4/50 current_auc = 0.4
User 45530 AUC after training: 0.4
User 45530 does not improve AUC. Reverting changes.
Training on augumented user 30779 5/50 current_auc = 0.4
User 30779 AUC after training: 0.4
User 30779 does not improve AUC. Reverting changes.
Training on augumented user 83593 6/50 current_auc = 0.4
User 83593 AUC after training: 0.4
User 83593 does not improve AUC. Reverting changes.
Training on augumented user 51581 7/50 current_auc = 0.4
User 51581 AUC after training: 0.4
User 51581 does not improve AUC. Reverting changes.
Training on augumented user 90583 8/50 current_auc = 0.4
User 90583 AUC after training: 0.425
User 90583 improves AUC. Keeping the model.
Training on augumented user 85665 9/50 current_auc = 0.425
User 85665 AUC after training: 0.425
User 85665 does not improve AUC. Reverting changes.
Training on augumented user 97797 10/50 current_auc = 0.425
User 97797 AUC after training: 0.4
User 97797 does not improve AUC. Reverting changes.
Training on augumented user 134902 11/50 current_auc = 0.425
User 134902 AUC after training: 0.4
User 134902 does not improve AUC. Reverting changes.
Training on augumented user 109207 12/50 current_auc = 0.425
User 109207 AUC after training: 0.4
User 109207 does not improve AUC. Reverting changes.
Training on augumented user 75489 13/50 current_auc = 0.425
User 75489 AUC after training: 0.4
User 75489 does not improve AUC. Reverting changes.
Training on augumented user 60696 14/50 current_auc = 0.425
User 60696 AUC after training: 0.425
User 60696 does not improve AUC. Reverting changes.
Training on augumented user 22292 15/50 current_auc = 0.425
User 22292 AUC after training: 0.4
User 22292 does not improve AUC. Reverting changes.
Training on augumented user 104320 16/50 current_auc = 0.425
User 104320 AUC after training: 0.425
User 104320 does not improve AUC. Reverting changes.
Training on augumented user 110981 17/50 current_auc = 0.425
User 110981 AUC after training: 0.425
User 110981 does not improve AUC. Reverting changes.
Training on augumented user 116649 18/50 current_auc = 0.425
User 116649 AUC after training: 0.4
User 116649 does not improve AUC. Reverting changes.
Training on augumented user 80287 19/50 current_auc = 0.425
User 80287 AUC after training: 0.4
User 80287 does not improve AUC. Reverting changes.
Training on augumented user 78554 20/50 current_auc = 0.425
User 78554 AUC after training: 0.4
User 78554 does not improve AUC. Reverting changes.
Training on augumented user 85988 21/50 current_auc = 0.425
User 85988 AUC after training: 0.425
User 85988 does not improve AUC. Reverting changes.
Training on augumented user 98262 22/50 current_auc = 0.425
User 98262 AUC after training: 0.4
User 98262 does not improve AUC. Reverting changes.
Training on augumented user 107663 23/50 current_auc = 0.425
User 107663 AUC after training: 0.425
User 107663 does not improve AUC. Reverting changes.
Training on augumented user 20383 24/50 current_auc = 0.425
User 20383 AUC after training: 0.425
User 20383 does not improve AUC. Reverting changes.
Training on augumented user 107750 25/50 current_auc = 0.425
User 107750 AUC after training: 0.4
User 107750 does not improve AUC. Reverting changes.
Training on augumented user 7138 26/50 current_auc = 0.425
User 7138 AUC after training: 0.4
User 7138 does not improve AUC. Reverting changes.
Training on augumented user 69989 27/50 current_auc = 0.425
User 69989 AUC after training: 0.4
User 69989 does not improve AUC. Reverting changes.
Training on augumented user 11981 28/50 current_auc = 0.425
User 11981 AUC after training: 0.4
User 11981 does not improve AUC. Reverting changes.
Training on augumented user 118202 29/50 current_auc = 0.425
User 118202 AUC after training: 0.425
User 118202 does not improve AUC. Reverting changes.
Training on augumented user 51580 30/50 current_auc = 0.425
User 51580 AUC after training: 0.425
User 51580 does not improve AUC. Reverting changes.
Training on augumented user 70851 31/50 current_auc = 0.425
User 70851 AUC after training: 0.425
User 70851 does not improve AUC. Reverting changes.
Training on augumented user 33567 32/50 current_auc = 0.425
User 33567 AUC after training: 0.425
User 33567 does not improve AUC. Reverting changes.
Training on augumented user 30743 33/50 current_auc = 0.425
User 30743 AUC after training: 0.4
User 30743 does not improve AUC. Reverting changes.
Training on augumented user 103364 34/50 current_auc = 0.425
User 103364 AUC after training: 0.425
User 103364 does not improve AUC. Reverting changes.
Training on augumented user 136602 35/50 current_auc = 0.425
User 136602 AUC after training: 0.425
User 136602 does not improve AUC. Reverting changes.
Training on augumented user 34784 36/50 current_auc = 0.425
User 34784 AUC after training: 0.4
User 34784 does not improve AUC. Reverting changes.
Training on augumented user 75081 37/50 current_auc = 0.425
User 75081 AUC after training: 0.425
User 75081 does not improve AUC. Reverting changes.
Training on augumented user 57505 38/50 current_auc = 0.425
User 57505 AUC after training: 0.425
User 57505 does not improve AUC. Reverting changes.
Training on augumented user 25410 39/50 current_auc = 0.425
User 25410 AUC after training: 0.425
User 25410 does not improve AUC. Reverting changes.
Training on augumented user 97446 40/50 current_auc = 0.425
User 97446 AUC after training: 0.425
User 97446 does not improve AUC. Reverting changes.
Training on augumented user 29900 41/50 current_auc = 0.425
User 29900 AUC after training: 0.4
User 29900 does not improve AUC. Reverting changes.
Training on augumented user 85929 42/50 current_auc = 0.425
User 85929 AUC after training: 0.4
User 85929 does not improve AUC. Reverting changes.
Training on augumented user 41523 43/50 current_auc = 0.425
User 41523 AUC after training: 0.425
User 41523 does not improve AUC. Reverting changes.
Training on augumented user 120566 44/50 current_auc = 0.425
User 120566 AUC after training: 0.4
User 120566 does not improve AUC. Reverting changes.
Training on augumented user 56465 45/50 current_auc = 0.425
User 56465 AUC after training: 0.425
User 56465 does not improve AUC. Reverting changes.
Training on augumented user 52929 46/50 current_auc = 0.425
User 52929 AUC after training: 0.425
User 52929 does not improve AUC. Reverting changes.
Training on augumented user 116091 47/50 current_auc = 0.425
User 116091 AUC after training: 0.425
User 116091 does not improve AUC. Reverting changes.
Training on augumented user 79756 48/50 current_auc = 0.425
User 79756 AUC after training: 0.425
User 79756 does not improve AUC. Reverting changes.
Training on augumented user 1640 49/50 current_auc = 0.425
User 1640 AUC after training: 0.425
User 1640 does not improve AUC. Reverting changes.
[2024-12-02 18:00:15.458988] start test user 42424 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:16.127060] start test user 42424 41/568 recall augumented users by random, augumented_users = [86905, 102928, 42209, 18198, 32083, 134025, 57673, 62878, 93061, 51197, 107165, 73932, 125183, 82440, 74561, 108603, 108413, 42871, 119102, 47956, 106392, 58314, 119936, 16890, 136732, 112278, 74605, 60087, 36028, 25223, 124469, 101346, 12308, 20760, 98728, 105042, 94369, 28254, 35193, 102236, 103145, 129146, 47563, 50329, 130963, 107457, 109805, 69695, 105999, 799]
[2024-12-02 18:00:16.157462] user = 42424 Cloud 41/568
[2024-12-02 18:00:16.200477] user = 42424 Local 41/568
[2024-12-02 18:00:16.402365] user = 42424 Local+ 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:19.022014] user = 42424 MPDA- 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7248803827751196
Training on augumented user 86905 0/50 current_auc = 0.7248803827751196
User 86905 AUC after training: 0.7177033492822966
User 86905 does not improve AUC. Reverting changes.
Training on augumented user 102928 1/50 current_auc = 0.7248803827751196
User 102928 AUC after training: 0.7248803827751196
User 102928 does not improve AUC. Reverting changes.
Training on augumented user 42209 2/50 current_auc = 0.7248803827751196
User 42209 AUC after training: 0.7248803827751196
User 42209 does not improve AUC. Reverting changes.
Training on augumented user 18198 3/50 current_auc = 0.7248803827751196
User 18198 AUC after training: 0.7200956937799043
User 18198 does not improve AUC. Reverting changes.
Training on augumented user 32083 4/50 current_auc = 0.7248803827751196
User 32083 AUC after training: 0.7248803827751196
User 32083 does not improve AUC. Reverting changes.
Training on augumented user 134025 5/50 current_auc = 0.7248803827751196
User 134025 AUC after training: 0.7248803827751196
User 134025 does not improve AUC. Reverting changes.
Training on augumented user 57673 6/50 current_auc = 0.7248803827751196
User 57673 AUC after training: 0.7272727272727273
User 57673 improves AUC. Keeping the model.
Training on augumented user 62878 7/50 current_auc = 0.7272727272727273
User 62878 AUC after training: 0.7248803827751196
User 62878 does not improve AUC. Reverting changes.
Training on augumented user 93061 8/50 current_auc = 0.7272727272727273
User 93061 AUC after training: 0.7248803827751196
User 93061 does not improve AUC. Reverting changes.
Training on augumented user 51197 9/50 current_auc = 0.7272727272727273
User 51197 AUC after training: 0.7272727272727273
User 51197 does not improve AUC. Reverting changes.
Training on augumented user 107165 10/50 current_auc = 0.7272727272727273
User 107165 AUC after training: 0.7248803827751196
User 107165 does not improve AUC. Reverting changes.
Training on augumented user 73932 11/50 current_auc = 0.7272727272727273
User 73932 AUC after training: 0.7248803827751196
User 73932 does not improve AUC. Reverting changes.
Training on augumented user 125183 12/50 current_auc = 0.7272727272727273
User 125183 AUC after training: 0.7272727272727273
User 125183 does not improve AUC. Reverting changes.
Training on augumented user 82440 13/50 current_auc = 0.7272727272727273
User 82440 AUC after training: 0.7248803827751196
User 82440 does not improve AUC. Reverting changes.
Training on augumented user 74561 14/50 current_auc = 0.7272727272727273
User 74561 AUC after training: 0.7392344497607655
User 74561 improves AUC. Keeping the model.
Training on augumented user 108603 15/50 current_auc = 0.7392344497607655
User 108603 AUC after training: 0.7416267942583732
User 108603 improves AUC. Keeping the model.
Training on augumented user 108413 16/50 current_auc = 0.7416267942583732
User 108413 AUC after training: 0.7416267942583732
User 108413 does not improve AUC. Reverting changes.
Training on augumented user 42871 17/50 current_auc = 0.7416267942583732
User 42871 AUC after training: 0.7392344497607656
User 42871 does not improve AUC. Reverting changes.
Training on augumented user 119102 18/50 current_auc = 0.7416267942583732
User 119102 AUC after training: 0.7416267942583732
User 119102 does not improve AUC. Reverting changes.
Training on augumented user 47956 19/50 current_auc = 0.7416267942583732
User 47956 AUC after training: 0.7392344497607655
User 47956 does not improve AUC. Reverting changes.
Training on augumented user 106392 20/50 current_auc = 0.7416267942583732
User 106392 AUC after training: 0.7488038277511961
User 106392 improves AUC. Keeping the model.
Training on augumented user 58314 21/50 current_auc = 0.7488038277511961
User 58314 AUC after training: 0.7440191387559809
User 58314 does not improve AUC. Reverting changes.
Training on augumented user 119936 22/50 current_auc = 0.7488038277511961
User 119936 AUC after training: 0.7464114832535884
User 119936 does not improve AUC. Reverting changes.
Training on augumented user 16890 23/50 current_auc = 0.7488038277511961
User 16890 AUC after training: 0.7488038277511961
User 16890 does not improve AUC. Reverting changes.
Training on augumented user 136732 24/50 current_auc = 0.7488038277511961
User 136732 AUC after training: 0.7488038277511961
User 136732 does not improve AUC. Reverting changes.
Training on augumented user 112278 25/50 current_auc = 0.7488038277511961
User 112278 AUC after training: 0.7440191387559809
User 112278 does not improve AUC. Reverting changes.
Training on augumented user 74605 26/50 current_auc = 0.7488038277511961
User 74605 AUC after training: 0.7488038277511961
User 74605 does not improve AUC. Reverting changes.
Training on augumented user 60087 27/50 current_auc = 0.7488038277511961
User 60087 AUC after training: 0.7464114832535885
User 60087 does not improve AUC. Reverting changes.
Training on augumented user 36028 28/50 current_auc = 0.7488038277511961
User 36028 AUC after training: 0.7488038277511961
User 36028 does not improve AUC. Reverting changes.
Training on augumented user 25223 29/50 current_auc = 0.7488038277511961
User 25223 AUC after training: 0.7392344497607655
User 25223 does not improve AUC. Reverting changes.
Training on augumented user 124469 30/50 current_auc = 0.7488038277511961
User 124469 AUC after training: 0.7464114832535885
User 124469 does not improve AUC. Reverting changes.
Training on augumented user 101346 31/50 current_auc = 0.7488038277511961
User 101346 AUC after training: 0.7488038277511961
User 101346 does not improve AUC. Reverting changes.
Training on augumented user 12308 32/50 current_auc = 0.7488038277511961
User 12308 AUC after training: 0.7488038277511961
User 12308 does not improve AUC. Reverting changes.
Training on augumented user 20760 33/50 current_auc = 0.7488038277511961
User 20760 AUC after training: 0.7416267942583732
User 20760 does not improve AUC. Reverting changes.
Training on augumented user 98728 34/50 current_auc = 0.7488038277511961
User 98728 AUC after training: 0.7488038277511961
User 98728 does not improve AUC. Reverting changes.
Training on augumented user 105042 35/50 current_auc = 0.7488038277511961
User 105042 AUC after training: 0.7464114832535884
User 105042 does not improve AUC. Reverting changes.
Training on augumented user 94369 36/50 current_auc = 0.7488038277511961
User 94369 AUC after training: 0.7488038277511961
User 94369 does not improve AUC. Reverting changes.
Training on augumented user 28254 37/50 current_auc = 0.7488038277511961
User 28254 AUC after training: 0.7511961722488039
User 28254 improves AUC. Keeping the model.
Training on augumented user 35193 38/50 current_auc = 0.7511961722488039
User 35193 AUC after training: 0.7511961722488039
User 35193 does not improve AUC. Reverting changes.
Training on augumented user 102236 39/50 current_auc = 0.7511961722488039
User 102236 AUC after training: 0.7392344497607656
User 102236 does not improve AUC. Reverting changes.
Training on augumented user 103145 40/50 current_auc = 0.7511961722488039
User 103145 AUC after training: 0.7511961722488039
User 103145 does not improve AUC. Reverting changes.
Training on augumented user 129146 41/50 current_auc = 0.7511961722488039
User 129146 AUC after training: 0.7464114832535884
User 129146 does not improve AUC. Reverting changes.
Training on augumented user 47563 42/50 current_auc = 0.7511961722488039
User 47563 AUC after training: 0.7511961722488039
User 47563 does not improve AUC. Reverting changes.
Training on augumented user 50329 43/50 current_auc = 0.7511961722488039
User 50329 AUC after training: 0.7488038277511961
User 50329 does not improve AUC. Reverting changes.
Training on augumented user 130963 44/50 current_auc = 0.7511961722488039
User 130963 AUC after training: 0.7488038277511961
User 130963 does not improve AUC. Reverting changes.
Training on augumented user 107457 45/50 current_auc = 0.7511961722488039
User 107457 AUC after training: 0.7416267942583732
User 107457 does not improve AUC. Reverting changes.
Training on augumented user 109805 46/50 current_auc = 0.7511961722488039
User 109805 AUC after training: 0.7488038277511961
User 109805 does not improve AUC. Reverting changes.
Training on augumented user 69695 47/50 current_auc = 0.7511961722488039
User 69695 AUC after training: 0.7511961722488039
User 69695 does not improve AUC. Reverting changes.
Training on augumented user 105999 48/50 current_auc = 0.7511961722488039
User 105999 AUC after training: 0.7416267942583732
User 105999 does not improve AUC. Reverting changes.
Training on augumented user 799 49/50 current_auc = 0.7511961722488039
User 799 AUC after training: 0.7511961722488039
User 799 does not improve AUC. Reverting changes.
[2024-12-02 18:00:50.408388] start test user 42429 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:50.842555] start test user 42429 42/568 recall augumented users by random, augumented_users = [60921, 101611, 547, 53575, 134817, 100105, 79687, 64105, 26022, 127502, 72016, 92639, 133802, 135044, 50896, 124598, 30085, 21981, 25432, 12330, 133790, 119520, 83209, 121795, 107770, 20925, 35534, 68755, 92398, 124043, 116028, 46146, 21255, 4920, 65642, 129854, 58280, 13968, 109919, 56641, 40854, 42742, 104653, 52427, 28026, 7738, 24338, 116141, 12601, 128939]
[2024-12-02 18:00:50.859863] user = 42429 Cloud 42/568
[2024-12-02 18:00:50.938525] user = 42429 Local 42/568
[2024-12-02 18:00:51.161161] user = 42429 Local+ 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:53.286455] user = 42429 MPDA- 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6580042206813385
Training on augumented user 60921 0/50 current_auc = 0.6580042206813385
User 60921 AUC after training: 0.6580192945432618
User 60921 improves AUC. Keeping the model.
Training on augumented user 101611 1/50 current_auc = 0.6580192945432618
User 101611 AUC after training: 0.6575670786855592
User 101611 does not improve AUC. Reverting changes.
Training on augumented user 547 2/50 current_auc = 0.6580192945432618
User 547 AUC after training: 0.6582077178173048
User 547 improves AUC. Keeping the model.
Training on augumented user 53575 3/50 current_auc = 0.6582077178173048
User 53575 AUC after training: 0.6579891468194151
User 53575 does not improve AUC. Reverting changes.
Training on augumented user 134817 4/50 current_auc = 0.6582077178173048
User 134817 AUC after training: 0.6586222490201988
User 134817 improves AUC. Keeping the model.
Training on augumented user 100105 5/50 current_auc = 0.6586222490201988
User 100105 AUC after training: 0.658200180886343
User 100105 does not improve AUC. Reverting changes.
Training on augumented user 79687 6/50 current_auc = 0.6586222490201988
User 79687 AUC after training: 0.6584865842628882
User 79687 does not improve AUC. Reverting changes.
Training on augumented user 64105 7/50 current_auc = 0.6586222490201988
User 64105 AUC after training: 0.6583810672294241
User 64105 does not improve AUC. Reverting changes.
Training on augumented user 26022 8/50 current_auc = 0.6586222490201988
User 26022 AUC after training: 0.6582906240578836
User 26022 does not improve AUC. Reverting changes.
Training on augumented user 127502 9/50 current_auc = 0.6586222490201988
User 127502 AUC after training: 0.6585318058486584
User 127502 does not improve AUC. Reverting changes.
Training on augumented user 72016 10/50 current_auc = 0.6586222490201988
User 72016 AUC after training: 0.658622249020199
User 72016 improves AUC. Keeping the model.
Training on augumented user 92639 11/50 current_auc = 0.658622249020199
User 92639 AUC after training: 0.6583659933675008
User 92639 does not improve AUC. Reverting changes.
Training on augumented user 133802 12/50 current_auc = 0.658622249020199
User 133802 AUC after training: 0.6586674706059692
User 133802 improves AUC. Keeping the model.
Training on augumented user 135044 13/50 current_auc = 0.6586674706059692
User 135044 AUC after training: 0.6588785046728972
User 135044 improves AUC. Keeping the model.
Training on augumented user 50896 14/50 current_auc = 0.6588785046728972
User 50896 AUC after training: 0.6589312631896292
User 50896 improves AUC. Keeping the model.
Training on augumented user 124598 15/50 current_auc = 0.6589312631896292
User 124598 AUC after training: 0.6591422972565572
User 124598 improves AUC. Keeping the model.
Training on augumented user 30085 16/50 current_auc = 0.6591422972565572
User 30085 AUC after training: 0.659014169430208
User 30085 does not improve AUC. Reverting changes.
Training on augumented user 21981 17/50 current_auc = 0.6591422972565572
User 21981 AUC after training: 0.6590669279469401
User 21981 does not improve AUC. Reverting changes.
Training on augumented user 25432 18/50 current_auc = 0.6591422972565572
User 25432 AUC after training: 0.6599336750075369
User 25432 improves AUC. Keeping the model.
Training on augumented user 12330 19/50 current_auc = 0.6599336750075369
User 12330 AUC after training: 0.6596623454929152
User 12330 does not improve AUC. Reverting changes.
Training on augumented user 133790 20/50 current_auc = 0.6599336750075369
User 133790 AUC after training: 0.6603105215556225
User 133790 improves AUC. Keeping the model.
Training on augumented user 119520 21/50 current_auc = 0.6603105215556225
User 119520 AUC after training: 0.6601899306602352
User 119520 does not improve AUC. Reverting changes.
Training on augumented user 83209 22/50 current_auc = 0.6603105215556225
User 83209 AUC after training: 0.659722640940609
User 83209 does not improve AUC. Reverting changes.
Training on augumented user 121795 23/50 current_auc = 0.6603105215556225
User 121795 AUC after training: 0.6592628881519444
User 121795 does not improve AUC. Reverting changes.
Training on augumented user 107770 24/50 current_auc = 0.6603105215556225
User 107770 AUC after training: 0.660220078384082
User 107770 does not improve AUC. Reverting changes.
Training on augumented user 20925 25/50 current_auc = 0.6603105215556225
User 20925 AUC after training: 0.6599487488694602
User 20925 does not improve AUC. Reverting changes.
Training on augumented user 35534 26/50 current_auc = 0.6603105215556225
User 35534 AUC after training: 0.6599788965933071
User 35534 does not improve AUC. Reverting changes.
Training on augumented user 68755 27/50 current_auc = 0.6603105215556225
User 68755 AUC after training: 0.6608682544467892
User 68755 improves AUC. Keeping the model.
Training on augumented user 92398 28/50 current_auc = 0.6608682544467892
User 92398 AUC after training: 0.6606647573108231
User 92398 does not improve AUC. Reverting changes.
Training on augumented user 124043 29/50 current_auc = 0.6608682544467892
User 124043 AUC after training: 0.6605969249321677
User 124043 does not improve AUC. Reverting changes.
Training on augumented user 116028 30/50 current_auc = 0.6608682544467892
User 116028 AUC after training: 0.6603406692794693
User 116028 does not improve AUC. Reverting changes.
Training on augumented user 46146 31/50 current_auc = 0.6608682544467892
User 46146 AUC after training: 0.6584262888151945
User 46146 does not improve AUC. Reverting changes.
Training on augumented user 21255 32/50 current_auc = 0.6608682544467892
User 21255 AUC after training: 0.6607024419656314
User 21255 does not improve AUC. Reverting changes.
Training on augumented user 4920 33/50 current_auc = 0.6608682544467892
User 4920 AUC after training: 0.6596924932167622
User 4920 does not improve AUC. Reverting changes.
Training on augumented user 65642 34/50 current_auc = 0.6608682544467892
User 65642 AUC after training: 0.6604160385890865
User 65642 does not improve AUC. Reverting changes.
Training on augumented user 129854 35/50 current_auc = 0.6608682544467892
User 129854 AUC after training: 0.6592101296352124
User 129854 does not improve AUC. Reverting changes.
Training on augumented user 58280 36/50 current_auc = 0.6608682544467892
User 58280 AUC after training: 0.6603708170033163
User 58280 does not improve AUC. Reverting changes.
Training on augumented user 13968 37/50 current_auc = 0.6608682544467892
User 13968 AUC after training: 0.6608531805848658
User 13968 does not improve AUC. Reverting changes.
Training on augumented user 109919 38/50 current_auc = 0.6608682544467892
User 109919 AUC after training: 0.6605215556225503
User 109919 does not improve AUC. Reverting changes.
Training on augumented user 56641 39/50 current_auc = 0.6608682544467892
User 56641 AUC after training: 0.6603708170033162
User 56641 does not improve AUC. Reverting changes.
Training on augumented user 40854 40/50 current_auc = 0.6608682544467892
User 40854 AUC after training: 0.6604311124510099
User 40854 does not improve AUC. Reverting changes.
Training on augumented user 42742 41/50 current_auc = 0.6608682544467892
User 42742 AUC after training: 0.6603783539342779
User 42742 does not improve AUC. Reverting changes.
Training on augumented user 104653 42/50 current_auc = 0.6608682544467892
User 104653 AUC after training: 0.6612752487187217
User 104653 improves AUC. Keeping the model.
Training on augumented user 52427 43/50 current_auc = 0.6612752487187217
User 52427 AUC after training: 0.6616822429906541
User 52427 improves AUC. Keeping the model.
Training on augumented user 28026 44/50 current_auc = 0.6616822429906541
User 28026 AUC after training: 0.6614862827856496
User 28026 does not improve AUC. Reverting changes.
Training on augumented user 7738 45/50 current_auc = 0.6616822429906541
User 7738 AUC after training: 0.6625263792583659
User 7738 improves AUC. Keeping the model.
Training on augumented user 24338 46/50 current_auc = 0.6625263792583659
User 24338 AUC after training: 0.6627675610491407
User 24338 improves AUC. Keeping the model.
Training on augumented user 116141 47/50 current_auc = 0.6627675610491407
User 116141 AUC after training: 0.6622701236056678
User 116141 does not improve AUC. Reverting changes.
Training on augumented user 12601 48/50 current_auc = 0.6627675610491407
User 12601 AUC after training: 0.6630841121495327
User 12601 improves AUC. Keeping the model.
Training on augumented user 128939 49/50 current_auc = 0.6630841121495327
User 128939 AUC after training: 0.6631444075972264
User 128939 improves AUC. Keeping the model.
[2024-12-02 18:01:24.868540] start test user 42441 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:25.435968] start test user 42441 43/568 recall augumented users by random, augumented_users = [88599, 65696, 131375, 74976, 112076, 129360, 57032, 60621, 119683, 70541, 120904, 130383, 92912, 85033, 19294, 5178, 126564, 6350, 106040, 8833, 63675, 91059, 16054, 127122, 61349, 10213, 78932, 75384, 65680, 133592, 64574, 108224, 133870, 36693, 37913, 27739, 94809, 107904, 60123, 123579, 87806, 39150, 64440, 87805, 128546, 101072, 114089, 52716, 16017, 41755]
[2024-12-02 18:01:25.453375] user = 42441 Cloud 43/568
[2024-12-02 18:01:25.468640] user = 42441 Local 43/568
[2024-12-02 18:01:25.536839] user = 42441 Local+ 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:27.863056] user = 42441 MPDA- 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.65
Training on augumented user 88599 0/50 current_auc = 0.65
User 88599 AUC after training: 0.65
User 88599 does not improve AUC. Reverting changes.
Training on augumented user 65696 1/50 current_auc = 0.65
User 65696 AUC after training: 0.65
User 65696 does not improve AUC. Reverting changes.
Training on augumented user 131375 2/50 current_auc = 0.65
User 131375 AUC after training: 0.65
User 131375 does not improve AUC. Reverting changes.
Training on augumented user 74976 3/50 current_auc = 0.65
User 74976 AUC after training: 0.65
User 74976 does not improve AUC. Reverting changes.
Training on augumented user 112076 4/50 current_auc = 0.65
User 112076 AUC after training: 0.65
User 112076 does not improve AUC. Reverting changes.
Training on augumented user 129360 5/50 current_auc = 0.65
User 129360 AUC after training: 0.65
User 129360 does not improve AUC. Reverting changes.
Training on augumented user 57032 6/50 current_auc = 0.65
User 57032 AUC after training: 0.65
User 57032 does not improve AUC. Reverting changes.
Training on augumented user 60621 7/50 current_auc = 0.65
User 60621 AUC after training: 0.65
User 60621 does not improve AUC. Reverting changes.
Training on augumented user 119683 8/50 current_auc = 0.65
User 119683 AUC after training: 0.65
User 119683 does not improve AUC. Reverting changes.
Training on augumented user 70541 9/50 current_auc = 0.65
User 70541 AUC after training: 0.65
User 70541 does not improve AUC. Reverting changes.
Training on augumented user 120904 10/50 current_auc = 0.65
User 120904 AUC after training: 0.65
User 120904 does not improve AUC. Reverting changes.
Training on augumented user 130383 11/50 current_auc = 0.65
User 130383 AUC after training: 0.65
User 130383 does not improve AUC. Reverting changes.
Training on augumented user 92912 12/50 current_auc = 0.65
User 92912 AUC after training: 0.65
User 92912 does not improve AUC. Reverting changes.
Training on augumented user 85033 13/50 current_auc = 0.65
User 85033 AUC after training: 0.65
User 85033 does not improve AUC. Reverting changes.
Training on augumented user 19294 14/50 current_auc = 0.65
User 19294 AUC after training: 0.65
User 19294 does not improve AUC. Reverting changes.
Training on augumented user 5178 15/50 current_auc = 0.65
User 5178 AUC after training: 0.65
User 5178 does not improve AUC. Reverting changes.
Training on augumented user 126564 16/50 current_auc = 0.65
User 126564 AUC after training: 0.65
User 126564 does not improve AUC. Reverting changes.
Training on augumented user 6350 17/50 current_auc = 0.65
User 6350 AUC after training: 0.65
User 6350 does not improve AUC. Reverting changes.
Training on augumented user 106040 18/50 current_auc = 0.65
User 106040 AUC after training: 0.65
User 106040 does not improve AUC. Reverting changes.
Training on augumented user 8833 19/50 current_auc = 0.65
User 8833 AUC after training: 0.65
User 8833 does not improve AUC. Reverting changes.
Training on augumented user 63675 20/50 current_auc = 0.65
User 63675 AUC after training: 0.65
User 63675 does not improve AUC. Reverting changes.
Training on augumented user 91059 21/50 current_auc = 0.65
User 91059 AUC after training: 0.65
User 91059 does not improve AUC. Reverting changes.
Training on augumented user 16054 22/50 current_auc = 0.65
User 16054 AUC after training: 0.65
User 16054 does not improve AUC. Reverting changes.
Training on augumented user 127122 23/50 current_auc = 0.65
User 127122 AUC after training: 0.65
User 127122 does not improve AUC. Reverting changes.
Training on augumented user 61349 24/50 current_auc = 0.65
User 61349 AUC after training: 0.65
User 61349 does not improve AUC. Reverting changes.
Training on augumented user 10213 25/50 current_auc = 0.65
User 10213 AUC after training: 0.65
User 10213 does not improve AUC. Reverting changes.
Training on augumented user 78932 26/50 current_auc = 0.65
User 78932 AUC after training: 0.65
User 78932 does not improve AUC. Reverting changes.
Training on augumented user 75384 27/50 current_auc = 0.65
User 75384 AUC after training: 0.65
User 75384 does not improve AUC. Reverting changes.
Training on augumented user 65680 28/50 current_auc = 0.65
User 65680 AUC after training: 0.65
User 65680 does not improve AUC. Reverting changes.
Training on augumented user 133592 29/50 current_auc = 0.65
User 133592 AUC after training: 0.65
User 133592 does not improve AUC. Reverting changes.
Training on augumented user 64574 30/50 current_auc = 0.65
User 64574 AUC after training: 0.65
User 64574 does not improve AUC. Reverting changes.
Training on augumented user 108224 31/50 current_auc = 0.65
User 108224 AUC after training: 0.65
User 108224 does not improve AUC. Reverting changes.
Training on augumented user 133870 32/50 current_auc = 0.65
User 133870 AUC after training: 0.65
User 133870 does not improve AUC. Reverting changes.
Training on augumented user 36693 33/50 current_auc = 0.65
User 36693 AUC after training: 0.65
User 36693 does not improve AUC. Reverting changes.
Training on augumented user 37913 34/50 current_auc = 0.65
User 37913 AUC after training: 0.65
User 37913 does not improve AUC. Reverting changes.
Training on augumented user 27739 35/50 current_auc = 0.65
User 27739 AUC after training: 0.65
User 27739 does not improve AUC. Reverting changes.
Training on augumented user 94809 36/50 current_auc = 0.65
User 94809 AUC after training: 0.65
User 94809 does not improve AUC. Reverting changes.
Training on augumented user 107904 37/50 current_auc = 0.65
User 107904 AUC after training: 0.65
User 107904 does not improve AUC. Reverting changes.
Training on augumented user 60123 38/50 current_auc = 0.65
User 60123 AUC after training: 0.65
User 60123 does not improve AUC. Reverting changes.
Training on augumented user 123579 39/50 current_auc = 0.65
User 123579 AUC after training: 0.65
User 123579 does not improve AUC. Reverting changes.
Training on augumented user 87806 40/50 current_auc = 0.65
User 87806 AUC after training: 0.65
User 87806 does not improve AUC. Reverting changes.
Training on augumented user 39150 41/50 current_auc = 0.65
User 39150 AUC after training: 0.65
User 39150 does not improve AUC. Reverting changes.
Training on augumented user 64440 42/50 current_auc = 0.65
User 64440 AUC after training: 0.65
User 64440 does not improve AUC. Reverting changes.
Training on augumented user 87805 43/50 current_auc = 0.65
User 87805 AUC after training: 0.65
User 87805 does not improve AUC. Reverting changes.
Training on augumented user 128546 44/50 current_auc = 0.65
User 128546 AUC after training: 0.65
User 128546 does not improve AUC. Reverting changes.
Training on augumented user 101072 45/50 current_auc = 0.65
User 101072 AUC after training: 0.65
User 101072 does not improve AUC. Reverting changes.
Training on augumented user 114089 46/50 current_auc = 0.65
User 114089 AUC after training: 0.65
User 114089 does not improve AUC. Reverting changes.
Training on augumented user 52716 47/50 current_auc = 0.65
User 52716 AUC after training: 0.65
User 52716 does not improve AUC. Reverting changes.
Training on augumented user 16017 48/50 current_auc = 0.65
User 16017 AUC after training: 0.65
User 16017 does not improve AUC. Reverting changes.
Training on augumented user 41755 49/50 current_auc = 0.65
User 41755 AUC after training: 0.65
User 41755 does not improve AUC. Reverting changes.
[2024-12-02 18:01:57.396356] start test user 42493 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:58.048329] start test user 42493 44/568 recall augumented users by random, augumented_users = [15456, 43393, 27504, 78872, 136970, 136211, 63560, 9359, 136362, 89514, 6782, 98616, 76208, 4474, 71603, 130194, 129183, 51649, 54125, 62746, 35901, 29482, 41091, 11694, 62671, 77921, 41957, 34902, 43754, 93873, 32712, 14109, 49495, 7490, 90401, 91480, 108338, 79850, 32071, 97700, 121936, 130212, 72783, 34624, 115601, 110112, 105174, 87086, 114809, 111271]
[2024-12-02 18:01:58.066297] user = 42493 Cloud 44/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:01:58.080361] user = 42493 Local 44/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:01:58.225156] user = 42493 Local+ 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:02:00.744451] user = 42493 MPDA- 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 15456 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15456 AUC after training: 0.5
User 15456 does not improve AUC. Reverting changes.
Training on augumented user 43393 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43393 AUC after training: 0.5
User 43393 does not improve AUC. Reverting changes.
Training on augumented user 27504 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27504 AUC after training: 0.5
User 27504 does not improve AUC. Reverting changes.
Training on augumented user 78872 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78872 AUC after training: 0.5
User 78872 does not improve AUC. Reverting changes.
Training on augumented user 136970 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136970 AUC after training: 0.5
User 136970 does not improve AUC. Reverting changes.
Training on augumented user 136211 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136211 AUC after training: 0.5
User 136211 does not improve AUC. Reverting changes.
Training on augumented user 63560 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63560 AUC after training: 0.5
User 63560 does not improve AUC. Reverting changes.
Training on augumented user 9359 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9359 AUC after training: 0.5
User 9359 does not improve AUC. Reverting changes.
Training on augumented user 136362 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136362 AUC after training: 0.5
User 136362 does not improve AUC. Reverting changes.
Training on augumented user 89514 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89514 AUC after training: 0.5
User 89514 does not improve AUC. Reverting changes.
Training on augumented user 6782 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6782 AUC after training: 0.5
User 6782 does not improve AUC. Reverting changes.
Training on augumented user 98616 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98616 AUC after training: 0.5
User 98616 does not improve AUC. Reverting changes.
Training on augumented user 76208 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76208 AUC after training: 0.5
User 76208 does not improve AUC. Reverting changes.
Training on augumented user 4474 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4474 AUC after training: 0.5
User 4474 does not improve AUC. Reverting changes.
Training on augumented user 71603 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71603 AUC after training: 0.5
User 71603 does not improve AUC. Reverting changes.
Training on augumented user 130194 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130194 AUC after training: 0.5
User 130194 does not improve AUC. Reverting changes.
Training on augumented user 129183 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129183 AUC after training: 0.5
User 129183 does not improve AUC. Reverting changes.
Training on augumented user 51649 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51649 AUC after training: 0.5
User 51649 does not improve AUC. Reverting changes.
Training on augumented user 54125 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54125 AUC after training: 0.5
User 54125 does not improve AUC. Reverting changes.
Training on augumented user 62746 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62746 AUC after training: 0.5
User 62746 does not improve AUC. Reverting changes.
Training on augumented user 35901 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35901 AUC after training: 0.5
User 35901 does not improve AUC. Reverting changes.
Training on augumented user 29482 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29482 AUC after training: 0.5
User 29482 does not improve AUC. Reverting changes.
Training on augumented user 41091 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41091 AUC after training: 0.5
User 41091 does not improve AUC. Reverting changes.
Training on augumented user 11694 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11694 AUC after training: 0.5
User 11694 does not improve AUC. Reverting changes.
Training on augumented user 62671 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62671 AUC after training: 0.5
User 62671 does not improve AUC. Reverting changes.
Training on augumented user 77921 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77921 AUC after training: 0.5
User 77921 does not improve AUC. Reverting changes.
Training on augumented user 41957 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41957 AUC after training: 0.5
User 41957 does not improve AUC. Reverting changes.
Training on augumented user 34902 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34902 AUC after training: 0.5
User 34902 does not improve AUC. Reverting changes.
Training on augumented user 43754 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43754 AUC after training: 0.5
User 43754 does not improve AUC. Reverting changes.
Training on augumented user 93873 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93873 AUC after training: 0.5
User 93873 does not improve AUC. Reverting changes.
Training on augumented user 32712 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32712 AUC after training: 0.5
User 32712 does not improve AUC. Reverting changes.
Training on augumented user 14109 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14109 AUC after training: 0.5
User 14109 does not improve AUC. Reverting changes.
Training on augumented user 49495 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49495 AUC after training: 0.5
User 49495 does not improve AUC. Reverting changes.
Training on augumented user 7490 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7490 AUC after training: 0.5
User 7490 does not improve AUC. Reverting changes.
Training on augumented user 90401 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90401 AUC after training: 0.5
User 90401 does not improve AUC. Reverting changes.
Training on augumented user 91480 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91480 AUC after training: 0.5
User 91480 does not improve AUC. Reverting changes.
Training on augumented user 108338 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108338 AUC after training: 0.5
User 108338 does not improve AUC. Reverting changes.
Training on augumented user 79850 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79850 AUC after training: 0.5
User 79850 does not improve AUC. Reverting changes.
Training on augumented user 32071 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32071 AUC after training: 0.5
User 32071 does not improve AUC. Reverting changes.
Training on augumented user 97700 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97700 AUC after training: 0.5
User 97700 does not improve AUC. Reverting changes.
Training on augumented user 121936 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121936 AUC after training: 0.5
User 121936 does not improve AUC. Reverting changes.
Training on augumented user 130212 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130212 AUC after training: 0.5
User 130212 does not improve AUC. Reverting changes.
Training on augumented user 72783 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72783 AUC after training: 0.5
User 72783 does not improve AUC. Reverting changes.
Training on augumented user 34624 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34624 AUC after training: 0.5
User 34624 does not improve AUC. Reverting changes.
Training on augumented user 115601 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115601 AUC after training: 0.5
User 115601 does not improve AUC. Reverting changes.
Training on augumented user 110112 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110112 AUC after training: 0.5
User 110112 does not improve AUC. Reverting changes.
Training on augumented user 105174 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105174 AUC after training: 0.5
User 105174 does not improve AUC. Reverting changes.
Training on augumented user 87086 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87086 AUC after training: 0.5
User 87086 does not improve AUC. Reverting changes.
Training on augumented user 114809 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114809 AUC after training: 0.5
User 114809 does not improve AUC. Reverting changes.
Training on augumented user 111271 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111271 AUC after training: 0.5
User 111271 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:02:30.705537] start test user 42506 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:31.375223] start test user 42506 45/568 recall augumented users by random, augumented_users = [132885, 31842, 43923, 58361, 100361, 74181, 114782, 47656, 89298, 124342, 82700, 92999, 37009, 116255, 108916, 48105, 37294, 88101, 137460, 29764, 53516, 108066, 106651, 30898, 58211, 10871, 56375, 125028, 121742, 33596, 72270, 16893, 126606, 81144, 4354, 119145, 73170, 28850, 102000, 97033, 102133, 119481, 60815, 57649, 12934, 99513, 72573, 116065, 40668, 22434]
[2024-12-02 18:02:31.398955] user = 42506 Cloud 45/568
[2024-12-02 18:02:31.563447] user = 42506 Local 45/568
[2024-12-02 18:02:31.750909] user = 42506 Local+ 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:33.969113] user = 42506 MPDA- 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7922408660948559
Training on augumented user 132885 0/50 current_auc = 0.7922408660948559
User 132885 AUC after training: 0.7921526690626859
User 132885 does not improve AUC. Reverting changes.
Training on augumented user 31842 1/50 current_auc = 0.7922408660948559
User 31842 AUC after training: 0.7923694867667703
User 31842 improves AUC. Keeping the model.
Training on augumented user 43923 2/50 current_auc = 0.7923694867667703
User 43923 AUC after training: 0.7909748711955843
User 43923 does not improve AUC. Reverting changes.
Training on augumented user 58361 3/50 current_auc = 0.7923694867667703
User 58361 AUC after training: 0.7914305558617953
User 58361 does not improve AUC. Reverting changes.
Training on augumented user 100361 4/50 current_auc = 0.7923694867667703
User 100361 AUC after training: 0.7925550680219611
User 100361 improves AUC. Keeping the model.
Training on augumented user 74181 5/50 current_auc = 0.7925550680219611
User 74181 AUC after training: 0.7933488413114899
User 74181 improves AUC. Keeping the model.
Training on augumented user 114782 6/50 current_auc = 0.7933488413114899
User 114782 AUC after training: 0.7931559103036183
User 114782 does not improve AUC. Reverting changes.
Training on augumented user 47656 7/50 current_auc = 0.7933488413114899
User 47656 AUC after training: 0.793591383149957
User 47656 improves AUC. Keeping the model.
Training on augumented user 89298 8/50 current_auc = 0.793591383149957
User 89298 AUC after training: 0.7940783042650614
User 89298 improves AUC. Keeping the model.
Training on augumented user 124342 9/50 current_auc = 0.7940783042650614
User 124342 AUC after training: 0.7937641023379565
User 124342 does not improve AUC. Reverting changes.
Training on augumented user 82700 10/50 current_auc = 0.7940783042650614
User 82700 AUC after training: 0.7941756884880823
User 82700 improves AUC. Keeping the model.
Training on augumented user 92999 11/50 current_auc = 0.7941756884880823
User 92999 AUC after training: 0.7935895457117869
User 92999 does not improve AUC. Reverting changes.
Training on augumented user 37009 12/50 current_auc = 0.7941756884880823
User 37009 AUC after training: 0.7941334274101677
User 37009 does not improve AUC. Reverting changes.
Training on augumented user 116255 13/50 current_auc = 0.7941756884880823
User 116255 AUC after training: 0.7948279790385053
User 116255 improves AUC. Keeping the model.
Training on augumented user 108916 14/50 current_auc = 0.7948279790385053
User 108916 AUC after training: 0.7950631711242917
User 108916 improves AUC. Keeping the model.
Training on augumented user 48105 15/50 current_auc = 0.7950631711242917
User 48105 AUC after training: 0.7946221859634423
User 48105 does not improve AUC. Reverting changes.
Training on augumented user 37294 16/50 current_auc = 0.7950631711242917
User 37294 AUC after training: 0.7945542007511447
User 37294 does not improve AUC. Reverting changes.
Training on augumented user 88101 17/50 current_auc = 0.7950631711242917
User 88101 AUC after training: 0.7954527080163754
User 88101 improves AUC. Keeping the model.
Training on augumented user 137460 18/50 current_auc = 0.7954527080163754
User 137460 AUC after training: 0.7951623927854827
User 137460 does not improve AUC. Reverting changes.
Training on augumented user 29764 19/50 current_auc = 0.7954527080163754
User 29764 AUC after training: 0.7943925061921666
User 29764 does not improve AUC. Reverting changes.
Training on augumented user 53516 20/50 current_auc = 0.7954527080163754
User 53516 AUC after training: 0.7955813286882898
User 53516 improves AUC. Keeping the model.
Training on augumented user 108066 21/50 current_auc = 0.7955813286882898
User 108066 AUC after training: 0.7949272006996966
User 108066 does not improve AUC. Reverting changes.
Training on augumented user 106651 22/50 current_auc = 0.7955813286882898
User 106651 AUC after training: 0.7948353287911861
User 106651 does not improve AUC. Reverting changes.
Training on augumented user 30898 23/50 current_auc = 0.7955813286882898
User 30898 AUC after training: 0.7955445799248855
User 30898 does not improve AUC. Reverting changes.
Training on augumented user 58211 24/50 current_auc = 0.7955813286882898
User 58211 AUC after training: 0.7955776538119492
User 58211 does not improve AUC. Reverting changes.
Training on augumented user 10871 25/50 current_auc = 0.7955813286882898
User 10871 AUC after training: 0.7958238705267568
User 10871 improves AUC. Keeping the model.
Training on augumented user 56375 26/50 current_auc = 0.7958238705267568
User 56375 AUC after training: 0.7953240873444608
User 56375 does not improve AUC. Reverting changes.
Training on augumented user 125028 27/50 current_auc = 0.7958238705267568
User 125028 AUC after training: 0.7955960281936513
User 125028 does not improve AUC. Reverting changes.
Training on augumented user 121742 28/50 current_auc = 0.7958238705267568
User 121742 AUC after training: 0.7936850924966374
User 121742 does not improve AUC. Reverting changes.
Training on augumented user 33596 29/50 current_auc = 0.7958238705267568
User 33596 AUC after training: 0.7958091710213953
User 33596 does not improve AUC. Reverting changes.
Training on augumented user 72270 30/50 current_auc = 0.7958238705267568
User 72270 AUC after training: 0.7953498114788438
User 72270 does not improve AUC. Reverting changes.
Training on augumented user 16893 31/50 current_auc = 0.7958238705267568
User 16893 AUC after training: 0.7960057769056071
User 16893 improves AUC. Keeping the model.
Training on augumented user 126606 32/50 current_auc = 0.7960057769056071
User 126606 AUC after training: 0.7958312202794375
User 126606 does not improve AUC. Reverting changes.
Training on augumented user 81144 33/50 current_auc = 0.7960057769056071
User 81144 AUC after training: 0.7961233729485002
User 81144 improves AUC. Keeping the model.
Training on augumented user 4354 34/50 current_auc = 0.7961233729485002
User 4354 AUC after training: 0.7962519936204148
User 4354 improves AUC. Keeping the model.
Training on augumented user 119145 35/50 current_auc = 0.7962519936204148
User 119145 AUC after training: 0.7959396291314798
User 119145 does not improve AUC. Reverting changes.
Training on augumented user 73170 36/50 current_auc = 0.7962519936204148
User 73170 AUC after training: 0.7951146193930574
User 73170 does not improve AUC. Reverting changes.
Training on augumented user 28850 37/50 current_auc = 0.7962519936204148
User 28850 AUC after training: 0.7965717078620305
User 28850 improves AUC. Keeping the model.
Training on augumented user 102000 38/50 current_auc = 0.7965717078620305
User 102000 AUC after training: 0.7965570083566686
User 102000 does not improve AUC. Reverting changes.
Training on augumented user 97033 39/50 current_auc = 0.7965717078620305
User 97033 AUC after training: 0.7965459837276477
User 97033 does not improve AUC. Reverting changes.
Training on augumented user 102133 40/50 current_auc = 0.7965717078620305
User 102133 AUC after training: 0.7959469788841607
User 102133 does not improve AUC. Reverting changes.
Training on augumented user 119481 41/50 current_auc = 0.7965717078620305
User 119481 AUC after training: 0.796790363004285
User 119481 improves AUC. Keeping the model.
Training on augumented user 60815 42/50 current_auc = 0.796790363004285
User 60815 AUC after training: 0.7973030082537722
User 60815 improves AUC. Keeping the model.
Training on augumented user 57649 43/50 current_auc = 0.7973030082537722
User 57649 AUC after training: 0.7973360821408357
User 57649 improves AUC. Keeping the model.
Training on augumented user 12934 44/50 current_auc = 0.7973360821408357
User 12934 AUC after training: 0.7972460476704959
User 12934 does not improve AUC. Reverting changes.
Training on augumented user 99513 45/50 current_auc = 0.7973360821408357
User 99513 AUC after training: 0.7969649196304543
User 99513 does not improve AUC. Reverting changes.
Training on augumented user 72573 46/50 current_auc = 0.7973360821408357
User 72573 AUC after training: 0.7971284516276027
User 72573 does not improve AUC. Reverting changes.
Training on augumented user 116065 47/50 current_auc = 0.7973360821408357
User 116065 AUC after training: 0.7972791215575594
User 116065 does not improve AUC. Reverting changes.
Training on augumented user 40668 48/50 current_auc = 0.7973360821408357
User 40668 AUC after training: 0.7975914860464945
User 40668 improves AUC. Keeping the model.
Training on augumented user 22434 49/50 current_auc = 0.7975914860464945
User 22434 AUC after training: 0.7972864713102403
User 22434 does not improve AUC. Reverting changes.
[2024-12-02 18:03:08.760621] start test user 42534 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:09.177325] start test user 42534 46/568 recall augumented users by random, augumented_users = [38560, 11656, 21326, 60829, 38046, 65338, 94702, 121006, 121778, 114811, 137365, 120460, 50922, 27112, 135639, 91330, 65893, 64559, 122741, 133562, 138438, 34422, 49820, 80922, 136658, 99351, 130997, 76453, 31900, 37115, 9798, 124795, 14354, 1305, 80437, 50166, 61106, 8931, 32634, 101362, 112010, 32086, 11807, 100625, 75180, 3072, 77862, 94001, 84065, 7478]
[2024-12-02 18:03:09.192548] user = 42534 Cloud 46/568
[2024-12-02 18:03:09.206519] user = 42534 Local 46/568
[2024-12-02 18:03:09.226786] user = 42534 Local+ 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:11.545844] user = 42534 MPDA- 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6936936936936937
Training on augumented user 38560 0/50 current_auc = 0.6936936936936937
User 38560 AUC after training: 0.6891891891891893
User 38560 does not improve AUC. Reverting changes.
Training on augumented user 11656 1/50 current_auc = 0.6936936936936937
User 11656 AUC after training: 0.6936936936936937
User 11656 does not improve AUC. Reverting changes.
Training on augumented user 21326 2/50 current_auc = 0.6936936936936937
User 21326 AUC after training: 0.6914414414414414
User 21326 does not improve AUC. Reverting changes.
Training on augumented user 60829 3/50 current_auc = 0.6936936936936937
User 60829 AUC after training: 0.6936936936936937
User 60829 does not improve AUC. Reverting changes.
Training on augumented user 38046 4/50 current_auc = 0.6936936936936937
User 38046 AUC after training: 0.6914414414414414
User 38046 does not improve AUC. Reverting changes.
Training on augumented user 65338 5/50 current_auc = 0.6936936936936937
User 65338 AUC after training: 0.6914414414414415
User 65338 does not improve AUC. Reverting changes.
Training on augumented user 94702 6/50 current_auc = 0.6936936936936937
User 94702 AUC after training: 0.6936936936936937
User 94702 does not improve AUC. Reverting changes.
Training on augumented user 121006 7/50 current_auc = 0.6936936936936937
User 121006 AUC after training: 0.695945945945946
User 121006 improves AUC. Keeping the model.
Training on augumented user 121778 8/50 current_auc = 0.695945945945946
User 121778 AUC after training: 0.6914414414414415
User 121778 does not improve AUC. Reverting changes.
Training on augumented user 114811 9/50 current_auc = 0.695945945945946
User 114811 AUC after training: 0.695945945945946
User 114811 does not improve AUC. Reverting changes.
Training on augumented user 137365 10/50 current_auc = 0.695945945945946
User 137365 AUC after training: 0.6936936936936937
User 137365 does not improve AUC. Reverting changes.
Training on augumented user 120460 11/50 current_auc = 0.695945945945946
User 120460 AUC after training: 0.6936936936936937
User 120460 does not improve AUC. Reverting changes.
Training on augumented user 50922 12/50 current_auc = 0.695945945945946
User 50922 AUC after training: 0.695945945945946
User 50922 does not improve AUC. Reverting changes.
Training on augumented user 27112 13/50 current_auc = 0.695945945945946
User 27112 AUC after training: 0.6936936936936937
User 27112 does not improve AUC. Reverting changes.
Training on augumented user 135639 14/50 current_auc = 0.695945945945946
User 135639 AUC after training: 0.6936936936936937
User 135639 does not improve AUC. Reverting changes.
Training on augumented user 91330 15/50 current_auc = 0.695945945945946
User 91330 AUC after training: 0.6914414414414414
User 91330 does not improve AUC. Reverting changes.
Training on augumented user 65893 16/50 current_auc = 0.695945945945946
User 65893 AUC after training: 0.6936936936936937
User 65893 does not improve AUC. Reverting changes.
Training on augumented user 64559 17/50 current_auc = 0.695945945945946
User 64559 AUC after training: 0.6914414414414414
User 64559 does not improve AUC. Reverting changes.
Training on augumented user 122741 18/50 current_auc = 0.695945945945946
User 122741 AUC after training: 0.6936936936936937
User 122741 does not improve AUC. Reverting changes.
Training on augumented user 133562 19/50 current_auc = 0.695945945945946
User 133562 AUC after training: 0.686936936936937
User 133562 does not improve AUC. Reverting changes.
Training on augumented user 138438 20/50 current_auc = 0.695945945945946
User 138438 AUC after training: 0.695945945945946
User 138438 does not improve AUC. Reverting changes.
Training on augumented user 34422 21/50 current_auc = 0.695945945945946
User 34422 AUC after training: 0.695945945945946
User 34422 does not improve AUC. Reverting changes.
Training on augumented user 49820 22/50 current_auc = 0.695945945945946
User 49820 AUC after training: 0.6936936936936937
User 49820 does not improve AUC. Reverting changes.
Training on augumented user 80922 23/50 current_auc = 0.695945945945946
User 80922 AUC after training: 0.6936936936936937
User 80922 does not improve AUC. Reverting changes.
Training on augumented user 136658 24/50 current_auc = 0.695945945945946
User 136658 AUC after training: 0.695945945945946
User 136658 does not improve AUC. Reverting changes.
Training on augumented user 99351 25/50 current_auc = 0.695945945945946
User 99351 AUC after training: 0.695945945945946
User 99351 does not improve AUC. Reverting changes.
Training on augumented user 130997 26/50 current_auc = 0.695945945945946
User 130997 AUC after training: 0.695945945945946
User 130997 does not improve AUC. Reverting changes.
Training on augumented user 76453 27/50 current_auc = 0.695945945945946
User 76453 AUC after training: 0.6914414414414414
User 76453 does not improve AUC. Reverting changes.
Training on augumented user 31900 28/50 current_auc = 0.695945945945946
User 31900 AUC after training: 0.6936936936936937
User 31900 does not improve AUC. Reverting changes.
Training on augumented user 37115 29/50 current_auc = 0.695945945945946
User 37115 AUC after training: 0.6936936936936937
User 37115 does not improve AUC. Reverting changes.
Training on augumented user 9798 30/50 current_auc = 0.695945945945946
User 9798 AUC after training: 0.6891891891891893
User 9798 does not improve AUC. Reverting changes.
Training on augumented user 124795 31/50 current_auc = 0.695945945945946
User 124795 AUC after training: 0.6914414414414414
User 124795 does not improve AUC. Reverting changes.
Training on augumented user 14354 32/50 current_auc = 0.695945945945946
User 14354 AUC after training: 0.6936936936936937
User 14354 does not improve AUC. Reverting changes.
Training on augumented user 1305 33/50 current_auc = 0.695945945945946
User 1305 AUC after training: 0.6914414414414414
User 1305 does not improve AUC. Reverting changes.
Training on augumented user 80437 34/50 current_auc = 0.695945945945946
User 80437 AUC after training: 0.6959459459459459
User 80437 does not improve AUC. Reverting changes.
Training on augumented user 50166 35/50 current_auc = 0.695945945945946
User 50166 AUC after training: 0.6891891891891893
User 50166 does not improve AUC. Reverting changes.
Training on augumented user 61106 36/50 current_auc = 0.695945945945946
User 61106 AUC after training: 0.6936936936936937
User 61106 does not improve AUC. Reverting changes.
Training on augumented user 8931 37/50 current_auc = 0.695945945945946
User 8931 AUC after training: 0.695945945945946
User 8931 does not improve AUC. Reverting changes.
Training on augumented user 32634 38/50 current_auc = 0.695945945945946
User 32634 AUC after training: 0.695945945945946
User 32634 does not improve AUC. Reverting changes.
Training on augumented user 101362 39/50 current_auc = 0.695945945945946
User 101362 AUC after training: 0.6936936936936937
User 101362 does not improve AUC. Reverting changes.
Training on augumented user 112010 40/50 current_auc = 0.695945945945946
User 112010 AUC after training: 0.6936936936936937
User 112010 does not improve AUC. Reverting changes.
Training on augumented user 32086 41/50 current_auc = 0.695945945945946
User 32086 AUC after training: 0.695945945945946
User 32086 does not improve AUC. Reverting changes.
Training on augumented user 11807 42/50 current_auc = 0.695945945945946
User 11807 AUC after training: 0.6936936936936937
User 11807 does not improve AUC. Reverting changes.
Training on augumented user 100625 43/50 current_auc = 0.695945945945946
User 100625 AUC after training: 0.695945945945946
User 100625 does not improve AUC. Reverting changes.
Training on augumented user 75180 44/50 current_auc = 0.695945945945946
User 75180 AUC after training: 0.695945945945946
User 75180 does not improve AUC. Reverting changes.
Training on augumented user 3072 45/50 current_auc = 0.695945945945946
User 3072 AUC after training: 0.695945945945946
User 3072 does not improve AUC. Reverting changes.
Training on augumented user 77862 46/50 current_auc = 0.695945945945946
User 77862 AUC after training: 0.695945945945946
User 77862 does not improve AUC. Reverting changes.
Training on augumented user 94001 47/50 current_auc = 0.695945945945946
User 94001 AUC after training: 0.6914414414414414
User 94001 does not improve AUC. Reverting changes.
Training on augumented user 84065 48/50 current_auc = 0.695945945945946
User 84065 AUC after training: 0.695945945945946
User 84065 does not improve AUC. Reverting changes.
Training on augumented user 7478 49/50 current_auc = 0.695945945945946
User 7478 AUC after training: 0.695945945945946
User 7478 does not improve AUC. Reverting changes.
[2024-12-02 18:03:40.857421] start test user 42610 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:41.319285] start test user 42610 47/568 recall augumented users by random, augumented_users = [34369, 116785, 48353, 103847, 42824, 56838, 111467, 98845, 115938, 120602, 132564, 77229, 92744, 64646, 104479, 111012, 58613, 25194, 104647, 117729, 4916, 133637, 22992, 52280, 136361, 89315, 23828, 121294, 135919, 78764, 99196, 113676, 56358, 45130, 951, 89018, 73902, 89403, 9202, 58098, 75562, 13534, 46941, 118904, 117564, 13573, 116905, 67376, 76116, 93294]
[2024-12-02 18:03:41.334762] user = 42610 Cloud 47/568
[2024-12-02 18:03:41.404798] user = 42610 Local 47/568
[2024-12-02 18:03:41.493099] user = 42610 Local+ 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:44.160628] user = 42610 MPDA- 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8293418732015223
Training on augumented user 34369 0/50 current_auc = 0.8293418732015223
User 34369 AUC after training: 0.8292954608744083
User 34369 does not improve AUC. Reverting changes.
Training on augumented user 116785 1/50 current_auc = 0.8293418732015223
User 116785 AUC after training: 0.8290169869117238
User 116785 does not improve AUC. Reverting changes.
Training on augumented user 48353 2/50 current_auc = 0.8293418732015223
User 48353 AUC after training: 0.8295275225099786
User 48353 improves AUC. Keeping the model.
Training on augumented user 103847 3/50 current_auc = 0.8295275225099786
User 103847 AUC after training: 0.8292258423837372
User 103847 does not improve AUC. Reverting changes.
Training on augumented user 42824 4/50 current_auc = 0.8295275225099786
User 42824 AUC after training: 0.8295739348370926
User 42824 improves AUC. Keeping the model.
Training on augumented user 56838 5/50 current_auc = 0.8295739348370926
User 56838 AUC after training: 0.8295971410006497
User 56838 improves AUC. Keeping the model.
Training on augumented user 111467 6/50 current_auc = 0.8295971410006497
User 111467 AUC after training: 0.8296435533277637
User 111467 improves AUC. Keeping the model.
Training on augumented user 98845 7/50 current_auc = 0.8296435533277637
User 98845 AUC after training: 0.829713171818435
User 98845 improves AUC. Keeping the model.
Training on augumented user 115938 8/50 current_auc = 0.829713171818435
User 115938 AUC after training: 0.8295275225099785
User 115938 does not improve AUC. Reverting changes.
Training on augumented user 120602 9/50 current_auc = 0.829713171818435
User 120602 AUC after training: 0.8298756149633343
User 120602 improves AUC. Keeping the model.
Training on augumented user 132564 10/50 current_auc = 0.8298756149633343
User 132564 AUC after training: 0.8298988211268913
User 132564 improves AUC. Keeping the model.
Training on augumented user 77229 11/50 current_auc = 0.8298988211268913
User 77229 AUC after training: 0.8298756149633343
User 77229 does not improve AUC. Reverting changes.
Training on augumented user 92744 12/50 current_auc = 0.8298988211268913
User 92744 AUC after training: 0.829666759491321
User 92744 does not improve AUC. Reverting changes.
Training on augumented user 64646 13/50 current_auc = 0.8298988211268913
User 64646 AUC after training: 0.8298524087997773
User 64646 does not improve AUC. Reverting changes.
Training on augumented user 104479 14/50 current_auc = 0.8298988211268913
User 104479 AUC after training: 0.8303629443980323
User 104479 improves AUC. Keeping the model.
Training on augumented user 111012 15/50 current_auc = 0.8303629443980323
User 111012 AUC after training: 0.8301772950895758
User 111012 does not improve AUC. Reverting changes.
Training on augumented user 58613 16/50 current_auc = 0.8303629443980323
User 58613 AUC after training: 0.830293325907361
User 58613 does not improve AUC. Reverting changes.
Training on augumented user 25194 17/50 current_auc = 0.8303629443980323
User 25194 AUC after training: 0.8301540889260187
User 25194 does not improve AUC. Reverting changes.
Training on augumented user 104647 18/50 current_auc = 0.8303629443980323
User 104647 AUC after training: 0.8298988211268913
User 104647 does not improve AUC. Reverting changes.
Training on augumented user 117729 19/50 current_auc = 0.8303629443980323
User 117729 AUC after training: 0.8300148519446766
User 117729 does not improve AUC. Reverting changes.
Training on augumented user 4916 20/50 current_auc = 0.8303629443980323
User 4916 AUC after training: 0.8301540889260187
User 4916 does not improve AUC. Reverting changes.
Training on augumented user 133637 21/50 current_auc = 0.8303629443980323
User 133637 AUC after training: 0.8305369906247099
User 133637 improves AUC. Keeping the model.
Training on augumented user 22992 22/50 current_auc = 0.8305369906247099
User 22992 AUC after training: 0.8301540889260187
User 22992 does not improve AUC. Reverting changes.
Training on augumented user 52280 23/50 current_auc = 0.8305369906247099
User 52280 AUC after training: 0.8301076765989046
User 52280 does not improve AUC. Reverting changes.
Training on augumented user 136361 24/50 current_auc = 0.8305369906247099
User 136361 AUC after training: 0.830362944398032
User 136361 does not improve AUC. Reverting changes.
Training on augumented user 89315 25/50 current_auc = 0.8305369906247099
User 89315 AUC after training: 0.8299684396175624
User 89315 does not improve AUC. Reverting changes.
Training on augumented user 23828 26/50 current_auc = 0.8305369906247099
User 23828 AUC after training: 0.830316532070918
User 23828 does not improve AUC. Reverting changes.
Training on augumented user 121294 27/50 current_auc = 0.8305369906247099
User 121294 AUC after training: 0.830316532070918
User 121294 does not improve AUC. Reverting changes.
Training on augumented user 135919 28/50 current_auc = 0.8305369906247099
User 135919 AUC after training: 0.8302933259073609
User 135919 does not improve AUC. Reverting changes.
Training on augumented user 78764 29/50 current_auc = 0.8305369906247099
User 78764 AUC after training: 0.8304093567251462
User 78764 does not improve AUC. Reverting changes.
Training on augumented user 99196 30/50 current_auc = 0.8305369906247099
User 99196 AUC after training: 0.8305021813793744
User 99196 does not improve AUC. Reverting changes.
Training on augumented user 113676 31/50 current_auc = 0.8305369906247099
User 113676 AUC after training: 0.830316532070918
User 113676 does not improve AUC. Reverting changes.
Training on augumented user 56358 32/50 current_auc = 0.8305369906247099
User 56358 AUC after training: 0.8294579040193074
User 56358 does not improve AUC. Reverting changes.
Training on augumented user 45130 33/50 current_auc = 0.8305369906247099
User 45130 AUC after training: 0.8299800426993409
User 45130 does not improve AUC. Reverting changes.
Training on augumented user 951 34/50 current_auc = 0.8305369906247099
User 951 AUC after training: 0.8298292026362202
User 951 does not improve AUC. Reverting changes.
Training on augumented user 89018 35/50 current_auc = 0.8305369906247099
User 89018 AUC after training: 0.8305021813793744
User 89018 does not improve AUC. Reverting changes.
Training on augumented user 73902 36/50 current_auc = 0.8305369906247099
User 73902 AUC after training: 0.8301076765989046
User 73902 does not improve AUC. Reverting changes.
Training on augumented user 89403 37/50 current_auc = 0.8305369906247099
User 89403 AUC after training: 0.8303281351526965
User 89403 does not improve AUC. Reverting changes.
Training on augumented user 9202 38/50 current_auc = 0.8305369906247099
User 9202 AUC after training: 0.83053699062471
User 9202 improves AUC. Keeping the model.
Training on augumented user 58098 39/50 current_auc = 0.83053699062471
User 58098 AUC after training: 0.8304673721340388
User 58098 does not improve AUC. Reverting changes.
Training on augumented user 75562 40/50 current_auc = 0.83053699062471
User 75562 AUC after training: 0.8311751601225286
User 75562 improves AUC. Keeping the model.
Training on augumented user 13534 41/50 current_auc = 0.8311751601225286
User 13534 AUC after training: 0.8310127169776292
User 13534 does not improve AUC. Reverting changes.
Training on augumented user 46941 42/50 current_auc = 0.8311751601225286
User 46941 AUC after training: 0.8309663046505152
User 46941 does not improve AUC. Reverting changes.
Training on augumented user 118904 43/50 current_auc = 0.8311751601225286
User 118904 AUC after training: 0.8306762276060521
User 118904 does not improve AUC. Reverting changes.
Training on augumented user 117564 44/50 current_auc = 0.8311751601225286
User 117564 AUC after training: 0.8313608094309849
User 117564 improves AUC. Keeping the model.
Training on augumented user 13573 45/50 current_auc = 0.8313608094309849
User 13573 AUC after training: 0.8308850830780655
User 13573 does not improve AUC. Reverting changes.
Training on augumented user 116905 46/50 current_auc = 0.8313608094309849
User 116905 AUC after training: 0.8304557690522603
User 116905 does not improve AUC. Reverting changes.
Training on augumented user 67376 47/50 current_auc = 0.8313608094309849
User 67376 AUC after training: 0.8307342430149447
User 67376 does not improve AUC. Reverting changes.
Training on augumented user 76116 48/50 current_auc = 0.8313608094309849
User 76116 AUC after training: 0.830896686159844
User 76116 does not improve AUC. Reverting changes.
Training on augumented user 93294 49/50 current_auc = 0.8313608094309849
User 93294 AUC after training: 0.8310591293047433
User 93294 does not improve AUC. Reverting changes.
[2024-12-02 18:04:12.788853] start test user 42671 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:13.335658] start test user 42671 48/568 recall augumented users by random, augumented_users = [120537, 13714, 102829, 19742, 74895, 96412, 136408, 111071, 97527, 59288, 10871, 50872, 42073, 133534, 68714, 100271, 34136, 5963, 16202, 103967, 129464, 120859, 97854, 96707, 55717, 57788, 123723, 29687, 62575, 77902, 94809, 73094, 41789, 72528, 132099, 29562, 50446, 89440, 7737, 53876, 116420, 31202, 103334, 125492, 90067, 131347, 103235, 76000, 48175, 70991]
[2024-12-02 18:04:13.351752] user = 42671 Cloud 48/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:04:13.358624] user = 42671 Local 48/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:04:13.440018] user = 42671 Local+ 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:04:15.978402] user = 42671 MPDA- 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 120537 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120537 AUC after training: 0.5
User 120537 does not improve AUC. Reverting changes.
Training on augumented user 13714 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13714 AUC after training: 0.5
User 13714 does not improve AUC. Reverting changes.
Training on augumented user 102829 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102829 AUC after training: 0.5
User 102829 does not improve AUC. Reverting changes.
Training on augumented user 19742 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19742 AUC after training: 0.5
User 19742 does not improve AUC. Reverting changes.
Training on augumented user 74895 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74895 AUC after training: 0.5
User 74895 does not improve AUC. Reverting changes.
Training on augumented user 96412 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96412 AUC after training: 0.5
User 96412 does not improve AUC. Reverting changes.
Training on augumented user 136408 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136408 AUC after training: 0.5
User 136408 does not improve AUC. Reverting changes.
Training on augumented user 111071 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111071 AUC after training: 0.5
User 111071 does not improve AUC. Reverting changes.
Training on augumented user 97527 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97527 AUC after training: 0.5
User 97527 does not improve AUC. Reverting changes.
Training on augumented user 59288 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59288 AUC after training: 0.5
User 59288 does not improve AUC. Reverting changes.
Training on augumented user 10871 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10871 AUC after training: 0.5
User 10871 does not improve AUC. Reverting changes.
Training on augumented user 50872 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50872 AUC after training: 0.5
User 50872 does not improve AUC. Reverting changes.
Training on augumented user 42073 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42073 AUC after training: 0.5
User 42073 does not improve AUC. Reverting changes.
Training on augumented user 133534 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133534 AUC after training: 0.5
User 133534 does not improve AUC. Reverting changes.
Training on augumented user 68714 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68714 AUC after training: 0.5
User 68714 does not improve AUC. Reverting changes.
Training on augumented user 100271 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100271 AUC after training: 0.5
User 100271 does not improve AUC. Reverting changes.
Training on augumented user 34136 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34136 AUC after training: 0.5
User 34136 does not improve AUC. Reverting changes.
Training on augumented user 5963 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5963 AUC after training: 0.5
User 5963 does not improve AUC. Reverting changes.
Training on augumented user 16202 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16202 AUC after training: 0.5
User 16202 does not improve AUC. Reverting changes.
Training on augumented user 103967 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103967 AUC after training: 0.5
User 103967 does not improve AUC. Reverting changes.
Training on augumented user 129464 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129464 AUC after training: 0.5
User 129464 does not improve AUC. Reverting changes.
Training on augumented user 120859 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120859 AUC after training: 0.5
User 120859 does not improve AUC. Reverting changes.
Training on augumented user 97854 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97854 AUC after training: 0.5
User 97854 does not improve AUC. Reverting changes.
Training on augumented user 96707 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96707 AUC after training: 0.5
User 96707 does not improve AUC. Reverting changes.
Training on augumented user 55717 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55717 AUC after training: 0.5
User 55717 does not improve AUC. Reverting changes.
Training on augumented user 57788 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57788 AUC after training: 0.5
User 57788 does not improve AUC. Reverting changes.
Training on augumented user 123723 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123723 AUC after training: 0.5
User 123723 does not improve AUC. Reverting changes.
Training on augumented user 29687 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29687 AUC after training: 0.5
User 29687 does not improve AUC. Reverting changes.
Training on augumented user 62575 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62575 AUC after training: 0.5
User 62575 does not improve AUC. Reverting changes.
Training on augumented user 77902 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77902 AUC after training: 0.5
User 77902 does not improve AUC. Reverting changes.
Training on augumented user 94809 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94809 AUC after training: 0.5
User 94809 does not improve AUC. Reverting changes.
Training on augumented user 73094 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73094 AUC after training: 0.5
User 73094 does not improve AUC. Reverting changes.
Training on augumented user 41789 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41789 AUC after training: 0.5
User 41789 does not improve AUC. Reverting changes.
Training on augumented user 72528 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72528 AUC after training: 0.5
User 72528 does not improve AUC. Reverting changes.
Training on augumented user 132099 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132099 AUC after training: 0.5
User 132099 does not improve AUC. Reverting changes.
Training on augumented user 29562 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29562 AUC after training: 0.5
User 29562 does not improve AUC. Reverting changes.
Training on augumented user 50446 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50446 AUC after training: 0.5
User 50446 does not improve AUC. Reverting changes.
Training on augumented user 89440 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89440 AUC after training: 0.5
User 89440 does not improve AUC. Reverting changes.
Training on augumented user 7737 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7737 AUC after training: 0.5
User 7737 does not improve AUC. Reverting changes.
Training on augumented user 53876 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53876 AUC after training: 0.5
User 53876 does not improve AUC. Reverting changes.
Training on augumented user 116420 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116420 AUC after training: 0.5
User 116420 does not improve AUC. Reverting changes.
Training on augumented user 31202 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31202 AUC after training: 0.5
User 31202 does not improve AUC. Reverting changes.
Training on augumented user 103334 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103334 AUC after training: 0.5
User 103334 does not improve AUC. Reverting changes.
Training on augumented user 125492 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125492 AUC after training: 0.5
User 125492 does not improve AUC. Reverting changes.
Training on augumented user 90067 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90067 AUC after training: 0.5
User 90067 does not improve AUC. Reverting changes.
Training on augumented user 131347 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131347 AUC after training: 0.5
User 131347 does not improve AUC. Reverting changes.
Training on augumented user 103235 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103235 AUC after training: 0.5
User 103235 does not improve AUC. Reverting changes.
Training on augumented user 76000 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76000 AUC after training: 0.5
User 76000 does not improve AUC. Reverting changes.
Training on augumented user 48175 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48175 AUC after training: 0.5
User 48175 does not improve AUC. Reverting changes.
Training on augumented user 70991 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70991 AUC after training: 0.5
User 70991 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:04:38.458967] start test user 42682 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:38.885131] start test user 42682 49/568 recall augumented users by random, augumented_users = [8494, 39488, 68769, 28338, 113114, 81002, 107139, 96465, 135926, 101042, 93269, 28695, 124662, 71522, 95569, 88857, 64798, 43597, 73909, 69212, 7131, 60799, 32808, 16852, 30834, 943, 95845, 91845, 17033, 102230, 23006, 1608, 64541, 123640, 127928, 21952, 83942, 67312, 63212, 71329, 45310, 58327, 110139, 56379, 10531, 26175, 38301, 120619, 6757, 56661]
[2024-12-02 18:04:38.900095] user = 42682 Cloud 49/568
[2024-12-02 18:04:38.911048] user = 42682 Local 49/568
[2024-12-02 18:04:38.953473] user = 42682 Local+ 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:41.304265] user = 42682 MPDA- 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 8494 0/50 current_auc = 0.5
User 8494 AUC after training: 0.49579831932773105
User 8494 does not improve AUC. Reverting changes.
Training on augumented user 39488 1/50 current_auc = 0.5
User 39488 AUC after training: 0.49579831932773105
User 39488 does not improve AUC. Reverting changes.
Training on augumented user 68769 2/50 current_auc = 0.5
User 68769 AUC after training: 0.5
User 68769 does not improve AUC. Reverting changes.
Training on augumented user 28338 3/50 current_auc = 0.5
User 28338 AUC after training: 0.5
User 28338 does not improve AUC. Reverting changes.
Training on augumented user 113114 4/50 current_auc = 0.5
User 113114 AUC after training: 0.5
User 113114 does not improve AUC. Reverting changes.
Training on augumented user 81002 5/50 current_auc = 0.5
User 81002 AUC after training: 0.5
User 81002 does not improve AUC. Reverting changes.
Training on augumented user 107139 6/50 current_auc = 0.5
User 107139 AUC after training: 0.49579831932773105
User 107139 does not improve AUC. Reverting changes.
Training on augumented user 96465 7/50 current_auc = 0.5
User 96465 AUC after training: 0.5042016806722689
User 96465 improves AUC. Keeping the model.
Training on augumented user 135926 8/50 current_auc = 0.5042016806722689
User 135926 AUC after training: 0.5
User 135926 does not improve AUC. Reverting changes.
Training on augumented user 101042 9/50 current_auc = 0.5042016806722689
User 101042 AUC after training: 0.5042016806722689
User 101042 does not improve AUC. Reverting changes.
Training on augumented user 93269 10/50 current_auc = 0.5042016806722689
User 93269 AUC after training: 0.5042016806722689
User 93269 does not improve AUC. Reverting changes.
Training on augumented user 28695 11/50 current_auc = 0.5042016806722689
User 28695 AUC after training: 0.5042016806722689
User 28695 does not improve AUC. Reverting changes.
Training on augumented user 124662 12/50 current_auc = 0.5042016806722689
User 124662 AUC after training: 0.5
User 124662 does not improve AUC. Reverting changes.
Training on augumented user 71522 13/50 current_auc = 0.5042016806722689
User 71522 AUC after training: 0.5042016806722689
User 71522 does not improve AUC. Reverting changes.
Training on augumented user 95569 14/50 current_auc = 0.5042016806722689
User 95569 AUC after training: 0.4957983193277311
User 95569 does not improve AUC. Reverting changes.
Training on augumented user 88857 15/50 current_auc = 0.5042016806722689
User 88857 AUC after training: 0.4957983193277311
User 88857 does not improve AUC. Reverting changes.
Training on augumented user 64798 16/50 current_auc = 0.5042016806722689
User 64798 AUC after training: 0.5042016806722689
User 64798 does not improve AUC. Reverting changes.
Training on augumented user 43597 17/50 current_auc = 0.5042016806722689
User 43597 AUC after training: 0.5042016806722689
User 43597 does not improve AUC. Reverting changes.
Training on augumented user 73909 18/50 current_auc = 0.5042016806722689
User 73909 AUC after training: 0.5042016806722689
User 73909 does not improve AUC. Reverting changes.
Training on augumented user 69212 19/50 current_auc = 0.5042016806722689
User 69212 AUC after training: 0.5210084033613446
User 69212 improves AUC. Keeping the model.
Training on augumented user 7131 20/50 current_auc = 0.5210084033613446
User 7131 AUC after training: 0.5210084033613446
User 7131 does not improve AUC. Reverting changes.
Training on augumented user 60799 21/50 current_auc = 0.5210084033613446
User 60799 AUC after training: 0.5252100840336135
User 60799 improves AUC. Keeping the model.
Training on augumented user 32808 22/50 current_auc = 0.5252100840336135
User 32808 AUC after training: 0.5252100840336135
User 32808 does not improve AUC. Reverting changes.
Training on augumented user 16852 23/50 current_auc = 0.5252100840336135
User 16852 AUC after training: 0.5252100840336135
User 16852 does not improve AUC. Reverting changes.
Training on augumented user 30834 24/50 current_auc = 0.5252100840336135
User 30834 AUC after training: 0.5252100840336135
User 30834 does not improve AUC. Reverting changes.
Training on augumented user 943 25/50 current_auc = 0.5252100840336135
User 943 AUC after training: 0.5210084033613446
User 943 does not improve AUC. Reverting changes.
Training on augumented user 95845 26/50 current_auc = 0.5252100840336135
User 95845 AUC after training: 0.5252100840336135
User 95845 does not improve AUC. Reverting changes.
Training on augumented user 91845 27/50 current_auc = 0.5252100840336135
User 91845 AUC after training: 0.5168067226890757
User 91845 does not improve AUC. Reverting changes.
Training on augumented user 17033 28/50 current_auc = 0.5252100840336135
User 17033 AUC after training: 0.5252100840336135
User 17033 does not improve AUC. Reverting changes.
Training on augumented user 102230 29/50 current_auc = 0.5252100840336135
User 102230 AUC after training: 0.5210084033613446
User 102230 does not improve AUC. Reverting changes.
Training on augumented user 23006 30/50 current_auc = 0.5252100840336135
User 23006 AUC after training: 0.5210084033613446
User 23006 does not improve AUC. Reverting changes.
Training on augumented user 1608 31/50 current_auc = 0.5252100840336135
User 1608 AUC after training: 0.5126050420168068
User 1608 does not improve AUC. Reverting changes.
Training on augumented user 64541 32/50 current_auc = 0.5252100840336135
User 64541 AUC after training: 0.5210084033613446
User 64541 does not improve AUC. Reverting changes.
Training on augumented user 123640 33/50 current_auc = 0.5252100840336135
User 123640 AUC after training: 0.5210084033613446
User 123640 does not improve AUC. Reverting changes.
Training on augumented user 127928 34/50 current_auc = 0.5252100840336135
User 127928 AUC after training: 0.5252100840336135
User 127928 does not improve AUC. Reverting changes.
Training on augumented user 21952 35/50 current_auc = 0.5252100840336135
User 21952 AUC after training: 0.5252100840336135
User 21952 does not improve AUC. Reverting changes.
Training on augumented user 83942 36/50 current_auc = 0.5252100840336135
User 83942 AUC after training: 0.5210084033613446
User 83942 does not improve AUC. Reverting changes.
Training on augumented user 67312 37/50 current_auc = 0.5252100840336135
User 67312 AUC after training: 0.5252100840336135
User 67312 does not improve AUC. Reverting changes.
Training on augumented user 63212 38/50 current_auc = 0.5252100840336135
User 63212 AUC after training: 0.5252100840336135
User 63212 does not improve AUC. Reverting changes.
Training on augumented user 71329 39/50 current_auc = 0.5252100840336135
User 71329 AUC after training: 0.5210084033613446
User 71329 does not improve AUC. Reverting changes.
Training on augumented user 45310 40/50 current_auc = 0.5252100840336135
User 45310 AUC after training: 0.5210084033613446
User 45310 does not improve AUC. Reverting changes.
Training on augumented user 58327 41/50 current_auc = 0.5252100840336135
User 58327 AUC after training: 0.5210084033613446
User 58327 does not improve AUC. Reverting changes.
Training on augumented user 110139 42/50 current_auc = 0.5252100840336135
User 110139 AUC after training: 0.5210084033613446
User 110139 does not improve AUC. Reverting changes.
Training on augumented user 56379 43/50 current_auc = 0.5252100840336135
User 56379 AUC after training: 0.5252100840336135
User 56379 does not improve AUC. Reverting changes.
Training on augumented user 10531 44/50 current_auc = 0.5252100840336135
User 10531 AUC after training: 0.5252100840336135
User 10531 does not improve AUC. Reverting changes.
Training on augumented user 26175 45/50 current_auc = 0.5252100840336135
User 26175 AUC after training: 0.5168067226890757
User 26175 does not improve AUC. Reverting changes.
Training on augumented user 38301 46/50 current_auc = 0.5252100840336135
User 38301 AUC after training: 0.5168067226890757
User 38301 does not improve AUC. Reverting changes.
Training on augumented user 120619 47/50 current_auc = 0.5252100840336135
User 120619 AUC after training: 0.5168067226890757
User 120619 does not improve AUC. Reverting changes.
Training on augumented user 6757 48/50 current_auc = 0.5252100840336135
User 6757 AUC after training: 0.5210084033613446
User 6757 does not improve AUC. Reverting changes.
Training on augumented user 56661 49/50 current_auc = 0.5252100840336135
User 56661 AUC after training: 0.5210084033613446
User 56661 does not improve AUC. Reverting changes.
[2024-12-02 18:05:09.070727] start test user 42687 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:09.492258] start test user 42687 50/568 recall augumented users by random, augumented_users = [108697, 20867, 82757, 26261, 83548, 33736, 19970, 135291, 80170, 86410, 31328, 78200, 32917, 133977, 42638, 117268, 78402, 114281, 123516, 38235, 118007, 115774, 9696, 18086, 96683, 128209, 104570, 98613, 110420, 8306, 14911, 23267, 27369, 23546, 131036, 131856, 6320, 84425, 137216, 89079, 89252, 124318, 129973, 73378, 113249, 111650, 76242, 13669, 86075, 85096]
[2024-12-02 18:05:09.507347] user = 42687 Cloud 50/568
[2024-12-02 18:05:09.535000] user = 42687 Local 50/568
[2024-12-02 18:05:09.577786] user = 42687 Local+ 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:13.003874] user = 42687 MPDA- 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6413505747126437
Training on augumented user 108697 0/50 current_auc = 0.6413505747126437
User 108697 AUC after training: 0.6417528735632184
User 108697 improves AUC. Keeping the model.
Training on augumented user 20867 1/50 current_auc = 0.6417528735632184
User 20867 AUC after training: 0.6415229885057472
User 20867 does not improve AUC. Reverting changes.
Training on augumented user 82757 2/50 current_auc = 0.6417528735632184
User 82757 AUC after training: 0.640603448275862
User 82757 does not improve AUC. Reverting changes.
Training on augumented user 26261 3/50 current_auc = 0.6417528735632184
User 26261 AUC after training: 0.6414367816091954
User 26261 does not improve AUC. Reverting changes.
Training on augumented user 83548 4/50 current_auc = 0.6417528735632184
User 83548 AUC after training: 0.6410344827586207
User 83548 does not improve AUC. Reverting changes.
Training on augumented user 33736 5/50 current_auc = 0.6417528735632184
User 33736 AUC after training: 0.6390229885057471
User 33736 does not improve AUC. Reverting changes.
Training on augumented user 19970 6/50 current_auc = 0.6417528735632184
User 19970 AUC after training: 0.6412068965517241
User 19970 does not improve AUC. Reverting changes.
Training on augumented user 135291 7/50 current_auc = 0.6417528735632184
User 135291 AUC after training: 0.6416666666666666
User 135291 does not improve AUC. Reverting changes.
Training on augumented user 80170 8/50 current_auc = 0.6417528735632184
User 80170 AUC after training: 0.6414367816091955
User 80170 does not improve AUC. Reverting changes.
Training on augumented user 86410 9/50 current_auc = 0.6417528735632184
User 86410 AUC after training: 0.6408045977011495
User 86410 does not improve AUC. Reverting changes.
Training on augumented user 31328 10/50 current_auc = 0.6417528735632184
User 31328 AUC after training: 0.6411781609195403
User 31328 does not improve AUC. Reverting changes.
Training on augumented user 78200 11/50 current_auc = 0.6417528735632184
User 78200 AUC after training: 0.6411494252873564
User 78200 does not improve AUC. Reverting changes.
Training on augumented user 32917 12/50 current_auc = 0.6417528735632184
User 32917 AUC after training: 0.6410919540229885
User 32917 does not improve AUC. Reverting changes.
Training on augumented user 133977 13/50 current_auc = 0.6417528735632184
User 133977 AUC after training: 0.6409770114942528
User 133977 does not improve AUC. Reverting changes.
Training on augumented user 42638 14/50 current_auc = 0.6417528735632184
User 42638 AUC after training: 0.6408620689655173
User 42638 does not improve AUC. Reverting changes.
Training on augumented user 117268 15/50 current_auc = 0.6417528735632184
User 117268 AUC after training: 0.6407471264367817
User 117268 does not improve AUC. Reverting changes.
Training on augumented user 78402 16/50 current_auc = 0.6417528735632184
User 78402 AUC after training: 0.6413793103448275
User 78402 does not improve AUC. Reverting changes.
Training on augumented user 114281 17/50 current_auc = 0.6417528735632184
User 114281 AUC after training: 0.6413793103448275
User 114281 does not improve AUC. Reverting changes.
Training on augumented user 123516 18/50 current_auc = 0.6417528735632184
User 123516 AUC after training: 0.6416954022988506
User 123516 does not improve AUC. Reverting changes.
Training on augumented user 38235 19/50 current_auc = 0.6417528735632184
User 38235 AUC after training: 0.6420689655172414
User 38235 improves AUC. Keeping the model.
Training on augumented user 118007 20/50 current_auc = 0.6420689655172414
User 118007 AUC after training: 0.6416091954022989
User 118007 does not improve AUC. Reverting changes.
Training on augumented user 115774 21/50 current_auc = 0.6420689655172414
User 115774 AUC after training: 0.6416091954022989
User 115774 does not improve AUC. Reverting changes.
Training on augumented user 9696 22/50 current_auc = 0.6420689655172414
User 9696 AUC after training: 0.6413793103448276
User 9696 does not improve AUC. Reverting changes.
Training on augumented user 18086 23/50 current_auc = 0.6420689655172414
User 18086 AUC after training: 0.6420689655172414
User 18086 does not improve AUC. Reverting changes.
Training on augumented user 96683 24/50 current_auc = 0.6420689655172414
User 96683 AUC after training: 0.6420114942528735
User 96683 does not improve AUC. Reverting changes.
Training on augumented user 128209 25/50 current_auc = 0.6420689655172414
User 128209 AUC after training: 0.6417816091954023
User 128209 does not improve AUC. Reverting changes.
Training on augumented user 104570 26/50 current_auc = 0.6420689655172414
User 104570 AUC after training: 0.6422988505747126
User 104570 improves AUC. Keeping the model.
Training on augumented user 98613 27/50 current_auc = 0.6422988505747126
User 98613 AUC after training: 0.6413218390804597
User 98613 does not improve AUC. Reverting changes.
Training on augumented user 110420 28/50 current_auc = 0.6422988505747126
User 110420 AUC after training: 0.6409195402298851
User 110420 does not improve AUC. Reverting changes.
Training on augumented user 8306 29/50 current_auc = 0.6422988505747126
User 8306 AUC after training: 0.640574712643678
User 8306 does not improve AUC. Reverting changes.
Training on augumented user 14911 30/50 current_auc = 0.6422988505747126
User 14911 AUC after training: 0.641551724137931
User 14911 does not improve AUC. Reverting changes.
Training on augumented user 23267 31/50 current_auc = 0.6422988505747126
User 23267 AUC after training: 0.6418390804597701
User 23267 does not improve AUC. Reverting changes.
Training on augumented user 27369 32/50 current_auc = 0.6422988505747126
User 27369 AUC after training: 0.6417241379310346
User 27369 does not improve AUC. Reverting changes.
Training on augumented user 23546 33/50 current_auc = 0.6422988505747126
User 23546 AUC after training: 0.6420114942528736
User 23546 does not improve AUC. Reverting changes.
Training on augumented user 131036 34/50 current_auc = 0.6422988505747126
User 131036 AUC after training: 0.6413793103448275
User 131036 does not improve AUC. Reverting changes.
Training on augumented user 131856 35/50 current_auc = 0.6422988505747126
User 131856 AUC after training: 0.6404597701149426
User 131856 does not improve AUC. Reverting changes.
Training on augumented user 6320 36/50 current_auc = 0.6422988505747126
User 6320 AUC after training: 0.6417816091954023
User 6320 does not improve AUC. Reverting changes.
Training on augumented user 84425 37/50 current_auc = 0.6422988505747126
User 84425 AUC after training: 0.641896551724138
User 84425 does not improve AUC. Reverting changes.
Training on augumented user 137216 38/50 current_auc = 0.6422988505747126
User 137216 AUC after training: 0.6412356321839081
User 137216 does not improve AUC. Reverting changes.
Training on augumented user 89079 39/50 current_auc = 0.6422988505747126
User 89079 AUC after training: 0.642183908045977
User 89079 does not improve AUC. Reverting changes.
Training on augumented user 89252 40/50 current_auc = 0.6422988505747126
User 89252 AUC after training: 0.6414367816091954
User 89252 does not improve AUC. Reverting changes.
Training on augumented user 124318 41/50 current_auc = 0.6422988505747126
User 124318 AUC after training: 0.6414080459770115
User 124318 does not improve AUC. Reverting changes.
Training on augumented user 129973 42/50 current_auc = 0.6422988505747126
User 129973 AUC after training: 0.6412068965517241
User 129973 does not improve AUC. Reverting changes.
Training on augumented user 73378 43/50 current_auc = 0.6422988505747126
User 73378 AUC after training: 0.6408045977011494
User 73378 does not improve AUC. Reverting changes.
Training on augumented user 113249 44/50 current_auc = 0.6422988505747126
User 113249 AUC after training: 0.6417241379310346
User 113249 does not improve AUC. Reverting changes.
Training on augumented user 111650 45/50 current_auc = 0.6422988505747126
User 111650 AUC after training: 0.6418103448275863
User 111650 does not improve AUC. Reverting changes.
Training on augumented user 76242 46/50 current_auc = 0.6422988505747126
User 76242 AUC after training: 0.6411494252873563
User 76242 does not improve AUC. Reverting changes.
Training on augumented user 13669 47/50 current_auc = 0.6422988505747126
User 13669 AUC after training: 0.6413793103448275
User 13669 does not improve AUC. Reverting changes.
Training on augumented user 86075 48/50 current_auc = 0.6422988505747126
User 86075 AUC after training: 0.6416091954022989
User 86075 does not improve AUC. Reverting changes.
Training on augumented user 85096 49/50 current_auc = 0.6422988505747126
User 85096 AUC after training: 0.6410919540229885
User 85096 does not improve AUC. Reverting changes.
[2024-12-02 18:05:41.209417] start test user 42688 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:41.854341] start test user 42688 51/568 recall augumented users by random, augumented_users = [62809, 48572, 111939, 111728, 85384, 103396, 127068, 111628, 102426, 81665, 11564, 52996, 110740, 112289, 117070, 58943, 109909, 95115, 87784, 131976, 59239, 122410, 10446, 17415, 113660, 66181, 91557, 651, 74093, 57818, 52563, 32485, 24489, 48950, 38115, 77556, 53449, 81765, 126972, 87112, 110958, 87080, 1904, 81827, 67541, 47147, 107953, 60696, 65277, 76458]
[2024-12-02 18:05:41.870194] user = 42688 Cloud 51/568
[2024-12-02 18:05:41.888153] user = 42688 Local 51/568
[2024-12-02 18:05:41.988883] user = 42688 Local+ 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:45.064322] user = 42688 MPDA- 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6657142857142857
Training on augumented user 62809 0/50 current_auc = 0.6657142857142857
User 62809 AUC after training: 0.6666666666666667
User 62809 improves AUC. Keeping the model.
Training on augumented user 48572 1/50 current_auc = 0.6666666666666667
User 48572 AUC after training: 0.6676190476190477
User 48572 improves AUC. Keeping the model.
Training on augumented user 111939 2/50 current_auc = 0.6676190476190477
User 111939 AUC after training: 0.6685714285714286
User 111939 improves AUC. Keeping the model.
Training on augumented user 111728 3/50 current_auc = 0.6685714285714286
User 111728 AUC after training: 0.6676190476190477
User 111728 does not improve AUC. Reverting changes.
Training on augumented user 85384 4/50 current_auc = 0.6685714285714286
User 85384 AUC after training: 0.6695238095238095
User 85384 improves AUC. Keeping the model.
Training on augumented user 103396 5/50 current_auc = 0.6695238095238095
User 103396 AUC after training: 0.6714285714285714
User 103396 improves AUC. Keeping the model.
Training on augumented user 127068 6/50 current_auc = 0.6714285714285714
User 127068 AUC after training: 0.6733333333333333
User 127068 improves AUC. Keeping the model.
Training on augumented user 111628 7/50 current_auc = 0.6733333333333333
User 111628 AUC after training: 0.6704761904761904
User 111628 does not improve AUC. Reverting changes.
Training on augumented user 102426 8/50 current_auc = 0.6733333333333333
User 102426 AUC after training: 0.6742857142857143
User 102426 improves AUC. Keeping the model.
Training on augumented user 81665 9/50 current_auc = 0.6742857142857143
User 81665 AUC after training: 0.6723809523809523
User 81665 does not improve AUC. Reverting changes.
Training on augumented user 11564 10/50 current_auc = 0.6742857142857143
User 11564 AUC after training: 0.6723809523809523
User 11564 does not improve AUC. Reverting changes.
Training on augumented user 52996 11/50 current_auc = 0.6742857142857143
User 52996 AUC after training: 0.6695238095238095
User 52996 does not improve AUC. Reverting changes.
Training on augumented user 110740 12/50 current_auc = 0.6742857142857143
User 110740 AUC after training: 0.6723809523809523
User 110740 does not improve AUC. Reverting changes.
Training on augumented user 112289 13/50 current_auc = 0.6742857142857143
User 112289 AUC after training: 0.6733333333333333
User 112289 does not improve AUC. Reverting changes.
Training on augumented user 117070 14/50 current_auc = 0.6742857142857143
User 117070 AUC after training: 0.6742857142857143
User 117070 does not improve AUC. Reverting changes.
Training on augumented user 58943 15/50 current_auc = 0.6742857142857143
User 58943 AUC after training: 0.6676190476190477
User 58943 does not improve AUC. Reverting changes.
Training on augumented user 109909 16/50 current_auc = 0.6742857142857143
User 109909 AUC after training: 0.6723809523809524
User 109909 does not improve AUC. Reverting changes.
Training on augumented user 95115 17/50 current_auc = 0.6742857142857143
User 95115 AUC after training: 0.6733333333333333
User 95115 does not improve AUC. Reverting changes.
Training on augumented user 87784 18/50 current_auc = 0.6742857142857143
User 87784 AUC after training: 0.6733333333333333
User 87784 does not improve AUC. Reverting changes.
Training on augumented user 131976 19/50 current_auc = 0.6742857142857143
User 131976 AUC after training: 0.6723809523809524
User 131976 does not improve AUC. Reverting changes.
Training on augumented user 59239 20/50 current_auc = 0.6742857142857143
User 59239 AUC after training: 0.6704761904761904
User 59239 does not improve AUC. Reverting changes.
Training on augumented user 122410 21/50 current_auc = 0.6742857142857143
User 122410 AUC after training: 0.6723809523809524
User 122410 does not improve AUC. Reverting changes.
Training on augumented user 10446 22/50 current_auc = 0.6742857142857143
User 10446 AUC after training: 0.6742857142857143
User 10446 does not improve AUC. Reverting changes.
Training on augumented user 17415 23/50 current_auc = 0.6742857142857143
User 17415 AUC after training: 0.6733333333333333
User 17415 does not improve AUC. Reverting changes.
Training on augumented user 113660 24/50 current_auc = 0.6742857142857143
User 113660 AUC after training: 0.6742857142857144
User 113660 improves AUC. Keeping the model.
Training on augumented user 66181 25/50 current_auc = 0.6742857142857144
User 66181 AUC after training: 0.677142857142857
User 66181 improves AUC. Keeping the model.
Training on augumented user 91557 26/50 current_auc = 0.677142857142857
User 91557 AUC after training: 0.6742857142857142
User 91557 does not improve AUC. Reverting changes.
Training on augumented user 651 27/50 current_auc = 0.677142857142857
User 651 AUC after training: 0.6790476190476191
User 651 improves AUC. Keeping the model.
Training on augumented user 74093 28/50 current_auc = 0.6790476190476191
User 74093 AUC after training: 0.6723809523809523
User 74093 does not improve AUC. Reverting changes.
Training on augumented user 57818 29/50 current_auc = 0.6790476190476191
User 57818 AUC after training: 0.6771428571428573
User 57818 does not improve AUC. Reverting changes.
Training on augumented user 52563 30/50 current_auc = 0.6790476190476191
User 52563 AUC after training: 0.6771428571428572
User 52563 does not improve AUC. Reverting changes.
Training on augumented user 32485 31/50 current_auc = 0.6790476190476191
User 32485 AUC after training: 0.6790476190476191
User 32485 does not improve AUC. Reverting changes.
Training on augumented user 24489 32/50 current_auc = 0.6790476190476191
User 24489 AUC after training: 0.6733333333333333
User 24489 does not improve AUC. Reverting changes.
Training on augumented user 48950 33/50 current_auc = 0.6790476190476191
User 48950 AUC after training: 0.6752380952380953
User 48950 does not improve AUC. Reverting changes.
Training on augumented user 38115 34/50 current_auc = 0.6790476190476191
User 38115 AUC after training: 0.6761904761904762
User 38115 does not improve AUC. Reverting changes.
Training on augumented user 77556 35/50 current_auc = 0.6790476190476191
User 77556 AUC after training: 0.6771428571428572
User 77556 does not improve AUC. Reverting changes.
Training on augumented user 53449 36/50 current_auc = 0.6790476190476191
User 53449 AUC after training: 0.6780952380952381
User 53449 does not improve AUC. Reverting changes.
Training on augumented user 81765 37/50 current_auc = 0.6790476190476191
User 81765 AUC after training: 0.676190476190476
User 81765 does not improve AUC. Reverting changes.
Training on augumented user 126972 38/50 current_auc = 0.6790476190476191
User 126972 AUC after training: 0.6790476190476191
User 126972 does not improve AUC. Reverting changes.
Training on augumented user 87112 39/50 current_auc = 0.6790476190476191
User 87112 AUC after training: 0.677142857142857
User 87112 does not improve AUC. Reverting changes.
Training on augumented user 110958 40/50 current_auc = 0.6790476190476191
User 110958 AUC after training: 0.6771428571428572
User 110958 does not improve AUC. Reverting changes.
Training on augumented user 87080 41/50 current_auc = 0.6790476190476191
User 87080 AUC after training: 0.6742857142857144
User 87080 does not improve AUC. Reverting changes.
Training on augumented user 1904 42/50 current_auc = 0.6790476190476191
User 1904 AUC after training: 0.6752380952380952
User 1904 does not improve AUC. Reverting changes.
Training on augumented user 81827 43/50 current_auc = 0.6790476190476191
User 81827 AUC after training: 0.6780952380952381
User 81827 does not improve AUC. Reverting changes.
Training on augumented user 67541 44/50 current_auc = 0.6790476190476191
User 67541 AUC after training: 0.6723809523809523
User 67541 does not improve AUC. Reverting changes.
Training on augumented user 47147 45/50 current_auc = 0.6790476190476191
User 47147 AUC after training: 0.6780952380952381
User 47147 does not improve AUC. Reverting changes.
Training on augumented user 107953 46/50 current_auc = 0.6790476190476191
User 107953 AUC after training: 0.6780952380952381
User 107953 does not improve AUC. Reverting changes.
Training on augumented user 60696 47/50 current_auc = 0.6790476190476191
User 60696 AUC after training: 0.6752380952380952
User 60696 does not improve AUC. Reverting changes.
Training on augumented user 65277 48/50 current_auc = 0.6790476190476191
User 65277 AUC after training: 0.6771428571428572
User 65277 does not improve AUC. Reverting changes.
Training on augumented user 76458 49/50 current_auc = 0.6790476190476191
User 76458 AUC after training: 0.6780952380952381
User 76458 does not improve AUC. Reverting changes.
[2024-12-02 18:06:11.081239] start test user 42706 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:11.488296] start test user 42706 52/568 recall augumented users by random, augumented_users = [115261, 74536, 109439, 69007, 61145, 86783, 125515, 106992, 104096, 73704, 6198, 116887, 64471, 35069, 97391, 118828, 121872, 80004, 92331, 60390, 75563, 537, 89381, 94606, 117058, 67367, 107596, 58652, 38659, 55722, 86989, 37457, 98901, 49812, 107758, 57607, 83006, 78937, 7602, 70282, 23254, 134335, 16688, 69696, 105354, 126031, 102874, 67929, 43605, 28477]
[2024-12-02 18:06:11.503757] user = 42706 Cloud 52/568
[2024-12-02 18:06:11.553779] user = 42706 Local 52/568
[2024-12-02 18:06:11.653667] user = 42706 Local+ 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:13.160746] user = 42706 MPDA- 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6431710213776722
Training on augumented user 115261 0/50 current_auc = 0.6431710213776722
User 115261 AUC after training: 0.643230403800475
User 115261 improves AUC. Keeping the model.
Training on augumented user 74536 1/50 current_auc = 0.643230403800475
User 74536 AUC after training: 0.6431710213776721
User 74536 does not improve AUC. Reverting changes.
Training on augumented user 109439 2/50 current_auc = 0.643230403800475
User 109439 AUC after training: 0.6435273159144893
User 109439 improves AUC. Keeping the model.
Training on augumented user 69007 3/50 current_auc = 0.6435273159144893
User 69007 AUC after training: 0.6434085510688837
User 69007 does not improve AUC. Reverting changes.
Training on augumented user 61145 4/50 current_auc = 0.6435273159144893
User 61145 AUC after training: 0.6437054631828979
User 61145 improves AUC. Keeping the model.
Training on augumented user 86783 5/50 current_auc = 0.6437054631828979
User 86783 AUC after training: 0.6432304038004751
User 86783 does not improve AUC. Reverting changes.
Training on augumented user 125515 6/50 current_auc = 0.6437054631828979
User 125515 AUC after training: 0.6437648456057007
User 125515 improves AUC. Keeping the model.
Training on augumented user 106992 7/50 current_auc = 0.6437648456057007
User 106992 AUC after training: 0.6435273159144893
User 106992 does not improve AUC. Reverting changes.
Training on augumented user 104096 8/50 current_auc = 0.6437648456057007
User 104096 AUC after training: 0.6436460807600951
User 104096 does not improve AUC. Reverting changes.
Training on augumented user 73704 9/50 current_auc = 0.6437648456057007
User 73704 AUC after training: 0.6435273159144893
User 73704 does not improve AUC. Reverting changes.
Training on augumented user 6198 10/50 current_auc = 0.6437648456057007
User 6198 AUC after training: 0.6437648456057007
User 6198 does not improve AUC. Reverting changes.
Training on augumented user 116887 11/50 current_auc = 0.6437648456057007
User 116887 AUC after training: 0.643646080760095
User 116887 does not improve AUC. Reverting changes.
Training on augumented user 64471 12/50 current_auc = 0.6437648456057007
User 64471 AUC after training: 0.6435866983372921
User 64471 does not improve AUC. Reverting changes.
Training on augumented user 35069 13/50 current_auc = 0.6437648456057007
User 35069 AUC after training: 0.6434085510688836
User 35069 does not improve AUC. Reverting changes.
Training on augumented user 97391 14/50 current_auc = 0.6437648456057007
User 97391 AUC after training: 0.6433491686460808
User 97391 does not improve AUC. Reverting changes.
Training on augumented user 118828 15/50 current_auc = 0.6437648456057007
User 118828 AUC after training: 0.6436460807600949
User 118828 does not improve AUC. Reverting changes.
Training on augumented user 121872 16/50 current_auc = 0.6437648456057007
User 121872 AUC after training: 0.6437054631828978
User 121872 does not improve AUC. Reverting changes.
Training on augumented user 80004 17/50 current_auc = 0.6437648456057007
User 80004 AUC after training: 0.6433491686460807
User 80004 does not improve AUC. Reverting changes.
Training on augumented user 92331 18/50 current_auc = 0.6437648456057007
User 92331 AUC after training: 0.6437648456057008
User 92331 improves AUC. Keeping the model.
Training on augumented user 60390 19/50 current_auc = 0.6437648456057008
User 60390 AUC after training: 0.6437054631828979
User 60390 does not improve AUC. Reverting changes.
Training on augumented user 75563 20/50 current_auc = 0.6437648456057008
User 75563 AUC after training: 0.6439429928741092
User 75563 improves AUC. Keeping the model.
Training on augumented user 537 21/50 current_auc = 0.6439429928741092
User 537 AUC after training: 0.6440023752969122
User 537 improves AUC. Keeping the model.
Training on augumented user 89381 22/50 current_auc = 0.6440023752969122
User 89381 AUC after training: 0.6434679334916864
User 89381 does not improve AUC. Reverting changes.
Training on augumented user 94606 23/50 current_auc = 0.6440023752969122
User 94606 AUC after training: 0.6440023752969121
User 94606 does not improve AUC. Reverting changes.
Training on augumented user 117058 24/50 current_auc = 0.6440023752969122
User 117058 AUC after training: 0.6438836104513064
User 117058 does not improve AUC. Reverting changes.
Training on augumented user 67367 25/50 current_auc = 0.6440023752969122
User 67367 AUC after training: 0.6437648456057007
User 67367 does not improve AUC. Reverting changes.
Training on augumented user 107596 26/50 current_auc = 0.6440023752969122
User 107596 AUC after training: 0.6443586698337292
User 107596 improves AUC. Keeping the model.
Training on augumented user 58652 27/50 current_auc = 0.6443586698337292
User 58652 AUC after training: 0.6431710213776722
User 58652 does not improve AUC. Reverting changes.
Training on augumented user 38659 28/50 current_auc = 0.6443586698337292
User 38659 AUC after training: 0.6442992874109263
User 38659 does not improve AUC. Reverting changes.
Training on augumented user 55722 29/50 current_auc = 0.6443586698337292
User 55722 AUC after training: 0.6445368171021378
User 55722 improves AUC. Keeping the model.
Training on augumented user 86989 30/50 current_auc = 0.6445368171021378
User 86989 AUC after training: 0.6449524940617578
User 86989 improves AUC. Keeping the model.
Training on augumented user 37457 31/50 current_auc = 0.6449524940617578
User 37457 AUC after training: 0.6447149643705462
User 37457 does not improve AUC. Reverting changes.
Training on augumented user 98901 32/50 current_auc = 0.6449524940617578
User 98901 AUC after training: 0.6445961995249406
User 98901 does not improve AUC. Reverting changes.
Training on augumented user 49812 33/50 current_auc = 0.6449524940617578
User 49812 AUC after training: 0.6448931116389549
User 49812 does not improve AUC. Reverting changes.
Training on augumented user 107758 34/50 current_auc = 0.6449524940617578
User 107758 AUC after training: 0.6448931116389549
User 107758 does not improve AUC. Reverting changes.
Training on augumented user 57607 35/50 current_auc = 0.6449524940617578
User 57607 AUC after training: 0.644833729216152
User 57607 does not improve AUC. Reverting changes.
Training on augumented user 83006 36/50 current_auc = 0.6449524940617578
User 83006 AUC after training: 0.6446555819477434
User 83006 does not improve AUC. Reverting changes.
Training on augumented user 78937 37/50 current_auc = 0.6449524940617578
User 78937 AUC after training: 0.6445368171021377
User 78937 does not improve AUC. Reverting changes.
Training on augumented user 7602 38/50 current_auc = 0.6449524940617578
User 7602 AUC after training: 0.6447743467933492
User 7602 does not improve AUC. Reverting changes.
Training on augumented user 70282 39/50 current_auc = 0.6449524940617578
User 70282 AUC after training: 0.6441805225653208
User 70282 does not improve AUC. Reverting changes.
Training on augumented user 23254 40/50 current_auc = 0.6449524940617578
User 23254 AUC after training: 0.6447149643705463
User 23254 does not improve AUC. Reverting changes.
Training on augumented user 134335 41/50 current_auc = 0.6449524940617578
User 134335 AUC after training: 0.6447149643705462
User 134335 does not improve AUC. Reverting changes.
Training on augumented user 16688 42/50 current_auc = 0.6449524940617578
User 16688 AUC after training: 0.6447743467933491
User 16688 does not improve AUC. Reverting changes.
Training on augumented user 69696 43/50 current_auc = 0.6449524940617578
User 69696 AUC after training: 0.644833729216152
User 69696 does not improve AUC. Reverting changes.
Training on augumented user 105354 44/50 current_auc = 0.6449524940617578
User 105354 AUC after training: 0.6450118764845606
User 105354 improves AUC. Keeping the model.
Training on augumented user 126031 45/50 current_auc = 0.6450118764845606
User 126031 AUC after training: 0.6447149643705463
User 126031 does not improve AUC. Reverting changes.
Training on augumented user 102874 46/50 current_auc = 0.6450118764845606
User 102874 AUC after training: 0.6448931116389548
User 102874 does not improve AUC. Reverting changes.
Training on augumented user 67929 47/50 current_auc = 0.6450118764845606
User 67929 AUC after training: 0.6445368171021377
User 67929 does not improve AUC. Reverting changes.
Training on augumented user 43605 48/50 current_auc = 0.6450118764845606
User 43605 AUC after training: 0.6446555819477434
User 43605 does not improve AUC. Reverting changes.
Training on augumented user 28477 49/50 current_auc = 0.6450118764845606
User 28477 AUC after training: 0.6450712589073635
User 28477 improves AUC. Keeping the model.
[2024-12-02 18:06:45.643991] start test user 42784 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:46.642734] start test user 42784 53/568 recall augumented users by random, augumented_users = [74884, 14335, 118579, 130337, 40829, 69364, 9533, 82730, 130526, 42261, 81921, 87474, 13301, 81667, 128542, 10180, 132808, 122746, 48333, 123715, 45450, 83343, 37347, 27385, 1058, 107024, 1736, 64936, 134302, 120405, 68101, 45226, 64991, 122994, 116139, 121104, 45618, 41806, 108293, 27520, 76446, 40615, 31014, 1264, 83851, 102649, 121668, 117357, 56343, 79480]
[2024-12-02 18:06:46.661649] user = 42784 Cloud 53/568
[2024-12-02 18:06:46.674069] user = 42784 Local 53/568
[2024-12-02 18:06:46.828155] user = 42784 Local+ 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:49.940216] user = 42784 MPDA- 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9
Training on augumented user 74884 0/50 current_auc = 0.9
User 74884 AUC after training: 0.9
User 74884 does not improve AUC. Reverting changes.
Training on augumented user 14335 1/50 current_auc = 0.9
User 14335 AUC after training: 0.9
User 14335 does not improve AUC. Reverting changes.
Training on augumented user 118579 2/50 current_auc = 0.9
User 118579 AUC after training: 0.9
User 118579 does not improve AUC. Reverting changes.
Training on augumented user 130337 3/50 current_auc = 0.9
User 130337 AUC after training: 0.9
User 130337 does not improve AUC. Reverting changes.
Training on augumented user 40829 4/50 current_auc = 0.9
User 40829 AUC after training: 0.9
User 40829 does not improve AUC. Reverting changes.
Training on augumented user 69364 5/50 current_auc = 0.9
User 69364 AUC after training: 0.9
User 69364 does not improve AUC. Reverting changes.
Training on augumented user 9533 6/50 current_auc = 0.9
User 9533 AUC after training: 0.9
User 9533 does not improve AUC. Reverting changes.
Training on augumented user 82730 7/50 current_auc = 0.9
User 82730 AUC after training: 0.9
User 82730 does not improve AUC. Reverting changes.
Training on augumented user 130526 8/50 current_auc = 0.9
User 130526 AUC after training: 0.9
User 130526 does not improve AUC. Reverting changes.
Training on augumented user 42261 9/50 current_auc = 0.9
User 42261 AUC after training: 0.9
User 42261 does not improve AUC. Reverting changes.
Training on augumented user 81921 10/50 current_auc = 0.9
User 81921 AUC after training: 0.9
User 81921 does not improve AUC. Reverting changes.
Training on augumented user 87474 11/50 current_auc = 0.9
User 87474 AUC after training: 0.9
User 87474 does not improve AUC. Reverting changes.
Training on augumented user 13301 12/50 current_auc = 0.9
User 13301 AUC after training: 0.9
User 13301 does not improve AUC. Reverting changes.
Training on augumented user 81667 13/50 current_auc = 0.9
User 81667 AUC after training: 0.9
User 81667 does not improve AUC. Reverting changes.
Training on augumented user 128542 14/50 current_auc = 0.9
User 128542 AUC after training: 0.875
User 128542 does not improve AUC. Reverting changes.
Training on augumented user 10180 15/50 current_auc = 0.9
User 10180 AUC after training: 0.9
User 10180 does not improve AUC. Reverting changes.
Training on augumented user 132808 16/50 current_auc = 0.9
User 132808 AUC after training: 0.9
User 132808 does not improve AUC. Reverting changes.
Training on augumented user 122746 17/50 current_auc = 0.9
User 122746 AUC after training: 0.9
User 122746 does not improve AUC. Reverting changes.
Training on augumented user 48333 18/50 current_auc = 0.9
User 48333 AUC after training: 0.9
User 48333 does not improve AUC. Reverting changes.
Training on augumented user 123715 19/50 current_auc = 0.9
User 123715 AUC after training: 0.9
User 123715 does not improve AUC. Reverting changes.
Training on augumented user 45450 20/50 current_auc = 0.9
User 45450 AUC after training: 0.9
User 45450 does not improve AUC. Reverting changes.
Training on augumented user 83343 21/50 current_auc = 0.9
User 83343 AUC after training: 0.9
User 83343 does not improve AUC. Reverting changes.
Training on augumented user 37347 22/50 current_auc = 0.9
User 37347 AUC after training: 0.9
User 37347 does not improve AUC. Reverting changes.
Training on augumented user 27385 23/50 current_auc = 0.9
User 27385 AUC after training: 0.9
User 27385 does not improve AUC. Reverting changes.
Training on augumented user 1058 24/50 current_auc = 0.9
User 1058 AUC after training: 0.9
User 1058 does not improve AUC. Reverting changes.
Training on augumented user 107024 25/50 current_auc = 0.9
User 107024 AUC after training: 0.9
User 107024 does not improve AUC. Reverting changes.
Training on augumented user 1736 26/50 current_auc = 0.9
User 1736 AUC after training: 0.9
User 1736 does not improve AUC. Reverting changes.
Training on augumented user 64936 27/50 current_auc = 0.9
User 64936 AUC after training: 0.9
User 64936 does not improve AUC. Reverting changes.
Training on augumented user 134302 28/50 current_auc = 0.9
User 134302 AUC after training: 0.9
User 134302 does not improve AUC. Reverting changes.
Training on augumented user 120405 29/50 current_auc = 0.9
User 120405 AUC after training: 0.9
User 120405 does not improve AUC. Reverting changes.
Training on augumented user 68101 30/50 current_auc = 0.9
User 68101 AUC after training: 0.9
User 68101 does not improve AUC. Reverting changes.
Training on augumented user 45226 31/50 current_auc = 0.9
User 45226 AUC after training: 0.9
User 45226 does not improve AUC. Reverting changes.
Training on augumented user 64991 32/50 current_auc = 0.9
User 64991 AUC after training: 0.9
User 64991 does not improve AUC. Reverting changes.
Training on augumented user 122994 33/50 current_auc = 0.9
User 122994 AUC after training: 0.9
User 122994 does not improve AUC. Reverting changes.
Training on augumented user 116139 34/50 current_auc = 0.9
User 116139 AUC after training: 0.8875
User 116139 does not improve AUC. Reverting changes.
Training on augumented user 121104 35/50 current_auc = 0.9
User 121104 AUC after training: 0.9
User 121104 does not improve AUC. Reverting changes.
Training on augumented user 45618 36/50 current_auc = 0.9
User 45618 AUC after training: 0.9
User 45618 does not improve AUC. Reverting changes.
Training on augumented user 41806 37/50 current_auc = 0.9
User 41806 AUC after training: 0.9
User 41806 does not improve AUC. Reverting changes.
Training on augumented user 108293 38/50 current_auc = 0.9
User 108293 AUC after training: 0.9
User 108293 does not improve AUC. Reverting changes.
Training on augumented user 27520 39/50 current_auc = 0.9
User 27520 AUC after training: 0.9
User 27520 does not improve AUC. Reverting changes.
Training on augumented user 76446 40/50 current_auc = 0.9
User 76446 AUC after training: 0.9
User 76446 does not improve AUC. Reverting changes.
Training on augumented user 40615 41/50 current_auc = 0.9
User 40615 AUC after training: 0.9
User 40615 does not improve AUC. Reverting changes.
Training on augumented user 31014 42/50 current_auc = 0.9
User 31014 AUC after training: 0.9
User 31014 does not improve AUC. Reverting changes.
Training on augumented user 1264 43/50 current_auc = 0.9
User 1264 AUC after training: 0.9
User 1264 does not improve AUC. Reverting changes.
Training on augumented user 83851 44/50 current_auc = 0.9
User 83851 AUC after training: 0.9
User 83851 does not improve AUC. Reverting changes.
Training on augumented user 102649 45/50 current_auc = 0.9
User 102649 AUC after training: 0.9
User 102649 does not improve AUC. Reverting changes.
Training on augumented user 121668 46/50 current_auc = 0.9
User 121668 AUC after training: 0.9
User 121668 does not improve AUC. Reverting changes.
Training on augumented user 117357 47/50 current_auc = 0.9
User 117357 AUC after training: 0.9
User 117357 does not improve AUC. Reverting changes.
Training on augumented user 56343 48/50 current_auc = 0.9
User 56343 AUC after training: 0.9
User 56343 does not improve AUC. Reverting changes.
Training on augumented user 79480 49/50 current_auc = 0.9
User 79480 AUC after training: 0.9
User 79480 does not improve AUC. Reverting changes.
[2024-12-02 18:07:20.930813] start test user 42836 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:21.644408] start test user 42836 54/568 recall augumented users by random, augumented_users = [102832, 44048, 119826, 81831, 42087, 69114, 41792, 90495, 131224, 128506, 3201, 127353, 131489, 136947, 125033, 104483, 117924, 114164, 97296, 18384, 13614, 37432, 32187, 94137, 115651, 78052, 27995, 17129, 34873, 50315, 116279, 54719, 132054, 130236, 56255, 42678, 76653, 106559, 82352, 17622, 1225, 5979, 50256, 97139, 15148, 93547, 13810, 59055, 103393, 128042]
[2024-12-02 18:07:21.659716] user = 42836 Cloud 54/568
[2024-12-02 18:07:21.678618] user = 42836 Local 54/568
[2024-12-02 18:07:21.783939] user = 42836 Local+ 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:23.797882] user = 42836 MPDA- 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5610766045548654
Training on augumented user 102832 0/50 current_auc = 0.5610766045548654
User 102832 AUC after training: 0.5607315389924086
User 102832 does not improve AUC. Reverting changes.
Training on augumented user 44048 1/50 current_auc = 0.5610766045548654
User 44048 AUC after training: 0.5614216701173222
User 44048 improves AUC. Keeping the model.
Training on augumented user 119826 2/50 current_auc = 0.5614216701173222
User 119826 AUC after training: 0.5610766045548654
User 119826 does not improve AUC. Reverting changes.
Training on augumented user 81831 3/50 current_auc = 0.5614216701173222
User 81831 AUC after training: 0.5612491373360938
User 81831 does not improve AUC. Reverting changes.
Training on augumented user 42087 4/50 current_auc = 0.5614216701173222
User 42087 AUC after training: 0.560904071773637
User 42087 does not improve AUC. Reverting changes.
Training on augumented user 69114 5/50 current_auc = 0.5614216701173222
User 69114 AUC after training: 0.5607315389924085
User 69114 does not improve AUC. Reverting changes.
Training on augumented user 41792 6/50 current_auc = 0.5614216701173222
User 41792 AUC after training: 0.5605590062111802
User 41792 does not improve AUC. Reverting changes.
Training on augumented user 90495 7/50 current_auc = 0.5614216701173222
User 90495 AUC after training: 0.5626293995859213
User 90495 improves AUC. Keeping the model.
Training on augumented user 131224 8/50 current_auc = 0.5626293995859213
User 131224 AUC after training: 0.5659075224292616
User 131224 improves AUC. Keeping the model.
Training on augumented user 128506 9/50 current_auc = 0.5659075224292616
User 128506 AUC after training: 0.5612491373360938
User 128506 does not improve AUC. Reverting changes.
Training on augumented user 3201 10/50 current_auc = 0.5659075224292616
User 3201 AUC after training: 0.5614216701173222
User 3201 does not improve AUC. Reverting changes.
Training on augumented user 127353 11/50 current_auc = 0.5659075224292616
User 127353 AUC after training: 0.5667701863354037
User 127353 improves AUC. Keeping the model.
Training on augumented user 131489 12/50 current_auc = 0.5667701863354037
User 131489 AUC after training: 0.5665976535541752
User 131489 does not improve AUC. Reverting changes.
Training on augumented user 136947 13/50 current_auc = 0.5667701863354037
User 136947 AUC after training: 0.5678053830227743
User 136947 improves AUC. Keeping the model.
Training on augumented user 125033 14/50 current_auc = 0.5678053830227743
User 125033 AUC after training: 0.5667701863354037
User 125033 does not improve AUC. Reverting changes.
Training on augumented user 104483 15/50 current_auc = 0.5678053830227743
User 104483 AUC after training: 0.5662525879917184
User 104483 does not improve AUC. Reverting changes.
Training on augumented user 117924 16/50 current_auc = 0.5678053830227743
User 117924 AUC after training: 0.5619392684610076
User 117924 does not improve AUC. Reverting changes.
Training on augumented user 114164 17/50 current_auc = 0.5678053830227743
User 114164 AUC after training: 0.5671152518978606
User 114164 does not improve AUC. Reverting changes.
Training on augumented user 97296 18/50 current_auc = 0.5678053830227743
User 97296 AUC after training: 0.567287784679089
User 97296 does not improve AUC. Reverting changes.
Training on augumented user 18384 19/50 current_auc = 0.5678053830227743
User 18384 AUC after training: 0.5646997929606625
User 18384 does not improve AUC. Reverting changes.
Training on augumented user 13614 20/50 current_auc = 0.5678053830227743
User 13614 AUC after training: 0.5669427191166321
User 13614 does not improve AUC. Reverting changes.
Training on augumented user 37432 21/50 current_auc = 0.5678053830227743
User 37432 AUC after training: 0.567632850241546
User 37432 does not improve AUC. Reverting changes.
Training on augumented user 32187 22/50 current_auc = 0.5678053830227743
User 32187 AUC after training: 0.5671152518978606
User 32187 does not improve AUC. Reverting changes.
Training on augumented user 94137 23/50 current_auc = 0.5678053830227743
User 94137 AUC after training: 0.5636645962732919
User 94137 does not improve AUC. Reverting changes.
Training on augumented user 115651 24/50 current_auc = 0.5678053830227743
User 115651 AUC after training: 0.5678053830227744
User 115651 improves AUC. Keeping the model.
Training on augumented user 78052 25/50 current_auc = 0.5678053830227744
User 78052 AUC after training: 0.5678053830227743
User 78052 does not improve AUC. Reverting changes.
Training on augumented user 27995 26/50 current_auc = 0.5678053830227744
User 27995 AUC after training: 0.5688405797101449
User 27995 improves AUC. Keeping the model.
Training on augumented user 17129 27/50 current_auc = 0.5688405797101449
User 17129 AUC after training: 0.5678053830227743
User 17129 does not improve AUC. Reverting changes.
Training on augumented user 34873 28/50 current_auc = 0.5688405797101449
User 34873 AUC after training: 0.5686680469289165
User 34873 does not improve AUC. Reverting changes.
Training on augumented user 50315 29/50 current_auc = 0.5688405797101449
User 50315 AUC after training: 0.5705659075224292
User 50315 improves AUC. Keeping the model.
Training on augumented user 116279 30/50 current_auc = 0.5705659075224292
User 116279 AUC after training: 0.5681504485852311
User 116279 does not improve AUC. Reverting changes.
Training on augumented user 54719 31/50 current_auc = 0.5705659075224292
User 54719 AUC after training: 0.5671152518978606
User 54719 does not improve AUC. Reverting changes.
Training on augumented user 132054 32/50 current_auc = 0.5705659075224292
User 132054 AUC after training: 0.5702208419599725
User 132054 does not improve AUC. Reverting changes.
Training on augumented user 130236 33/50 current_auc = 0.5705659075224292
User 130236 AUC after training: 0.5669427191166322
User 130236 does not improve AUC. Reverting changes.
Training on augumented user 56255 34/50 current_auc = 0.5705659075224292
User 56255 AUC after training: 0.5702208419599724
User 56255 does not improve AUC. Reverting changes.
Training on augumented user 42678 35/50 current_auc = 0.5705659075224292
User 42678 AUC after training: 0.572463768115942
User 42678 improves AUC. Keeping the model.
Training on augumented user 76653 36/50 current_auc = 0.572463768115942
User 76653 AUC after training: 0.5702208419599724
User 76653 does not improve AUC. Reverting changes.
Training on augumented user 106559 37/50 current_auc = 0.572463768115942
User 106559 AUC after training: 0.5667701863354037
User 106559 does not improve AUC. Reverting changes.
Training on augumented user 82352 38/50 current_auc = 0.572463768115942
User 82352 AUC after training: 0.5652173913043478
User 82352 does not improve AUC. Reverting changes.
Training on augumented user 17622 39/50 current_auc = 0.572463768115942
User 17622 AUC after training: 0.5716011042097998
User 17622 does not improve AUC. Reverting changes.
Training on augumented user 1225 40/50 current_auc = 0.572463768115942
User 1225 AUC after training: 0.5721187025534852
User 1225 does not improve AUC. Reverting changes.
Training on augumented user 5979 41/50 current_auc = 0.572463768115942
User 5979 AUC after training: 0.5731538992408558
User 5979 improves AUC. Keeping the model.
Training on augumented user 50256 42/50 current_auc = 0.5731538992408558
User 50256 AUC after training: 0.5714285714285714
User 50256 does not improve AUC. Reverting changes.
Training on augumented user 97139 43/50 current_auc = 0.5731538992408558
User 97139 AUC after training: 0.5736714975845411
User 97139 improves AUC. Keeping the model.
Training on augumented user 15148 44/50 current_auc = 0.5736714975845411
User 15148 AUC after training: 0.5702208419599724
User 15148 does not improve AUC. Reverting changes.
Training on augumented user 93547 45/50 current_auc = 0.5736714975845411
User 93547 AUC after training: 0.5714285714285714
User 93547 does not improve AUC. Reverting changes.
Training on augumented user 13810 46/50 current_auc = 0.5736714975845411
User 13810 AUC after training: 0.5717736369910282
User 13810 does not improve AUC. Reverting changes.
Training on augumented user 59055 47/50 current_auc = 0.5736714975845411
User 59055 AUC after training: 0.5722912353347136
User 59055 does not improve AUC. Reverting changes.
Training on augumented user 103393 48/50 current_auc = 0.5736714975845411
User 103393 AUC after training: 0.5707384403036577
User 103393 does not improve AUC. Reverting changes.
Training on augumented user 128042 49/50 current_auc = 0.5736714975845411
User 128042 AUC after training: 0.5686680469289165
User 128042 does not improve AUC. Reverting changes.
[2024-12-02 18:07:50.685166] start test user 42871 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:50.921521] start test user 42871 55/568 recall augumented users by random, augumented_users = [70174, 80269, 78299, 21659, 45776, 133990, 20674, 59397, 83706, 31132, 89465, 125311, 138117, 124918, 16196, 86637, 67941, 9977, 95581, 13032, 10458, 1463, 130817, 124602, 34983, 71523, 131942, 82231, 64844, 41596, 49461, 8030, 103286, 125589, 39671, 118721, 78099, 26158, 26514, 106064, 138137, 48490, 49716, 114405, 117367, 71283, 124895, 112376, 116465, 93048]
[2024-12-02 18:07:50.930813] user = 42871 Cloud 55/568
[2024-12-02 18:07:50.952000] user = 42871 Local 55/568
[2024-12-02 18:07:51.019570] user = 42871 Local+ 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:51.781137] user = 42871 MPDA- 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7809200603318251
Training on augumented user 70174 0/50 current_auc = 0.7809200603318251
User 70174 AUC after training: 0.7782969375040987
User 70174 does not improve AUC. Reverting changes.
Training on augumented user 80269 1/50 current_auc = 0.7809200603318251
User 80269 AUC after training: 0.7803298576955866
User 80269 does not improve AUC. Reverting changes.
Training on augumented user 78299 2/50 current_auc = 0.7809200603318251
User 78299 AUC after training: 0.7799363892714276
User 78299 does not improve AUC. Reverting changes.
Training on augumented user 21659 3/50 current_auc = 0.7809200603318251
User 21659 AUC after training: 0.7804938028723195
User 21659 does not improve AUC. Reverting changes.
Training on augumented user 45776 4/50 current_auc = 0.7809200603318251
User 45776 AUC after training: 0.7794117647058825
User 45776 does not improve AUC. Reverting changes.
Training on augumented user 133990 5/50 current_auc = 0.7809200603318251
User 133990 AUC after training: 0.7796740769886551
User 133990 does not improve AUC. Reverting changes.
Training on augumented user 20674 6/50 current_auc = 0.7809200603318251
User 20674 AUC after training: 0.7802970686602401
User 20674 does not improve AUC. Reverting changes.
Training on augumented user 59397 7/50 current_auc = 0.7809200603318251
User 59397 AUC after training: 0.7808216932257853
User 59397 does not improve AUC. Reverting changes.
Training on augumented user 83706 8/50 current_auc = 0.7809200603318251
User 83706 AUC after training: 0.7821004656043019
User 83706 improves AUC. Keeping the model.
Training on augumented user 31132 9/50 current_auc = 0.7821004656043019
User 31132 AUC after training: 0.7826250901698472
User 31132 improves AUC. Keeping the model.
Training on augumented user 89465 10/50 current_auc = 0.7826250901698472
User 89465 AUC after training: 0.7816742081447964
User 89465 does not improve AUC. Reverting changes.
Training on augumented user 125311 11/50 current_auc = 0.7826250901698472
User 125311 AUC after training: 0.7822644107810349
User 125311 does not improve AUC. Reverting changes.
Training on augumented user 138117 12/50 current_auc = 0.7826250901698472
User 138117 AUC after training: 0.7821988327103416
User 138117 does not improve AUC. Reverting changes.
Training on augumented user 124918 13/50 current_auc = 0.7826250901698472
User 124918 AUC after training: 0.7797396550593482
User 124918 does not improve AUC. Reverting changes.
Training on augumented user 16196 14/50 current_auc = 0.7826250901698472
User 16196 AUC after training: 0.7821004656043019
User 16196 does not improve AUC. Reverting changes.
Training on augumented user 86637 15/50 current_auc = 0.7826250901698472
User 86637 AUC after training: 0.781313528755984
User 86637 does not improve AUC. Reverting changes.
Training on augumented user 67941 16/50 current_auc = 0.7826250901698472
User 67941 AUC after training: 0.7825923011345006
User 67941 does not improve AUC. Reverting changes.
Training on augumented user 9977 17/50 current_auc = 0.7826250901698472
User 9977 AUC after training: 0.7816414191094498
User 9977 does not improve AUC. Reverting changes.
Training on augumented user 95581 18/50 current_auc = 0.7826250901698472
User 95581 AUC after training: 0.78029706866024
User 95581 does not improve AUC. Reverting changes.
Training on augumented user 13032 19/50 current_auc = 0.7826250901698472
User 13032 AUC after training: 0.7827562463112335
User 13032 improves AUC. Keeping the model.
Training on augumented user 10458 20/50 current_auc = 0.7827562463112335
User 10458 AUC after training: 0.7830841366646993
User 10458 improves AUC. Keeping the model.
Training on augumented user 1463 21/50 current_auc = 0.7830841366646993
User 1463 AUC after training: 0.7829529805233131
User 1463 does not improve AUC. Reverting changes.
Training on augumented user 130817 22/50 current_auc = 0.7830841366646993
User 130817 AUC after training: 0.783346448947472
User 130817 improves AUC. Keeping the model.
Training on augumented user 124602 23/50 current_auc = 0.783346448947472
User 124602 AUC after training: 0.7834776050888583
User 124602 improves AUC. Keeping the model.
Training on augumented user 34983 24/50 current_auc = 0.7834776050888583
User 34983 AUC after training: 0.7830841366646993
User 34983 does not improve AUC. Reverting changes.
Training on augumented user 71523 25/50 current_auc = 0.7834776050888583
User 71523 AUC after training: 0.7834448160535118
User 71523 does not improve AUC. Reverting changes.
Training on augumented user 131942 26/50 current_auc = 0.7834776050888583
User 131942 AUC after training: 0.783412027018165
User 131942 does not improve AUC. Reverting changes.
Training on augumented user 82231 27/50 current_auc = 0.7834776050888583
User 82231 AUC after training: 0.7829201914879664
User 82231 does not improve AUC. Reverting changes.
Training on augumented user 64844 28/50 current_auc = 0.7834776050888583
User 64844 AUC after training: 0.7837727064069775
User 64844 improves AUC. Keeping the model.
Training on augumented user 41596 29/50 current_auc = 0.7837727064069775
User 41596 AUC after training: 0.7833136599121254
User 41596 does not improve AUC. Reverting changes.
Training on augumented user 49461 30/50 current_auc = 0.7837727064069775
User 49461 AUC after training: 0.7838710735130172
User 49461 improves AUC. Keeping the model.
Training on augumented user 8030 31/50 current_auc = 0.7838710735130172
User 8030 AUC after training: 0.783575972194898
User 8030 does not improve AUC. Reverting changes.
Training on augumented user 103286 32/50 current_auc = 0.7838710735130172
User 103286 AUC after training: 0.7838382844776708
User 103286 does not improve AUC. Reverting changes.
Training on augumented user 125589 33/50 current_auc = 0.7838710735130172
User 125589 AUC after training: 0.7836415502655911
User 125589 does not improve AUC. Reverting changes.
Training on augumented user 39671 34/50 current_auc = 0.7838710735130172
User 39671 AUC after training: 0.7831825037707391
User 39671 does not improve AUC. Reverting changes.
Training on augumented user 118721 35/50 current_auc = 0.7838710735130172
User 118721 AUC after training: 0.7837071283362843
User 118721 does not improve AUC. Reverting changes.
Training on augumented user 78099 36/50 current_auc = 0.7838710735130172
User 78099 AUC after training: 0.783739917371631
User 78099 does not improve AUC. Reverting changes.
Training on augumented user 26158 37/50 current_auc = 0.7838710735130172
User 26158 AUC after training: 0.7831497147353925
User 26158 does not improve AUC. Reverting changes.
Training on augumented user 26514 38/50 current_auc = 0.7838710735130172
User 26514 AUC after training: 0.7834120270181651
User 26514 does not improve AUC. Reverting changes.
Training on augumented user 106064 39/50 current_auc = 0.7838710735130172
User 106064 AUC after training: 0.7836743393009378
User 106064 does not improve AUC. Reverting changes.
Training on augumented user 138137 40/50 current_auc = 0.7838710735130172
User 138137 AUC after training: 0.7836743393009378
User 138137 does not improve AUC. Reverting changes.
Training on augumented user 48490 41/50 current_auc = 0.7838710735130172
User 48490 AUC after training: 0.7839038625483639
User 48490 improves AUC. Keeping the model.
Training on augumented user 49716 42/50 current_auc = 0.7839038625483639
User 49716 AUC after training: 0.7840514132074233
User 49716 improves AUC. Keeping the model.
Training on augumented user 114405 43/50 current_auc = 0.7840514132074233
User 114405 AUC after training: 0.7840678077250968
User 114405 improves AUC. Keeping the model.
Training on augumented user 117367 44/50 current_auc = 0.7840678077250968
User 117367 AUC after training: 0.7837071283362843
User 117367 does not improve AUC. Reverting changes.
Training on augumented user 71283 45/50 current_auc = 0.7840678077250968
User 71283 AUC after training: 0.7835103941242049
User 71283 does not improve AUC. Reverting changes.
Training on augumented user 124895 46/50 current_auc = 0.7840678077250968
User 124895 AUC after training: 0.7836743393009377
User 124895 does not improve AUC. Reverting changes.
Training on augumented user 112376 47/50 current_auc = 0.7840678077250968
User 112376 AUC after training: 0.7835431831595514
User 112376 does not improve AUC. Reverting changes.
Training on augumented user 116465 48/50 current_auc = 0.7840678077250968
User 116465 AUC after training: 0.7843301200078694
User 116465 improves AUC. Keeping the model.
Training on augumented user 93048 49/50 current_auc = 0.7843301200078694
User 93048 AUC after training: 0.7842317529018296
User 93048 does not improve AUC. Reverting changes.
[2024-12-02 18:08:15.148073] start test user 42886 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:16.072870] start test user 42886 56/568 recall augumented users by random, augumented_users = [43619, 123300, 127547, 36003, 137718, 12585, 63236, 14808, 50929, 104797, 48595, 136737, 30863, 48698, 35313, 132521, 137889, 57797, 3663, 138284, 80733, 109694, 16, 104235, 72186, 52541, 94243, 49606, 103857, 72848, 55071, 66111, 7996, 83047, 25042, 49808, 3393, 99812, 100401, 114599, 49322, 13983, 11764, 122346, 36032, 87567, 64769, 2950, 89138, 136844]
[2024-12-02 18:08:16.089260] user = 42886 Cloud 56/568
[2024-12-02 18:08:16.212311] user = 42886 Local 56/568
[2024-12-02 18:08:16.376306] user = 42886 Local+ 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:19.700415] user = 42886 MPDA- 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.776040588113481
Training on augumented user 43619 0/50 current_auc = 0.776040588113481
User 43619 AUC after training: 0.776089770138745
User 43619 improves AUC. Keeping the model.
Training on augumented user 123300 1/50 current_auc = 0.776089770138745
User 123300 AUC after training: 0.7760250569476081
User 123300 does not improve AUC. Reverting changes.
Training on augumented user 127547 2/50 current_auc = 0.776089770138745
User 127547 AUC after training: 0.7762864982398012
User 127547 improves AUC. Keeping the model.
Training on augumented user 36003 3/50 current_auc = 0.7762864982398012
User 36003 AUC after training: 0.7761324808448953
User 36003 does not improve AUC. Reverting changes.
Training on augumented user 137718 4/50 current_auc = 0.7762864982398012
User 137718 AUC after training: 0.7760172913646717
User 137718 does not improve AUC. Reverting changes.
Training on augumented user 12585 5/50 current_auc = 0.7762864982398012
User 12585 AUC after training: 0.7762140194657279
User 12585 does not improve AUC. Reverting changes.
Training on augumented user 63236 6/50 current_auc = 0.7762864982398012
User 63236 AUC after training: 0.7757377303789603
User 63236 does not improve AUC. Reverting changes.
Training on augumented user 14808 7/50 current_auc = 0.7762864982398012
User 14808 AUC after training: 0.776075533236695
User 14808 does not improve AUC. Reverting changes.
Training on augumented user 50929 8/50 current_auc = 0.7762864982398012
User 50929 AUC after training: 0.7762140194657279
User 50929 does not improve AUC. Reverting changes.
Training on augumented user 104797 9/50 current_auc = 0.7762864982398012
User 104797 AUC after training: 0.7764055705114932
User 104797 improves AUC. Keeping the model.
Training on augumented user 48595 10/50 current_auc = 0.7764055705114932
User 48595 AUC after training: 0.7766100641954856
User 48595 improves AUC. Keeping the model.
Training on augumented user 136737 11/50 current_auc = 0.7766100641954856
User 136737 AUC after training: 0.7764353385794159
User 136737 does not improve AUC. Reverting changes.
Training on augumented user 30863 12/50 current_auc = 0.7766100641954856
User 30863 AUC after training: 0.7762580244357009
User 30863 does not improve AUC. Reverting changes.
Training on augumented user 48698 13/50 current_auc = 0.7766100641954856
User 48698 AUC after training: 0.7767369020501139
User 48698 improves AUC. Keeping the model.
Training on augumented user 35313 14/50 current_auc = 0.7767369020501139
User 35313 AUC after training: 0.7766010043487264
User 35313 does not improve AUC. Reverting changes.
Training on augumented user 132521 15/50 current_auc = 0.7767369020501139
User 132521 AUC after training: 0.7767990267136052
User 132521 improves AUC. Keeping the model.
Training on augumented user 137889 16/50 current_auc = 0.7767990267136052
User 137889 AUC after training: 0.7767136053013046
User 137889 does not improve AUC. Reverting changes.
Training on augumented user 57797 17/50 current_auc = 0.7767990267136052
User 57797 AUC after training: 0.7770863532822531
User 57797 improves AUC. Keeping the model.
Training on augumented user 3663 18/50 current_auc = 0.7770863532822531
User 3663 AUC after training: 0.7766928970801408
User 3663 does not improve AUC. Reverting changes.
Training on augumented user 138284 19/50 current_auc = 0.7770863532822531
User 138284 AUC after training: 0.777091530337544
User 138284 improves AUC. Keeping the model.
Training on augumented user 80733 20/50 current_auc = 0.777091530337544
User 80733 AUC after training: 0.7768585628494512
User 80733 does not improve AUC. Reverting changes.
Training on augumented user 109694 21/50 current_auc = 0.777091530337544
User 109694 AUC after training: 0.7771433008904534
User 109694 improves AUC. Keeping the model.
Training on augumented user 16 22/50 current_auc = 0.7771433008904534
User 16 AUC after training: 0.7771588320563264
User 16 improves AUC. Keeping the model.
Training on augumented user 104235 23/50 current_auc = 0.7771588320563264
User 104235 AUC after training: 0.7764547525367571
User 104235 does not improve AUC. Reverting changes.
Training on augumented user 72186 24/50 current_auc = 0.7771588320563264
User 72186 AUC after training: 0.7769155104576517
User 72186 does not improve AUC. Reverting changes.
Training on augumented user 52541 25/50 current_auc = 0.7771588320563264
User 52541 AUC after training: 0.7770708221163802
User 52541 does not improve AUC. Reverting changes.
Training on augumented user 94243 26/50 current_auc = 0.7771588320563264
User 94243 AUC after training: 0.7771200041416442
User 94243 does not improve AUC. Reverting changes.
Training on augumented user 49606 27/50 current_auc = 0.7771588320563264
User 49606 AUC after training: 0.7771433008904536
User 49606 does not improve AUC. Reverting changes.
Training on augumented user 103857 28/50 current_auc = 0.7771588320563264
User 103857 AUC after training: 0.777184717332781
User 103857 improves AUC. Keeping the model.
Training on augumented user 72848 29/50 current_auc = 0.777184717332781
User 72848 AUC after training: 0.777086353282253
User 72848 does not improve AUC. Reverting changes.
Training on augumented user 55071 30/50 current_auc = 0.777184717332781
User 55071 AUC after training: 0.777037171256989
User 55071 does not improve AUC. Reverting changes.
Training on augumented user 66111 31/50 current_auc = 0.777184717332781
User 66111 AUC after training: 0.7771303582522261
User 66111 does not improve AUC. Reverting changes.
Training on augumented user 7996 32/50 current_auc = 0.777184717332781
User 7996 AUC after training: 0.7766540691654586
User 7996 does not improve AUC. Reverting changes.
Training on augumented user 83047 33/50 current_auc = 0.777184717332781
User 83047 AUC after training: 0.7772287223027543
User 83047 improves AUC. Keeping the model.
Training on augumented user 25042 34/50 current_auc = 0.7772287223027543
User 25042 AUC after training: 0.7773024953406502
User 25042 improves AUC. Keeping the model.
Training on augumented user 49808 35/50 current_auc = 0.7773024953406502
User 49808 AUC after training: 0.7772131911368814
User 49808 does not improve AUC. Reverting changes.
Training on augumented user 3393 36/50 current_auc = 0.7773024953406502
User 3393 AUC after training: 0.7770734106440257
User 3393 does not improve AUC. Reverting changes.
Training on augumented user 99812 37/50 current_auc = 0.7773024953406502
User 99812 AUC after training: 0.7772843756471319
User 99812 does not improve AUC. Reverting changes.
Training on augumented user 100401 38/50 current_auc = 0.7773024953406502
User 100401 AUC after training: 0.7772131911368814
User 100401 does not improve AUC. Reverting changes.
Training on augumented user 114599 39/50 current_auc = 0.7773024953406502
User 114599 AUC after training: 0.7771329467798715
User 114599 does not improve AUC. Reverting changes.
Training on augumented user 49322 40/50 current_auc = 0.7773024953406502
User 49322 AUC after training: 0.7771536550010354
User 49322 does not improve AUC. Reverting changes.
Training on augumented user 13983 41/50 current_auc = 0.7773024953406502
User 13983 AUC after training: 0.7772390764133361
User 13983 does not improve AUC. Reverting changes.
Training on augumented user 11764 42/50 current_auc = 0.7773024953406502
User 11764 AUC after training: 0.7773167322427004
User 11764 improves AUC. Keeping the model.
Training on augumented user 122346 43/50 current_auc = 0.7773167322427004
User 122346 AUC after training: 0.7771665976392627
User 122346 does not improve AUC. Reverting changes.
Training on augumented user 36032 44/50 current_auc = 0.7773167322427004
User 36032 AUC after training: 0.777456512735556
User 36032 improves AUC. Keeping the model.
Training on augumented user 87567 45/50 current_auc = 0.777456512735556
User 87567 AUC after training: 0.777081176226962
User 87567 does not improve AUC. Reverting changes.
Training on augumented user 64769 46/50 current_auc = 0.777456512735556
User 64769 AUC after training: 0.7774616897908471
User 64769 improves AUC. Keeping the model.
Training on augumented user 2950 47/50 current_auc = 0.7774616897908471
User 2950 AUC after training: 0.7770785876993166
User 2950 does not improve AUC. Reverting changes.
Training on augumented user 89138 48/50 current_auc = 0.7774616897908471
User 89138 AUC after training: 0.7774953406502382
User 89138 improves AUC. Keeping the model.
Training on augumented user 136844 49/50 current_auc = 0.7774953406502382
User 136844 AUC after training: 0.7770294056740527
User 136844 does not improve AUC. Reverting changes.
[2024-12-02 18:08:55.535083] start test user 42895 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:55.974726] start test user 42895 57/568 recall augumented users by random, augumented_users = [85761, 77824, 6849, 120492, 104569, 42421, 7693, 44252, 113006, 51497, 12280, 22766, 23341, 9463, 36300, 126089, 31627, 72148, 10082, 75370, 121487, 27057, 134133, 16822, 16192, 70961, 48205, 45783, 12132, 39147, 79087, 3161, 60383, 97421, 98439, 110398, 59322, 56567, 58137, 113415, 100517, 14717, 131809, 74078, 16662, 81451, 63444, 131916, 100099, 68903]
[2024-12-02 18:08:55.989729] user = 42895 Cloud 57/568
[2024-12-02 18:08:56.001540] user = 42895 Local 57/568
[2024-12-02 18:08:56.057406] user = 42895 Local+ 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:58.364157] user = 42895 MPDA- 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5853994490358128
Training on augumented user 85761 0/50 current_auc = 0.5853994490358128
User 85761 AUC after training: 0.5853994490358128
User 85761 does not improve AUC. Reverting changes.
Training on augumented user 77824 1/50 current_auc = 0.5853994490358128
User 77824 AUC after training: 0.5853994490358128
User 77824 does not improve AUC. Reverting changes.
Training on augumented user 6849 2/50 current_auc = 0.5853994490358128
User 6849 AUC after training: 0.5840220385674931
User 6849 does not improve AUC. Reverting changes.
Training on augumented user 120492 3/50 current_auc = 0.5853994490358128
User 120492 AUC after training: 0.5867768595041323
User 120492 improves AUC. Keeping the model.
Training on augumented user 104569 4/50 current_auc = 0.5867768595041323
User 104569 AUC after training: 0.5867768595041323
User 104569 does not improve AUC. Reverting changes.
Training on augumented user 42421 5/50 current_auc = 0.5867768595041323
User 42421 AUC after training: 0.5867768595041323
User 42421 does not improve AUC. Reverting changes.
Training on augumented user 7693 6/50 current_auc = 0.5867768595041323
User 7693 AUC after training: 0.5881542699724518
User 7693 improves AUC. Keeping the model.
Training on augumented user 44252 7/50 current_auc = 0.5881542699724518
User 44252 AUC after training: 0.59366391184573
User 44252 improves AUC. Keeping the model.
Training on augumented user 113006 8/50 current_auc = 0.59366391184573
User 113006 AUC after training: 0.5922865013774105
User 113006 does not improve AUC. Reverting changes.
Training on augumented user 51497 9/50 current_auc = 0.59366391184573
User 51497 AUC after training: 0.5881542699724518
User 51497 does not improve AUC. Reverting changes.
Training on augumented user 12280 10/50 current_auc = 0.59366391184573
User 12280 AUC after training: 0.5881542699724518
User 12280 does not improve AUC. Reverting changes.
Training on augumented user 22766 11/50 current_auc = 0.59366391184573
User 22766 AUC after training: 0.59366391184573
User 22766 does not improve AUC. Reverting changes.
Training on augumented user 23341 12/50 current_auc = 0.59366391184573
User 23341 AUC after training: 0.5895316804407713
User 23341 does not improve AUC. Reverting changes.
Training on augumented user 9463 13/50 current_auc = 0.59366391184573
User 9463 AUC after training: 0.5881542699724518
User 9463 does not improve AUC. Reverting changes.
Training on augumented user 36300 14/50 current_auc = 0.59366391184573
User 36300 AUC after training: 0.5895316804407713
User 36300 does not improve AUC. Reverting changes.
Training on augumented user 126089 15/50 current_auc = 0.59366391184573
User 126089 AUC after training: 0.5895316804407713
User 126089 does not improve AUC. Reverting changes.
Training on augumented user 31627 16/50 current_auc = 0.59366391184573
User 31627 AUC after training: 0.5881542699724518
User 31627 does not improve AUC. Reverting changes.
Training on augumented user 72148 17/50 current_auc = 0.59366391184573
User 72148 AUC after training: 0.5936639118457301
User 72148 improves AUC. Keeping the model.
Training on augumented user 10082 18/50 current_auc = 0.5936639118457301
User 10082 AUC after training: 0.5867768595041323
User 10082 does not improve AUC. Reverting changes.
Training on augumented user 75370 19/50 current_auc = 0.5936639118457301
User 75370 AUC after training: 0.5977961432506887
User 75370 improves AUC. Keeping the model.
Training on augumented user 121487 20/50 current_auc = 0.5977961432506887
User 121487 AUC after training: 0.5977961432506887
User 121487 does not improve AUC. Reverting changes.
Training on augumented user 27057 21/50 current_auc = 0.5977961432506887
User 27057 AUC after training: 0.5977961432506886
User 27057 does not improve AUC. Reverting changes.
Training on augumented user 134133 22/50 current_auc = 0.5977961432506887
User 134133 AUC after training: 0.59366391184573
User 134133 does not improve AUC. Reverting changes.
Training on augumented user 16822 23/50 current_auc = 0.5977961432506887
User 16822 AUC after training: 0.5964187327823691
User 16822 does not improve AUC. Reverting changes.
Training on augumented user 16192 24/50 current_auc = 0.5977961432506887
User 16192 AUC after training: 0.5977961432506887
User 16192 does not improve AUC. Reverting changes.
Training on augumented user 70961 25/50 current_auc = 0.5977961432506887
User 70961 AUC after training: 0.5977961432506887
User 70961 does not improve AUC. Reverting changes.
Training on augumented user 48205 26/50 current_auc = 0.5977961432506887
User 48205 AUC after training: 0.5964187327823691
User 48205 does not improve AUC. Reverting changes.
Training on augumented user 45783 27/50 current_auc = 0.5977961432506887
User 45783 AUC after training: 0.5991735537190083
User 45783 improves AUC. Keeping the model.
Training on augumented user 12132 28/50 current_auc = 0.5991735537190083
User 12132 AUC after training: 0.5950413223140495
User 12132 does not improve AUC. Reverting changes.
Training on augumented user 39147 29/50 current_auc = 0.5991735537190083
User 39147 AUC after training: 0.5964187327823691
User 39147 does not improve AUC. Reverting changes.
Training on augumented user 79087 30/50 current_auc = 0.5991735537190083
User 79087 AUC after training: 0.5977961432506887
User 79087 does not improve AUC. Reverting changes.
Training on augumented user 3161 31/50 current_auc = 0.5991735537190083
User 3161 AUC after training: 0.5964187327823691
User 3161 does not improve AUC. Reverting changes.
Training on augumented user 60383 32/50 current_auc = 0.5991735537190083
User 60383 AUC after training: 0.5977961432506887
User 60383 does not improve AUC. Reverting changes.
Training on augumented user 97421 33/50 current_auc = 0.5991735537190083
User 97421 AUC after training: 0.59366391184573
User 97421 does not improve AUC. Reverting changes.
Training on augumented user 98439 34/50 current_auc = 0.5991735537190083
User 98439 AUC after training: 0.5881542699724518
User 98439 does not improve AUC. Reverting changes.
Training on augumented user 110398 35/50 current_auc = 0.5991735537190083
User 110398 AUC after training: 0.5964187327823691
User 110398 does not improve AUC. Reverting changes.
Training on augumented user 59322 36/50 current_auc = 0.5991735537190083
User 59322 AUC after training: 0.5977961432506887
User 59322 does not improve AUC. Reverting changes.
Training on augumented user 56567 37/50 current_auc = 0.5991735537190083
User 56567 AUC after training: 0.5964187327823691
User 56567 does not improve AUC. Reverting changes.
Training on augumented user 58137 38/50 current_auc = 0.5991735537190083
User 58137 AUC after training: 0.5977961432506887
User 58137 does not improve AUC. Reverting changes.
Training on augumented user 113415 39/50 current_auc = 0.5991735537190083
User 113415 AUC after training: 0.5977961432506887
User 113415 does not improve AUC. Reverting changes.
Training on augumented user 100517 40/50 current_auc = 0.5991735537190083
User 100517 AUC after training: 0.5964187327823691
User 100517 does not improve AUC. Reverting changes.
Training on augumented user 14717 41/50 current_auc = 0.5991735537190083
User 14717 AUC after training: 0.5964187327823691
User 14717 does not improve AUC. Reverting changes.
Training on augumented user 131809 42/50 current_auc = 0.5991735537190083
User 131809 AUC after training: 0.5964187327823691
User 131809 does not improve AUC. Reverting changes.
Training on augumented user 74078 43/50 current_auc = 0.5991735537190083
User 74078 AUC after training: 0.5977961432506887
User 74078 does not improve AUC. Reverting changes.
Training on augumented user 16662 44/50 current_auc = 0.5991735537190083
User 16662 AUC after training: 0.5977961432506887
User 16662 does not improve AUC. Reverting changes.
Training on augumented user 81451 45/50 current_auc = 0.5991735537190083
User 81451 AUC after training: 0.5950413223140496
User 81451 does not improve AUC. Reverting changes.
Training on augumented user 63444 46/50 current_auc = 0.5991735537190083
User 63444 AUC after training: 0.5867768595041323
User 63444 does not improve AUC. Reverting changes.
Training on augumented user 131916 47/50 current_auc = 0.5991735537190083
User 131916 AUC after training: 0.5936639118457301
User 131916 does not improve AUC. Reverting changes.
Training on augumented user 100099 48/50 current_auc = 0.5991735537190083
User 100099 AUC after training: 0.5964187327823691
User 100099 does not improve AUC. Reverting changes.
Training on augumented user 68903 49/50 current_auc = 0.5991735537190083
User 68903 AUC after training: 0.5909090909090908
User 68903 does not improve AUC. Reverting changes.
[2024-12-02 18:09:23.038746] start test user 42910 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:23.580444] start test user 42910 58/568 recall augumented users by random, augumented_users = [94651, 54671, 69526, 112700, 92794, 82850, 34751, 118152, 86854, 66622, 66687, 28970, 70441, 27641, 125774, 79236, 28724, 25856, 37711, 71775, 57298, 17969, 80554, 71591, 45772, 49969, 116474, 29448, 55872, 37574, 94259, 129637, 137437, 18429, 22764, 82452, 69078, 40193, 7366, 56835, 5925, 40829, 90887, 45502, 70122, 137660, 64877, 129798, 119753, 127061]
[2024-12-02 18:09:23.595624] user = 42910 Cloud 58/568
[2024-12-02 18:09:23.612799] user = 42910 Local 58/568
[2024-12-02 18:09:23.707947] user = 42910 Local+ 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:25.770807] user = 42910 MPDA- 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7806372549019608
Training on augumented user 94651 0/50 current_auc = 0.7806372549019608
User 94651 AUC after training: 0.7794117647058824
User 94651 does not improve AUC. Reverting changes.
Training on augumented user 54671 1/50 current_auc = 0.7806372549019608
User 54671 AUC after training: 0.7806372549019608
User 54671 does not improve AUC. Reverting changes.
Training on augumented user 69526 2/50 current_auc = 0.7806372549019608
User 69526 AUC after training: 0.7772671568627452
User 69526 does not improve AUC. Reverting changes.
Training on augumented user 112700 3/50 current_auc = 0.7806372549019608
User 112700 AUC after training: 0.7781862745098039
User 112700 does not improve AUC. Reverting changes.
Training on augumented user 92794 4/50 current_auc = 0.7806372549019608
User 92794 AUC after training: 0.7800245098039216
User 92794 does not improve AUC. Reverting changes.
Training on augumented user 82850 5/50 current_auc = 0.7806372549019608
User 82850 AUC after training: 0.7809436274509804
User 82850 improves AUC. Keeping the model.
Training on augumented user 34751 6/50 current_auc = 0.7809436274509804
User 34751 AUC after training: 0.7800245098039216
User 34751 does not improve AUC. Reverting changes.
Training on augumented user 118152 7/50 current_auc = 0.7809436274509804
User 118152 AUC after training: 0.7803308823529412
User 118152 does not improve AUC. Reverting changes.
Training on augumented user 86854 8/50 current_auc = 0.7809436274509804
User 86854 AUC after training: 0.779718137254902
User 86854 does not improve AUC. Reverting changes.
Training on augumented user 66622 9/50 current_auc = 0.7809436274509804
User 66622 AUC after training: 0.7760416666666666
User 66622 does not improve AUC. Reverting changes.
Training on augumented user 66687 10/50 current_auc = 0.7809436274509804
User 66687 AUC after training: 0.7803308823529412
User 66687 does not improve AUC. Reverting changes.
Training on augumented user 28970 11/50 current_auc = 0.7809436274509804
User 28970 AUC after training: 0.7800245098039216
User 28970 does not improve AUC. Reverting changes.
Training on augumented user 70441 12/50 current_auc = 0.7809436274509804
User 70441 AUC after training: 0.7800245098039216
User 70441 does not improve AUC. Reverting changes.
Training on augumented user 27641 13/50 current_auc = 0.7809436274509804
User 27641 AUC after training: 0.779718137254902
User 27641 does not improve AUC. Reverting changes.
Training on augumented user 125774 14/50 current_auc = 0.7809436274509804
User 125774 AUC after training: 0.7781862745098039
User 125774 does not improve AUC. Reverting changes.
Training on augumented user 79236 15/50 current_auc = 0.7809436274509804
User 79236 AUC after training: 0.7806372549019608
User 79236 does not improve AUC. Reverting changes.
Training on augumented user 28724 16/50 current_auc = 0.7809436274509804
User 28724 AUC after training: 0.7781862745098039
User 28724 does not improve AUC. Reverting changes.
Training on augumented user 25856 17/50 current_auc = 0.7809436274509804
User 25856 AUC after training: 0.78125
User 25856 improves AUC. Keeping the model.
Training on augumented user 37711 18/50 current_auc = 0.78125
User 37711 AUC after training: 0.779718137254902
User 37711 does not improve AUC. Reverting changes.
Training on augumented user 71775 19/50 current_auc = 0.78125
User 71775 AUC after training: 0.7806372549019607
User 71775 does not improve AUC. Reverting changes.
Training on augumented user 57298 20/50 current_auc = 0.78125
User 57298 AUC after training: 0.78125
User 57298 does not improve AUC. Reverting changes.
Training on augumented user 17969 21/50 current_auc = 0.78125
User 17969 AUC after training: 0.7806372549019608
User 17969 does not improve AUC. Reverting changes.
Training on augumented user 80554 22/50 current_auc = 0.78125
User 80554 AUC after training: 0.7806372549019608
User 80554 does not improve AUC. Reverting changes.
Training on augumented user 71591 23/50 current_auc = 0.78125
User 71591 AUC after training: 0.78125
User 71591 does not improve AUC. Reverting changes.
Training on augumented user 45772 24/50 current_auc = 0.78125
User 45772 AUC after training: 0.7806372549019607
User 45772 does not improve AUC. Reverting changes.
Training on augumented user 49969 25/50 current_auc = 0.78125
User 49969 AUC after training: 0.7800245098039216
User 49969 does not improve AUC. Reverting changes.
Training on augumented user 116474 26/50 current_auc = 0.78125
User 116474 AUC after training: 0.7806372549019608
User 116474 does not improve AUC. Reverting changes.
Training on augumented user 29448 27/50 current_auc = 0.78125
User 29448 AUC after training: 0.7809436274509804
User 29448 does not improve AUC. Reverting changes.
Training on augumented user 55872 28/50 current_auc = 0.78125
User 55872 AUC after training: 0.78125
User 55872 does not improve AUC. Reverting changes.
Training on augumented user 37574 29/50 current_auc = 0.78125
User 37574 AUC after training: 0.779718137254902
User 37574 does not improve AUC. Reverting changes.
Training on augumented user 94259 30/50 current_auc = 0.78125
User 94259 AUC after training: 0.7787990196078431
User 94259 does not improve AUC. Reverting changes.
Training on augumented user 129637 31/50 current_auc = 0.78125
User 129637 AUC after training: 0.78125
User 129637 does not improve AUC. Reverting changes.
Training on augumented user 137437 32/50 current_auc = 0.78125
User 137437 AUC after training: 0.7806372549019608
User 137437 does not improve AUC. Reverting changes.
Training on augumented user 18429 33/50 current_auc = 0.78125
User 18429 AUC after training: 0.7800245098039216
User 18429 does not improve AUC. Reverting changes.
Training on augumented user 22764 34/50 current_auc = 0.78125
User 22764 AUC after training: 0.776654411764706
User 22764 does not improve AUC. Reverting changes.
Training on augumented user 82452 35/50 current_auc = 0.78125
User 82452 AUC after training: 0.78125
User 82452 does not improve AUC. Reverting changes.
Training on augumented user 69078 36/50 current_auc = 0.78125
User 69078 AUC after training: 0.7806372549019607
User 69078 does not improve AUC. Reverting changes.
Training on augumented user 40193 37/50 current_auc = 0.78125
User 40193 AUC after training: 0.7806372549019607
User 40193 does not improve AUC. Reverting changes.
Training on augumented user 7366 38/50 current_auc = 0.78125
User 7366 AUC after training: 0.78125
User 7366 does not improve AUC. Reverting changes.
Training on augumented user 56835 39/50 current_auc = 0.78125
User 56835 AUC after training: 0.7800245098039216
User 56835 does not improve AUC. Reverting changes.
Training on augumented user 5925 40/50 current_auc = 0.78125
User 5925 AUC after training: 0.7803308823529411
User 5925 does not improve AUC. Reverting changes.
Training on augumented user 40829 41/50 current_auc = 0.78125
User 40829 AUC after training: 0.78125
User 40829 does not improve AUC. Reverting changes.
Training on augumented user 90887 42/50 current_auc = 0.78125
User 90887 AUC after training: 0.7766544117647058
User 90887 does not improve AUC. Reverting changes.
Training on augumented user 45502 43/50 current_auc = 0.78125
User 45502 AUC after training: 0.78125
User 45502 does not improve AUC. Reverting changes.
Training on augumented user 70122 44/50 current_auc = 0.78125
User 70122 AUC after training: 0.7806372549019607
User 70122 does not improve AUC. Reverting changes.
Training on augumented user 137660 45/50 current_auc = 0.78125
User 137660 AUC after training: 0.78125
User 137660 does not improve AUC. Reverting changes.
Training on augumented user 64877 46/50 current_auc = 0.78125
User 64877 AUC after training: 0.78125
User 64877 does not improve AUC. Reverting changes.
Training on augumented user 129798 47/50 current_auc = 0.78125
User 129798 AUC after training: 0.78125
User 129798 does not improve AUC. Reverting changes.
Training on augumented user 119753 48/50 current_auc = 0.78125
User 119753 AUC after training: 0.78125
User 119753 does not improve AUC. Reverting changes.
Training on augumented user 127061 49/50 current_auc = 0.78125
User 127061 AUC after training: 0.7806372549019607
User 127061 does not improve AUC. Reverting changes.
[2024-12-02 18:09:49.889677] start test user 42924 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:50.529567] start test user 42924 59/568 recall augumented users by random, augumented_users = [87907, 106172, 122484, 94298, 62466, 33731, 125564, 54970, 129799, 135554, 25239, 100055, 80816, 88040, 14676, 128999, 30897, 20357, 52328, 4482, 136501, 107473, 110967, 109899, 65006, 10257, 107947, 15905, 23860, 77517, 111527, 26648, 101112, 39235, 41345, 41162, 2910, 100336, 9568, 37539, 8254, 113654, 121954, 75859, 27601, 25739, 12405, 3630, 126677, 35562]
[2024-12-02 18:09:50.550603] user = 42924 Cloud 59/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:09:50.556753] user = 42924 Local 59/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:09:50.678830] user = 42924 Local+ 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:09:52.920006] user = 42924 MPDA- 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 87907 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87907 AUC after training: 0.5
User 87907 does not improve AUC. Reverting changes.
Training on augumented user 106172 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106172 AUC after training: 0.5
User 106172 does not improve AUC. Reverting changes.
Training on augumented user 122484 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122484 AUC after training: 0.5
User 122484 does not improve AUC. Reverting changes.
Training on augumented user 94298 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94298 AUC after training: 0.5
User 94298 does not improve AUC. Reverting changes.
Training on augumented user 62466 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62466 AUC after training: 0.5
User 62466 does not improve AUC. Reverting changes.
Training on augumented user 33731 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33731 AUC after training: 0.5
User 33731 does not improve AUC. Reverting changes.
Training on augumented user 125564 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125564 AUC after training: 0.5
User 125564 does not improve AUC. Reverting changes.
Training on augumented user 54970 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54970 AUC after training: 0.5
User 54970 does not improve AUC. Reverting changes.
Training on augumented user 129799 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129799 AUC after training: 0.5
User 129799 does not improve AUC. Reverting changes.
Training on augumented user 135554 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135554 AUC after training: 0.5
User 135554 does not improve AUC. Reverting changes.
Training on augumented user 25239 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25239 AUC after training: 0.5
User 25239 does not improve AUC. Reverting changes.
Training on augumented user 100055 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100055 AUC after training: 0.5
User 100055 does not improve AUC. Reverting changes.
Training on augumented user 80816 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80816 AUC after training: 0.5
User 80816 does not improve AUC. Reverting changes.
Training on augumented user 88040 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88040 AUC after training: 0.5
User 88040 does not improve AUC. Reverting changes.
Training on augumented user 14676 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14676 AUC after training: 0.5
User 14676 does not improve AUC. Reverting changes.
Training on augumented user 128999 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128999 AUC after training: 0.5
User 128999 does not improve AUC. Reverting changes.
Training on augumented user 30897 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30897 AUC after training: 0.5
User 30897 does not improve AUC. Reverting changes.
Training on augumented user 20357 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20357 AUC after training: 0.5
User 20357 does not improve AUC. Reverting changes.
Training on augumented user 52328 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52328 AUC after training: 0.5
User 52328 does not improve AUC. Reverting changes.
Training on augumented user 4482 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4482 AUC after training: 0.5
User 4482 does not improve AUC. Reverting changes.
Training on augumented user 136501 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136501 AUC after training: 0.5
User 136501 does not improve AUC. Reverting changes.
Training on augumented user 107473 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107473 AUC after training: 0.5
User 107473 does not improve AUC. Reverting changes.
Training on augumented user 110967 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110967 AUC after training: 0.5
User 110967 does not improve AUC. Reverting changes.
Training on augumented user 109899 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109899 AUC after training: 0.5
User 109899 does not improve AUC. Reverting changes.
Training on augumented user 65006 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65006 AUC after training: 0.5
User 65006 does not improve AUC. Reverting changes.
Training on augumented user 10257 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10257 AUC after training: 0.5
User 10257 does not improve AUC. Reverting changes.
Training on augumented user 107947 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107947 AUC after training: 0.5
User 107947 does not improve AUC. Reverting changes.
Training on augumented user 15905 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15905 AUC after training: 0.5
User 15905 does not improve AUC. Reverting changes.
Training on augumented user 23860 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23860 AUC after training: 0.5
User 23860 does not improve AUC. Reverting changes.
Training on augumented user 77517 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77517 AUC after training: 0.5
User 77517 does not improve AUC. Reverting changes.
Training on augumented user 111527 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111527 AUC after training: 0.5
User 111527 does not improve AUC. Reverting changes.
Training on augumented user 26648 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26648 AUC after training: 0.5
User 26648 does not improve AUC. Reverting changes.
Training on augumented user 101112 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101112 AUC after training: 0.5
User 101112 does not improve AUC. Reverting changes.
Training on augumented user 39235 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39235 AUC after training: 0.5
User 39235 does not improve AUC. Reverting changes.
Training on augumented user 41345 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41345 AUC after training: 0.5
User 41345 does not improve AUC. Reverting changes.
Training on augumented user 41162 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41162 AUC after training: 0.5
User 41162 does not improve AUC. Reverting changes.
Training on augumented user 2910 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2910 AUC after training: 0.5
User 2910 does not improve AUC. Reverting changes.
Training on augumented user 100336 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100336 AUC after training: 0.5
User 100336 does not improve AUC. Reverting changes.
Training on augumented user 9568 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9568 AUC after training: 0.5
User 9568 does not improve AUC. Reverting changes.
Training on augumented user 37539 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37539 AUC after training: 0.5
User 37539 does not improve AUC. Reverting changes.
Training on augumented user 8254 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8254 AUC after training: 0.5
User 8254 does not improve AUC. Reverting changes.
Training on augumented user 113654 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113654 AUC after training: 0.5
User 113654 does not improve AUC. Reverting changes.
Training on augumented user 121954 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121954 AUC after training: 0.5
User 121954 does not improve AUC. Reverting changes.
Training on augumented user 75859 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75859 AUC after training: 0.5
User 75859 does not improve AUC. Reverting changes.
Training on augumented user 27601 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27601 AUC after training: 0.5
User 27601 does not improve AUC. Reverting changes.
Training on augumented user 25739 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25739 AUC after training: 0.5
User 25739 does not improve AUC. Reverting changes.
Training on augumented user 12405 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12405 AUC after training: 0.5
User 12405 does not improve AUC. Reverting changes.
Training on augumented user 3630 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3630 AUC after training: 0.5
User 3630 does not improve AUC. Reverting changes.
Training on augumented user 126677 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126677 AUC after training: 0.5
User 126677 does not improve AUC. Reverting changes.
Training on augumented user 35562 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35562 AUC after training: 0.5
User 35562 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:10:19.532956] start test user 42927 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:19.950191] start test user 42927 60/568 recall augumented users by random, augumented_users = [19106, 85302, 120265, 59713, 25285, 112938, 36763, 23586, 3645, 79299, 92824, 19619, 105615, 41206, 102687, 111185, 126824, 94766, 58501, 41853, 2930, 38218, 55943, 45064, 110399, 32934, 103384, 56981, 24845, 19212, 130071, 52170, 28014, 74348, 57478, 109503, 81318, 12138, 26286, 111920, 135407, 82778, 34863, 45639, 80177, 125970, 62390, 15187, 77350, 6940]
[2024-12-02 18:10:19.964249] user = 42927 Cloud 60/568
[2024-12-02 18:10:19.975281] user = 42927 Local 60/568
[2024-12-02 18:10:20.057806] user = 42927 Local+ 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:22.837271] user = 42927 MPDA- 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7749999999999999
Training on augumented user 19106 0/50 current_auc = 0.7749999999999999
User 19106 AUC after training: 0.7749999999999999
User 19106 does not improve AUC. Reverting changes.
Training on augumented user 85302 1/50 current_auc = 0.7749999999999999
User 85302 AUC after training: 0.7749999999999999
User 85302 does not improve AUC. Reverting changes.
Training on augumented user 120265 2/50 current_auc = 0.7749999999999999
User 120265 AUC after training: 0.7749999999999999
User 120265 does not improve AUC. Reverting changes.
Training on augumented user 59713 3/50 current_auc = 0.7749999999999999
User 59713 AUC after training: 0.7749999999999999
User 59713 does not improve AUC. Reverting changes.
Training on augumented user 25285 4/50 current_auc = 0.7749999999999999
User 25285 AUC after training: 0.7749999999999999
User 25285 does not improve AUC. Reverting changes.
Training on augumented user 112938 5/50 current_auc = 0.7749999999999999
User 112938 AUC after training: 0.7749999999999999
User 112938 does not improve AUC. Reverting changes.
Training on augumented user 36763 6/50 current_auc = 0.7749999999999999
User 36763 AUC after training: 0.7833333333333334
User 36763 improves AUC. Keeping the model.
Training on augumented user 23586 7/50 current_auc = 0.7833333333333334
User 23586 AUC after training: 0.7833333333333334
User 23586 does not improve AUC. Reverting changes.
Training on augumented user 3645 8/50 current_auc = 0.7833333333333334
User 3645 AUC after training: 0.7833333333333334
User 3645 does not improve AUC. Reverting changes.
Training on augumented user 79299 9/50 current_auc = 0.7833333333333334
User 79299 AUC after training: 0.7833333333333334
User 79299 does not improve AUC. Reverting changes.
Training on augumented user 92824 10/50 current_auc = 0.7833333333333334
User 92824 AUC after training: 0.7833333333333334
User 92824 does not improve AUC. Reverting changes.
Training on augumented user 19619 11/50 current_auc = 0.7833333333333334
User 19619 AUC after training: 0.7833333333333334
User 19619 does not improve AUC. Reverting changes.
Training on augumented user 105615 12/50 current_auc = 0.7833333333333334
User 105615 AUC after training: 0.7833333333333334
User 105615 does not improve AUC. Reverting changes.
Training on augumented user 41206 13/50 current_auc = 0.7833333333333334
User 41206 AUC after training: 0.7833333333333333
User 41206 does not improve AUC. Reverting changes.
Training on augumented user 102687 14/50 current_auc = 0.7833333333333334
User 102687 AUC after training: 0.7833333333333334
User 102687 does not improve AUC. Reverting changes.
Training on augumented user 111185 15/50 current_auc = 0.7833333333333334
User 111185 AUC after training: 0.7833333333333334
User 111185 does not improve AUC. Reverting changes.
Training on augumented user 126824 16/50 current_auc = 0.7833333333333334
User 126824 AUC after training: 0.7833333333333334
User 126824 does not improve AUC. Reverting changes.
Training on augumented user 94766 17/50 current_auc = 0.7833333333333334
User 94766 AUC after training: 0.7833333333333334
User 94766 does not improve AUC. Reverting changes.
Training on augumented user 58501 18/50 current_auc = 0.7833333333333334
User 58501 AUC after training: 0.7749999999999999
User 58501 does not improve AUC. Reverting changes.
Training on augumented user 41853 19/50 current_auc = 0.7833333333333334
User 41853 AUC after training: 0.7833333333333334
User 41853 does not improve AUC. Reverting changes.
Training on augumented user 2930 20/50 current_auc = 0.7833333333333334
User 2930 AUC after training: 0.7833333333333334
User 2930 does not improve AUC. Reverting changes.
Training on augumented user 38218 21/50 current_auc = 0.7833333333333334
User 38218 AUC after training: 0.7833333333333334
User 38218 does not improve AUC. Reverting changes.
Training on augumented user 55943 22/50 current_auc = 0.7833333333333334
User 55943 AUC after training: 0.7749999999999999
User 55943 does not improve AUC. Reverting changes.
Training on augumented user 45064 23/50 current_auc = 0.7833333333333334
User 45064 AUC after training: 0.7833333333333334
User 45064 does not improve AUC. Reverting changes.
Training on augumented user 110399 24/50 current_auc = 0.7833333333333334
User 110399 AUC after training: 0.7833333333333334
User 110399 does not improve AUC. Reverting changes.
Training on augumented user 32934 25/50 current_auc = 0.7833333333333334
User 32934 AUC after training: 0.7833333333333334
User 32934 does not improve AUC. Reverting changes.
Training on augumented user 103384 26/50 current_auc = 0.7833333333333334
User 103384 AUC after training: 0.7749999999999999
User 103384 does not improve AUC. Reverting changes.
Training on augumented user 56981 27/50 current_auc = 0.7833333333333334
User 56981 AUC after training: 0.7749999999999999
User 56981 does not improve AUC. Reverting changes.
Training on augumented user 24845 28/50 current_auc = 0.7833333333333334
User 24845 AUC after training: 0.7833333333333334
User 24845 does not improve AUC. Reverting changes.
Training on augumented user 19212 29/50 current_auc = 0.7833333333333334
User 19212 AUC after training: 0.7749999999999999
User 19212 does not improve AUC. Reverting changes.
Training on augumented user 130071 30/50 current_auc = 0.7833333333333334
User 130071 AUC after training: 0.7833333333333334
User 130071 does not improve AUC. Reverting changes.
Training on augumented user 52170 31/50 current_auc = 0.7833333333333334
User 52170 AUC after training: 0.7833333333333334
User 52170 does not improve AUC. Reverting changes.
Training on augumented user 28014 32/50 current_auc = 0.7833333333333334
User 28014 AUC after training: 0.7833333333333334
User 28014 does not improve AUC. Reverting changes.
Training on augumented user 74348 33/50 current_auc = 0.7833333333333334
User 74348 AUC after training: 0.7749999999999999
User 74348 does not improve AUC. Reverting changes.
Training on augumented user 57478 34/50 current_auc = 0.7833333333333334
User 57478 AUC after training: 0.7833333333333334
User 57478 does not improve AUC. Reverting changes.
Training on augumented user 109503 35/50 current_auc = 0.7833333333333334
User 109503 AUC after training: 0.7749999999999999
User 109503 does not improve AUC. Reverting changes.
Training on augumented user 81318 36/50 current_auc = 0.7833333333333334
User 81318 AUC after training: 0.7833333333333334
User 81318 does not improve AUC. Reverting changes.
Training on augumented user 12138 37/50 current_auc = 0.7833333333333334
User 12138 AUC after training: 0.7833333333333334
User 12138 does not improve AUC. Reverting changes.
Training on augumented user 26286 38/50 current_auc = 0.7833333333333334
User 26286 AUC after training: 0.7833333333333334
User 26286 does not improve AUC. Reverting changes.
Training on augumented user 111920 39/50 current_auc = 0.7833333333333334
User 111920 AUC after training: 0.7833333333333334
User 111920 does not improve AUC. Reverting changes.
Training on augumented user 135407 40/50 current_auc = 0.7833333333333334
User 135407 AUC after training: 0.7833333333333334
User 135407 does not improve AUC. Reverting changes.
Training on augumented user 82778 41/50 current_auc = 0.7833333333333334
User 82778 AUC after training: 0.7833333333333334
User 82778 does not improve AUC. Reverting changes.
Training on augumented user 34863 42/50 current_auc = 0.7833333333333334
User 34863 AUC after training: 0.7833333333333334
User 34863 does not improve AUC. Reverting changes.
Training on augumented user 45639 43/50 current_auc = 0.7833333333333334
User 45639 AUC after training: 0.7833333333333334
User 45639 does not improve AUC. Reverting changes.
Training on augumented user 80177 44/50 current_auc = 0.7833333333333334
User 80177 AUC after training: 0.7833333333333334
User 80177 does not improve AUC. Reverting changes.
Training on augumented user 125970 45/50 current_auc = 0.7833333333333334
User 125970 AUC after training: 0.7833333333333334
User 125970 does not improve AUC. Reverting changes.
Training on augumented user 62390 46/50 current_auc = 0.7833333333333334
User 62390 AUC after training: 0.7749999999999999
User 62390 does not improve AUC. Reverting changes.
Training on augumented user 15187 47/50 current_auc = 0.7833333333333334
User 15187 AUC after training: 0.7833333333333334
User 15187 does not improve AUC. Reverting changes.
Training on augumented user 77350 48/50 current_auc = 0.7833333333333334
User 77350 AUC after training: 0.7833333333333334
User 77350 does not improve AUC. Reverting changes.
Training on augumented user 6940 49/50 current_auc = 0.7833333333333334
User 6940 AUC after training: 0.7833333333333334
User 6940 does not improve AUC. Reverting changes.
[2024-12-02 18:10:51.989723] start test user 42945 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:52.754708] start test user 42945 61/568 recall augumented users by random, augumented_users = [45245, 50829, 119651, 96686, 96811, 51822, 132227, 128216, 112878, 2103, 69694, 56289, 94307, 110544, 11461, 25289, 3467, 75372, 125938, 40997, 74381, 119881, 37813, 27822, 122141, 51371, 69995, 119726, 37558, 109137, 2859, 22965, 87952, 111357, 91792, 59481, 90740, 58837, 128360, 38827, 1416, 113498, 99249, 47939, 53541, 101924, 106973, 31137, 11310, 34271]
[2024-12-02 18:10:52.769029] user = 42945 Cloud 61/568
[2024-12-02 18:10:52.779112] user = 42945 Local 61/568
[2024-12-02 18:10:52.805345] user = 42945 Local+ 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:54.668501] user = 42945 MPDA- 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 45245 0/50 current_auc = 0.6666666666666666
User 45245 AUC after training: 0.6666666666666666
User 45245 does not improve AUC. Reverting changes.
Training on augumented user 50829 1/50 current_auc = 0.6666666666666666
User 50829 AUC after training: 0.6666666666666666
User 50829 does not improve AUC. Reverting changes.
Training on augumented user 119651 2/50 current_auc = 0.6666666666666666
User 119651 AUC after training: 0.6666666666666666
User 119651 does not improve AUC. Reverting changes.
Training on augumented user 96686 3/50 current_auc = 0.6666666666666666
User 96686 AUC after training: 0.6666666666666666
User 96686 does not improve AUC. Reverting changes.
Training on augumented user 96811 4/50 current_auc = 0.6666666666666666
User 96811 AUC after training: 0.6666666666666666
User 96811 does not improve AUC. Reverting changes.
Training on augumented user 51822 5/50 current_auc = 0.6666666666666666
User 51822 AUC after training: 0.6666666666666666
User 51822 does not improve AUC. Reverting changes.
Training on augumented user 132227 6/50 current_auc = 0.6666666666666666
User 132227 AUC after training: 0.6666666666666666
User 132227 does not improve AUC. Reverting changes.
Training on augumented user 128216 7/50 current_auc = 0.6666666666666666
User 128216 AUC after training: 0.6666666666666666
User 128216 does not improve AUC. Reverting changes.
Training on augumented user 112878 8/50 current_auc = 0.6666666666666666
User 112878 AUC after training: 0.6666666666666666
User 112878 does not improve AUC. Reverting changes.
Training on augumented user 2103 9/50 current_auc = 0.6666666666666666
User 2103 AUC after training: 0.6666666666666666
User 2103 does not improve AUC. Reverting changes.
Training on augumented user 69694 10/50 current_auc = 0.6666666666666666
User 69694 AUC after training: 0.6666666666666666
User 69694 does not improve AUC. Reverting changes.
Training on augumented user 56289 11/50 current_auc = 0.6666666666666666
User 56289 AUC after training: 0.6666666666666666
User 56289 does not improve AUC. Reverting changes.
Training on augumented user 94307 12/50 current_auc = 0.6666666666666666
User 94307 AUC after training: 0.6666666666666666
User 94307 does not improve AUC. Reverting changes.
Training on augumented user 110544 13/50 current_auc = 0.6666666666666666
User 110544 AUC after training: 0.6666666666666666
User 110544 does not improve AUC. Reverting changes.
Training on augumented user 11461 14/50 current_auc = 0.6666666666666666
User 11461 AUC after training: 0.6666666666666666
User 11461 does not improve AUC. Reverting changes.
Training on augumented user 25289 15/50 current_auc = 0.6666666666666666
User 25289 AUC after training: 0.6666666666666666
User 25289 does not improve AUC. Reverting changes.
Training on augumented user 3467 16/50 current_auc = 0.6666666666666666
User 3467 AUC after training: 0.6666666666666666
User 3467 does not improve AUC. Reverting changes.
Training on augumented user 75372 17/50 current_auc = 0.6666666666666666
User 75372 AUC after training: 0.6666666666666666
User 75372 does not improve AUC. Reverting changes.
Training on augumented user 125938 18/50 current_auc = 0.6666666666666666
User 125938 AUC after training: 0.6666666666666666
User 125938 does not improve AUC. Reverting changes.
Training on augumented user 40997 19/50 current_auc = 0.6666666666666666
User 40997 AUC after training: 0.6666666666666666
User 40997 does not improve AUC. Reverting changes.
Training on augumented user 74381 20/50 current_auc = 0.6666666666666666
User 74381 AUC after training: 0.6666666666666666
User 74381 does not improve AUC. Reverting changes.
Training on augumented user 119881 21/50 current_auc = 0.6666666666666666
User 119881 AUC after training: 0.6666666666666666
User 119881 does not improve AUC. Reverting changes.
Training on augumented user 37813 22/50 current_auc = 0.6666666666666666
User 37813 AUC after training: 0.6666666666666666
User 37813 does not improve AUC. Reverting changes.
Training on augumented user 27822 23/50 current_auc = 0.6666666666666666
User 27822 AUC after training: 0.6666666666666666
User 27822 does not improve AUC. Reverting changes.
Training on augumented user 122141 24/50 current_auc = 0.6666666666666666
User 122141 AUC after training: 0.6666666666666666
User 122141 does not improve AUC. Reverting changes.
Training on augumented user 51371 25/50 current_auc = 0.6666666666666666
User 51371 AUC after training: 0.6666666666666666
User 51371 does not improve AUC. Reverting changes.
Training on augumented user 69995 26/50 current_auc = 0.6666666666666666
User 69995 AUC after training: 0.6666666666666666
User 69995 does not improve AUC. Reverting changes.
Training on augumented user 119726 27/50 current_auc = 0.6666666666666666
User 119726 AUC after training: 0.6666666666666666
User 119726 does not improve AUC. Reverting changes.
Training on augumented user 37558 28/50 current_auc = 0.6666666666666666
User 37558 AUC after training: 0.6666666666666666
User 37558 does not improve AUC. Reverting changes.
Training on augumented user 109137 29/50 current_auc = 0.6666666666666666
User 109137 AUC after training: 0.6666666666666666
User 109137 does not improve AUC. Reverting changes.
Training on augumented user 2859 30/50 current_auc = 0.6666666666666666
User 2859 AUC after training: 0.6666666666666666
User 2859 does not improve AUC. Reverting changes.
Training on augumented user 22965 31/50 current_auc = 0.6666666666666666
User 22965 AUC after training: 0.6666666666666666
User 22965 does not improve AUC. Reverting changes.
Training on augumented user 87952 32/50 current_auc = 0.6666666666666666
User 87952 AUC after training: 0.6666666666666666
User 87952 does not improve AUC. Reverting changes.
Training on augumented user 111357 33/50 current_auc = 0.6666666666666666
User 111357 AUC after training: 0.6666666666666666
User 111357 does not improve AUC. Reverting changes.
Training on augumented user 91792 34/50 current_auc = 0.6666666666666666
User 91792 AUC after training: 0.6666666666666666
User 91792 does not improve AUC. Reverting changes.
Training on augumented user 59481 35/50 current_auc = 0.6666666666666666
User 59481 AUC after training: 0.6666666666666666
User 59481 does not improve AUC. Reverting changes.
Training on augumented user 90740 36/50 current_auc = 0.6666666666666666
User 90740 AUC after training: 0.6666666666666666
User 90740 does not improve AUC. Reverting changes.
Training on augumented user 58837 37/50 current_auc = 0.6666666666666666
User 58837 AUC after training: 0.6666666666666666
User 58837 does not improve AUC. Reverting changes.
Training on augumented user 128360 38/50 current_auc = 0.6666666666666666
User 128360 AUC after training: 0.6666666666666666
User 128360 does not improve AUC. Reverting changes.
Training on augumented user 38827 39/50 current_auc = 0.6666666666666666
User 38827 AUC after training: 0.6666666666666666
User 38827 does not improve AUC. Reverting changes.
Training on augumented user 1416 40/50 current_auc = 0.6666666666666666
User 1416 AUC after training: 0.6666666666666666
User 1416 does not improve AUC. Reverting changes.
Training on augumented user 113498 41/50 current_auc = 0.6666666666666666
User 113498 AUC after training: 0.6666666666666666
User 113498 does not improve AUC. Reverting changes.
Training on augumented user 99249 42/50 current_auc = 0.6666666666666666
User 99249 AUC after training: 0.6666666666666666
User 99249 does not improve AUC. Reverting changes.
Training on augumented user 47939 43/50 current_auc = 0.6666666666666666
User 47939 AUC after training: 0.6666666666666666
User 47939 does not improve AUC. Reverting changes.
Training on augumented user 53541 44/50 current_auc = 0.6666666666666666
User 53541 AUC after training: 0.6666666666666666
User 53541 does not improve AUC. Reverting changes.
Training on augumented user 101924 45/50 current_auc = 0.6666666666666666
User 101924 AUC after training: 0.6666666666666666
User 101924 does not improve AUC. Reverting changes.
Training on augumented user 106973 46/50 current_auc = 0.6666666666666666
User 106973 AUC after training: 0.6666666666666666
User 106973 does not improve AUC. Reverting changes.
Training on augumented user 31137 47/50 current_auc = 0.6666666666666666
User 31137 AUC after training: 0.6666666666666666
User 31137 does not improve AUC. Reverting changes.
Training on augumented user 11310 48/50 current_auc = 0.6666666666666666
User 11310 AUC after training: 0.6666666666666666
User 11310 does not improve AUC. Reverting changes.
Training on augumented user 34271 49/50 current_auc = 0.6666666666666666
User 34271 AUC after training: 0.6666666666666666
User 34271 does not improve AUC. Reverting changes.
[2024-12-02 18:11:25.489290] start test user 43032 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:26.112370] start test user 43032 62/568 recall augumented users by random, augumented_users = [13006, 50928, 70964, 4457, 12058, 4691, 7979, 119567, 133703, 62232, 135580, 85550, 18936, 40964, 71589, 33173, 88774, 118512, 121830, 46194, 27504, 104413, 77951, 119010, 124195, 5961, 43021, 11055, 45690, 336, 29063, 1869, 81200, 12652, 12975, 50562, 77907, 34723, 62134, 40355, 90258, 30742, 96439, 83629, 68559, 71836, 80171, 34391, 68695, 119661]
[2024-12-02 18:11:26.133986] user = 43032 Cloud 62/568
[2024-12-02 18:11:26.151262] user = 43032 Local 62/568
[2024-12-02 18:11:26.184163] user = 43032 Local+ 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:28.748256] user = 43032 MPDA- 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7785669191919191
Training on augumented user 13006 0/50 current_auc = 0.7785669191919191
User 13006 AUC after training: 0.7799873737373737
User 13006 improves AUC. Keeping the model.
Training on augumented user 50928 1/50 current_auc = 0.7799873737373737
User 50928 AUC after training: 0.7793560606060606
User 50928 does not improve AUC. Reverting changes.
Training on augumented user 70964 2/50 current_auc = 0.7799873737373737
User 70964 AUC after training: 0.7810921717171716
User 70964 improves AUC. Keeping the model.
Training on augumented user 4457 3/50 current_auc = 0.7810921717171716
User 4457 AUC after training: 0.7817234848484849
User 4457 improves AUC. Keeping the model.
Training on augumented user 12058 4/50 current_auc = 0.7817234848484849
User 12058 AUC after training: 0.7815656565656566
User 12058 does not improve AUC. Reverting changes.
Training on augumented user 4691 5/50 current_auc = 0.7817234848484849
User 4691 AUC after training: 0.7818813131313131
User 4691 improves AUC. Keeping the model.
Training on augumented user 7979 6/50 current_auc = 0.7818813131313131
User 7979 AUC after training: 0.7815656565656565
User 7979 does not improve AUC. Reverting changes.
Training on augumented user 119567 7/50 current_auc = 0.7818813131313131
User 119567 AUC after training: 0.7810921717171717
User 119567 does not improve AUC. Reverting changes.
Training on augumented user 133703 8/50 current_auc = 0.7818813131313131
User 133703 AUC after training: 0.7818813131313131
User 133703 does not improve AUC. Reverting changes.
Training on augumented user 62232 9/50 current_auc = 0.7818813131313131
User 62232 AUC after training: 0.7815656565656565
User 62232 does not improve AUC. Reverting changes.
Training on augumented user 135580 10/50 current_auc = 0.7818813131313131
User 135580 AUC after training: 0.78125
User 135580 does not improve AUC. Reverting changes.
Training on augumented user 85550 11/50 current_auc = 0.7818813131313131
User 85550 AUC after training: 0.7793560606060606
User 85550 does not improve AUC. Reverting changes.
Training on augumented user 18936 12/50 current_auc = 0.7818813131313131
User 18936 AUC after training: 0.7814078282828283
User 18936 does not improve AUC. Reverting changes.
Training on augumented user 40964 13/50 current_auc = 0.7818813131313131
User 40964 AUC after training: 0.7806186868686867
User 40964 does not improve AUC. Reverting changes.
Training on augumented user 71589 14/50 current_auc = 0.7818813131313131
User 71589 AUC after training: 0.78125
User 71589 does not improve AUC. Reverting changes.
Training on augumented user 33173 15/50 current_auc = 0.7818813131313131
User 33173 AUC after training: 0.7814078282828283
User 33173 does not improve AUC. Reverting changes.
Training on augumented user 88774 16/50 current_auc = 0.7818813131313131
User 88774 AUC after training: 0.7821969696969697
User 88774 improves AUC. Keeping the model.
Training on augumented user 118512 17/50 current_auc = 0.7821969696969697
User 118512 AUC after training: 0.7807765151515151
User 118512 does not improve AUC. Reverting changes.
Training on augumented user 121830 18/50 current_auc = 0.7821969696969697
User 121830 AUC after training: 0.7821969696969696
User 121830 does not improve AUC. Reverting changes.
Training on augumented user 46194 19/50 current_auc = 0.7821969696969697
User 46194 AUC after training: 0.7818813131313131
User 46194 does not improve AUC. Reverting changes.
Training on augumented user 27504 20/50 current_auc = 0.7821969696969697
User 27504 AUC after training: 0.7815656565656566
User 27504 does not improve AUC. Reverting changes.
Training on augumented user 104413 21/50 current_auc = 0.7821969696969697
User 104413 AUC after training: 0.781881313131313
User 104413 does not improve AUC. Reverting changes.
Training on augumented user 77951 22/50 current_auc = 0.7821969696969697
User 77951 AUC after training: 0.7831439393939393
User 77951 improves AUC. Keeping the model.
Training on augumented user 119010 23/50 current_auc = 0.7831439393939393
User 119010 AUC after training: 0.7803030303030303
User 119010 does not improve AUC. Reverting changes.
Training on augumented user 124195 24/50 current_auc = 0.7831439393939393
User 124195 AUC after training: 0.7810921717171717
User 124195 does not improve AUC. Reverting changes.
Training on augumented user 5961 25/50 current_auc = 0.7831439393939393
User 5961 AUC after training: 0.7818813131313131
User 5961 does not improve AUC. Reverting changes.
Training on augumented user 43021 26/50 current_auc = 0.7831439393939393
User 43021 AUC after training: 0.7818813131313131
User 43021 does not improve AUC. Reverting changes.
Training on augumented user 11055 27/50 current_auc = 0.7831439393939393
User 11055 AUC after training: 0.7820391414141414
User 11055 does not improve AUC. Reverting changes.
Training on augumented user 45690 28/50 current_auc = 0.7831439393939393
User 45690 AUC after training: 0.7820391414141414
User 45690 does not improve AUC. Reverting changes.
Training on augumented user 336 29/50 current_auc = 0.7831439393939393
User 336 AUC after training: 0.782354797979798
User 336 does not improve AUC. Reverting changes.
Training on augumented user 29063 30/50 current_auc = 0.7831439393939393
User 29063 AUC after training: 0.7780934343434343
User 29063 does not improve AUC. Reverting changes.
Training on augumented user 1869 31/50 current_auc = 0.7831439393939393
User 1869 AUC after training: 0.7818813131313131
User 1869 does not improve AUC. Reverting changes.
Training on augumented user 81200 32/50 current_auc = 0.7831439393939393
User 81200 AUC after training: 0.7806186868686869
User 81200 does not improve AUC. Reverting changes.
Training on augumented user 12652 33/50 current_auc = 0.7831439393939393
User 12652 AUC after training: 0.7821969696969697
User 12652 does not improve AUC. Reverting changes.
Training on augumented user 12975 34/50 current_auc = 0.7831439393939393
User 12975 AUC after training: 0.7810921717171717
User 12975 does not improve AUC. Reverting changes.
Training on augumented user 50562 35/50 current_auc = 0.7831439393939393
User 50562 AUC after training: 0.7818813131313131
User 50562 does not improve AUC. Reverting changes.
Training on augumented user 77907 36/50 current_auc = 0.7831439393939393
User 77907 AUC after training: 0.7815656565656566
User 77907 does not improve AUC. Reverting changes.
Training on augumented user 34723 37/50 current_auc = 0.7831439393939393
User 34723 AUC after training: 0.7826704545454546
User 34723 does not improve AUC. Reverting changes.
Training on augumented user 62134 38/50 current_auc = 0.7831439393939393
User 62134 AUC after training: 0.7820391414141413
User 62134 does not improve AUC. Reverting changes.
Training on augumented user 40355 39/50 current_auc = 0.7831439393939393
User 40355 AUC after training: 0.7809343434343434
User 40355 does not improve AUC. Reverting changes.
Training on augumented user 90258 40/50 current_auc = 0.7831439393939393
User 90258 AUC after training: 0.7820391414141414
User 90258 does not improve AUC. Reverting changes.
Training on augumented user 30742 41/50 current_auc = 0.7831439393939393
User 30742 AUC after training: 0.7820391414141414
User 30742 does not improve AUC. Reverting changes.
Training on augumented user 96439 42/50 current_auc = 0.7831439393939393
User 96439 AUC after training: 0.7815656565656566
User 96439 does not improve AUC. Reverting changes.
Training on augumented user 83629 43/50 current_auc = 0.7831439393939393
User 83629 AUC after training: 0.7815656565656566
User 83629 does not improve AUC. Reverting changes.
Training on augumented user 68559 44/50 current_auc = 0.7831439393939393
User 68559 AUC after training: 0.7820391414141413
User 68559 does not improve AUC. Reverting changes.
Training on augumented user 71836 45/50 current_auc = 0.7831439393939393
User 71836 AUC after training: 0.7818813131313131
User 71836 does not improve AUC. Reverting changes.
Training on augumented user 80171 46/50 current_auc = 0.7831439393939393
User 80171 AUC after training: 0.7825126262626262
User 80171 does not improve AUC. Reverting changes.
Training on augumented user 34391 47/50 current_auc = 0.7831439393939393
User 34391 AUC after training: 0.782354797979798
User 34391 does not improve AUC. Reverting changes.
Training on augumented user 68695 48/50 current_auc = 0.7831439393939393
User 68695 AUC after training: 0.7810921717171717
User 68695 does not improve AUC. Reverting changes.
Training on augumented user 119661 49/50 current_auc = 0.7831439393939393
User 119661 AUC after training: 0.7790404040404041
User 119661 does not improve AUC. Reverting changes.
[2024-12-02 18:11:58.914743] start test user 43050 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:59.510798] start test user 43050 63/568 recall augumented users by random, augumented_users = [130765, 44382, 6229, 96676, 103917, 60426, 78879, 66772, 24642, 94159, 15837, 41, 95236, 27920, 1230, 45264, 26825, 66099, 111671, 129629, 5036, 105905, 35037, 25633, 113650, 41079, 46568, 63717, 108421, 101830, 24609, 129312, 31114, 75927, 4454, 15974, 39914, 128485, 50975, 23742, 31928, 9470, 1231, 55361, 94313, 14462, 35746, 27419, 38633, 47559]
[2024-12-02 18:11:59.525732] user = 43050 Cloud 63/568
[2024-12-02 18:11:59.553636] user = 43050 Local 63/568
[2024-12-02 18:11:59.638948] user = 43050 Local+ 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:02.202503] user = 43050 MPDA- 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6692682926829268
Training on augumented user 130765 0/50 current_auc = 0.6692682926829268
User 130765 AUC after training: 0.671219512195122
User 130765 improves AUC. Keeping the model.
Training on augumented user 44382 1/50 current_auc = 0.671219512195122
User 44382 AUC after training: 0.6692682926829268
User 44382 does not improve AUC. Reverting changes.
Training on augumented user 6229 2/50 current_auc = 0.671219512195122
User 6229 AUC after training: 0.6702439024390243
User 6229 does not improve AUC. Reverting changes.
Training on augumented user 96676 3/50 current_auc = 0.671219512195122
User 96676 AUC after training: 0.6702439024390244
User 96676 does not improve AUC. Reverting changes.
Training on augumented user 103917 4/50 current_auc = 0.671219512195122
User 103917 AUC after training: 0.6692682926829269
User 103917 does not improve AUC. Reverting changes.
Training on augumented user 60426 5/50 current_auc = 0.671219512195122
User 60426 AUC after training: 0.6702439024390243
User 60426 does not improve AUC. Reverting changes.
Training on augumented user 78879 6/50 current_auc = 0.671219512195122
User 78879 AUC after training: 0.6692682926829269
User 78879 does not improve AUC. Reverting changes.
Training on augumented user 66772 7/50 current_auc = 0.671219512195122
User 66772 AUC after training: 0.6653658536585366
User 66772 does not improve AUC. Reverting changes.
Training on augumented user 24642 8/50 current_auc = 0.671219512195122
User 24642 AUC after training: 0.6682926829268293
User 24642 does not improve AUC. Reverting changes.
Training on augumented user 94159 9/50 current_auc = 0.671219512195122
User 94159 AUC after training: 0.6721951219512196
User 94159 improves AUC. Keeping the model.
Training on augumented user 15837 10/50 current_auc = 0.6721951219512196
User 15837 AUC after training: 0.6702439024390244
User 15837 does not improve AUC. Reverting changes.
Training on augumented user 41 11/50 current_auc = 0.6721951219512196
User 41 AUC after training: 0.6702439024390244
User 41 does not improve AUC. Reverting changes.
Training on augumented user 95236 12/50 current_auc = 0.6721951219512196
User 95236 AUC after training: 0.6721951219512196
User 95236 does not improve AUC. Reverting changes.
Training on augumented user 27920 13/50 current_auc = 0.6721951219512196
User 27920 AUC after training: 0.6731707317073171
User 27920 improves AUC. Keeping the model.
Training on augumented user 1230 14/50 current_auc = 0.6731707317073171
User 1230 AUC after training: 0.671219512195122
User 1230 does not improve AUC. Reverting changes.
Training on augumented user 45264 15/50 current_auc = 0.6731707317073171
User 45264 AUC after training: 0.6731707317073171
User 45264 does not improve AUC. Reverting changes.
Training on augumented user 26825 16/50 current_auc = 0.6731707317073171
User 26825 AUC after training: 0.6731707317073171
User 26825 does not improve AUC. Reverting changes.
Training on augumented user 66099 17/50 current_auc = 0.6731707317073171
User 66099 AUC after training: 0.671219512195122
User 66099 does not improve AUC. Reverting changes.
Training on augumented user 111671 18/50 current_auc = 0.6731707317073171
User 111671 AUC after training: 0.673170731707317
User 111671 does not improve AUC. Reverting changes.
Training on augumented user 129629 19/50 current_auc = 0.6731707317073171
User 129629 AUC after training: 0.6731707317073171
User 129629 does not improve AUC. Reverting changes.
Training on augumented user 5036 20/50 current_auc = 0.6731707317073171
User 5036 AUC after training: 0.6741463414634147
User 5036 improves AUC. Keeping the model.
Training on augumented user 105905 21/50 current_auc = 0.6741463414634147
User 105905 AUC after training: 0.6741463414634147
User 105905 does not improve AUC. Reverting changes.
Training on augumented user 35037 22/50 current_auc = 0.6741463414634147
User 35037 AUC after training: 0.6731707317073171
User 35037 does not improve AUC. Reverting changes.
Training on augumented user 25633 23/50 current_auc = 0.6741463414634147
User 25633 AUC after training: 0.6741463414634147
User 25633 does not improve AUC. Reverting changes.
Training on augumented user 113650 24/50 current_auc = 0.6741463414634147
User 113650 AUC after training: 0.6760975609756098
User 113650 improves AUC. Keeping the model.
Training on augumented user 41079 25/50 current_auc = 0.6760975609756098
User 41079 AUC after training: 0.671219512195122
User 41079 does not improve AUC. Reverting changes.
Training on augumented user 46568 26/50 current_auc = 0.6760975609756098
User 46568 AUC after training: 0.6751219512195121
User 46568 does not improve AUC. Reverting changes.
Training on augumented user 63717 27/50 current_auc = 0.6760975609756098
User 63717 AUC after training: 0.6751219512195121
User 63717 does not improve AUC. Reverting changes.
Training on augumented user 108421 28/50 current_auc = 0.6760975609756098
User 108421 AUC after training: 0.6751219512195122
User 108421 does not improve AUC. Reverting changes.
Training on augumented user 101830 29/50 current_auc = 0.6760975609756098
User 101830 AUC after training: 0.6741463414634146
User 101830 does not improve AUC. Reverting changes.
Training on augumented user 24609 30/50 current_auc = 0.6760975609756098
User 24609 AUC after training: 0.6751219512195122
User 24609 does not improve AUC. Reverting changes.
Training on augumented user 129312 31/50 current_auc = 0.6760975609756098
User 129312 AUC after training: 0.6770731707317074
User 129312 improves AUC. Keeping the model.
Training on augumented user 31114 32/50 current_auc = 0.6770731707317074
User 31114 AUC after training: 0.6760975609756098
User 31114 does not improve AUC. Reverting changes.
Training on augumented user 75927 33/50 current_auc = 0.6770731707317074
User 75927 AUC after training: 0.6760975609756097
User 75927 does not improve AUC. Reverting changes.
Training on augumented user 4454 34/50 current_auc = 0.6770731707317074
User 4454 AUC after training: 0.6770731707317074
User 4454 does not improve AUC. Reverting changes.
Training on augumented user 15974 35/50 current_auc = 0.6770731707317074
User 15974 AUC after training: 0.673170731707317
User 15974 does not improve AUC. Reverting changes.
Training on augumented user 39914 36/50 current_auc = 0.6770731707317074
User 39914 AUC after training: 0.6741463414634147
User 39914 does not improve AUC. Reverting changes.
Training on augumented user 128485 37/50 current_auc = 0.6770731707317074
User 128485 AUC after training: 0.6760975609756097
User 128485 does not improve AUC. Reverting changes.
Training on augumented user 50975 38/50 current_auc = 0.6770731707317074
User 50975 AUC after training: 0.6751219512195122
User 50975 does not improve AUC. Reverting changes.
Training on augumented user 23742 39/50 current_auc = 0.6770731707317074
User 23742 AUC after training: 0.6760975609756098
User 23742 does not improve AUC. Reverting changes.
Training on augumented user 31928 40/50 current_auc = 0.6770731707317074
User 31928 AUC after training: 0.6760975609756098
User 31928 does not improve AUC. Reverting changes.
Training on augumented user 9470 41/50 current_auc = 0.6770731707317074
User 9470 AUC after training: 0.6751219512195121
User 9470 does not improve AUC. Reverting changes.
Training on augumented user 1231 42/50 current_auc = 0.6770731707317074
User 1231 AUC after training: 0.6760975609756098
User 1231 does not improve AUC. Reverting changes.
Training on augumented user 55361 43/50 current_auc = 0.6770731707317074
User 55361 AUC after training: 0.6692682926829268
User 55361 does not improve AUC. Reverting changes.
Training on augumented user 94313 44/50 current_auc = 0.6770731707317074
User 94313 AUC after training: 0.6751219512195122
User 94313 does not improve AUC. Reverting changes.
Training on augumented user 14462 45/50 current_auc = 0.6770731707317074
User 14462 AUC after training: 0.671219512195122
User 14462 does not improve AUC. Reverting changes.
Training on augumented user 35746 46/50 current_auc = 0.6770731707317074
User 35746 AUC after training: 0.6751219512195122
User 35746 does not improve AUC. Reverting changes.
Training on augumented user 27419 47/50 current_auc = 0.6770731707317074
User 27419 AUC after training: 0.6760975609756098
User 27419 does not improve AUC. Reverting changes.
Training on augumented user 38633 48/50 current_auc = 0.6770731707317074
User 38633 AUC after training: 0.6741463414634147
User 38633 does not improve AUC. Reverting changes.
Training on augumented user 47559 49/50 current_auc = 0.6770731707317074
User 47559 AUC after training: 0.671219512195122
User 47559 does not improve AUC. Reverting changes.
[2024-12-02 18:12:27.531938] start test user 43081 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:28.059405] start test user 43081 64/568 recall augumented users by random, augumented_users = [19628, 85531, 51896, 118058, 111329, 78807, 111940, 2777, 40458, 123704, 21655, 132433, 35398, 120978, 89941, 88395, 57194, 98617, 66121, 71501, 137429, 103413, 92506, 45758, 136340, 94062, 36377, 51560, 11059, 26574, 35162, 100029, 83386, 99419, 130912, 70876, 21467, 31691, 130321, 97051, 47530, 116263, 10967, 79974, 115732, 3774, 18920, 107066, 51398, 23413]
[2024-12-02 18:12:28.077735] user = 43081 Cloud 64/568
[2024-12-02 18:12:28.126543] user = 43081 Local 64/568
[2024-12-02 18:12:28.280910] user = 43081 Local+ 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:30.660956] user = 43081 MPDA- 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5828803775333924
Training on augumented user 19628 0/50 current_auc = 0.5828803775333924
User 19628 AUC after training: 0.5817321872498209
User 19628 does not improve AUC. Reverting changes.
Training on augumented user 85531 1/50 current_auc = 0.5828803775333924
User 85531 AUC after training: 0.5832069270635823
User 85531 improves AUC. Keeping the model.
Training on augumented user 51896 2/50 current_auc = 0.5832069270635823
User 51896 AUC after training: 0.5825222264357646
User 51896 does not improve AUC. Reverting changes.
Training on augumented user 118058 3/50 current_auc = 0.5832069270635823
User 118058 AUC after training: 0.5835018750263345
User 118058 improves AUC. Keeping the model.
Training on augumented user 111329 4/50 current_auc = 0.5835018750263345
User 111329 AUC after training: 0.5836388151518982
User 111329 improves AUC. Keeping the model.
Training on augumented user 78807 5/50 current_auc = 0.5836388151518982
User 78807 AUC after training: 0.5840180339611512
User 78807 improves AUC. Keeping the model.
Training on augumented user 111940 6/50 current_auc = 0.5840180339611512
User 111940 AUC after training: 0.5838284245565247
User 111940 does not improve AUC. Reverting changes.
Training on augumented user 2777 7/50 current_auc = 0.5840180339611512
User 2777 AUC after training: 0.5838284245565247
User 2777 does not improve AUC. Reverting changes.
Training on augumented user 40458 8/50 current_auc = 0.5840180339611512
User 40458 AUC after training: 0.5836072135844604
User 40458 does not improve AUC. Reverting changes.
Training on augumented user 123704 9/50 current_auc = 0.5840180339611512
User 123704 AUC after training: 0.5827961066868916
User 123704 does not improve AUC. Reverting changes.
Training on augumented user 21655 10/50 current_auc = 0.5840180339611512
User 21655 AUC after training: 0.5821430076265117
User 21655 does not improve AUC. Reverting changes.
Training on augumented user 132433 11/50 current_auc = 0.5840180339611512
User 132433 AUC after training: 0.5844604559052795
User 132433 improves AUC. Keeping the model.
Training on augumented user 35398 12/50 current_auc = 0.5844604559052795
User 35398 AUC after training: 0.58482914085872
User 35398 improves AUC. Keeping the model.
Training on augumented user 120978 13/50 current_auc = 0.58482914085872
User 120978 AUC after training: 0.5862722791050435
User 120978 improves AUC. Keeping the model.
Training on augumented user 89941 14/50 current_auc = 0.5862722791050435
User 89941 AUC after training: 0.5856613154679139
User 89941 does not improve AUC. Reverting changes.
Training on augumented user 88395 15/50 current_auc = 0.5862722791050435
User 88395 AUC after training: 0.5857245186027895
User 88395 does not improve AUC. Reverting changes.
Training on augumented user 57194 16/50 current_auc = 0.5862722791050435
User 57194 AUC after training: 0.5864197530864197
User 57194 improves AUC. Keeping the model.
Training on augumented user 98617 17/50 current_auc = 0.5864197530864197
User 98617 AUC after training: 0.5859983988539165
User 98617 does not improve AUC. Reverting changes.
Training on augumented user 66121 18/50 current_auc = 0.5864197530864197
User 66121 AUC after training: 0.586714701049172
User 66121 improves AUC. Keeping the model.
Training on augumented user 71501 19/50 current_auc = 0.586714701049172
User 71501 AUC after training: 0.5865672270677958
User 71501 does not improve AUC. Reverting changes.
Training on augumented user 137429 20/50 current_auc = 0.586714701049172
User 137429 AUC after training: 0.5855033076307252
User 137429 does not improve AUC. Reverting changes.
Training on augumented user 103413 21/50 current_auc = 0.586714701049172
User 103413 AUC after training: 0.5868305734631105
User 103413 improves AUC. Keeping the model.
Training on augumented user 92506 22/50 current_auc = 0.5868305734631105
User 92506 AUC after training: 0.5872624615514263
User 92506 improves AUC. Keeping the model.
Training on augumented user 45758 23/50 current_auc = 0.5872624615514263
User 45758 AUC after training: 0.5873994016769898
User 45758 improves AUC. Keeping the model.
Training on augumented user 136340 24/50 current_auc = 0.5873994016769898
User 136340 AUC after training: 0.5881157038722453
User 136340 improves AUC. Keeping the model.
Training on augumented user 94062 25/50 current_auc = 0.5881157038722453
User 94062 AUC after training: 0.5876206126490541
User 94062 does not improve AUC. Reverting changes.
Training on augumented user 36377 26/50 current_auc = 0.5881157038722453
User 36377 AUC after training: 0.5878418236211183
User 36377 does not improve AUC. Reverting changes.
Training on augumented user 51560 27/50 current_auc = 0.5881157038722453
User 51560 AUC after training: 0.5877364850629925
User 51560 does not improve AUC. Reverting changes.
Training on augumented user 11059 28/50 current_auc = 0.5881157038722453
User 11059 AUC after training: 0.5884106518349976
User 11059 improves AUC. Keeping the model.
Training on augumented user 26574 29/50 current_auc = 0.5884106518349976
User 26574 AUC after training: 0.5875468756583659
User 26574 does not improve AUC. Reverting changes.
Training on augumented user 35162 30/50 current_auc = 0.5884106518349976
User 35162 AUC after training: 0.588252643997809
User 35162 does not improve AUC. Reverting changes.
Training on augumented user 100029 31/50 current_auc = 0.5884106518349976
User 100029 AUC after training: 0.5895693759743816
User 100029 improves AUC. Keeping the model.
Training on augumented user 83386 32/50 current_auc = 0.5895693759743816
User 83386 AUC after training: 0.5891480217418784
User 83386 does not improve AUC. Reverting changes.
Training on augumented user 99419 33/50 current_auc = 0.5895693759743816
User 99419 AUC after training: 0.5895483082627565
User 99419 does not improve AUC. Reverting changes.
Training on augumented user 130912 34/50 current_auc = 0.5895693759743816
User 130912 AUC after training: 0.5891796233093161
User 130912 does not improve AUC. Reverting changes.
Training on augumented user 70876 35/50 current_auc = 0.5895693759743816
User 70876 AUC after training: 0.5895904436860068
User 70876 improves AUC. Keeping the model.
Training on augumented user 21467 36/50 current_auc = 0.5895904436860068
User 21467 AUC after training: 0.5889689461930645
User 21467 does not improve AUC. Reverting changes.
Training on augumented user 31691 37/50 current_auc = 0.5895904436860068
User 31691 AUC after training: 0.5903910167277631
User 31691 improves AUC. Keeping the model.
Training on augumented user 130321 38/50 current_auc = 0.5903910167277631
User 130321 AUC after training: 0.5903910167277631
User 130321 does not improve AUC. Reverting changes.
Training on augumented user 97051 39/50 current_auc = 0.5903910167277631
User 97051 AUC after training: 0.5897589853790082
User 97051 does not improve AUC. Reverting changes.
Training on augumented user 47530 40/50 current_auc = 0.5903910167277631
User 47530 AUC after training: 0.5899696624952597
User 47530 does not improve AUC. Reverting changes.
Training on augumented user 116263 41/50 current_auc = 0.5903910167277631
User 116263 AUC after training: 0.5904858214300763
User 116263 improves AUC. Keeping the model.
Training on augumented user 10967 42/50 current_auc = 0.5904858214300763
User 10967 AUC after training: 0.5906859646905154
User 10967 improves AUC. Keeping the model.
Training on augumented user 79974 43/50 current_auc = 0.5906859646905154
User 79974 AUC after training: 0.5912758606160199
User 79974 improves AUC. Keeping the model.
Training on augumented user 115732 44/50 current_auc = 0.5912758606160199
User 115732 AUC after training: 0.5906648969788901
User 115732 does not improve AUC. Reverting changes.
Training on augumented user 3774 45/50 current_auc = 0.5912758606160199
User 3774 AUC after training: 0.5908334386718914
User 3774 does not improve AUC. Reverting changes.
Training on augumented user 18920 46/50 current_auc = 0.5912758606160199
User 18920 AUC after training: 0.5901066026208235
User 18920 does not improve AUC. Reverting changes.
Training on augumented user 107066 47/50 current_auc = 0.5912758606160199
User 107066 AUC after training: 0.5899064593603842
User 107066 does not improve AUC. Reverting changes.
Training on augumented user 51398 48/50 current_auc = 0.5912758606160199
User 51398 AUC after training: 0.5904542198626386
User 51398 does not improve AUC. Reverting changes.
Training on augumented user 23413 49/50 current_auc = 0.5912758606160199
User 23413 AUC after training: 0.5917393502717735
User 23413 improves AUC. Keeping the model.
[2024-12-02 18:13:00.162488] start test user 43188 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:00.764398] start test user 43188 65/568 recall augumented users by random, augumented_users = [84772, 14067, 21590, 78741, 71809, 53871, 98158, 84201, 51796, 39568, 129335, 126404, 88634, 21046, 81345, 77446, 116202, 81631, 48831, 71422, 63447, 101174, 24576, 57976, 117428, 42667, 44864, 124371, 57449, 56787, 103492, 119203, 110424, 87166, 40396, 60053, 130919, 94955, 283, 29680, 8362, 17844, 69895, 8349, 130228, 37492, 126661, 120035, 38751, 28819]
[2024-12-02 18:13:00.795387] user = 43188 Cloud 65/568
[2024-12-02 18:13:00.830741] user = 43188 Local 65/568
[2024-12-02 18:13:01.082210] user = 43188 Local+ 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:03.881955] user = 43188 MPDA- 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6255666141111549
Training on augumented user 84772 0/50 current_auc = 0.6255666141111549
User 84772 AUC after training: 0.6261332282223098
User 84772 improves AUC. Keeping the model.
Training on augumented user 14067 1/50 current_auc = 0.6261332282223098
User 14067 AUC after training: 0.6262317698068585
User 14067 improves AUC. Keeping the model.
Training on augumented user 21590 2/50 current_auc = 0.6262317698068585
User 21590 AUC after training: 0.6260346866377611
User 21590 does not improve AUC. Reverting changes.
Training on augumented user 78741 3/50 current_auc = 0.6262317698068585
User 78741 AUC after training: 0.6260839574300354
User 78741 does not improve AUC. Reverting changes.
Training on augumented user 71809 4/50 current_auc = 0.6262317698068585
User 71809 AUC after training: 0.6264781237682302
User 71809 improves AUC. Keeping the model.
Training on augumented user 53871 5/50 current_auc = 0.6264781237682302
User 53871 AUC after training: 0.6262317698068585
User 53871 does not improve AUC. Reverting changes.
Training on augumented user 98158 6/50 current_auc = 0.6264781237682302
User 98158 AUC after training: 0.6261332282223098
User 98158 does not improve AUC. Reverting changes.
Training on augumented user 84201 7/50 current_auc = 0.6264781237682302
User 84201 AUC after training: 0.6260839574300354
User 84201 does not improve AUC. Reverting changes.
Training on augumented user 51796 8/50 current_auc = 0.6264781237682302
User 51796 AUC after training: 0.6265766653527789
User 51796 improves AUC. Keeping the model.
Training on augumented user 39568 9/50 current_auc = 0.6265766653527789
User 39568 AUC after training: 0.6264288529759559
User 39568 does not improve AUC. Reverting changes.
Training on augumented user 129335 10/50 current_auc = 0.6265766653527789
User 129335 AUC after training: 0.6263303113914072
User 129335 does not improve AUC. Reverting changes.
Training on augumented user 126404 11/50 current_auc = 0.6265766653527789
User 126404 AUC after training: 0.6262810405991328
User 126404 does not improve AUC. Reverting changes.
Training on augumented user 88634 12/50 current_auc = 0.6265766653527789
User 88634 AUC after training: 0.6264781237682302
User 88634 does not improve AUC. Reverting changes.
Training on augumented user 21046 13/50 current_auc = 0.6265766653527789
User 21046 AUC after training: 0.6268230193141506
User 21046 improves AUC. Keeping the model.
Training on augumented user 81345 14/50 current_auc = 0.6268230193141506
User 81345 AUC after training: 0.6240392195506503
User 81345 does not improve AUC. Reverting changes.
Training on augumented user 77446 15/50 current_auc = 0.6268230193141506
User 77446 AUC after training: 0.6271186440677966
User 77446 improves AUC. Keeping the model.
Training on augumented user 116202 16/50 current_auc = 0.6271186440677966
User 116202 AUC after training: 0.6269708316909737
User 116202 does not improve AUC. Reverting changes.
Training on augumented user 81631 17/50 current_auc = 0.6271186440677966
User 81631 AUC after training: 0.6269215608986992
User 81631 does not improve AUC. Reverting changes.
Training on augumented user 48831 18/50 current_auc = 0.6271186440677966
User 48831 AUC after training: 0.6270201024832479
User 48831 does not improve AUC. Reverting changes.
Training on augumented user 71422 19/50 current_auc = 0.6271186440677966
User 71422 AUC after training: 0.6269215608986992
User 71422 does not improve AUC. Reverting changes.
Training on augumented user 63447 20/50 current_auc = 0.6271186440677966
User 63447 AUC after training: 0.6268722901064249
User 63447 does not improve AUC. Reverting changes.
Training on augumented user 101174 21/50 current_auc = 0.6271186440677966
User 101174 AUC after training: 0.6273649980291682
User 101174 improves AUC. Keeping the model.
Training on augumented user 24576 22/50 current_auc = 0.6273649980291682
User 24576 AUC after training: 0.6273157272368939
User 24576 does not improve AUC. Reverting changes.
Training on augumented user 57976 23/50 current_auc = 0.6273649980291682
User 57976 AUC after training: 0.6270447378793851
User 57976 does not improve AUC. Reverting changes.
Training on augumented user 117428 24/50 current_auc = 0.6273649980291682
User 117428 AUC after training: 0.6273649980291682
User 117428 does not improve AUC. Reverting changes.
Training on augumented user 42667 25/50 current_auc = 0.6273649980291682
User 42667 AUC after training: 0.6269708316909735
User 42667 does not improve AUC. Reverting changes.
Training on augumented user 44864 26/50 current_auc = 0.6273649980291682
User 44864 AUC after training: 0.6273649980291683
User 44864 improves AUC. Keeping the model.
Training on augumented user 124371 27/50 current_auc = 0.6273649980291683
User 124371 AUC after training: 0.6273649980291682
User 124371 does not improve AUC. Reverting changes.
Training on augumented user 57449 28/50 current_auc = 0.6273649980291683
User 57449 AUC after training: 0.6279562475364604
User 57449 improves AUC. Keeping the model.
Training on augumented user 56787 29/50 current_auc = 0.6279562475364604
User 56787 AUC after training: 0.627759164367363
User 56787 does not improve AUC. Reverting changes.
Training on augumented user 103492 30/50 current_auc = 0.6279562475364604
User 103492 AUC after training: 0.6236204178163185
User 103492 does not improve AUC. Reverting changes.
Training on augumented user 119203 31/50 current_auc = 0.6279562475364604
User 119203 AUC after training: 0.6267737485218762
User 119203 does not improve AUC. Reverting changes.
Training on augumented user 110424 32/50 current_auc = 0.6279562475364604
User 110424 AUC after training: 0.6281533307055577
User 110424 improves AUC. Keeping the model.
Training on augumented user 87166 33/50 current_auc = 0.6281533307055577
User 87166 AUC after training: 0.6280547891210091
User 87166 does not improve AUC. Reverting changes.
Training on augumented user 40396 34/50 current_auc = 0.6281533307055577
User 40396 AUC after training: 0.6280794245171463
User 40396 does not improve AUC. Reverting changes.
Training on augumented user 60053 35/50 current_auc = 0.6281533307055577
User 60053 AUC after training: 0.6280055183287347
User 60053 does not improve AUC. Reverting changes.
Training on augumented user 130919 36/50 current_auc = 0.6281533307055577
User 130919 AUC after training: 0.6274635396137169
User 130919 does not improve AUC. Reverting changes.
Training on augumented user 94955 37/50 current_auc = 0.6281533307055577
User 94955 AUC after training: 0.6282026014978321
User 94955 improves AUC. Keeping the model.
Training on augumented user 283 38/50 current_auc = 0.6282026014978321
User 283 AUC after training: 0.6280547891210091
User 283 does not improve AUC. Reverting changes.
Training on augumented user 29680 39/50 current_auc = 0.6282026014978321
User 29680 AUC after training: 0.6283504138746552
User 29680 improves AUC. Keeping the model.
Training on augumented user 8362 40/50 current_auc = 0.6283504138746552
User 8362 AUC after training: 0.6283504138746551
User 8362 does not improve AUC. Reverting changes.
Training on augumented user 17844 41/50 current_auc = 0.6283504138746552
User 17844 AUC after training: 0.6284982262514781
User 17844 improves AUC. Keeping the model.
Training on augumented user 69895 42/50 current_auc = 0.6284982262514781
User 69895 AUC after training: 0.6283011430823808
User 69895 does not improve AUC. Reverting changes.
Training on augumented user 8349 43/50 current_auc = 0.6284982262514781
User 8349 AUC after training: 0.62874458021285
User 8349 improves AUC. Keeping the model.
Training on augumented user 130228 44/50 current_auc = 0.62874458021285
User 130228 AUC after training: 0.6287445802128498
User 130228 does not improve AUC. Reverting changes.
Training on augumented user 37492 45/50 current_auc = 0.62874458021285
User 37492 AUC after training: 0.6282518722901064
User 37492 does not improve AUC. Reverting changes.
Training on augumented user 126661 46/50 current_auc = 0.62874458021285
User 126661 AUC after training: 0.6273896334253055
User 126661 does not improve AUC. Reverting changes.
Training on augumented user 120035 47/50 current_auc = 0.62874458021285
User 120035 AUC after training: 0.6281040599132834
User 120035 does not improve AUC. Reverting changes.
Training on augumented user 38751 48/50 current_auc = 0.62874458021285
User 38751 AUC after training: 0.6289909341742215
User 38751 improves AUC. Keeping the model.
Training on augumented user 28819 49/50 current_auc = 0.6289909341742215
User 28819 AUC after training: 0.6288923925896729
User 28819 does not improve AUC. Reverting changes.
[2024-12-02 18:13:33.588110] start test user 43194 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:34.021740] start test user 43194 66/568 recall augumented users by random, augumented_users = [47329, 116920, 79901, 124777, 62573, 109352, 93186, 64226, 19979, 27455, 46079, 94860, 16447, 112511, 55226, 25989, 123006, 131445, 72267, 69946, 74602, 56177, 98793, 54187, 48708, 2674, 32200, 52322, 73549, 138405, 133971, 128292, 19677, 23868, 117456, 115902, 91381, 5465, 65651, 63039, 88824, 76850, 117634, 34146, 89616, 23944, 136754, 16631, 54555, 97272]
[2024-12-02 18:13:34.040751] user = 43194 Cloud 66/568
[2024-12-02 18:13:34.090062] user = 43194 Local 66/568
[2024-12-02 18:13:34.653473] user = 43194 Local+ 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:37.411904] user = 43194 MPDA- 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5962578205053441
Training on augumented user 47329 0/50 current_auc = 0.5962578205053441
User 47329 AUC after training: 0.5963161358581104
User 47329 improves AUC. Keeping the model.
Training on augumented user 116920 1/50 current_auc = 0.5963161358581104
User 116920 AUC after training: 0.5964410973283238
User 116920 improves AUC. Keeping the model.
Training on augumented user 79901 2/50 current_auc = 0.5964410973283238
User 79901 AUC after training: 0.5977240350891809
User 79901 improves AUC. Keeping the model.
Training on augumented user 124777 3/50 current_auc = 0.5977240350891809
User 124777 AUC after training: 0.5983655039696094
User 124777 improves AUC. Keeping the model.
Training on augumented user 62573 4/50 current_auc = 0.5983655039696094
User 62573 AUC after training: 0.598173896381949
User 62573 does not improve AUC. Reverting changes.
Training on augumented user 109352 5/50 current_auc = 0.5983655039696094
User 109352 AUC after training: 0.5976573889717337
User 109352 does not improve AUC. Reverting changes.
Training on augumented user 93186 6/50 current_auc = 0.5983655039696094
User 93186 AUC after training: 0.5981489040879062
User 93186 does not improve AUC. Reverting changes.
Training on augumented user 64226 7/50 current_auc = 0.5983655039696094
User 64226 AUC after training: 0.5987153960862067
User 64226 improves AUC. Keeping the model.
Training on augumented user 19979 8/50 current_auc = 0.5987153960862067
User 19979 AUC after training: 0.5985321192632272
User 19979 does not improve AUC. Reverting changes.
Training on augumented user 27455 9/50 current_auc = 0.5987153960862067
User 27455 AUC after training: 0.5989028382915268
User 27455 improves AUC. Keeping the model.
Training on augumented user 46079 10/50 current_auc = 0.5989028382915268
User 46079 AUC after training: 0.5986237576747169
User 46079 does not improve AUC. Reverting changes.
Training on augumented user 94860 11/50 current_auc = 0.5989028382915268
User 94860 AUC after training: 0.5990652882028041
User 94860 improves AUC. Keeping the model.
Training on augumented user 16447 12/50 current_auc = 0.5990652882028041
User 16447 AUC after training: 0.5959912360355557
User 16447 does not improve AUC. Reverting changes.
Training on augumented user 112511 13/50 current_auc = 0.5990652882028041
User 112511 AUC after training: 0.5986487499687596
User 112511 does not improve AUC. Reverting changes.
Training on augumented user 55226 14/50 current_auc = 0.5990652882028041
User 55226 AUC after training: 0.5989070036738673
User 55226 does not improve AUC. Reverting changes.
Training on augumented user 25989 15/50 current_auc = 0.5990652882028041
User 25989 AUC after training: 0.596266151270025
User 25989 does not improve AUC. Reverting changes.
Training on augumented user 123006 16/50 current_auc = 0.5990652882028041
User 123006 AUC after training: 0.5983821654989712
User 123006 does not improve AUC. Reverting changes.
Training on augumented user 131445 17/50 current_auc = 0.5990652882028041
User 131445 AUC after training: 0.5998483800828078
User 131445 improves AUC. Keeping the model.
Training on augumented user 72267 18/50 current_auc = 0.5998483800828078
User 72267 AUC after training: 0.5998483800828078
User 72267 does not improve AUC. Reverting changes.
Training on augumented user 69946 19/50 current_auc = 0.5998483800828078
User 69946 AUC after training: 0.5962078359172589
User 69946 does not improve AUC. Reverting changes.
Training on augumented user 74602 20/50 current_auc = 0.5998483800828078
User 74602 AUC after training: 0.5990153036147189
User 74602 does not improve AUC. Reverting changes.
Training on augumented user 56177 21/50 current_auc = 0.5998483800828078
User 56177 AUC after training: 0.6000983030232345
User 56177 improves AUC. Keeping the model.
Training on augumented user 98793 22/50 current_auc = 0.6000983030232345
User 98793 AUC after training: 0.6007897564917484
User 98793 improves AUC. Keeping the model.
Training on augumented user 54187 23/50 current_auc = 0.6007897564917484
User 54187 AUC after training: 0.5982072194406725
User 54187 does not improve AUC. Reverting changes.
Training on augumented user 48708 24/50 current_auc = 0.6007897564917484
User 48708 AUC after training: 0.6003315644342994
User 48708 does not improve AUC. Reverting changes.
Training on augumented user 2674 25/50 current_auc = 0.6007897564917484
User 2674 AUC after training: 0.6002066029640861
User 2674 does not improve AUC. Reverting changes.
Training on augumented user 32200 26/50 current_auc = 0.6007897564917484
User 32200 AUC after training: 0.5995734648483384
User 32200 does not improve AUC. Reverting changes.
Training on augumented user 52322 27/50 current_auc = 0.6007897564917484
User 52322 AUC after training: 0.6000816414938728
User 52322 does not improve AUC. Reverting changes.
Training on augumented user 73549 28/50 current_auc = 0.6007897564917484
User 73549 AUC after training: 0.6003815490223847
User 73549 does not improve AUC. Reverting changes.
Training on augumented user 138405 29/50 current_auc = 0.6007897564917484
User 138405 AUC after training: 0.6002066029640861
User 138405 does not improve AUC. Reverting changes.
Training on augumented user 133971 30/50 current_auc = 0.6007897564917484
User 133971 AUC after training: 0.6004232028457892
User 133971 does not improve AUC. Reverting changes.
Training on augumented user 128292 31/50 current_auc = 0.6007897564917484
User 128292 AUC after training: 0.6009563717853662
User 128292 improves AUC. Keeping the model.
Training on augumented user 19677 32/50 current_auc = 0.6009563717853662
User 19677 AUC after training: 0.6007564334330249
User 19677 does not improve AUC. Reverting changes.
Training on augumented user 23868 33/50 current_auc = 0.6009563717853662
User 23868 AUC after training: 0.5987737114389731
User 23868 does not improve AUC. Reverting changes.
Training on augumented user 117456 34/50 current_auc = 0.6009563717853662
User 117456 AUC after training: 0.599981672317702
User 117456 does not improve AUC. Reverting changes.
Training on augumented user 115902 35/50 current_auc = 0.6009563717853662
User 115902 AUC after training: 0.5998817031415313
User 115902 does not improve AUC. Reverting changes.
Training on augumented user 91381 36/50 current_auc = 0.6009563717853662
User 91381 AUC after training: 0.6004731874338745
User 91381 does not improve AUC. Reverting changes.
Training on augumented user 5465 37/50 current_auc = 0.6009563717853662
User 5465 AUC after training: 0.5968992893857727
User 5465 does not improve AUC. Reverting changes.
Training on augumented user 65651 38/50 current_auc = 0.6009563717853662
User 65651 AUC after training: 0.5999483492589784
User 65651 does not improve AUC. Reverting changes.
Training on augumented user 63039 39/50 current_auc = 0.6009563717853662
User 63039 AUC after training: 0.5991819189083366
User 63039 does not improve AUC. Reverting changes.
Training on augumented user 88824 40/50 current_auc = 0.6009563717853662
User 88824 AUC after training: 0.6004481951398318
User 88824 does not improve AUC. Reverting changes.
Training on augumented user 76850 41/50 current_auc = 0.6009563717853662
User 76850 AUC after training: 0.6000149953764256
User 76850 does not improve AUC. Reverting changes.
Training on augumented user 117634 42/50 current_auc = 0.6009563717853662
User 117634 AUC after training: 0.6017811174887744
User 117634 improves AUC. Keeping the model.
Training on augumented user 34146 43/50 current_auc = 0.6017811174887744
User 34146 AUC after training: 0.6000816414938728
User 34146 does not improve AUC. Reverting changes.
Training on augumented user 89616 44/50 current_auc = 0.6017811174887744
User 89616 AUC after training: 0.6009980256087706
User 89616 does not improve AUC. Reverting changes.
Training on augumented user 23944 45/50 current_auc = 0.6017811174887744
User 23944 AUC after training: 0.6012979331372827
User 23944 does not improve AUC. Reverting changes.
Training on augumented user 136754 46/50 current_auc = 0.6017811174887744
User 136754 AUC after training: 0.5979406349708839
User 136754 does not improve AUC. Reverting changes.
Training on augumented user 16631 47/50 current_auc = 0.6017811174887744
User 16631 AUC after training: 0.5984571423810991
User 16631 does not improve AUC. Reverting changes.
Training on augumented user 54555 48/50 current_auc = 0.6017811174887744
User 54555 AUC after training: 0.6017894482534552
User 54555 improves AUC. Keeping the model.
Training on augumented user 97272 49/50 current_auc = 0.6017894482534552
User 97272 AUC after training: 0.6038638086589968
User 97272 improves AUC. Keeping the model.
[2024-12-02 18:14:10.343171] start test user 43213 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:10.788203] start test user 43213 67/568 recall augumented users by random, augumented_users = [134787, 133382, 48221, 6902, 84742, 54625, 48033, 43999, 86885, 128051, 123460, 3661, 135913, 8049, 47777, 54238, 33158, 60855, 102152, 50574, 117857, 75995, 123030, 43041, 77617, 112619, 59149, 100260, 88350, 7991, 122805, 13969, 111173, 93450, 106944, 120933, 38804, 96768, 18872, 118634, 136093, 110590, 86489, 59115, 118657, 103269, 43738, 77901, 118012, 89423]
[2024-12-02 18:14:10.811140] user = 43213 Cloud 67/568
[2024-12-02 18:14:10.857998] user = 43213 Local 67/568
[2024-12-02 18:14:10.927712] user = 43213 Local+ 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:13.245522] user = 43213 MPDA- 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6953125
Training on augumented user 134787 0/50 current_auc = 0.6953125
User 134787 AUC after training: 0.6956623134328358
User 134787 improves AUC. Keeping the model.
Training on augumented user 133382 1/50 current_auc = 0.6956623134328358
User 133382 AUC after training: 0.6949626865671641
User 133382 does not improve AUC. Reverting changes.
Training on augumented user 48221 2/50 current_auc = 0.6956623134328358
User 48221 AUC after training: 0.6950792910447761
User 48221 does not improve AUC. Reverting changes.
Training on augumented user 6902 3/50 current_auc = 0.6956623134328358
User 6902 AUC after training: 0.695429104477612
User 6902 does not improve AUC. Reverting changes.
Training on augumented user 84742 4/50 current_auc = 0.6956623134328358
User 84742 AUC after training: 0.6944962686567164
User 84742 does not improve AUC. Reverting changes.
Training on augumented user 54625 5/50 current_auc = 0.6956623134328358
User 54625 AUC after training: 0.6953125
User 54625 does not improve AUC. Reverting changes.
Training on augumented user 48033 6/50 current_auc = 0.6956623134328358
User 48033 AUC after training: 0.6941464552238805
User 48033 does not improve AUC. Reverting changes.
Training on augumented user 43999 7/50 current_auc = 0.6956623134328358
User 43999 AUC after training: 0.695195895522388
User 43999 does not improve AUC. Reverting changes.
Training on augumented user 86885 8/50 current_auc = 0.6956623134328358
User 86885 AUC after training: 0.695195895522388
User 86885 does not improve AUC. Reverting changes.
Training on augumented user 128051 9/50 current_auc = 0.6956623134328358
User 128051 AUC after training: 0.6957789179104478
User 128051 improves AUC. Keeping the model.
Training on augumented user 123460 10/50 current_auc = 0.6957789179104478
User 123460 AUC after training: 0.6948460820895522
User 123460 does not improve AUC. Reverting changes.
Training on augumented user 3661 11/50 current_auc = 0.6957789179104478
User 3661 AUC after training: 0.6955457089552239
User 3661 does not improve AUC. Reverting changes.
Training on augumented user 135913 12/50 current_auc = 0.6957789179104478
User 135913 AUC after training: 0.6941464552238806
User 135913 does not improve AUC. Reverting changes.
Training on augumented user 8049 13/50 current_auc = 0.6957789179104478
User 8049 AUC after training: 0.6955457089552239
User 8049 does not improve AUC. Reverting changes.
Training on augumented user 47777 14/50 current_auc = 0.6957789179104478
User 47777 AUC after training: 0.6947877798507462
User 47777 does not improve AUC. Reverting changes.
Training on augumented user 54238 15/50 current_auc = 0.6957789179104478
User 54238 AUC after training: 0.6949626865671642
User 54238 does not improve AUC. Reverting changes.
Training on augumented user 33158 16/50 current_auc = 0.6957789179104478
User 33158 AUC after training: 0.6956623134328359
User 33158 does not improve AUC. Reverting changes.
Training on augumented user 60855 17/50 current_auc = 0.6957789179104478
User 60855 AUC after training: 0.695429104477612
User 60855 does not improve AUC. Reverting changes.
Training on augumented user 102152 18/50 current_auc = 0.6957789179104478
User 102152 AUC after training: 0.695195895522388
User 102152 does not improve AUC. Reverting changes.
Training on augumented user 50574 19/50 current_auc = 0.6957789179104478
User 50574 AUC after training: 0.6941464552238805
User 50574 does not improve AUC. Reverting changes.
Training on augumented user 117857 20/50 current_auc = 0.6957789179104478
User 117857 AUC after training: 0.6957789179104477
User 117857 does not improve AUC. Reverting changes.
Training on augumented user 75995 21/50 current_auc = 0.6957789179104478
User 75995 AUC after training: 0.695429104477612
User 75995 does not improve AUC. Reverting changes.
Training on augumented user 123030 22/50 current_auc = 0.6957789179104478
User 123030 AUC after training: 0.6956623134328358
User 123030 does not improve AUC. Reverting changes.
Training on augumented user 43041 23/50 current_auc = 0.6957789179104478
User 43041 AUC after training: 0.6950792910447762
User 43041 does not improve AUC. Reverting changes.
Training on augumented user 77617 24/50 current_auc = 0.6957789179104478
User 77617 AUC after training: 0.6949626865671642
User 77617 does not improve AUC. Reverting changes.
Training on augumented user 112619 25/50 current_auc = 0.6957789179104478
User 112619 AUC after training: 0.6953125
User 112619 does not improve AUC. Reverting changes.
Training on augumented user 59149 26/50 current_auc = 0.6957789179104478
User 59149 AUC after training: 0.6949626865671642
User 59149 does not improve AUC. Reverting changes.
Training on augumented user 100260 27/50 current_auc = 0.6957789179104478
User 100260 AUC after training: 0.6949626865671642
User 100260 does not improve AUC. Reverting changes.
Training on augumented user 88350 28/50 current_auc = 0.6957789179104478
User 88350 AUC after training: 0.6958955223880597
User 88350 improves AUC. Keeping the model.
Training on augumented user 7991 29/50 current_auc = 0.6958955223880597
User 7991 AUC after training: 0.6955457089552239
User 7991 does not improve AUC. Reverting changes.
Training on augumented user 122805 30/50 current_auc = 0.6958955223880597
User 122805 AUC after training: 0.6958955223880597
User 122805 does not improve AUC. Reverting changes.
Training on augumented user 13969 31/50 current_auc = 0.6958955223880597
User 13969 AUC after training: 0.6960121268656716
User 13969 improves AUC. Keeping the model.
Training on augumented user 111173 32/50 current_auc = 0.6960121268656716
User 111173 AUC after training: 0.6964785447761195
User 111173 improves AUC. Keeping the model.
Training on augumented user 93450 33/50 current_auc = 0.6964785447761195
User 93450 AUC after training: 0.6953125
User 93450 does not improve AUC. Reverting changes.
Training on augumented user 106944 34/50 current_auc = 0.6964785447761195
User 106944 AUC after training: 0.6961287313432836
User 106944 does not improve AUC. Reverting changes.
Training on augumented user 120933 35/50 current_auc = 0.6964785447761195
User 120933 AUC after training: 0.6961287313432836
User 120933 does not improve AUC. Reverting changes.
Training on augumented user 38804 36/50 current_auc = 0.6964785447761195
User 38804 AUC after training: 0.6962453358208955
User 38804 does not improve AUC. Reverting changes.
Training on augumented user 96768 37/50 current_auc = 0.6964785447761195
User 96768 AUC after training: 0.6957789179104479
User 96768 does not improve AUC. Reverting changes.
Training on augumented user 18872 38/50 current_auc = 0.6964785447761195
User 18872 AUC after training: 0.6960121268656716
User 18872 does not improve AUC. Reverting changes.
Training on augumented user 118634 39/50 current_auc = 0.6964785447761195
User 118634 AUC after training: 0.6961287313432836
User 118634 does not improve AUC. Reverting changes.
Training on augumented user 136093 40/50 current_auc = 0.6964785447761195
User 136093 AUC after training: 0.6962453358208955
User 136093 does not improve AUC. Reverting changes.
Training on augumented user 110590 41/50 current_auc = 0.6964785447761195
User 110590 AUC after training: 0.6960121268656716
User 110590 does not improve AUC. Reverting changes.
Training on augumented user 86489 42/50 current_auc = 0.6964785447761195
User 86489 AUC after training: 0.6965951492537313
User 86489 improves AUC. Keeping the model.
Training on augumented user 59115 43/50 current_auc = 0.6965951492537313
User 59115 AUC after training: 0.6961287313432836
User 59115 does not improve AUC. Reverting changes.
Training on augumented user 118657 44/50 current_auc = 0.6965951492537313
User 118657 AUC after training: 0.6963619402985075
User 118657 does not improve AUC. Reverting changes.
Training on augumented user 103269 45/50 current_auc = 0.6965951492537313
User 103269 AUC after training: 0.6965951492537313
User 103269 does not improve AUC. Reverting changes.
Training on augumented user 43738 46/50 current_auc = 0.6965951492537313
User 43738 AUC after training: 0.6961287313432836
User 43738 does not improve AUC. Reverting changes.
Training on augumented user 77901 47/50 current_auc = 0.6965951492537313
User 77901 AUC after training: 0.6962453358208955
User 77901 does not improve AUC. Reverting changes.
Training on augumented user 118012 48/50 current_auc = 0.6965951492537313
User 118012 AUC after training: 0.6950792910447761
User 118012 does not improve AUC. Reverting changes.
Training on augumented user 89423 49/50 current_auc = 0.6965951492537313
User 89423 AUC after training: 0.6962453358208955
User 89423 does not improve AUC. Reverting changes.
[2024-12-02 18:14:44.834271] start test user 43217 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:45.272925] start test user 43217 68/568 recall augumented users by random, augumented_users = [8027, 26094, 54648, 40692, 107808, 16236, 59776, 24522, 51439, 90938, 57022, 135683, 35667, 104105, 1197, 33997, 105459, 86878, 108340, 66704, 6054, 63035, 45966, 126887, 117486, 64144, 86605, 117189, 95967, 6095, 115083, 62406, 41954, 18102, 50770, 124778, 87300, 49793, 34833, 78063, 87250, 134732, 9468, 95614, 52394, 20698, 90678, 92307, 56126, 11541]
[2024-12-02 18:14:45.289198] user = 43217 Cloud 68/568
[2024-12-02 18:14:45.298761] user = 43217 Local 68/568
[2024-12-02 18:14:45.569572] user = 43217 Local+ 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:48.009425] user = 43217 MPDA- 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33333333333333337
Training on augumented user 8027 0/50 current_auc = 0.33333333333333337
User 8027 AUC after training: 0.33333333333333337
User 8027 does not improve AUC. Reverting changes.
Training on augumented user 26094 1/50 current_auc = 0.33333333333333337
User 26094 AUC after training: 0.33333333333333337
User 26094 does not improve AUC. Reverting changes.
Training on augumented user 54648 2/50 current_auc = 0.33333333333333337
User 54648 AUC after training: 0.33333333333333337
User 54648 does not improve AUC. Reverting changes.
Training on augumented user 40692 3/50 current_auc = 0.33333333333333337
User 40692 AUC after training: 0.33333333333333337
User 40692 does not improve AUC. Reverting changes.
Training on augumented user 107808 4/50 current_auc = 0.33333333333333337
User 107808 AUC after training: 0.33333333333333337
User 107808 does not improve AUC. Reverting changes.
Training on augumented user 16236 5/50 current_auc = 0.33333333333333337
User 16236 AUC after training: 0.33333333333333337
User 16236 does not improve AUC. Reverting changes.
Training on augumented user 59776 6/50 current_auc = 0.33333333333333337
User 59776 AUC after training: 0.33333333333333337
User 59776 does not improve AUC. Reverting changes.
Training on augumented user 24522 7/50 current_auc = 0.33333333333333337
User 24522 AUC after training: 0.33333333333333337
User 24522 does not improve AUC. Reverting changes.
Training on augumented user 51439 8/50 current_auc = 0.33333333333333337
User 51439 AUC after training: 0.33333333333333337
User 51439 does not improve AUC. Reverting changes.
Training on augumented user 90938 9/50 current_auc = 0.33333333333333337
User 90938 AUC after training: 0.33333333333333337
User 90938 does not improve AUC. Reverting changes.
Training on augumented user 57022 10/50 current_auc = 0.33333333333333337
User 57022 AUC after training: 0.33333333333333337
User 57022 does not improve AUC. Reverting changes.
Training on augumented user 135683 11/50 current_auc = 0.33333333333333337
User 135683 AUC after training: 0.33333333333333337
User 135683 does not improve AUC. Reverting changes.
Training on augumented user 35667 12/50 current_auc = 0.33333333333333337
User 35667 AUC after training: 0.33333333333333337
User 35667 does not improve AUC. Reverting changes.
Training on augumented user 104105 13/50 current_auc = 0.33333333333333337
User 104105 AUC after training: 0.33333333333333337
User 104105 does not improve AUC. Reverting changes.
Training on augumented user 1197 14/50 current_auc = 0.33333333333333337
User 1197 AUC after training: 0.33333333333333337
User 1197 does not improve AUC. Reverting changes.
Training on augumented user 33997 15/50 current_auc = 0.33333333333333337
User 33997 AUC after training: 0.33333333333333337
User 33997 does not improve AUC. Reverting changes.
Training on augumented user 105459 16/50 current_auc = 0.33333333333333337
User 105459 AUC after training: 0.33333333333333337
User 105459 does not improve AUC. Reverting changes.
Training on augumented user 86878 17/50 current_auc = 0.33333333333333337
User 86878 AUC after training: 0.33333333333333337
User 86878 does not improve AUC. Reverting changes.
Training on augumented user 108340 18/50 current_auc = 0.33333333333333337
User 108340 AUC after training: 0.33333333333333337
User 108340 does not improve AUC. Reverting changes.
Training on augumented user 66704 19/50 current_auc = 0.33333333333333337
User 66704 AUC after training: 0.33333333333333337
User 66704 does not improve AUC. Reverting changes.
Training on augumented user 6054 20/50 current_auc = 0.33333333333333337
User 6054 AUC after training: 0.33333333333333337
User 6054 does not improve AUC. Reverting changes.
Training on augumented user 63035 21/50 current_auc = 0.33333333333333337
User 63035 AUC after training: 0.33333333333333337
User 63035 does not improve AUC. Reverting changes.
Training on augumented user 45966 22/50 current_auc = 0.33333333333333337
User 45966 AUC after training: 0.33333333333333337
User 45966 does not improve AUC. Reverting changes.
Training on augumented user 126887 23/50 current_auc = 0.33333333333333337
User 126887 AUC after training: 0.33333333333333337
User 126887 does not improve AUC. Reverting changes.
Training on augumented user 117486 24/50 current_auc = 0.33333333333333337
User 117486 AUC after training: 0.33333333333333337
User 117486 does not improve AUC. Reverting changes.
Training on augumented user 64144 25/50 current_auc = 0.33333333333333337
User 64144 AUC after training: 0.33333333333333337
User 64144 does not improve AUC. Reverting changes.
Training on augumented user 86605 26/50 current_auc = 0.33333333333333337
User 86605 AUC after training: 0.33333333333333337
User 86605 does not improve AUC. Reverting changes.
Training on augumented user 117189 27/50 current_auc = 0.33333333333333337
User 117189 AUC after training: 0.33333333333333337
User 117189 does not improve AUC. Reverting changes.
Training on augumented user 95967 28/50 current_auc = 0.33333333333333337
User 95967 AUC after training: 0.33333333333333337
User 95967 does not improve AUC. Reverting changes.
Training on augumented user 6095 29/50 current_auc = 0.33333333333333337
User 6095 AUC after training: 0.33333333333333337
User 6095 does not improve AUC. Reverting changes.
Training on augumented user 115083 30/50 current_auc = 0.33333333333333337
User 115083 AUC after training: 0.33333333333333337
User 115083 does not improve AUC. Reverting changes.
Training on augumented user 62406 31/50 current_auc = 0.33333333333333337
User 62406 AUC after training: 0.33333333333333337
User 62406 does not improve AUC. Reverting changes.
Training on augumented user 41954 32/50 current_auc = 0.33333333333333337
User 41954 AUC after training: 0.33333333333333337
User 41954 does not improve AUC. Reverting changes.
Training on augumented user 18102 33/50 current_auc = 0.33333333333333337
User 18102 AUC after training: 0.33333333333333337
User 18102 does not improve AUC. Reverting changes.
Training on augumented user 50770 34/50 current_auc = 0.33333333333333337
User 50770 AUC after training: 0.33333333333333337
User 50770 does not improve AUC. Reverting changes.
Training on augumented user 124778 35/50 current_auc = 0.33333333333333337
User 124778 AUC after training: 0.33333333333333337
User 124778 does not improve AUC. Reverting changes.
Training on augumented user 87300 36/50 current_auc = 0.33333333333333337
User 87300 AUC after training: 0.33333333333333337
User 87300 does not improve AUC. Reverting changes.
Training on augumented user 49793 37/50 current_auc = 0.33333333333333337
User 49793 AUC after training: 0.33333333333333337
User 49793 does not improve AUC. Reverting changes.
Training on augumented user 34833 38/50 current_auc = 0.33333333333333337
User 34833 AUC after training: 0.33333333333333337
User 34833 does not improve AUC. Reverting changes.
Training on augumented user 78063 39/50 current_auc = 0.33333333333333337
User 78063 AUC after training: 0.33333333333333337
User 78063 does not improve AUC. Reverting changes.
Training on augumented user 87250 40/50 current_auc = 0.33333333333333337
User 87250 AUC after training: 0.33333333333333337
User 87250 does not improve AUC. Reverting changes.
Training on augumented user 134732 41/50 current_auc = 0.33333333333333337
User 134732 AUC after training: 0.33333333333333337
User 134732 does not improve AUC. Reverting changes.
Training on augumented user 9468 42/50 current_auc = 0.33333333333333337
User 9468 AUC after training: 0.33333333333333337
User 9468 does not improve AUC. Reverting changes.
Training on augumented user 95614 43/50 current_auc = 0.33333333333333337
User 95614 AUC after training: 0.33333333333333337
User 95614 does not improve AUC. Reverting changes.
Training on augumented user 52394 44/50 current_auc = 0.33333333333333337
User 52394 AUC after training: 0.33333333333333337
User 52394 does not improve AUC. Reverting changes.
Training on augumented user 20698 45/50 current_auc = 0.33333333333333337
User 20698 AUC after training: 0.33333333333333337
User 20698 does not improve AUC. Reverting changes.
Training on augumented user 90678 46/50 current_auc = 0.33333333333333337
User 90678 AUC after training: 0.33333333333333337
User 90678 does not improve AUC. Reverting changes.
Training on augumented user 92307 47/50 current_auc = 0.33333333333333337
User 92307 AUC after training: 0.33333333333333337
User 92307 does not improve AUC. Reverting changes.
Training on augumented user 56126 48/50 current_auc = 0.33333333333333337
User 56126 AUC after training: 0.33333333333333337
User 56126 does not improve AUC. Reverting changes.
Training on augumented user 11541 49/50 current_auc = 0.33333333333333337
User 11541 AUC after training: 0.33333333333333337
User 11541 does not improve AUC. Reverting changes.
[2024-12-02 18:15:16.798493] start test user 43298 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:17.539243] start test user 43298 69/568 recall augumented users by random, augumented_users = [54370, 12681, 64077, 58360, 12272, 62297, 128904, 39338, 84351, 20367, 31539, 104005, 10270, 88082, 46148, 8196, 99762, 133800, 34360, 116931, 1087, 67391, 43613, 26069, 40659, 27011, 111712, 85931, 87022, 126570, 9274, 109014, 79569, 134061, 28854, 30654, 5719, 1307, 127330, 55228, 75583, 97566, 7743, 29482, 117998, 46776, 125877, 412, 116170, 44872]
[2024-12-02 18:15:17.560671] user = 43298 Cloud 69/568
[2024-12-02 18:15:17.590166] user = 43298 Local 69/568
[2024-12-02 18:15:17.681422] user = 43298 Local+ 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:19.771670] user = 43298 MPDA- 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 54370 0/50 current_auc = 1.0
User 54370 AUC after training: 1.0
User 54370 does not improve AUC. Reverting changes.
Training on augumented user 12681 1/50 current_auc = 1.0
User 12681 AUC after training: 1.0
User 12681 does not improve AUC. Reverting changes.
Training on augumented user 64077 2/50 current_auc = 1.0
User 64077 AUC after training: 1.0
User 64077 does not improve AUC. Reverting changes.
Training on augumented user 58360 3/50 current_auc = 1.0
User 58360 AUC after training: 1.0
User 58360 does not improve AUC. Reverting changes.
Training on augumented user 12272 4/50 current_auc = 1.0
User 12272 AUC after training: 1.0
User 12272 does not improve AUC. Reverting changes.
Training on augumented user 62297 5/50 current_auc = 1.0
User 62297 AUC after training: 1.0
User 62297 does not improve AUC. Reverting changes.
Training on augumented user 128904 6/50 current_auc = 1.0
User 128904 AUC after training: 1.0
User 128904 does not improve AUC. Reverting changes.
Training on augumented user 39338 7/50 current_auc = 1.0
User 39338 AUC after training: 1.0
User 39338 does not improve AUC. Reverting changes.
Training on augumented user 84351 8/50 current_auc = 1.0
User 84351 AUC after training: 1.0
User 84351 does not improve AUC. Reverting changes.
Training on augumented user 20367 9/50 current_auc = 1.0
User 20367 AUC after training: 1.0
User 20367 does not improve AUC. Reverting changes.
Training on augumented user 31539 10/50 current_auc = 1.0
User 31539 AUC after training: 1.0
User 31539 does not improve AUC. Reverting changes.
Training on augumented user 104005 11/50 current_auc = 1.0
User 104005 AUC after training: 1.0
User 104005 does not improve AUC. Reverting changes.
Training on augumented user 10270 12/50 current_auc = 1.0
User 10270 AUC after training: 1.0
User 10270 does not improve AUC. Reverting changes.
Training on augumented user 88082 13/50 current_auc = 1.0
User 88082 AUC after training: 1.0
User 88082 does not improve AUC. Reverting changes.
Training on augumented user 46148 14/50 current_auc = 1.0
User 46148 AUC after training: 1.0
User 46148 does not improve AUC. Reverting changes.
Training on augumented user 8196 15/50 current_auc = 1.0
User 8196 AUC after training: 1.0
User 8196 does not improve AUC. Reverting changes.
Training on augumented user 99762 16/50 current_auc = 1.0
User 99762 AUC after training: 1.0
User 99762 does not improve AUC. Reverting changes.
Training on augumented user 133800 17/50 current_auc = 1.0
User 133800 AUC after training: 1.0
User 133800 does not improve AUC. Reverting changes.
Training on augumented user 34360 18/50 current_auc = 1.0
User 34360 AUC after training: 1.0
User 34360 does not improve AUC. Reverting changes.
Training on augumented user 116931 19/50 current_auc = 1.0
User 116931 AUC after training: 1.0
User 116931 does not improve AUC. Reverting changes.
Training on augumented user 1087 20/50 current_auc = 1.0
User 1087 AUC after training: 1.0
User 1087 does not improve AUC. Reverting changes.
Training on augumented user 67391 21/50 current_auc = 1.0
User 67391 AUC after training: 1.0
User 67391 does not improve AUC. Reverting changes.
Training on augumented user 43613 22/50 current_auc = 1.0
User 43613 AUC after training: 1.0
User 43613 does not improve AUC. Reverting changes.
Training on augumented user 26069 23/50 current_auc = 1.0
User 26069 AUC after training: 1.0
User 26069 does not improve AUC. Reverting changes.
Training on augumented user 40659 24/50 current_auc = 1.0
User 40659 AUC after training: 1.0
User 40659 does not improve AUC. Reverting changes.
Training on augumented user 27011 25/50 current_auc = 1.0
User 27011 AUC after training: 1.0
User 27011 does not improve AUC. Reverting changes.
Training on augumented user 111712 26/50 current_auc = 1.0
User 111712 AUC after training: 1.0
User 111712 does not improve AUC. Reverting changes.
Training on augumented user 85931 27/50 current_auc = 1.0
User 85931 AUC after training: 1.0
User 85931 does not improve AUC. Reverting changes.
Training on augumented user 87022 28/50 current_auc = 1.0
User 87022 AUC after training: 1.0
User 87022 does not improve AUC. Reverting changes.
Training on augumented user 126570 29/50 current_auc = 1.0
User 126570 AUC after training: 1.0
User 126570 does not improve AUC. Reverting changes.
Training on augumented user 9274 30/50 current_auc = 1.0
User 9274 AUC after training: 1.0
User 9274 does not improve AUC. Reverting changes.
Training on augumented user 109014 31/50 current_auc = 1.0
User 109014 AUC after training: 1.0
User 109014 does not improve AUC. Reverting changes.
Training on augumented user 79569 32/50 current_auc = 1.0
User 79569 AUC after training: 1.0
User 79569 does not improve AUC. Reverting changes.
Training on augumented user 134061 33/50 current_auc = 1.0
User 134061 AUC after training: 1.0
User 134061 does not improve AUC. Reverting changes.
Training on augumented user 28854 34/50 current_auc = 1.0
User 28854 AUC after training: 1.0
User 28854 does not improve AUC. Reverting changes.
Training on augumented user 30654 35/50 current_auc = 1.0
User 30654 AUC after training: 1.0
User 30654 does not improve AUC. Reverting changes.
Training on augumented user 5719 36/50 current_auc = 1.0
User 5719 AUC after training: 1.0
User 5719 does not improve AUC. Reverting changes.
Training on augumented user 1307 37/50 current_auc = 1.0
User 1307 AUC after training: 1.0
User 1307 does not improve AUC. Reverting changes.
Training on augumented user 127330 38/50 current_auc = 1.0
User 127330 AUC after training: 1.0
User 127330 does not improve AUC. Reverting changes.
Training on augumented user 55228 39/50 current_auc = 1.0
User 55228 AUC after training: 1.0
User 55228 does not improve AUC. Reverting changes.
Training on augumented user 75583 40/50 current_auc = 1.0
User 75583 AUC after training: 1.0
User 75583 does not improve AUC. Reverting changes.
Training on augumented user 97566 41/50 current_auc = 1.0
User 97566 AUC after training: 1.0
User 97566 does not improve AUC. Reverting changes.
Training on augumented user 7743 42/50 current_auc = 1.0
User 7743 AUC after training: 1.0
User 7743 does not improve AUC. Reverting changes.
Training on augumented user 29482 43/50 current_auc = 1.0
User 29482 AUC after training: 1.0
User 29482 does not improve AUC. Reverting changes.
Training on augumented user 117998 44/50 current_auc = 1.0
User 117998 AUC after training: 1.0
User 117998 does not improve AUC. Reverting changes.
Training on augumented user 46776 45/50 current_auc = 1.0
User 46776 AUC after training: 1.0
User 46776 does not improve AUC. Reverting changes.
Training on augumented user 125877 46/50 current_auc = 1.0
User 125877 AUC after training: 1.0
User 125877 does not improve AUC. Reverting changes.
Training on augumented user 412 47/50 current_auc = 1.0
User 412 AUC after training: 1.0
User 412 does not improve AUC. Reverting changes.
Training on augumented user 116170 48/50 current_auc = 1.0
User 116170 AUC after training: 1.0
User 116170 does not improve AUC. Reverting changes.
Training on augumented user 44872 49/50 current_auc = 1.0
User 44872 AUC after training: 1.0
User 44872 does not improve AUC. Reverting changes.
[2024-12-02 18:15:47.595466] start test user 43329 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:48.130469] start test user 43329 70/568 recall augumented users by random, augumented_users = [29969, 122305, 93852, 87586, 40482, 51573, 14142, 53909, 93183, 132436, 9048, 9866, 65110, 71474, 24453, 93729, 105414, 56102, 121229, 49377, 131664, 24962, 981, 24799, 120923, 44700, 136867, 128809, 117599, 33608, 86249, 16951, 83902, 82784, 14227, 1194, 726, 10274, 15778, 49632, 84746, 133459, 42829, 58196, 47495, 23681, 71886, 12162, 113509, 75899]
[2024-12-02 18:15:48.150923] user = 43329 Cloud 70/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:15:48.158127] user = 43329 Local 70/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:15:48.174473] user = 43329 Local+ 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:15:49.958152] user = 43329 MPDA- 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 29969 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29969 AUC after training: 0.5
User 29969 does not improve AUC. Reverting changes.
Training on augumented user 122305 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122305 AUC after training: 0.5
User 122305 does not improve AUC. Reverting changes.
Training on augumented user 93852 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93852 AUC after training: 0.5
User 93852 does not improve AUC. Reverting changes.
Training on augumented user 87586 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87586 AUC after training: 0.5
User 87586 does not improve AUC. Reverting changes.
Training on augumented user 40482 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40482 AUC after training: 0.5
User 40482 does not improve AUC. Reverting changes.
Training on augumented user 51573 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51573 AUC after training: 0.5
User 51573 does not improve AUC. Reverting changes.
Training on augumented user 14142 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14142 AUC after training: 0.5
User 14142 does not improve AUC. Reverting changes.
Training on augumented user 53909 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53909 AUC after training: 0.5
User 53909 does not improve AUC. Reverting changes.
Training on augumented user 93183 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93183 AUC after training: 0.5
User 93183 does not improve AUC. Reverting changes.
Training on augumented user 132436 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132436 AUC after training: 0.5
User 132436 does not improve AUC. Reverting changes.
Training on augumented user 9048 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9048 AUC after training: 0.5
User 9048 does not improve AUC. Reverting changes.
Training on augumented user 9866 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9866 AUC after training: 0.5
User 9866 does not improve AUC. Reverting changes.
Training on augumented user 65110 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65110 AUC after training: 0.5
User 65110 does not improve AUC. Reverting changes.
Training on augumented user 71474 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71474 AUC after training: 0.5
User 71474 does not improve AUC. Reverting changes.
Training on augumented user 24453 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24453 AUC after training: 0.5
User 24453 does not improve AUC. Reverting changes.
Training on augumented user 93729 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93729 AUC after training: 0.5
User 93729 does not improve AUC. Reverting changes.
Training on augumented user 105414 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105414 AUC after training: 0.5
User 105414 does not improve AUC. Reverting changes.
Training on augumented user 56102 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56102 AUC after training: 0.5
User 56102 does not improve AUC. Reverting changes.
Training on augumented user 121229 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121229 AUC after training: 0.5
User 121229 does not improve AUC. Reverting changes.
Training on augumented user 49377 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49377 AUC after training: 0.5
User 49377 does not improve AUC. Reverting changes.
Training on augumented user 131664 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131664 AUC after training: 0.5
User 131664 does not improve AUC. Reverting changes.
Training on augumented user 24962 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24962 AUC after training: 0.5
User 24962 does not improve AUC. Reverting changes.
Training on augumented user 981 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 981 AUC after training: 0.5
User 981 does not improve AUC. Reverting changes.
Training on augumented user 24799 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24799 AUC after training: 0.5
User 24799 does not improve AUC. Reverting changes.
Training on augumented user 120923 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120923 AUC after training: 0.5
User 120923 does not improve AUC. Reverting changes.
Training on augumented user 44700 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44700 AUC after training: 0.5
User 44700 does not improve AUC. Reverting changes.
Training on augumented user 136867 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136867 AUC after training: 0.5
User 136867 does not improve AUC. Reverting changes.
Training on augumented user 128809 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128809 AUC after training: 0.5
User 128809 does not improve AUC. Reverting changes.
Training on augumented user 117599 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117599 AUC after training: 0.5
User 117599 does not improve AUC. Reverting changes.
Training on augumented user 33608 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33608 AUC after training: 0.5
User 33608 does not improve AUC. Reverting changes.
Training on augumented user 86249 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86249 AUC after training: 0.5
User 86249 does not improve AUC. Reverting changes.
Training on augumented user 16951 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16951 AUC after training: 0.5
User 16951 does not improve AUC. Reverting changes.
Training on augumented user 83902 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83902 AUC after training: 0.5
User 83902 does not improve AUC. Reverting changes.
Training on augumented user 82784 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82784 AUC after training: 0.5
User 82784 does not improve AUC. Reverting changes.
Training on augumented user 14227 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14227 AUC after training: 0.5
User 14227 does not improve AUC. Reverting changes.
Training on augumented user 1194 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1194 AUC after training: 0.5
User 1194 does not improve AUC. Reverting changes.
Training on augumented user 726 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 726 AUC after training: 0.5
User 726 does not improve AUC. Reverting changes.
Training on augumented user 10274 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10274 AUC after training: 0.5
User 10274 does not improve AUC. Reverting changes.
Training on augumented user 15778 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15778 AUC after training: 0.5
User 15778 does not improve AUC. Reverting changes.
Training on augumented user 49632 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49632 AUC after training: 0.5
User 49632 does not improve AUC. Reverting changes.
Training on augumented user 84746 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84746 AUC after training: 0.5
User 84746 does not improve AUC. Reverting changes.
Training on augumented user 133459 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133459 AUC after training: 0.5
User 133459 does not improve AUC. Reverting changes.
Training on augumented user 42829 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42829 AUC after training: 0.5
User 42829 does not improve AUC. Reverting changes.
Training on augumented user 58196 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58196 AUC after training: 0.5
User 58196 does not improve AUC. Reverting changes.
Training on augumented user 47495 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47495 AUC after training: 0.5
User 47495 does not improve AUC. Reverting changes.
Training on augumented user 23681 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23681 AUC after training: 0.5
User 23681 does not improve AUC. Reverting changes.
Training on augumented user 71886 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71886 AUC after training: 0.5
User 71886 does not improve AUC. Reverting changes.
Training on augumented user 12162 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12162 AUC after training: 0.5
User 12162 does not improve AUC. Reverting changes.
Training on augumented user 113509 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113509 AUC after training: 0.5
User 113509 does not improve AUC. Reverting changes.
Training on augumented user 75899 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75899 AUC after training: 0.5
User 75899 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:16:17.644655] start test user 43350 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:18.068287] start test user 43350 71/568 recall augumented users by random, augumented_users = [69012, 83644, 129501, 47865, 15575, 125727, 8130, 137791, 13827, 51234, 112838, 132277, 49166, 60309, 18793, 124183, 78127, 123147, 65882, 83385, 36975, 9310, 80085, 103417, 37162, 93486, 123302, 102830, 88291, 17795, 106411, 43559, 56590, 50403, 17835, 120909, 72235, 52371, 32845, 5564, 120180, 8981, 46159, 26479, 116519, 86213, 53715, 121309, 46468, 39658]
[2024-12-02 18:16:18.082414] user = 43350 Cloud 71/568
[2024-12-02 18:16:18.101678] user = 43350 Local 71/568
[2024-12-02 18:16:18.121691] user = 43350 Local+ 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:19.702336] user = 43350 MPDA- 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.85
Training on augumented user 69012 0/50 current_auc = 0.85
User 69012 AUC after training: 0.85
User 69012 does not improve AUC. Reverting changes.
Training on augumented user 83644 1/50 current_auc = 0.85
User 83644 AUC after training: 0.85
User 83644 does not improve AUC. Reverting changes.
Training on augumented user 129501 2/50 current_auc = 0.85
User 129501 AUC after training: 0.8333333333333334
User 129501 does not improve AUC. Reverting changes.
Training on augumented user 47865 3/50 current_auc = 0.85
User 47865 AUC after training: 0.85
User 47865 does not improve AUC. Reverting changes.
Training on augumented user 15575 4/50 current_auc = 0.85
User 15575 AUC after training: 0.85
User 15575 does not improve AUC. Reverting changes.
Training on augumented user 125727 5/50 current_auc = 0.85
User 125727 AUC after training: 0.85
User 125727 does not improve AUC. Reverting changes.
Training on augumented user 8130 6/50 current_auc = 0.85
User 8130 AUC after training: 0.85
User 8130 does not improve AUC. Reverting changes.
Training on augumented user 137791 7/50 current_auc = 0.85
User 137791 AUC after training: 0.85
User 137791 does not improve AUC. Reverting changes.
Training on augumented user 13827 8/50 current_auc = 0.85
User 13827 AUC after training: 0.85
User 13827 does not improve AUC. Reverting changes.
Training on augumented user 51234 9/50 current_auc = 0.85
User 51234 AUC after training: 0.85
User 51234 does not improve AUC. Reverting changes.
Training on augumented user 112838 10/50 current_auc = 0.85
User 112838 AUC after training: 0.85
User 112838 does not improve AUC. Reverting changes.
Training on augumented user 132277 11/50 current_auc = 0.85
User 132277 AUC after training: 0.85
User 132277 does not improve AUC. Reverting changes.
Training on augumented user 49166 12/50 current_auc = 0.85
User 49166 AUC after training: 0.85
User 49166 does not improve AUC. Reverting changes.
Training on augumented user 60309 13/50 current_auc = 0.85
User 60309 AUC after training: 0.85
User 60309 does not improve AUC. Reverting changes.
Training on augumented user 18793 14/50 current_auc = 0.85
User 18793 AUC after training: 0.85
User 18793 does not improve AUC. Reverting changes.
Training on augumented user 124183 15/50 current_auc = 0.85
User 124183 AUC after training: 0.8333333333333334
User 124183 does not improve AUC. Reverting changes.
Training on augumented user 78127 16/50 current_auc = 0.85
User 78127 AUC after training: 0.85
User 78127 does not improve AUC. Reverting changes.
Training on augumented user 123147 17/50 current_auc = 0.85
User 123147 AUC after training: 0.85
User 123147 does not improve AUC. Reverting changes.
Training on augumented user 65882 18/50 current_auc = 0.85
User 65882 AUC after training: 0.85
User 65882 does not improve AUC. Reverting changes.
Training on augumented user 83385 19/50 current_auc = 0.85
User 83385 AUC after training: 0.85
User 83385 does not improve AUC. Reverting changes.
Training on augumented user 36975 20/50 current_auc = 0.85
User 36975 AUC after training: 0.85
User 36975 does not improve AUC. Reverting changes.
Training on augumented user 9310 21/50 current_auc = 0.85
User 9310 AUC after training: 0.85
User 9310 does not improve AUC. Reverting changes.
Training on augumented user 80085 22/50 current_auc = 0.85
User 80085 AUC after training: 0.85
User 80085 does not improve AUC. Reverting changes.
Training on augumented user 103417 23/50 current_auc = 0.85
User 103417 AUC after training: 0.85
User 103417 does not improve AUC. Reverting changes.
Training on augumented user 37162 24/50 current_auc = 0.85
User 37162 AUC after training: 0.85
User 37162 does not improve AUC. Reverting changes.
Training on augumented user 93486 25/50 current_auc = 0.85
User 93486 AUC after training: 0.85
User 93486 does not improve AUC. Reverting changes.
Training on augumented user 123302 26/50 current_auc = 0.85
User 123302 AUC after training: 0.85
User 123302 does not improve AUC. Reverting changes.
Training on augumented user 102830 27/50 current_auc = 0.85
User 102830 AUC after training: 0.85
User 102830 does not improve AUC. Reverting changes.
Training on augumented user 88291 28/50 current_auc = 0.85
User 88291 AUC after training: 0.85
User 88291 does not improve AUC. Reverting changes.
Training on augumented user 17795 29/50 current_auc = 0.85
User 17795 AUC after training: 0.85
User 17795 does not improve AUC. Reverting changes.
Training on augumented user 106411 30/50 current_auc = 0.85
User 106411 AUC after training: 0.85
User 106411 does not improve AUC. Reverting changes.
Training on augumented user 43559 31/50 current_auc = 0.85
User 43559 AUC after training: 0.85
User 43559 does not improve AUC. Reverting changes.
Training on augumented user 56590 32/50 current_auc = 0.85
User 56590 AUC after training: 0.85
User 56590 does not improve AUC. Reverting changes.
Training on augumented user 50403 33/50 current_auc = 0.85
User 50403 AUC after training: 0.85
User 50403 does not improve AUC. Reverting changes.
Training on augumented user 17835 34/50 current_auc = 0.85
User 17835 AUC after training: 0.85
User 17835 does not improve AUC. Reverting changes.
Training on augumented user 120909 35/50 current_auc = 0.85
User 120909 AUC after training: 0.85
User 120909 does not improve AUC. Reverting changes.
Training on augumented user 72235 36/50 current_auc = 0.85
User 72235 AUC after training: 0.85
User 72235 does not improve AUC. Reverting changes.
Training on augumented user 52371 37/50 current_auc = 0.85
User 52371 AUC after training: 0.85
User 52371 does not improve AUC. Reverting changes.
Training on augumented user 32845 38/50 current_auc = 0.85
User 32845 AUC after training: 0.85
User 32845 does not improve AUC. Reverting changes.
Training on augumented user 5564 39/50 current_auc = 0.85
User 5564 AUC after training: 0.85
User 5564 does not improve AUC. Reverting changes.
Training on augumented user 120180 40/50 current_auc = 0.85
User 120180 AUC after training: 0.85
User 120180 does not improve AUC. Reverting changes.
Training on augumented user 8981 41/50 current_auc = 0.85
User 8981 AUC after training: 0.85
User 8981 does not improve AUC. Reverting changes.
Training on augumented user 46159 42/50 current_auc = 0.85
User 46159 AUC after training: 0.85
User 46159 does not improve AUC. Reverting changes.
Training on augumented user 26479 43/50 current_auc = 0.85
User 26479 AUC after training: 0.8333333333333334
User 26479 does not improve AUC. Reverting changes.
Training on augumented user 116519 44/50 current_auc = 0.85
User 116519 AUC after training: 0.85
User 116519 does not improve AUC. Reverting changes.
Training on augumented user 86213 45/50 current_auc = 0.85
User 86213 AUC after training: 0.85
User 86213 does not improve AUC. Reverting changes.
Training on augumented user 53715 46/50 current_auc = 0.85
User 53715 AUC after training: 0.85
User 53715 does not improve AUC. Reverting changes.
Training on augumented user 121309 47/50 current_auc = 0.85
User 121309 AUC after training: 0.85
User 121309 does not improve AUC. Reverting changes.
Training on augumented user 46468 48/50 current_auc = 0.85
User 46468 AUC after training: 0.85
User 46468 does not improve AUC. Reverting changes.
Training on augumented user 39658 49/50 current_auc = 0.85
User 39658 AUC after training: 0.85
User 39658 does not improve AUC. Reverting changes.
[2024-12-02 18:16:52.240170] start test user 43383 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:52.685172] start test user 43383 72/568 recall augumented users by random, augumented_users = [31174, 47280, 63944, 9052, 79410, 134900, 92384, 65385, 112994, 125954, 15598, 4715, 93365, 80130, 131532, 22957, 32780, 111901, 37446, 2508, 137325, 59329, 96499, 134280, 95646, 30693, 32551, 84071, 93267, 6332, 26037, 71006, 134119, 95724, 77788, 4033, 1083, 19421, 104525, 55101, 121194, 77703, 18213, 49115, 56456, 25387, 45847, 93062, 129626, 79135]
[2024-12-02 18:16:52.699664] user = 43383 Cloud 72/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:16:52.717253] user = 43383 Local 72/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:16:52.778343] user = 43383 Local+ 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:16:54.839120] user = 43383 MPDA- 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 31174 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31174 AUC after training: 0.5
User 31174 does not improve AUC. Reverting changes.
Training on augumented user 47280 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47280 AUC after training: 0.5
User 47280 does not improve AUC. Reverting changes.
Training on augumented user 63944 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63944 AUC after training: 0.5
User 63944 does not improve AUC. Reverting changes.
Training on augumented user 9052 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9052 AUC after training: 0.5
User 9052 does not improve AUC. Reverting changes.
Training on augumented user 79410 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79410 AUC after training: 0.5
User 79410 does not improve AUC. Reverting changes.
Training on augumented user 134900 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134900 AUC after training: 0.5
User 134900 does not improve AUC. Reverting changes.
Training on augumented user 92384 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92384 AUC after training: 0.5
User 92384 does not improve AUC. Reverting changes.
Training on augumented user 65385 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65385 AUC after training: 0.5
User 65385 does not improve AUC. Reverting changes.
Training on augumented user 112994 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112994 AUC after training: 0.5
User 112994 does not improve AUC. Reverting changes.
Training on augumented user 125954 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125954 AUC after training: 0.5
User 125954 does not improve AUC. Reverting changes.
Training on augumented user 15598 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15598 AUC after training: 0.5
User 15598 does not improve AUC. Reverting changes.
Training on augumented user 4715 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4715 AUC after training: 0.5
User 4715 does not improve AUC. Reverting changes.
Training on augumented user 93365 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93365 AUC after training: 0.5
User 93365 does not improve AUC. Reverting changes.
Training on augumented user 80130 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80130 AUC after training: 0.5
User 80130 does not improve AUC. Reverting changes.
Training on augumented user 131532 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131532 AUC after training: 0.5
User 131532 does not improve AUC. Reverting changes.
Training on augumented user 22957 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22957 AUC after training: 0.5
User 22957 does not improve AUC. Reverting changes.
Training on augumented user 32780 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32780 AUC after training: 0.5
User 32780 does not improve AUC. Reverting changes.
Training on augumented user 111901 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111901 AUC after training: 0.5
User 111901 does not improve AUC. Reverting changes.
Training on augumented user 37446 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37446 AUC after training: 0.5
User 37446 does not improve AUC. Reverting changes.
Training on augumented user 2508 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2508 AUC after training: 0.5
User 2508 does not improve AUC. Reverting changes.
Training on augumented user 137325 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137325 AUC after training: 0.5
User 137325 does not improve AUC. Reverting changes.
Training on augumented user 59329 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59329 AUC after training: 0.5
User 59329 does not improve AUC. Reverting changes.
Training on augumented user 96499 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96499 AUC after training: 0.5
User 96499 does not improve AUC. Reverting changes.
Training on augumented user 134280 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134280 AUC after training: 0.5
User 134280 does not improve AUC. Reverting changes.
Training on augumented user 95646 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95646 AUC after training: 0.5
User 95646 does not improve AUC. Reverting changes.
Training on augumented user 30693 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30693 AUC after training: 0.5
User 30693 does not improve AUC. Reverting changes.
Training on augumented user 32551 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32551 AUC after training: 0.5
User 32551 does not improve AUC. Reverting changes.
Training on augumented user 84071 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84071 AUC after training: 0.5
User 84071 does not improve AUC. Reverting changes.
Training on augumented user 93267 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93267 AUC after training: 0.5
User 93267 does not improve AUC. Reverting changes.
Training on augumented user 6332 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6332 AUC after training: 0.5
User 6332 does not improve AUC. Reverting changes.
Training on augumented user 26037 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26037 AUC after training: 0.5
User 26037 does not improve AUC. Reverting changes.
Training on augumented user 71006 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71006 AUC after training: 0.5
User 71006 does not improve AUC. Reverting changes.
Training on augumented user 134119 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134119 AUC after training: 0.5
User 134119 does not improve AUC. Reverting changes.
Training on augumented user 95724 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95724 AUC after training: 0.5
User 95724 does not improve AUC. Reverting changes.
Training on augumented user 77788 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77788 AUC after training: 0.5
User 77788 does not improve AUC. Reverting changes.
Training on augumented user 4033 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4033 AUC after training: 0.5
User 4033 does not improve AUC. Reverting changes.
Training on augumented user 1083 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1083 AUC after training: 0.5
User 1083 does not improve AUC. Reverting changes.
Training on augumented user 19421 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19421 AUC after training: 0.5
User 19421 does not improve AUC. Reverting changes.
Training on augumented user 104525 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104525 AUC after training: 0.5
User 104525 does not improve AUC. Reverting changes.
Training on augumented user 55101 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55101 AUC after training: 0.5
User 55101 does not improve AUC. Reverting changes.
Training on augumented user 121194 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121194 AUC after training: 0.5
User 121194 does not improve AUC. Reverting changes.
Training on augumented user 77703 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77703 AUC after training: 0.5
User 77703 does not improve AUC. Reverting changes.
Training on augumented user 18213 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18213 AUC after training: 0.5
User 18213 does not improve AUC. Reverting changes.
Training on augumented user 49115 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49115 AUC after training: 0.5
User 49115 does not improve AUC. Reverting changes.
Training on augumented user 56456 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56456 AUC after training: 0.5
User 56456 does not improve AUC. Reverting changes.
Training on augumented user 25387 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25387 AUC after training: 0.5
User 25387 does not improve AUC. Reverting changes.
Training on augumented user 45847 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45847 AUC after training: 0.5
User 45847 does not improve AUC. Reverting changes.
Training on augumented user 93062 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93062 AUC after training: 0.5
User 93062 does not improve AUC. Reverting changes.
Training on augumented user 129626 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129626 AUC after training: 0.5
User 129626 does not improve AUC. Reverting changes.
Training on augumented user 79135 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79135 AUC after training: 0.5
User 79135 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:17:26.883273] start test user 43384 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:27.413809] start test user 43384 73/568 recall augumented users by random, augumented_users = [130332, 45343, 9925, 81357, 102453, 119285, 89655, 26124, 100776, 64544, 29254, 7178, 67662, 129474, 22704, 80930, 85028, 45993, 100432, 27209, 44232, 110609, 81972, 114265, 83612, 76726, 111333, 109403, 4239, 132675, 54775, 22082, 130249, 114516, 110922, 99137, 59586, 2637, 34037, 124652, 22143, 49103, 26283, 79336, 106797, 58199, 50672, 44542, 96603, 130947]
[2024-12-02 18:17:27.435694] user = 43384 Cloud 73/568
[2024-12-02 18:17:27.508479] user = 43384 Local 73/568
[2024-12-02 18:17:27.735777] user = 43384 Local+ 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:30.223588] user = 43384 MPDA- 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5966094724576755
Training on augumented user 130332 0/50 current_auc = 0.5966094724576755
User 130332 AUC after training: 0.5969407571568919
User 130332 improves AUC. Keeping the model.
Training on augumented user 45343 1/50 current_auc = 0.5969407571568919
User 45343 AUC after training: 0.5967522675866481
User 45343 does not improve AUC. Reverting changes.
Training on augumented user 9925 2/50 current_auc = 0.5969407571568919
User 9925 AUC after training: 0.5967808266124426
User 9925 does not improve AUC. Reverting changes.
Training on augumented user 81357 3/50 current_auc = 0.5969407571568919
User 81357 AUC after training: 0.5966151842628343
User 81357 does not improve AUC. Reverting changes.
Training on augumented user 102453 4/50 current_auc = 0.5969407571568919
User 102453 AUC after training: 0.5966951495350591
User 102453 does not improve AUC. Reverting changes.
Training on augumented user 119285 5/50 current_auc = 0.5969407571568919
User 119285 AUC after training: 0.5966608787041057
User 119285 does not improve AUC. Reverting changes.
Training on augumented user 89655 6/50 current_auc = 0.5969407571568919
User 89655 AUC after training: 0.5970321460394343
User 89655 improves AUC. Keeping the model.
Training on augumented user 26124 7/50 current_auc = 0.5970321460394343
User 26124 AUC after training: 0.5969236217414151
User 26124 does not improve AUC. Reverting changes.
Training on augumented user 100776 8/50 current_auc = 0.5970321460394343
User 100776 AUC after training: 0.5966094724576755
User 100776 does not improve AUC. Reverting changes.
Training on augumented user 64544 9/50 current_auc = 0.5970321460394343
User 64544 AUC after training: 0.5971063995065
User 64544 improves AUC. Keeping the model.
Training on augumented user 29254 10/50 current_auc = 0.5971063995065
User 29254 AUC after training: 0.5969464689620507
User 29254 does not improve AUC. Reverting changes.
Training on augumented user 7178 11/50 current_auc = 0.5971063995065
User 7178 AUC after training: 0.596872215494985
User 7178 does not improve AUC. Reverting changes.
Training on augumented user 67662 12/50 current_auc = 0.5971063995065
User 67662 AUC after training: 0.5970835522858644
User 67662 does not improve AUC. Reverting changes.
Training on augumented user 129474 13/50 current_auc = 0.5971063995065
User 129474 AUC after training: 0.5968493682743494
User 129474 does not improve AUC. Reverting changes.
Training on augumented user 22704 14/50 current_auc = 0.5971063995065
User 22704 AUC after training: 0.59663803148347
User 22704 does not improve AUC. Reverting changes.
Training on augumented user 80930 15/50 current_auc = 0.5971063995065
User 80930 AUC after training: 0.5970321460394342
User 80930 does not improve AUC. Reverting changes.
Training on augumented user 85028 16/50 current_auc = 0.5971063995065
User 85028 AUC after training: 0.5970778404807054
User 85028 does not improve AUC. Reverting changes.
Training on augumented user 45993 17/50 current_auc = 0.5971063995065
User 45993 AUC after training: 0.5970321460394343
User 45993 does not improve AUC. Reverting changes.
Training on augumented user 100432 18/50 current_auc = 0.5971063995065
User 100432 AUC after training: 0.5966266078731521
User 100432 does not improve AUC. Reverting changes.
Training on augumented user 27209 19/50 current_auc = 0.5971063995065
User 27209 AUC after training: 0.5969179099362563
User 27209 does not improve AUC. Reverting changes.
Training on augumented user 44232 20/50 current_auc = 0.5971063995065
User 44232 AUC after training: 0.5969236217414151
User 44232 does not improve AUC. Reverting changes.
Training on augumented user 110609 21/50 current_auc = 0.5971063995065
User 110609 AUC after training: 0.5960211565263085
User 110609 does not improve AUC. Reverting changes.
Training on augumented user 81972 22/50 current_auc = 0.5971063995065
User 81972 AUC after training: 0.5970949758961822
User 81972 does not improve AUC. Reverting changes.
Training on augumented user 114265 23/50 current_auc = 0.5971063995065
User 114265 AUC after training: 0.5971578057529301
User 114265 improves AUC. Keeping the model.
Training on augumented user 83612 24/50 current_auc = 0.5971578057529301
User 83612 AUC after training: 0.5968836391053027
User 83612 does not improve AUC. Reverting changes.
Training on augumented user 76726 25/50 current_auc = 0.5971578057529301
User 76726 AUC after training: 0.5970664168703876
User 76726 does not improve AUC. Reverting changes.
Training on augumented user 111333 26/50 current_auc = 0.5971578057529301
User 111333 AUC after training: 0.5969978752084809
User 111333 does not improve AUC. Reverting changes.
Training on augumented user 109403 27/50 current_auc = 0.5971578057529301
User 109403 AUC after training: 0.5969807397930041
User 109403 does not improve AUC. Reverting changes.
Training on augumented user 4239 28/50 current_auc = 0.5971578057529301
User 4239 AUC after training: 0.596872215494985
User 4239 does not improve AUC. Reverting changes.
Training on augumented user 132675 29/50 current_auc = 0.5971578057529301
User 132675 AUC after training: 0.5970549932600699
User 132675 does not improve AUC. Reverting changes.
Training on augumented user 54775 30/50 current_auc = 0.5971578057529301
User 54775 AUC after training: 0.5969578925723686
User 54775 does not improve AUC. Reverting changes.
Training on augumented user 22082 31/50 current_auc = 0.5971578057529301
User 22082 AUC after training: 0.5969521807672097
User 22082 does not improve AUC. Reverting changes.
Training on augumented user 130249 32/50 current_auc = 0.5971578057529301
User 130249 AUC after training: 0.5971063995065
User 130249 does not improve AUC. Reverting changes.
Training on augumented user 114516 33/50 current_auc = 0.5971578057529301
User 114516 AUC after training: 0.5970092988187986
User 114516 does not improve AUC. Reverting changes.
Training on augumented user 110922 34/50 current_auc = 0.5971578057529301
User 110922 AUC after training: 0.5971063995065001
User 110922 does not improve AUC. Reverting changes.
Training on augumented user 99137 35/50 current_auc = 0.5971578057529301
User 99137 AUC after training: 0.5971121113116589
User 99137 does not improve AUC. Reverting changes.
Training on augumented user 59586 36/50 current_auc = 0.5971578057529301
User 59586 AUC after training: 0.596820809248555
User 59586 does not improve AUC. Reverting changes.
Training on augumented user 2637 37/50 current_auc = 0.5971578057529301
User 2637 AUC after training: 0.596935045351733
User 2637 does not improve AUC. Reverting changes.
Training on augumented user 34037 38/50 current_auc = 0.5971578057529301
User 34037 AUC after training: 0.5970150106239577
User 34037 does not improve AUC. Reverting changes.
Training on augumented user 124652 39/50 current_auc = 0.5971578057529301
User 124652 AUC after training: 0.596872215494985
User 124652 does not improve AUC. Reverting changes.
Training on augumented user 22143 40/50 current_auc = 0.5971578057529301
User 22143 AUC after training: 0.5969636043775275
User 22143 does not improve AUC. Reverting changes.
Training on augumented user 49103 41/50 current_auc = 0.5971578057529301
User 49103 AUC after training: 0.5969578925723685
User 49103 does not improve AUC. Reverting changes.
Training on augumented user 26283 42/50 current_auc = 0.5971578057529301
User 26283 AUC after training: 0.5970607050652288
User 26283 does not improve AUC. Reverting changes.
Training on augumented user 79336 43/50 current_auc = 0.5971578057529301
User 79336 AUC after training: 0.5966266078731522
User 79336 does not improve AUC. Reverting changes.
Training on augumented user 106797 44/50 current_auc = 0.5971578057529301
User 106797 AUC after training: 0.5969693161826863
User 106797 does not improve AUC. Reverting changes.
Training on augumented user 58199 45/50 current_auc = 0.5971578057529301
User 58199 AUC after training: 0.5969236217414151
User 58199 does not improve AUC. Reverting changes.
Training on augumented user 50672 46/50 current_auc = 0.5971578057529301
User 50672 AUC after training: 0.5965637780164044
User 50672 does not improve AUC. Reverting changes.
Training on augumented user 44542 47/50 current_auc = 0.5971578057529301
User 44542 AUC after training: 0.597163517558089
User 44542 improves AUC. Keeping the model.
Training on augumented user 96603 48/50 current_auc = 0.597163517558089
User 96603 AUC after training: 0.5971178231168179
User 96603 does not improve AUC. Reverting changes.
Training on augumented user 130947 49/50 current_auc = 0.597163517558089
User 130947 AUC after training: 0.5971920765838836
User 130947 improves AUC. Keeping the model.
[2024-12-02 18:18:02.390505] start test user 43403 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:02.802899] start test user 43403 74/568 recall augumented users by random, augumented_users = [10451, 41443, 111213, 36565, 77375, 11430, 111838, 138127, 87350, 59815, 110533, 86091, 44772, 18205, 101964, 113198, 22490, 48087, 68357, 114690, 29059, 102056, 41629, 21328, 130430, 66845, 16790, 100751, 42214, 44047, 128764, 85924, 101335, 99459, 95319, 69473, 31871, 37922, 41409, 96513, 26573, 87177, 124996, 25659, 65077, 128097, 6393, 94576, 70553, 16164]
[2024-12-02 18:18:02.816949] user = 43403 Cloud 74/568
[2024-12-02 18:18:02.826734] user = 43403 Local 74/568
[2024-12-02 18:18:02.845969] user = 43403 Local+ 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:04.358066] user = 43403 MPDA- 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.875
Training on augumented user 10451 0/50 current_auc = 0.875
User 10451 AUC after training: 0.875
User 10451 does not improve AUC. Reverting changes.
Training on augumented user 41443 1/50 current_auc = 0.875
User 41443 AUC after training: 0.875
User 41443 does not improve AUC. Reverting changes.
Training on augumented user 111213 2/50 current_auc = 0.875
User 111213 AUC after training: 0.875
User 111213 does not improve AUC. Reverting changes.
Training on augumented user 36565 3/50 current_auc = 0.875
User 36565 AUC after training: 0.875
User 36565 does not improve AUC. Reverting changes.
Training on augumented user 77375 4/50 current_auc = 0.875
User 77375 AUC after training: 0.875
User 77375 does not improve AUC. Reverting changes.
Training on augumented user 11430 5/50 current_auc = 0.875
User 11430 AUC after training: 0.875
User 11430 does not improve AUC. Reverting changes.
Training on augumented user 111838 6/50 current_auc = 0.875
User 111838 AUC after training: 0.875
User 111838 does not improve AUC. Reverting changes.
Training on augumented user 138127 7/50 current_auc = 0.875
User 138127 AUC after training: 0.875
User 138127 does not improve AUC. Reverting changes.
Training on augumented user 87350 8/50 current_auc = 0.875
User 87350 AUC after training: 0.875
User 87350 does not improve AUC. Reverting changes.
Training on augumented user 59815 9/50 current_auc = 0.875
User 59815 AUC after training: 0.875
User 59815 does not improve AUC. Reverting changes.
Training on augumented user 110533 10/50 current_auc = 0.875
User 110533 AUC after training: 0.875
User 110533 does not improve AUC. Reverting changes.
Training on augumented user 86091 11/50 current_auc = 0.875
User 86091 AUC after training: 0.875
User 86091 does not improve AUC. Reverting changes.
Training on augumented user 44772 12/50 current_auc = 0.875
User 44772 AUC after training: 0.875
User 44772 does not improve AUC. Reverting changes.
Training on augumented user 18205 13/50 current_auc = 0.875
User 18205 AUC after training: 0.875
User 18205 does not improve AUC. Reverting changes.
Training on augumented user 101964 14/50 current_auc = 0.875
User 101964 AUC after training: 0.875
User 101964 does not improve AUC. Reverting changes.
Training on augumented user 113198 15/50 current_auc = 0.875
User 113198 AUC after training: 0.875
User 113198 does not improve AUC. Reverting changes.
Training on augumented user 22490 16/50 current_auc = 0.875
User 22490 AUC after training: 0.875
User 22490 does not improve AUC. Reverting changes.
Training on augumented user 48087 17/50 current_auc = 0.875
User 48087 AUC after training: 0.875
User 48087 does not improve AUC. Reverting changes.
Training on augumented user 68357 18/50 current_auc = 0.875
User 68357 AUC after training: 0.875
User 68357 does not improve AUC. Reverting changes.
Training on augumented user 114690 19/50 current_auc = 0.875
User 114690 AUC after training: 0.875
User 114690 does not improve AUC. Reverting changes.
Training on augumented user 29059 20/50 current_auc = 0.875
User 29059 AUC after training: 0.875
User 29059 does not improve AUC. Reverting changes.
Training on augumented user 102056 21/50 current_auc = 0.875
User 102056 AUC after training: 0.875
User 102056 does not improve AUC. Reverting changes.
Training on augumented user 41629 22/50 current_auc = 0.875
User 41629 AUC after training: 0.875
User 41629 does not improve AUC. Reverting changes.
Training on augumented user 21328 23/50 current_auc = 0.875
User 21328 AUC after training: 0.875
User 21328 does not improve AUC. Reverting changes.
Training on augumented user 130430 24/50 current_auc = 0.875
User 130430 AUC after training: 0.875
User 130430 does not improve AUC. Reverting changes.
Training on augumented user 66845 25/50 current_auc = 0.875
User 66845 AUC after training: 0.875
User 66845 does not improve AUC. Reverting changes.
Training on augumented user 16790 26/50 current_auc = 0.875
User 16790 AUC after training: 0.875
User 16790 does not improve AUC. Reverting changes.
Training on augumented user 100751 27/50 current_auc = 0.875
User 100751 AUC after training: 0.875
User 100751 does not improve AUC. Reverting changes.
Training on augumented user 42214 28/50 current_auc = 0.875
User 42214 AUC after training: 0.875
User 42214 does not improve AUC. Reverting changes.
Training on augumented user 44047 29/50 current_auc = 0.875
User 44047 AUC after training: 0.875
User 44047 does not improve AUC. Reverting changes.
Training on augumented user 128764 30/50 current_auc = 0.875
User 128764 AUC after training: 0.875
User 128764 does not improve AUC. Reverting changes.
Training on augumented user 85924 31/50 current_auc = 0.875
User 85924 AUC after training: 0.875
User 85924 does not improve AUC. Reverting changes.
Training on augumented user 101335 32/50 current_auc = 0.875
User 101335 AUC after training: 0.875
User 101335 does not improve AUC. Reverting changes.
Training on augumented user 99459 33/50 current_auc = 0.875
User 99459 AUC after training: 0.875
User 99459 does not improve AUC. Reverting changes.
Training on augumented user 95319 34/50 current_auc = 0.875
User 95319 AUC after training: 0.875
User 95319 does not improve AUC. Reverting changes.
Training on augumented user 69473 35/50 current_auc = 0.875
User 69473 AUC after training: 0.875
User 69473 does not improve AUC. Reverting changes.
Training on augumented user 31871 36/50 current_auc = 0.875
User 31871 AUC after training: 0.875
User 31871 does not improve AUC. Reverting changes.
Training on augumented user 37922 37/50 current_auc = 0.875
User 37922 AUC after training: 0.875
User 37922 does not improve AUC. Reverting changes.
Training on augumented user 41409 38/50 current_auc = 0.875
User 41409 AUC after training: 0.875
User 41409 does not improve AUC. Reverting changes.
Training on augumented user 96513 39/50 current_auc = 0.875
User 96513 AUC after training: 0.875
User 96513 does not improve AUC. Reverting changes.
Training on augumented user 26573 40/50 current_auc = 0.875
User 26573 AUC after training: 0.875
User 26573 does not improve AUC. Reverting changes.
Training on augumented user 87177 41/50 current_auc = 0.875
User 87177 AUC after training: 0.875
User 87177 does not improve AUC. Reverting changes.
Training on augumented user 124996 42/50 current_auc = 0.875
User 124996 AUC after training: 0.875
User 124996 does not improve AUC. Reverting changes.
Training on augumented user 25659 43/50 current_auc = 0.875
User 25659 AUC after training: 0.875
User 25659 does not improve AUC. Reverting changes.
Training on augumented user 65077 44/50 current_auc = 0.875
User 65077 AUC after training: 0.875
User 65077 does not improve AUC. Reverting changes.
Training on augumented user 128097 45/50 current_auc = 0.875
User 128097 AUC after training: 0.875
User 128097 does not improve AUC. Reverting changes.
Training on augumented user 6393 46/50 current_auc = 0.875
User 6393 AUC after training: 0.875
User 6393 does not improve AUC. Reverting changes.
Training on augumented user 94576 47/50 current_auc = 0.875
User 94576 AUC after training: 0.875
User 94576 does not improve AUC. Reverting changes.
Training on augumented user 70553 48/50 current_auc = 0.875
User 70553 AUC after training: 0.875
User 70553 does not improve AUC. Reverting changes.
Training on augumented user 16164 49/50 current_auc = 0.875
User 16164 AUC after training: 0.875
User 16164 does not improve AUC. Reverting changes.
[2024-12-02 18:18:31.357569] start test user 43413 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:31.762877] start test user 43413 75/568 recall augumented users by random, augumented_users = [112452, 74235, 84275, 62218, 3656, 135999, 5842, 94117, 39831, 87661, 47541, 6802, 78991, 13452, 16619, 23837, 8563, 40857, 85552, 79727, 129256, 14855, 74250, 84202, 137899, 65953, 83559, 27033, 88668, 136804, 45111, 23183, 13249, 15869, 44820, 122488, 49849, 53246, 99191, 86247, 47077, 67138, 49371, 13396, 36851, 78978, 58927, 58774, 80646, 112285]
[2024-12-02 18:18:31.777316] user = 43413 Cloud 75/568
[2024-12-02 18:18:31.787451] user = 43413 Local 75/568
[2024-12-02 18:18:31.826887] user = 43413 Local+ 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:33.944249] user = 43413 MPDA- 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5705128205128205
Training on augumented user 112452 0/50 current_auc = 0.5705128205128205
User 112452 AUC after training: 0.5705128205128205
User 112452 does not improve AUC. Reverting changes.
Training on augumented user 74235 1/50 current_auc = 0.5705128205128205
User 74235 AUC after training: 0.5641025641025641
User 74235 does not improve AUC. Reverting changes.
Training on augumented user 84275 2/50 current_auc = 0.5705128205128205
User 84275 AUC after training: 0.5705128205128205
User 84275 does not improve AUC. Reverting changes.
Training on augumented user 62218 3/50 current_auc = 0.5705128205128205
User 62218 AUC after training: 0.5705128205128205
User 62218 does not improve AUC. Reverting changes.
Training on augumented user 3656 4/50 current_auc = 0.5705128205128205
User 3656 AUC after training: 0.5641025641025641
User 3656 does not improve AUC. Reverting changes.
Training on augumented user 135999 5/50 current_auc = 0.5705128205128205
User 135999 AUC after training: 0.5705128205128205
User 135999 does not improve AUC. Reverting changes.
Training on augumented user 5842 6/50 current_auc = 0.5705128205128205
User 5842 AUC after training: 0.5641025641025641
User 5842 does not improve AUC. Reverting changes.
Training on augumented user 94117 7/50 current_auc = 0.5705128205128205
User 94117 AUC after training: 0.5705128205128205
User 94117 does not improve AUC. Reverting changes.
Training on augumented user 39831 8/50 current_auc = 0.5705128205128205
User 39831 AUC after training: 0.5705128205128205
User 39831 does not improve AUC. Reverting changes.
Training on augumented user 87661 9/50 current_auc = 0.5705128205128205
User 87661 AUC after training: 0.5641025641025641
User 87661 does not improve AUC. Reverting changes.
Training on augumented user 47541 10/50 current_auc = 0.5705128205128205
User 47541 AUC after training: 0.5705128205128205
User 47541 does not improve AUC. Reverting changes.
Training on augumented user 6802 11/50 current_auc = 0.5705128205128205
User 6802 AUC after training: 0.5576923076923077
User 6802 does not improve AUC. Reverting changes.
Training on augumented user 78991 12/50 current_auc = 0.5705128205128205
User 78991 AUC after training: 0.5705128205128205
User 78991 does not improve AUC. Reverting changes.
Training on augumented user 13452 13/50 current_auc = 0.5705128205128205
User 13452 AUC after training: 0.5705128205128205
User 13452 does not improve AUC. Reverting changes.
Training on augumented user 16619 14/50 current_auc = 0.5705128205128205
User 16619 AUC after training: 0.5705128205128205
User 16619 does not improve AUC. Reverting changes.
Training on augumented user 23837 15/50 current_auc = 0.5705128205128205
User 23837 AUC after training: 0.5705128205128205
User 23837 does not improve AUC. Reverting changes.
Training on augumented user 8563 16/50 current_auc = 0.5705128205128205
User 8563 AUC after training: 0.5705128205128205
User 8563 does not improve AUC. Reverting changes.
Training on augumented user 40857 17/50 current_auc = 0.5705128205128205
User 40857 AUC after training: 0.5705128205128205
User 40857 does not improve AUC. Reverting changes.
Training on augumented user 85552 18/50 current_auc = 0.5705128205128205
User 85552 AUC after training: 0.5705128205128205
User 85552 does not improve AUC. Reverting changes.
Training on augumented user 79727 19/50 current_auc = 0.5705128205128205
User 79727 AUC after training: 0.5705128205128205
User 79727 does not improve AUC. Reverting changes.
Training on augumented user 129256 20/50 current_auc = 0.5705128205128205
User 129256 AUC after training: 0.5705128205128205
User 129256 does not improve AUC. Reverting changes.
Training on augumented user 14855 21/50 current_auc = 0.5705128205128205
User 14855 AUC after training: 0.5705128205128205
User 14855 does not improve AUC. Reverting changes.
Training on augumented user 74250 22/50 current_auc = 0.5705128205128205
User 74250 AUC after training: 0.5705128205128205
User 74250 does not improve AUC. Reverting changes.
Training on augumented user 84202 23/50 current_auc = 0.5705128205128205
User 84202 AUC after training: 0.5705128205128205
User 84202 does not improve AUC. Reverting changes.
Training on augumented user 137899 24/50 current_auc = 0.5705128205128205
User 137899 AUC after training: 0.5705128205128205
User 137899 does not improve AUC. Reverting changes.
Training on augumented user 65953 25/50 current_auc = 0.5705128205128205
User 65953 AUC after training: 0.5641025641025641
User 65953 does not improve AUC. Reverting changes.
Training on augumented user 83559 26/50 current_auc = 0.5705128205128205
User 83559 AUC after training: 0.5705128205128205
User 83559 does not improve AUC. Reverting changes.
Training on augumented user 27033 27/50 current_auc = 0.5705128205128205
User 27033 AUC after training: 0.5641025641025641
User 27033 does not improve AUC. Reverting changes.
Training on augumented user 88668 28/50 current_auc = 0.5705128205128205
User 88668 AUC after training: 0.5705128205128205
User 88668 does not improve AUC. Reverting changes.
Training on augumented user 136804 29/50 current_auc = 0.5705128205128205
User 136804 AUC after training: 0.5576923076923077
User 136804 does not improve AUC. Reverting changes.
Training on augumented user 45111 30/50 current_auc = 0.5705128205128205
User 45111 AUC after training: 0.5705128205128205
User 45111 does not improve AUC. Reverting changes.
Training on augumented user 23183 31/50 current_auc = 0.5705128205128205
User 23183 AUC after training: 0.5576923076923077
User 23183 does not improve AUC. Reverting changes.
Training on augumented user 13249 32/50 current_auc = 0.5705128205128205
User 13249 AUC after training: 0.5641025641025641
User 13249 does not improve AUC. Reverting changes.
Training on augumented user 15869 33/50 current_auc = 0.5705128205128205
User 15869 AUC after training: 0.5705128205128205
User 15869 does not improve AUC. Reverting changes.
Training on augumented user 44820 34/50 current_auc = 0.5705128205128205
User 44820 AUC after training: 0.5705128205128205
User 44820 does not improve AUC. Reverting changes.
Training on augumented user 122488 35/50 current_auc = 0.5705128205128205
User 122488 AUC after training: 0.5705128205128205
User 122488 does not improve AUC. Reverting changes.
Training on augumented user 49849 36/50 current_auc = 0.5705128205128205
User 49849 AUC after training: 0.5705128205128205
User 49849 does not improve AUC. Reverting changes.
Training on augumented user 53246 37/50 current_auc = 0.5705128205128205
User 53246 AUC after training: 0.5641025641025641
User 53246 does not improve AUC. Reverting changes.
Training on augumented user 99191 38/50 current_auc = 0.5705128205128205
User 99191 AUC after training: 0.5705128205128205
User 99191 does not improve AUC. Reverting changes.
Training on augumented user 86247 39/50 current_auc = 0.5705128205128205
User 86247 AUC after training: 0.5705128205128205
User 86247 does not improve AUC. Reverting changes.
Training on augumented user 47077 40/50 current_auc = 0.5705128205128205
User 47077 AUC after training: 0.5641025641025641
User 47077 does not improve AUC. Reverting changes.
Training on augumented user 67138 41/50 current_auc = 0.5705128205128205
User 67138 AUC after training: 0.5705128205128205
User 67138 does not improve AUC. Reverting changes.
Training on augumented user 49371 42/50 current_auc = 0.5705128205128205
User 49371 AUC after training: 0.5705128205128205
User 49371 does not improve AUC. Reverting changes.
Training on augumented user 13396 43/50 current_auc = 0.5705128205128205
User 13396 AUC after training: 0.5705128205128205
User 13396 does not improve AUC. Reverting changes.
Training on augumented user 36851 44/50 current_auc = 0.5705128205128205
User 36851 AUC after training: 0.5705128205128205
User 36851 does not improve AUC. Reverting changes.
Training on augumented user 78978 45/50 current_auc = 0.5705128205128205
User 78978 AUC after training: 0.5705128205128205
User 78978 does not improve AUC. Reverting changes.
Training on augumented user 58927 46/50 current_auc = 0.5705128205128205
User 58927 AUC after training: 0.5641025641025641
User 58927 does not improve AUC. Reverting changes.
Training on augumented user 58774 47/50 current_auc = 0.5705128205128205
User 58774 AUC after training: 0.5641025641025641
User 58774 does not improve AUC. Reverting changes.
Training on augumented user 80646 48/50 current_auc = 0.5705128205128205
User 80646 AUC after training: 0.5705128205128205
User 80646 does not improve AUC. Reverting changes.
Training on augumented user 112285 49/50 current_auc = 0.5705128205128205
User 112285 AUC after training: 0.5705128205128205
User 112285 does not improve AUC. Reverting changes.
[2024-12-02 18:18:59.445262] start test user 43451 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:00.077959] start test user 43451 76/568 recall augumented users by random, augumented_users = [77718, 21281, 18968, 39020, 22870, 45199, 34558, 132723, 80427, 11725, 42718, 90131, 110156, 36949, 2340, 17016, 13851, 106643, 102020, 135510, 97393, 86692, 58922, 138003, 58767, 63958, 38433, 97714, 54051, 34698, 1213, 13602, 106105, 21741, 85510, 126864, 132158, 51423, 78288, 34268, 69096, 17777, 50628, 40205, 37743, 64535, 136404, 96895, 60420, 31470]
[2024-12-02 18:19:00.100446] user = 43451 Cloud 76/568
[2024-12-02 18:19:00.110036] user = 43451 Local 76/568
[2024-12-02 18:19:00.270107] user = 43451 Local+ 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:02.822326] user = 43451 MPDA- 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8431372549019608
Training on augumented user 77718 0/50 current_auc = 0.8431372549019608
User 77718 AUC after training: 0.8431372549019608
User 77718 does not improve AUC. Reverting changes.
Training on augumented user 21281 1/50 current_auc = 0.8431372549019608
User 21281 AUC after training: 0.8431372549019608
User 21281 does not improve AUC. Reverting changes.
Training on augumented user 18968 2/50 current_auc = 0.8431372549019608
User 18968 AUC after training: 0.8431372549019608
User 18968 does not improve AUC. Reverting changes.
Training on augumented user 39020 3/50 current_auc = 0.8431372549019608
User 39020 AUC after training: 0.8431372549019608
User 39020 does not improve AUC. Reverting changes.
Training on augumented user 22870 4/50 current_auc = 0.8431372549019608
User 22870 AUC after training: 0.8431372549019608
User 22870 does not improve AUC. Reverting changes.
Training on augumented user 45199 5/50 current_auc = 0.8431372549019608
User 45199 AUC after training: 0.8431372549019608
User 45199 does not improve AUC. Reverting changes.
Training on augumented user 34558 6/50 current_auc = 0.8431372549019608
User 34558 AUC after training: 0.8431372549019608
User 34558 does not improve AUC. Reverting changes.
Training on augumented user 132723 7/50 current_auc = 0.8431372549019608
User 132723 AUC after training: 0.8431372549019608
User 132723 does not improve AUC. Reverting changes.
Training on augumented user 80427 8/50 current_auc = 0.8431372549019608
User 80427 AUC after training: 0.8431372549019608
User 80427 does not improve AUC. Reverting changes.
Training on augumented user 11725 9/50 current_auc = 0.8431372549019608
User 11725 AUC after training: 0.8431372549019608
User 11725 does not improve AUC. Reverting changes.
Training on augumented user 42718 10/50 current_auc = 0.8431372549019608
User 42718 AUC after training: 0.8431372549019608
User 42718 does not improve AUC. Reverting changes.
Training on augumented user 90131 11/50 current_auc = 0.8431372549019608
User 90131 AUC after training: 0.8431372549019608
User 90131 does not improve AUC. Reverting changes.
Training on augumented user 110156 12/50 current_auc = 0.8431372549019608
User 110156 AUC after training: 0.8431372549019608
User 110156 does not improve AUC. Reverting changes.
Training on augumented user 36949 13/50 current_auc = 0.8431372549019608
User 36949 AUC after training: 0.8431372549019608
User 36949 does not improve AUC. Reverting changes.
Training on augumented user 2340 14/50 current_auc = 0.8431372549019608
User 2340 AUC after training: 0.8431372549019608
User 2340 does not improve AUC. Reverting changes.
Training on augumented user 17016 15/50 current_auc = 0.8431372549019608
User 17016 AUC after training: 0.8431372549019608
User 17016 does not improve AUC. Reverting changes.
Training on augumented user 13851 16/50 current_auc = 0.8431372549019608
User 13851 AUC after training: 0.8431372549019608
User 13851 does not improve AUC. Reverting changes.
Training on augumented user 106643 17/50 current_auc = 0.8431372549019608
User 106643 AUC after training: 0.8431372549019608
User 106643 does not improve AUC. Reverting changes.
Training on augumented user 102020 18/50 current_auc = 0.8431372549019608
User 102020 AUC after training: 0.8431372549019608
User 102020 does not improve AUC. Reverting changes.
Training on augumented user 135510 19/50 current_auc = 0.8431372549019608
User 135510 AUC after training: 0.8431372549019608
User 135510 does not improve AUC. Reverting changes.
Training on augumented user 97393 20/50 current_auc = 0.8431372549019608
User 97393 AUC after training: 0.8431372549019608
User 97393 does not improve AUC. Reverting changes.
Training on augumented user 86692 21/50 current_auc = 0.8431372549019608
User 86692 AUC after training: 0.8431372549019608
User 86692 does not improve AUC. Reverting changes.
Training on augumented user 58922 22/50 current_auc = 0.8431372549019608
User 58922 AUC after training: 0.8431372549019608
User 58922 does not improve AUC. Reverting changes.
Training on augumented user 138003 23/50 current_auc = 0.8431372549019608
User 138003 AUC after training: 0.8431372549019608
User 138003 does not improve AUC. Reverting changes.
Training on augumented user 58767 24/50 current_auc = 0.8431372549019608
User 58767 AUC after training: 0.8431372549019608
User 58767 does not improve AUC. Reverting changes.
Training on augumented user 63958 25/50 current_auc = 0.8431372549019608
User 63958 AUC after training: 0.8431372549019608
User 63958 does not improve AUC. Reverting changes.
Training on augumented user 38433 26/50 current_auc = 0.8431372549019608
User 38433 AUC after training: 0.8431372549019608
User 38433 does not improve AUC. Reverting changes.
Training on augumented user 97714 27/50 current_auc = 0.8431372549019608
User 97714 AUC after training: 0.8431372549019608
User 97714 does not improve AUC. Reverting changes.
Training on augumented user 54051 28/50 current_auc = 0.8431372549019608
User 54051 AUC after training: 0.8431372549019608
User 54051 does not improve AUC. Reverting changes.
Training on augumented user 34698 29/50 current_auc = 0.8431372549019608
User 34698 AUC after training: 0.8431372549019608
User 34698 does not improve AUC. Reverting changes.
Training on augumented user 1213 30/50 current_auc = 0.8431372549019608
User 1213 AUC after training: 0.8431372549019608
User 1213 does not improve AUC. Reverting changes.
Training on augumented user 13602 31/50 current_auc = 0.8431372549019608
User 13602 AUC after training: 0.8431372549019608
User 13602 does not improve AUC. Reverting changes.
Training on augumented user 106105 32/50 current_auc = 0.8431372549019608
User 106105 AUC after training: 0.8431372549019608
User 106105 does not improve AUC. Reverting changes.
Training on augumented user 21741 33/50 current_auc = 0.8431372549019608
User 21741 AUC after training: 0.8431372549019608
User 21741 does not improve AUC. Reverting changes.
Training on augumented user 85510 34/50 current_auc = 0.8431372549019608
User 85510 AUC after training: 0.8431372549019608
User 85510 does not improve AUC. Reverting changes.
Training on augumented user 126864 35/50 current_auc = 0.8431372549019608
User 126864 AUC after training: 0.8431372549019608
User 126864 does not improve AUC. Reverting changes.
Training on augumented user 132158 36/50 current_auc = 0.8431372549019608
User 132158 AUC after training: 0.8431372549019608
User 132158 does not improve AUC. Reverting changes.
Training on augumented user 51423 37/50 current_auc = 0.8431372549019608
User 51423 AUC after training: 0.8431372549019608
User 51423 does not improve AUC. Reverting changes.
Training on augumented user 78288 38/50 current_auc = 0.8431372549019608
User 78288 AUC after training: 0.8431372549019608
User 78288 does not improve AUC. Reverting changes.
Training on augumented user 34268 39/50 current_auc = 0.8431372549019608
User 34268 AUC after training: 0.8431372549019608
User 34268 does not improve AUC. Reverting changes.
Training on augumented user 69096 40/50 current_auc = 0.8431372549019608
User 69096 AUC after training: 0.8431372549019608
User 69096 does not improve AUC. Reverting changes.
Training on augumented user 17777 41/50 current_auc = 0.8431372549019608
User 17777 AUC after training: 0.8431372549019608
User 17777 does not improve AUC. Reverting changes.
Training on augumented user 50628 42/50 current_auc = 0.8431372549019608
User 50628 AUC after training: 0.8431372549019608
User 50628 does not improve AUC. Reverting changes.
Training on augumented user 40205 43/50 current_auc = 0.8431372549019608
User 40205 AUC after training: 0.8431372549019608
User 40205 does not improve AUC. Reverting changes.
Training on augumented user 37743 44/50 current_auc = 0.8431372549019608
User 37743 AUC after training: 0.8431372549019608
User 37743 does not improve AUC. Reverting changes.
Training on augumented user 64535 45/50 current_auc = 0.8431372549019608
User 64535 AUC after training: 0.8431372549019608
User 64535 does not improve AUC. Reverting changes.
Training on augumented user 136404 46/50 current_auc = 0.8431372549019608
User 136404 AUC after training: 0.8431372549019608
User 136404 does not improve AUC. Reverting changes.
Training on augumented user 96895 47/50 current_auc = 0.8431372549019608
User 96895 AUC after training: 0.8431372549019608
User 96895 does not improve AUC. Reverting changes.
Training on augumented user 60420 48/50 current_auc = 0.8431372549019608
User 60420 AUC after training: 0.8431372549019608
User 60420 does not improve AUC. Reverting changes.
Training on augumented user 31470 49/50 current_auc = 0.8431372549019608
User 31470 AUC after training: 0.8431372549019608
User 31470 does not improve AUC. Reverting changes.
[2024-12-02 18:19:27.639036] start test user 43478 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:28.042973] start test user 43478 77/568 recall augumented users by random, augumented_users = [135313, 17257, 85938, 60737, 688, 102072, 32224, 99252, 100463, 80212, 77825, 91928, 77074, 128754, 136954, 101445, 128485, 137624, 131767, 109862, 121562, 57469, 7416, 133528, 64960, 133256, 38841, 45875, 86842, 75767, 118997, 72690, 19078, 3184, 73732, 18449, 113703, 101847, 100538, 57382, 83033, 98105, 134804, 82977, 74568, 44618, 83593, 109160, 49242, 111132]
[2024-12-02 18:19:28.058604] user = 43478 Cloud 77/568
[2024-12-02 18:19:28.069568] user = 43478 Local 77/568
[2024-12-02 18:19:28.219765] user = 43478 Local+ 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:30.713734] user = 43478 MPDA- 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6470588235294118
Training on augumented user 135313 0/50 current_auc = 0.6470588235294118
User 135313 AUC after training: 0.6470588235294118
User 135313 does not improve AUC. Reverting changes.
Training on augumented user 17257 1/50 current_auc = 0.6470588235294118
User 17257 AUC after training: 0.6470588235294118
User 17257 does not improve AUC. Reverting changes.
Training on augumented user 85938 2/50 current_auc = 0.6470588235294118
User 85938 AUC after training: 0.6470588235294118
User 85938 does not improve AUC. Reverting changes.
Training on augumented user 60737 3/50 current_auc = 0.6470588235294118
User 60737 AUC after training: 0.6470588235294118
User 60737 does not improve AUC. Reverting changes.
Training on augumented user 688 4/50 current_auc = 0.6470588235294118
User 688 AUC after training: 0.6470588235294118
User 688 does not improve AUC. Reverting changes.
Training on augumented user 102072 5/50 current_auc = 0.6470588235294118
User 102072 AUC after training: 0.6470588235294118
User 102072 does not improve AUC. Reverting changes.
Training on augumented user 32224 6/50 current_auc = 0.6470588235294118
User 32224 AUC after training: 0.6550802139037434
User 32224 improves AUC. Keeping the model.
Training on augumented user 99252 7/50 current_auc = 0.6550802139037434
User 99252 AUC after training: 0.6470588235294118
User 99252 does not improve AUC. Reverting changes.
Training on augumented user 100463 8/50 current_auc = 0.6550802139037434
User 100463 AUC after training: 0.6550802139037434
User 100463 does not improve AUC. Reverting changes.
Training on augumented user 80212 9/50 current_auc = 0.6550802139037434
User 80212 AUC after training: 0.6550802139037434
User 80212 does not improve AUC. Reverting changes.
Training on augumented user 77825 10/50 current_auc = 0.6550802139037434
User 77825 AUC after training: 0.6550802139037434
User 77825 does not improve AUC. Reverting changes.
Training on augumented user 91928 11/50 current_auc = 0.6550802139037434
User 91928 AUC after training: 0.6550802139037434
User 91928 does not improve AUC. Reverting changes.
Training on augumented user 77074 12/50 current_auc = 0.6550802139037434
User 77074 AUC after training: 0.6550802139037434
User 77074 does not improve AUC. Reverting changes.
Training on augumented user 128754 13/50 current_auc = 0.6550802139037434
User 128754 AUC after training: 0.6550802139037434
User 128754 does not improve AUC. Reverting changes.
Training on augumented user 136954 14/50 current_auc = 0.6550802139037434
User 136954 AUC after training: 0.6577540106951872
User 136954 improves AUC. Keeping the model.
Training on augumented user 101445 15/50 current_auc = 0.6577540106951872
User 101445 AUC after training: 0.6818181818181819
User 101445 improves AUC. Keeping the model.
Training on augumented user 128485 16/50 current_auc = 0.6818181818181819
User 128485 AUC after training: 0.6818181818181819
User 128485 does not improve AUC. Reverting changes.
Training on augumented user 137624 17/50 current_auc = 0.6818181818181819
User 137624 AUC after training: 0.6737967914438503
User 137624 does not improve AUC. Reverting changes.
Training on augumented user 131767 18/50 current_auc = 0.6818181818181819
User 131767 AUC after training: 0.6737967914438503
User 131767 does not improve AUC. Reverting changes.
Training on augumented user 109862 19/50 current_auc = 0.6818181818181819
User 109862 AUC after training: 0.6737967914438503
User 109862 does not improve AUC. Reverting changes.
Training on augumented user 121562 20/50 current_auc = 0.6818181818181819
User 121562 AUC after training: 0.6818181818181819
User 121562 does not improve AUC. Reverting changes.
Training on augumented user 57469 21/50 current_auc = 0.6818181818181819
User 57469 AUC after training: 0.6818181818181819
User 57469 does not improve AUC. Reverting changes.
Training on augumented user 7416 22/50 current_auc = 0.6818181818181819
User 7416 AUC after training: 0.6818181818181819
User 7416 does not improve AUC. Reverting changes.
Training on augumented user 133528 23/50 current_auc = 0.6818181818181819
User 133528 AUC after training: 0.6737967914438503
User 133528 does not improve AUC. Reverting changes.
Training on augumented user 64960 24/50 current_auc = 0.6818181818181819
User 64960 AUC after training: 0.6818181818181819
User 64960 does not improve AUC. Reverting changes.
Training on augumented user 133256 25/50 current_auc = 0.6818181818181819
User 133256 AUC after training: 0.6657754010695187
User 133256 does not improve AUC. Reverting changes.
Training on augumented user 38841 26/50 current_auc = 0.6818181818181819
User 38841 AUC after training: 0.6818181818181819
User 38841 does not improve AUC. Reverting changes.
Training on augumented user 45875 27/50 current_auc = 0.6818181818181819
User 45875 AUC after training: 0.6737967914438503
User 45875 does not improve AUC. Reverting changes.
Training on augumented user 86842 28/50 current_auc = 0.6818181818181819
User 86842 AUC after training: 0.6737967914438503
User 86842 does not improve AUC. Reverting changes.
Training on augumented user 75767 29/50 current_auc = 0.6818181818181819
User 75767 AUC after training: 0.6737967914438503
User 75767 does not improve AUC. Reverting changes.
Training on augumented user 118997 30/50 current_auc = 0.6818181818181819
User 118997 AUC after training: 0.6737967914438503
User 118997 does not improve AUC. Reverting changes.
Training on augumented user 72690 31/50 current_auc = 0.6818181818181819
User 72690 AUC after training: 0.6818181818181819
User 72690 does not improve AUC. Reverting changes.
Training on augumented user 19078 32/50 current_auc = 0.6818181818181819
User 19078 AUC after training: 0.6818181818181819
User 19078 does not improve AUC. Reverting changes.
Training on augumented user 3184 33/50 current_auc = 0.6818181818181819
User 3184 AUC after training: 0.6818181818181819
User 3184 does not improve AUC. Reverting changes.
Training on augumented user 73732 34/50 current_auc = 0.6818181818181819
User 73732 AUC after training: 0.6818181818181819
User 73732 does not improve AUC. Reverting changes.
Training on augumented user 18449 35/50 current_auc = 0.6818181818181819
User 18449 AUC after training: 0.6577540106951872
User 18449 does not improve AUC. Reverting changes.
Training on augumented user 113703 36/50 current_auc = 0.6818181818181819
User 113703 AUC after training: 0.6818181818181819
User 113703 does not improve AUC. Reverting changes.
Training on augumented user 101847 37/50 current_auc = 0.6818181818181819
User 101847 AUC after training: 0.6818181818181819
User 101847 does not improve AUC. Reverting changes.
Training on augumented user 100538 38/50 current_auc = 0.6818181818181819
User 100538 AUC after training: 0.6818181818181819
User 100538 does not improve AUC. Reverting changes.
Training on augumented user 57382 39/50 current_auc = 0.6818181818181819
User 57382 AUC after training: 0.6737967914438503
User 57382 does not improve AUC. Reverting changes.
Training on augumented user 83033 40/50 current_auc = 0.6818181818181819
User 83033 AUC after training: 0.6737967914438503
User 83033 does not improve AUC. Reverting changes.
Training on augumented user 98105 41/50 current_auc = 0.6818181818181819
User 98105 AUC after training: 0.6818181818181819
User 98105 does not improve AUC. Reverting changes.
Training on augumented user 134804 42/50 current_auc = 0.6818181818181819
User 134804 AUC after training: 0.6737967914438503
User 134804 does not improve AUC. Reverting changes.
Training on augumented user 82977 43/50 current_auc = 0.6818181818181819
User 82977 AUC after training: 0.6818181818181819
User 82977 does not improve AUC. Reverting changes.
Training on augumented user 74568 44/50 current_auc = 0.6818181818181819
User 74568 AUC after training: 0.6737967914438503
User 74568 does not improve AUC. Reverting changes.
Training on augumented user 44618 45/50 current_auc = 0.6818181818181819
User 44618 AUC after training: 0.6818181818181819
User 44618 does not improve AUC. Reverting changes.
Training on augumented user 83593 46/50 current_auc = 0.6818181818181819
User 83593 AUC after training: 0.6818181818181819
User 83593 does not improve AUC. Reverting changes.
Training on augumented user 109160 47/50 current_auc = 0.6818181818181819
User 109160 AUC after training: 0.6737967914438503
User 109160 does not improve AUC. Reverting changes.
Training on augumented user 49242 48/50 current_auc = 0.6818181818181819
User 49242 AUC after training: 0.6818181818181819
User 49242 does not improve AUC. Reverting changes.
Training on augumented user 111132 49/50 current_auc = 0.6818181818181819
User 111132 AUC after training: 0.6818181818181819
User 111132 does not improve AUC. Reverting changes.
[2024-12-02 18:20:00.721907] start test user 43525 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:01.397020] start test user 43525 78/568 recall augumented users by random, augumented_users = [137323, 84160, 137016, 63804, 98387, 30125, 68341, 97967, 44606, 71149, 29438, 69954, 58361, 69414, 95043, 90357, 119657, 115898, 86339, 31191, 41522, 31229, 98890, 69137, 107025, 43893, 137179, 52906, 18605, 69083, 28687, 115463, 77944, 47021, 107633, 128661, 89829, 113477, 86456, 8387, 42006, 93444, 67678, 110201, 15404, 61712, 86170, 88141, 83489, 27556]
[2024-12-02 18:20:01.413277] user = 43525 Cloud 78/568
[2024-12-02 18:20:01.434447] user = 43525 Local 78/568
[2024-12-02 18:20:01.655147] user = 43525 Local+ 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:03.814450] user = 43525 MPDA- 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6632474477394263
Training on augumented user 137323 0/50 current_auc = 0.6632474477394263
User 137323 AUC after training: 0.6627613028682547
User 137323 does not improve AUC. Reverting changes.
Training on augumented user 84160 1/50 current_auc = 0.6632474477394263
User 84160 AUC after training: 0.6621779290228489
User 84160 does not improve AUC. Reverting changes.
Training on augumented user 137016 2/50 current_auc = 0.6632474477394263
User 137016 AUC after training: 0.663150218765192
User 137016 does not improve AUC. Reverting changes.
Training on augumented user 63804 3/50 current_auc = 0.6632474477394263
User 63804 AUC after training: 0.6617890131259115
User 63804 does not improve AUC. Reverting changes.
Training on augumented user 98387 4/50 current_auc = 0.6632474477394263
User 98387 AUC after training: 0.6633446767136606
User 98387 improves AUC. Keeping the model.
Training on augumented user 30125 5/50 current_auc = 0.6633446767136606
User 30125 AUC after training: 0.6635391346621292
User 30125 improves AUC. Keeping the model.
Training on augumented user 68341 6/50 current_auc = 0.6635391346621292
User 68341 AUC after training: 0.6612056392805055
User 68341 does not improve AUC. Reverting changes.
Training on augumented user 97967 7/50 current_auc = 0.6635391346621292
User 97967 AUC after training: 0.6636363636363636
User 97967 improves AUC. Keeping the model.
Training on augumented user 44606 8/50 current_auc = 0.6636363636363636
User 44606 AUC after training: 0.6635391346621294
User 44606 does not improve AUC. Reverting changes.
Training on augumented user 71149 9/50 current_auc = 0.6636363636363636
User 71149 AUC after training: 0.6637335926105979
User 71149 improves AUC. Keeping the model.
Training on augumented user 29438 10/50 current_auc = 0.6637335926105979
User 29438 AUC after training: 0.6641225085075353
User 29438 improves AUC. Keeping the model.
Training on augumented user 69954 11/50 current_auc = 0.6641225085075353
User 69954 AUC after training: 0.6635391346621293
User 69954 does not improve AUC. Reverting changes.
Training on augumented user 58361 12/50 current_auc = 0.6641225085075353
User 58361 AUC after training: 0.6637335926105979
User 58361 does not improve AUC. Reverting changes.
Training on augumented user 69414 13/50 current_auc = 0.6641225085075353
User 69414 AUC after training: 0.6638308215848323
User 69414 does not improve AUC. Reverting changes.
Training on augumented user 95043 14/50 current_auc = 0.6641225085075353
User 95043 AUC after training: 0.6638308215848324
User 95043 does not improve AUC. Reverting changes.
Training on augumented user 90357 15/50 current_auc = 0.6641225085075353
User 90357 AUC after training: 0.6639280505590666
User 90357 does not improve AUC. Reverting changes.
Training on augumented user 119657 16/50 current_auc = 0.6641225085075353
User 119657 AUC after training: 0.6636363636363638
User 119657 does not improve AUC. Reverting changes.
Training on augumented user 115898 17/50 current_auc = 0.6641225085075353
User 115898 AUC after training: 0.6641225085075353
User 115898 does not improve AUC. Reverting changes.
Training on augumented user 86339 18/50 current_auc = 0.6641225085075353
User 86339 AUC after training: 0.6632960622265435
User 86339 does not improve AUC. Reverting changes.
Training on augumented user 31191 19/50 current_auc = 0.6641225085075353
User 31191 AUC after training: 0.6641225085075353
User 31191 does not improve AUC. Reverting changes.
Training on augumented user 41522 20/50 current_auc = 0.6641225085075353
User 41522 AUC after training: 0.6638308215848323
User 41522 does not improve AUC. Reverting changes.
Training on augumented user 31229 21/50 current_auc = 0.6641225085075353
User 31229 AUC after training: 0.663150218765192
User 31229 does not improve AUC. Reverting changes.
Training on augumented user 98890 22/50 current_auc = 0.6641225085075353
User 98890 AUC after training: 0.6639280505590666
User 98890 does not improve AUC. Reverting changes.
Training on augumented user 69137 23/50 current_auc = 0.6641225085075353
User 69137 AUC after training: 0.664025279533301
User 69137 does not improve AUC. Reverting changes.
Training on augumented user 107025 24/50 current_auc = 0.6641225085075353
User 107025 AUC after training: 0.6638308215848323
User 107025 does not improve AUC. Reverting changes.
Training on augumented user 43893 25/50 current_auc = 0.6641225085075353
User 43893 AUC after training: 0.6638308215848323
User 43893 does not improve AUC. Reverting changes.
Training on augumented user 137179 26/50 current_auc = 0.6641225085075353
User 137179 AUC after training: 0.6639280505590666
User 137179 does not improve AUC. Reverting changes.
Training on augumented user 52906 27/50 current_auc = 0.6641225085075353
User 52906 AUC after training: 0.6639280505590667
User 52906 does not improve AUC. Reverting changes.
Training on augumented user 18605 28/50 current_auc = 0.6641225085075353
User 18605 AUC after training: 0.6631502187651921
User 18605 does not improve AUC. Reverting changes.
Training on augumented user 69083 29/50 current_auc = 0.6641225085075353
User 69083 AUC after training: 0.663733592610598
User 69083 does not improve AUC. Reverting changes.
Training on augumented user 28687 30/50 current_auc = 0.6641225085075353
User 28687 AUC after training: 0.6641225085075353
User 28687 does not improve AUC. Reverting changes.
Training on augumented user 115463 31/50 current_auc = 0.6641225085075353
User 115463 AUC after training: 0.6645600388915898
User 115463 improves AUC. Keeping the model.
Training on augumented user 77944 32/50 current_auc = 0.6645600388915898
User 77944 AUC after training: 0.664365580943121
User 77944 does not improve AUC. Reverting changes.
Training on augumented user 47021 33/50 current_auc = 0.6645600388915898
User 47021 AUC after training: 0.6641225085075353
User 47021 does not improve AUC. Reverting changes.
Training on augumented user 107633 34/50 current_auc = 0.6645600388915898
User 107633 AUC after training: 0.6645114244044726
User 107633 does not improve AUC. Reverting changes.
Training on augumented user 128661 35/50 current_auc = 0.6645600388915898
User 128661 AUC after training: 0.6645600388915897
User 128661 does not improve AUC. Reverting changes.
Training on augumented user 89829 36/50 current_auc = 0.6645600388915898
User 89829 AUC after training: 0.6642197374817695
User 89829 does not improve AUC. Reverting changes.
Training on augumented user 113477 37/50 current_auc = 0.6645600388915898
User 113477 AUC after training: 0.6645114244044725
User 113477 does not improve AUC. Reverting changes.
Training on augumented user 86456 38/50 current_auc = 0.6645600388915898
User 86456 AUC after training: 0.6640252795333009
User 86456 does not improve AUC. Reverting changes.
Training on augumented user 8387 39/50 current_auc = 0.6645600388915898
User 8387 AUC after training: 0.6646086533787069
User 8387 improves AUC. Keeping the model.
Training on augumented user 42006 40/50 current_auc = 0.6646086533787069
User 42006 AUC after training: 0.6641225085075353
User 42006 does not improve AUC. Reverting changes.
Training on augumented user 93444 41/50 current_auc = 0.6646086533787069
User 93444 AUC after training: 0.6646086533787069
User 93444 does not improve AUC. Reverting changes.
Training on augumented user 67678 42/50 current_auc = 0.6646086533787069
User 67678 AUC after training: 0.6643655809431209
User 67678 does not improve AUC. Reverting changes.
Training on augumented user 110201 43/50 current_auc = 0.6646086533787069
User 110201 AUC after training: 0.6640252795333008
User 110201 does not improve AUC. Reverting changes.
Training on augumented user 15404 44/50 current_auc = 0.6646086533787069
User 15404 AUC after training: 0.6646086533787069
User 15404 does not improve AUC. Reverting changes.
Training on augumented user 61712 45/50 current_auc = 0.6646086533787069
User 61712 AUC after training: 0.664365580943121
User 61712 does not improve AUC. Reverting changes.
Training on augumented user 86170 46/50 current_auc = 0.6646086533787069
User 86170 AUC after training: 0.6645600388915897
User 86170 does not improve AUC. Reverting changes.
Training on augumented user 88141 47/50 current_auc = 0.6646086533787069
User 88141 AUC after training: 0.6645114244044725
User 88141 does not improve AUC. Reverting changes.
Training on augumented user 83489 48/50 current_auc = 0.6646086533787069
User 83489 AUC after training: 0.6644141954302383
User 83489 does not improve AUC. Reverting changes.
Training on augumented user 27556 49/50 current_auc = 0.6646086533787069
User 27556 AUC after training: 0.6643169664560038
User 27556 does not improve AUC. Reverting changes.
[2024-12-02 18:20:33.941467] start test user 43539 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:34.525094] start test user 43539 79/568 recall augumented users by random, augumented_users = [20162, 48826, 135923, 114186, 134063, 107849, 107929, 87486, 34965, 31820, 34881, 74872, 38380, 123417, 55403, 17775, 86686, 64629, 45980, 71836, 98753, 5157, 26872, 17283, 113823, 60148, 87666, 52566, 134366, 81810, 105014, 97033, 88796, 107443, 97712, 17249, 20761, 121244, 127011, 52628, 49809, 32044, 93167, 57995, 137546, 68633, 134622, 102420, 10603, 19854]
[2024-12-02 18:20:34.559781] user = 43539 Cloud 79/568
[2024-12-02 18:20:34.602293] user = 43539 Local 79/568
[2024-12-02 18:20:34.723890] user = 43539 Local+ 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:37.092153] user = 43539 MPDA- 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.724616858237548
Training on augumented user 20162 0/50 current_auc = 0.724616858237548
User 20162 AUC after training: 0.7243773946360154
User 20162 does not improve AUC. Reverting changes.
Training on augumented user 48826 1/50 current_auc = 0.724616858237548
User 48826 AUC after training: 0.7241379310344828
User 48826 does not improve AUC. Reverting changes.
Training on augumented user 135923 2/50 current_auc = 0.724616858237548
User 135923 AUC after training: 0.7243773946360154
User 135923 does not improve AUC. Reverting changes.
Training on augumented user 114186 3/50 current_auc = 0.724616858237548
User 114186 AUC after training: 0.7243773946360154
User 114186 does not improve AUC. Reverting changes.
Training on augumented user 134063 4/50 current_auc = 0.724616858237548
User 134063 AUC after training: 0.7243773946360154
User 134063 does not improve AUC. Reverting changes.
Training on augumented user 107849 5/50 current_auc = 0.724616858237548
User 107849 AUC after training: 0.7238984674329502
User 107849 does not improve AUC. Reverting changes.
Training on augumented user 107929 6/50 current_auc = 0.724616858237548
User 107929 AUC after training: 0.7241379310344828
User 107929 does not improve AUC. Reverting changes.
Training on augumented user 87486 7/50 current_auc = 0.724616858237548
User 87486 AUC after training: 0.728448275862069
User 87486 improves AUC. Keeping the model.
Training on augumented user 34965 8/50 current_auc = 0.728448275862069
User 34965 AUC after training: 0.726772030651341
User 34965 does not improve AUC. Reverting changes.
Training on augumented user 31820 9/50 current_auc = 0.728448275862069
User 31820 AUC after training: 0.7260536398467433
User 31820 does not improve AUC. Reverting changes.
Training on augumented user 34881 10/50 current_auc = 0.728448275862069
User 34881 AUC after training: 0.7282088122605365
User 34881 does not improve AUC. Reverting changes.
Training on augumented user 74872 11/50 current_auc = 0.728448275862069
User 74872 AUC after training: 0.7277298850574713
User 74872 does not improve AUC. Reverting changes.
Training on augumented user 38380 12/50 current_auc = 0.728448275862069
User 38380 AUC after training: 0.7286877394636015
User 38380 improves AUC. Keeping the model.
Training on augumented user 123417 13/50 current_auc = 0.7286877394636015
User 123417 AUC after training: 0.728927203065134
User 123417 improves AUC. Keeping the model.
Training on augumented user 55403 14/50 current_auc = 0.728927203065134
User 55403 AUC after training: 0.7294061302681992
User 55403 improves AUC. Keeping the model.
Training on augumented user 17775 15/50 current_auc = 0.7294061302681992
User 17775 AUC after training: 0.7279693486590039
User 17775 does not improve AUC. Reverting changes.
Training on augumented user 86686 16/50 current_auc = 0.7294061302681992
User 86686 AUC after training: 0.7286877394636015
User 86686 does not improve AUC. Reverting changes.
Training on augumented user 64629 17/50 current_auc = 0.7294061302681992
User 64629 AUC after training: 0.7294061302681992
User 64629 does not improve AUC. Reverting changes.
Training on augumented user 45980 18/50 current_auc = 0.7294061302681992
User 45980 AUC after training: 0.7272509578544062
User 45980 does not improve AUC. Reverting changes.
Training on augumented user 71836 19/50 current_auc = 0.7294061302681992
User 71836 AUC after training: 0.7294061302681992
User 71836 does not improve AUC. Reverting changes.
Training on augumented user 98753 20/50 current_auc = 0.7294061302681992
User 98753 AUC after training: 0.7274904214559387
User 98753 does not improve AUC. Reverting changes.
Training on augumented user 5157 21/50 current_auc = 0.7294061302681992
User 5157 AUC after training: 0.7296455938697318
User 5157 improves AUC. Keeping the model.
Training on augumented user 26872 22/50 current_auc = 0.7296455938697318
User 26872 AUC after training: 0.7294061302681992
User 26872 does not improve AUC. Reverting changes.
Training on augumented user 17283 23/50 current_auc = 0.7296455938697318
User 17283 AUC after training: 0.7298850574712644
User 17283 improves AUC. Keeping the model.
Training on augumented user 113823 24/50 current_auc = 0.7298850574712644
User 113823 AUC after training: 0.7286877394636015
User 113823 does not improve AUC. Reverting changes.
Training on augumented user 60148 25/50 current_auc = 0.7298850574712644
User 60148 AUC after training: 0.7296455938697318
User 60148 does not improve AUC. Reverting changes.
Training on augumented user 87666 26/50 current_auc = 0.7298850574712644
User 87666 AUC after training: 0.7294061302681992
User 87666 does not improve AUC. Reverting changes.
Training on augumented user 52566 27/50 current_auc = 0.7298850574712644
User 52566 AUC after training: 0.7313218390804599
User 52566 improves AUC. Keeping the model.
Training on augumented user 134366 28/50 current_auc = 0.7313218390804599
User 134366 AUC after training: 0.7308429118773947
User 134366 does not improve AUC. Reverting changes.
Training on augumented user 81810 29/50 current_auc = 0.7313218390804599
User 81810 AUC after training: 0.7306034482758621
User 81810 does not improve AUC. Reverting changes.
Training on augumented user 105014 30/50 current_auc = 0.7313218390804599
User 105014 AUC after training: 0.7313218390804598
User 105014 does not improve AUC. Reverting changes.
Training on augumented user 97033 31/50 current_auc = 0.7313218390804599
User 97033 AUC after training: 0.7315613026819924
User 97033 improves AUC. Keeping the model.
Training on augumented user 88796 32/50 current_auc = 0.7315613026819924
User 88796 AUC after training: 0.7310823754789273
User 88796 does not improve AUC. Reverting changes.
Training on augumented user 107443 33/50 current_auc = 0.7315613026819924
User 107443 AUC after training: 0.7313218390804598
User 107443 does not improve AUC. Reverting changes.
Training on augumented user 97712 34/50 current_auc = 0.7315613026819924
User 97712 AUC after training: 0.731800766283525
User 97712 improves AUC. Keeping the model.
Training on augumented user 17249 35/50 current_auc = 0.731800766283525
User 17249 AUC after training: 0.7320402298850575
User 17249 improves AUC. Keeping the model.
Training on augumented user 20761 36/50 current_auc = 0.7320402298850575
User 20761 AUC after training: 0.7327586206896552
User 20761 improves AUC. Keeping the model.
Training on augumented user 121244 37/50 current_auc = 0.7327586206896552
User 121244 AUC after training: 0.7315613026819924
User 121244 does not improve AUC. Reverting changes.
Training on augumented user 127011 38/50 current_auc = 0.7327586206896552
User 127011 AUC after training: 0.7325191570881227
User 127011 does not improve AUC. Reverting changes.
Training on augumented user 52628 39/50 current_auc = 0.7327586206896552
User 52628 AUC after training: 0.7325191570881227
User 52628 does not improve AUC. Reverting changes.
Training on augumented user 49809 40/50 current_auc = 0.7327586206896552
User 49809 AUC after training: 0.7310823754789272
User 49809 does not improve AUC. Reverting changes.
Training on augumented user 32044 41/50 current_auc = 0.7327586206896552
User 32044 AUC after training: 0.7320402298850575
User 32044 does not improve AUC. Reverting changes.
Training on augumented user 93167 42/50 current_auc = 0.7327586206896552
User 93167 AUC after training: 0.7325191570881227
User 93167 does not improve AUC. Reverting changes.
Training on augumented user 57995 43/50 current_auc = 0.7327586206896552
User 57995 AUC after training: 0.7296455938697318
User 57995 does not improve AUC. Reverting changes.
Training on augumented user 137546 44/50 current_auc = 0.7327586206896552
User 137546 AUC after training: 0.7315613026819924
User 137546 does not improve AUC. Reverting changes.
Training on augumented user 68633 45/50 current_auc = 0.7327586206896552
User 68633 AUC after training: 0.7313218390804598
User 68633 does not improve AUC. Reverting changes.
Training on augumented user 134622 46/50 current_auc = 0.7327586206896552
User 134622 AUC after training: 0.7318007662835249
User 134622 does not improve AUC. Reverting changes.
Training on augumented user 102420 47/50 current_auc = 0.7327586206896552
User 102420 AUC after training: 0.7291666666666666
User 102420 does not improve AUC. Reverting changes.
Training on augumented user 10603 48/50 current_auc = 0.7327586206896552
User 10603 AUC after training: 0.7320402298850575
User 10603 does not improve AUC. Reverting changes.
Training on augumented user 19854 49/50 current_auc = 0.7327586206896552
User 19854 AUC after training: 0.7327586206896552
User 19854 does not improve AUC. Reverting changes.
[2024-12-02 18:21:07.249696] start test user 43545 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:07.818961] start test user 43545 80/568 recall augumented users by random, augumented_users = [64705, 85942, 133887, 106773, 28458, 28770, 88964, 123038, 136519, 91174, 67068, 125089, 29038, 53732, 94339, 113611, 37463, 48335, 96600, 12249, 69000, 119791, 56181, 56673, 106266, 92921, 136701, 62254, 111756, 119046, 118536, 43860, 89317, 9822, 13195, 36326, 61958, 24920, 96962, 3968, 45746, 5521, 23607, 67963, 31318, 30113, 70620, 12384, 87194, 57220]
[2024-12-02 18:21:07.847070] user = 43545 Cloud 80/568
[2024-12-02 18:21:07.899708] user = 43545 Local 80/568
[2024-12-02 18:21:08.515200] user = 43545 Local+ 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:11.595760] user = 43545 MPDA- 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6519138755980861
Training on augumented user 64705 0/50 current_auc = 0.6519138755980861
User 64705 AUC after training: 0.6519138755980861
User 64705 does not improve AUC. Reverting changes.
Training on augumented user 85942 1/50 current_auc = 0.6519138755980861
User 85942 AUC after training: 0.6507177033492823
User 85942 does not improve AUC. Reverting changes.
Training on augumented user 133887 2/50 current_auc = 0.6519138755980861
User 133887 AUC after training: 0.6519138755980861
User 133887 does not improve AUC. Reverting changes.
Training on augumented user 106773 3/50 current_auc = 0.6519138755980861
User 106773 AUC after training: 0.6527113237639554
User 106773 improves AUC. Keeping the model.
Training on augumented user 28458 4/50 current_auc = 0.6527113237639554
User 28458 AUC after training: 0.65311004784689
User 28458 improves AUC. Keeping the model.
Training on augumented user 28770 5/50 current_auc = 0.65311004784689
User 28770 AUC after training: 0.6535087719298245
User 28770 improves AUC. Keeping the model.
Training on augumented user 88964 6/50 current_auc = 0.6535087719298245
User 88964 AUC after training: 0.6527113237639554
User 88964 does not improve AUC. Reverting changes.
Training on augumented user 123038 7/50 current_auc = 0.6535087719298245
User 123038 AUC after training: 0.6535087719298246
User 123038 improves AUC. Keeping the model.
Training on augumented user 136519 8/50 current_auc = 0.6535087719298246
User 136519 AUC after training: 0.6547049441786283
User 136519 improves AUC. Keeping the model.
Training on augumented user 91174 9/50 current_auc = 0.6547049441786283
User 91174 AUC after training: 0.6547049441786283
User 91174 does not improve AUC. Reverting changes.
Training on augumented user 67068 10/50 current_auc = 0.6547049441786283
User 67068 AUC after training: 0.6495215311004784
User 67068 does not improve AUC. Reverting changes.
Training on augumented user 125089 11/50 current_auc = 0.6547049441786283
User 125089 AUC after training: 0.6547049441786283
User 125089 does not improve AUC. Reverting changes.
Training on augumented user 29038 12/50 current_auc = 0.6547049441786283
User 29038 AUC after training: 0.6555023923444976
User 29038 improves AUC. Keeping the model.
Training on augumented user 53732 13/50 current_auc = 0.6555023923444976
User 53732 AUC after training: 0.655103668261563
User 53732 does not improve AUC. Reverting changes.
Training on augumented user 94339 14/50 current_auc = 0.6555023923444976
User 94339 AUC after training: 0.6535087719298245
User 94339 does not improve AUC. Reverting changes.
Training on augumented user 113611 15/50 current_auc = 0.6555023923444976
User 113611 AUC after training: 0.6547049441786283
User 113611 does not improve AUC. Reverting changes.
Training on augumented user 37463 16/50 current_auc = 0.6555023923444976
User 37463 AUC after training: 0.6539074960127591
User 37463 does not improve AUC. Reverting changes.
Training on augumented user 48335 17/50 current_auc = 0.6555023923444976
User 48335 AUC after training: 0.6570972886762361
User 48335 improves AUC. Keeping the model.
Training on augumented user 96600 18/50 current_auc = 0.6570972886762361
User 96600 AUC after training: 0.657097288676236
User 96600 does not improve AUC. Reverting changes.
Training on augumented user 12249 19/50 current_auc = 0.6570972886762361
User 12249 AUC after training: 0.6566985645933014
User 12249 does not improve AUC. Reverting changes.
Training on augumented user 69000 20/50 current_auc = 0.6570972886762361
User 69000 AUC after training: 0.6582934609250398
User 69000 improves AUC. Keeping the model.
Training on augumented user 119791 21/50 current_auc = 0.6582934609250398
User 119791 AUC after training: 0.6483253588516746
User 119791 does not improve AUC. Reverting changes.
Training on augumented user 56181 22/50 current_auc = 0.6582934609250398
User 56181 AUC after training: 0.6586921850079744
User 56181 improves AUC. Keeping the model.
Training on augumented user 56673 23/50 current_auc = 0.6586921850079744
User 56673 AUC after training: 0.6586921850079743
User 56673 does not improve AUC. Reverting changes.
Training on augumented user 106266 24/50 current_auc = 0.6586921850079744
User 106266 AUC after training: 0.6602870813397128
User 106266 improves AUC. Keeping the model.
Training on augumented user 92921 25/50 current_auc = 0.6602870813397128
User 92921 AUC after training: 0.6594896331738436
User 92921 does not improve AUC. Reverting changes.
Training on augumented user 136701 26/50 current_auc = 0.6602870813397128
User 136701 AUC after training: 0.6559011164274322
User 136701 does not improve AUC. Reverting changes.
Training on augumented user 62254 27/50 current_auc = 0.6602870813397128
User 62254 AUC after training: 0.6582934609250398
User 62254 does not improve AUC. Reverting changes.
Training on augumented user 111756 28/50 current_auc = 0.6602870813397128
User 111756 AUC after training: 0.6582934609250398
User 111756 does not improve AUC. Reverting changes.
Training on augumented user 119046 29/50 current_auc = 0.6602870813397128
User 119046 AUC after training: 0.6523125996810207
User 119046 does not improve AUC. Reverting changes.
Training on augumented user 118536 30/50 current_auc = 0.6602870813397128
User 118536 AUC after training: 0.6606858054226475
User 118536 improves AUC. Keeping the model.
Training on augumented user 43860 31/50 current_auc = 0.6606858054226475
User 43860 AUC after training: 0.661084529505582
User 43860 improves AUC. Keeping the model.
Training on augumented user 89317 32/50 current_auc = 0.661084529505582
User 89317 AUC after training: 0.6618819776714514
User 89317 improves AUC. Keeping the model.
Training on augumented user 9822 33/50 current_auc = 0.6618819776714514
User 9822 AUC after training: 0.6618819776714514
User 9822 does not improve AUC. Reverting changes.
Training on augumented user 13195 34/50 current_auc = 0.6618819776714514
User 13195 AUC after training: 0.6527113237639554
User 13195 does not improve AUC. Reverting changes.
Training on augumented user 36326 35/50 current_auc = 0.6618819776714514
User 36326 AUC after training: 0.6618819776714513
User 36326 does not improve AUC. Reverting changes.
Training on augumented user 61958 36/50 current_auc = 0.6618819776714514
User 61958 AUC after training: 0.6618819776714513
User 61958 does not improve AUC. Reverting changes.
Training on augumented user 24920 37/50 current_auc = 0.6618819776714514
User 24920 AUC after training: 0.6614832535885167
User 24920 does not improve AUC. Reverting changes.
Training on augumented user 96962 38/50 current_auc = 0.6618819776714514
User 96962 AUC after training: 0.6618819776714513
User 96962 does not improve AUC. Reverting changes.
Training on augumented user 3968 39/50 current_auc = 0.6618819776714514
User 3968 AUC after training: 0.6586921850079744
User 3968 does not improve AUC. Reverting changes.
Training on augumented user 45746 40/50 current_auc = 0.6618819776714514
User 45746 AUC after training: 0.6622807017543859
User 45746 improves AUC. Keeping the model.
Training on augumented user 5521 41/50 current_auc = 0.6622807017543859
User 5521 AUC after training: 0.6618819776714513
User 5521 does not improve AUC. Reverting changes.
Training on augumented user 23607 42/50 current_auc = 0.6622807017543859
User 23607 AUC after training: 0.6630781499202552
User 23607 improves AUC. Keeping the model.
Training on augumented user 67963 43/50 current_auc = 0.6630781499202552
User 67963 AUC after training: 0.6630781499202552
User 67963 does not improve AUC. Reverting changes.
Training on augumented user 31318 44/50 current_auc = 0.6630781499202552
User 31318 AUC after training: 0.6614832535885167
User 31318 does not improve AUC. Reverting changes.
Training on augumented user 30113 45/50 current_auc = 0.6630781499202552
User 30113 AUC after training: 0.6614832535885167
User 30113 does not improve AUC. Reverting changes.
Training on augumented user 70620 46/50 current_auc = 0.6630781499202552
User 70620 AUC after training: 0.6618819776714513
User 70620 does not improve AUC. Reverting changes.
Training on augumented user 12384 47/50 current_auc = 0.6630781499202552
User 12384 AUC after training: 0.6614832535885167
User 12384 does not improve AUC. Reverting changes.
Training on augumented user 87194 48/50 current_auc = 0.6630781499202552
User 87194 AUC after training: 0.6626794258373205
User 87194 does not improve AUC. Reverting changes.
Training on augumented user 57220 49/50 current_auc = 0.6630781499202552
User 57220 AUC after training: 0.6614832535885167
User 57220 does not improve AUC. Reverting changes.
[2024-12-02 18:21:44.572631] start test user 43563 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:45.038348] start test user 43563 81/568 recall augumented users by random, augumented_users = [101813, 120506, 126433, 135901, 126510, 65646, 91111, 125231, 77547, 3626, 19143, 86340, 50124, 82496, 37715, 66982, 103362, 131709, 94411, 106301, 59122, 90957, 32278, 131925, 89113, 9009, 133011, 27331, 63548, 59921, 90, 103862, 112508, 25679, 21938, 88435, 22623, 80542, 49595, 35838, 122452, 45449, 280, 113304, 135285, 45469, 11375, 91889, 83969, 97280]
[2024-12-02 18:21:45.060731] user = 43563 Cloud 81/568
[2024-12-02 18:21:45.137489] user = 43563 Local 81/568
[2024-12-02 18:21:45.218441] user = 43563 Local+ 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:47.268883] user = 43563 MPDA- 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6845208845208846
Training on augumented user 101813 0/50 current_auc = 0.6845208845208846
User 101813 AUC after training: 0.6853808353808354
User 101813 improves AUC. Keeping the model.
Training on augumented user 120506 1/50 current_auc = 0.6853808353808354
User 120506 AUC after training: 0.6853194103194103
User 120506 does not improve AUC. Reverting changes.
Training on augumented user 126433 2/50 current_auc = 0.6853808353808354
User 126433 AUC after training: 0.6855036855036855
User 126433 improves AUC. Keeping the model.
Training on augumented user 135901 3/50 current_auc = 0.6855036855036855
User 135901 AUC after training: 0.6853194103194102
User 135901 does not improve AUC. Reverting changes.
Training on augumented user 126510 4/50 current_auc = 0.6855036855036855
User 126510 AUC after training: 0.6847665847665847
User 126510 does not improve AUC. Reverting changes.
Training on augumented user 65646 5/50 current_auc = 0.6855036855036855
User 65646 AUC after training: 0.6850122850122851
User 65646 does not improve AUC. Reverting changes.
Training on augumented user 91111 6/50 current_auc = 0.6855036855036855
User 91111 AUC after training: 0.6854422604422604
User 91111 does not improve AUC. Reverting changes.
Training on augumented user 125231 7/50 current_auc = 0.6855036855036855
User 125231 AUC after training: 0.6843366093366094
User 125231 does not improve AUC. Reverting changes.
Training on augumented user 77547 8/50 current_auc = 0.6855036855036855
User 77547 AUC after training: 0.6851965601965603
User 77547 does not improve AUC. Reverting changes.
Training on augumented user 3626 9/50 current_auc = 0.6855036855036855
User 3626 AUC after training: 0.6855651105651105
User 3626 improves AUC. Keeping the model.
Training on augumented user 19143 10/50 current_auc = 0.6855651105651105
User 19143 AUC after training: 0.6847665847665847
User 19143 does not improve AUC. Reverting changes.
Training on augumented user 86340 11/50 current_auc = 0.6855651105651105
User 86340 AUC after training: 0.6853808353808354
User 86340 does not improve AUC. Reverting changes.
Training on augumented user 50124 12/50 current_auc = 0.6855651105651105
User 50124 AUC after training: 0.6857493857493857
User 50124 improves AUC. Keeping the model.
Training on augumented user 82496 13/50 current_auc = 0.6857493857493857
User 82496 AUC after training: 0.6857493857493857
User 82496 does not improve AUC. Reverting changes.
Training on augumented user 37715 14/50 current_auc = 0.6857493857493857
User 37715 AUC after training: 0.6856265356265356
User 37715 does not improve AUC. Reverting changes.
Training on augumented user 66982 15/50 current_auc = 0.6857493857493857
User 66982 AUC after training: 0.685012285012285
User 66982 does not improve AUC. Reverting changes.
Training on augumented user 103362 16/50 current_auc = 0.6857493857493857
User 103362 AUC after training: 0.6848280098280098
User 103362 does not improve AUC. Reverting changes.
Training on augumented user 131709 17/50 current_auc = 0.6857493857493857
User 131709 AUC after training: 0.6857493857493857
User 131709 does not improve AUC. Reverting changes.
Training on augumented user 94411 18/50 current_auc = 0.6857493857493857
User 94411 AUC after training: 0.6858108108108107
User 94411 improves AUC. Keeping the model.
Training on augumented user 106301 19/50 current_auc = 0.6858108108108107
User 106301 AUC after training: 0.6861179361179363
User 106301 improves AUC. Keeping the model.
Training on augumented user 59122 20/50 current_auc = 0.6861179361179363
User 59122 AUC after training: 0.6859336609336608
User 59122 does not improve AUC. Reverting changes.
Training on augumented user 90957 21/50 current_auc = 0.6861179361179363
User 90957 AUC after training: 0.6863022113022114
User 90957 improves AUC. Keeping the model.
Training on augumented user 32278 22/50 current_auc = 0.6863022113022114
User 32278 AUC after training: 0.6863636363636364
User 32278 improves AUC. Keeping the model.
Training on augumented user 131925 23/50 current_auc = 0.6863636363636364
User 131925 AUC after training: 0.6855651105651106
User 131925 does not improve AUC. Reverting changes.
Training on augumented user 89113 24/50 current_auc = 0.6863636363636364
User 89113 AUC after training: 0.6847665847665848
User 89113 does not improve AUC. Reverting changes.
Training on augumented user 9009 25/50 current_auc = 0.6863636363636364
User 9009 AUC after training: 0.68482800982801
User 9009 does not improve AUC. Reverting changes.
Training on augumented user 133011 26/50 current_auc = 0.6863636363636364
User 133011 AUC after training: 0.6861793611793612
User 133011 does not improve AUC. Reverting changes.
Training on augumented user 27331 27/50 current_auc = 0.6863636363636364
User 27331 AUC after training: 0.6861793611793612
User 27331 does not improve AUC. Reverting changes.
Training on augumented user 63548 28/50 current_auc = 0.6863636363636364
User 63548 AUC after training: 0.6862407862407862
User 63548 does not improve AUC. Reverting changes.
Training on augumented user 59921 29/50 current_auc = 0.6863636363636364
User 59921 AUC after training: 0.685995085995086
User 59921 does not improve AUC. Reverting changes.
Training on augumented user 90 30/50 current_auc = 0.6863636363636364
User 90 AUC after training: 0.6859950859950861
User 90 does not improve AUC. Reverting changes.
Training on augumented user 103862 31/50 current_auc = 0.6863636363636364
User 103862 AUC after training: 0.6862407862407862
User 103862 does not improve AUC. Reverting changes.
Training on augumented user 112508 32/50 current_auc = 0.6863636363636364
User 112508 AUC after training: 0.6861486486486488
User 112508 does not improve AUC. Reverting changes.
Training on augumented user 25679 33/50 current_auc = 0.6863636363636364
User 25679 AUC after training: 0.6859336609336609
User 25679 does not improve AUC. Reverting changes.
Training on augumented user 21938 34/50 current_auc = 0.6863636363636364
User 21938 AUC after training: 0.6845208845208844
User 21938 does not improve AUC. Reverting changes.
Training on augumented user 88435 35/50 current_auc = 0.6863636363636364
User 88435 AUC after training: 0.6858108108108109
User 88435 does not improve AUC. Reverting changes.
Training on augumented user 22623 36/50 current_auc = 0.6863636363636364
User 22623 AUC after training: 0.6856265356265356
User 22623 does not improve AUC. Reverting changes.
Training on augumented user 80542 37/50 current_auc = 0.6863636363636364
User 80542 AUC after training: 0.6856265356265356
User 80542 does not improve AUC. Reverting changes.
Training on augumented user 49595 38/50 current_auc = 0.6863636363636364
User 49595 AUC after training: 0.6864864864864865
User 49595 improves AUC. Keeping the model.
Training on augumented user 35838 39/50 current_auc = 0.6864864864864865
User 35838 AUC after training: 0.686117936117936
User 35838 does not improve AUC. Reverting changes.
Training on augumented user 122452 40/50 current_auc = 0.6864864864864865
User 122452 AUC after training: 0.6862407862407862
User 122452 does not improve AUC. Reverting changes.
Training on augumented user 45449 41/50 current_auc = 0.6864864864864865
User 45449 AUC after training: 0.6856265356265356
User 45449 does not improve AUC. Reverting changes.
Training on augumented user 280 42/50 current_auc = 0.6864864864864865
User 280 AUC after training: 0.6861793611793612
User 280 does not improve AUC. Reverting changes.
Training on augumented user 113304 43/50 current_auc = 0.6864864864864865
User 113304 AUC after training: 0.6852579852579853
User 113304 does not improve AUC. Reverting changes.
Training on augumented user 135285 44/50 current_auc = 0.6864864864864865
User 135285 AUC after training: 0.6851965601965603
User 135285 does not improve AUC. Reverting changes.
Training on augumented user 45469 45/50 current_auc = 0.6864864864864865
User 45469 AUC after training: 0.6858108108108109
User 45469 does not improve AUC. Reverting changes.
Training on augumented user 11375 46/50 current_auc = 0.6864864864864865
User 11375 AUC after training: 0.6858722358722359
User 11375 does not improve AUC. Reverting changes.
Training on augumented user 91889 47/50 current_auc = 0.6864864864864865
User 91889 AUC after training: 0.6864250614250614
User 91889 does not improve AUC. Reverting changes.
Training on augumented user 83969 48/50 current_auc = 0.6864864864864865
User 83969 AUC after training: 0.6860565110565111
User 83969 does not improve AUC. Reverting changes.
Training on augumented user 97280 49/50 current_auc = 0.6864864864864865
User 97280 AUC after training: 0.6858722358722359
User 97280 does not improve AUC. Reverting changes.
[2024-12-02 18:22:14.246585] start test user 43572 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:14.657657] start test user 43572 82/568 recall augumented users by random, augumented_users = [85234, 96340, 115510, 14715, 82210, 82033, 24550, 60724, 64876, 94283, 106936, 21840, 62159, 9629, 84351, 83022, 101859, 38740, 103955, 32719, 2268, 122947, 37001, 10554, 96834, 96837, 96658, 117378, 37686, 37244, 27230, 89054, 130124, 74799, 26060, 100848, 38015, 19276, 29144, 54358, 84960, 25850, 65289, 86201, 135926, 81605, 113999, 3000, 117286, 42800]
[2024-12-02 18:22:14.672823] user = 43572 Cloud 82/568
[2024-12-02 18:22:14.705266] user = 43572 Local 82/568
[2024-12-02 18:22:14.894859] user = 43572 Local+ 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:16.789433] user = 43572 MPDA- 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4155844155844156
Training on augumented user 85234 0/50 current_auc = 0.4155844155844156
User 85234 AUC after training: 0.4155844155844156
User 85234 does not improve AUC. Reverting changes.
Training on augumented user 96340 1/50 current_auc = 0.4155844155844156
User 96340 AUC after training: 0.4155844155844156
User 96340 does not improve AUC. Reverting changes.
Training on augumented user 115510 2/50 current_auc = 0.4155844155844156
User 115510 AUC after training: 0.4155844155844156
User 115510 does not improve AUC. Reverting changes.
Training on augumented user 14715 3/50 current_auc = 0.4155844155844156
User 14715 AUC after training: 0.4155844155844156
User 14715 does not improve AUC. Reverting changes.
Training on augumented user 82210 4/50 current_auc = 0.4155844155844156
User 82210 AUC after training: 0.4155844155844156
User 82210 does not improve AUC. Reverting changes.
Training on augumented user 82033 5/50 current_auc = 0.4155844155844156
User 82033 AUC after training: 0.4155844155844156
User 82033 does not improve AUC. Reverting changes.
Training on augumented user 24550 6/50 current_auc = 0.4155844155844156
User 24550 AUC after training: 0.4155844155844156
User 24550 does not improve AUC. Reverting changes.
Training on augumented user 60724 7/50 current_auc = 0.4155844155844156
User 60724 AUC after training: 0.4155844155844156
User 60724 does not improve AUC. Reverting changes.
Training on augumented user 64876 8/50 current_auc = 0.4155844155844156
User 64876 AUC after training: 0.4155844155844156
User 64876 does not improve AUC. Reverting changes.
Training on augumented user 94283 9/50 current_auc = 0.4155844155844156
User 94283 AUC after training: 0.4025974025974026
User 94283 does not improve AUC. Reverting changes.
Training on augumented user 106936 10/50 current_auc = 0.4155844155844156
User 106936 AUC after training: 0.4220779220779221
User 106936 improves AUC. Keeping the model.
Training on augumented user 21840 11/50 current_auc = 0.4220779220779221
User 21840 AUC after training: 0.4415584415584416
User 21840 improves AUC. Keeping the model.
Training on augumented user 62159 12/50 current_auc = 0.4415584415584416
User 62159 AUC after training: 0.4220779220779221
User 62159 does not improve AUC. Reverting changes.
Training on augumented user 9629 13/50 current_auc = 0.4415584415584416
User 9629 AUC after training: 0.44805194805194803
User 9629 improves AUC. Keeping the model.
Training on augumented user 84351 14/50 current_auc = 0.44805194805194803
User 84351 AUC after training: 0.4285714285714286
User 84351 does not improve AUC. Reverting changes.
Training on augumented user 83022 15/50 current_auc = 0.44805194805194803
User 83022 AUC after training: 0.4220779220779221
User 83022 does not improve AUC. Reverting changes.
Training on augumented user 101859 16/50 current_auc = 0.44805194805194803
User 101859 AUC after training: 0.43506493506493504
User 101859 does not improve AUC. Reverting changes.
Training on augumented user 38740 17/50 current_auc = 0.44805194805194803
User 38740 AUC after training: 0.4220779220779221
User 38740 does not improve AUC. Reverting changes.
Training on augumented user 103955 18/50 current_auc = 0.44805194805194803
User 103955 AUC after training: 0.4285714285714286
User 103955 does not improve AUC. Reverting changes.
Training on augumented user 32719 19/50 current_auc = 0.44805194805194803
User 32719 AUC after training: 0.4415584415584416
User 32719 does not improve AUC. Reverting changes.
Training on augumented user 2268 20/50 current_auc = 0.44805194805194803
User 2268 AUC after training: 0.4220779220779221
User 2268 does not improve AUC. Reverting changes.
Training on augumented user 122947 21/50 current_auc = 0.44805194805194803
User 122947 AUC after training: 0.44805194805194803
User 122947 does not improve AUC. Reverting changes.
Training on augumented user 37001 22/50 current_auc = 0.44805194805194803
User 37001 AUC after training: 0.44805194805194803
User 37001 does not improve AUC. Reverting changes.
Training on augumented user 10554 23/50 current_auc = 0.44805194805194803
User 10554 AUC after training: 0.4415584415584416
User 10554 does not improve AUC. Reverting changes.
Training on augumented user 96834 24/50 current_auc = 0.44805194805194803
User 96834 AUC after training: 0.4220779220779221
User 96834 does not improve AUC. Reverting changes.
Training on augumented user 96837 25/50 current_auc = 0.44805194805194803
User 96837 AUC after training: 0.4285714285714286
User 96837 does not improve AUC. Reverting changes.
Training on augumented user 96658 26/50 current_auc = 0.44805194805194803
User 96658 AUC after training: 0.4220779220779221
User 96658 does not improve AUC. Reverting changes.
Training on augumented user 117378 27/50 current_auc = 0.44805194805194803
User 117378 AUC after training: 0.43506493506493504
User 117378 does not improve AUC. Reverting changes.
Training on augumented user 37686 28/50 current_auc = 0.44805194805194803
User 37686 AUC after training: 0.4350649350649351
User 37686 does not improve AUC. Reverting changes.
Training on augumented user 37244 29/50 current_auc = 0.44805194805194803
User 37244 AUC after training: 0.43506493506493504
User 37244 does not improve AUC. Reverting changes.
Training on augumented user 27230 30/50 current_auc = 0.44805194805194803
User 27230 AUC after training: 0.43506493506493504
User 27230 does not improve AUC. Reverting changes.
Training on augumented user 89054 31/50 current_auc = 0.44805194805194803
User 89054 AUC after training: 0.4285714285714286
User 89054 does not improve AUC. Reverting changes.
Training on augumented user 130124 32/50 current_auc = 0.44805194805194803
User 130124 AUC after training: 0.4285714285714286
User 130124 does not improve AUC. Reverting changes.
Training on augumented user 74799 33/50 current_auc = 0.44805194805194803
User 74799 AUC after training: 0.44805194805194803
User 74799 does not improve AUC. Reverting changes.
Training on augumented user 26060 34/50 current_auc = 0.44805194805194803
User 26060 AUC after training: 0.44805194805194803
User 26060 does not improve AUC. Reverting changes.
Training on augumented user 100848 35/50 current_auc = 0.44805194805194803
User 100848 AUC after training: 0.4285714285714286
User 100848 does not improve AUC. Reverting changes.
Training on augumented user 38015 36/50 current_auc = 0.44805194805194803
User 38015 AUC after training: 0.44805194805194803
User 38015 does not improve AUC. Reverting changes.
Training on augumented user 19276 37/50 current_auc = 0.44805194805194803
User 19276 AUC after training: 0.4285714285714286
User 19276 does not improve AUC. Reverting changes.
Training on augumented user 29144 38/50 current_auc = 0.44805194805194803
User 29144 AUC after training: 0.44805194805194803
User 29144 does not improve AUC. Reverting changes.
Training on augumented user 54358 39/50 current_auc = 0.44805194805194803
User 54358 AUC after training: 0.44805194805194803
User 54358 does not improve AUC. Reverting changes.
Training on augumented user 84960 40/50 current_auc = 0.44805194805194803
User 84960 AUC after training: 0.44805194805194803
User 84960 does not improve AUC. Reverting changes.
Training on augumented user 25850 41/50 current_auc = 0.44805194805194803
User 25850 AUC after training: 0.4220779220779221
User 25850 does not improve AUC. Reverting changes.
Training on augumented user 65289 42/50 current_auc = 0.44805194805194803
User 65289 AUC after training: 0.44805194805194803
User 65289 does not improve AUC. Reverting changes.
Training on augumented user 86201 43/50 current_auc = 0.44805194805194803
User 86201 AUC after training: 0.43506493506493504
User 86201 does not improve AUC. Reverting changes.
Training on augumented user 135926 44/50 current_auc = 0.44805194805194803
User 135926 AUC after training: 0.44805194805194803
User 135926 does not improve AUC. Reverting changes.
Training on augumented user 81605 45/50 current_auc = 0.44805194805194803
User 81605 AUC after training: 0.43506493506493504
User 81605 does not improve AUC. Reverting changes.
Training on augumented user 113999 46/50 current_auc = 0.44805194805194803
User 113999 AUC after training: 0.44805194805194803
User 113999 does not improve AUC. Reverting changes.
Training on augumented user 3000 47/50 current_auc = 0.44805194805194803
User 3000 AUC after training: 0.45454545454545453
User 3000 improves AUC. Keeping the model.
Training on augumented user 117286 48/50 current_auc = 0.45454545454545453
User 117286 AUC after training: 0.461038961038961
User 117286 improves AUC. Keeping the model.
Training on augumented user 42800 49/50 current_auc = 0.461038961038961
User 42800 AUC after training: 0.461038961038961
User 42800 does not improve AUC. Reverting changes.
[2024-12-02 18:22:50.620400] start test user 43596 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:51.289902] start test user 43596 83/568 recall augumented users by random, augumented_users = [38126, 98863, 97000, 10093, 28461, 83790, 32447, 22902, 93874, 130780, 4477, 33174, 43127, 126697, 133038, 60610, 113070, 127214, 7444, 47864, 40365, 129647, 25764, 88559, 130048, 107596, 77111, 128203, 35961, 129491, 110400, 131089, 94144, 79901, 90353, 109989, 38574, 58878, 14123, 24724, 113750, 121729, 108517, 2479, 665, 115189, 80695, 23793, 74835, 95266]
[2024-12-02 18:22:51.337408] user = 43596 Cloud 83/568
[2024-12-02 18:22:51.353174] user = 43596 Local 83/568
[2024-12-02 18:22:51.510051] user = 43596 Local+ 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:54.036990] user = 43596 MPDA- 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8
Training on augumented user 38126 0/50 current_auc = 0.8
User 38126 AUC after training: 0.8
User 38126 does not improve AUC. Reverting changes.
Training on augumented user 98863 1/50 current_auc = 0.8
User 98863 AUC after training: 0.8
User 98863 does not improve AUC. Reverting changes.
Training on augumented user 97000 2/50 current_auc = 0.8
User 97000 AUC after training: 0.8
User 97000 does not improve AUC. Reverting changes.
Training on augumented user 10093 3/50 current_auc = 0.8
User 10093 AUC after training: 0.8
User 10093 does not improve AUC. Reverting changes.
Training on augumented user 28461 4/50 current_auc = 0.8
User 28461 AUC after training: 0.8
User 28461 does not improve AUC. Reverting changes.
Training on augumented user 83790 5/50 current_auc = 0.8
User 83790 AUC after training: 0.8
User 83790 does not improve AUC. Reverting changes.
Training on augumented user 32447 6/50 current_auc = 0.8
User 32447 AUC after training: 0.8
User 32447 does not improve AUC. Reverting changes.
Training on augumented user 22902 7/50 current_auc = 0.8
User 22902 AUC after training: 0.8
User 22902 does not improve AUC. Reverting changes.
Training on augumented user 93874 8/50 current_auc = 0.8
User 93874 AUC after training: 0.8
User 93874 does not improve AUC. Reverting changes.
Training on augumented user 130780 9/50 current_auc = 0.8
User 130780 AUC after training: 0.8
User 130780 does not improve AUC. Reverting changes.
Training on augumented user 4477 10/50 current_auc = 0.8
User 4477 AUC after training: 0.8
User 4477 does not improve AUC. Reverting changes.
Training on augumented user 33174 11/50 current_auc = 0.8
User 33174 AUC after training: 0.8
User 33174 does not improve AUC. Reverting changes.
Training on augumented user 43127 12/50 current_auc = 0.8
User 43127 AUC after training: 0.8
User 43127 does not improve AUC. Reverting changes.
Training on augumented user 126697 13/50 current_auc = 0.8
User 126697 AUC after training: 0.8
User 126697 does not improve AUC. Reverting changes.
Training on augumented user 133038 14/50 current_auc = 0.8
User 133038 AUC after training: 0.8
User 133038 does not improve AUC. Reverting changes.
Training on augumented user 60610 15/50 current_auc = 0.8
User 60610 AUC after training: 0.8
User 60610 does not improve AUC. Reverting changes.
Training on augumented user 113070 16/50 current_auc = 0.8
User 113070 AUC after training: 0.8
User 113070 does not improve AUC. Reverting changes.
Training on augumented user 127214 17/50 current_auc = 0.8
User 127214 AUC after training: 0.8
User 127214 does not improve AUC. Reverting changes.
Training on augumented user 7444 18/50 current_auc = 0.8
User 7444 AUC after training: 0.8
User 7444 does not improve AUC. Reverting changes.
Training on augumented user 47864 19/50 current_auc = 0.8
User 47864 AUC after training: 0.8
User 47864 does not improve AUC. Reverting changes.
Training on augumented user 40365 20/50 current_auc = 0.8
User 40365 AUC after training: 0.8
User 40365 does not improve AUC. Reverting changes.
Training on augumented user 129647 21/50 current_auc = 0.8
User 129647 AUC after training: 0.8
User 129647 does not improve AUC. Reverting changes.
Training on augumented user 25764 22/50 current_auc = 0.8
User 25764 AUC after training: 0.8
User 25764 does not improve AUC. Reverting changes.
Training on augumented user 88559 23/50 current_auc = 0.8
User 88559 AUC after training: 0.8
User 88559 does not improve AUC. Reverting changes.
Training on augumented user 130048 24/50 current_auc = 0.8
User 130048 AUC after training: 0.8
User 130048 does not improve AUC. Reverting changes.
Training on augumented user 107596 25/50 current_auc = 0.8
User 107596 AUC after training: 0.8
User 107596 does not improve AUC. Reverting changes.
Training on augumented user 77111 26/50 current_auc = 0.8
User 77111 AUC after training: 0.8
User 77111 does not improve AUC. Reverting changes.
Training on augumented user 128203 27/50 current_auc = 0.8
User 128203 AUC after training: 0.8
User 128203 does not improve AUC. Reverting changes.
Training on augumented user 35961 28/50 current_auc = 0.8
User 35961 AUC after training: 0.8
User 35961 does not improve AUC. Reverting changes.
Training on augumented user 129491 29/50 current_auc = 0.8
User 129491 AUC after training: 0.8
User 129491 does not improve AUC. Reverting changes.
Training on augumented user 110400 30/50 current_auc = 0.8
User 110400 AUC after training: 0.8
User 110400 does not improve AUC. Reverting changes.
Training on augumented user 131089 31/50 current_auc = 0.8
User 131089 AUC after training: 0.8
User 131089 does not improve AUC. Reverting changes.
Training on augumented user 94144 32/50 current_auc = 0.8
User 94144 AUC after training: 0.8
User 94144 does not improve AUC. Reverting changes.
Training on augumented user 79901 33/50 current_auc = 0.8
User 79901 AUC after training: 0.8
User 79901 does not improve AUC. Reverting changes.
Training on augumented user 90353 34/50 current_auc = 0.8
User 90353 AUC after training: 0.8
User 90353 does not improve AUC. Reverting changes.
Training on augumented user 109989 35/50 current_auc = 0.8
User 109989 AUC after training: 0.8
User 109989 does not improve AUC. Reverting changes.
Training on augumented user 38574 36/50 current_auc = 0.8
User 38574 AUC after training: 0.8
User 38574 does not improve AUC. Reverting changes.
Training on augumented user 58878 37/50 current_auc = 0.8
User 58878 AUC after training: 0.8
User 58878 does not improve AUC. Reverting changes.
Training on augumented user 14123 38/50 current_auc = 0.8
User 14123 AUC after training: 0.8
User 14123 does not improve AUC. Reverting changes.
Training on augumented user 24724 39/50 current_auc = 0.8
User 24724 AUC after training: 0.8
User 24724 does not improve AUC. Reverting changes.
Training on augumented user 113750 40/50 current_auc = 0.8
User 113750 AUC after training: 0.8
User 113750 does not improve AUC. Reverting changes.
Training on augumented user 121729 41/50 current_auc = 0.8
User 121729 AUC after training: 0.8
User 121729 does not improve AUC. Reverting changes.
Training on augumented user 108517 42/50 current_auc = 0.8
User 108517 AUC after training: 0.8
User 108517 does not improve AUC. Reverting changes.
Training on augumented user 2479 43/50 current_auc = 0.8
User 2479 AUC after training: 0.8
User 2479 does not improve AUC. Reverting changes.
Training on augumented user 665 44/50 current_auc = 0.8
User 665 AUC after training: 0.8
User 665 does not improve AUC. Reverting changes.
Training on augumented user 115189 45/50 current_auc = 0.8
User 115189 AUC after training: 0.8
User 115189 does not improve AUC. Reverting changes.
Training on augumented user 80695 46/50 current_auc = 0.8
User 80695 AUC after training: 0.8
User 80695 does not improve AUC. Reverting changes.
Training on augumented user 23793 47/50 current_auc = 0.8
User 23793 AUC after training: 0.8
User 23793 does not improve AUC. Reverting changes.
Training on augumented user 74835 48/50 current_auc = 0.8
User 74835 AUC after training: 0.8
User 74835 does not improve AUC. Reverting changes.
Training on augumented user 95266 49/50 current_auc = 0.8
User 95266 AUC after training: 0.8
User 95266 does not improve AUC. Reverting changes.
[2024-12-02 18:23:24.863033] start test user 43599 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:25.552564] start test user 43599 84/568 recall augumented users by random, augumented_users = [32993, 84035, 85933, 9649, 53218, 24972, 2646, 34489, 18577, 121964, 91309, 113783, 57805, 39892, 103880, 69525, 124369, 13937, 85910, 115281, 129838, 23848, 88005, 32569, 64116, 129377, 51883, 6494, 125056, 70372, 75096, 11959, 76816, 44121, 114523, 79559, 119622, 53983, 21043, 7478, 117603, 104145, 117102, 19061, 62638, 100466, 107314, 29268, 90508, 48807]
[2024-12-02 18:23:25.571317] user = 43599 Cloud 84/568
[2024-12-02 18:23:25.629457] user = 43599 Local 84/568
[2024-12-02 18:23:25.822749] user = 43599 Local+ 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:28.239363] user = 43599 MPDA- 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6723076923076923
Training on augumented user 32993 0/50 current_auc = 0.6723076923076923
User 32993 AUC after training: 0.6727564102564103
User 32993 improves AUC. Keeping the model.
Training on augumented user 84035 1/50 current_auc = 0.6727564102564103
User 84035 AUC after training: 0.6728205128205128
User 84035 improves AUC. Keeping the model.
Training on augumented user 85933 2/50 current_auc = 0.6728205128205128
User 85933 AUC after training: 0.6723076923076923
User 85933 does not improve AUC. Reverting changes.
Training on augumented user 9649 3/50 current_auc = 0.6728205128205128
User 9649 AUC after training: 0.6732051282051281
User 9649 improves AUC. Keeping the model.
Training on augumented user 53218 4/50 current_auc = 0.6732051282051281
User 53218 AUC after training: 0.671923076923077
User 53218 does not improve AUC. Reverting changes.
Training on augumented user 24972 5/50 current_auc = 0.6732051282051281
User 24972 AUC after training: 0.6724358974358975
User 24972 does not improve AUC. Reverting changes.
Training on augumented user 2646 6/50 current_auc = 0.6732051282051281
User 2646 AUC after training: 0.6706410256410256
User 2646 does not improve AUC. Reverting changes.
Training on augumented user 34489 7/50 current_auc = 0.6732051282051281
User 34489 AUC after training: 0.6714102564102564
User 34489 does not improve AUC. Reverting changes.
Training on augumented user 18577 8/50 current_auc = 0.6732051282051281
User 18577 AUC after training: 0.6729487179487179
User 18577 does not improve AUC. Reverting changes.
Training on augumented user 121964 9/50 current_auc = 0.6732051282051281
User 121964 AUC after training: 0.6724358974358975
User 121964 does not improve AUC. Reverting changes.
Training on augumented user 91309 10/50 current_auc = 0.6732051282051281
User 91309 AUC after training: 0.6734615384615383
User 91309 improves AUC. Keeping the model.
Training on augumented user 113783 11/50 current_auc = 0.6734615384615383
User 113783 AUC after training: 0.6734615384615384
User 113783 improves AUC. Keeping the model.
Training on augumented user 57805 12/50 current_auc = 0.6734615384615384
User 57805 AUC after training: 0.674102564102564
User 57805 improves AUC. Keeping the model.
Training on augumented user 39892 13/50 current_auc = 0.674102564102564
User 39892 AUC after training: 0.6735897435897436
User 39892 does not improve AUC. Reverting changes.
Training on augumented user 103880 14/50 current_auc = 0.674102564102564
User 103880 AUC after training: 0.6732051282051282
User 103880 does not improve AUC. Reverting changes.
Training on augumented user 69525 15/50 current_auc = 0.674102564102564
User 69525 AUC after training: 0.6707051282051282
User 69525 does not improve AUC. Reverting changes.
Training on augumented user 124369 16/50 current_auc = 0.674102564102564
User 124369 AUC after training: 0.6721794871794871
User 124369 does not improve AUC. Reverting changes.
Training on augumented user 13937 17/50 current_auc = 0.674102564102564
User 13937 AUC after training: 0.6743589743589744
User 13937 improves AUC. Keeping the model.
Training on augumented user 85910 18/50 current_auc = 0.6743589743589744
User 85910 AUC after training: 0.6738461538461539
User 85910 does not improve AUC. Reverting changes.
Training on augumented user 115281 19/50 current_auc = 0.6743589743589744
User 115281 AUC after training: 0.6741025641025641
User 115281 does not improve AUC. Reverting changes.
Training on augumented user 129838 20/50 current_auc = 0.6743589743589744
User 129838 AUC after training: 0.6746153846153846
User 129838 improves AUC. Keeping the model.
Training on augumented user 23848 21/50 current_auc = 0.6746153846153846
User 23848 AUC after training: 0.6742307692307692
User 23848 does not improve AUC. Reverting changes.
Training on augumented user 88005 22/50 current_auc = 0.6746153846153846
User 88005 AUC after training: 0.6741025641025641
User 88005 does not improve AUC. Reverting changes.
Training on augumented user 32569 23/50 current_auc = 0.6746153846153846
User 32569 AUC after training: 0.6748717948717948
User 32569 improves AUC. Keeping the model.
Training on augumented user 64116 24/50 current_auc = 0.6748717948717948
User 64116 AUC after training: 0.6747435897435897
User 64116 does not improve AUC. Reverting changes.
Training on augumented user 129377 25/50 current_auc = 0.6748717948717948
User 129377 AUC after training: 0.6747435897435896
User 129377 does not improve AUC. Reverting changes.
Training on augumented user 51883 26/50 current_auc = 0.6748717948717948
User 51883 AUC after training: 0.673974358974359
User 51883 does not improve AUC. Reverting changes.
Training on augumented user 6494 27/50 current_auc = 0.6748717948717948
User 6494 AUC after training: 0.6737179487179488
User 6494 does not improve AUC. Reverting changes.
Training on augumented user 125056 28/50 current_auc = 0.6748717948717948
User 125056 AUC after training: 0.6746153846153846
User 125056 does not improve AUC. Reverting changes.
Training on augumented user 70372 29/50 current_auc = 0.6748717948717948
User 70372 AUC after training: 0.6751282051282051
User 70372 improves AUC. Keeping the model.
Training on augumented user 75096 30/50 current_auc = 0.6751282051282051
User 75096 AUC after training: 0.6746153846153846
User 75096 does not improve AUC. Reverting changes.
Training on augumented user 11959 31/50 current_auc = 0.6751282051282051
User 11959 AUC after training: 0.6748717948717948
User 11959 does not improve AUC. Reverting changes.
Training on augumented user 76816 32/50 current_auc = 0.6751282051282051
User 76816 AUC after training: 0.6714102564102564
User 76816 does not improve AUC. Reverting changes.
Training on augumented user 44121 33/50 current_auc = 0.6751282051282051
User 44121 AUC after training: 0.6751282051282051
User 44121 does not improve AUC. Reverting changes.
Training on augumented user 114523 34/50 current_auc = 0.6751282051282051
User 114523 AUC after training: 0.6748717948717948
User 114523 does not improve AUC. Reverting changes.
Training on augumented user 79559 35/50 current_auc = 0.6751282051282051
User 79559 AUC after training: 0.671923076923077
User 79559 does not improve AUC. Reverting changes.
Training on augumented user 119622 36/50 current_auc = 0.6751282051282051
User 119622 AUC after training: 0.6746153846153846
User 119622 does not improve AUC. Reverting changes.
Training on augumented user 53983 37/50 current_auc = 0.6751282051282051
User 53983 AUC after training: 0.6756410256410256
User 53983 improves AUC. Keeping the model.
Training on augumented user 21043 38/50 current_auc = 0.6756410256410256
User 21043 AUC after training: 0.675
User 21043 does not improve AUC. Reverting changes.
Training on augumented user 7478 39/50 current_auc = 0.6756410256410256
User 7478 AUC after training: 0.6760256410256409
User 7478 improves AUC. Keeping the model.
Training on augumented user 117603 40/50 current_auc = 0.6760256410256409
User 117603 AUC after training: 0.6761538461538461
User 117603 improves AUC. Keeping the model.
Training on augumented user 104145 41/50 current_auc = 0.6761538461538461
User 104145 AUC after training: 0.6757692307692308
User 104145 does not improve AUC. Reverting changes.
Training on augumented user 117102 42/50 current_auc = 0.6761538461538461
User 117102 AUC after training: 0.6767948717948717
User 117102 improves AUC. Keeping the model.
Training on augumented user 19061 43/50 current_auc = 0.6767948717948717
User 19061 AUC after training: 0.676923076923077
User 19061 improves AUC. Keeping the model.
Training on augumented user 62638 44/50 current_auc = 0.676923076923077
User 62638 AUC after training: 0.6764102564102563
User 62638 does not improve AUC. Reverting changes.
Training on augumented user 100466 45/50 current_auc = 0.676923076923077
User 100466 AUC after training: 0.6767948717948717
User 100466 does not improve AUC. Reverting changes.
Training on augumented user 107314 46/50 current_auc = 0.676923076923077
User 107314 AUC after training: 0.6771794871794872
User 107314 improves AUC. Keeping the model.
Training on augumented user 29268 47/50 current_auc = 0.6771794871794872
User 29268 AUC after training: 0.6739102564102564
User 29268 does not improve AUC. Reverting changes.
Training on augumented user 90508 48/50 current_auc = 0.6771794871794872
User 90508 AUC after training: 0.6773076923076924
User 90508 improves AUC. Keeping the model.
Training on augumented user 48807 49/50 current_auc = 0.6773076923076924
User 48807 AUC after training: 0.6761538461538461
User 48807 does not improve AUC. Reverting changes.
[2024-12-02 18:23:57.238413] start test user 43605 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:57.865646] start test user 43605 85/568 recall augumented users by random, augumented_users = [13400, 78199, 39492, 6065, 124509, 47723, 31981, 4101, 19252, 3302, 61824, 39890, 80119, 77334, 69417, 97037, 34993, 136137, 79191, 44006, 27224, 43424, 92084, 79696, 82243, 120413, 95801, 9936, 80615, 69210, 14036, 50926, 46590, 65940, 108203, 87376, 48663, 82383, 90155, 26083, 113157, 114823, 22706, 79955, 1865, 47009, 21605, 12473, 97051, 66808]
[2024-12-02 18:23:57.880286] user = 43605 Cloud 85/568
[2024-12-02 18:23:57.889836] user = 43605 Local 85/568
[2024-12-02 18:23:57.927116] user = 43605 Local+ 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:59.969456] user = 43605 MPDA- 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7587412587412588
Training on augumented user 13400 0/50 current_auc = 0.7587412587412588
User 13400 AUC after training: 0.7517482517482518
User 13400 does not improve AUC. Reverting changes.
Training on augumented user 78199 1/50 current_auc = 0.7587412587412588
User 78199 AUC after training: 0.7517482517482518
User 78199 does not improve AUC. Reverting changes.
Training on augumented user 39492 2/50 current_auc = 0.7587412587412588
User 39492 AUC after training: 0.7517482517482518
User 39492 does not improve AUC. Reverting changes.
Training on augumented user 6065 3/50 current_auc = 0.7587412587412588
User 6065 AUC after training: 0.7517482517482518
User 6065 does not improve AUC. Reverting changes.
Training on augumented user 124509 4/50 current_auc = 0.7587412587412588
User 124509 AUC after training: 0.7517482517482518
User 124509 does not improve AUC. Reverting changes.
Training on augumented user 47723 5/50 current_auc = 0.7587412587412588
User 47723 AUC after training: 0.7587412587412588
User 47723 does not improve AUC. Reverting changes.
Training on augumented user 31981 6/50 current_auc = 0.7587412587412588
User 31981 AUC after training: 0.7587412587412588
User 31981 does not improve AUC. Reverting changes.
Training on augumented user 4101 7/50 current_auc = 0.7587412587412588
User 4101 AUC after training: 0.7517482517482518
User 4101 does not improve AUC. Reverting changes.
Training on augumented user 19252 8/50 current_auc = 0.7587412587412588
User 19252 AUC after training: 0.7587412587412588
User 19252 does not improve AUC. Reverting changes.
Training on augumented user 3302 9/50 current_auc = 0.7587412587412588
User 3302 AUC after training: 0.7517482517482518
User 3302 does not improve AUC. Reverting changes.
Training on augumented user 61824 10/50 current_auc = 0.7587412587412588
User 61824 AUC after training: 0.7517482517482518
User 61824 does not improve AUC. Reverting changes.
Training on augumented user 39890 11/50 current_auc = 0.7587412587412588
User 39890 AUC after training: 0.7447552447552448
User 39890 does not improve AUC. Reverting changes.
Training on augumented user 80119 12/50 current_auc = 0.7587412587412588
User 80119 AUC after training: 0.7517482517482518
User 80119 does not improve AUC. Reverting changes.
Training on augumented user 77334 13/50 current_auc = 0.7587412587412588
User 77334 AUC after training: 0.7587412587412588
User 77334 does not improve AUC. Reverting changes.
Training on augumented user 69417 14/50 current_auc = 0.7587412587412588
User 69417 AUC after training: 0.7517482517482518
User 69417 does not improve AUC. Reverting changes.
Training on augumented user 97037 15/50 current_auc = 0.7587412587412588
User 97037 AUC after training: 0.7517482517482518
User 97037 does not improve AUC. Reverting changes.
Training on augumented user 34993 16/50 current_auc = 0.7587412587412588
User 34993 AUC after training: 0.7517482517482518
User 34993 does not improve AUC. Reverting changes.
Training on augumented user 136137 17/50 current_auc = 0.7587412587412588
User 136137 AUC after training: 0.7587412587412588
User 136137 does not improve AUC. Reverting changes.
Training on augumented user 79191 18/50 current_auc = 0.7587412587412588
User 79191 AUC after training: 0.7517482517482518
User 79191 does not improve AUC. Reverting changes.
Training on augumented user 44006 19/50 current_auc = 0.7587412587412588
User 44006 AUC after training: 0.7517482517482518
User 44006 does not improve AUC. Reverting changes.
Training on augumented user 27224 20/50 current_auc = 0.7587412587412588
User 27224 AUC after training: 0.7587412587412588
User 27224 does not improve AUC. Reverting changes.
Training on augumented user 43424 21/50 current_auc = 0.7587412587412588
User 43424 AUC after training: 0.7517482517482518
User 43424 does not improve AUC. Reverting changes.
Training on augumented user 92084 22/50 current_auc = 0.7587412587412588
User 92084 AUC after training: 0.7587412587412588
User 92084 does not improve AUC. Reverting changes.
Training on augumented user 79696 23/50 current_auc = 0.7587412587412588
User 79696 AUC after training: 0.7517482517482518
User 79696 does not improve AUC. Reverting changes.
Training on augumented user 82243 24/50 current_auc = 0.7587412587412588
User 82243 AUC after training: 0.7517482517482518
User 82243 does not improve AUC. Reverting changes.
Training on augumented user 120413 25/50 current_auc = 0.7587412587412588
User 120413 AUC after training: 0.7517482517482518
User 120413 does not improve AUC. Reverting changes.
Training on augumented user 95801 26/50 current_auc = 0.7587412587412588
User 95801 AUC after training: 0.7657342657342657
User 95801 improves AUC. Keeping the model.
Training on augumented user 9936 27/50 current_auc = 0.7657342657342657
User 9936 AUC after training: 0.7587412587412588
User 9936 does not improve AUC. Reverting changes.
Training on augumented user 80615 28/50 current_auc = 0.7657342657342657
User 80615 AUC after training: 0.7587412587412588
User 80615 does not improve AUC. Reverting changes.
Training on augumented user 69210 29/50 current_auc = 0.7657342657342657
User 69210 AUC after training: 0.7657342657342657
User 69210 does not improve AUC. Reverting changes.
Training on augumented user 14036 30/50 current_auc = 0.7657342657342657
User 14036 AUC after training: 0.7587412587412588
User 14036 does not improve AUC. Reverting changes.
Training on augumented user 50926 31/50 current_auc = 0.7657342657342657
User 50926 AUC after training: 0.7587412587412588
User 50926 does not improve AUC. Reverting changes.
Training on augumented user 46590 32/50 current_auc = 0.7657342657342657
User 46590 AUC after training: 0.7587412587412588
User 46590 does not improve AUC. Reverting changes.
Training on augumented user 65940 33/50 current_auc = 0.7657342657342657
User 65940 AUC after training: 0.7657342657342657
User 65940 does not improve AUC. Reverting changes.
Training on augumented user 108203 34/50 current_auc = 0.7657342657342657
User 108203 AUC after training: 0.7587412587412588
User 108203 does not improve AUC. Reverting changes.
Training on augumented user 87376 35/50 current_auc = 0.7657342657342657
User 87376 AUC after training: 0.7657342657342657
User 87376 does not improve AUC. Reverting changes.
Training on augumented user 48663 36/50 current_auc = 0.7657342657342657
User 48663 AUC after training: 0.7587412587412588
User 48663 does not improve AUC. Reverting changes.
Training on augumented user 82383 37/50 current_auc = 0.7657342657342657
User 82383 AUC after training: 0.7587412587412588
User 82383 does not improve AUC. Reverting changes.
Training on augumented user 90155 38/50 current_auc = 0.7657342657342657
User 90155 AUC after training: 0.7517482517482518
User 90155 does not improve AUC. Reverting changes.
Training on augumented user 26083 39/50 current_auc = 0.7657342657342657
User 26083 AUC after training: 0.7587412587412588
User 26083 does not improve AUC. Reverting changes.
Training on augumented user 113157 40/50 current_auc = 0.7657342657342657
User 113157 AUC after training: 0.7657342657342657
User 113157 does not improve AUC. Reverting changes.
Training on augumented user 114823 41/50 current_auc = 0.7657342657342657
User 114823 AUC after training: 0.7587412587412588
User 114823 does not improve AUC. Reverting changes.
Training on augumented user 22706 42/50 current_auc = 0.7657342657342657
User 22706 AUC after training: 0.7587412587412588
User 22706 does not improve AUC. Reverting changes.
Training on augumented user 79955 43/50 current_auc = 0.7657342657342657
User 79955 AUC after training: 0.7517482517482518
User 79955 does not improve AUC. Reverting changes.
Training on augumented user 1865 44/50 current_auc = 0.7657342657342657
User 1865 AUC after training: 0.7447552447552448
User 1865 does not improve AUC. Reverting changes.
Training on augumented user 47009 45/50 current_auc = 0.7657342657342657
User 47009 AUC after training: 0.7517482517482518
User 47009 does not improve AUC. Reverting changes.
Training on augumented user 21605 46/50 current_auc = 0.7657342657342657
User 21605 AUC after training: 0.7587412587412588
User 21605 does not improve AUC. Reverting changes.
Training on augumented user 12473 47/50 current_auc = 0.7657342657342657
User 12473 AUC after training: 0.7447552447552448
User 12473 does not improve AUC. Reverting changes.
Training on augumented user 97051 48/50 current_auc = 0.7657342657342657
User 97051 AUC after training: 0.7517482517482518
User 97051 does not improve AUC. Reverting changes.
Training on augumented user 66808 49/50 current_auc = 0.7657342657342657
User 66808 AUC after training: 0.7587412587412588
User 66808 does not improve AUC. Reverting changes.
[2024-12-02 18:24:29.720168] start test user 43636 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:30.693070] start test user 43636 86/568 recall augumented users by random, augumented_users = [86970, 38511, 72391, 97515, 24832, 57712, 30944, 29895, 136348, 55638, 29818, 44850, 125506, 8650, 18552, 47751, 76734, 94531, 119519, 112057, 20215, 135142, 32033, 99778, 26785, 132949, 78529, 119935, 45972, 93042, 75352, 33511, 136067, 106098, 123443, 1115, 48547, 17047, 101368, 26503, 117415, 26283, 57518, 39746, 69219, 37060, 128417, 22024, 58201, 67814]
[2024-12-02 18:24:30.724366] user = 43636 Cloud 86/568
[2024-12-02 18:24:30.736167] user = 43636 Local 86/568
[2024-12-02 18:24:30.857426] user = 43636 Local+ 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:32.797818] user = 43636 MPDA- 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7142857142857143
Training on augumented user 86970 0/50 current_auc = 0.7142857142857143
User 86970 AUC after training: 0.6984126984126984
User 86970 does not improve AUC. Reverting changes.
Training on augumented user 38511 1/50 current_auc = 0.7142857142857143
User 38511 AUC after training: 0.7142857142857143
User 38511 does not improve AUC. Reverting changes.
Training on augumented user 72391 2/50 current_auc = 0.7142857142857143
User 72391 AUC after training: 0.7142857142857143
User 72391 does not improve AUC. Reverting changes.
Training on augumented user 97515 3/50 current_auc = 0.7142857142857143
User 97515 AUC after training: 0.7301587301587302
User 97515 improves AUC. Keeping the model.
Training on augumented user 24832 4/50 current_auc = 0.7301587301587302
User 24832 AUC after training: 0.7301587301587302
User 24832 does not improve AUC. Reverting changes.
Training on augumented user 57712 5/50 current_auc = 0.7301587301587302
User 57712 AUC after training: 0.7142857142857143
User 57712 does not improve AUC. Reverting changes.
Training on augumented user 30944 6/50 current_auc = 0.7301587301587302
User 30944 AUC after training: 0.7301587301587302
User 30944 does not improve AUC. Reverting changes.
Training on augumented user 29895 7/50 current_auc = 0.7301587301587302
User 29895 AUC after training: 0.7301587301587302
User 29895 does not improve AUC. Reverting changes.
Training on augumented user 136348 8/50 current_auc = 0.7301587301587302
User 136348 AUC after training: 0.7301587301587302
User 136348 does not improve AUC. Reverting changes.
Training on augumented user 55638 9/50 current_auc = 0.7301587301587302
User 55638 AUC after training: 0.7301587301587302
User 55638 does not improve AUC. Reverting changes.
Training on augumented user 29818 10/50 current_auc = 0.7301587301587302
User 29818 AUC after training: 0.7301587301587302
User 29818 does not improve AUC. Reverting changes.
Training on augumented user 44850 11/50 current_auc = 0.7301587301587302
User 44850 AUC after training: 0.7301587301587302
User 44850 does not improve AUC. Reverting changes.
Training on augumented user 125506 12/50 current_auc = 0.7301587301587302
User 125506 AUC after training: 0.7301587301587302
User 125506 does not improve AUC. Reverting changes.
Training on augumented user 8650 13/50 current_auc = 0.7301587301587302
User 8650 AUC after training: 0.7301587301587302
User 8650 does not improve AUC. Reverting changes.
Training on augumented user 18552 14/50 current_auc = 0.7301587301587302
User 18552 AUC after training: 0.7301587301587302
User 18552 does not improve AUC. Reverting changes.
Training on augumented user 47751 15/50 current_auc = 0.7301587301587302
User 47751 AUC after training: 0.7301587301587302
User 47751 does not improve AUC. Reverting changes.
Training on augumented user 76734 16/50 current_auc = 0.7301587301587302
User 76734 AUC after training: 0.7142857142857143
User 76734 does not improve AUC. Reverting changes.
Training on augumented user 94531 17/50 current_auc = 0.7301587301587302
User 94531 AUC after training: 0.7301587301587302
User 94531 does not improve AUC. Reverting changes.
Training on augumented user 119519 18/50 current_auc = 0.7301587301587302
User 119519 AUC after training: 0.7301587301587302
User 119519 does not improve AUC. Reverting changes.
Training on augumented user 112057 19/50 current_auc = 0.7301587301587302
User 112057 AUC after training: 0.7301587301587302
User 112057 does not improve AUC. Reverting changes.
Training on augumented user 20215 20/50 current_auc = 0.7301587301587302
User 20215 AUC after training: 0.7142857142857143
User 20215 does not improve AUC. Reverting changes.
Training on augumented user 135142 21/50 current_auc = 0.7301587301587302
User 135142 AUC after training: 0.7301587301587302
User 135142 does not improve AUC. Reverting changes.
Training on augumented user 32033 22/50 current_auc = 0.7301587301587302
User 32033 AUC after training: 0.7301587301587302
User 32033 does not improve AUC. Reverting changes.
Training on augumented user 99778 23/50 current_auc = 0.7301587301587302
User 99778 AUC after training: 0.7301587301587302
User 99778 does not improve AUC. Reverting changes.
Training on augumented user 26785 24/50 current_auc = 0.7301587301587302
User 26785 AUC after training: 0.7301587301587302
User 26785 does not improve AUC. Reverting changes.
Training on augumented user 132949 25/50 current_auc = 0.7301587301587302
User 132949 AUC after training: 0.7301587301587302
User 132949 does not improve AUC. Reverting changes.
Training on augumented user 78529 26/50 current_auc = 0.7301587301587302
User 78529 AUC after training: 0.7301587301587302
User 78529 does not improve AUC. Reverting changes.
Training on augumented user 119935 27/50 current_auc = 0.7301587301587302
User 119935 AUC after training: 0.6984126984126984
User 119935 does not improve AUC. Reverting changes.
Training on augumented user 45972 28/50 current_auc = 0.7301587301587302
User 45972 AUC after training: 0.7301587301587302
User 45972 does not improve AUC. Reverting changes.
Training on augumented user 93042 29/50 current_auc = 0.7301587301587302
User 93042 AUC after training: 0.7301587301587302
User 93042 does not improve AUC. Reverting changes.
Training on augumented user 75352 30/50 current_auc = 0.7301587301587302
User 75352 AUC after training: 0.7301587301587302
User 75352 does not improve AUC. Reverting changes.
Training on augumented user 33511 31/50 current_auc = 0.7301587301587302
User 33511 AUC after training: 0.7301587301587302
User 33511 does not improve AUC. Reverting changes.
Training on augumented user 136067 32/50 current_auc = 0.7301587301587302
User 136067 AUC after training: 0.7301587301587302
User 136067 does not improve AUC. Reverting changes.
Training on augumented user 106098 33/50 current_auc = 0.7301587301587302
User 106098 AUC after training: 0.7301587301587302
User 106098 does not improve AUC. Reverting changes.
Training on augumented user 123443 34/50 current_auc = 0.7301587301587302
User 123443 AUC after training: 0.7301587301587302
User 123443 does not improve AUC. Reverting changes.
Training on augumented user 1115 35/50 current_auc = 0.7301587301587302
User 1115 AUC after training: 0.7301587301587302
User 1115 does not improve AUC. Reverting changes.
Training on augumented user 48547 36/50 current_auc = 0.7301587301587302
User 48547 AUC after training: 0.7301587301587302
User 48547 does not improve AUC. Reverting changes.
Training on augumented user 17047 37/50 current_auc = 0.7301587301587302
User 17047 AUC after training: 0.7301587301587302
User 17047 does not improve AUC. Reverting changes.
Training on augumented user 101368 38/50 current_auc = 0.7301587301587302
User 101368 AUC after training: 0.7301587301587302
User 101368 does not improve AUC. Reverting changes.
Training on augumented user 26503 39/50 current_auc = 0.7301587301587302
User 26503 AUC after training: 0.7301587301587302
User 26503 does not improve AUC. Reverting changes.
Training on augumented user 117415 40/50 current_auc = 0.7301587301587302
User 117415 AUC after training: 0.7301587301587302
User 117415 does not improve AUC. Reverting changes.
Training on augumented user 26283 41/50 current_auc = 0.7301587301587302
User 26283 AUC after training: 0.7301587301587302
User 26283 does not improve AUC. Reverting changes.
Training on augumented user 57518 42/50 current_auc = 0.7301587301587302
User 57518 AUC after training: 0.7301587301587302
User 57518 does not improve AUC. Reverting changes.
Training on augumented user 39746 43/50 current_auc = 0.7301587301587302
User 39746 AUC after training: 0.7301587301587302
User 39746 does not improve AUC. Reverting changes.
Training on augumented user 69219 44/50 current_auc = 0.7301587301587302
User 69219 AUC after training: 0.7301587301587302
User 69219 does not improve AUC. Reverting changes.
Training on augumented user 37060 45/50 current_auc = 0.7301587301587302
User 37060 AUC after training: 0.7301587301587302
User 37060 does not improve AUC. Reverting changes.
Training on augumented user 128417 46/50 current_auc = 0.7301587301587302
User 128417 AUC after training: 0.7301587301587302
User 128417 does not improve AUC. Reverting changes.
Training on augumented user 22024 47/50 current_auc = 0.7301587301587302
User 22024 AUC after training: 0.7301587301587302
User 22024 does not improve AUC. Reverting changes.
Training on augumented user 58201 48/50 current_auc = 0.7301587301587302
User 58201 AUC after training: 0.7301587301587302
User 58201 does not improve AUC. Reverting changes.
Training on augumented user 67814 49/50 current_auc = 0.7301587301587302
User 67814 AUC after training: 0.6984126984126984
User 67814 does not improve AUC. Reverting changes.
[2024-12-02 18:25:01.249528] start test user 43644 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:01.887099] start test user 43644 87/568 recall augumented users by random, augumented_users = [84039, 28984, 20519, 113134, 100997, 131978, 59787, 25536, 136683, 113318, 44018, 60269, 93399, 32931, 131539, 125137, 64242, 20901, 18878, 64321, 42208, 38209, 90443, 67994, 106341, 118511, 115069, 56900, 5128, 120627, 76284, 94538, 133902, 17229, 112287, 125859, 111894, 73518, 29485, 136064, 15517, 138454, 105470, 19086, 45584, 121525, 23624, 60501, 28777, 126498]
[2024-12-02 18:25:01.908384] user = 43644 Cloud 87/568
[2024-12-02 18:25:01.950544] user = 43644 Local 87/568
[2024-12-02 18:25:02.021407] user = 43644 Local+ 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:04.636492] user = 43644 MPDA- 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5910027472527473
Training on augumented user 84039 0/50 current_auc = 0.5910027472527473
User 84039 AUC after training: 0.5872252747252747
User 84039 does not improve AUC. Reverting changes.
Training on augumented user 28984 1/50 current_auc = 0.5910027472527473
User 28984 AUC after training: 0.5892857142857143
User 28984 does not improve AUC. Reverting changes.
Training on augumented user 20519 2/50 current_auc = 0.5910027472527473
User 20519 AUC after training: 0.5875686813186813
User 20519 does not improve AUC. Reverting changes.
Training on augumented user 113134 3/50 current_auc = 0.5910027472527473
User 113134 AUC after training: 0.5882554945054945
User 113134 does not improve AUC. Reverting changes.
Training on augumented user 100997 4/50 current_auc = 0.5910027472527473
User 100997 AUC after training: 0.5875686813186813
User 100997 does not improve AUC. Reverting changes.
Training on augumented user 131978 5/50 current_auc = 0.5910027472527473
User 131978 AUC after training: 0.5892857142857143
User 131978 does not improve AUC. Reverting changes.
Training on augumented user 59787 6/50 current_auc = 0.5910027472527473
User 59787 AUC after training: 0.5882554945054945
User 59787 does not improve AUC. Reverting changes.
Training on augumented user 25536 7/50 current_auc = 0.5910027472527473
User 25536 AUC after training: 0.5930631868131868
User 25536 improves AUC. Keeping the model.
Training on augumented user 136683 8/50 current_auc = 0.5930631868131868
User 136683 AUC after training: 0.5906593406593407
User 136683 does not improve AUC. Reverting changes.
Training on augumented user 113318 9/50 current_auc = 0.5930631868131868
User 113318 AUC after training: 0.5889423076923076
User 113318 does not improve AUC. Reverting changes.
Training on augumented user 44018 10/50 current_auc = 0.5930631868131868
User 44018 AUC after training: 0.5879120879120879
User 44018 does not improve AUC. Reverting changes.
Training on augumented user 60269 11/50 current_auc = 0.5930631868131868
User 60269 AUC after training: 0.59375
User 60269 improves AUC. Keeping the model.
Training on augumented user 93399 12/50 current_auc = 0.59375
User 93399 AUC after training: 0.5913461538461539
User 93399 does not improve AUC. Reverting changes.
Training on augumented user 32931 13/50 current_auc = 0.59375
User 32931 AUC after training: 0.5923763736263736
User 32931 does not improve AUC. Reverting changes.
Training on augumented user 131539 14/50 current_auc = 0.59375
User 131539 AUC after training: 0.592032967032967
User 131539 does not improve AUC. Reverting changes.
Training on augumented user 125137 15/50 current_auc = 0.59375
User 125137 AUC after training: 0.5910027472527473
User 125137 does not improve AUC. Reverting changes.
Training on augumented user 64242 16/50 current_auc = 0.59375
User 64242 AUC after training: 0.5901442307692307
User 64242 does not improve AUC. Reverting changes.
Training on augumented user 20901 17/50 current_auc = 0.59375
User 20901 AUC after training: 0.5916895604395604
User 20901 does not improve AUC. Reverting changes.
Training on augumented user 18878 18/50 current_auc = 0.59375
User 18878 AUC after training: 0.5913461538461539
User 18878 does not improve AUC. Reverting changes.
Training on augumented user 64321 19/50 current_auc = 0.59375
User 64321 AUC after training: 0.5920329670329672
User 64321 does not improve AUC. Reverting changes.
Training on augumented user 42208 20/50 current_auc = 0.59375
User 42208 AUC after training: 0.5913461538461539
User 42208 does not improve AUC. Reverting changes.
Training on augumented user 38209 21/50 current_auc = 0.59375
User 38209 AUC after training: 0.5927197802197801
User 38209 does not improve AUC. Reverting changes.
Training on augumented user 90443 22/50 current_auc = 0.59375
User 90443 AUC after training: 0.5923763736263736
User 90443 does not improve AUC. Reverting changes.
Training on augumented user 67994 23/50 current_auc = 0.59375
User 67994 AUC after training: 0.5934065934065934
User 67994 does not improve AUC. Reverting changes.
Training on augumented user 106341 24/50 current_auc = 0.59375
User 106341 AUC after training: 0.5879120879120879
User 106341 does not improve AUC. Reverting changes.
Training on augumented user 118511 25/50 current_auc = 0.59375
User 118511 AUC after training: 0.5923763736263736
User 118511 does not improve AUC. Reverting changes.
Training on augumented user 115069 26/50 current_auc = 0.59375
User 115069 AUC after training: 0.5906593406593407
User 115069 does not improve AUC. Reverting changes.
Training on augumented user 56900 27/50 current_auc = 0.59375
User 56900 AUC after training: 0.5927197802197803
User 56900 does not improve AUC. Reverting changes.
Training on augumented user 5128 28/50 current_auc = 0.59375
User 5128 AUC after training: 0.5906593406593407
User 5128 does not improve AUC. Reverting changes.
Training on augumented user 120627 29/50 current_auc = 0.59375
User 120627 AUC after training: 0.59375
User 120627 does not improve AUC. Reverting changes.
Training on augumented user 76284 30/50 current_auc = 0.59375
User 76284 AUC after training: 0.5911744505494505
User 76284 does not improve AUC. Reverting changes.
Training on augumented user 94538 31/50 current_auc = 0.59375
User 94538 AUC after training: 0.5908310439560439
User 94538 does not improve AUC. Reverting changes.
Training on augumented user 133902 32/50 current_auc = 0.59375
User 133902 AUC after training: 0.5927197802197802
User 133902 does not improve AUC. Reverting changes.
Training on augumented user 17229 33/50 current_auc = 0.59375
User 17229 AUC after training: 0.5913461538461539
User 17229 does not improve AUC. Reverting changes.
Training on augumented user 112287 34/50 current_auc = 0.59375
User 112287 AUC after training: 0.5930631868131868
User 112287 does not improve AUC. Reverting changes.
Training on augumented user 125859 35/50 current_auc = 0.59375
User 125859 AUC after training: 0.5896291208791209
User 125859 does not improve AUC. Reverting changes.
Training on augumented user 111894 36/50 current_auc = 0.59375
User 111894 AUC after training: 0.5916895604395604
User 111894 does not improve AUC. Reverting changes.
Training on augumented user 73518 37/50 current_auc = 0.59375
User 73518 AUC after training: 0.5922046703296703
User 73518 does not improve AUC. Reverting changes.
Training on augumented user 29485 38/50 current_auc = 0.59375
User 29485 AUC after training: 0.5903159340659341
User 29485 does not improve AUC. Reverting changes.
Training on augumented user 136064 39/50 current_auc = 0.59375
User 136064 AUC after training: 0.5927197802197802
User 136064 does not improve AUC. Reverting changes.
Training on augumented user 15517 40/50 current_auc = 0.59375
User 15517 AUC after training: 0.5923763736263736
User 15517 does not improve AUC. Reverting changes.
Training on augumented user 138454 41/50 current_auc = 0.59375
User 138454 AUC after training: 0.5898008241758241
User 138454 does not improve AUC. Reverting changes.
Training on augumented user 105470 42/50 current_auc = 0.59375
User 105470 AUC after training: 0.5923763736263736
User 105470 does not improve AUC. Reverting changes.
Training on augumented user 19086 43/50 current_auc = 0.59375
User 19086 AUC after training: 0.5934065934065934
User 19086 does not improve AUC. Reverting changes.
Training on augumented user 45584 44/50 current_auc = 0.59375
User 45584 AUC after training: 0.5899725274725275
User 45584 does not improve AUC. Reverting changes.
Training on augumented user 121525 45/50 current_auc = 0.59375
User 121525 AUC after training: 0.5934065934065934
User 121525 does not improve AUC. Reverting changes.
Training on augumented user 23624 46/50 current_auc = 0.59375
User 23624 AUC after training: 0.5916895604395604
User 23624 does not improve AUC. Reverting changes.
Training on augumented user 60501 47/50 current_auc = 0.59375
User 60501 AUC after training: 0.5906593406593407
User 60501 does not improve AUC. Reverting changes.
Training on augumented user 28777 48/50 current_auc = 0.59375
User 28777 AUC after training: 0.5934065934065934
User 28777 does not improve AUC. Reverting changes.
Training on augumented user 126498 49/50 current_auc = 0.59375
User 126498 AUC after training: 0.5927197802197802
User 126498 does not improve AUC. Reverting changes.
[2024-12-02 18:25:32.168702] start test user 43691 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:32.619258] start test user 43691 88/568 recall augumented users by random, augumented_users = [122636, 129451, 79843, 94321, 87302, 45812, 129666, 73367, 106025, 95873, 86297, 11415, 28941, 67203, 108517, 19699, 21088, 84199, 112502, 90179, 42837, 54102, 767, 119986, 127032, 14111, 6243, 133685, 73425, 51444, 106978, 131159, 4523, 103269, 129977, 83763, 108382, 20197, 138194, 132146, 85608, 107051, 134634, 48621, 69606, 70799, 73629, 71581, 63526, 86829]
[2024-12-02 18:25:32.633733] user = 43691 Cloud 88/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:25:32.640069] user = 43691 Local 88/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:25:32.667752] user = 43691 Local+ 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:25:35.078054] user = 43691 MPDA- 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 122636 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122636 AUC after training: 0.5
User 122636 does not improve AUC. Reverting changes.
Training on augumented user 129451 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129451 AUC after training: 0.5
User 129451 does not improve AUC. Reverting changes.
Training on augumented user 79843 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79843 AUC after training: 0.5
User 79843 does not improve AUC. Reverting changes.
Training on augumented user 94321 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94321 AUC after training: 0.5
User 94321 does not improve AUC. Reverting changes.
Training on augumented user 87302 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87302 AUC after training: 0.5
User 87302 does not improve AUC. Reverting changes.
Training on augumented user 45812 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45812 AUC after training: 0.5
User 45812 does not improve AUC. Reverting changes.
Training on augumented user 129666 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129666 AUC after training: 0.5
User 129666 does not improve AUC. Reverting changes.
Training on augumented user 73367 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73367 AUC after training: 0.5
User 73367 does not improve AUC. Reverting changes.
Training on augumented user 106025 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106025 AUC after training: 0.5
User 106025 does not improve AUC. Reverting changes.
Training on augumented user 95873 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95873 AUC after training: 0.5
User 95873 does not improve AUC. Reverting changes.
Training on augumented user 86297 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86297 AUC after training: 0.5
User 86297 does not improve AUC. Reverting changes.
Training on augumented user 11415 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11415 AUC after training: 0.5
User 11415 does not improve AUC. Reverting changes.
Training on augumented user 28941 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28941 AUC after training: 0.5
User 28941 does not improve AUC. Reverting changes.
Training on augumented user 67203 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67203 AUC after training: 0.5
User 67203 does not improve AUC. Reverting changes.
Training on augumented user 108517 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108517 AUC after training: 0.5
User 108517 does not improve AUC. Reverting changes.
Training on augumented user 19699 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19699 AUC after training: 0.5
User 19699 does not improve AUC. Reverting changes.
Training on augumented user 21088 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21088 AUC after training: 0.5
User 21088 does not improve AUC. Reverting changes.
Training on augumented user 84199 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84199 AUC after training: 0.5
User 84199 does not improve AUC. Reverting changes.
Training on augumented user 112502 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112502 AUC after training: 0.5
User 112502 does not improve AUC. Reverting changes.
Training on augumented user 90179 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90179 AUC after training: 0.5
User 90179 does not improve AUC. Reverting changes.
Training on augumented user 42837 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42837 AUC after training: 0.5
User 42837 does not improve AUC. Reverting changes.
Training on augumented user 54102 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54102 AUC after training: 0.5
User 54102 does not improve AUC. Reverting changes.
Training on augumented user 767 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 767 AUC after training: 0.5
User 767 does not improve AUC. Reverting changes.
Training on augumented user 119986 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119986 AUC after training: 0.5
User 119986 does not improve AUC. Reverting changes.
Training on augumented user 127032 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127032 AUC after training: 0.5
User 127032 does not improve AUC. Reverting changes.
Training on augumented user 14111 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14111 AUC after training: 0.5
User 14111 does not improve AUC. Reverting changes.
Training on augumented user 6243 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6243 AUC after training: 0.5
User 6243 does not improve AUC. Reverting changes.
Training on augumented user 133685 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133685 AUC after training: 0.5
User 133685 does not improve AUC. Reverting changes.
Training on augumented user 73425 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73425 AUC after training: 0.5
User 73425 does not improve AUC. Reverting changes.
Training on augumented user 51444 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51444 AUC after training: 0.5
User 51444 does not improve AUC. Reverting changes.
Training on augumented user 106978 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106978 AUC after training: 0.5
User 106978 does not improve AUC. Reverting changes.
Training on augumented user 131159 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131159 AUC after training: 0.5
User 131159 does not improve AUC. Reverting changes.
Training on augumented user 4523 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4523 AUC after training: 0.5
User 4523 does not improve AUC. Reverting changes.
Training on augumented user 103269 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103269 AUC after training: 0.5
User 103269 does not improve AUC. Reverting changes.
Training on augumented user 129977 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129977 AUC after training: 0.5
User 129977 does not improve AUC. Reverting changes.
Training on augumented user 83763 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83763 AUC after training: 0.5
User 83763 does not improve AUC. Reverting changes.
Training on augumented user 108382 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108382 AUC after training: 0.5
User 108382 does not improve AUC. Reverting changes.
Training on augumented user 20197 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20197 AUC after training: 0.5
User 20197 does not improve AUC. Reverting changes.
Training on augumented user 138194 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138194 AUC after training: 0.5
User 138194 does not improve AUC. Reverting changes.
Training on augumented user 132146 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132146 AUC after training: 0.5
User 132146 does not improve AUC. Reverting changes.
Training on augumented user 85608 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85608 AUC after training: 0.5
User 85608 does not improve AUC. Reverting changes.
Training on augumented user 107051 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107051 AUC after training: 0.5
User 107051 does not improve AUC. Reverting changes.
Training on augumented user 134634 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134634 AUC after training: 0.5
User 134634 does not improve AUC. Reverting changes.
Training on augumented user 48621 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48621 AUC after training: 0.5
User 48621 does not improve AUC. Reverting changes.
Training on augumented user 69606 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69606 AUC after training: 0.5
User 69606 does not improve AUC. Reverting changes.
Training on augumented user 70799 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70799 AUC after training: 0.5
User 70799 does not improve AUC. Reverting changes.
Training on augumented user 73629 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73629 AUC after training: 0.5
User 73629 does not improve AUC. Reverting changes.
Training on augumented user 71581 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71581 AUC after training: 0.5
User 71581 does not improve AUC. Reverting changes.
Training on augumented user 63526 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63526 AUC after training: 0.5
User 63526 does not improve AUC. Reverting changes.
Training on augumented user 86829 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86829 AUC after training: 0.5
User 86829 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:03.937855] start test user 43756 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:04.488524] start test user 43756 89/568 recall augumented users by random, augumented_users = [109710, 77914, 35439, 106638, 113010, 21416, 134563, 81761, 85128, 8071, 120943, 56143, 22443, 119593, 52185, 128460, 54067, 45201, 119409, 114560, 80947, 119549, 54404, 4131, 133865, 40605, 14859, 20963, 120423, 46404, 20158, 76860, 135017, 61393, 46411, 133843, 55744, 91937, 110980, 131355, 27927, 93146, 47646, 15346, 93287, 103616, 119911, 36865, 59638, 110875]
[2024-12-02 18:26:04.503784] user = 43756 Cloud 89/568
[2024-12-02 18:26:04.526125] user = 43756 Local 89/568
[2024-12-02 18:26:04.615804] user = 43756 Local+ 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:07.881258] user = 43756 MPDA- 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5618448637316562
Training on augumented user 109710 0/50 current_auc = 0.5618448637316562
User 109710 AUC after training: 0.5639412997903563
User 109710 improves AUC. Keeping the model.
Training on augumented user 77914 1/50 current_auc = 0.5639412997903563
User 77914 AUC after training: 0.5639412997903563
User 77914 does not improve AUC. Reverting changes.
Training on augumented user 35439 2/50 current_auc = 0.5639412997903563
User 35439 AUC after training: 0.5649895178197065
User 35439 improves AUC. Keeping the model.
Training on augumented user 106638 3/50 current_auc = 0.5649895178197065
User 106638 AUC after training: 0.5621942697414396
User 106638 does not improve AUC. Reverting changes.
Training on augumented user 113010 4/50 current_auc = 0.5649895178197065
User 113010 AUC after training: 0.5639412997903565
User 113010 does not improve AUC. Reverting changes.
Training on augumented user 21416 5/50 current_auc = 0.5649895178197065
User 21416 AUC after training: 0.5646401118099232
User 21416 does not improve AUC. Reverting changes.
Training on augumented user 134563 6/50 current_auc = 0.5649895178197065
User 134563 AUC after training: 0.563591893780573
User 134563 does not improve AUC. Reverting changes.
Training on augumented user 81761 7/50 current_auc = 0.5649895178197065
User 81761 AUC after training: 0.5646401118099231
User 81761 does not improve AUC. Reverting changes.
Training on augumented user 85128 8/50 current_auc = 0.5649895178197065
User 85128 AUC after training: 0.5607966457023061
User 85128 does not improve AUC. Reverting changes.
Training on augumented user 8071 9/50 current_auc = 0.5649895178197065
User 8071 AUC after training: 0.5635918937805731
User 8071 does not improve AUC. Reverting changes.
Training on augumented user 120943 10/50 current_auc = 0.5649895178197065
User 120943 AUC after training: 0.5628930817610063
User 120943 does not improve AUC. Reverting changes.
Training on augumented user 56143 11/50 current_auc = 0.5649895178197065
User 56143 AUC after training: 0.5632424877707897
User 56143 does not improve AUC. Reverting changes.
Training on augumented user 22443 12/50 current_auc = 0.5649895178197065
User 22443 AUC after training: 0.5716282320055905
User 22443 improves AUC. Keeping the model.
Training on augumented user 119593 13/50 current_auc = 0.5716282320055905
User 119593 AUC after training: 0.5726764500349406
User 119593 improves AUC. Keeping the model.
Training on augumented user 52185 14/50 current_auc = 0.5726764500349406
User 52185 AUC after training: 0.5733752620545073
User 52185 improves AUC. Keeping the model.
Training on augumented user 128460 15/50 current_auc = 0.5733752620545073
User 128460 AUC after training: 0.5691823899371069
User 128460 does not improve AUC. Reverting changes.
Training on augumented user 54067 16/50 current_auc = 0.5733752620545073
User 54067 AUC after training: 0.5719776380153739
User 54067 does not improve AUC. Reverting changes.
Training on augumented user 45201 17/50 current_auc = 0.5733752620545073
User 45201 AUC after training: 0.5747728860936409
User 45201 improves AUC. Keeping the model.
Training on augumented user 119409 18/50 current_auc = 0.5747728860936409
User 119409 AUC after training: 0.5744234800838575
User 119409 does not improve AUC. Reverting changes.
Training on augumented user 114560 19/50 current_auc = 0.5747728860936409
User 114560 AUC after training: 0.5772187281621244
User 114560 improves AUC. Keeping the model.
Training on augumented user 80947 20/50 current_auc = 0.5772187281621244
User 80947 AUC after training: 0.5744234800838574
User 80947 does not improve AUC. Reverting changes.
Training on augumented user 119549 21/50 current_auc = 0.5772187281621244
User 119549 AUC after training: 0.5761705101327743
User 119549 does not improve AUC. Reverting changes.
Training on augumented user 54404 22/50 current_auc = 0.5772187281621244
User 54404 AUC after training: 0.5758211041229909
User 54404 does not improve AUC. Reverting changes.
Training on augumented user 4131 23/50 current_auc = 0.5772187281621244
User 4131 AUC after training: 0.575122292103424
User 4131 does not improve AUC. Reverting changes.
Training on augumented user 133865 24/50 current_auc = 0.5772187281621244
User 133865 AUC after training: 0.5775681341719078
User 133865 improves AUC. Keeping the model.
Training on augumented user 40605 25/50 current_auc = 0.5775681341719078
User 40605 AUC after training: 0.5761705101327743
User 40605 does not improve AUC. Reverting changes.
Training on augumented user 14859 26/50 current_auc = 0.5775681341719078
User 14859 AUC after training: 0.5691823899371069
User 14859 does not improve AUC. Reverting changes.
Training on augumented user 20963 27/50 current_auc = 0.5775681341719078
User 20963 AUC after training: 0.576869322152341
User 20963 does not improve AUC. Reverting changes.
Training on augumented user 120423 28/50 current_auc = 0.5775681341719078
User 120423 AUC after training: 0.5719776380153738
User 120423 does not improve AUC. Reverting changes.
Training on augumented user 46404 29/50 current_auc = 0.5775681341719078
User 46404 AUC after training: 0.576869322152341
User 46404 does not improve AUC. Reverting changes.
Training on augumented user 20158 30/50 current_auc = 0.5775681341719078
User 20158 AUC after training: 0.5684835779175401
User 20158 does not improve AUC. Reverting changes.
Training on augumented user 76860 31/50 current_auc = 0.5775681341719078
User 76860 AUC after training: 0.5733752620545074
User 76860 does not improve AUC. Reverting changes.
Training on augumented user 135017 32/50 current_auc = 0.5775681341719078
User 135017 AUC after training: 0.5765199161425576
User 135017 does not improve AUC. Reverting changes.
Training on augumented user 61393 33/50 current_auc = 0.5775681341719078
User 61393 AUC after training: 0.5688329839273236
User 61393 does not improve AUC. Reverting changes.
Training on augumented user 46411 34/50 current_auc = 0.5775681341719078
User 46411 AUC after training: 0.5786163522012578
User 46411 improves AUC. Keeping the model.
Training on augumented user 133843 35/50 current_auc = 0.5786163522012578
User 133843 AUC after training: 0.5719776380153738
User 133843 does not improve AUC. Reverting changes.
Training on augumented user 55744 36/50 current_auc = 0.5786163522012578
User 55744 AUC after training: 0.5779175401816912
User 55744 does not improve AUC. Reverting changes.
Training on augumented user 91937 37/50 current_auc = 0.5786163522012578
User 91937 AUC after training: 0.5775681341719078
User 91937 does not improve AUC. Reverting changes.
Training on augumented user 110980 38/50 current_auc = 0.5786163522012578
User 110980 AUC after training: 0.5761705101327742
User 110980 does not improve AUC. Reverting changes.
Training on augumented user 131355 39/50 current_auc = 0.5786163522012578
User 131355 AUC after training: 0.5782669461914745
User 131355 does not improve AUC. Reverting changes.
Training on augumented user 27927 40/50 current_auc = 0.5786163522012578
User 27927 AUC after training: 0.5737246680642908
User 27927 does not improve AUC. Reverting changes.
Training on augumented user 93146 41/50 current_auc = 0.5786163522012578
User 93146 AUC after training: 0.5656883298392732
User 93146 does not improve AUC. Reverting changes.
Training on augumented user 47646 42/50 current_auc = 0.5786163522012578
User 47646 AUC after training: 0.5733752620545074
User 47646 does not improve AUC. Reverting changes.
Training on augumented user 15346 43/50 current_auc = 0.5786163522012578
User 15346 AUC after training: 0.5775681341719078
User 15346 does not improve AUC. Reverting changes.
Training on augumented user 93287 44/50 current_auc = 0.5786163522012578
User 93287 AUC after training: 0.5726764500349406
User 93287 does not improve AUC. Reverting changes.
Training on augumented user 103616 45/50 current_auc = 0.5786163522012578
User 103616 AUC after training: 0.5726764500349406
User 103616 does not improve AUC. Reverting changes.
Training on augumented user 119911 46/50 current_auc = 0.5786163522012578
User 119911 AUC after training: 0.5793151642208246
User 119911 improves AUC. Keeping the model.
Training on augumented user 36865 47/50 current_auc = 0.5793151642208246
User 36865 AUC after training: 0.5793151642208246
User 36865 does not improve AUC. Reverting changes.
Training on augumented user 59638 48/50 current_auc = 0.5793151642208246
User 59638 AUC after training: 0.5751222921034242
User 59638 does not improve AUC. Reverting changes.
Training on augumented user 110875 49/50 current_auc = 0.5793151642208246
User 110875 AUC after training: 0.5775681341719078
User 110875 does not improve AUC. Reverting changes.
[2024-12-02 18:26:41.921585] start test user 43770 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:42.615445] start test user 43770 90/568 recall augumented users by random, augumented_users = [45432, 107488, 68032, 83854, 57078, 65088, 76729, 43515, 91416, 92964, 57018, 90819, 55241, 125469, 21409, 108424, 41941, 48000, 85561, 129471, 48146, 4457, 87907, 18788, 84493, 8249, 49923, 81634, 38821, 12036, 15202, 106213, 25616, 72026, 121781, 99664, 69154, 77158, 16489, 77391, 94317, 62694, 55597, 87376, 25920, 110371, 80252, 128805, 65704, 52827]
[2024-12-02 18:26:42.631279] user = 43770 Cloud 90/568
[2024-12-02 18:26:42.678382] user = 43770 Local 90/568
[2024-12-02 18:26:42.748329] user = 43770 Local+ 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:45.810659] user = 43770 MPDA- 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6867981162345391
Training on augumented user 45432 0/50 current_auc = 0.6867981162345391
User 45432 AUC after training: 0.6879366557987889
User 45432 improves AUC. Keeping the model.
Training on augumented user 107488 1/50 current_auc = 0.6879366557987889
User 107488 AUC after training: 0.687729648605289
User 107488 does not improve AUC. Reverting changes.
Training on augumented user 68032 2/50 current_auc = 0.6879366557987889
User 68032 AUC after training: 0.6880919111939139
User 68032 improves AUC. Keeping the model.
Training on augumented user 83854 3/50 current_auc = 0.6880919111939139
User 83854 AUC after training: 0.687884904000414
User 83854 does not improve AUC. Reverting changes.
Training on augumented user 57078 4/50 current_auc = 0.6880919111939139
User 57078 AUC after training: 0.6880401593955389
User 57078 does not improve AUC. Reverting changes.
Training on augumented user 65088 5/50 current_auc = 0.6880919111939139
User 65088 AUC after training: 0.6887129327744139
User 65088 improves AUC. Keeping the model.
Training on augumented user 76729 6/50 current_auc = 0.6887129327744139
User 76729 AUC after training: 0.6899032241370386
User 76729 improves AUC. Keeping the model.
Training on augumented user 43515 7/50 current_auc = 0.6899032241370386
User 43515 AUC after training: 0.6889199399679138
User 43515 does not improve AUC. Reverting changes.
Training on augumented user 91416 8/50 current_auc = 0.6899032241370386
User 91416 AUC after training: 0.6893857061532889
User 91416 does not improve AUC. Reverting changes.
Training on augumented user 92964 9/50 current_auc = 0.6899032241370386
User 92964 AUC after training: 0.6887129327744139
User 92964 does not improve AUC. Reverting changes.
Training on augumented user 57018 10/50 current_auc = 0.6899032241370386
User 57018 AUC after training: 0.6896703410443512
User 57018 does not improve AUC. Reverting changes.
Training on augumented user 90819 11/50 current_auc = 0.6899032241370386
User 90819 AUC after training: 0.689126947161414
User 90819 does not improve AUC. Reverting changes.
Training on augumented user 55241 12/50 current_auc = 0.6899032241370386
User 55241 AUC after training: 0.6895927133467888
User 55241 does not improve AUC. Reverting changes.
Training on augumented user 125469 13/50 current_auc = 0.6899032241370386
User 125469 AUC after training: 0.6894115820524763
User 125469 does not improve AUC. Reverting changes.
Training on augumented user 21409 14/50 current_auc = 0.6899032241370386
User 21409 AUC after training: 0.6892822025565387
User 21409 does not improve AUC. Reverting changes.
Training on augumented user 108424 15/50 current_auc = 0.6899032241370386
User 108424 AUC after training: 0.6900067277337887
User 108424 improves AUC. Keeping the model.
Training on augumented user 41941 16/50 current_auc = 0.6900067277337887
User 41941 AUC after training: 0.6899032241370386
User 41941 does not improve AUC. Reverting changes.
Training on augumented user 48000 17/50 current_auc = 0.6900067277337887
User 48000 AUC after training: 0.6894374579516638
User 48000 does not improve AUC. Reverting changes.
Training on augumented user 85561 18/50 current_auc = 0.6900067277337887
User 85561 AUC after training: 0.6896444651451638
User 85561 does not improve AUC. Reverting changes.
Training on augumented user 129471 19/50 current_auc = 0.6900067277337887
User 129471 AUC after training: 0.6893857061532888
User 129471 does not improve AUC. Reverting changes.
Training on augumented user 48146 20/50 current_auc = 0.6900067277337887
User 48146 AUC after training: 0.6901102313305387
User 48146 improves AUC. Keeping the model.
Training on augumented user 4457 21/50 current_auc = 0.6901102313305387
User 4457 AUC after training: 0.6902137349272887
User 4457 improves AUC. Keeping the model.
Training on augumented user 87907 22/50 current_auc = 0.6902137349272887
User 87907 AUC after training: 0.6893857061532888
User 87907 does not improve AUC. Reverting changes.
Training on augumented user 18788 23/50 current_auc = 0.6902137349272887
User 18788 AUC after training: 0.6893857061532888
User 18788 does not improve AUC. Reverting changes.
Training on augumented user 84493 24/50 current_auc = 0.6902137349272887
User 84493 AUC after training: 0.6901619831289137
User 84493 does not improve AUC. Reverting changes.
Training on augumented user 8249 25/50 current_auc = 0.6902137349272887
User 8249 AUC after training: 0.6888681881695389
User 8249 does not improve AUC. Reverting changes.
Training on augumented user 49923 26/50 current_auc = 0.6902137349272887
User 49923 AUC after training: 0.6891786989597888
User 49923 does not improve AUC. Reverting changes.
Training on augumented user 81634 27/50 current_auc = 0.6902137349272887
User 81634 AUC after training: 0.6897997205402887
User 81634 does not improve AUC. Reverting changes.
Training on augumented user 38821 28/50 current_auc = 0.6902137349272887
User 38821 AUC after training: 0.6899549759354138
User 38821 does not improve AUC. Reverting changes.
Training on augumented user 12036 29/50 current_auc = 0.6902137349272887
User 12036 AUC after training: 0.6888164363711639
User 12036 does not improve AUC. Reverting changes.
Training on augumented user 15202 30/50 current_auc = 0.6902137349272887
User 15202 AUC after training: 0.6899549759354137
User 15202 does not improve AUC. Reverting changes.
Training on augumented user 106213 31/50 current_auc = 0.6902137349272887
User 106213 AUC after training: 0.6891269471614138
User 106213 does not improve AUC. Reverting changes.
Training on augumented user 25616 32/50 current_auc = 0.6902137349272887
User 25616 AUC after training: 0.6903689903224137
User 25616 improves AUC. Keeping the model.
Training on augumented user 72026 33/50 current_auc = 0.6903689903224137
User 72026 AUC after training: 0.6901102313305386
User 72026 does not improve AUC. Reverting changes.
Training on augumented user 121781 34/50 current_auc = 0.6903689903224137
User 121781 AUC after training: 0.6893339543549138
User 121781 does not improve AUC. Reverting changes.
Training on augumented user 99664 35/50 current_auc = 0.6903689903224137
User 99664 AUC after training: 0.6901619831289136
User 99664 does not improve AUC. Reverting changes.
Training on augumented user 69154 36/50 current_auc = 0.6903689903224137
User 69154 AUC after training: 0.6901102313305387
User 69154 does not improve AUC. Reverting changes.
Training on augumented user 77158 37/50 current_auc = 0.6903689903224137
User 77158 AUC after training: 0.6884541737825389
User 77158 does not improve AUC. Reverting changes.
Training on augumented user 16489 38/50 current_auc = 0.6903689903224137
User 16489 AUC after training: 0.6900584795321637
User 16489 does not improve AUC. Reverting changes.
Training on augumented user 77391 39/50 current_auc = 0.6903689903224137
User 77391 AUC after training: 0.6902654867256637
User 77391 does not improve AUC. Reverting changes.
Training on augumented user 94317 40/50 current_auc = 0.6903689903224137
User 94317 AUC after training: 0.6898514723386637
User 94317 does not improve AUC. Reverting changes.
Training on augumented user 62694 41/50 current_auc = 0.6903689903224137
User 62694 AUC after training: 0.6900584795321638
User 62694 does not improve AUC. Reverting changes.
Training on augumented user 55597 42/50 current_auc = 0.6903689903224137
User 55597 AUC after training: 0.6898514723386637
User 55597 does not improve AUC. Reverting changes.
Training on augumented user 87376 43/50 current_auc = 0.6903689903224137
User 87376 AUC after training: 0.6899032241370388
User 87376 does not improve AUC. Reverting changes.
Training on augumented user 25920 44/50 current_auc = 0.6903689903224137
User 25920 AUC after training: 0.6892822025565388
User 25920 does not improve AUC. Reverting changes.
Training on augumented user 110371 45/50 current_auc = 0.6903689903224137
User 110371 AUC after training: 0.6897997205402887
User 110371 does not improve AUC. Reverting changes.
Training on augumented user 80252 46/50 current_auc = 0.6903689903224137
User 80252 AUC after training: 0.688247166589039
User 80252 does not improve AUC. Reverting changes.
Training on augumented user 128805 47/50 current_auc = 0.6903689903224137
User 128805 AUC after training: 0.6894892097500387
User 128805 does not improve AUC. Reverting changes.
Training on augumented user 65704 48/50 current_auc = 0.6903689903224137
User 65704 AUC after training: 0.6900067277337887
User 65704 does not improve AUC. Reverting changes.
Training on augumented user 52827 49/50 current_auc = 0.6903689903224137
User 52827 AUC after training: 0.6900584795321637
User 52827 does not improve AUC. Reverting changes.
[2024-12-02 18:27:11.884407] start test user 43800 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:12.305234] start test user 43800 91/568 recall augumented users by random, augumented_users = [71718, 56663, 50724, 69672, 101194, 44177, 132659, 70839, 30716, 74896, 79414, 78615, 106754, 71981, 20234, 23195, 65940, 31004, 108310, 4937, 79931, 57602, 24494, 3224, 121332, 98154, 9307, 69378, 39194, 33643, 64164, 91736, 81479, 99773, 100201, 27069, 46362, 26648, 85170, 38875, 44802, 36844, 68967, 38790, 118354, 24498, 125940, 22226, 93085, 118615]
[2024-12-02 18:27:12.320859] user = 43800 Cloud 91/568
[2024-12-02 18:27:12.350934] user = 43800 Local 91/568
[2024-12-02 18:27:12.477088] user = 43800 Local+ 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:14.847006] user = 43800 MPDA- 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.726339438061654
Training on augumented user 71718 0/50 current_auc = 0.726339438061654
User 71718 AUC after training: 0.7257706745535207
User 71718 does not improve AUC. Reverting changes.
Training on augumented user 56663 1/50 current_auc = 0.726339438061654
User 56663 AUC after training: 0.7262256853600273
User 56663 does not improve AUC. Reverting changes.
Training on augumented user 50724 2/50 current_auc = 0.726339438061654
User 50724 AUC after training: 0.7262256853600273
User 50724 does not improve AUC. Reverting changes.
Training on augumented user 69672 3/50 current_auc = 0.726339438061654
User 69672 AUC after training: 0.7263963144124672
User 69672 improves AUC. Keeping the model.
Training on augumented user 101194 4/50 current_auc = 0.7263963144124672
User 101194 AUC after training: 0.725998179956774
User 101194 does not improve AUC. Reverting changes.
Training on augumented user 44177 5/50 current_auc = 0.7263963144124672
User 44177 AUC after training: 0.725998179956774
User 44177 does not improve AUC. Reverting changes.
Training on augumented user 132659 6/50 current_auc = 0.7263963144124672
User 132659 AUC after training: 0.7260266181321806
User 132659 does not improve AUC. Reverting changes.
Training on augumented user 70839 7/50 current_auc = 0.7263963144124672
User 70839 AUC after training: 0.7259413036059607
User 70839 does not improve AUC. Reverting changes.
Training on augumented user 30716 8/50 current_auc = 0.7263963144124672
User 30716 AUC after training: 0.7251165965191674
User 30716 does not improve AUC. Reverting changes.
Training on augumented user 74896 9/50 current_auc = 0.7263963144124672
User 74896 AUC after training: 0.726510067114094
User 74896 improves AUC. Keeping the model.
Training on augumented user 79414 10/50 current_auc = 0.726510067114094
User 79414 AUC after training: 0.7274200887271072
User 79414 improves AUC. Keeping the model.
Training on augumented user 78615 11/50 current_auc = 0.7274200887271072
User 78615 AUC after training: 0.7265100671140939
User 78615 does not improve AUC. Reverting changes.
Training on augumented user 106754 12/50 current_auc = 0.7274200887271072
User 106754 AUC after training: 0.7262256853600273
User 106754 does not improve AUC. Reverting changes.
Training on augumented user 71981 13/50 current_auc = 0.7274200887271072
User 71981 AUC after training: 0.7269650779206006
User 71981 does not improve AUC. Reverting changes.
Training on augumented user 20234 14/50 current_auc = 0.7274200887271072
User 20234 AUC after training: 0.7267375725173473
User 20234 does not improve AUC. Reverting changes.
Training on augumented user 23195 15/50 current_auc = 0.7274200887271072
User 23195 AUC after training: 0.7267375725173473
User 23195 does not improve AUC. Reverting changes.
Training on augumented user 65940 16/50 current_auc = 0.7274200887271072
User 65940 AUC after training: 0.726680696166534
User 65940 does not improve AUC. Reverting changes.
Training on augumented user 31004 17/50 current_auc = 0.7274200887271072
User 31004 AUC after training: 0.7269082015697873
User 31004 does not improve AUC. Reverting changes.
Training on augumented user 108310 18/50 current_auc = 0.7274200887271072
User 108310 AUC after training: 0.7269082015697873
User 108310 does not improve AUC. Reverting changes.
Training on augumented user 4937 19/50 current_auc = 0.7274200887271072
User 4937 AUC after training: 0.7258844272551472
User 4937 does not improve AUC. Reverting changes.
Training on augumented user 79931 20/50 current_auc = 0.7274200887271072
User 79931 AUC after training: 0.7266806961665339
User 79931 does not improve AUC. Reverting changes.
Training on augumented user 57602 21/50 current_auc = 0.7274200887271072
User 57602 AUC after training: 0.7269650779206007
User 57602 does not improve AUC. Reverting changes.
Training on augumented user 24494 22/50 current_auc = 0.7274200887271072
User 24494 AUC after training: 0.7267375725173474
User 24494 does not improve AUC. Reverting changes.
Training on augumented user 3224 23/50 current_auc = 0.7274200887271072
User 3224 AUC after training: 0.7274769650779207
User 3224 improves AUC. Keeping the model.
Training on augumented user 121332 24/50 current_auc = 0.7274769650779207
User 121332 AUC after training: 0.7270788306222272
User 121332 does not improve AUC. Reverting changes.
Training on augumented user 98154 25/50 current_auc = 0.7274769650779207
User 98154 AUC after training: 0.7262825617108406
User 98154 does not improve AUC. Reverting changes.
Training on augumented user 9307 26/50 current_auc = 0.7274769650779207
User 9307 AUC after training: 0.725998179956774
User 9307 does not improve AUC. Reverting changes.
Training on augumented user 69378 27/50 current_auc = 0.7274769650779207
User 69378 AUC after training: 0.724291889432374
User 69378 does not improve AUC. Reverting changes.
Training on augumented user 39194 28/50 current_auc = 0.7274769650779207
User 39194 AUC after training: 0.7272494596746673
User 39194 does not improve AUC. Reverting changes.
Training on augumented user 33643 29/50 current_auc = 0.7274769650779207
User 33643 AUC after training: 0.7269650779206006
User 33643 does not improve AUC. Reverting changes.
Training on augumented user 64164 30/50 current_auc = 0.7274769650779207
User 64164 AUC after training: 0.7267944488681606
User 64164 does not improve AUC. Reverting changes.
Training on augumented user 91736 31/50 current_auc = 0.7274769650779207
User 91736 AUC after training: 0.7266238198157206
User 91736 does not improve AUC. Reverting changes.
Training on augumented user 81479 32/50 current_auc = 0.7274769650779207
User 81479 AUC after training: 0.7264531907632807
User 81479 does not improve AUC. Reverting changes.
Training on augumented user 99773 33/50 current_auc = 0.7274769650779207
User 99773 AUC after training: 0.7249175292913207
User 99773 does not improve AUC. Reverting changes.
Training on augumented user 100201 34/50 current_auc = 0.7274769650779207
User 100201 AUC after training: 0.7268513252189739
User 100201 does not improve AUC. Reverting changes.
Training on augumented user 27069 35/50 current_auc = 0.7274769650779207
User 27069 AUC after training: 0.7265100671140939
User 27069 does not improve AUC. Reverting changes.
Training on augumented user 46362 36/50 current_auc = 0.7274769650779207
User 46362 AUC after training: 0.7274200887271073
User 46362 does not improve AUC. Reverting changes.
Training on augumented user 26648 37/50 current_auc = 0.7274769650779207
User 26648 AUC after training: 0.7275338414287339
User 26648 improves AUC. Keeping the model.
Training on augumented user 85170 38/50 current_auc = 0.7275338414287339
User 85170 AUC after training: 0.7276475941303606
User 85170 improves AUC. Keeping the model.
Training on augumented user 38875 39/50 current_auc = 0.7276475941303606
User 38875 AUC after training: 0.7274200887271073
User 38875 does not improve AUC. Reverting changes.
Training on augumented user 44802 40/50 current_auc = 0.7276475941303606
User 44802 AUC after training: 0.7260550563075873
User 44802 does not improve AUC. Reverting changes.
Training on augumented user 36844 41/50 current_auc = 0.7276475941303606
User 36844 AUC after training: 0.7269650779206007
User 36844 does not improve AUC. Reverting changes.
Training on augumented user 68967 42/50 current_auc = 0.7276475941303606
User 68967 AUC after training: 0.7276475941303605
User 68967 does not improve AUC. Reverting changes.
Training on augumented user 38790 43/50 current_auc = 0.7276475941303606
User 38790 AUC after training: 0.7272494596746673
User 38790 does not improve AUC. Reverting changes.
Training on augumented user 118354 44/50 current_auc = 0.7276475941303606
User 118354 AUC after training: 0.7250312819929474
User 118354 does not improve AUC. Reverting changes.
Training on augumented user 24498 45/50 current_auc = 0.7276475941303606
User 24498 AUC after training: 0.7271357069730406
User 24498 does not improve AUC. Reverting changes.
Training on augumented user 125940 46/50 current_auc = 0.7276475941303606
User 125940 AUC after training: 0.7267375725173473
User 125940 does not improve AUC. Reverting changes.
Training on augumented user 22226 47/50 current_auc = 0.7276475941303606
User 22226 AUC after training: 0.7270788306222272
User 22226 does not improve AUC. Reverting changes.
Training on augumented user 93085 48/50 current_auc = 0.7276475941303606
User 93085 AUC after training: 0.7271357069730406
User 93085 does not improve AUC. Reverting changes.
Training on augumented user 118615 49/50 current_auc = 0.7276475941303606
User 118615 AUC after training: 0.7265669434649072
User 118615 does not improve AUC. Reverting changes.
[2024-12-02 18:27:46.408258] start test user 43829 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:47.036476] start test user 43829 92/568 recall augumented users by random, augumented_users = [103516, 102519, 57715, 36021, 1259, 89378, 14798, 799, 54961, 60773, 136739, 23093, 67775, 20502, 83491, 35513, 35007, 78345, 92441, 22297, 111030, 93265, 31912, 136201, 17329, 120130, 14598, 49562, 33015, 84708, 125694, 117858, 125610, 63779, 16217, 128573, 97297, 129391, 65126, 5454, 138237, 72923, 101363, 21152, 54577, 117435, 67578, 105468, 97112, 6951]
[2024-12-02 18:27:47.054348] user = 43829 Cloud 92/568
[2024-12-02 18:27:47.100615] user = 43829 Local 92/568
[2024-12-02 18:27:47.187943] user = 43829 Local+ 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:49.849262] user = 43829 MPDA- 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5857142857142857
Training on augumented user 103516 0/50 current_auc = 0.5857142857142857
User 103516 AUC after training: 0.5857142857142859
User 103516 improves AUC. Keeping the model.
Training on augumented user 102519 1/50 current_auc = 0.5857142857142859
User 102519 AUC after training: 0.5861003861003862
User 102519 improves AUC. Keeping the model.
Training on augumented user 57715 2/50 current_auc = 0.5861003861003862
User 57715 AUC after training: 0.5864864864864865
User 57715 improves AUC. Keeping the model.
Training on augumented user 36021 3/50 current_auc = 0.5864864864864865
User 36021 AUC after training: 0.5857142857142856
User 36021 does not improve AUC. Reverting changes.
Training on augumented user 1259 4/50 current_auc = 0.5864864864864865
User 1259 AUC after training: 0.5857142857142856
User 1259 does not improve AUC. Reverting changes.
Training on augumented user 89378 5/50 current_auc = 0.5864864864864865
User 89378 AUC after training: 0.5853281853281853
User 89378 does not improve AUC. Reverting changes.
Training on augumented user 14798 6/50 current_auc = 0.5864864864864865
User 14798 AUC after training: 0.5868725868725868
User 14798 improves AUC. Keeping the model.
Training on augumented user 799 7/50 current_auc = 0.5868725868725868
User 799 AUC after training: 0.5868725868725869
User 799 improves AUC. Keeping the model.
Training on augumented user 54961 8/50 current_auc = 0.5868725868725869
User 54961 AUC after training: 0.5872586872586872
User 54961 improves AUC. Keeping the model.
Training on augumented user 60773 9/50 current_auc = 0.5872586872586872
User 60773 AUC after training: 0.5876447876447877
User 60773 improves AUC. Keeping the model.
Training on augumented user 136739 10/50 current_auc = 0.5876447876447877
User 136739 AUC after training: 0.5884169884169885
User 136739 improves AUC. Keeping the model.
Training on augumented user 23093 11/50 current_auc = 0.5884169884169885
User 23093 AUC after training: 0.5888030888030888
User 23093 improves AUC. Keeping the model.
Training on augumented user 67775 12/50 current_auc = 0.5888030888030888
User 67775 AUC after training: 0.588030888030888
User 67775 does not improve AUC. Reverting changes.
Training on augumented user 20502 13/50 current_auc = 0.5888030888030888
User 20502 AUC after training: 0.5876447876447877
User 20502 does not improve AUC. Reverting changes.
Training on augumented user 83491 14/50 current_auc = 0.5888030888030888
User 83491 AUC after training: 0.5891891891891892
User 83491 improves AUC. Keeping the model.
Training on augumented user 35513 15/50 current_auc = 0.5891891891891892
User 35513 AUC after training: 0.58996138996139
User 35513 improves AUC. Keeping the model.
Training on augumented user 35007 16/50 current_auc = 0.58996138996139
User 35007 AUC after training: 0.5895752895752895
User 35007 does not improve AUC. Reverting changes.
Training on augumented user 78345 17/50 current_auc = 0.58996138996139
User 78345 AUC after training: 0.5884169884169884
User 78345 does not improve AUC. Reverting changes.
Training on augumented user 92441 18/50 current_auc = 0.58996138996139
User 92441 AUC after training: 0.5895752895752895
User 92441 does not improve AUC. Reverting changes.
Training on augumented user 22297 19/50 current_auc = 0.58996138996139
User 22297 AUC after training: 0.5907335907335907
User 22297 improves AUC. Keeping the model.
Training on augumented user 111030 20/50 current_auc = 0.5907335907335907
User 111030 AUC after training: 0.5911196911196911
User 111030 improves AUC. Keeping the model.
Training on augumented user 93265 21/50 current_auc = 0.5911196911196911
User 93265 AUC after training: 0.5907335907335908
User 93265 does not improve AUC. Reverting changes.
Training on augumented user 31912 22/50 current_auc = 0.5911196911196911
User 31912 AUC after training: 0.5903474903474903
User 31912 does not improve AUC. Reverting changes.
Training on augumented user 136201 23/50 current_auc = 0.5911196911196911
User 136201 AUC after training: 0.5907335907335908
User 136201 does not improve AUC. Reverting changes.
Training on augumented user 17329 24/50 current_auc = 0.5911196911196911
User 17329 AUC after training: 0.5891891891891892
User 17329 does not improve AUC. Reverting changes.
Training on augumented user 120130 25/50 current_auc = 0.5911196911196911
User 120130 AUC after training: 0.5888030888030888
User 120130 does not improve AUC. Reverting changes.
Training on augumented user 14598 26/50 current_auc = 0.5911196911196911
User 14598 AUC after training: 0.5895752895752896
User 14598 does not improve AUC. Reverting changes.
Training on augumented user 49562 27/50 current_auc = 0.5911196911196911
User 49562 AUC after training: 0.5845559845559846
User 49562 does not improve AUC. Reverting changes.
Training on augumented user 33015 28/50 current_auc = 0.5911196911196911
User 33015 AUC after training: 0.5880308880308881
User 33015 does not improve AUC. Reverting changes.
Training on augumented user 84708 29/50 current_auc = 0.5911196911196911
User 84708 AUC after training: 0.5907335907335908
User 84708 does not improve AUC. Reverting changes.
Training on augumented user 125694 30/50 current_auc = 0.5911196911196911
User 125694 AUC after training: 0.5903474903474903
User 125694 does not improve AUC. Reverting changes.
Training on augumented user 117858 31/50 current_auc = 0.5911196911196911
User 117858 AUC after training: 0.5845559845559847
User 117858 does not improve AUC. Reverting changes.
Training on augumented user 125610 32/50 current_auc = 0.5911196911196911
User 125610 AUC after training: 0.5868725868725869
User 125610 does not improve AUC. Reverting changes.
Training on augumented user 63779 33/50 current_auc = 0.5911196911196911
User 63779 AUC after training: 0.588030888030888
User 63779 does not improve AUC. Reverting changes.
Training on augumented user 16217 34/50 current_auc = 0.5911196911196911
User 16217 AUC after training: 0.5907335907335907
User 16217 does not improve AUC. Reverting changes.
Training on augumented user 128573 35/50 current_auc = 0.5911196911196911
User 128573 AUC after training: 0.5907335907335907
User 128573 does not improve AUC. Reverting changes.
Training on augumented user 97297 36/50 current_auc = 0.5911196911196911
User 97297 AUC after training: 0.5891891891891892
User 97297 does not improve AUC. Reverting changes.
Training on augumented user 129391 37/50 current_auc = 0.5911196911196911
User 129391 AUC after training: 0.5903474903474903
User 129391 does not improve AUC. Reverting changes.
Training on augumented user 65126 38/50 current_auc = 0.5911196911196911
User 65126 AUC after training: 0.5864864864864865
User 65126 does not improve AUC. Reverting changes.
Training on augumented user 5454 39/50 current_auc = 0.5911196911196911
User 5454 AUC after training: 0.5888030888030888
User 5454 does not improve AUC. Reverting changes.
Training on augumented user 138237 40/50 current_auc = 0.5911196911196911
User 138237 AUC after training: 0.5911196911196911
User 138237 does not improve AUC. Reverting changes.
Training on augumented user 72923 41/50 current_auc = 0.5911196911196911
User 72923 AUC after training: 0.5907335907335907
User 72923 does not improve AUC. Reverting changes.
Training on augumented user 101363 42/50 current_auc = 0.5911196911196911
User 101363 AUC after training: 0.5903474903474903
User 101363 does not improve AUC. Reverting changes.
Training on augumented user 21152 43/50 current_auc = 0.5911196911196911
User 21152 AUC after training: 0.5903474903474905
User 21152 does not improve AUC. Reverting changes.
Training on augumented user 54577 44/50 current_auc = 0.5911196911196911
User 54577 AUC after training: 0.588030888030888
User 54577 does not improve AUC. Reverting changes.
Training on augumented user 117435 45/50 current_auc = 0.5911196911196911
User 117435 AUC after training: 0.5903474903474903
User 117435 does not improve AUC. Reverting changes.
Training on augumented user 67578 46/50 current_auc = 0.5911196911196911
User 67578 AUC after training: 0.5891891891891893
User 67578 does not improve AUC. Reverting changes.
Training on augumented user 105468 47/50 current_auc = 0.5911196911196911
User 105468 AUC after training: 0.5915057915057915
User 105468 improves AUC. Keeping the model.
Training on augumented user 97112 48/50 current_auc = 0.5915057915057915
User 97112 AUC after training: 0.588030888030888
User 97112 does not improve AUC. Reverting changes.
Training on augumented user 6951 49/50 current_auc = 0.5915057915057915
User 6951 AUC after training: 0.591891891891892
User 6951 improves AUC. Keeping the model.
[2024-12-02 18:28:20.556399] start test user 43914 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:21.334870] start test user 43914 93/568 recall augumented users by random, augumented_users = [88832, 76811, 40097, 94282, 117578, 99455, 90633, 69000, 62372, 62365, 135932, 128010, 17601, 127263, 74763, 28228, 93409, 118262, 134497, 121945, 4827, 71944, 61988, 64670, 70400, 38903, 69513, 136935, 10262, 7641, 114668, 109894, 121505, 110365, 135787, 34085, 95350, 26297, 104460, 81650, 133200, 131224, 81817, 40697, 45270, 128406, 130904, 129617, 99563, 107965]
[2024-12-02 18:28:21.350104] user = 43914 Cloud 93/568
[2024-12-02 18:28:21.369816] user = 43914 Local 93/568
[2024-12-02 18:28:21.428691] user = 43914 Local+ 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:24.326448] user = 43914 MPDA- 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7671191553544494
Training on augumented user 88832 0/50 current_auc = 0.7671191553544494
User 88832 AUC after training: 0.7662141779788839
User 88832 does not improve AUC. Reverting changes.
Training on augumented user 76811 1/50 current_auc = 0.7671191553544494
User 76811 AUC after training: 0.7677224736048265
User 76811 improves AUC. Keeping the model.
Training on augumented user 40097 2/50 current_auc = 0.7677224736048265
User 40097 AUC after training: 0.768024132730015
User 40097 improves AUC. Keeping the model.
Training on augumented user 94282 3/50 current_auc = 0.768024132730015
User 94282 AUC after training: 0.768024132730015
User 94282 does not improve AUC. Reverting changes.
Training on augumented user 117578 4/50 current_auc = 0.768024132730015
User 117578 AUC after training: 0.7677224736048266
User 117578 does not improve AUC. Reverting changes.
Training on augumented user 99455 5/50 current_auc = 0.768024132730015
User 99455 AUC after training: 0.7692307692307693
User 99455 improves AUC. Keeping the model.
Training on augumented user 90633 6/50 current_auc = 0.7692307692307693
User 90633 AUC after training: 0.7701357466063348
User 90633 improves AUC. Keeping the model.
Training on augumented user 69000 7/50 current_auc = 0.7701357466063348
User 69000 AUC after training: 0.7710407239819005
User 69000 improves AUC. Keeping the model.
Training on augumented user 62372 8/50 current_auc = 0.7710407239819005
User 62372 AUC after training: 0.770739064856712
User 62372 does not improve AUC. Reverting changes.
Training on augumented user 62365 9/50 current_auc = 0.7710407239819005
User 62365 AUC after training: 0.7704374057315234
User 62365 does not improve AUC. Reverting changes.
Training on augumented user 135932 10/50 current_auc = 0.7710407239819005
User 135932 AUC after training: 0.7728506787330317
User 135932 improves AUC. Keeping the model.
Training on augumented user 128010 11/50 current_auc = 0.7728506787330317
User 128010 AUC after training: 0.7698340874811462
User 128010 does not improve AUC. Reverting changes.
Training on augumented user 17601 12/50 current_auc = 0.7728506787330317
User 17601 AUC after training: 0.7722473604826545
User 17601 does not improve AUC. Reverting changes.
Training on augumented user 127263 13/50 current_auc = 0.7728506787330317
User 127263 AUC after training: 0.7725490196078432
User 127263 does not improve AUC. Reverting changes.
Training on augumented user 74763 14/50 current_auc = 0.7728506787330317
User 74763 AUC after training: 0.7713423831070889
User 74763 does not improve AUC. Reverting changes.
Training on augumented user 28228 15/50 current_auc = 0.7728506787330317
User 28228 AUC after training: 0.7704374057315234
User 28228 does not improve AUC. Reverting changes.
Training on augumented user 93409 16/50 current_auc = 0.7728506787330317
User 93409 AUC after training: 0.7704374057315234
User 93409 does not improve AUC. Reverting changes.
Training on augumented user 118262 17/50 current_auc = 0.7728506787330317
User 118262 AUC after training: 0.7716440422322776
User 118262 does not improve AUC. Reverting changes.
Training on augumented user 134497 18/50 current_auc = 0.7728506787330317
User 134497 AUC after training: 0.7720965309200603
User 134497 does not improve AUC. Reverting changes.
Training on augumented user 121945 19/50 current_auc = 0.7728506787330317
User 121945 AUC after training: 0.7734539969834088
User 121945 improves AUC. Keeping the model.
Training on augumented user 4827 20/50 current_auc = 0.7734539969834088
User 4827 AUC after training: 0.771945701357466
User 4827 does not improve AUC. Reverting changes.
Training on augumented user 71944 21/50 current_auc = 0.7734539969834088
User 71944 AUC after training: 0.7692307692307693
User 71944 does not improve AUC. Reverting changes.
Training on augumented user 61988 22/50 current_auc = 0.7734539969834088
User 61988 AUC after training: 0.7728506787330317
User 61988 does not improve AUC. Reverting changes.
Training on augumented user 64670 23/50 current_auc = 0.7734539969834088
User 64670 AUC after training: 0.771342383107089
User 64670 does not improve AUC. Reverting changes.
Training on augumented user 70400 24/50 current_auc = 0.7734539969834088
User 70400 AUC after training: 0.7731523378582202
User 70400 does not improve AUC. Reverting changes.
Training on augumented user 38903 25/50 current_auc = 0.7734539969834088
User 38903 AUC after training: 0.7731523378582201
User 38903 does not improve AUC. Reverting changes.
Training on augumented user 69513 26/50 current_auc = 0.7734539969834088
User 69513 AUC after training: 0.7737556561085972
User 69513 improves AUC. Keeping the model.
Training on augumented user 136935 27/50 current_auc = 0.7737556561085972
User 136935 AUC after training: 0.7737556561085972
User 136935 does not improve AUC. Reverting changes.
Training on augumented user 10262 28/50 current_auc = 0.7737556561085972
User 10262 AUC after training: 0.7728506787330316
User 10262 does not improve AUC. Reverting changes.
Training on augumented user 7641 29/50 current_auc = 0.7737556561085972
User 7641 AUC after training: 0.7737556561085972
User 7641 does not improve AUC. Reverting changes.
Training on augumented user 114668 30/50 current_auc = 0.7737556561085972
User 114668 AUC after training: 0.7728506787330317
User 114668 does not improve AUC. Reverting changes.
Training on augumented user 109894 31/50 current_auc = 0.7737556561085972
User 109894 AUC after training: 0.7731523378582202
User 109894 does not improve AUC. Reverting changes.
Training on augumented user 121505 32/50 current_auc = 0.7737556561085972
User 121505 AUC after training: 0.7716440422322776
User 121505 does not improve AUC. Reverting changes.
Training on augumented user 110365 33/50 current_auc = 0.7737556561085972
User 110365 AUC after training: 0.7725490196078432
User 110365 does not improve AUC. Reverting changes.
Training on augumented user 135787 34/50 current_auc = 0.7737556561085972
User 135787 AUC after training: 0.7728506787330317
User 135787 does not improve AUC. Reverting changes.
Training on augumented user 34085 35/50 current_auc = 0.7737556561085972
User 34085 AUC after training: 0.7722473604826545
User 34085 does not improve AUC. Reverting changes.
Training on augumented user 95350 36/50 current_auc = 0.7737556561085972
User 95350 AUC after training: 0.7737556561085972
User 95350 does not improve AUC. Reverting changes.
Training on augumented user 26297 37/50 current_auc = 0.7737556561085972
User 26297 AUC after training: 0.7734539969834087
User 26297 does not improve AUC. Reverting changes.
Training on augumented user 104460 38/50 current_auc = 0.7737556561085972
User 104460 AUC after training: 0.7734539969834087
User 104460 does not improve AUC. Reverting changes.
Training on augumented user 81650 39/50 current_auc = 0.7737556561085972
User 81650 AUC after training: 0.7728506787330316
User 81650 does not improve AUC. Reverting changes.
Training on augumented user 133200 40/50 current_auc = 0.7737556561085972
User 133200 AUC after training: 0.7734539969834088
User 133200 does not improve AUC. Reverting changes.
Training on augumented user 131224 41/50 current_auc = 0.7737556561085972
User 131224 AUC after training: 0.7716440422322774
User 131224 does not improve AUC. Reverting changes.
Training on augumented user 81817 42/50 current_auc = 0.7737556561085972
User 81817 AUC after training: 0.7734539969834088
User 81817 does not improve AUC. Reverting changes.
Training on augumented user 40697 43/50 current_auc = 0.7737556561085972
User 40697 AUC after training: 0.7734539969834088
User 40697 does not improve AUC. Reverting changes.
Training on augumented user 45270 44/50 current_auc = 0.7737556561085972
User 45270 AUC after training: 0.7728506787330316
User 45270 does not improve AUC. Reverting changes.
Training on augumented user 128406 45/50 current_auc = 0.7737556561085972
User 128406 AUC after training: 0.7719457013574661
User 128406 does not improve AUC. Reverting changes.
Training on augumented user 130904 46/50 current_auc = 0.7737556561085972
User 130904 AUC after training: 0.7737556561085972
User 130904 does not improve AUC. Reverting changes.
Training on augumented user 129617 47/50 current_auc = 0.7737556561085972
User 129617 AUC after training: 0.7704374057315234
User 129617 does not improve AUC. Reverting changes.
Training on augumented user 99563 48/50 current_auc = 0.7737556561085972
User 99563 AUC after training: 0.7734539969834087
User 99563 does not improve AUC. Reverting changes.
Training on augumented user 107965 49/50 current_auc = 0.7737556561085972
User 107965 AUC after training: 0.7719457013574661
User 107965 does not improve AUC. Reverting changes.
[2024-12-02 18:28:55.796080] start test user 43936 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:56.212032] start test user 43936 94/568 recall augumented users by random, augumented_users = [47315, 21469, 96024, 72267, 101766, 21537, 50189, 61428, 3928, 73283, 26312, 84079, 14107, 132916, 59801, 114709, 96339, 79760, 47514, 20704, 461, 1875, 35702, 106952, 123212, 99320, 62567, 133873, 49588, 116012, 16228, 124182, 82968, 57995, 6923, 128026, 8309, 11961, 19241, 128972, 95760, 5126, 16069, 103667, 102759, 95585, 120236, 80203, 32800, 7635]
[2024-12-02 18:28:56.226320] user = 43936 Cloud 94/568
[2024-12-02 18:28:56.245782] user = 43936 Local 94/568
[2024-12-02 18:28:56.294975] user = 43936 Local+ 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:58.647117] user = 43936 MPDA- 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 47315 0/50 current_auc = 1.0
User 47315 AUC after training: 1.0
User 47315 does not improve AUC. Reverting changes.
Training on augumented user 21469 1/50 current_auc = 1.0
User 21469 AUC after training: 1.0
User 21469 does not improve AUC. Reverting changes.
Training on augumented user 96024 2/50 current_auc = 1.0
User 96024 AUC after training: 1.0
User 96024 does not improve AUC. Reverting changes.
Training on augumented user 72267 3/50 current_auc = 1.0
User 72267 AUC after training: 1.0
User 72267 does not improve AUC. Reverting changes.
Training on augumented user 101766 4/50 current_auc = 1.0
User 101766 AUC after training: 1.0
User 101766 does not improve AUC. Reverting changes.
Training on augumented user 21537 5/50 current_auc = 1.0
User 21537 AUC after training: 1.0
User 21537 does not improve AUC. Reverting changes.
Training on augumented user 50189 6/50 current_auc = 1.0
User 50189 AUC after training: 1.0
User 50189 does not improve AUC. Reverting changes.
Training on augumented user 61428 7/50 current_auc = 1.0
User 61428 AUC after training: 1.0
User 61428 does not improve AUC. Reverting changes.
Training on augumented user 3928 8/50 current_auc = 1.0
User 3928 AUC after training: 1.0
User 3928 does not improve AUC. Reverting changes.
Training on augumented user 73283 9/50 current_auc = 1.0
User 73283 AUC after training: 1.0
User 73283 does not improve AUC. Reverting changes.
Training on augumented user 26312 10/50 current_auc = 1.0
User 26312 AUC after training: 1.0
User 26312 does not improve AUC. Reverting changes.
Training on augumented user 84079 11/50 current_auc = 1.0
User 84079 AUC after training: 1.0
User 84079 does not improve AUC. Reverting changes.
Training on augumented user 14107 12/50 current_auc = 1.0
User 14107 AUC after training: 1.0
User 14107 does not improve AUC. Reverting changes.
Training on augumented user 132916 13/50 current_auc = 1.0
User 132916 AUC after training: 1.0
User 132916 does not improve AUC. Reverting changes.
Training on augumented user 59801 14/50 current_auc = 1.0
User 59801 AUC after training: 1.0
User 59801 does not improve AUC. Reverting changes.
Training on augumented user 114709 15/50 current_auc = 1.0
User 114709 AUC after training: 1.0
User 114709 does not improve AUC. Reverting changes.
Training on augumented user 96339 16/50 current_auc = 1.0
User 96339 AUC after training: 1.0
User 96339 does not improve AUC. Reverting changes.
Training on augumented user 79760 17/50 current_auc = 1.0
User 79760 AUC after training: 1.0
User 79760 does not improve AUC. Reverting changes.
Training on augumented user 47514 18/50 current_auc = 1.0
User 47514 AUC after training: 1.0
User 47514 does not improve AUC. Reverting changes.
Training on augumented user 20704 19/50 current_auc = 1.0
User 20704 AUC after training: 1.0
User 20704 does not improve AUC. Reverting changes.
Training on augumented user 461 20/50 current_auc = 1.0
User 461 AUC after training: 1.0
User 461 does not improve AUC. Reverting changes.
Training on augumented user 1875 21/50 current_auc = 1.0
User 1875 AUC after training: 1.0
User 1875 does not improve AUC. Reverting changes.
Training on augumented user 35702 22/50 current_auc = 1.0
User 35702 AUC after training: 1.0
User 35702 does not improve AUC. Reverting changes.
Training on augumented user 106952 23/50 current_auc = 1.0
User 106952 AUC after training: 1.0
User 106952 does not improve AUC. Reverting changes.
Training on augumented user 123212 24/50 current_auc = 1.0
User 123212 AUC after training: 1.0
User 123212 does not improve AUC. Reverting changes.
Training on augumented user 99320 25/50 current_auc = 1.0
User 99320 AUC after training: 1.0
User 99320 does not improve AUC. Reverting changes.
Training on augumented user 62567 26/50 current_auc = 1.0
User 62567 AUC after training: 1.0
User 62567 does not improve AUC. Reverting changes.
Training on augumented user 133873 27/50 current_auc = 1.0
User 133873 AUC after training: 1.0
User 133873 does not improve AUC. Reverting changes.
Training on augumented user 49588 28/50 current_auc = 1.0
User 49588 AUC after training: 1.0
User 49588 does not improve AUC. Reverting changes.
Training on augumented user 116012 29/50 current_auc = 1.0
User 116012 AUC after training: 1.0
User 116012 does not improve AUC. Reverting changes.
Training on augumented user 16228 30/50 current_auc = 1.0
User 16228 AUC after training: 1.0
User 16228 does not improve AUC. Reverting changes.
Training on augumented user 124182 31/50 current_auc = 1.0
User 124182 AUC after training: 1.0
User 124182 does not improve AUC. Reverting changes.
Training on augumented user 82968 32/50 current_auc = 1.0
User 82968 AUC after training: 1.0
User 82968 does not improve AUC. Reverting changes.
Training on augumented user 57995 33/50 current_auc = 1.0
User 57995 AUC after training: 1.0
User 57995 does not improve AUC. Reverting changes.
Training on augumented user 6923 34/50 current_auc = 1.0
User 6923 AUC after training: 1.0
User 6923 does not improve AUC. Reverting changes.
Training on augumented user 128026 35/50 current_auc = 1.0
User 128026 AUC after training: 1.0
User 128026 does not improve AUC. Reverting changes.
Training on augumented user 8309 36/50 current_auc = 1.0
User 8309 AUC after training: 1.0
User 8309 does not improve AUC. Reverting changes.
Training on augumented user 11961 37/50 current_auc = 1.0
User 11961 AUC after training: 1.0
User 11961 does not improve AUC. Reverting changes.
Training on augumented user 19241 38/50 current_auc = 1.0
User 19241 AUC after training: 1.0
User 19241 does not improve AUC. Reverting changes.
Training on augumented user 128972 39/50 current_auc = 1.0
User 128972 AUC after training: 1.0
User 128972 does not improve AUC. Reverting changes.
Training on augumented user 95760 40/50 current_auc = 1.0
User 95760 AUC after training: 1.0
User 95760 does not improve AUC. Reverting changes.
Training on augumented user 5126 41/50 current_auc = 1.0
User 5126 AUC after training: 1.0
User 5126 does not improve AUC. Reverting changes.
Training on augumented user 16069 42/50 current_auc = 1.0
User 16069 AUC after training: 1.0
User 16069 does not improve AUC. Reverting changes.
Training on augumented user 103667 43/50 current_auc = 1.0
User 103667 AUC after training: 1.0
User 103667 does not improve AUC. Reverting changes.
Training on augumented user 102759 44/50 current_auc = 1.0
User 102759 AUC after training: 1.0
User 102759 does not improve AUC. Reverting changes.
Training on augumented user 95585 45/50 current_auc = 1.0
User 95585 AUC after training: 1.0
User 95585 does not improve AUC. Reverting changes.
Training on augumented user 120236 46/50 current_auc = 1.0
User 120236 AUC after training: 1.0
User 120236 does not improve AUC. Reverting changes.
Training on augumented user 80203 47/50 current_auc = 1.0
User 80203 AUC after training: 1.0
User 80203 does not improve AUC. Reverting changes.
Training on augumented user 32800 48/50 current_auc = 1.0
User 32800 AUC after training: 1.0
User 32800 does not improve AUC. Reverting changes.
Training on augumented user 7635 49/50 current_auc = 1.0
User 7635 AUC after training: 1.0
User 7635 does not improve AUC. Reverting changes.
[2024-12-02 18:29:28.195047] start test user 43940 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:28.598734] start test user 43940 95/568 recall augumented users by random, augumented_users = [93526, 75401, 112262, 31855, 30514, 28800, 73426, 49918, 94987, 91866, 65482, 120496, 123824, 13845, 21209, 19735, 113504, 115257, 81335, 68951, 6153, 14718, 78776, 132911, 38846, 121710, 11524, 11208, 96580, 59520, 107539, 74103, 80264, 88552, 110062, 81708, 121940, 30182, 119595, 23135, 56696, 71379, 101489, 17947, 97297, 67678, 126457, 92843, 116471, 37457]
[2024-12-02 18:29:28.613418] user = 43940 Cloud 95/568
[2024-12-02 18:29:28.623209] user = 43940 Local 95/568
[2024-12-02 18:29:28.667856] user = 43940 Local+ 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:30.093733] user = 43940 MPDA- 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7361111111111112
Training on augumented user 93526 0/50 current_auc = 0.7361111111111112
User 93526 AUC after training: 0.7222222222222222
User 93526 does not improve AUC. Reverting changes.
Training on augumented user 75401 1/50 current_auc = 0.7361111111111112
User 75401 AUC after training: 0.7361111111111112
User 75401 does not improve AUC. Reverting changes.
Training on augumented user 112262 2/50 current_auc = 0.7361111111111112
User 112262 AUC after training: 0.7222222222222222
User 112262 does not improve AUC. Reverting changes.
Training on augumented user 31855 3/50 current_auc = 0.7361111111111112
User 31855 AUC after training: 0.7222222222222222
User 31855 does not improve AUC. Reverting changes.
Training on augumented user 30514 4/50 current_auc = 0.7361111111111112
User 30514 AUC after training: 0.7361111111111112
User 30514 does not improve AUC. Reverting changes.
Training on augumented user 28800 5/50 current_auc = 0.7361111111111112
User 28800 AUC after training: 0.7222222222222222
User 28800 does not improve AUC. Reverting changes.
Training on augumented user 73426 6/50 current_auc = 0.7361111111111112
User 73426 AUC after training: 0.7222222222222222
User 73426 does not improve AUC. Reverting changes.
Training on augumented user 49918 7/50 current_auc = 0.7361111111111112
User 49918 AUC after training: 0.7361111111111112
User 49918 does not improve AUC. Reverting changes.
Training on augumented user 94987 8/50 current_auc = 0.7361111111111112
User 94987 AUC after training: 0.7361111111111112
User 94987 does not improve AUC. Reverting changes.
Training on augumented user 91866 9/50 current_auc = 0.7361111111111112
User 91866 AUC after training: 0.7361111111111112
User 91866 does not improve AUC. Reverting changes.
Training on augumented user 65482 10/50 current_auc = 0.7361111111111112
User 65482 AUC after training: 0.7361111111111112
User 65482 does not improve AUC. Reverting changes.
Training on augumented user 120496 11/50 current_auc = 0.7361111111111112
User 120496 AUC after training: 0.7222222222222222
User 120496 does not improve AUC. Reverting changes.
Training on augumented user 123824 12/50 current_auc = 0.7361111111111112
User 123824 AUC after training: 0.7222222222222222
User 123824 does not improve AUC. Reverting changes.
Training on augumented user 13845 13/50 current_auc = 0.7361111111111112
User 13845 AUC after training: 0.7361111111111112
User 13845 does not improve AUC. Reverting changes.
Training on augumented user 21209 14/50 current_auc = 0.7361111111111112
User 21209 AUC after training: 0.7361111111111112
User 21209 does not improve AUC. Reverting changes.
Training on augumented user 19735 15/50 current_auc = 0.7361111111111112
User 19735 AUC after training: 0.7222222222222222
User 19735 does not improve AUC. Reverting changes.
Training on augumented user 113504 16/50 current_auc = 0.7361111111111112
User 113504 AUC after training: 0.7222222222222222
User 113504 does not improve AUC. Reverting changes.
Training on augumented user 115257 17/50 current_auc = 0.7361111111111112
User 115257 AUC after training: 0.7083333333333334
User 115257 does not improve AUC. Reverting changes.
Training on augumented user 81335 18/50 current_auc = 0.7361111111111112
User 81335 AUC after training: 0.7361111111111112
User 81335 does not improve AUC. Reverting changes.
Training on augumented user 68951 19/50 current_auc = 0.7361111111111112
User 68951 AUC after training: 0.7222222222222222
User 68951 does not improve AUC. Reverting changes.
Training on augumented user 6153 20/50 current_auc = 0.7361111111111112
User 6153 AUC after training: 0.7361111111111112
User 6153 does not improve AUC. Reverting changes.
Training on augumented user 14718 21/50 current_auc = 0.7361111111111112
User 14718 AUC after training: 0.7222222222222222
User 14718 does not improve AUC. Reverting changes.
Training on augumented user 78776 22/50 current_auc = 0.7361111111111112
User 78776 AUC after training: 0.7361111111111112
User 78776 does not improve AUC. Reverting changes.
Training on augumented user 132911 23/50 current_auc = 0.7361111111111112
User 132911 AUC after training: 0.75
User 132911 improves AUC. Keeping the model.
Training on augumented user 38846 24/50 current_auc = 0.75
User 38846 AUC after training: 0.7638888888888888
User 38846 improves AUC. Keeping the model.
Training on augumented user 121710 25/50 current_auc = 0.7638888888888888
User 121710 AUC after training: 0.7638888888888888
User 121710 does not improve AUC. Reverting changes.
Training on augumented user 11524 26/50 current_auc = 0.7638888888888888
User 11524 AUC after training: 0.75
User 11524 does not improve AUC. Reverting changes.
Training on augumented user 11208 27/50 current_auc = 0.7638888888888888
User 11208 AUC after training: 0.7638888888888888
User 11208 does not improve AUC. Reverting changes.
Training on augumented user 96580 28/50 current_auc = 0.7638888888888888
User 96580 AUC after training: 0.7638888888888888
User 96580 does not improve AUC. Reverting changes.
Training on augumented user 59520 29/50 current_auc = 0.7638888888888888
User 59520 AUC after training: 0.75
User 59520 does not improve AUC. Reverting changes.
Training on augumented user 107539 30/50 current_auc = 0.7638888888888888
User 107539 AUC after training: 0.7638888888888888
User 107539 does not improve AUC. Reverting changes.
Training on augumented user 74103 31/50 current_auc = 0.7638888888888888
User 74103 AUC after training: 0.75
User 74103 does not improve AUC. Reverting changes.
Training on augumented user 80264 32/50 current_auc = 0.7638888888888888
User 80264 AUC after training: 0.7638888888888888
User 80264 does not improve AUC. Reverting changes.
Training on augumented user 88552 33/50 current_auc = 0.7638888888888888
User 88552 AUC after training: 0.7638888888888888
User 88552 does not improve AUC. Reverting changes.
Training on augumented user 110062 34/50 current_auc = 0.7638888888888888
User 110062 AUC after training: 0.7638888888888888
User 110062 does not improve AUC. Reverting changes.
Training on augumented user 81708 35/50 current_auc = 0.7638888888888888
User 81708 AUC after training: 0.7638888888888888
User 81708 does not improve AUC. Reverting changes.
Training on augumented user 121940 36/50 current_auc = 0.7638888888888888
User 121940 AUC after training: 0.7638888888888888
User 121940 does not improve AUC. Reverting changes.
Training on augumented user 30182 37/50 current_auc = 0.7638888888888888
User 30182 AUC after training: 0.7638888888888888
User 30182 does not improve AUC. Reverting changes.
Training on augumented user 119595 38/50 current_auc = 0.7638888888888888
User 119595 AUC after training: 0.7638888888888888
User 119595 does not improve AUC. Reverting changes.
Training on augumented user 23135 39/50 current_auc = 0.7638888888888888
User 23135 AUC after training: 0.7638888888888888
User 23135 does not improve AUC. Reverting changes.
Training on augumented user 56696 40/50 current_auc = 0.7638888888888888
User 56696 AUC after training: 0.7638888888888888
User 56696 does not improve AUC. Reverting changes.
Training on augumented user 71379 41/50 current_auc = 0.7638888888888888
User 71379 AUC after training: 0.7638888888888888
User 71379 does not improve AUC. Reverting changes.
Training on augumented user 101489 42/50 current_auc = 0.7638888888888888
User 101489 AUC after training: 0.7638888888888888
User 101489 does not improve AUC. Reverting changes.
Training on augumented user 17947 43/50 current_auc = 0.7638888888888888
User 17947 AUC after training: 0.7638888888888888
User 17947 does not improve AUC. Reverting changes.
Training on augumented user 97297 44/50 current_auc = 0.7638888888888888
User 97297 AUC after training: 0.75
User 97297 does not improve AUC. Reverting changes.
Training on augumented user 67678 45/50 current_auc = 0.7638888888888888
User 67678 AUC after training: 0.7638888888888888
User 67678 does not improve AUC. Reverting changes.
Training on augumented user 126457 46/50 current_auc = 0.7638888888888888
User 126457 AUC after training: 0.7638888888888888
User 126457 does not improve AUC. Reverting changes.
Training on augumented user 92843 47/50 current_auc = 0.7638888888888888
User 92843 AUC after training: 0.75
User 92843 does not improve AUC. Reverting changes.
Training on augumented user 116471 48/50 current_auc = 0.7638888888888888
User 116471 AUC after training: 0.75
User 116471 does not improve AUC. Reverting changes.
Training on augumented user 37457 49/50 current_auc = 0.7638888888888888
User 37457 AUC after training: 0.7638888888888888
User 37457 does not improve AUC. Reverting changes.
[2024-12-02 18:30:00.004769] start test user 43945 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:00.488524] start test user 43945 96/568 recall augumented users by random, augumented_users = [82292, 121792, 73528, 117707, 115881, 106179, 102634, 113224, 127141, 46131, 4828, 109013, 45418, 113800, 89150, 18985, 78975, 46586, 20673, 76414, 133894, 10339, 15212, 133777, 40524, 50708, 124181, 65394, 96411, 78879, 62738, 21120, 107343, 127082, 15060, 6681, 10142, 57992, 49730, 116320, 94668, 126296, 49238, 48731, 108151, 126302, 75884, 96052, 57749, 54773]
[2024-12-02 18:30:00.511325] user = 43945 Cloud 96/568
[2024-12-02 18:30:00.543854] user = 43945 Local 96/568
[2024-12-02 18:30:00.880276] user = 43945 Local+ 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:03.328601] user = 43945 MPDA- 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8279255319148936
Training on augumented user 82292 0/50 current_auc = 0.8279255319148936
User 82292 AUC after training: 0.8279698581560284
User 82292 improves AUC. Keeping the model.
Training on augumented user 121792 1/50 current_auc = 0.8279698581560284
User 121792 AUC after training: 0.8278812056737589
User 121792 does not improve AUC. Reverting changes.
Training on augumented user 73528 2/50 current_auc = 0.8279698581560284
User 73528 AUC after training: 0.8278812056737588
User 73528 does not improve AUC. Reverting changes.
Training on augumented user 117707 3/50 current_auc = 0.8279698581560284
User 117707 AUC after training: 0.8279255319148936
User 117707 does not improve AUC. Reverting changes.
Training on augumented user 115881 4/50 current_auc = 0.8279698581560284
User 115881 AUC after training: 0.8275265957446808
User 115881 does not improve AUC. Reverting changes.
Training on augumented user 106179 5/50 current_auc = 0.8279698581560284
User 106179 AUC after training: 0.8276152482269504
User 106179 does not improve AUC. Reverting changes.
Training on augumented user 102634 6/50 current_auc = 0.8279698581560284
User 102634 AUC after training: 0.8277039007092198
User 102634 does not improve AUC. Reverting changes.
Training on augumented user 113224 7/50 current_auc = 0.8279698581560284
User 113224 AUC after training: 0.8280585106382978
User 113224 improves AUC. Keeping the model.
Training on augumented user 127141 8/50 current_auc = 0.8280585106382978
User 127141 AUC after training: 0.8270833333333333
User 127141 does not improve AUC. Reverting changes.
Training on augumented user 46131 9/50 current_auc = 0.8280585106382978
User 46131 AUC after training: 0.8278812056737589
User 46131 does not improve AUC. Reverting changes.
Training on augumented user 4828 10/50 current_auc = 0.8280585106382978
User 4828 AUC after training: 0.8280141843971631
User 4828 does not improve AUC. Reverting changes.
Training on augumented user 109013 11/50 current_auc = 0.8280585106382978
User 109013 AUC after training: 0.8272606382978723
User 109013 does not improve AUC. Reverting changes.
Training on augumented user 45418 12/50 current_auc = 0.8280585106382978
User 45418 AUC after training: 0.8274601063829786
User 45418 does not improve AUC. Reverting changes.
Training on augumented user 113800 13/50 current_auc = 0.8280585106382978
User 113800 AUC after training: 0.8277482269503547
User 113800 does not improve AUC. Reverting changes.
Training on augumented user 89150 14/50 current_auc = 0.8280585106382978
User 89150 AUC after training: 0.8277925531914895
User 89150 does not improve AUC. Reverting changes.
Training on augumented user 18985 15/50 current_auc = 0.8280585106382978
User 18985 AUC after training: 0.8277039007092198
User 18985 does not improve AUC. Reverting changes.
Training on augumented user 78975 16/50 current_auc = 0.8280585106382978
User 78975 AUC after training: 0.827593085106383
User 78975 does not improve AUC. Reverting changes.
Training on augumented user 46586 17/50 current_auc = 0.8280585106382978
User 46586 AUC after training: 0.8279698581560283
User 46586 does not improve AUC. Reverting changes.
Training on augumented user 20673 18/50 current_auc = 0.8280585106382978
User 20673 AUC after training: 0.8281471631205672
User 20673 improves AUC. Keeping the model.
Training on augumented user 76414 19/50 current_auc = 0.8281471631205672
User 76414 AUC after training: 0.8278368794326242
User 76414 does not improve AUC. Reverting changes.
Training on augumented user 133894 20/50 current_auc = 0.8281471631205672
User 133894 AUC after training: 0.8273492907801419
User 133894 does not improve AUC. Reverting changes.
Training on augumented user 10339 21/50 current_auc = 0.8281471631205672
User 10339 AUC after training: 0.8276152482269503
User 10339 does not improve AUC. Reverting changes.
Training on augumented user 15212 22/50 current_auc = 0.8281471631205672
User 15212 AUC after training: 0.8278812056737589
User 15212 does not improve AUC. Reverting changes.
Training on augumented user 133777 23/50 current_auc = 0.8281471631205672
User 133777 AUC after training: 0.8276595744680851
User 133777 does not improve AUC. Reverting changes.
Training on augumented user 40524 24/50 current_auc = 0.8281471631205672
User 40524 AUC after training: 0.8279698581560284
User 40524 does not improve AUC. Reverting changes.
Training on augumented user 50708 25/50 current_auc = 0.8281471631205672
User 50708 AUC after training: 0.8275487588652483
User 50708 does not improve AUC. Reverting changes.
Training on augumented user 124181 26/50 current_auc = 0.8281471631205672
User 124181 AUC after training: 0.8276817375886524
User 124181 does not improve AUC. Reverting changes.
Training on augumented user 65394 27/50 current_auc = 0.8281471631205672
User 65394 AUC after training: 0.8283687943262411
User 65394 improves AUC. Keeping the model.
Training on augumented user 96411 28/50 current_auc = 0.8283687943262411
User 96411 AUC after training: 0.8277039007092198
User 96411 does not improve AUC. Reverting changes.
Training on augumented user 78879 29/50 current_auc = 0.8283687943262411
User 78879 AUC after training: 0.8281028368794326
User 78879 does not improve AUC. Reverting changes.
Training on augumented user 62738 30/50 current_auc = 0.8283687943262411
User 62738 AUC after training: 0.8280585106382978
User 62738 does not improve AUC. Reverting changes.
Training on augumented user 21120 31/50 current_auc = 0.8283687943262411
User 21120 AUC after training: 0.8280363475177305
User 21120 does not improve AUC. Reverting changes.
Training on augumented user 107343 32/50 current_auc = 0.8283687943262411
User 107343 AUC after training: 0.8279698581560284
User 107343 does not improve AUC. Reverting changes.
Training on augumented user 127082 33/50 current_auc = 0.8283687943262411
User 127082 AUC after training: 0.8279033687943262
User 127082 does not improve AUC. Reverting changes.
Training on augumented user 15060 34/50 current_auc = 0.8283687943262411
User 15060 AUC after training: 0.8282358156028369
User 15060 does not improve AUC. Reverting changes.
Training on augumented user 6681 35/50 current_auc = 0.8283687943262411
User 6681 AUC after training: 0.8279698581560284
User 6681 does not improve AUC. Reverting changes.
Training on augumented user 10142 36/50 current_auc = 0.8283687943262411
User 10142 AUC after training: 0.8276595744680851
User 10142 does not improve AUC. Reverting changes.
Training on augumented user 57992 37/50 current_auc = 0.8283687943262411
User 57992 AUC after training: 0.8280141843971631
User 57992 does not improve AUC. Reverting changes.
Training on augumented user 49730 38/50 current_auc = 0.8283687943262411
User 49730 AUC after training: 0.8283244680851064
User 49730 does not improve AUC. Reverting changes.
Training on augumented user 116320 39/50 current_auc = 0.8283687943262411
User 116320 AUC after training: 0.8283466312056739
User 116320 does not improve AUC. Reverting changes.
Training on augumented user 94668 40/50 current_auc = 0.8283687943262411
User 94668 AUC after training: 0.8277482269503547
User 94668 does not improve AUC. Reverting changes.
Training on augumented user 126296 41/50 current_auc = 0.8283687943262411
User 126296 AUC after training: 0.8281028368794326
User 126296 does not improve AUC. Reverting changes.
Training on augumented user 49238 42/50 current_auc = 0.8283687943262411
User 49238 AUC after training: 0.8282136524822695
User 49238 does not improve AUC. Reverting changes.
Training on augumented user 48731 43/50 current_auc = 0.8283687943262411
User 48731 AUC after training: 0.8281914893617021
User 48731 does not improve AUC. Reverting changes.
Training on augumented user 108151 44/50 current_auc = 0.8283687943262411
User 108151 AUC after training: 0.8286125886524823
User 108151 improves AUC. Keeping the model.
Training on augumented user 126302 45/50 current_auc = 0.8286125886524823
User 126302 AUC after training: 0.828235815602837
User 126302 does not improve AUC. Reverting changes.
Training on augumented user 75884 46/50 current_auc = 0.8286125886524823
User 75884 AUC after training: 0.828014184397163
User 75884 does not improve AUC. Reverting changes.
Training on augumented user 96052 47/50 current_auc = 0.8286125886524823
User 96052 AUC after training: 0.8275709219858156
User 96052 does not improve AUC. Reverting changes.
Training on augumented user 57749 48/50 current_auc = 0.8286125886524823
User 57749 AUC after training: 0.8285682624113476
User 57749 does not improve AUC. Reverting changes.
Training on augumented user 54773 49/50 current_auc = 0.8286125886524823
User 54773 AUC after training: 0.8280806737588652
User 54773 does not improve AUC. Reverting changes.
[2024-12-02 18:30:33.961262] start test user 43952 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:34.698297] start test user 43952 97/568 recall augumented users by random, augumented_users = [119751, 104938, 84070, 78583, 121827, 108356, 15471, 42327, 114727, 36898, 129737, 123943, 89183, 3964, 23735, 53786, 5679, 69010, 20775, 4118, 96158, 123232, 3993, 38034, 35469, 23909, 57805, 28022, 105330, 37572, 114353, 33551, 104053, 48995, 116183, 108723, 87467, 15360, 64594, 72280, 24086, 101247, 123163, 26940, 45796, 15127, 132587, 49228, 60715, 49959]
[2024-12-02 18:30:34.725887] user = 43952 Cloud 97/568
[2024-12-02 18:30:34.742734] user = 43952 Local 97/568
[2024-12-02 18:30:34.779605] user = 43952 Local+ 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:37.108012] user = 43952 MPDA- 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8478260869565217
Training on augumented user 119751 0/50 current_auc = 0.8478260869565217
User 119751 AUC after training: 0.8478260869565217
User 119751 does not improve AUC. Reverting changes.
Training on augumented user 104938 1/50 current_auc = 0.8478260869565217
User 104938 AUC after training: 0.8478260869565217
User 104938 does not improve AUC. Reverting changes.
Training on augumented user 84070 2/50 current_auc = 0.8478260869565217
User 84070 AUC after training: 0.8478260869565217
User 84070 does not improve AUC. Reverting changes.
Training on augumented user 78583 3/50 current_auc = 0.8478260869565217
User 78583 AUC after training: 0.8478260869565217
User 78583 does not improve AUC. Reverting changes.
Training on augumented user 121827 4/50 current_auc = 0.8478260869565217
User 121827 AUC after training: 0.8478260869565217
User 121827 does not improve AUC. Reverting changes.
Training on augumented user 108356 5/50 current_auc = 0.8478260869565217
User 108356 AUC after training: 0.8478260869565217
User 108356 does not improve AUC. Reverting changes.
Training on augumented user 15471 6/50 current_auc = 0.8478260869565217
User 15471 AUC after training: 0.8478260869565217
User 15471 does not improve AUC. Reverting changes.
Training on augumented user 42327 7/50 current_auc = 0.8478260869565217
User 42327 AUC after training: 0.8478260869565217
User 42327 does not improve AUC. Reverting changes.
Training on augumented user 114727 8/50 current_auc = 0.8478260869565217
User 114727 AUC after training: 0.8478260869565217
User 114727 does not improve AUC. Reverting changes.
Training on augumented user 36898 9/50 current_auc = 0.8478260869565217
User 36898 AUC after training: 0.855072463768116
User 36898 improves AUC. Keeping the model.
Training on augumented user 129737 10/50 current_auc = 0.855072463768116
User 129737 AUC after training: 0.8478260869565217
User 129737 does not improve AUC. Reverting changes.
Training on augumented user 123943 11/50 current_auc = 0.855072463768116
User 123943 AUC after training: 0.855072463768116
User 123943 does not improve AUC. Reverting changes.
Training on augumented user 89183 12/50 current_auc = 0.855072463768116
User 89183 AUC after training: 0.8478260869565217
User 89183 does not improve AUC. Reverting changes.
Training on augumented user 3964 13/50 current_auc = 0.855072463768116
User 3964 AUC after training: 0.855072463768116
User 3964 does not improve AUC. Reverting changes.
Training on augumented user 23735 14/50 current_auc = 0.855072463768116
User 23735 AUC after training: 0.8478260869565217
User 23735 does not improve AUC. Reverting changes.
Training on augumented user 53786 15/50 current_auc = 0.855072463768116
User 53786 AUC after training: 0.855072463768116
User 53786 does not improve AUC. Reverting changes.
Training on augumented user 5679 16/50 current_auc = 0.855072463768116
User 5679 AUC after training: 0.855072463768116
User 5679 does not improve AUC. Reverting changes.
Training on augumented user 69010 17/50 current_auc = 0.855072463768116
User 69010 AUC after training: 0.855072463768116
User 69010 does not improve AUC. Reverting changes.
Training on augumented user 20775 18/50 current_auc = 0.855072463768116
User 20775 AUC after training: 0.8478260869565217
User 20775 does not improve AUC. Reverting changes.
Training on augumented user 4118 19/50 current_auc = 0.855072463768116
User 4118 AUC after training: 0.855072463768116
User 4118 does not improve AUC. Reverting changes.
Training on augumented user 96158 20/50 current_auc = 0.855072463768116
User 96158 AUC after training: 0.8478260869565217
User 96158 does not improve AUC. Reverting changes.
Training on augumented user 123232 21/50 current_auc = 0.855072463768116
User 123232 AUC after training: 0.855072463768116
User 123232 does not improve AUC. Reverting changes.
Training on augumented user 3993 22/50 current_auc = 0.855072463768116
User 3993 AUC after training: 0.855072463768116
User 3993 does not improve AUC. Reverting changes.
Training on augumented user 38034 23/50 current_auc = 0.855072463768116
User 38034 AUC after training: 0.855072463768116
User 38034 does not improve AUC. Reverting changes.
Training on augumented user 35469 24/50 current_auc = 0.855072463768116
User 35469 AUC after training: 0.8478260869565217
User 35469 does not improve AUC. Reverting changes.
Training on augumented user 23909 25/50 current_auc = 0.855072463768116
User 23909 AUC after training: 0.855072463768116
User 23909 does not improve AUC. Reverting changes.
Training on augumented user 57805 26/50 current_auc = 0.855072463768116
User 57805 AUC after training: 0.855072463768116
User 57805 does not improve AUC. Reverting changes.
Training on augumented user 28022 27/50 current_auc = 0.855072463768116
User 28022 AUC after training: 0.855072463768116
User 28022 does not improve AUC. Reverting changes.
Training on augumented user 105330 28/50 current_auc = 0.855072463768116
User 105330 AUC after training: 0.8478260869565217
User 105330 does not improve AUC. Reverting changes.
Training on augumented user 37572 29/50 current_auc = 0.855072463768116
User 37572 AUC after training: 0.855072463768116
User 37572 does not improve AUC. Reverting changes.
Training on augumented user 114353 30/50 current_auc = 0.855072463768116
User 114353 AUC after training: 0.855072463768116
User 114353 does not improve AUC. Reverting changes.
Training on augumented user 33551 31/50 current_auc = 0.855072463768116
User 33551 AUC after training: 0.8478260869565217
User 33551 does not improve AUC. Reverting changes.
Training on augumented user 104053 32/50 current_auc = 0.855072463768116
User 104053 AUC after training: 0.855072463768116
User 104053 does not improve AUC. Reverting changes.
Training on augumented user 48995 33/50 current_auc = 0.855072463768116
User 48995 AUC after training: 0.8478260869565217
User 48995 does not improve AUC. Reverting changes.
Training on augumented user 116183 34/50 current_auc = 0.855072463768116
User 116183 AUC after training: 0.855072463768116
User 116183 does not improve AUC. Reverting changes.
Training on augumented user 108723 35/50 current_auc = 0.855072463768116
User 108723 AUC after training: 0.855072463768116
User 108723 does not improve AUC. Reverting changes.
Training on augumented user 87467 36/50 current_auc = 0.855072463768116
User 87467 AUC after training: 0.8478260869565217
User 87467 does not improve AUC. Reverting changes.
Training on augumented user 15360 37/50 current_auc = 0.855072463768116
User 15360 AUC after training: 0.8478260869565217
User 15360 does not improve AUC. Reverting changes.
Training on augumented user 64594 38/50 current_auc = 0.855072463768116
User 64594 AUC after training: 0.8478260869565217
User 64594 does not improve AUC. Reverting changes.
Training on augumented user 72280 39/50 current_auc = 0.855072463768116
User 72280 AUC after training: 0.8478260869565217
User 72280 does not improve AUC. Reverting changes.
Training on augumented user 24086 40/50 current_auc = 0.855072463768116
User 24086 AUC after training: 0.8478260869565217
User 24086 does not improve AUC. Reverting changes.
Training on augumented user 101247 41/50 current_auc = 0.855072463768116
User 101247 AUC after training: 0.855072463768116
User 101247 does not improve AUC. Reverting changes.
Training on augumented user 123163 42/50 current_auc = 0.855072463768116
User 123163 AUC after training: 0.8478260869565217
User 123163 does not improve AUC. Reverting changes.
Training on augumented user 26940 43/50 current_auc = 0.855072463768116
User 26940 AUC after training: 0.8478260869565217
User 26940 does not improve AUC. Reverting changes.
Training on augumented user 45796 44/50 current_auc = 0.855072463768116
User 45796 AUC after training: 0.855072463768116
User 45796 does not improve AUC. Reverting changes.
Training on augumented user 15127 45/50 current_auc = 0.855072463768116
User 15127 AUC after training: 0.855072463768116
User 15127 does not improve AUC. Reverting changes.
Training on augumented user 132587 46/50 current_auc = 0.855072463768116
User 132587 AUC after training: 0.8478260869565217
User 132587 does not improve AUC. Reverting changes.
Training on augumented user 49228 47/50 current_auc = 0.855072463768116
User 49228 AUC after training: 0.855072463768116
User 49228 does not improve AUC. Reverting changes.
Training on augumented user 60715 48/50 current_auc = 0.855072463768116
User 60715 AUC after training: 0.8478260869565217
User 60715 does not improve AUC. Reverting changes.
Training on augumented user 49959 49/50 current_auc = 0.855072463768116
User 49959 AUC after training: 0.855072463768116
User 49959 does not improve AUC. Reverting changes.
[2024-12-02 18:31:10.623633] start test user 44060 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:11.360447] start test user 44060 98/568 recall augumented users by random, augumented_users = [34372, 104719, 46626, 120603, 26601, 16815, 81867, 120296, 79207, 6985, 38142, 90511, 102514, 120863, 135831, 30071, 37986, 40701, 26903, 4432, 84703, 137130, 98951, 57381, 123098, 14200, 121059, 105846, 25028, 35144, 18003, 125017, 49574, 92406, 125074, 14112, 22100, 91252, 22400, 60676, 98844, 97821, 15883, 58947, 7265, 57791, 68761, 129928, 76627, 28342]
[2024-12-02 18:31:11.376546] user = 44060 Cloud 98/568
[2024-12-02 18:31:11.409613] user = 44060 Local 98/568
[2024-12-02 18:31:11.607695] user = 44060 Local+ 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:14.221493] user = 44060 MPDA- 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5910591274397244
Training on augumented user 34372 0/50 current_auc = 0.5910591274397244
User 34372 AUC after training: 0.590556831228473
User 34372 does not improve AUC. Reverting changes.
Training on augumented user 104719 1/50 current_auc = 0.5910591274397244
User 104719 AUC after training: 0.5912743972445464
User 104719 improves AUC. Keeping the model.
Training on augumented user 46626 2/50 current_auc = 0.5912743972445464
User 46626 AUC after training: 0.590449196326062
User 46626 does not improve AUC. Reverting changes.
Training on augumented user 120603 3/50 current_auc = 0.5912743972445464
User 120603 AUC after training: 0.5912743972445464
User 120603 does not improve AUC. Reverting changes.
Training on augumented user 26601 4/50 current_auc = 0.5912743972445464
User 26601 AUC after training: 0.5911667623421355
User 26601 does not improve AUC. Reverting changes.
Training on augumented user 16815 5/50 current_auc = 0.5912743972445464
User 16815 AUC after training: 0.5907362227324914
User 16815 does not improve AUC. Reverting changes.
Training on augumented user 81867 6/50 current_auc = 0.5912743972445464
User 81867 AUC after training: 0.5908079793340988
User 81867 does not improve AUC. Reverting changes.
Training on augumented user 120296 7/50 current_auc = 0.5912743972445464
User 120296 AUC after training: 0.5912385189437428
User 120296 does not improve AUC. Reverting changes.
Training on augumented user 79207 8/50 current_auc = 0.5912743972445464
User 79207 AUC after training: 0.5913102755453501
User 79207 improves AUC. Keeping the model.
Training on augumented user 6985 9/50 current_auc = 0.5913102755453501
User 6985 AUC after training: 0.5912385189437428
User 6985 does not improve AUC. Reverting changes.
Training on augumented user 38142 10/50 current_auc = 0.5913102755453501
User 38142 AUC after training: 0.5914896670493686
User 38142 improves AUC. Keeping the model.
Training on augumented user 90511 11/50 current_auc = 0.5914896670493686
User 90511 AUC after training: 0.5913461538461537
User 90511 does not improve AUC. Reverting changes.
Training on augumented user 102514 12/50 current_auc = 0.5914896670493686
User 102514 AUC after training: 0.5903774397244546
User 102514 does not improve AUC. Reverting changes.
Training on augumented user 120863 13/50 current_auc = 0.5914896670493686
User 120863 AUC after training: 0.5913820321469576
User 120863 does not improve AUC. Reverting changes.
Training on augumented user 135831 14/50 current_auc = 0.5914896670493686
User 135831 AUC after training: 0.5931759471871412
User 135831 improves AUC. Keeping the model.
Training on augumented user 30071 15/50 current_auc = 0.5931759471871412
User 30071 AUC after training: 0.5932118254879449
User 30071 improves AUC. Keeping the model.
Training on augumented user 37986 16/50 current_auc = 0.5932118254879449
User 37986 AUC after training: 0.5935885476463835
User 37986 improves AUC. Keeping the model.
Training on augumented user 40701 17/50 current_auc = 0.5935885476463835
User 40701 AUC after training: 0.5934988518943742
User 40701 does not improve AUC. Reverting changes.
Training on augumented user 26903 18/50 current_auc = 0.5935885476463835
User 26903 AUC after training: 0.5928889207807118
User 26903 does not improve AUC. Reverting changes.
Training on augumented user 4432 19/50 current_auc = 0.5935885476463835
User 4432 AUC after training: 0.5928889207807119
User 4432 does not improve AUC. Reverting changes.
Training on augumented user 84703 20/50 current_auc = 0.5935885476463835
User 84703 AUC after training: 0.5932477037887485
User 84703 does not improve AUC. Reverting changes.
Training on augumented user 137130 21/50 current_auc = 0.5935885476463835
User 137130 AUC after training: 0.59375
User 137130 improves AUC. Keeping the model.
Training on augumented user 98951 22/50 current_auc = 0.59375
User 98951 AUC after training: 0.5937141216991964
User 98951 does not improve AUC. Reverting changes.
Training on augumented user 57381 23/50 current_auc = 0.59375
User 57381 AUC after training: 0.5937858783008036
User 57381 improves AUC. Keeping the model.
Training on augumented user 123098 24/50 current_auc = 0.5937858783008036
User 123098 AUC after training: 0.5936782433983926
User 123098 does not improve AUC. Reverting changes.
Training on augumented user 14200 25/50 current_auc = 0.5937858783008036
User 14200 AUC after training: 0.5941446613088404
User 14200 improves AUC. Keeping the model.
Training on augumented user 121059 26/50 current_auc = 0.5941446613088404
User 121059 AUC after training: 0.5940729047072331
User 121059 does not improve AUC. Reverting changes.
Training on augumented user 105846 27/50 current_auc = 0.5941446613088404
User 105846 AUC after training: 0.5940011481056258
User 105846 does not improve AUC. Reverting changes.
Training on augumented user 25028 28/50 current_auc = 0.5941446613088404
User 25028 AUC after training: 0.5940011481056258
User 25028 does not improve AUC. Reverting changes.
Training on augumented user 35144 29/50 current_auc = 0.5941446613088404
User 35144 AUC after training: 0.5940370264064294
User 35144 does not improve AUC. Reverting changes.
Training on augumented user 18003 30/50 current_auc = 0.5941446613088404
User 18003 AUC after training: 0.5944675660160734
User 18003 improves AUC. Keeping the model.
Training on augumented user 125017 31/50 current_auc = 0.5944675660160734
User 125017 AUC after training: 0.5945034443168771
User 125017 improves AUC. Keeping the model.
Training on augumented user 49574 32/50 current_auc = 0.5945034443168771
User 49574 AUC after training: 0.5942164179104478
User 49574 does not improve AUC. Reverting changes.
Training on augumented user 92406 33/50 current_auc = 0.5945034443168771
User 92406 AUC after training: 0.5942522962112515
User 92406 does not improve AUC. Reverting changes.
Training on augumented user 125074 34/50 current_auc = 0.5945034443168771
User 125074 AUC after training: 0.5944675660160734
User 125074 does not improve AUC. Reverting changes.
Training on augumented user 14112 35/50 current_auc = 0.5945034443168771
User 14112 AUC after training: 0.594180539609644
User 14112 does not improve AUC. Reverting changes.
Training on augumented user 22100 36/50 current_auc = 0.5945034443168771
User 22100 AUC after training: 0.5947545924225028
User 22100 improves AUC. Keeping the model.
Training on augumented user 91252 37/50 current_auc = 0.5947545924225028
User 91252 AUC after training: 0.5943240528128587
User 91252 does not improve AUC. Reverting changes.
Training on augumented user 22400 38/50 current_auc = 0.5947545924225028
User 22400 AUC after training: 0.5945752009184845
User 22400 does not improve AUC. Reverting changes.
Training on augumented user 60676 39/50 current_auc = 0.5947545924225028
User 60676 AUC after training: 0.5945752009184845
User 60676 does not improve AUC. Reverting changes.
Training on augumented user 98844 40/50 current_auc = 0.5947545924225028
User 98844 AUC after training: 0.5950416188289323
User 98844 improves AUC. Keeping the model.
Training on augumented user 97821 41/50 current_auc = 0.5950416188289323
User 97821 AUC after training: 0.5947904707233065
User 97821 does not improve AUC. Reverting changes.
Training on augumented user 15883 42/50 current_auc = 0.5950416188289323
User 15883 AUC after training: 0.5945752009184844
User 15883 does not improve AUC. Reverting changes.
Training on augumented user 58947 43/50 current_auc = 0.5950416188289323
User 58947 AUC after training: 0.5942522962112515
User 58947 does not improve AUC. Reverting changes.
Training on augumented user 7265 44/50 current_auc = 0.5950416188289323
User 7265 AUC after training: 0.5948622273249139
User 7265 does not improve AUC. Reverting changes.
Training on augumented user 57791 45/50 current_auc = 0.5950416188289323
User 57791 AUC after training: 0.5941446613088404
User 57791 does not improve AUC. Reverting changes.
Training on augumented user 68761 46/50 current_auc = 0.5950416188289323
User 68761 AUC after training: 0.5940011481056258
User 68761 does not improve AUC. Reverting changes.
Training on augumented user 129928 47/50 current_auc = 0.5950416188289323
User 129928 AUC after training: 0.5944675660160735
User 129928 does not improve AUC. Reverting changes.
Training on augumented user 76627 48/50 current_auc = 0.5950416188289323
User 76627 AUC after training: 0.5939293915040182
User 76627 does not improve AUC. Reverting changes.
Training on augumented user 28342 49/50 current_auc = 0.5950416188289323
User 28342 AUC after training: 0.5945034443168771
User 28342 does not improve AUC. Reverting changes.
[2024-12-02 18:31:45.116680] start test user 44096 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:45.903120] start test user 44096 99/568 recall augumented users by random, augumented_users = [80422, 111784, 88544, 116040, 97837, 5695, 72638, 97654, 115710, 80039, 37455, 49064, 95806, 29423, 61908, 35327, 59890, 52539, 108978, 78560, 98388, 130377, 76219, 132625, 41402, 86771, 35398, 56714, 88244, 77946, 62647, 135370, 47343, 65204, 11283, 87431, 24129, 7713, 80540, 135559, 29629, 5925, 109048, 55181, 119025, 126199, 73140, 81629, 103040, 114001]
[2024-12-02 18:31:45.931882] user = 44096 Cloud 99/568
[2024-12-02 18:31:45.947451] user = 44096 Local 99/568
[2024-12-02 18:31:45.987738] user = 44096 Local+ 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:48.561957] user = 44096 MPDA- 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7130604288499026
Training on augumented user 80422 0/50 current_auc = 0.7130604288499026
User 80422 AUC after training: 0.7134502923976608
User 80422 improves AUC. Keeping the model.
Training on augumented user 111784 1/50 current_auc = 0.7134502923976608
User 111784 AUC after training: 0.7130604288499026
User 111784 does not improve AUC. Reverting changes.
Training on augumented user 88544 2/50 current_auc = 0.7134502923976608
User 88544 AUC after training: 0.7130604288499026
User 88544 does not improve AUC. Reverting changes.
Training on augumented user 116040 3/50 current_auc = 0.7134502923976608
User 116040 AUC after training: 0.7126705653021442
User 116040 does not improve AUC. Reverting changes.
Training on augumented user 97837 4/50 current_auc = 0.7134502923976608
User 97837 AUC after training: 0.7134502923976608
User 97837 does not improve AUC. Reverting changes.
Training on augumented user 5695 5/50 current_auc = 0.7134502923976608
User 5695 AUC after training: 0.71364522417154
User 5695 improves AUC. Keeping the model.
Training on augumented user 72638 6/50 current_auc = 0.71364522417154
User 72638 AUC after training: 0.7138401559454192
User 72638 improves AUC. Keeping the model.
Training on augumented user 97654 7/50 current_auc = 0.7138401559454192
User 97654 AUC after training: 0.7120857699805069
User 97654 does not improve AUC. Reverting changes.
Training on augumented user 115710 8/50 current_auc = 0.7138401559454192
User 115710 AUC after training: 0.712280701754386
User 115710 does not improve AUC. Reverting changes.
Training on augumented user 80039 9/50 current_auc = 0.7138401559454192
User 80039 AUC after training: 0.712280701754386
User 80039 does not improve AUC. Reverting changes.
Training on augumented user 37455 10/50 current_auc = 0.7138401559454192
User 37455 AUC after training: 0.7134502923976608
User 37455 does not improve AUC. Reverting changes.
Training on augumented user 49064 11/50 current_auc = 0.7138401559454192
User 49064 AUC after training: 0.7142300194931774
User 49064 improves AUC. Keeping the model.
Training on augumented user 95806 12/50 current_auc = 0.7142300194931774
User 95806 AUC after training: 0.7142300194931774
User 95806 does not improve AUC. Reverting changes.
Training on augumented user 29423 13/50 current_auc = 0.7142300194931774
User 29423 AUC after training: 0.7132553606237817
User 29423 does not improve AUC. Reverting changes.
Training on augumented user 61908 14/50 current_auc = 0.7142300194931774
User 61908 AUC after training: 0.7138401559454192
User 61908 does not improve AUC. Reverting changes.
Training on augumented user 35327 15/50 current_auc = 0.7142300194931774
User 35327 AUC after training: 0.7142300194931774
User 35327 does not improve AUC. Reverting changes.
Training on augumented user 59890 16/50 current_auc = 0.7142300194931774
User 59890 AUC after training: 0.7132553606237817
User 59890 does not improve AUC. Reverting changes.
Training on augumented user 52539 17/50 current_auc = 0.7142300194931774
User 52539 AUC after training: 0.7128654970760234
User 52539 does not improve AUC. Reverting changes.
Training on augumented user 108978 18/50 current_auc = 0.7142300194931774
User 108978 AUC after training: 0.71364522417154
User 108978 does not improve AUC. Reverting changes.
Training on augumented user 78560 19/50 current_auc = 0.7142300194931774
User 78560 AUC after training: 0.7118908382066277
User 78560 does not improve AUC. Reverting changes.
Training on augumented user 98388 20/50 current_auc = 0.7142300194931774
User 98388 AUC after training: 0.7122807017543861
User 98388 does not improve AUC. Reverting changes.
Training on augumented user 130377 21/50 current_auc = 0.7142300194931774
User 130377 AUC after training: 0.7126705653021443
User 130377 does not improve AUC. Reverting changes.
Training on augumented user 76219 22/50 current_auc = 0.7142300194931774
User 76219 AUC after training: 0.7138401559454192
User 76219 does not improve AUC. Reverting changes.
Training on augumented user 132625 23/50 current_auc = 0.7142300194931774
User 132625 AUC after training: 0.713840155945419
User 132625 does not improve AUC. Reverting changes.
Training on augumented user 41402 24/50 current_auc = 0.7142300194931774
User 41402 AUC after training: 0.7130604288499026
User 41402 does not improve AUC. Reverting changes.
Training on augumented user 86771 25/50 current_auc = 0.7142300194931774
User 86771 AUC after training: 0.7134502923976609
User 86771 does not improve AUC. Reverting changes.
Training on augumented user 35398 26/50 current_auc = 0.7142300194931774
User 35398 AUC after training: 0.7126705653021443
User 35398 does not improve AUC. Reverting changes.
Training on augumented user 56714 27/50 current_auc = 0.7142300194931774
User 56714 AUC after training: 0.7126705653021443
User 56714 does not improve AUC. Reverting changes.
Training on augumented user 88244 28/50 current_auc = 0.7142300194931774
User 88244 AUC after training: 0.7130604288499026
User 88244 does not improve AUC. Reverting changes.
Training on augumented user 77946 29/50 current_auc = 0.7142300194931774
User 77946 AUC after training: 0.7138401559454192
User 77946 does not improve AUC. Reverting changes.
Training on augumented user 62647 30/50 current_auc = 0.7142300194931774
User 62647 AUC after training: 0.712280701754386
User 62647 does not improve AUC. Reverting changes.
Training on augumented user 135370 31/50 current_auc = 0.7142300194931774
User 135370 AUC after training: 0.711111111111111
User 135370 does not improve AUC. Reverting changes.
Training on augumented user 47343 32/50 current_auc = 0.7142300194931774
User 47343 AUC after training: 0.7146198830409357
User 47343 improves AUC. Keeping the model.
Training on augumented user 65204 33/50 current_auc = 0.7146198830409357
User 65204 AUC after training: 0.7122807017543861
User 65204 does not improve AUC. Reverting changes.
Training on augumented user 11283 34/50 current_auc = 0.7146198830409357
User 11283 AUC after training: 0.715009746588694
User 11283 improves AUC. Keeping the model.
Training on augumented user 87431 35/50 current_auc = 0.715009746588694
User 87431 AUC after training: 0.7140350877192982
User 87431 does not improve AUC. Reverting changes.
Training on augumented user 24129 36/50 current_auc = 0.715009746588694
User 24129 AUC after training: 0.7134502923976609
User 24129 does not improve AUC. Reverting changes.
Training on augumented user 7713 37/50 current_auc = 0.715009746588694
User 7713 AUC after training: 0.7153996101364521
User 7713 improves AUC. Keeping the model.
Training on augumented user 80540 38/50 current_auc = 0.7153996101364521
User 80540 AUC after training: 0.7153996101364521
User 80540 does not improve AUC. Reverting changes.
Training on augumented user 135559 39/50 current_auc = 0.7153996101364521
User 135559 AUC after training: 0.7153996101364521
User 135559 does not improve AUC. Reverting changes.
Training on augumented user 29629 40/50 current_auc = 0.7153996101364521
User 29629 AUC after training: 0.713840155945419
User 29629 does not improve AUC. Reverting changes.
Training on augumented user 5925 41/50 current_auc = 0.7153996101364521
User 5925 AUC after training: 0.715009746588694
User 5925 does not improve AUC. Reverting changes.
Training on augumented user 109048 42/50 current_auc = 0.7153996101364521
User 109048 AUC after training: 0.7153996101364521
User 109048 does not improve AUC. Reverting changes.
Training on augumented user 55181 43/50 current_auc = 0.7153996101364521
User 55181 AUC after training: 0.713840155945419
User 55181 does not improve AUC. Reverting changes.
Training on augumented user 119025 44/50 current_auc = 0.7153996101364521
User 119025 AUC after training: 0.7153996101364521
User 119025 does not improve AUC. Reverting changes.
Training on augumented user 126199 45/50 current_auc = 0.7153996101364521
User 126199 AUC after training: 0.7153996101364521
User 126199 does not improve AUC. Reverting changes.
Training on augumented user 73140 46/50 current_auc = 0.7153996101364521
User 73140 AUC after training: 0.7122807017543861
User 73140 does not improve AUC. Reverting changes.
Training on augumented user 81629 47/50 current_auc = 0.7153996101364521
User 81629 AUC after training: 0.7157894736842105
User 81629 improves AUC. Keeping the model.
Training on augumented user 103040 48/50 current_auc = 0.7157894736842105
User 103040 AUC after training: 0.7157894736842105
User 103040 does not improve AUC. Reverting changes.
Training on augumented user 114001 49/50 current_auc = 0.7157894736842105
User 114001 AUC after training: 0.7153996101364523
User 114001 does not improve AUC. Reverting changes.
[2024-12-02 18:32:18.864401] start test user 44112 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:19.291461] start test user 44112 100/568 recall augumented users by random, augumented_users = [106257, 98103, 66168, 136549, 51743, 38178, 44806, 4621, 31065, 119271, 43718, 130498, 7676, 22796, 52563, 43410, 133485, 126488, 98226, 34455, 71681, 115852, 3023, 10525, 133050, 92495, 61367, 33623, 77556, 40222, 86871, 84107, 52930, 111235, 105039, 116338, 50160, 133254, 93773, 100609, 58664, 65479, 133500, 94719, 47763, 106356, 137991, 118745, 86510, 70102]
[2024-12-02 18:32:19.305924] user = 44112 Cloud 100/568
[2024-12-02 18:32:19.317010] user = 44112 Local 100/568
[2024-12-02 18:32:19.343067] user = 44112 Local+ 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:22.367371] user = 44112 MPDA- 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6038461538461539
Training on augumented user 106257 0/50 current_auc = 0.6038461538461539
User 106257 AUC after training: 0.6038461538461539
User 106257 does not improve AUC. Reverting changes.
Training on augumented user 98103 1/50 current_auc = 0.6038461538461539
User 98103 AUC after training: 0.6038461538461539
User 98103 does not improve AUC. Reverting changes.
Training on augumented user 66168 2/50 current_auc = 0.6038461538461539
User 66168 AUC after training: 0.6076923076923078
User 66168 improves AUC. Keeping the model.
Training on augumented user 136549 3/50 current_auc = 0.6076923076923078
User 136549 AUC after training: 0.6038461538461539
User 136549 does not improve AUC. Reverting changes.
Training on augumented user 51743 4/50 current_auc = 0.6076923076923078
User 51743 AUC after training: 0.6038461538461539
User 51743 does not improve AUC. Reverting changes.
Training on augumented user 38178 5/50 current_auc = 0.6076923076923078
User 38178 AUC after training: 0.6076923076923078
User 38178 does not improve AUC. Reverting changes.
Training on augumented user 44806 6/50 current_auc = 0.6076923076923078
User 44806 AUC after training: 0.6076923076923078
User 44806 does not improve AUC. Reverting changes.
Training on augumented user 4621 7/50 current_auc = 0.6076923076923078
User 4621 AUC after training: 0.6038461538461539
User 4621 does not improve AUC. Reverting changes.
Training on augumented user 31065 8/50 current_auc = 0.6076923076923078
User 31065 AUC after training: 0.6038461538461539
User 31065 does not improve AUC. Reverting changes.
Training on augumented user 119271 9/50 current_auc = 0.6076923076923078
User 119271 AUC after training: 0.6076923076923078
User 119271 does not improve AUC. Reverting changes.
Training on augumented user 43718 10/50 current_auc = 0.6076923076923078
User 43718 AUC after training: 0.6076923076923078
User 43718 does not improve AUC. Reverting changes.
Training on augumented user 130498 11/50 current_auc = 0.6076923076923078
User 130498 AUC after training: 0.6076923076923078
User 130498 does not improve AUC. Reverting changes.
Training on augumented user 7676 12/50 current_auc = 0.6076923076923078
User 7676 AUC after training: 0.6076923076923078
User 7676 does not improve AUC. Reverting changes.
Training on augumented user 22796 13/50 current_auc = 0.6076923076923078
User 22796 AUC after training: 0.6038461538461539
User 22796 does not improve AUC. Reverting changes.
Training on augumented user 52563 14/50 current_auc = 0.6076923076923078
User 52563 AUC after training: 0.6076923076923078
User 52563 does not improve AUC. Reverting changes.
Training on augumented user 43410 15/50 current_auc = 0.6076923076923078
User 43410 AUC after training: 0.6076923076923078
User 43410 does not improve AUC. Reverting changes.
Training on augumented user 133485 16/50 current_auc = 0.6076923076923078
User 133485 AUC after training: 0.6076923076923078
User 133485 does not improve AUC. Reverting changes.
Training on augumented user 126488 17/50 current_auc = 0.6076923076923078
User 126488 AUC after training: 0.6
User 126488 does not improve AUC. Reverting changes.
Training on augumented user 98226 18/50 current_auc = 0.6076923076923078
User 98226 AUC after training: 0.6076923076923078
User 98226 does not improve AUC. Reverting changes.
Training on augumented user 34455 19/50 current_auc = 0.6076923076923078
User 34455 AUC after training: 0.6076923076923078
User 34455 does not improve AUC. Reverting changes.
Training on augumented user 71681 20/50 current_auc = 0.6076923076923078
User 71681 AUC after training: 0.6076923076923078
User 71681 does not improve AUC. Reverting changes.
Training on augumented user 115852 21/50 current_auc = 0.6076923076923078
User 115852 AUC after training: 0.6038461538461539
User 115852 does not improve AUC. Reverting changes.
Training on augumented user 3023 22/50 current_auc = 0.6076923076923078
User 3023 AUC after training: 0.6076923076923078
User 3023 does not improve AUC. Reverting changes.
Training on augumented user 10525 23/50 current_auc = 0.6076923076923078
User 10525 AUC after training: 0.6076923076923078
User 10525 does not improve AUC. Reverting changes.
Training on augumented user 133050 24/50 current_auc = 0.6076923076923078
User 133050 AUC after training: 0.6076923076923078
User 133050 does not improve AUC. Reverting changes.
Training on augumented user 92495 25/50 current_auc = 0.6076923076923078
User 92495 AUC after training: 0.6076923076923078
User 92495 does not improve AUC. Reverting changes.
Training on augumented user 61367 26/50 current_auc = 0.6076923076923078
User 61367 AUC after training: 0.6076923076923078
User 61367 does not improve AUC. Reverting changes.
Training on augumented user 33623 27/50 current_auc = 0.6076923076923078
User 33623 AUC after training: 0.6076923076923078
User 33623 does not improve AUC. Reverting changes.
Training on augumented user 77556 28/50 current_auc = 0.6076923076923078
User 77556 AUC after training: 0.6038461538461539
User 77556 does not improve AUC. Reverting changes.
Training on augumented user 40222 29/50 current_auc = 0.6076923076923078
User 40222 AUC after training: 0.6076923076923078
User 40222 does not improve AUC. Reverting changes.
Training on augumented user 86871 30/50 current_auc = 0.6076923076923078
User 86871 AUC after training: 0.6038461538461539
User 86871 does not improve AUC. Reverting changes.
Training on augumented user 84107 31/50 current_auc = 0.6076923076923078
User 84107 AUC after training: 0.6076923076923078
User 84107 does not improve AUC. Reverting changes.
Training on augumented user 52930 32/50 current_auc = 0.6076923076923078
User 52930 AUC after training: 0.6115384615384616
User 52930 improves AUC. Keeping the model.
Training on augumented user 111235 33/50 current_auc = 0.6115384615384616
User 111235 AUC after training: 0.6153846153846154
User 111235 improves AUC. Keeping the model.
Training on augumented user 105039 34/50 current_auc = 0.6153846153846154
User 105039 AUC after training: 0.6153846153846154
User 105039 does not improve AUC. Reverting changes.
Training on augumented user 116338 35/50 current_auc = 0.6153846153846154
User 116338 AUC after training: 0.6153846153846154
User 116338 does not improve AUC. Reverting changes.
Training on augumented user 50160 36/50 current_auc = 0.6153846153846154
User 50160 AUC after training: 0.6076923076923078
User 50160 does not improve AUC. Reverting changes.
Training on augumented user 133254 37/50 current_auc = 0.6153846153846154
User 133254 AUC after training: 0.6115384615384616
User 133254 does not improve AUC. Reverting changes.
Training on augumented user 93773 38/50 current_auc = 0.6153846153846154
User 93773 AUC after training: 0.6076923076923078
User 93773 does not improve AUC. Reverting changes.
Training on augumented user 100609 39/50 current_auc = 0.6153846153846154
User 100609 AUC after training: 0.6153846153846154
User 100609 does not improve AUC. Reverting changes.
Training on augumented user 58664 40/50 current_auc = 0.6153846153846154
User 58664 AUC after training: 0.6115384615384616
User 58664 does not improve AUC. Reverting changes.
Training on augumented user 65479 41/50 current_auc = 0.6153846153846154
User 65479 AUC after training: 0.6115384615384616
User 65479 does not improve AUC. Reverting changes.
Training on augumented user 133500 42/50 current_auc = 0.6153846153846154
User 133500 AUC after training: 0.6153846153846154
User 133500 does not improve AUC. Reverting changes.
Training on augumented user 94719 43/50 current_auc = 0.6153846153846154
User 94719 AUC after training: 0.6153846153846154
User 94719 does not improve AUC. Reverting changes.
Training on augumented user 47763 44/50 current_auc = 0.6153846153846154
User 47763 AUC after training: 0.6153846153846154
User 47763 does not improve AUC. Reverting changes.
Training on augumented user 106356 45/50 current_auc = 0.6153846153846154
User 106356 AUC after training: 0.6115384615384616
User 106356 does not improve AUC. Reverting changes.
Training on augumented user 137991 46/50 current_auc = 0.6153846153846154
User 137991 AUC after training: 0.6115384615384616
User 137991 does not improve AUC. Reverting changes.
Training on augumented user 118745 47/50 current_auc = 0.6153846153846154
User 118745 AUC after training: 0.6153846153846154
User 118745 does not improve AUC. Reverting changes.
Training on augumented user 86510 48/50 current_auc = 0.6153846153846154
User 86510 AUC after training: 0.6153846153846154
User 86510 does not improve AUC. Reverting changes.
Training on augumented user 70102 49/50 current_auc = 0.6153846153846154
User 70102 AUC after training: 0.6153846153846154
User 70102 does not improve AUC. Reverting changes.
[2024-12-02 18:32:53.107662] start test user 44113 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:53.699375] start test user 44113 101/568 recall augumented users by random, augumented_users = [138077, 138454, 44243, 1259, 24611, 116895, 118619, 100317, 9492, 129338, 22356, 35474, 10173, 31591, 131884, 86169, 100899, 63664, 24347, 19801, 87507, 120218, 120874, 20582, 12339, 79175, 12418, 13985, 97772, 98376, 117543, 104643, 19279, 129572, 59215, 87084, 84050, 29695, 89629, 133995, 63375, 92016, 14443, 90593, 100924, 126197, 108899, 38279, 29764, 99231]
[2024-12-02 18:32:53.716611] user = 44113 Cloud 101/568
[2024-12-02 18:32:53.728468] user = 44113 Local 101/568
[2024-12-02 18:32:53.813518] user = 44113 Local+ 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:56.023924] user = 44113 MPDA- 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8085106382978723
Training on augumented user 138077 0/50 current_auc = 0.8085106382978723
User 138077 AUC after training: 0.8085106382978723
User 138077 does not improve AUC. Reverting changes.
Training on augumented user 138454 1/50 current_auc = 0.8085106382978723
User 138454 AUC after training: 0.8085106382978723
User 138454 does not improve AUC. Reverting changes.
Training on augumented user 44243 2/50 current_auc = 0.8085106382978723
User 44243 AUC after training: 0.8085106382978723
User 44243 does not improve AUC. Reverting changes.
Training on augumented user 1259 3/50 current_auc = 0.8085106382978723
User 1259 AUC after training: 0.8085106382978723
User 1259 does not improve AUC. Reverting changes.
Training on augumented user 24611 4/50 current_auc = 0.8085106382978723
User 24611 AUC after training: 0.7872340425531915
User 24611 does not improve AUC. Reverting changes.
Training on augumented user 116895 5/50 current_auc = 0.8085106382978723
User 116895 AUC after training: 0.8085106382978723
User 116895 does not improve AUC. Reverting changes.
Training on augumented user 118619 6/50 current_auc = 0.8085106382978723
User 118619 AUC after training: 0.7872340425531915
User 118619 does not improve AUC. Reverting changes.
Training on augumented user 100317 7/50 current_auc = 0.8085106382978723
User 100317 AUC after training: 0.8085106382978723
User 100317 does not improve AUC. Reverting changes.
Training on augumented user 9492 8/50 current_auc = 0.8085106382978723
User 9492 AUC after training: 0.8085106382978723
User 9492 does not improve AUC. Reverting changes.
Training on augumented user 129338 9/50 current_auc = 0.8085106382978723
User 129338 AUC after training: 0.8085106382978723
User 129338 does not improve AUC. Reverting changes.
Training on augumented user 22356 10/50 current_auc = 0.8085106382978723
User 22356 AUC after training: 0.8085106382978723
User 22356 does not improve AUC. Reverting changes.
Training on augumented user 35474 11/50 current_auc = 0.8085106382978723
User 35474 AUC after training: 0.8085106382978723
User 35474 does not improve AUC. Reverting changes.
Training on augumented user 10173 12/50 current_auc = 0.8085106382978723
User 10173 AUC after training: 0.8085106382978723
User 10173 does not improve AUC. Reverting changes.
Training on augumented user 31591 13/50 current_auc = 0.8085106382978723
User 31591 AUC after training: 0.8085106382978723
User 31591 does not improve AUC. Reverting changes.
Training on augumented user 131884 14/50 current_auc = 0.8085106382978723
User 131884 AUC after training: 0.7872340425531915
User 131884 does not improve AUC. Reverting changes.
Training on augumented user 86169 15/50 current_auc = 0.8085106382978723
User 86169 AUC after training: 0.8085106382978723
User 86169 does not improve AUC. Reverting changes.
Training on augumented user 100899 16/50 current_auc = 0.8085106382978723
User 100899 AUC after training: 0.8085106382978723
User 100899 does not improve AUC. Reverting changes.
Training on augumented user 63664 17/50 current_auc = 0.8085106382978723
User 63664 AUC after training: 0.8085106382978723
User 63664 does not improve AUC. Reverting changes.
Training on augumented user 24347 18/50 current_auc = 0.8085106382978723
User 24347 AUC after training: 0.7872340425531915
User 24347 does not improve AUC. Reverting changes.
Training on augumented user 19801 19/50 current_auc = 0.8085106382978723
User 19801 AUC after training: 0.8085106382978723
User 19801 does not improve AUC. Reverting changes.
Training on augumented user 87507 20/50 current_auc = 0.8085106382978723
User 87507 AUC after training: 0.8085106382978723
User 87507 does not improve AUC. Reverting changes.
Training on augumented user 120218 21/50 current_auc = 0.8085106382978723
User 120218 AUC after training: 0.8085106382978723
User 120218 does not improve AUC. Reverting changes.
Training on augumented user 120874 22/50 current_auc = 0.8085106382978723
User 120874 AUC after training: 0.8085106382978723
User 120874 does not improve AUC. Reverting changes.
Training on augumented user 20582 23/50 current_auc = 0.8085106382978723
User 20582 AUC after training: 0.8085106382978723
User 20582 does not improve AUC. Reverting changes.
Training on augumented user 12339 24/50 current_auc = 0.8085106382978723
User 12339 AUC after training: 0.8085106382978723
User 12339 does not improve AUC. Reverting changes.
Training on augumented user 79175 25/50 current_auc = 0.8085106382978723
User 79175 AUC after training: 0.8085106382978723
User 79175 does not improve AUC. Reverting changes.
Training on augumented user 12418 26/50 current_auc = 0.8085106382978723
User 12418 AUC after training: 0.8085106382978723
User 12418 does not improve AUC. Reverting changes.
Training on augumented user 13985 27/50 current_auc = 0.8085106382978723
User 13985 AUC after training: 0.8085106382978723
User 13985 does not improve AUC. Reverting changes.
Training on augumented user 97772 28/50 current_auc = 0.8085106382978723
User 97772 AUC after training: 0.8085106382978723
User 97772 does not improve AUC. Reverting changes.
Training on augumented user 98376 29/50 current_auc = 0.8085106382978723
User 98376 AUC after training: 0.8085106382978723
User 98376 does not improve AUC. Reverting changes.
Training on augumented user 117543 30/50 current_auc = 0.8085106382978723
User 117543 AUC after training: 0.8085106382978723
User 117543 does not improve AUC. Reverting changes.
Training on augumented user 104643 31/50 current_auc = 0.8085106382978723
User 104643 AUC after training: 0.8085106382978723
User 104643 does not improve AUC. Reverting changes.
Training on augumented user 19279 32/50 current_auc = 0.8085106382978723
User 19279 AUC after training: 0.7872340425531915
User 19279 does not improve AUC. Reverting changes.
Training on augumented user 129572 33/50 current_auc = 0.8085106382978723
User 129572 AUC after training: 0.8085106382978723
User 129572 does not improve AUC. Reverting changes.
Training on augumented user 59215 34/50 current_auc = 0.8085106382978723
User 59215 AUC after training: 0.8085106382978723
User 59215 does not improve AUC. Reverting changes.
Training on augumented user 87084 35/50 current_auc = 0.8085106382978723
User 87084 AUC after training: 0.8085106382978723
User 87084 does not improve AUC. Reverting changes.
Training on augumented user 84050 36/50 current_auc = 0.8085106382978723
User 84050 AUC after training: 0.7872340425531915
User 84050 does not improve AUC. Reverting changes.
Training on augumented user 29695 37/50 current_auc = 0.8085106382978723
User 29695 AUC after training: 0.8085106382978723
User 29695 does not improve AUC. Reverting changes.
Training on augumented user 89629 38/50 current_auc = 0.8085106382978723
User 89629 AUC after training: 0.8085106382978723
User 89629 does not improve AUC. Reverting changes.
Training on augumented user 133995 39/50 current_auc = 0.8085106382978723
User 133995 AUC after training: 0.8085106382978723
User 133995 does not improve AUC. Reverting changes.
Training on augumented user 63375 40/50 current_auc = 0.8085106382978723
User 63375 AUC after training: 0.8085106382978723
User 63375 does not improve AUC. Reverting changes.
Training on augumented user 92016 41/50 current_auc = 0.8085106382978723
User 92016 AUC after training: 0.7872340425531915
User 92016 does not improve AUC. Reverting changes.
Training on augumented user 14443 42/50 current_auc = 0.8085106382978723
User 14443 AUC after training: 0.8085106382978723
User 14443 does not improve AUC. Reverting changes.
Training on augumented user 90593 43/50 current_auc = 0.8085106382978723
User 90593 AUC after training: 0.8085106382978723
User 90593 does not improve AUC. Reverting changes.
Training on augumented user 100924 44/50 current_auc = 0.8085106382978723
User 100924 AUC after training: 0.8085106382978723
User 100924 does not improve AUC. Reverting changes.
Training on augumented user 126197 45/50 current_auc = 0.8085106382978723
User 126197 AUC after training: 0.8085106382978723
User 126197 does not improve AUC. Reverting changes.
Training on augumented user 108899 46/50 current_auc = 0.8085106382978723
User 108899 AUC after training: 0.8085106382978723
User 108899 does not improve AUC. Reverting changes.
Training on augumented user 38279 47/50 current_auc = 0.8085106382978723
User 38279 AUC after training: 0.8085106382978723
User 38279 does not improve AUC. Reverting changes.
Training on augumented user 29764 48/50 current_auc = 0.8085106382978723
User 29764 AUC after training: 0.8085106382978723
User 29764 does not improve AUC. Reverting changes.
Training on augumented user 99231 49/50 current_auc = 0.8085106382978723
User 99231 AUC after training: 0.8085106382978723
User 99231 does not improve AUC. Reverting changes.
[2024-12-02 18:33:24.477865] start test user 44172 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:24.879343] start test user 44172 102/568 recall augumented users by random, augumented_users = [136492, 87172, 11354, 85062, 44345, 68986, 87357, 27029, 19552, 53458, 103580, 60623, 18545, 50334, 136882, 9235, 20100, 3211, 124021, 77065, 23179, 84558, 137000, 18213, 119874, 55060, 36760, 82200, 67478, 89506, 41256, 97824, 100259, 11793, 96897, 20001, 64583, 128498, 75016, 65618, 34247, 76113, 123611, 115488, 35404, 25158, 54305, 27314, 6945, 76400]
[2024-12-02 18:33:24.894992] user = 44172 Cloud 102/568
[2024-12-02 18:33:24.941326] user = 44172 Local 102/568
[2024-12-02 18:33:25.005892] user = 44172 Local+ 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:26.553522] user = 44172 MPDA- 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4936907648225699
Training on augumented user 136492 0/50 current_auc = 0.4936907648225699
User 136492 AUC after training: 0.4936632135772537
User 136492 does not improve AUC. Reverting changes.
Training on augumented user 87172 1/50 current_auc = 0.4936907648225699
User 87172 AUC after training: 0.4937458673132026
User 87172 improves AUC. Keeping the model.
Training on augumented user 11354 2/50 current_auc = 0.4937458673132026
User 11354 AUC after training: 0.49377341855851886
User 11354 improves AUC. Keeping the model.
Training on augumented user 85062 3/50 current_auc = 0.49377341855851886
User 85062 AUC after training: 0.494269340974212
User 85062 improves AUC. Keeping the model.
Training on augumented user 44345 4/50 current_auc = 0.494269340974212
User 44345 AUC after training: 0.4942968922195283
User 44345 improves AUC. Keeping the model.
Training on augumented user 68986 5/50 current_auc = 0.4942968922195283
User 68986 AUC after training: 0.49471016089927267
User 68986 improves AUC. Keeping the model.
Training on augumented user 87357 6/50 current_auc = 0.49471016089927267
User 87357 AUC after training: 0.49421423848357937
User 87357 does not improve AUC. Reverting changes.
Training on augumented user 27029 7/50 current_auc = 0.49471016089927267
User 27029 AUC after training: 0.4946826096539564
User 27029 does not improve AUC. Reverting changes.
Training on augumented user 19552 8/50 current_auc = 0.49471016089927267
User 19552 AUC after training: 0.4949030196164867
User 19552 improves AUC. Keeping the model.
Training on augumented user 53458 9/50 current_auc = 0.4949030196164867
User 53458 AUC after training: 0.4946550584086401
User 53458 does not improve AUC. Reverting changes.
Training on augumented user 103580 10/50 current_auc = 0.4949030196164867
User 103580 AUC after training: 0.49490301961648664
User 103580 does not improve AUC. Reverting changes.
Training on augumented user 60623 11/50 current_auc = 0.4949030196164867
User 60623 AUC after training: 0.494847917125854
User 60623 does not improve AUC. Reverting changes.
Training on augumented user 18545 12/50 current_auc = 0.4949030196164867
User 18545 AUC after training: 0.4946550584086401
User 18545 does not improve AUC. Reverting changes.
Training on augumented user 50334 13/50 current_auc = 0.4949030196164867
User 50334 AUC after training: 0.4952060833149658
User 50334 improves AUC. Keeping the model.
Training on augumented user 136882 14/50 current_auc = 0.4952060833149658
User 136882 AUC after training: 0.49561935199471013
User 136882 improves AUC. Keeping the model.
Training on augumented user 9235 15/50 current_auc = 0.49561935199471013
User 9235 AUC after training: 0.49515098082433323
User 9235 does not improve AUC. Reverting changes.
Training on augumented user 20100 16/50 current_auc = 0.49561935199471013
User 20100 AUC after training: 0.49484791712585413
User 20100 does not improve AUC. Reverting changes.
Training on augumented user 3211 17/50 current_auc = 0.49561935199471013
User 3211 AUC after training: 0.49506832708838444
User 3211 does not improve AUC. Reverting changes.
Training on augumented user 124021 18/50 current_auc = 0.49561935199471013
User 124021 AUC after training: 0.495509147013445
User 124021 does not improve AUC. Reverting changes.
Training on augumented user 77065 19/50 current_auc = 0.49561935199471013
User 77065 AUC after training: 0.4957571082212916
User 77065 improves AUC. Keeping the model.
Training on augumented user 23179 20/50 current_auc = 0.4957571082212916
User 23179 AUC after training: 0.49614282565571965
User 23179 improves AUC. Keeping the model.
Training on augumented user 84558 21/50 current_auc = 0.49614282565571965
User 84558 AUC after training: 0.49592241569318934
User 84558 does not improve AUC. Reverting changes.
Training on augumented user 137000 22/50 current_auc = 0.49614282565571965
User 137000 AUC after training: 0.4964183381088826
User 137000 improves AUC. Keeping the model.
Training on augumented user 18213 23/50 current_auc = 0.4964183381088826
User 18213 AUC after training: 0.4962254793916685
User 18213 does not improve AUC. Reverting changes.
Training on augumented user 119874 24/50 current_auc = 0.4964183381088826
User 119874 AUC after training: 0.49630813312761735
User 119874 does not improve AUC. Reverting changes.
Training on augumented user 55060 25/50 current_auc = 0.4964183381088826
User 55060 AUC after training: 0.4955642495040776
User 55060 does not improve AUC. Reverting changes.
Training on augumented user 36760 26/50 current_auc = 0.4964183381088826
User 36760 AUC after training: 0.4959775181838219
User 36760 does not improve AUC. Reverting changes.
Training on augumented user 82200 27/50 current_auc = 0.4964183381088826
User 82200 AUC after training: 0.4957571082212916
User 82200 does not improve AUC. Reverting changes.
Training on augumented user 67478 28/50 current_auc = 0.4964183381088826
User 67478 AUC after training: 0.4958673132025567
User 67478 does not improve AUC. Reverting changes.
Training on augumented user 89506 29/50 current_auc = 0.4964183381088826
User 89506 AUC after training: 0.4965009918448313
User 89506 improves AUC. Keeping the model.
Training on augumented user 41256 30/50 current_auc = 0.4965009918448313
User 41256 AUC after training: 0.49691426052457566
User 41256 improves AUC. Keeping the model.
Training on augumented user 97824 31/50 current_auc = 0.49691426052457566
User 97824 AUC after training: 0.49614282565571965
User 97824 does not improve AUC. Reverting changes.
Training on augumented user 100259 32/50 current_auc = 0.49691426052457566
User 100259 AUC after training: 0.4964458893541988
User 100259 does not improve AUC. Reverting changes.
Training on augumented user 11793 33/50 current_auc = 0.49691426052457566
User 11793 AUC after training: 0.49694181176989205
User 11793 improves AUC. Keeping the model.
Training on augumented user 96897 34/50 current_auc = 0.49694181176989205
User 96897 AUC after training: 0.4968040555433106
User 96897 does not improve AUC. Reverting changes.
Training on augumented user 20001 35/50 current_auc = 0.49694181176989205
User 20001 AUC after training: 0.49685915803394315
User 20001 does not improve AUC. Reverting changes.
Training on augumented user 64583 36/50 current_auc = 0.49694181176989205
User 64583 AUC after training: 0.49652854309014766
User 64583 does not improve AUC. Reverting changes.
Training on augumented user 128498 37/50 current_auc = 0.49694181176989205
User 128498 AUC after training: 0.49636323561824996
User 128498 does not improve AUC. Reverting changes.
Training on augumented user 75016 38/50 current_auc = 0.49694181176989205
User 75016 AUC after training: 0.4967214018073617
User 75016 does not improve AUC. Reverting changes.
Training on augumented user 65618 39/50 current_auc = 0.49694181176989205
User 65618 AUC after training: 0.49691426052457566
User 65618 does not improve AUC. Reverting changes.
Training on augumented user 34247 40/50 current_auc = 0.49694181176989205
User 34247 AUC after training: 0.4959499669385057
User 34247 does not improve AUC. Reverting changes.
Training on augumented user 76113 41/50 current_auc = 0.49694181176989205
User 76113 AUC after training: 0.4967214018073617
User 76113 does not improve AUC. Reverting changes.
Training on augumented user 123611 42/50 current_auc = 0.49694181176989205
User 123611 AUC after training: 0.4965009918448314
User 123611 does not improve AUC. Reverting changes.
Training on augumented user 115488 43/50 current_auc = 0.49694181176989205
User 115488 AUC after training: 0.49658364558078016
User 115488 does not improve AUC. Reverting changes.
Training on augumented user 35404 44/50 current_auc = 0.49694181176989205
User 35404 AUC after training: 0.4965009918448314
User 35404 does not improve AUC. Reverting changes.
Training on augumented user 25158 45/50 current_auc = 0.49694181176989205
User 25158 AUC after training: 0.49702446550584084
User 25158 improves AUC. Keeping the model.
Training on augumented user 54305 46/50 current_auc = 0.49702446550584084
User 54305 AUC after training: 0.49617037690103594
User 54305 does not improve AUC. Reverting changes.
Training on augumented user 27314 47/50 current_auc = 0.49702446550584084
User 27314 AUC after training: 0.49721732422305487
User 27314 improves AUC. Keeping the model.
Training on augumented user 6945 48/50 current_auc = 0.49721732422305487
User 6945 AUC after training: 0.4964183381088825
User 6945 does not improve AUC. Reverting changes.
Training on augumented user 76400 49/50 current_auc = 0.49721732422305487
User 76400 AUC after training: 0.49696936301520833
User 76400 does not improve AUC. Reverting changes.
[2024-12-02 18:33:57.276469] start test user 44205 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:57.765828] start test user 44205 103/568 recall augumented users by random, augumented_users = [79818, 60616, 24931, 73167, 38353, 42781, 90362, 78793, 86673, 92858, 131001, 111736, 9420, 74719, 62240, 36019, 6035, 61223, 80922, 89124, 73357, 25115, 51867, 104324, 135863, 87317, 65499, 78853, 87478, 14713, 126328, 95565, 59842, 23778, 63513, 94641, 73586, 43483, 61139, 49256, 54962, 82616, 54493, 77743, 40479, 47495, 112639, 26626, 128802, 136499]
[2024-12-02 18:33:57.781894] user = 44205 Cloud 103/568
[2024-12-02 18:33:57.803438] user = 44205 Local 103/568
[2024-12-02 18:33:57.885734] user = 44205 Local+ 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:00.735530] user = 44205 MPDA- 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6200633383010432
Training on augumented user 79818 0/50 current_auc = 0.6200633383010432
User 79818 AUC after training: 0.6205290611028316
User 79818 improves AUC. Keeping the model.
Training on augumented user 60616 1/50 current_auc = 0.6205290611028316
User 60616 AUC after training: 0.6201564828614009
User 60616 does not improve AUC. Reverting changes.
Training on augumented user 24931 2/50 current_auc = 0.6205290611028316
User 24931 AUC after training: 0.6207153502235468
User 24931 improves AUC. Keeping the model.
Training on augumented user 73167 3/50 current_auc = 0.6207153502235468
User 73167 AUC after training: 0.620715350223547
User 73167 improves AUC. Keeping the model.
Training on augumented user 38353 4/50 current_auc = 0.620715350223547
User 38353 AUC after training: 0.6204359165424739
User 38353 does not improve AUC. Reverting changes.
Training on augumented user 42781 5/50 current_auc = 0.620715350223547
User 42781 AUC after training: 0.6210879284649777
User 42781 improves AUC. Keeping the model.
Training on augumented user 90362 6/50 current_auc = 0.6210879284649777
User 90362 AUC after training: 0.6213673621460507
User 90362 improves AUC. Keeping the model.
Training on augumented user 78793 7/50 current_auc = 0.6213673621460507
User 78793 AUC after training: 0.6211810730253353
User 78793 does not improve AUC. Reverting changes.
Training on augumented user 86673 8/50 current_auc = 0.6213673621460507
User 86673 AUC after training: 0.6211810730253353
User 86673 does not improve AUC. Reverting changes.
Training on augumented user 92858 9/50 current_auc = 0.6213673621460507
User 92858 AUC after training: 0.6211810730253352
User 92858 does not improve AUC. Reverting changes.
Training on augumented user 131001 10/50 current_auc = 0.6213673621460507
User 131001 AUC after training: 0.6210879284649776
User 131001 does not improve AUC. Reverting changes.
Training on augumented user 111736 11/50 current_auc = 0.6213673621460507
User 111736 AUC after training: 0.6211810730253354
User 111736 does not improve AUC. Reverting changes.
Training on augumented user 9420 12/50 current_auc = 0.6213673621460507
User 9420 AUC after training: 0.6209016393442622
User 9420 does not improve AUC. Reverting changes.
Training on augumented user 74719 13/50 current_auc = 0.6213673621460507
User 74719 AUC after training: 0.6214605067064084
User 74719 improves AUC. Keeping the model.
Training on augumented user 62240 14/50 current_auc = 0.6214605067064084
User 62240 AUC after training: 0.6207153502235468
User 62240 does not improve AUC. Reverting changes.
Training on augumented user 36019 15/50 current_auc = 0.6214605067064084
User 36019 AUC after training: 0.62099478390462
User 36019 does not improve AUC. Reverting changes.
Training on augumented user 6035 16/50 current_auc = 0.6214605067064084
User 6035 AUC after training: 0.6209947839046199
User 6035 does not improve AUC. Reverting changes.
Training on augumented user 61223 17/50 current_auc = 0.6214605067064084
User 61223 AUC after training: 0.6216467958271238
User 61223 improves AUC. Keeping the model.
Training on augumented user 80922 18/50 current_auc = 0.6216467958271238
User 80922 AUC after training: 0.620715350223547
User 80922 does not improve AUC. Reverting changes.
Training on augumented user 89124 19/50 current_auc = 0.6216467958271238
User 89124 AUC after training: 0.6208084947839047
User 89124 does not improve AUC. Reverting changes.
Training on augumented user 73357 20/50 current_auc = 0.6216467958271238
User 73357 AUC after training: 0.6217399403874814
User 73357 improves AUC. Keeping the model.
Training on augumented user 25115 21/50 current_auc = 0.6217399403874814
User 25115 AUC after training: 0.621274217585693
User 25115 does not improve AUC. Reverting changes.
Training on augumented user 51867 22/50 current_auc = 0.6217399403874814
User 51867 AUC after training: 0.6211810730253353
User 51867 does not improve AUC. Reverting changes.
Training on augumented user 104324 23/50 current_auc = 0.6217399403874814
User 104324 AUC after training: 0.621274217585693
User 104324 does not improve AUC. Reverting changes.
Training on augumented user 135863 24/50 current_auc = 0.6217399403874814
User 135863 AUC after training: 0.6209016393442622
User 135863 does not improve AUC. Reverting changes.
Training on augumented user 87317 25/50 current_auc = 0.6217399403874814
User 87317 AUC after training: 0.62099478390462
User 87317 does not improve AUC. Reverting changes.
Training on augumented user 65499 26/50 current_auc = 0.6217399403874814
User 65499 AUC after training: 0.6216467958271238
User 65499 does not improve AUC. Reverting changes.
Training on augumented user 78853 27/50 current_auc = 0.6217399403874814
User 78853 AUC after training: 0.6210879284649776
User 78853 does not improve AUC. Reverting changes.
Training on augumented user 87478 28/50 current_auc = 0.6217399403874814
User 87478 AUC after training: 0.6209016393442623
User 87478 does not improve AUC. Reverting changes.
Training on augumented user 14713 29/50 current_auc = 0.6217399403874814
User 14713 AUC after training: 0.6209947839046199
User 14713 does not improve AUC. Reverting changes.
Training on augumented user 126328 30/50 current_auc = 0.6217399403874814
User 126328 AUC after training: 0.620715350223547
User 126328 does not improve AUC. Reverting changes.
Training on augumented user 95565 31/50 current_auc = 0.6217399403874814
User 95565 AUC after training: 0.6209016393442622
User 95565 does not improve AUC. Reverting changes.
Training on augumented user 59842 32/50 current_auc = 0.6217399403874814
User 59842 AUC after training: 0.6211810730253353
User 59842 does not improve AUC. Reverting changes.
Training on augumented user 23778 33/50 current_auc = 0.6217399403874814
User 23778 AUC after training: 0.6209016393442623
User 23778 does not improve AUC. Reverting changes.
Training on augumented user 63513 34/50 current_auc = 0.6217399403874814
User 63513 AUC after training: 0.62099478390462
User 63513 does not improve AUC. Reverting changes.
Training on augumented user 94641 35/50 current_auc = 0.6217399403874814
User 94641 AUC after training: 0.6208084947839047
User 94641 does not improve AUC. Reverting changes.
Training on augumented user 73586 36/50 current_auc = 0.6217399403874814
User 73586 AUC after training: 0.621274217585693
User 73586 does not improve AUC. Reverting changes.
Training on augumented user 43483 37/50 current_auc = 0.6217399403874814
User 43483 AUC after training: 0.621553651266766
User 43483 does not improve AUC. Reverting changes.
Training on augumented user 61139 38/50 current_auc = 0.6217399403874814
User 61139 AUC after training: 0.6211810730253353
User 61139 does not improve AUC. Reverting changes.
Training on augumented user 49256 39/50 current_auc = 0.6217399403874814
User 49256 AUC after training: 0.6214605067064084
User 49256 does not improve AUC. Reverting changes.
Training on augumented user 54962 40/50 current_auc = 0.6217399403874814
User 54962 AUC after training: 0.6214605067064084
User 54962 does not improve AUC. Reverting changes.
Training on augumented user 82616 41/50 current_auc = 0.6217399403874814
User 82616 AUC after training: 0.6213673621460506
User 82616 does not improve AUC. Reverting changes.
Training on augumented user 54493 42/50 current_auc = 0.6217399403874814
User 54493 AUC after training: 0.621274217585693
User 54493 does not improve AUC. Reverting changes.
Training on augumented user 77743 43/50 current_auc = 0.6217399403874814
User 77743 AUC after training: 0.6210879284649776
User 77743 does not improve AUC. Reverting changes.
Training on augumented user 40479 44/50 current_auc = 0.6217399403874814
User 40479 AUC after training: 0.6213673621460506
User 40479 does not improve AUC. Reverting changes.
Training on augumented user 47495 45/50 current_auc = 0.6217399403874814
User 47495 AUC after training: 0.6208084947839047
User 47495 does not improve AUC. Reverting changes.
Training on augumented user 112639 46/50 current_auc = 0.6217399403874814
User 112639 AUC after training: 0.6213673621460507
User 112639 does not improve AUC. Reverting changes.
Training on augumented user 26626 47/50 current_auc = 0.6217399403874814
User 26626 AUC after training: 0.621274217585693
User 26626 does not improve AUC. Reverting changes.
Training on augumented user 128802 48/50 current_auc = 0.6217399403874814
User 128802 AUC after training: 0.6206222056631892
User 128802 does not improve AUC. Reverting changes.
Training on augumented user 136499 49/50 current_auc = 0.6217399403874814
User 136499 AUC after training: 0.6206222056631893
User 136499 does not improve AUC. Reverting changes.
[2024-12-02 18:34:30.915557] start test user 44214 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:31.549238] start test user 44214 104/568 recall augumented users by random, augumented_users = [39250, 126338, 116425, 82797, 26950, 60363, 49583, 103302, 32884, 89040, 69703, 102582, 67584, 134380, 87965, 79335, 135617, 15329, 75726, 61958, 122760, 92717, 109360, 17830, 17117, 56878, 42929, 87687, 91625, 90814, 114224, 116326, 78866, 112940, 27231, 93948, 126241, 88161, 5396, 82857, 74134, 80149, 46798, 123428, 109086, 128344, 18004, 102772, 1881, 44959]
[2024-12-02 18:34:31.565429] user = 44214 Cloud 104/568
[2024-12-02 18:34:31.583734] user = 44214 Local 104/568
[2024-12-02 18:34:31.738516] user = 44214 Local+ 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:34.685759] user = 44214 MPDA- 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7159716758457908
Training on augumented user 39250 0/50 current_auc = 0.7159716758457908
User 39250 AUC after training: 0.7163650668764753
User 39250 improves AUC. Keeping the model.
Training on augumented user 126338 1/50 current_auc = 0.7163650668764753
User 126338 AUC after training: 0.7159716758457907
User 126338 does not improve AUC. Reverting changes.
Training on augumented user 116425 2/50 current_auc = 0.7163650668764753
User 116425 AUC after training: 0.7161028061893523
User 116425 does not improve AUC. Reverting changes.
Training on augumented user 82797 3/50 current_auc = 0.7163650668764753
User 82797 AUC after training: 0.7159716758457907
User 82797 does not improve AUC. Reverting changes.
Training on augumented user 26950 4/50 current_auc = 0.7163650668764753
User 26950 AUC after training: 0.7163650668764752
User 26950 does not improve AUC. Reverting changes.
Training on augumented user 60363 5/50 current_auc = 0.7163650668764753
User 60363 AUC after training: 0.7164961972200368
User 60363 improves AUC. Keeping the model.
Training on augumented user 49583 6/50 current_auc = 0.7164961972200368
User 49583 AUC after training: 0.7167584579071598
User 49583 improves AUC. Keeping the model.
Training on augumented user 103302 7/50 current_auc = 0.7167584579071598
User 103302 AUC after training: 0.7161028061893523
User 103302 does not improve AUC. Reverting changes.
Training on augumented user 32884 8/50 current_auc = 0.7167584579071598
User 32884 AUC after training: 0.7163650668764753
User 32884 does not improve AUC. Reverting changes.
Training on augumented user 89040 9/50 current_auc = 0.7167584579071598
User 89040 AUC after training: 0.7166273275635983
User 89040 does not improve AUC. Reverting changes.
Training on augumented user 69703 10/50 current_auc = 0.7167584579071598
User 69703 AUC after training: 0.7164961972200367
User 69703 does not improve AUC. Reverting changes.
Training on augumented user 102582 11/50 current_auc = 0.7167584579071598
User 102582 AUC after training: 0.7166273275635983
User 102582 does not improve AUC. Reverting changes.
Training on augumented user 67584 12/50 current_auc = 0.7167584579071598
User 67584 AUC after training: 0.7180697613427746
User 67584 improves AUC. Keeping the model.
Training on augumented user 134380 13/50 current_auc = 0.7180697613427746
User 134380 AUC after training: 0.7180697613427747
User 134380 improves AUC. Keeping the model.
Training on augumented user 87965 14/50 current_auc = 0.7180697613427747
User 87965 AUC after training: 0.7180697613427748
User 87965 improves AUC. Keeping the model.
Training on augumented user 79335 15/50 current_auc = 0.7180697613427748
User 79335 AUC after training: 0.7183320220298978
User 79335 improves AUC. Keeping the model.
Training on augumented user 135617 16/50 current_auc = 0.7183320220298978
User 135617 AUC after training: 0.7183320220298978
User 135617 does not improve AUC. Reverting changes.
Training on augumented user 15329 17/50 current_auc = 0.7183320220298978
User 15329 AUC after training: 0.7183320220298978
User 15329 does not improve AUC. Reverting changes.
Training on augumented user 75726 18/50 current_auc = 0.7183320220298978
User 75726 AUC after training: 0.7182008916863363
User 75726 does not improve AUC. Reverting changes.
Training on augumented user 61958 19/50 current_auc = 0.7183320220298978
User 61958 AUC after training: 0.7182008916863363
User 61958 does not improve AUC. Reverting changes.
Training on augumented user 122760 20/50 current_auc = 0.7183320220298978
User 122760 AUC after training: 0.7183975872016785
User 122760 improves AUC. Keeping the model.
Training on augumented user 92717 21/50 current_auc = 0.7183975872016785
User 92717 AUC after training: 0.7181353265145555
User 92717 does not improve AUC. Reverting changes.
Training on augumented user 109360 22/50 current_auc = 0.7183975872016785
User 109360 AUC after training: 0.7180697613427748
User 109360 does not improve AUC. Reverting changes.
Training on augumented user 17830 23/50 current_auc = 0.7183975872016785
User 17830 AUC after training: 0.7182664568581169
User 17830 does not improve AUC. Reverting changes.
Training on augumented user 17117 24/50 current_auc = 0.7183975872016785
User 17117 AUC after training: 0.7183320220298978
User 17117 does not improve AUC. Reverting changes.
Training on augumented user 56878 25/50 current_auc = 0.7183975872016785
User 56878 AUC after training: 0.7191188040912667
User 56878 improves AUC. Keeping the model.
Training on augumented user 42929 26/50 current_auc = 0.7191188040912667
User 42929 AUC after training: 0.7174141096249673
User 42929 does not improve AUC. Reverting changes.
Training on augumented user 87687 27/50 current_auc = 0.7191188040912667
User 87687 AUC after training: 0.7187254130605822
User 87687 does not improve AUC. Reverting changes.
Training on augumented user 91625 28/50 current_auc = 0.7191188040912667
User 91625 AUC after training: 0.7184631523734593
User 91625 does not improve AUC. Reverting changes.
Training on augumented user 90814 29/50 current_auc = 0.7191188040912667
User 90814 AUC after training: 0.7189221085759244
User 90814 does not improve AUC. Reverting changes.
Training on augumented user 114224 30/50 current_auc = 0.7191188040912667
User 114224 AUC after training: 0.7189876737477052
User 114224 does not improve AUC. Reverting changes.
Training on augumented user 116326 31/50 current_auc = 0.7191188040912667
User 116326 AUC after training: 0.7185287175452401
User 116326 does not improve AUC. Reverting changes.
Training on augumented user 78866 32/50 current_auc = 0.7191188040912667
User 78866 AUC after training: 0.7183975872016785
User 78866 does not improve AUC. Reverting changes.
Training on augumented user 112940 33/50 current_auc = 0.7191188040912667
User 112940 AUC after training: 0.7162995017046946
User 112940 does not improve AUC. Reverting changes.
Training on augumented user 27231 34/50 current_auc = 0.7191188040912667
User 27231 AUC after training: 0.7190532389194859
User 27231 does not improve AUC. Reverting changes.
Training on augumented user 93948 35/50 current_auc = 0.7191188040912667
User 93948 AUC after training: 0.7183975872016785
User 93948 does not improve AUC. Reverting changes.
Training on augumented user 126241 36/50 current_auc = 0.7191188040912667
User 126241 AUC after training: 0.7189221085759245
User 126241 does not improve AUC. Reverting changes.
Training on augumented user 88161 37/50 current_auc = 0.7191188040912667
User 88161 AUC after training: 0.7178075006556518
User 88161 does not improve AUC. Reverting changes.
Training on augumented user 5396 38/50 current_auc = 0.7191188040912667
User 5396 AUC after training: 0.7189221085759245
User 5396 does not improve AUC. Reverting changes.
Training on augumented user 82857 39/50 current_auc = 0.7191188040912667
User 82857 AUC after training: 0.7190532389194861
User 82857 does not improve AUC. Reverting changes.
Training on augumented user 74134 40/50 current_auc = 0.7191188040912667
User 74134 AUC after training: 0.7183320220298977
User 74134 does not improve AUC. Reverting changes.
Training on augumented user 80149 41/50 current_auc = 0.7191188040912667
User 80149 AUC after training: 0.7184631523734593
User 80149 does not improve AUC. Reverting changes.
Training on augumented user 46798 42/50 current_auc = 0.7191188040912667
User 46798 AUC after training: 0.7185287175452401
User 46798 does not improve AUC. Reverting changes.
Training on augumented user 123428 43/50 current_auc = 0.7191188040912667
User 123428 AUC after training: 0.7191188040912667
User 123428 does not improve AUC. Reverting changes.
Training on augumented user 109086 44/50 current_auc = 0.7191188040912667
User 109086 AUC after training: 0.7189876737477052
User 109086 does not improve AUC. Reverting changes.
Training on augumented user 128344 45/50 current_auc = 0.7191188040912667
User 128344 AUC after training: 0.7184631523734591
User 128344 does not improve AUC. Reverting changes.
Training on augumented user 18004 46/50 current_auc = 0.7191188040912667
User 18004 AUC after training: 0.7174141096249672
User 18004 does not improve AUC. Reverting changes.
Training on augumented user 102772 47/50 current_auc = 0.7191188040912667
User 102772 AUC after training: 0.7187254130605822
User 102772 does not improve AUC. Reverting changes.
Training on augumented user 1881 48/50 current_auc = 0.7191188040912667
User 1881 AUC after training: 0.7186598478888014
User 1881 does not improve AUC. Reverting changes.
Training on augumented user 44959 49/50 current_auc = 0.7191188040912667
User 44959 AUC after training: 0.7185942827170207
User 44959 does not improve AUC. Reverting changes.
[2024-12-02 18:35:07.626158] start test user 44225 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:08.153614] start test user 44225 105/568 recall augumented users by random, augumented_users = [115869, 134694, 89067, 39132, 9783, 52475, 54244, 58610, 27112, 47091, 70934, 20170, 18724, 27086, 73075, 121871, 103697, 105408, 137237, 52266, 49582, 65594, 96116, 70099, 9005, 80799, 108849, 61302, 93941, 108817, 78778, 60679, 117559, 81576, 92162, 30667, 82591, 108132, 57048, 99408, 122341, 8926, 56168, 43361, 99958, 112456, 32467, 51944, 106223, 84215]
[2024-12-02 18:35:08.171266] user = 44225 Cloud 105/568
[2024-12-02 18:35:08.196949] user = 44225 Local 105/568
[2024-12-02 18:35:08.302174] user = 44225 Local+ 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:10.032518] user = 44225 MPDA- 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6356060606060606
Training on augumented user 115869 0/50 current_auc = 0.6356060606060606
User 115869 AUC after training: 0.6356060606060607
User 115869 improves AUC. Keeping the model.
Training on augumented user 134694 1/50 current_auc = 0.6356060606060607
User 134694 AUC after training: 0.6356060606060605
User 134694 does not improve AUC. Reverting changes.
Training on augumented user 89067 2/50 current_auc = 0.6356060606060607
User 89067 AUC after training: 0.6348484848484849
User 89067 does not improve AUC. Reverting changes.
Training on augumented user 39132 3/50 current_auc = 0.6356060606060607
User 39132 AUC after training: 0.6356060606060607
User 39132 does not improve AUC. Reverting changes.
Training on augumented user 9783 4/50 current_auc = 0.6356060606060607
User 9783 AUC after training: 0.6348484848484849
User 9783 does not improve AUC. Reverting changes.
Training on augumented user 52475 5/50 current_auc = 0.6356060606060607
User 52475 AUC after training: 0.6356060606060607
User 52475 does not improve AUC. Reverting changes.
Training on augumented user 54244 6/50 current_auc = 0.6356060606060607
User 54244 AUC after training: 0.6363636363636365
User 54244 improves AUC. Keeping the model.
Training on augumented user 58610 7/50 current_auc = 0.6363636363636365
User 58610 AUC after training: 0.6356060606060607
User 58610 does not improve AUC. Reverting changes.
Training on augumented user 27112 8/50 current_auc = 0.6363636363636365
User 27112 AUC after training: 0.6363636363636365
User 27112 does not improve AUC. Reverting changes.
Training on augumented user 47091 9/50 current_auc = 0.6363636363636365
User 47091 AUC after training: 0.6363636363636365
User 47091 does not improve AUC. Reverting changes.
Training on augumented user 70934 10/50 current_auc = 0.6363636363636365
User 70934 AUC after training: 0.6356060606060607
User 70934 does not improve AUC. Reverting changes.
Training on augumented user 20170 11/50 current_auc = 0.6363636363636365
User 20170 AUC after training: 0.6356060606060607
User 20170 does not improve AUC. Reverting changes.
Training on augumented user 18724 12/50 current_auc = 0.6363636363636365
User 18724 AUC after training: 0.6371212121212122
User 18724 improves AUC. Keeping the model.
Training on augumented user 27086 13/50 current_auc = 0.6371212121212122
User 27086 AUC after training: 0.6363636363636365
User 27086 does not improve AUC. Reverting changes.
Training on augumented user 73075 14/50 current_auc = 0.6371212121212122
User 73075 AUC after training: 0.6371212121212122
User 73075 does not improve AUC. Reverting changes.
Training on augumented user 121871 15/50 current_auc = 0.6371212121212122
User 121871 AUC after training: 0.6363636363636365
User 121871 does not improve AUC. Reverting changes.
Training on augumented user 103697 16/50 current_auc = 0.6371212121212122
User 103697 AUC after training: 0.6356060606060606
User 103697 does not improve AUC. Reverting changes.
Training on augumented user 105408 17/50 current_auc = 0.6371212121212122
User 105408 AUC after training: 0.6356060606060605
User 105408 does not improve AUC. Reverting changes.
Training on augumented user 137237 18/50 current_auc = 0.6371212121212122
User 137237 AUC after training: 0.6378787878787878
User 137237 improves AUC. Keeping the model.
Training on augumented user 52266 19/50 current_auc = 0.6378787878787878
User 52266 AUC after training: 0.6363636363636365
User 52266 does not improve AUC. Reverting changes.
Training on augumented user 49582 20/50 current_auc = 0.6378787878787878
User 49582 AUC after training: 0.6393939393939394
User 49582 improves AUC. Keeping the model.
Training on augumented user 65594 21/50 current_auc = 0.6393939393939394
User 65594 AUC after training: 0.6393939393939394
User 65594 does not improve AUC. Reverting changes.
Training on augumented user 96116 22/50 current_auc = 0.6393939393939394
User 96116 AUC after training: 0.6386363636363637
User 96116 does not improve AUC. Reverting changes.
Training on augumented user 70099 23/50 current_auc = 0.6393939393939394
User 70099 AUC after training: 0.6393939393939394
User 70099 does not improve AUC. Reverting changes.
Training on augumented user 9005 24/50 current_auc = 0.6393939393939394
User 9005 AUC after training: 0.6386363636363637
User 9005 does not improve AUC. Reverting changes.
Training on augumented user 80799 25/50 current_auc = 0.6393939393939394
User 80799 AUC after training: 0.6371212121212122
User 80799 does not improve AUC. Reverting changes.
Training on augumented user 108849 26/50 current_auc = 0.6393939393939394
User 108849 AUC after training: 0.6393939393939394
User 108849 does not improve AUC. Reverting changes.
Training on augumented user 61302 27/50 current_auc = 0.6393939393939394
User 61302 AUC after training: 0.6378787878787879
User 61302 does not improve AUC. Reverting changes.
Training on augumented user 93941 28/50 current_auc = 0.6393939393939394
User 93941 AUC after training: 0.6386363636363637
User 93941 does not improve AUC. Reverting changes.
Training on augumented user 108817 29/50 current_auc = 0.6393939393939394
User 108817 AUC after training: 0.6393939393939394
User 108817 does not improve AUC. Reverting changes.
Training on augumented user 78778 30/50 current_auc = 0.6393939393939394
User 78778 AUC after training: 0.6386363636363637
User 78778 does not improve AUC. Reverting changes.
Training on augumented user 60679 31/50 current_auc = 0.6393939393939394
User 60679 AUC after training: 0.6386363636363637
User 60679 does not improve AUC. Reverting changes.
Training on augumented user 117559 32/50 current_auc = 0.6393939393939394
User 117559 AUC after training: 0.6409090909090909
User 117559 improves AUC. Keeping the model.
Training on augumented user 81576 33/50 current_auc = 0.6409090909090909
User 81576 AUC after training: 0.6401515151515151
User 81576 does not improve AUC. Reverting changes.
Training on augumented user 92162 34/50 current_auc = 0.6409090909090909
User 92162 AUC after training: 0.6393939393939394
User 92162 does not improve AUC. Reverting changes.
Training on augumented user 30667 35/50 current_auc = 0.6409090909090909
User 30667 AUC after training: 0.6401515151515151
User 30667 does not improve AUC. Reverting changes.
Training on augumented user 82591 36/50 current_auc = 0.6409090909090909
User 82591 AUC after training: 0.6363636363636365
User 82591 does not improve AUC. Reverting changes.
Training on augumented user 108132 37/50 current_auc = 0.6409090909090909
User 108132 AUC after training: 0.6393939393939394
User 108132 does not improve AUC. Reverting changes.
Training on augumented user 57048 38/50 current_auc = 0.6409090909090909
User 57048 AUC after training: 0.6401515151515151
User 57048 does not improve AUC. Reverting changes.
Training on augumented user 99408 39/50 current_auc = 0.6409090909090909
User 99408 AUC after training: 0.6378787878787879
User 99408 does not improve AUC. Reverting changes.
Training on augumented user 122341 40/50 current_auc = 0.6409090909090909
User 122341 AUC after training: 0.6401515151515151
User 122341 does not improve AUC. Reverting changes.
Training on augumented user 8926 41/50 current_auc = 0.6409090909090909
User 8926 AUC after training: 0.6393939393939394
User 8926 does not improve AUC. Reverting changes.
Training on augumented user 56168 42/50 current_auc = 0.6409090909090909
User 56168 AUC after training: 0.6409090909090909
User 56168 does not improve AUC. Reverting changes.
Training on augumented user 43361 43/50 current_auc = 0.6409090909090909
User 43361 AUC after training: 0.6386363636363637
User 43361 does not improve AUC. Reverting changes.
Training on augumented user 99958 44/50 current_auc = 0.6409090909090909
User 99958 AUC after training: 0.6393939393939394
User 99958 does not improve AUC. Reverting changes.
Training on augumented user 112456 45/50 current_auc = 0.6409090909090909
User 112456 AUC after training: 0.6401515151515151
User 112456 does not improve AUC. Reverting changes.
Training on augumented user 32467 46/50 current_auc = 0.6409090909090909
User 32467 AUC after training: 0.6409090909090909
User 32467 does not improve AUC. Reverting changes.
Training on augumented user 51944 47/50 current_auc = 0.6409090909090909
User 51944 AUC after training: 0.6401515151515151
User 51944 does not improve AUC. Reverting changes.
Training on augumented user 106223 48/50 current_auc = 0.6409090909090909
User 106223 AUC after training: 0.6401515151515151
User 106223 does not improve AUC. Reverting changes.
Training on augumented user 84215 49/50 current_auc = 0.6409090909090909
User 84215 AUC after training: 0.6386363636363637
User 84215 does not improve AUC. Reverting changes.
[2024-12-02 18:35:40.515928] start test user 44243 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:41.177440] start test user 44243 106/568 recall augumented users by random, augumented_users = [80530, 105360, 108611, 74596, 54590, 63694, 3827, 8361, 39332, 120594, 81452, 55876, 94194, 91048, 22310, 126047, 92250, 97480, 40402, 114523, 43270, 6368, 35015, 13517, 3005, 23736, 83289, 64761, 102962, 87853, 72636, 116589, 110292, 52390, 17250, 80331, 50738, 116678, 125613, 32435, 128217, 92802, 4417, 95725, 97656, 119072, 4015, 100311, 118711, 80746]
[2024-12-02 18:35:41.199147] user = 44243 Cloud 106/568
[2024-12-02 18:35:41.222510] user = 44243 Local 106/568
[2024-12-02 18:35:41.269059] user = 44243 Local+ 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:43.628749] user = 44243 MPDA- 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 80530 0/50 current_auc = 0.5
User 80530 AUC after training: 0.5
User 80530 does not improve AUC. Reverting changes.
Training on augumented user 105360 1/50 current_auc = 0.5
User 105360 AUC after training: 0.5
User 105360 does not improve AUC. Reverting changes.
Training on augumented user 108611 2/50 current_auc = 0.5
User 108611 AUC after training: 0.5
User 108611 does not improve AUC. Reverting changes.
Training on augumented user 74596 3/50 current_auc = 0.5
User 74596 AUC after training: 0.5
User 74596 does not improve AUC. Reverting changes.
Training on augumented user 54590 4/50 current_auc = 0.5
User 54590 AUC after training: 0.5
User 54590 does not improve AUC. Reverting changes.
Training on augumented user 63694 5/50 current_auc = 0.5
User 63694 AUC after training: 0.5
User 63694 does not improve AUC. Reverting changes.
Training on augumented user 3827 6/50 current_auc = 0.5
User 3827 AUC after training: 0.5
User 3827 does not improve AUC. Reverting changes.
Training on augumented user 8361 7/50 current_auc = 0.5
User 8361 AUC after training: 0.5
User 8361 does not improve AUC. Reverting changes.
Training on augumented user 39332 8/50 current_auc = 0.5
User 39332 AUC after training: 0.5
User 39332 does not improve AUC. Reverting changes.
Training on augumented user 120594 9/50 current_auc = 0.5
User 120594 AUC after training: 0.5
User 120594 does not improve AUC. Reverting changes.
Training on augumented user 81452 10/50 current_auc = 0.5
User 81452 AUC after training: 0.5
User 81452 does not improve AUC. Reverting changes.
Training on augumented user 55876 11/50 current_auc = 0.5
User 55876 AUC after training: 0.5
User 55876 does not improve AUC. Reverting changes.
Training on augumented user 94194 12/50 current_auc = 0.5
User 94194 AUC after training: 0.5
User 94194 does not improve AUC. Reverting changes.
Training on augumented user 91048 13/50 current_auc = 0.5
User 91048 AUC after training: 0.5
User 91048 does not improve AUC. Reverting changes.
Training on augumented user 22310 14/50 current_auc = 0.5
User 22310 AUC after training: 0.5
User 22310 does not improve AUC. Reverting changes.
Training on augumented user 126047 15/50 current_auc = 0.5
User 126047 AUC after training: 0.5
User 126047 does not improve AUC. Reverting changes.
Training on augumented user 92250 16/50 current_auc = 0.5
User 92250 AUC after training: 0.5
User 92250 does not improve AUC. Reverting changes.
Training on augumented user 97480 17/50 current_auc = 0.5
User 97480 AUC after training: 0.5
User 97480 does not improve AUC. Reverting changes.
Training on augumented user 40402 18/50 current_auc = 0.5
User 40402 AUC after training: 0.5
User 40402 does not improve AUC. Reverting changes.
Training on augumented user 114523 19/50 current_auc = 0.5
User 114523 AUC after training: 0.5
User 114523 does not improve AUC. Reverting changes.
Training on augumented user 43270 20/50 current_auc = 0.5
User 43270 AUC after training: 0.5
User 43270 does not improve AUC. Reverting changes.
Training on augumented user 6368 21/50 current_auc = 0.5
User 6368 AUC after training: 0.5
User 6368 does not improve AUC. Reverting changes.
Training on augumented user 35015 22/50 current_auc = 0.5
User 35015 AUC after training: 0.5
User 35015 does not improve AUC. Reverting changes.
Training on augumented user 13517 23/50 current_auc = 0.5
User 13517 AUC after training: 0.5
User 13517 does not improve AUC. Reverting changes.
Training on augumented user 3005 24/50 current_auc = 0.5
User 3005 AUC after training: 0.5
User 3005 does not improve AUC. Reverting changes.
Training on augumented user 23736 25/50 current_auc = 0.5
User 23736 AUC after training: 0.5
User 23736 does not improve AUC. Reverting changes.
Training on augumented user 83289 26/50 current_auc = 0.5
User 83289 AUC after training: 0.5
User 83289 does not improve AUC. Reverting changes.
Training on augumented user 64761 27/50 current_auc = 0.5
User 64761 AUC after training: 0.5
User 64761 does not improve AUC. Reverting changes.
Training on augumented user 102962 28/50 current_auc = 0.5
User 102962 AUC after training: 0.5
User 102962 does not improve AUC. Reverting changes.
Training on augumented user 87853 29/50 current_auc = 0.5
User 87853 AUC after training: 0.5
User 87853 does not improve AUC. Reverting changes.
Training on augumented user 72636 30/50 current_auc = 0.5
User 72636 AUC after training: 0.5
User 72636 does not improve AUC. Reverting changes.
Training on augumented user 116589 31/50 current_auc = 0.5
User 116589 AUC after training: 0.5
User 116589 does not improve AUC. Reverting changes.
Training on augumented user 110292 32/50 current_auc = 0.5
User 110292 AUC after training: 0.5
User 110292 does not improve AUC. Reverting changes.
Training on augumented user 52390 33/50 current_auc = 0.5
User 52390 AUC after training: 0.5
User 52390 does not improve AUC. Reverting changes.
Training on augumented user 17250 34/50 current_auc = 0.5
User 17250 AUC after training: 0.5
User 17250 does not improve AUC. Reverting changes.
Training on augumented user 80331 35/50 current_auc = 0.5
User 80331 AUC after training: 0.5
User 80331 does not improve AUC. Reverting changes.
Training on augumented user 50738 36/50 current_auc = 0.5
User 50738 AUC after training: 0.5
User 50738 does not improve AUC. Reverting changes.
Training on augumented user 116678 37/50 current_auc = 0.5
User 116678 AUC after training: 0.5
User 116678 does not improve AUC. Reverting changes.
Training on augumented user 125613 38/50 current_auc = 0.5
User 125613 AUC after training: 0.5
User 125613 does not improve AUC. Reverting changes.
Training on augumented user 32435 39/50 current_auc = 0.5
User 32435 AUC after training: 0.5
User 32435 does not improve AUC. Reverting changes.
Training on augumented user 128217 40/50 current_auc = 0.5
User 128217 AUC after training: 0.5
User 128217 does not improve AUC. Reverting changes.
Training on augumented user 92802 41/50 current_auc = 0.5
User 92802 AUC after training: 0.5
User 92802 does not improve AUC. Reverting changes.
Training on augumented user 4417 42/50 current_auc = 0.5
User 4417 AUC after training: 0.5
User 4417 does not improve AUC. Reverting changes.
Training on augumented user 95725 43/50 current_auc = 0.5
User 95725 AUC after training: 0.5
User 95725 does not improve AUC. Reverting changes.
Training on augumented user 97656 44/50 current_auc = 0.5
User 97656 AUC after training: 0.5
User 97656 does not improve AUC. Reverting changes.
Training on augumented user 119072 45/50 current_auc = 0.5
User 119072 AUC after training: 0.5
User 119072 does not improve AUC. Reverting changes.
Training on augumented user 4015 46/50 current_auc = 0.5
User 4015 AUC after training: 0.5
User 4015 does not improve AUC. Reverting changes.
Training on augumented user 100311 47/50 current_auc = 0.5
User 100311 AUC after training: 0.5
User 100311 does not improve AUC. Reverting changes.
Training on augumented user 118711 48/50 current_auc = 0.5
User 118711 AUC after training: 0.5
User 118711 does not improve AUC. Reverting changes.
Training on augumented user 80746 49/50 current_auc = 0.5
User 80746 AUC after training: 0.5
User 80746 does not improve AUC. Reverting changes.
[2024-12-02 18:36:10.356351] start test user 44256 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:10.774349] start test user 44256 107/568 recall augumented users by random, augumented_users = [31747, 128476, 23378, 36697, 19034, 11548, 98414, 67705, 20871, 104147, 121893, 92260, 101360, 28622, 115823, 88037, 66266, 25611, 128966, 75988, 76169, 98558, 100325, 25388, 123028, 5549, 57750, 35707, 122685, 95393, 106075, 3157, 94124, 93344, 26629, 119813, 37466, 96648, 123861, 98644, 88726, 2060, 122761, 44202, 44731, 61879, 99587, 60398, 15866, 32618]
[2024-12-02 18:36:10.789812] user = 44256 Cloud 107/568
[2024-12-02 18:36:10.819382] user = 44256 Local 107/568
[2024-12-02 18:36:10.882084] user = 44256 Local+ 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:12.966795] user = 44256 MPDA- 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7287862513426423
Training on augumented user 31747 0/50 current_auc = 0.7287862513426423
User 31747 AUC after training: 0.7277121374865735
User 31747 does not improve AUC. Reverting changes.
Training on augumented user 128476 1/50 current_auc = 0.7287862513426423
User 128476 AUC after training: 0.7284282133906194
User 128476 does not improve AUC. Reverting changes.
Training on augumented user 23378 2/50 current_auc = 0.7287862513426423
User 23378 AUC after training: 0.7293233082706766
User 23378 improves AUC. Keeping the model.
Training on augumented user 36697 3/50 current_auc = 0.7293233082706766
User 36697 AUC after training: 0.728249194414608
User 36697 does not improve AUC. Reverting changes.
Training on augumented user 19034 4/50 current_auc = 0.7293233082706766
User 19034 AUC after training: 0.7287862513426423
User 19034 does not improve AUC. Reverting changes.
Training on augumented user 11548 5/50 current_auc = 0.7293233082706766
User 11548 AUC after training: 0.7284282133906194
User 11548 does not improve AUC. Reverting changes.
Training on augumented user 98414 6/50 current_auc = 0.7293233082706766
User 98414 AUC after training: 0.7289652703186538
User 98414 does not improve AUC. Reverting changes.
Training on augumented user 67705 7/50 current_auc = 0.7293233082706766
User 67705 AUC after training: 0.7280701754385964
User 67705 does not improve AUC. Reverting changes.
Training on augumented user 20871 8/50 current_auc = 0.7293233082706766
User 20871 AUC after training: 0.7289652703186539
User 20871 does not improve AUC. Reverting changes.
Training on augumented user 104147 9/50 current_auc = 0.7293233082706766
User 104147 AUC after training: 0.7282491944146079
User 104147 does not improve AUC. Reverting changes.
Training on augumented user 121893 10/50 current_auc = 0.7293233082706766
User 121893 AUC after training: 0.7280701754385964
User 121893 does not improve AUC. Reverting changes.
Training on augumented user 92260 11/50 current_auc = 0.7293233082706766
User 92260 AUC after training: 0.7295918367346939
User 92260 improves AUC. Keeping the model.
Training on augumented user 101360 12/50 current_auc = 0.7295918367346939
User 101360 AUC after training: 0.7294128177586824
User 101360 does not improve AUC. Reverting changes.
Training on augumented user 28622 13/50 current_auc = 0.7295918367346939
User 28622 AUC after training: 0.729591836734694
User 28622 improves AUC. Keeping the model.
Training on augumented user 115823 14/50 current_auc = 0.729591836734694
User 115823 AUC after training: 0.7295918367346939
User 115823 does not improve AUC. Reverting changes.
Training on augumented user 88037 15/50 current_auc = 0.729591836734694
User 88037 AUC after training: 0.729233798782671
User 88037 does not improve AUC. Reverting changes.
Training on augumented user 66266 16/50 current_auc = 0.729591836734694
User 66266 AUC after training: 0.7295918367346939
User 66266 does not improve AUC. Reverting changes.
Training on augumented user 25611 17/50 current_auc = 0.729591836734694
User 25611 AUC after training: 0.7292337987826709
User 25611 does not improve AUC. Reverting changes.
Training on augumented user 128966 18/50 current_auc = 0.729591836734694
User 128966 AUC after training: 0.729233798782671
User 128966 does not improve AUC. Reverting changes.
Training on augumented user 75988 19/50 current_auc = 0.729591836734694
User 75988 AUC after training: 0.729233798782671
User 75988 does not improve AUC. Reverting changes.
Training on augumented user 76169 20/50 current_auc = 0.729591836734694
User 76169 AUC after training: 0.7290547798066594
User 76169 does not improve AUC. Reverting changes.
Training on augumented user 98558 21/50 current_auc = 0.729591836734694
User 98558 AUC after training: 0.7294128177586824
User 98558 does not improve AUC. Reverting changes.
Training on augumented user 100325 22/50 current_auc = 0.729591836734694
User 100325 AUC after training: 0.7299498746867168
User 100325 improves AUC. Keeping the model.
Training on augumented user 25388 23/50 current_auc = 0.7299498746867168
User 25388 AUC after training: 0.7295918367346937
User 25388 does not improve AUC. Reverting changes.
Training on augumented user 123028 24/50 current_auc = 0.7299498746867168
User 123028 AUC after training: 0.7297708557107053
User 123028 does not improve AUC. Reverting changes.
Training on augumented user 5549 25/50 current_auc = 0.7299498746867168
User 5549 AUC after training: 0.7294128177586824
User 5549 does not improve AUC. Reverting changes.
Training on augumented user 57750 26/50 current_auc = 0.7299498746867168
User 57750 AUC after training: 0.7292337987826709
User 57750 does not improve AUC. Reverting changes.
Training on augumented user 35707 27/50 current_auc = 0.7299498746867168
User 35707 AUC after training: 0.7294128177586824
User 35707 does not improve AUC. Reverting changes.
Training on augumented user 122685 28/50 current_auc = 0.7299498746867168
User 122685 AUC after training: 0.7295918367346939
User 122685 does not improve AUC. Reverting changes.
Training on augumented user 95393 29/50 current_auc = 0.7299498746867168
User 95393 AUC after training: 0.7294128177586824
User 95393 does not improve AUC. Reverting changes.
Training on augumented user 106075 30/50 current_auc = 0.7299498746867168
User 106075 AUC after training: 0.7290547798066594
User 106075 does not improve AUC. Reverting changes.
Training on augumented user 3157 31/50 current_auc = 0.7299498746867168
User 3157 AUC after training: 0.7289652703186538
User 3157 does not improve AUC. Reverting changes.
Training on augumented user 94124 32/50 current_auc = 0.7299498746867168
User 94124 AUC after training: 0.729233798782671
User 94124 does not improve AUC. Reverting changes.
Training on augumented user 93344 33/50 current_auc = 0.7299498746867168
User 93344 AUC after training: 0.7284282133906195
User 93344 does not improve AUC. Reverting changes.
Training on augumented user 26629 34/50 current_auc = 0.7299498746867168
User 26629 AUC after training: 0.7294128177586824
User 26629 does not improve AUC. Reverting changes.
Training on augumented user 119813 35/50 current_auc = 0.7299498746867168
User 119813 AUC after training: 0.7295918367346939
User 119813 does not improve AUC. Reverting changes.
Training on augumented user 37466 36/50 current_auc = 0.7299498746867168
User 37466 AUC after training: 0.7288757608306481
User 37466 does not improve AUC. Reverting changes.
Training on augumented user 96648 37/50 current_auc = 0.7299498746867168
User 96648 AUC after training: 0.7286967418546366
User 96648 does not improve AUC. Reverting changes.
Training on augumented user 123861 38/50 current_auc = 0.7299498746867168
User 123861 AUC after training: 0.7294128177586825
User 123861 does not improve AUC. Reverting changes.
Training on augumented user 98644 39/50 current_auc = 0.7299498746867168
User 98644 AUC after training: 0.7301288936627283
User 98644 improves AUC. Keeping the model.
Training on augumented user 88726 40/50 current_auc = 0.7301288936627283
User 88726 AUC after training: 0.7299498746867167
User 88726 does not improve AUC. Reverting changes.
Training on augumented user 2060 41/50 current_auc = 0.7301288936627283
User 2060 AUC after training: 0.7295023272466883
User 2060 does not improve AUC. Reverting changes.
Training on augumented user 122761 42/50 current_auc = 0.7301288936627283
User 122761 AUC after training: 0.7294128177586824
User 122761 does not improve AUC. Reverting changes.
Training on augumented user 44202 43/50 current_auc = 0.7301288936627283
User 44202 AUC after training: 0.7295023272466882
User 44202 does not improve AUC. Reverting changes.
Training on augumented user 44731 44/50 current_auc = 0.7301288936627283
User 44731 AUC after training: 0.7296813462226996
User 44731 does not improve AUC. Reverting changes.
Training on augumented user 61879 45/50 current_auc = 0.7301288936627283
User 61879 AUC after training: 0.7301288936627284
User 61879 improves AUC. Keeping the model.
Training on augumented user 99587 46/50 current_auc = 0.7301288936627284
User 99587 AUC after training: 0.7301288936627284
User 99587 does not improve AUC. Reverting changes.
Training on augumented user 60398 47/50 current_auc = 0.7301288936627284
User 60398 AUC after training: 0.7290547798066594
User 60398 does not improve AUC. Reverting changes.
Training on augumented user 15866 48/50 current_auc = 0.7301288936627284
User 15866 AUC after training: 0.7299498746867168
User 15866 does not improve AUC. Reverting changes.
Training on augumented user 32618 49/50 current_auc = 0.7301288936627284
User 32618 AUC after training: 0.7299498746867168
User 32618 does not improve AUC. Reverting changes.
[2024-12-02 18:36:43.824726] start test user 44271 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:44.278360] start test user 44271 108/568 recall augumented users by random, augumented_users = [69752, 58284, 1045, 51506, 94825, 15965, 106324, 11819, 126713, 121964, 112820, 69831, 29463, 113600, 97051, 97848, 118057, 6133, 112840, 45604, 39850, 31204, 31838, 6810, 128240, 110355, 133972, 11745, 125333, 28584, 118963, 31134, 13181, 118536, 58418, 88539, 47065, 79907, 62152, 75589, 88729, 122577, 12641, 9564, 75775, 131954, 24324, 138121, 46830, 103889]
[2024-12-02 18:36:44.292820] user = 44271 Cloud 108/568
[2024-12-02 18:36:44.302416] user = 44271 Local 108/568
[2024-12-02 18:36:44.365478] user = 44271 Local+ 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:47.163362] user = 44271 MPDA- 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45454545454545453
Training on augumented user 69752 0/50 current_auc = 0.45454545454545453
User 69752 AUC after training: 0.45454545454545453
User 69752 does not improve AUC. Reverting changes.
Training on augumented user 58284 1/50 current_auc = 0.45454545454545453
User 58284 AUC after training: 0.45454545454545453
User 58284 does not improve AUC. Reverting changes.
Training on augumented user 1045 2/50 current_auc = 0.45454545454545453
User 1045 AUC after training: 0.45454545454545453
User 1045 does not improve AUC. Reverting changes.
Training on augumented user 51506 3/50 current_auc = 0.45454545454545453
User 51506 AUC after training: 0.45454545454545453
User 51506 does not improve AUC. Reverting changes.
Training on augumented user 94825 4/50 current_auc = 0.45454545454545453
User 94825 AUC after training: 0.45454545454545453
User 94825 does not improve AUC. Reverting changes.
Training on augumented user 15965 5/50 current_auc = 0.45454545454545453
User 15965 AUC after training: 0.45454545454545453
User 15965 does not improve AUC. Reverting changes.
Training on augumented user 106324 6/50 current_auc = 0.45454545454545453
User 106324 AUC after training: 0.45454545454545453
User 106324 does not improve AUC. Reverting changes.
Training on augumented user 11819 7/50 current_auc = 0.45454545454545453
User 11819 AUC after training: 0.45454545454545453
User 11819 does not improve AUC. Reverting changes.
Training on augumented user 126713 8/50 current_auc = 0.45454545454545453
User 126713 AUC after training: 0.45454545454545453
User 126713 does not improve AUC. Reverting changes.
Training on augumented user 121964 9/50 current_auc = 0.45454545454545453
User 121964 AUC after training: 0.45454545454545453
User 121964 does not improve AUC. Reverting changes.
Training on augumented user 112820 10/50 current_auc = 0.45454545454545453
User 112820 AUC after training: 0.45454545454545453
User 112820 does not improve AUC. Reverting changes.
Training on augumented user 69831 11/50 current_auc = 0.45454545454545453
User 69831 AUC after training: 0.45454545454545453
User 69831 does not improve AUC. Reverting changes.
Training on augumented user 29463 12/50 current_auc = 0.45454545454545453
User 29463 AUC after training: 0.45454545454545453
User 29463 does not improve AUC. Reverting changes.
Training on augumented user 113600 13/50 current_auc = 0.45454545454545453
User 113600 AUC after training: 0.45454545454545453
User 113600 does not improve AUC. Reverting changes.
Training on augumented user 97051 14/50 current_auc = 0.45454545454545453
User 97051 AUC after training: 0.45454545454545453
User 97051 does not improve AUC. Reverting changes.
Training on augumented user 97848 15/50 current_auc = 0.45454545454545453
User 97848 AUC after training: 0.45454545454545453
User 97848 does not improve AUC. Reverting changes.
Training on augumented user 118057 16/50 current_auc = 0.45454545454545453
User 118057 AUC after training: 0.45454545454545453
User 118057 does not improve AUC. Reverting changes.
Training on augumented user 6133 17/50 current_auc = 0.45454545454545453
User 6133 AUC after training: 0.45454545454545453
User 6133 does not improve AUC. Reverting changes.
Training on augumented user 112840 18/50 current_auc = 0.45454545454545453
User 112840 AUC after training: 0.45454545454545453
User 112840 does not improve AUC. Reverting changes.
Training on augumented user 45604 19/50 current_auc = 0.45454545454545453
User 45604 AUC after training: 0.45454545454545453
User 45604 does not improve AUC. Reverting changes.
Training on augumented user 39850 20/50 current_auc = 0.45454545454545453
User 39850 AUC after training: 0.45454545454545453
User 39850 does not improve AUC. Reverting changes.
Training on augumented user 31204 21/50 current_auc = 0.45454545454545453
User 31204 AUC after training: 0.45454545454545453
User 31204 does not improve AUC. Reverting changes.
Training on augumented user 31838 22/50 current_auc = 0.45454545454545453
User 31838 AUC after training: 0.45454545454545453
User 31838 does not improve AUC. Reverting changes.
Training on augumented user 6810 23/50 current_auc = 0.45454545454545453
User 6810 AUC after training: 0.45454545454545453
User 6810 does not improve AUC. Reverting changes.
Training on augumented user 128240 24/50 current_auc = 0.45454545454545453
User 128240 AUC after training: 0.4848484848484848
User 128240 improves AUC. Keeping the model.
Training on augumented user 110355 25/50 current_auc = 0.4848484848484848
User 110355 AUC after training: 0.4848484848484848
User 110355 does not improve AUC. Reverting changes.
Training on augumented user 133972 26/50 current_auc = 0.4848484848484848
User 133972 AUC after training: 0.4848484848484848
User 133972 does not improve AUC. Reverting changes.
Training on augumented user 11745 27/50 current_auc = 0.4848484848484848
User 11745 AUC after training: 0.45454545454545453
User 11745 does not improve AUC. Reverting changes.
Training on augumented user 125333 28/50 current_auc = 0.4848484848484848
User 125333 AUC after training: 0.45454545454545453
User 125333 does not improve AUC. Reverting changes.
Training on augumented user 28584 29/50 current_auc = 0.4848484848484848
User 28584 AUC after training: 0.45454545454545453
User 28584 does not improve AUC. Reverting changes.
Training on augumented user 118963 30/50 current_auc = 0.4848484848484848
User 118963 AUC after training: 0.45454545454545453
User 118963 does not improve AUC. Reverting changes.
Training on augumented user 31134 31/50 current_auc = 0.4848484848484848
User 31134 AUC after training: 0.45454545454545453
User 31134 does not improve AUC. Reverting changes.
Training on augumented user 13181 32/50 current_auc = 0.4848484848484848
User 13181 AUC after training: 0.45454545454545453
User 13181 does not improve AUC. Reverting changes.
Training on augumented user 118536 33/50 current_auc = 0.4848484848484848
User 118536 AUC after training: 0.45454545454545453
User 118536 does not improve AUC. Reverting changes.
Training on augumented user 58418 34/50 current_auc = 0.4848484848484848
User 58418 AUC after training: 0.45454545454545453
User 58418 does not improve AUC. Reverting changes.
Training on augumented user 88539 35/50 current_auc = 0.4848484848484848
User 88539 AUC after training: 0.4848484848484848
User 88539 does not improve AUC. Reverting changes.
Training on augumented user 47065 36/50 current_auc = 0.4848484848484848
User 47065 AUC after training: 0.4848484848484848
User 47065 does not improve AUC. Reverting changes.
Training on augumented user 79907 37/50 current_auc = 0.4848484848484848
User 79907 AUC after training: 0.4848484848484848
User 79907 does not improve AUC. Reverting changes.
Training on augumented user 62152 38/50 current_auc = 0.4848484848484848
User 62152 AUC after training: 0.4848484848484848
User 62152 does not improve AUC. Reverting changes.
Training on augumented user 75589 39/50 current_auc = 0.4848484848484848
User 75589 AUC after training: 0.45454545454545453
User 75589 does not improve AUC. Reverting changes.
Training on augumented user 88729 40/50 current_auc = 0.4848484848484848
User 88729 AUC after training: 0.45454545454545453
User 88729 does not improve AUC. Reverting changes.
Training on augumented user 122577 41/50 current_auc = 0.4848484848484848
User 122577 AUC after training: 0.4848484848484848
User 122577 does not improve AUC. Reverting changes.
Training on augumented user 12641 42/50 current_auc = 0.4848484848484848
User 12641 AUC after training: 0.45454545454545453
User 12641 does not improve AUC. Reverting changes.
Training on augumented user 9564 43/50 current_auc = 0.4848484848484848
User 9564 AUC after training: 0.4848484848484848
User 9564 does not improve AUC. Reverting changes.
Training on augumented user 75775 44/50 current_auc = 0.4848484848484848
User 75775 AUC after training: 0.4848484848484848
User 75775 does not improve AUC. Reverting changes.
Training on augumented user 131954 45/50 current_auc = 0.4848484848484848
User 131954 AUC after training: 0.4848484848484848
User 131954 does not improve AUC. Reverting changes.
Training on augumented user 24324 46/50 current_auc = 0.4848484848484848
User 24324 AUC after training: 0.4848484848484848
User 24324 does not improve AUC. Reverting changes.
Training on augumented user 138121 47/50 current_auc = 0.4848484848484848
User 138121 AUC after training: 0.4848484848484848
User 138121 does not improve AUC. Reverting changes.
Training on augumented user 46830 48/50 current_auc = 0.4848484848484848
User 46830 AUC after training: 0.45454545454545453
User 46830 does not improve AUC. Reverting changes.
Training on augumented user 103889 49/50 current_auc = 0.4848484848484848
User 103889 AUC after training: 0.4848484848484848
User 103889 does not improve AUC. Reverting changes.
[2024-12-02 18:37:20.285999] start test user 44296 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:21.269230] start test user 44296 109/568 recall augumented users by random, augumented_users = [51389, 72046, 63281, 124050, 47536, 18905, 63297, 136722, 37587, 30430, 63204, 118541, 11210, 120338, 116157, 6086, 136829, 81118, 47368, 3870, 55236, 40951, 37807, 30014, 6290, 129098, 123212, 27950, 64138, 76901, 90796, 2633, 76599, 90282, 116229, 42245, 76988, 1327, 29309, 85146, 75246, 115796, 98944, 25005, 18869, 45460, 36222, 91348, 57724, 119617]
[2024-12-02 18:37:21.288784] user = 44296 Cloud 109/568
[2024-12-02 18:37:21.355692] user = 44296 Local 109/568
[2024-12-02 18:37:21.741688] user = 44296 Local+ 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:24.467771] user = 44296 MPDA- 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7654982148653035
Training on augumented user 51389 0/50 current_auc = 0.7654982148653035
User 51389 AUC after training: 0.7657145948285189
User 51389 improves AUC. Keeping the model.
Training on augumented user 72046 1/50 current_auc = 0.7657145948285189
User 72046 AUC after training: 0.7656064048469112
User 72046 does not improve AUC. Reverting changes.
Training on augumented user 63281 2/50 current_auc = 0.7657145948285189
User 63281 AUC after training: 0.7656604998377151
User 63281 does not improve AUC. Reverting changes.
Training on augumented user 124050 3/50 current_auc = 0.7657145948285189
User 124050 AUC after training: 0.7657686898193228
User 124050 improves AUC. Keeping the model.
Training on augumented user 47536 4/50 current_auc = 0.7657686898193228
User 47536 AUC after training: 0.7652818349020881
User 47536 does not improve AUC. Reverting changes.
Training on augumented user 18905 5/50 current_auc = 0.7657686898193228
User 18905 AUC after training: 0.7654982148653035
User 18905 does not improve AUC. Reverting changes.
Training on augumented user 63297 6/50 current_auc = 0.7657686898193228
User 63297 AUC after training: 0.7654441198744996
User 63297 does not improve AUC. Reverting changes.
Training on augumented user 136722 7/50 current_auc = 0.7657686898193228
User 136722 AUC after training: 0.7651736449204805
User 136722 does not improve AUC. Reverting changes.
Training on augumented user 37587 8/50 current_auc = 0.7657686898193228
User 37587 AUC after training: 0.765335929892892
User 37587 does not improve AUC. Reverting changes.
Training on augumented user 30430 9/50 current_auc = 0.7657686898193228
User 30430 AUC after training: 0.7652277399112842
User 30430 does not improve AUC. Reverting changes.
Training on augumented user 63204 10/50 current_auc = 0.7657686898193228
User 63204 AUC after training: 0.7659309747917343
User 63204 improves AUC. Keeping the model.
Training on augumented user 118541 11/50 current_auc = 0.7659309747917343
User 118541 AUC after training: 0.7656064048469112
User 118541 does not improve AUC. Reverting changes.
Training on augumented user 11210 12/50 current_auc = 0.7659309747917343
User 11210 AUC after training: 0.7659309747917343
User 11210 does not improve AUC. Reverting changes.
Training on augumented user 120338 13/50 current_auc = 0.7659309747917343
User 120338 AUC after training: 0.7653900248836958
User 120338 does not improve AUC. Reverting changes.
Training on augumented user 116157 14/50 current_auc = 0.7659309747917343
User 116157 AUC after training: 0.7655523098561073
User 116157 does not improve AUC. Reverting changes.
Training on augumented user 6086 15/50 current_auc = 0.7659309747917343
User 6086 AUC after training: 0.7663637347181651
User 6086 improves AUC. Keeping the model.
Training on augumented user 136829 16/50 current_auc = 0.7663637347181651
User 136829 AUC after training: 0.7659850697825381
User 136829 does not improve AUC. Reverting changes.
Training on augumented user 81118 17/50 current_auc = 0.7663637347181651
User 81118 AUC after training: 0.7660932597641458
User 81118 does not improve AUC. Reverting changes.
Training on augumented user 47368 18/50 current_auc = 0.7663637347181651
User 47368 AUC after training: 0.766039164773342
User 47368 does not improve AUC. Reverting changes.
Training on augumented user 3870 19/50 current_auc = 0.7663637347181651
User 3870 AUC after training: 0.7660932597641459
User 3870 does not improve AUC. Reverting changes.
Training on augumented user 55236 20/50 current_auc = 0.7663637347181651
User 55236 AUC after training: 0.7666342096721844
User 55236 improves AUC. Keeping the model.
Training on augumented user 40951 21/50 current_auc = 0.7666342096721844
User 40951 AUC after training: 0.7662014497457535
User 40951 does not improve AUC. Reverting changes.
Training on augumented user 37807 22/50 current_auc = 0.7666342096721844
User 37807 AUC after training: 0.7659850697825382
User 37807 does not improve AUC. Reverting changes.
Training on augumented user 30014 23/50 current_auc = 0.7666342096721844
User 30014 AUC after training: 0.7666342096721843
User 30014 does not improve AUC. Reverting changes.
Training on augumented user 6290 24/50 current_auc = 0.7666342096721844
User 6290 AUC after training: 0.766417829708969
User 6290 does not improve AUC. Reverting changes.
Training on augumented user 129098 25/50 current_auc = 0.7666342096721844
User 129098 AUC after training: 0.764957264957265
User 129098 does not improve AUC. Reverting changes.
Training on augumented user 123212 26/50 current_auc = 0.7666342096721844
User 123212 AUC after training: 0.7663096397273613
User 123212 does not improve AUC. Reverting changes.
Training on augumented user 27950 27/50 current_auc = 0.7666342096721844
User 27950 AUC after training: 0.766796494644596
User 27950 improves AUC. Keeping the model.
Training on augumented user 64138 28/50 current_auc = 0.766796494644596
User 64138 AUC after training: 0.7667423996537921
User 64138 does not improve AUC. Reverting changes.
Training on augumented user 76901 29/50 current_auc = 0.766796494644596
User 76901 AUC after training: 0.7669587796170074
User 76901 improves AUC. Keeping the model.
Training on augumented user 90796 30/50 current_auc = 0.7669587796170074
User 90796 AUC after training: 0.7672292545710268
User 90796 improves AUC. Keeping the model.
Training on augumented user 2633 31/50 current_auc = 0.7672292545710268
User 2633 AUC after training: 0.7667423996537921
User 2633 does not improve AUC. Reverting changes.
Training on augumented user 76599 32/50 current_auc = 0.7672292545710268
User 76599 AUC after training: 0.7670669695986152
User 76599 does not improve AUC. Reverting changes.
Training on augumented user 90282 33/50 current_auc = 0.7672292545710268
User 90282 AUC after training: 0.7670128746078113
User 90282 does not improve AUC. Reverting changes.
Training on augumented user 116229 34/50 current_auc = 0.7672292545710268
User 116229 AUC after training: 0.7668505896353998
User 116229 does not improve AUC. Reverting changes.
Training on augumented user 42245 35/50 current_auc = 0.7672292545710268
User 42245 AUC after training: 0.7675538245158499
User 42245 improves AUC. Keeping the model.
Training on augumented user 76988 36/50 current_auc = 0.7675538245158499
User 76988 AUC after training: 0.7677161094882614
User 76988 improves AUC. Keeping the model.
Training on augumented user 1327 37/50 current_auc = 0.7677161094882614
User 1327 AUC after training: 0.7671751595802229
User 1327 does not improve AUC. Reverting changes.
Training on augumented user 29309 38/50 current_auc = 0.7677161094882614
User 29309 AUC after training: 0.7674997295250459
User 29309 does not improve AUC. Reverting changes.
Training on augumented user 85146 39/50 current_auc = 0.7677161094882614
User 85146 AUC after training: 0.7673915395434384
User 85146 does not improve AUC. Reverting changes.
Training on augumented user 75246 40/50 current_auc = 0.7677161094882614
User 75246 AUC after training: 0.7677161094882614
User 75246 does not improve AUC. Reverting changes.
Training on augumented user 115796 41/50 current_auc = 0.7677161094882614
User 115796 AUC after training: 0.767499729525046
User 115796 does not improve AUC. Reverting changes.
Training on augumented user 98944 42/50 current_auc = 0.7677161094882614
User 98944 AUC after training: 0.7672833495618305
User 98944 does not improve AUC. Reverting changes.
Training on augumented user 25005 43/50 current_auc = 0.7677161094882614
User 25005 AUC after training: 0.7673374445526345
User 25005 does not improve AUC. Reverting changes.
Training on augumented user 18869 44/50 current_auc = 0.7677161094882614
User 18869 AUC after training: 0.7675538245158499
User 18869 does not improve AUC. Reverting changes.
Training on augumented user 45460 45/50 current_auc = 0.7677161094882614
User 45460 AUC after training: 0.7673374445526345
User 45460 does not improve AUC. Reverting changes.
Training on augumented user 36222 46/50 current_auc = 0.7677161094882614
User 36222 AUC after training: 0.7677972519744672
User 36222 improves AUC. Keeping the model.
Training on augumented user 91348 47/50 current_auc = 0.7677972519744672
User 91348 AUC after training: 0.7651195499296765
User 91348 does not improve AUC. Reverting changes.
Training on augumented user 57724 48/50 current_auc = 0.7677972519744672
User 57724 AUC after training: 0.7679324894514767
User 57724 improves AUC. Keeping the model.
Training on augumented user 119617 49/50 current_auc = 0.7679324894514767
User 119617 AUC after training: 0.7678242994698691
User 119617 does not improve AUC. Reverting changes.
[2024-12-02 18:37:55.849393] start test user 44321 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:56.286320] start test user 44321 110/568 recall augumented users by random, augumented_users = [19575, 30785, 95953, 108796, 34748, 50324, 91736, 41246, 115331, 64325, 115117, 105299, 13845, 120316, 103344, 129512, 28680, 61684, 137751, 25306, 126228, 35801, 21935, 88905, 16112, 126363, 43891, 90856, 14292, 25067, 76944, 100733, 27357, 29850, 137307, 120355, 85961, 8219, 132134, 10215, 26897, 2002, 106295, 8291, 92490, 49908, 91906, 20313, 113877, 42970]
[2024-12-02 18:37:56.301068] user = 44321 Cloud 110/568
[2024-12-02 18:37:56.310157] user = 44321 Local 110/568
[2024-12-02 18:37:56.410074] user = 44321 Local+ 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:58.933710] user = 44321 MPDA- 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 19575 0/50 current_auc = 0.5
User 19575 AUC after training: 0.5
User 19575 does not improve AUC. Reverting changes.
Training on augumented user 30785 1/50 current_auc = 0.5
User 30785 AUC after training: 0.5
User 30785 does not improve AUC. Reverting changes.
Training on augumented user 95953 2/50 current_auc = 0.5
User 95953 AUC after training: 0.5
User 95953 does not improve AUC. Reverting changes.
Training on augumented user 108796 3/50 current_auc = 0.5
User 108796 AUC after training: 0.5
User 108796 does not improve AUC. Reverting changes.
Training on augumented user 34748 4/50 current_auc = 0.5
User 34748 AUC after training: 0.5
User 34748 does not improve AUC. Reverting changes.
Training on augumented user 50324 5/50 current_auc = 0.5
User 50324 AUC after training: 0.5
User 50324 does not improve AUC. Reverting changes.
Training on augumented user 91736 6/50 current_auc = 0.5
User 91736 AUC after training: 0.5
User 91736 does not improve AUC. Reverting changes.
Training on augumented user 41246 7/50 current_auc = 0.5
User 41246 AUC after training: 0.5277777777777778
User 41246 improves AUC. Keeping the model.
Training on augumented user 115331 8/50 current_auc = 0.5277777777777778
User 115331 AUC after training: 0.5277777777777778
User 115331 does not improve AUC. Reverting changes.
Training on augumented user 64325 9/50 current_auc = 0.5277777777777778
User 64325 AUC after training: 0.5277777777777778
User 64325 does not improve AUC. Reverting changes.
Training on augumented user 115117 10/50 current_auc = 0.5277777777777778
User 115117 AUC after training: 0.5
User 115117 does not improve AUC. Reverting changes.
Training on augumented user 105299 11/50 current_auc = 0.5277777777777778
User 105299 AUC after training: 0.5277777777777778
User 105299 does not improve AUC. Reverting changes.
Training on augumented user 13845 12/50 current_auc = 0.5277777777777778
User 13845 AUC after training: 0.5277777777777778
User 13845 does not improve AUC. Reverting changes.
Training on augumented user 120316 13/50 current_auc = 0.5277777777777778
User 120316 AUC after training: 0.5277777777777778
User 120316 does not improve AUC. Reverting changes.
Training on augumented user 103344 14/50 current_auc = 0.5277777777777778
User 103344 AUC after training: 0.5277777777777778
User 103344 does not improve AUC. Reverting changes.
Training on augumented user 129512 15/50 current_auc = 0.5277777777777778
User 129512 AUC after training: 0.5
User 129512 does not improve AUC. Reverting changes.
Training on augumented user 28680 16/50 current_auc = 0.5277777777777778
User 28680 AUC after training: 0.5277777777777778
User 28680 does not improve AUC. Reverting changes.
Training on augumented user 61684 17/50 current_auc = 0.5277777777777778
User 61684 AUC after training: 0.5
User 61684 does not improve AUC. Reverting changes.
Training on augumented user 137751 18/50 current_auc = 0.5277777777777778
User 137751 AUC after training: 0.5
User 137751 does not improve AUC. Reverting changes.
Training on augumented user 25306 19/50 current_auc = 0.5277777777777778
User 25306 AUC after training: 0.5277777777777778
User 25306 does not improve AUC. Reverting changes.
Training on augumented user 126228 20/50 current_auc = 0.5277777777777778
User 126228 AUC after training: 0.5277777777777778
User 126228 does not improve AUC. Reverting changes.
Training on augumented user 35801 21/50 current_auc = 0.5277777777777778
User 35801 AUC after training: 0.5
User 35801 does not improve AUC. Reverting changes.
Training on augumented user 21935 22/50 current_auc = 0.5277777777777778
User 21935 AUC after training: 0.5277777777777778
User 21935 does not improve AUC. Reverting changes.
Training on augumented user 88905 23/50 current_auc = 0.5277777777777778
User 88905 AUC after training: 0.5277777777777778
User 88905 does not improve AUC. Reverting changes.
Training on augumented user 16112 24/50 current_auc = 0.5277777777777778
User 16112 AUC after training: 0.5
User 16112 does not improve AUC. Reverting changes.
Training on augumented user 126363 25/50 current_auc = 0.5277777777777778
User 126363 AUC after training: 0.5
User 126363 does not improve AUC. Reverting changes.
Training on augumented user 43891 26/50 current_auc = 0.5277777777777778
User 43891 AUC after training: 0.5277777777777778
User 43891 does not improve AUC. Reverting changes.
Training on augumented user 90856 27/50 current_auc = 0.5277777777777778
User 90856 AUC after training: 0.5277777777777778
User 90856 does not improve AUC. Reverting changes.
Training on augumented user 14292 28/50 current_auc = 0.5277777777777778
User 14292 AUC after training: 0.5277777777777778
User 14292 does not improve AUC. Reverting changes.
Training on augumented user 25067 29/50 current_auc = 0.5277777777777778
User 25067 AUC after training: 0.5277777777777778
User 25067 does not improve AUC. Reverting changes.
Training on augumented user 76944 30/50 current_auc = 0.5277777777777778
User 76944 AUC after training: 0.5277777777777778
User 76944 does not improve AUC. Reverting changes.
Training on augumented user 100733 31/50 current_auc = 0.5277777777777778
User 100733 AUC after training: 0.5277777777777778
User 100733 does not improve AUC. Reverting changes.
Training on augumented user 27357 32/50 current_auc = 0.5277777777777778
User 27357 AUC after training: 0.5
User 27357 does not improve AUC. Reverting changes.
Training on augumented user 29850 33/50 current_auc = 0.5277777777777778
User 29850 AUC after training: 0.5277777777777778
User 29850 does not improve AUC. Reverting changes.
Training on augumented user 137307 34/50 current_auc = 0.5277777777777778
User 137307 AUC after training: 0.5277777777777778
User 137307 does not improve AUC. Reverting changes.
Training on augumented user 120355 35/50 current_auc = 0.5277777777777778
User 120355 AUC after training: 0.5
User 120355 does not improve AUC. Reverting changes.
Training on augumented user 85961 36/50 current_auc = 0.5277777777777778
User 85961 AUC after training: 0.5277777777777778
User 85961 does not improve AUC. Reverting changes.
Training on augumented user 8219 37/50 current_auc = 0.5277777777777778
User 8219 AUC after training: 0.5277777777777778
User 8219 does not improve AUC. Reverting changes.
Training on augumented user 132134 38/50 current_auc = 0.5277777777777778
User 132134 AUC after training: 0.5277777777777778
User 132134 does not improve AUC. Reverting changes.
Training on augumented user 10215 39/50 current_auc = 0.5277777777777778
User 10215 AUC after training: 0.5277777777777778
User 10215 does not improve AUC. Reverting changes.
Training on augumented user 26897 40/50 current_auc = 0.5277777777777778
User 26897 AUC after training: 0.5
User 26897 does not improve AUC. Reverting changes.
Training on augumented user 2002 41/50 current_auc = 0.5277777777777778
User 2002 AUC after training: 0.5277777777777778
User 2002 does not improve AUC. Reverting changes.
Training on augumented user 106295 42/50 current_auc = 0.5277777777777778
User 106295 AUC after training: 0.5
User 106295 does not improve AUC. Reverting changes.
Training on augumented user 8291 43/50 current_auc = 0.5277777777777778
User 8291 AUC after training: 0.5277777777777778
User 8291 does not improve AUC. Reverting changes.
Training on augumented user 92490 44/50 current_auc = 0.5277777777777778
User 92490 AUC after training: 0.5
User 92490 does not improve AUC. Reverting changes.
Training on augumented user 49908 45/50 current_auc = 0.5277777777777778
User 49908 AUC after training: 0.5277777777777778
User 49908 does not improve AUC. Reverting changes.
Training on augumented user 91906 46/50 current_auc = 0.5277777777777778
User 91906 AUC after training: 0.5277777777777778
User 91906 does not improve AUC. Reverting changes.
Training on augumented user 20313 47/50 current_auc = 0.5277777777777778
User 20313 AUC after training: 0.5
User 20313 does not improve AUC. Reverting changes.
Training on augumented user 113877 48/50 current_auc = 0.5277777777777778
User 113877 AUC after training: 0.5277777777777778
User 113877 does not improve AUC. Reverting changes.
Training on augumented user 42970 49/50 current_auc = 0.5277777777777778
User 42970 AUC after training: 0.5277777777777778
User 42970 does not improve AUC. Reverting changes.
[2024-12-02 18:38:28.801456] start test user 44341 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:29.214739] start test user 44341 111/568 recall augumented users by random, augumented_users = [102885, 48314, 5214, 20675, 44688, 15741, 69376, 108602, 59699, 27404, 134786, 5280, 121003, 29236, 102616, 36658, 90451, 24075, 16877, 101596, 97929, 132832, 133050, 12997, 126219, 26337, 102782, 119166, 88476, 63100, 61775, 30336, 120140, 18199, 121094, 94257, 15180, 78107, 102473, 1865, 1715, 116972, 18193, 119207, 39023, 24028, 92851, 33572, 9107, 36179]
[2024-12-02 18:38:29.230352] user = 44341 Cloud 111/568
[2024-12-02 18:38:29.251470] user = 44341 Local 111/568
[2024-12-02 18:38:29.365996] user = 44341 Local+ 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:31.429770] user = 44341 MPDA- 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6927515833919775
Training on augumented user 102885 0/50 current_auc = 0.6927515833919775
User 102885 AUC after training: 0.6926108374384237
User 102885 does not improve AUC. Reverting changes.
Training on augumented user 48314 1/50 current_auc = 0.6927515833919775
User 48314 AUC after training: 0.692329345531316
User 48314 does not improve AUC. Reverting changes.
Training on augumented user 5214 2/50 current_auc = 0.6927515833919775
User 5214 AUC after training: 0.6925404644616469
User 5214 does not improve AUC. Reverting changes.
Training on augumented user 20675 3/50 current_auc = 0.6927515833919775
User 20675 AUC after training: 0.6921182266009851
User 20675 does not improve AUC. Reverting changes.
Training on augumented user 44688 4/50 current_auc = 0.6927515833919775
User 44688 AUC after training: 0.6929627023223082
User 44688 improves AUC. Keeping the model.
Training on augumented user 15741 5/50 current_auc = 0.6929627023223082
User 15741 AUC after training: 0.6930330752990852
User 15741 improves AUC. Keeping the model.
Training on augumented user 69376 6/50 current_auc = 0.6930330752990852
User 69376 AUC after training: 0.6921885995777621
User 69376 does not improve AUC. Reverting changes.
Training on augumented user 108602 7/50 current_auc = 0.6930330752990852
User 108602 AUC after training: 0.6926812104152005
User 108602 does not improve AUC. Reverting changes.
Training on augumented user 59699 8/50 current_auc = 0.6930330752990852
User 59699 AUC after training: 0.6926812104152006
User 59699 does not improve AUC. Reverting changes.
Training on augumented user 27404 9/50 current_auc = 0.6930330752990852
User 27404 AUC after training: 0.6935256861365237
User 27404 improves AUC. Keeping the model.
Training on augumented user 134786 10/50 current_auc = 0.6935256861365237
User 134786 AUC after training: 0.693103448275862
User 134786 does not improve AUC. Reverting changes.
Training on augumented user 5280 11/50 current_auc = 0.6935256861365237
User 5280 AUC after training: 0.6931738212526389
User 5280 does not improve AUC. Reverting changes.
Training on augumented user 121003 12/50 current_auc = 0.6935256861365237
User 121003 AUC after training: 0.6936664320900774
User 121003 improves AUC. Keeping the model.
Training on augumented user 29236 13/50 current_auc = 0.6936664320900774
User 29236 AUC after training: 0.6938775510204082
User 29236 improves AUC. Keeping the model.
Training on augumented user 102616 14/50 current_auc = 0.6938775510204082
User 102616 AUC after training: 0.6932441942294159
User 102616 does not improve AUC. Reverting changes.
Training on augumented user 36658 15/50 current_auc = 0.6938775510204082
User 36658 AUC after training: 0.6933849401829697
User 36658 does not improve AUC. Reverting changes.
Training on augumented user 90451 16/50 current_auc = 0.6938775510204082
User 90451 AUC after training: 0.6932441942294161
User 90451 does not improve AUC. Reverting changes.
Training on augumented user 24075 17/50 current_auc = 0.6938775510204082
User 24075 AUC after training: 0.6937368050668544
User 24075 does not improve AUC. Reverting changes.
Training on augumented user 16877 18/50 current_auc = 0.6938775510204082
User 16877 AUC after training: 0.6931034482758622
User 16877 does not improve AUC. Reverting changes.
Training on augumented user 101596 19/50 current_auc = 0.6938775510204082
User 101596 AUC after training: 0.6936664320900774
User 101596 does not improve AUC. Reverting changes.
Training on augumented user 97929 20/50 current_auc = 0.6938775510204082
User 97929 AUC after training: 0.6934553131597467
User 97929 does not improve AUC. Reverting changes.
Training on augumented user 132832 21/50 current_auc = 0.6938775510204082
User 132832 AUC after training: 0.6934553131597465
User 132832 does not improve AUC. Reverting changes.
Training on augumented user 133050 22/50 current_auc = 0.6938775510204082
User 133050 AUC after training: 0.693244194229416
User 133050 does not improve AUC. Reverting changes.
Training on augumented user 12997 23/50 current_auc = 0.6938775510204082
User 12997 AUC after training: 0.6938775510204083
User 12997 improves AUC. Keeping the model.
Training on augumented user 126219 24/50 current_auc = 0.6938775510204083
User 126219 AUC after training: 0.6930330752990851
User 126219 does not improve AUC. Reverting changes.
Training on augumented user 26337 25/50 current_auc = 0.6938775510204083
User 26337 AUC after training: 0.6925404644616466
User 26337 does not improve AUC. Reverting changes.
Training on augumented user 102782 26/50 current_auc = 0.6938775510204083
User 102782 AUC after training: 0.6934553131597467
User 102782 does not improve AUC. Reverting changes.
Training on augumented user 119166 27/50 current_auc = 0.6938775510204083
User 119166 AUC after training: 0.6934553131597466
User 119166 does not improve AUC. Reverting changes.
Training on augumented user 88476 28/50 current_auc = 0.6938775510204083
User 88476 AUC after training: 0.6933145672061929
User 88476 does not improve AUC. Reverting changes.
Training on augumented user 63100 29/50 current_auc = 0.6938775510204083
User 63100 AUC after training: 0.6933849401829698
User 63100 does not improve AUC. Reverting changes.
Training on augumented user 61775 30/50 current_auc = 0.6938775510204083
User 61775 AUC after training: 0.6928923293455314
User 61775 does not improve AUC. Reverting changes.
Training on augumented user 30336 31/50 current_auc = 0.6938775510204083
User 30336 AUC after training: 0.6928923293455314
User 30336 does not improve AUC. Reverting changes.
Training on augumented user 120140 32/50 current_auc = 0.6938775510204083
User 120140 AUC after training: 0.693103448275862
User 120140 does not improve AUC. Reverting changes.
Training on augumented user 18199 33/50 current_auc = 0.6938775510204083
User 18199 AUC after training: 0.6927515833919775
User 18199 does not improve AUC. Reverting changes.
Training on augumented user 121094 34/50 current_auc = 0.6938775510204083
User 121094 AUC after training: 0.6929627023223082
User 121094 does not improve AUC. Reverting changes.
Training on augumented user 94257 35/50 current_auc = 0.6938775510204083
User 94257 AUC after training: 0.6929627023223082
User 94257 does not improve AUC. Reverting changes.
Training on augumented user 15180 36/50 current_auc = 0.6938775510204083
User 15180 AUC after training: 0.6935960591133006
User 15180 does not improve AUC. Reverting changes.
Training on augumented user 78107 37/50 current_auc = 0.6938775510204083
User 78107 AUC after training: 0.6935960591133006
User 78107 does not improve AUC. Reverting changes.
Training on augumented user 102473 38/50 current_auc = 0.6938775510204083
User 102473 AUC after training: 0.693173821252639
User 102473 does not improve AUC. Reverting changes.
Training on augumented user 1865 39/50 current_auc = 0.6938775510204083
User 1865 AUC after training: 0.693103448275862
User 1865 does not improve AUC. Reverting changes.
Training on augumented user 1715 40/50 current_auc = 0.6938775510204083
User 1715 AUC after training: 0.6921885995777621
User 1715 does not improve AUC. Reverting changes.
Training on augumented user 116972 41/50 current_auc = 0.6938775510204083
User 116972 AUC after training: 0.6933849401829697
User 116972 does not improve AUC. Reverting changes.
Training on augumented user 18193 42/50 current_auc = 0.6938775510204083
User 18193 AUC after training: 0.693244194229416
User 18193 does not improve AUC. Reverting changes.
Training on augumented user 119207 43/50 current_auc = 0.6938775510204083
User 119207 AUC after training: 0.6937368050668544
User 119207 does not improve AUC. Reverting changes.
Training on augumented user 39023 44/50 current_auc = 0.6938775510204083
User 39023 AUC after training: 0.6940886699507389
User 39023 improves AUC. Keeping the model.
Training on augumented user 24028 45/50 current_auc = 0.6940886699507389
User 24028 AUC after training: 0.6934553131597465
User 24028 does not improve AUC. Reverting changes.
Training on augumented user 92851 46/50 current_auc = 0.6940886699507389
User 92851 AUC after training: 0.693103448275862
User 92851 does not improve AUC. Reverting changes.
Training on augumented user 33572 47/50 current_auc = 0.6940886699507389
User 33572 AUC after training: 0.6937368050668544
User 33572 does not improve AUC. Reverting changes.
Training on augumented user 9107 48/50 current_auc = 0.6940886699507389
User 9107 AUC after training: 0.6933145672061929
User 9107 does not improve AUC. Reverting changes.
Training on augumented user 36179 49/50 current_auc = 0.6940886699507389
User 36179 AUC after training: 0.6938071780436312
User 36179 does not improve AUC. Reverting changes.
[2024-12-02 18:38:57.649686] start test user 44362 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:58.360622] start test user 44362 112/568 recall augumented users by random, augumented_users = [132908, 95024, 32652, 39377, 3554, 130579, 100038, 21846, 9298, 78262, 25104, 85530, 100987, 80165, 97878, 106598, 123117, 61566, 134708, 125036, 72605, 137879, 79066, 39443, 88563, 68392, 121130, 86500, 66520, 43196, 24542, 122116, 117039, 73880, 73976, 48127, 136497, 128623, 85538, 26850, 13840, 32203, 38837, 54073, 113376, 6407, 68366, 112347, 86446, 104120]
[2024-12-02 18:38:58.375026] user = 44362 Cloud 112/568
[2024-12-02 18:38:58.418308] user = 44362 Local 112/568
[2024-12-02 18:38:58.482748] user = 44362 Local+ 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:00.630117] user = 44362 MPDA- 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 132908 0/50 current_auc = 1.0
User 132908 AUC after training: 1.0
User 132908 does not improve AUC. Reverting changes.
Training on augumented user 95024 1/50 current_auc = 1.0
User 95024 AUC after training: 1.0
User 95024 does not improve AUC. Reverting changes.
Training on augumented user 32652 2/50 current_auc = 1.0
User 32652 AUC after training: 1.0
User 32652 does not improve AUC. Reverting changes.
Training on augumented user 39377 3/50 current_auc = 1.0
User 39377 AUC after training: 1.0
User 39377 does not improve AUC. Reverting changes.
Training on augumented user 3554 4/50 current_auc = 1.0
User 3554 AUC after training: 1.0
User 3554 does not improve AUC. Reverting changes.
Training on augumented user 130579 5/50 current_auc = 1.0
User 130579 AUC after training: 1.0
User 130579 does not improve AUC. Reverting changes.
Training on augumented user 100038 6/50 current_auc = 1.0
User 100038 AUC after training: 1.0
User 100038 does not improve AUC. Reverting changes.
Training on augumented user 21846 7/50 current_auc = 1.0
User 21846 AUC after training: 1.0
User 21846 does not improve AUC. Reverting changes.
Training on augumented user 9298 8/50 current_auc = 1.0
User 9298 AUC after training: 1.0
User 9298 does not improve AUC. Reverting changes.
Training on augumented user 78262 9/50 current_auc = 1.0
User 78262 AUC after training: 1.0
User 78262 does not improve AUC. Reverting changes.
Training on augumented user 25104 10/50 current_auc = 1.0
User 25104 AUC after training: 1.0
User 25104 does not improve AUC. Reverting changes.
Training on augumented user 85530 11/50 current_auc = 1.0
User 85530 AUC after training: 1.0
User 85530 does not improve AUC. Reverting changes.
Training on augumented user 100987 12/50 current_auc = 1.0
User 100987 AUC after training: 1.0
User 100987 does not improve AUC. Reverting changes.
Training on augumented user 80165 13/50 current_auc = 1.0
User 80165 AUC after training: 1.0
User 80165 does not improve AUC. Reverting changes.
Training on augumented user 97878 14/50 current_auc = 1.0
User 97878 AUC after training: 1.0
User 97878 does not improve AUC. Reverting changes.
Training on augumented user 106598 15/50 current_auc = 1.0
User 106598 AUC after training: 1.0
User 106598 does not improve AUC. Reverting changes.
Training on augumented user 123117 16/50 current_auc = 1.0
User 123117 AUC after training: 1.0
User 123117 does not improve AUC. Reverting changes.
Training on augumented user 61566 17/50 current_auc = 1.0
User 61566 AUC after training: 1.0
User 61566 does not improve AUC. Reverting changes.
Training on augumented user 134708 18/50 current_auc = 1.0
User 134708 AUC after training: 1.0
User 134708 does not improve AUC. Reverting changes.
Training on augumented user 125036 19/50 current_auc = 1.0
User 125036 AUC after training: 1.0
User 125036 does not improve AUC. Reverting changes.
Training on augumented user 72605 20/50 current_auc = 1.0
User 72605 AUC after training: 1.0
User 72605 does not improve AUC. Reverting changes.
Training on augumented user 137879 21/50 current_auc = 1.0
User 137879 AUC after training: 1.0
User 137879 does not improve AUC. Reverting changes.
Training on augumented user 79066 22/50 current_auc = 1.0
User 79066 AUC after training: 1.0
User 79066 does not improve AUC. Reverting changes.
Training on augumented user 39443 23/50 current_auc = 1.0
User 39443 AUC after training: 1.0
User 39443 does not improve AUC. Reverting changes.
Training on augumented user 88563 24/50 current_auc = 1.0
User 88563 AUC after training: 1.0
User 88563 does not improve AUC. Reverting changes.
Training on augumented user 68392 25/50 current_auc = 1.0
User 68392 AUC after training: 1.0
User 68392 does not improve AUC. Reverting changes.
Training on augumented user 121130 26/50 current_auc = 1.0
User 121130 AUC after training: 1.0
User 121130 does not improve AUC. Reverting changes.
Training on augumented user 86500 27/50 current_auc = 1.0
User 86500 AUC after training: 1.0
User 86500 does not improve AUC. Reverting changes.
Training on augumented user 66520 28/50 current_auc = 1.0
User 66520 AUC after training: 1.0
User 66520 does not improve AUC. Reverting changes.
Training on augumented user 43196 29/50 current_auc = 1.0
User 43196 AUC after training: 1.0
User 43196 does not improve AUC. Reverting changes.
Training on augumented user 24542 30/50 current_auc = 1.0
User 24542 AUC after training: 1.0
User 24542 does not improve AUC. Reverting changes.
Training on augumented user 122116 31/50 current_auc = 1.0
User 122116 AUC after training: 1.0
User 122116 does not improve AUC. Reverting changes.
Training on augumented user 117039 32/50 current_auc = 1.0
User 117039 AUC after training: 1.0
User 117039 does not improve AUC. Reverting changes.
Training on augumented user 73880 33/50 current_auc = 1.0
User 73880 AUC after training: 1.0
User 73880 does not improve AUC. Reverting changes.
Training on augumented user 73976 34/50 current_auc = 1.0
User 73976 AUC after training: 1.0
User 73976 does not improve AUC. Reverting changes.
Training on augumented user 48127 35/50 current_auc = 1.0
User 48127 AUC after training: 1.0
User 48127 does not improve AUC. Reverting changes.
Training on augumented user 136497 36/50 current_auc = 1.0
User 136497 AUC after training: 1.0
User 136497 does not improve AUC. Reverting changes.
Training on augumented user 128623 37/50 current_auc = 1.0
User 128623 AUC after training: 1.0
User 128623 does not improve AUC. Reverting changes.
Training on augumented user 85538 38/50 current_auc = 1.0
User 85538 AUC after training: 1.0
User 85538 does not improve AUC. Reverting changes.
Training on augumented user 26850 39/50 current_auc = 1.0
User 26850 AUC after training: 1.0
User 26850 does not improve AUC. Reverting changes.
Training on augumented user 13840 40/50 current_auc = 1.0
User 13840 AUC after training: 1.0
User 13840 does not improve AUC. Reverting changes.
Training on augumented user 32203 41/50 current_auc = 1.0
User 32203 AUC after training: 1.0
User 32203 does not improve AUC. Reverting changes.
Training on augumented user 38837 42/50 current_auc = 1.0
User 38837 AUC after training: 1.0
User 38837 does not improve AUC. Reverting changes.
Training on augumented user 54073 43/50 current_auc = 1.0
User 54073 AUC after training: 1.0
User 54073 does not improve AUC. Reverting changes.
Training on augumented user 113376 44/50 current_auc = 1.0
User 113376 AUC after training: 1.0
User 113376 does not improve AUC. Reverting changes.
Training on augumented user 6407 45/50 current_auc = 1.0
User 6407 AUC after training: 1.0
User 6407 does not improve AUC. Reverting changes.
Training on augumented user 68366 46/50 current_auc = 1.0
User 68366 AUC after training: 1.0
User 68366 does not improve AUC. Reverting changes.
Training on augumented user 112347 47/50 current_auc = 1.0
User 112347 AUC after training: 1.0
User 112347 does not improve AUC. Reverting changes.
Training on augumented user 86446 48/50 current_auc = 1.0
User 86446 AUC after training: 1.0
User 86446 does not improve AUC. Reverting changes.
Training on augumented user 104120 49/50 current_auc = 1.0
User 104120 AUC after training: 1.0
User 104120 does not improve AUC. Reverting changes.
[2024-12-02 18:39:26.063749] start test user 44365 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:26.482068] start test user 44365 113/568 recall augumented users by random, augumented_users = [29974, 30751, 101018, 72902, 7226, 57934, 6739, 47348, 134587, 8865, 79803, 56775, 64911, 90801, 89325, 92570, 113187, 43123, 93033, 135338, 22731, 114034, 17508, 83322, 23666, 39261, 65882, 75726, 3069, 65771, 119773, 122909, 4620, 110455, 67938, 36038, 45160, 123848, 11345, 104677, 25678, 62989, 75088, 100813, 105451, 113505, 89681, 5659, 57366, 100344]
[2024-12-02 18:39:26.496556] user = 44365 Cloud 113/568
[2024-12-02 18:39:26.506103] user = 44365 Local 113/568
[2024-12-02 18:39:26.564722] user = 44365 Local+ 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:29.181275] user = 44365 MPDA- 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6857142857142857
Training on augumented user 29974 0/50 current_auc = 0.6857142857142857
User 29974 AUC after training: 0.6857142857142857
User 29974 does not improve AUC. Reverting changes.
Training on augumented user 30751 1/50 current_auc = 0.6857142857142857
User 30751 AUC after training: 0.6857142857142857
User 30751 does not improve AUC. Reverting changes.
Training on augumented user 101018 2/50 current_auc = 0.6857142857142857
User 101018 AUC after training: 0.7142857142857143
User 101018 improves AUC. Keeping the model.
Training on augumented user 72902 3/50 current_auc = 0.7142857142857143
User 72902 AUC after training: 0.7142857142857143
User 72902 does not improve AUC. Reverting changes.
Training on augumented user 7226 4/50 current_auc = 0.7142857142857143
User 7226 AUC after training: 0.7142857142857143
User 7226 does not improve AUC. Reverting changes.
Training on augumented user 57934 5/50 current_auc = 0.7142857142857143
User 57934 AUC after training: 0.7142857142857143
User 57934 does not improve AUC. Reverting changes.
Training on augumented user 6739 6/50 current_auc = 0.7142857142857143
User 6739 AUC after training: 0.7142857142857143
User 6739 does not improve AUC. Reverting changes.
Training on augumented user 47348 7/50 current_auc = 0.7142857142857143
User 47348 AUC after training: 0.6857142857142857
User 47348 does not improve AUC. Reverting changes.
Training on augumented user 134587 8/50 current_auc = 0.7142857142857143
User 134587 AUC after training: 0.7142857142857143
User 134587 does not improve AUC. Reverting changes.
Training on augumented user 8865 9/50 current_auc = 0.7142857142857143
User 8865 AUC after training: 0.7142857142857143
User 8865 does not improve AUC. Reverting changes.
Training on augumented user 79803 10/50 current_auc = 0.7142857142857143
User 79803 AUC after training: 0.7142857142857143
User 79803 does not improve AUC. Reverting changes.
Training on augumented user 56775 11/50 current_auc = 0.7142857142857143
User 56775 AUC after training: 0.7142857142857143
User 56775 does not improve AUC. Reverting changes.
Training on augumented user 64911 12/50 current_auc = 0.7142857142857143
User 64911 AUC after training: 0.7142857142857143
User 64911 does not improve AUC. Reverting changes.
Training on augumented user 90801 13/50 current_auc = 0.7142857142857143
User 90801 AUC after training: 0.7142857142857143
User 90801 does not improve AUC. Reverting changes.
Training on augumented user 89325 14/50 current_auc = 0.7142857142857143
User 89325 AUC after training: 0.7142857142857143
User 89325 does not improve AUC. Reverting changes.
Training on augumented user 92570 15/50 current_auc = 0.7142857142857143
User 92570 AUC after training: 0.7142857142857143
User 92570 does not improve AUC. Reverting changes.
Training on augumented user 113187 16/50 current_auc = 0.7142857142857143
User 113187 AUC after training: 0.7142857142857143
User 113187 does not improve AUC. Reverting changes.
Training on augumented user 43123 17/50 current_auc = 0.7142857142857143
User 43123 AUC after training: 0.7142857142857143
User 43123 does not improve AUC. Reverting changes.
Training on augumented user 93033 18/50 current_auc = 0.7142857142857143
User 93033 AUC after training: 0.7142857142857143
User 93033 does not improve AUC. Reverting changes.
Training on augumented user 135338 19/50 current_auc = 0.7142857142857143
User 135338 AUC after training: 0.7142857142857143
User 135338 does not improve AUC. Reverting changes.
Training on augumented user 22731 20/50 current_auc = 0.7142857142857143
User 22731 AUC after training: 0.7142857142857143
User 22731 does not improve AUC. Reverting changes.
Training on augumented user 114034 21/50 current_auc = 0.7142857142857143
User 114034 AUC after training: 0.7142857142857143
User 114034 does not improve AUC. Reverting changes.
Training on augumented user 17508 22/50 current_auc = 0.7142857142857143
User 17508 AUC after training: 0.6857142857142857
User 17508 does not improve AUC. Reverting changes.
Training on augumented user 83322 23/50 current_auc = 0.7142857142857143
User 83322 AUC after training: 0.7142857142857143
User 83322 does not improve AUC. Reverting changes.
Training on augumented user 23666 24/50 current_auc = 0.7142857142857143
User 23666 AUC after training: 0.7142857142857143
User 23666 does not improve AUC. Reverting changes.
Training on augumented user 39261 25/50 current_auc = 0.7142857142857143
User 39261 AUC after training: 0.6857142857142857
User 39261 does not improve AUC. Reverting changes.
Training on augumented user 65882 26/50 current_auc = 0.7142857142857143
User 65882 AUC after training: 0.7142857142857143
User 65882 does not improve AUC. Reverting changes.
Training on augumented user 75726 27/50 current_auc = 0.7142857142857143
User 75726 AUC after training: 0.7142857142857143
User 75726 does not improve AUC. Reverting changes.
Training on augumented user 3069 28/50 current_auc = 0.7142857142857143
User 3069 AUC after training: 0.7142857142857143
User 3069 does not improve AUC. Reverting changes.
Training on augumented user 65771 29/50 current_auc = 0.7142857142857143
User 65771 AUC after training: 0.7142857142857143
User 65771 does not improve AUC. Reverting changes.
Training on augumented user 119773 30/50 current_auc = 0.7142857142857143
User 119773 AUC after training: 0.7142857142857143
User 119773 does not improve AUC. Reverting changes.
Training on augumented user 122909 31/50 current_auc = 0.7142857142857143
User 122909 AUC after training: 0.6857142857142857
User 122909 does not improve AUC. Reverting changes.
Training on augumented user 4620 32/50 current_auc = 0.7142857142857143
User 4620 AUC after training: 0.6857142857142857
User 4620 does not improve AUC. Reverting changes.
Training on augumented user 110455 33/50 current_auc = 0.7142857142857143
User 110455 AUC after training: 0.6857142857142857
User 110455 does not improve AUC. Reverting changes.
Training on augumented user 67938 34/50 current_auc = 0.7142857142857143
User 67938 AUC after training: 0.7142857142857143
User 67938 does not improve AUC. Reverting changes.
Training on augumented user 36038 35/50 current_auc = 0.7142857142857143
User 36038 AUC after training: 0.7142857142857143
User 36038 does not improve AUC. Reverting changes.
Training on augumented user 45160 36/50 current_auc = 0.7142857142857143
User 45160 AUC after training: 0.6857142857142857
User 45160 does not improve AUC. Reverting changes.
Training on augumented user 123848 37/50 current_auc = 0.7142857142857143
User 123848 AUC after training: 0.7142857142857143
User 123848 does not improve AUC. Reverting changes.
Training on augumented user 11345 38/50 current_auc = 0.7142857142857143
User 11345 AUC after training: 0.6857142857142857
User 11345 does not improve AUC. Reverting changes.
Training on augumented user 104677 39/50 current_auc = 0.7142857142857143
User 104677 AUC after training: 0.7142857142857143
User 104677 does not improve AUC. Reverting changes.
Training on augumented user 25678 40/50 current_auc = 0.7142857142857143
User 25678 AUC after training: 0.6857142857142857
User 25678 does not improve AUC. Reverting changes.
Training on augumented user 62989 41/50 current_auc = 0.7142857142857143
User 62989 AUC after training: 0.7142857142857143
User 62989 does not improve AUC. Reverting changes.
Training on augumented user 75088 42/50 current_auc = 0.7142857142857143
User 75088 AUC after training: 0.7142857142857143
User 75088 does not improve AUC. Reverting changes.
Training on augumented user 100813 43/50 current_auc = 0.7142857142857143
User 100813 AUC after training: 0.7142857142857143
User 100813 does not improve AUC. Reverting changes.
Training on augumented user 105451 44/50 current_auc = 0.7142857142857143
User 105451 AUC after training: 0.7142857142857143
User 105451 does not improve AUC. Reverting changes.
Training on augumented user 113505 45/50 current_auc = 0.7142857142857143
User 113505 AUC after training: 0.7142857142857143
User 113505 does not improve AUC. Reverting changes.
Training on augumented user 89681 46/50 current_auc = 0.7142857142857143
User 89681 AUC after training: 0.7142857142857143
User 89681 does not improve AUC. Reverting changes.
Training on augumented user 5659 47/50 current_auc = 0.7142857142857143
User 5659 AUC after training: 0.7142857142857143
User 5659 does not improve AUC. Reverting changes.
Training on augumented user 57366 48/50 current_auc = 0.7142857142857143
User 57366 AUC after training: 0.7142857142857143
User 57366 does not improve AUC. Reverting changes.
Training on augumented user 100344 49/50 current_auc = 0.7142857142857143
User 100344 AUC after training: 0.7142857142857143
User 100344 does not improve AUC. Reverting changes.
[2024-12-02 18:40:01.058494] start test user 44384 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:01.709001] start test user 44384 114/568 recall augumented users by random, augumented_users = [132652, 31284, 75202, 105033, 91357, 137391, 92951, 132486, 122987, 65605, 77721, 36296, 63257, 69458, 92339, 85219, 132787, 128081, 4090, 47029, 10349, 121118, 37687, 9638, 43679, 77759, 29871, 62535, 85081, 7913, 97789, 64099, 42606, 62598, 106822, 108482, 124094, 41306, 821, 90970, 112187, 40903, 84757, 131819, 110522, 1756, 74023, 130580, 21516, 57001]
[2024-12-02 18:40:01.751670] user = 44384 Cloud 114/568
[2024-12-02 18:40:01.823161] user = 44384 Local 114/568
[2024-12-02 18:40:02.117497] user = 44384 Local+ 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:05.296295] user = 44384 MPDA- 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7835940184346941
Training on augumented user 132652 0/50 current_auc = 0.7835940184346941
User 132652 AUC after training: 0.7836164268961292
User 132652 improves AUC. Keeping the model.
Training on augumented user 31284 1/50 current_auc = 0.7836164268961292
User 31284 AUC after training: 0.7835342625375341
User 31284 does not improve AUC. Reverting changes.
Training on augumented user 75202 2/50 current_auc = 0.7836164268961292
User 75202 AUC after training: 0.7836761827932894
User 75202 improves AUC. Keeping the model.
Training on augumented user 105033 3/50 current_auc = 0.7836761827932894
User 105033 AUC after training: 0.7835790794604043
User 105033 does not improve AUC. Reverting changes.
Training on augumented user 91357 4/50 current_auc = 0.7836761827932894
User 91357 AUC after training: 0.7833475253589088
User 91357 does not improve AUC. Reverting changes.
Training on augumented user 137391 5/50 current_auc = 0.7836761827932894
User 137391 AUC after training: 0.7836014879218393
User 137391 does not improve AUC. Reverting changes.
Training on augumented user 92951 6/50 current_auc = 0.7836761827932894
User 92951 AUC after training: 0.7835940184346942
User 92951 does not improve AUC. Reverting changes.
Training on augumented user 132486 7/50 current_auc = 0.7836761827932894
User 132486 AUC after training: 0.7837956945876097
User 132486 improves AUC. Keeping the model.
Training on augumented user 122987 8/50 current_auc = 0.7837956945876097
User 122987 AUC after training: 0.7838031640747547
User 122987 improves AUC. Keeping the model.
Training on augumented user 65605 9/50 current_auc = 0.7838031640747547
User 65605 AUC after training: 0.7838554504847696
User 65605 improves AUC. Keeping the model.
Training on augumented user 77721 10/50 current_auc = 0.7838554504847696
User 77721 AUC after training: 0.7837060607418695
User 77721 does not improve AUC. Reverting changes.
Training on augumented user 36296 11/50 current_auc = 0.7838554504847696
User 36296 AUC after training: 0.7838778589462048
User 36296 improves AUC. Keeping the model.
Training on augumented user 63257 12/50 current_auc = 0.7838778589462048
User 63257 AUC after training: 0.7838031640747546
User 63257 does not improve AUC. Reverting changes.
Training on augumented user 69458 13/50 current_auc = 0.7838778589462048
User 69458 AUC after training: 0.7839450843305099
User 69458 improves AUC. Keeping the model.
Training on augumented user 92339 14/50 current_auc = 0.7839450843305099
User 92339 AUC after training: 0.7837956945876097
User 92339 does not improve AUC. Reverting changes.
Training on augumented user 85219 15/50 current_auc = 0.7839450843305099
User 85219 AUC after training: 0.7836238963832743
User 85219 does not improve AUC. Reverting changes.
Training on augumented user 132787 16/50 current_auc = 0.7839450843305099
User 132787 AUC after training: 0.7838405115104797
User 132787 does not improve AUC. Reverting changes.
Training on augumented user 128081 17/50 current_auc = 0.7839450843305099
User 128081 AUC after training: 0.7837956945876097
User 128081 does not improve AUC. Reverting changes.
Training on augumented user 4090 18/50 current_auc = 0.7839450843305099
User 4090 AUC after training: 0.7836014879218394
User 4090 does not improve AUC. Reverting changes.
Training on augumented user 47029 19/50 current_auc = 0.7839450843305099
User 47029 AUC after training: 0.7839450843305098
User 47029 does not improve AUC. Reverting changes.
Training on augumented user 10349 20/50 current_auc = 0.7839450843305099
User 10349 AUC after training: 0.7838106335618997
User 10349 does not improve AUC. Reverting changes.
Training on augumented user 121118 21/50 current_auc = 0.7839450843305099
User 121118 AUC after training: 0.7838554504847696
User 121118 does not improve AUC. Reverting changes.
Training on augumented user 37687 22/50 current_auc = 0.7839450843305099
User 37687 AUC after training: 0.7838703894590597
User 37687 does not improve AUC. Reverting changes.
Training on augumented user 9638 23/50 current_auc = 0.7839450843305099
User 9638 AUC after training: 0.7836911217675795
User 9638 does not improve AUC. Reverting changes.
Training on augumented user 43679 24/50 current_auc = 0.7839450843305099
User 43679 AUC after training: 0.7839077368947848
User 43679 does not improve AUC. Reverting changes.
Training on augumented user 77759 25/50 current_auc = 0.7839450843305099
User 77759 AUC after training: 0.7838479809976246
User 77759 does not improve AUC. Reverting changes.
Training on augumented user 29871 26/50 current_auc = 0.7839450843305099
User 29871 AUC after training: 0.7837807556133196
User 29871 does not improve AUC. Reverting changes.
Training on augumented user 62535 27/50 current_auc = 0.7839450843305099
User 62535 AUC after training: 0.7838629199719147
User 62535 does not improve AUC. Reverting changes.
Training on augumented user 85081 28/50 current_auc = 0.7839450843305099
User 85081 AUC after training: 0.7839600233047997
User 85081 improves AUC. Keeping the model.
Training on augumented user 7913 29/50 current_auc = 0.7839600233047997
User 7913 AUC after training: 0.7838853284333497
User 7913 does not improve AUC. Reverting changes.
Training on augumented user 97789 30/50 current_auc = 0.7839600233047997
User 97789 AUC after training: 0.7839600233047999
User 97789 improves AUC. Keeping the model.
Training on augumented user 64099 31/50 current_auc = 0.7839600233047999
User 64099 AUC after training: 0.7839525538176548
User 64099 does not improve AUC. Reverting changes.
Training on augumented user 42606 32/50 current_auc = 0.7839600233047999
User 42606 AUC after training: 0.7839450843305098
User 42606 does not improve AUC. Reverting changes.
Training on augumented user 62598 33/50 current_auc = 0.7839600233047999
User 62598 AUC after training: 0.7838927979204947
User 62598 does not improve AUC. Reverting changes.
Training on augumented user 106822 34/50 current_auc = 0.7839600233047999
User 106822 AUC after training: 0.78406459612483
User 106822 improves AUC. Keeping the model.
Training on augumented user 108482 35/50 current_auc = 0.78406459612483
User 108482 AUC after training: 0.7838106335618996
User 108482 does not improve AUC. Reverting changes.
Training on augumented user 124094 36/50 current_auc = 0.78406459612483
User 124094 AUC after training: 0.7839376148433647
User 124094 does not improve AUC. Reverting changes.
Training on augumented user 41306 37/50 current_auc = 0.78406459612483
User 41306 AUC after training: 0.7839525538176548
User 41306 does not improve AUC. Reverting changes.
Training on augumented user 821 38/50 current_auc = 0.78406459612483
User 821 AUC after training: 0.7836985912547245
User 821 does not improve AUC. Reverting changes.
Training on augumented user 90970 39/50 current_auc = 0.78406459612483
User 90970 AUC after training: 0.7840496571505401
User 90970 does not improve AUC. Reverting changes.
Training on augumented user 112187 40/50 current_auc = 0.78406459612483
User 112187 AUC after training: 0.7839152063819299
User 112187 does not improve AUC. Reverting changes.
Training on augumented user 40903 41/50 current_auc = 0.78406459612483
User 40903 AUC after training: 0.7837956945876097
User 40903 does not improve AUC. Reverting changes.
Training on augumented user 84757 42/50 current_auc = 0.78406459612483
User 84757 AUC after training: 0.7838255725361897
User 84757 does not improve AUC. Reverting changes.
Training on augumented user 131819 43/50 current_auc = 0.78406459612483
User 131819 AUC after training: 0.7839152063819299
User 131819 does not improve AUC. Reverting changes.
Training on augumented user 110522 44/50 current_auc = 0.78406459612483
User 110522 AUC after training: 0.783937614843365
User 110522 does not improve AUC. Reverting changes.
Training on augumented user 1756 45/50 current_auc = 0.78406459612483
User 1756 AUC after training: 0.783997370740525
User 1756 does not improve AUC. Reverting changes.
Training on augumented user 74023 46/50 current_auc = 0.78406459612483
User 74023 AUC after training: 0.7838106335618996
User 74023 does not improve AUC. Reverting changes.
Training on augumented user 130580 47/50 current_auc = 0.78406459612483
User 130580 AUC after training: 0.78398990125338
User 130580 does not improve AUC. Reverting changes.
Training on augumented user 21516 48/50 current_auc = 0.78406459612483
User 21516 AUC after training: 0.7837882251004645
User 21516 does not improve AUC. Reverting changes.
Training on augumented user 57001 49/50 current_auc = 0.78406459612483
User 57001 AUC after training: 0.7838479809976249
User 57001 does not improve AUC. Reverting changes.
[2024-12-02 18:40:40.821465] start test user 44412 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:41.551038] start test user 44412 115/568 recall augumented users by random, augumented_users = [136898, 33638, 138044, 127345, 45015, 45951, 50764, 92922, 1902, 21549, 95505, 137104, 96543, 108342, 38145, 86881, 113634, 101129, 117213, 124245, 43696, 10100, 89078, 53950, 74873, 66661, 10093, 121016, 92114, 137759, 37947, 10158, 64608, 59988, 91220, 12109, 56991, 104917, 116836, 101818, 41214, 116707, 53210, 115922, 19307, 35374, 56232, 59507, 46048, 69509]
[2024-12-02 18:40:41.572313] user = 44412 Cloud 115/568
[2024-12-02 18:40:41.588448] user = 44412 Local 115/568
[2024-12-02 18:40:41.627279] user = 44412 Local+ 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:44.559171] user = 44412 MPDA- 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6969696969696969
Training on augumented user 136898 0/50 current_auc = 0.6969696969696969
User 136898 AUC after training: 0.6969696969696969
User 136898 does not improve AUC. Reverting changes.
Training on augumented user 33638 1/50 current_auc = 0.6969696969696969
User 33638 AUC after training: 0.6969696969696969
User 33638 does not improve AUC. Reverting changes.
Training on augumented user 138044 2/50 current_auc = 0.6969696969696969
User 138044 AUC after training: 0.6969696969696969
User 138044 does not improve AUC. Reverting changes.
Training on augumented user 127345 3/50 current_auc = 0.6969696969696969
User 127345 AUC after training: 0.6969696969696969
User 127345 does not improve AUC. Reverting changes.
Training on augumented user 45015 4/50 current_auc = 0.6969696969696969
User 45015 AUC after training: 0.6969696969696969
User 45015 does not improve AUC. Reverting changes.
Training on augumented user 45951 5/50 current_auc = 0.6969696969696969
User 45951 AUC after training: 0.6969696969696969
User 45951 does not improve AUC. Reverting changes.
Training on augumented user 50764 6/50 current_auc = 0.6969696969696969
User 50764 AUC after training: 0.6969696969696969
User 50764 does not improve AUC. Reverting changes.
Training on augumented user 92922 7/50 current_auc = 0.6969696969696969
User 92922 AUC after training: 0.6969696969696969
User 92922 does not improve AUC. Reverting changes.
Training on augumented user 1902 8/50 current_auc = 0.6969696969696969
User 1902 AUC after training: 0.6969696969696969
User 1902 does not improve AUC. Reverting changes.
Training on augumented user 21549 9/50 current_auc = 0.6969696969696969
User 21549 AUC after training: 0.6969696969696969
User 21549 does not improve AUC. Reverting changes.
Training on augumented user 95505 10/50 current_auc = 0.6969696969696969
User 95505 AUC after training: 0.6969696969696969
User 95505 does not improve AUC. Reverting changes.
Training on augumented user 137104 11/50 current_auc = 0.6969696969696969
User 137104 AUC after training: 0.6969696969696969
User 137104 does not improve AUC. Reverting changes.
Training on augumented user 96543 12/50 current_auc = 0.6969696969696969
User 96543 AUC after training: 0.6969696969696969
User 96543 does not improve AUC. Reverting changes.
Training on augumented user 108342 13/50 current_auc = 0.6969696969696969
User 108342 AUC after training: 0.6969696969696969
User 108342 does not improve AUC. Reverting changes.
Training on augumented user 38145 14/50 current_auc = 0.6969696969696969
User 38145 AUC after training: 0.6969696969696969
User 38145 does not improve AUC. Reverting changes.
Training on augumented user 86881 15/50 current_auc = 0.6969696969696969
User 86881 AUC after training: 0.6969696969696969
User 86881 does not improve AUC. Reverting changes.
Training on augumented user 113634 16/50 current_auc = 0.6969696969696969
User 113634 AUC after training: 0.6969696969696969
User 113634 does not improve AUC. Reverting changes.
Training on augumented user 101129 17/50 current_auc = 0.6969696969696969
User 101129 AUC after training: 0.6363636363636364
User 101129 does not improve AUC. Reverting changes.
Training on augumented user 117213 18/50 current_auc = 0.6969696969696969
User 117213 AUC after training: 0.6969696969696969
User 117213 does not improve AUC. Reverting changes.
Training on augumented user 124245 19/50 current_auc = 0.6969696969696969
User 124245 AUC after training: 0.6969696969696969
User 124245 does not improve AUC. Reverting changes.
Training on augumented user 43696 20/50 current_auc = 0.6969696969696969
User 43696 AUC after training: 0.6969696969696969
User 43696 does not improve AUC. Reverting changes.
Training on augumented user 10100 21/50 current_auc = 0.6969696969696969
User 10100 AUC after training: 0.6969696969696969
User 10100 does not improve AUC. Reverting changes.
Training on augumented user 89078 22/50 current_auc = 0.6969696969696969
User 89078 AUC after training: 0.6969696969696969
User 89078 does not improve AUC. Reverting changes.
Training on augumented user 53950 23/50 current_auc = 0.6969696969696969
User 53950 AUC after training: 0.6969696969696969
User 53950 does not improve AUC. Reverting changes.
Training on augumented user 74873 24/50 current_auc = 0.6969696969696969
User 74873 AUC after training: 0.6969696969696969
User 74873 does not improve AUC. Reverting changes.
Training on augumented user 66661 25/50 current_auc = 0.6969696969696969
User 66661 AUC after training: 0.6969696969696969
User 66661 does not improve AUC. Reverting changes.
Training on augumented user 10093 26/50 current_auc = 0.6969696969696969
User 10093 AUC after training: 0.6969696969696969
User 10093 does not improve AUC. Reverting changes.
Training on augumented user 121016 27/50 current_auc = 0.6969696969696969
User 121016 AUC after training: 0.6969696969696969
User 121016 does not improve AUC. Reverting changes.
Training on augumented user 92114 28/50 current_auc = 0.6969696969696969
User 92114 AUC after training: 0.6969696969696969
User 92114 does not improve AUC. Reverting changes.
Training on augumented user 137759 29/50 current_auc = 0.6969696969696969
User 137759 AUC after training: 0.6969696969696969
User 137759 does not improve AUC. Reverting changes.
Training on augumented user 37947 30/50 current_auc = 0.6969696969696969
User 37947 AUC after training: 0.6969696969696969
User 37947 does not improve AUC. Reverting changes.
Training on augumented user 10158 31/50 current_auc = 0.6969696969696969
User 10158 AUC after training: 0.6969696969696969
User 10158 does not improve AUC. Reverting changes.
Training on augumented user 64608 32/50 current_auc = 0.6969696969696969
User 64608 AUC after training: 0.6969696969696969
User 64608 does not improve AUC. Reverting changes.
Training on augumented user 59988 33/50 current_auc = 0.6969696969696969
User 59988 AUC after training: 0.6969696969696969
User 59988 does not improve AUC. Reverting changes.
Training on augumented user 91220 34/50 current_auc = 0.6969696969696969
User 91220 AUC after training: 0.6969696969696969
User 91220 does not improve AUC. Reverting changes.
Training on augumented user 12109 35/50 current_auc = 0.6969696969696969
User 12109 AUC after training: 0.6969696969696969
User 12109 does not improve AUC. Reverting changes.
Training on augumented user 56991 36/50 current_auc = 0.6969696969696969
User 56991 AUC after training: 0.6969696969696969
User 56991 does not improve AUC. Reverting changes.
Training on augumented user 104917 37/50 current_auc = 0.6969696969696969
User 104917 AUC after training: 0.6969696969696969
User 104917 does not improve AUC. Reverting changes.
Training on augumented user 116836 38/50 current_auc = 0.6969696969696969
User 116836 AUC after training: 0.6969696969696969
User 116836 does not improve AUC. Reverting changes.
Training on augumented user 101818 39/50 current_auc = 0.6969696969696969
User 101818 AUC after training: 0.6969696969696969
User 101818 does not improve AUC. Reverting changes.
Training on augumented user 41214 40/50 current_auc = 0.6969696969696969
User 41214 AUC after training: 0.6969696969696969
User 41214 does not improve AUC. Reverting changes.
Training on augumented user 116707 41/50 current_auc = 0.6969696969696969
User 116707 AUC after training: 0.6969696969696969
User 116707 does not improve AUC. Reverting changes.
Training on augumented user 53210 42/50 current_auc = 0.6969696969696969
User 53210 AUC after training: 0.6969696969696969
User 53210 does not improve AUC. Reverting changes.
Training on augumented user 115922 43/50 current_auc = 0.6969696969696969
User 115922 AUC after training: 0.6969696969696969
User 115922 does not improve AUC. Reverting changes.
Training on augumented user 19307 44/50 current_auc = 0.6969696969696969
User 19307 AUC after training: 0.6969696969696969
User 19307 does not improve AUC. Reverting changes.
Training on augumented user 35374 45/50 current_auc = 0.6969696969696969
User 35374 AUC after training: 0.6969696969696969
User 35374 does not improve AUC. Reverting changes.
Training on augumented user 56232 46/50 current_auc = 0.6969696969696969
User 56232 AUC after training: 0.6969696969696969
User 56232 does not improve AUC. Reverting changes.
Training on augumented user 59507 47/50 current_auc = 0.6969696969696969
User 59507 AUC after training: 0.6969696969696969
User 59507 does not improve AUC. Reverting changes.
Training on augumented user 46048 48/50 current_auc = 0.6969696969696969
User 46048 AUC after training: 0.6969696969696969
User 46048 does not improve AUC. Reverting changes.
Training on augumented user 69509 49/50 current_auc = 0.6969696969696969
User 69509 AUC after training: 0.6969696969696969
User 69509 does not improve AUC. Reverting changes.
[2024-12-02 18:41:15.678897] start test user 44429 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:16.208191] start test user 44429 116/568 recall augumented users by random, augumented_users = [91376, 35046, 83544, 35432, 60634, 135040, 38742, 3096, 88667, 63784, 68423, 48196, 129646, 101823, 104637, 23374, 117516, 104526, 82319, 126102, 30476, 1939, 123384, 45551, 106255, 21656, 65204, 113639, 74099, 34482, 51682, 106383, 112937, 124572, 86548, 130592, 93762, 103935, 52355, 67674, 97735, 86725, 91958, 119752, 49362, 5318, 2103, 67720, 71772, 89686]
[2024-12-02 18:41:16.235835] user = 44429 Cloud 116/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:16.249717] user = 44429 Local 116/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:16.345469] user = 44429 Local+ 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:19.321425] user = 44429 MPDA- 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 91376 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91376 AUC after training: 0.5
User 91376 does not improve AUC. Reverting changes.
Training on augumented user 35046 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35046 AUC after training: 0.5
User 35046 does not improve AUC. Reverting changes.
Training on augumented user 83544 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83544 AUC after training: 0.5
User 83544 does not improve AUC. Reverting changes.
Training on augumented user 35432 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35432 AUC after training: 0.5
User 35432 does not improve AUC. Reverting changes.
Training on augumented user 60634 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60634 AUC after training: 0.5
User 60634 does not improve AUC. Reverting changes.
Training on augumented user 135040 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135040 AUC after training: 0.5
User 135040 does not improve AUC. Reverting changes.
Training on augumented user 38742 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38742 AUC after training: 0.5
User 38742 does not improve AUC. Reverting changes.
Training on augumented user 3096 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3096 AUC after training: 0.5
User 3096 does not improve AUC. Reverting changes.
Training on augumented user 88667 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88667 AUC after training: 0.5
User 88667 does not improve AUC. Reverting changes.
Training on augumented user 63784 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63784 AUC after training: 0.5
User 63784 does not improve AUC. Reverting changes.
Training on augumented user 68423 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68423 AUC after training: 0.5
User 68423 does not improve AUC. Reverting changes.
Training on augumented user 48196 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48196 AUC after training: 0.5
User 48196 does not improve AUC. Reverting changes.
Training on augumented user 129646 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129646 AUC after training: 0.5
User 129646 does not improve AUC. Reverting changes.
Training on augumented user 101823 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101823 AUC after training: 0.5
User 101823 does not improve AUC. Reverting changes.
Training on augumented user 104637 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104637 AUC after training: 0.5
User 104637 does not improve AUC. Reverting changes.
Training on augumented user 23374 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23374 AUC after training: 0.5
User 23374 does not improve AUC. Reverting changes.
Training on augumented user 117516 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117516 AUC after training: 0.5
User 117516 does not improve AUC. Reverting changes.
Training on augumented user 104526 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104526 AUC after training: 0.5
User 104526 does not improve AUC. Reverting changes.
Training on augumented user 82319 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82319 AUC after training: 0.5
User 82319 does not improve AUC. Reverting changes.
Training on augumented user 126102 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126102 AUC after training: 0.5
User 126102 does not improve AUC. Reverting changes.
Training on augumented user 30476 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30476 AUC after training: 0.5
User 30476 does not improve AUC. Reverting changes.
Training on augumented user 1939 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1939 AUC after training: 0.5
User 1939 does not improve AUC. Reverting changes.
Training on augumented user 123384 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123384 AUC after training: 0.5
User 123384 does not improve AUC. Reverting changes.
Training on augumented user 45551 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45551 AUC after training: 0.5
User 45551 does not improve AUC. Reverting changes.
Training on augumented user 106255 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106255 AUC after training: 0.5
User 106255 does not improve AUC. Reverting changes.
Training on augumented user 21656 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21656 AUC after training: 0.5
User 21656 does not improve AUC. Reverting changes.
Training on augumented user 65204 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65204 AUC after training: 0.5
User 65204 does not improve AUC. Reverting changes.
Training on augumented user 113639 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113639 AUC after training: 0.5
User 113639 does not improve AUC. Reverting changes.
Training on augumented user 74099 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74099 AUC after training: 0.5
User 74099 does not improve AUC. Reverting changes.
Training on augumented user 34482 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34482 AUC after training: 0.5
User 34482 does not improve AUC. Reverting changes.
Training on augumented user 51682 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51682 AUC after training: 0.5
User 51682 does not improve AUC. Reverting changes.
Training on augumented user 106383 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106383 AUC after training: 0.5
User 106383 does not improve AUC. Reverting changes.
Training on augumented user 112937 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112937 AUC after training: 0.5
User 112937 does not improve AUC. Reverting changes.
Training on augumented user 124572 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124572 AUC after training: 0.5
User 124572 does not improve AUC. Reverting changes.
Training on augumented user 86548 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86548 AUC after training: 0.5
User 86548 does not improve AUC. Reverting changes.
Training on augumented user 130592 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130592 AUC after training: 0.5
User 130592 does not improve AUC. Reverting changes.
Training on augumented user 93762 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93762 AUC after training: 0.5
User 93762 does not improve AUC. Reverting changes.
Training on augumented user 103935 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103935 AUC after training: 0.5
User 103935 does not improve AUC. Reverting changes.
Training on augumented user 52355 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52355 AUC after training: 0.5
User 52355 does not improve AUC. Reverting changes.
Training on augumented user 67674 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67674 AUC after training: 0.5
User 67674 does not improve AUC. Reverting changes.
Training on augumented user 97735 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97735 AUC after training: 0.5
User 97735 does not improve AUC. Reverting changes.
Training on augumented user 86725 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86725 AUC after training: 0.5
User 86725 does not improve AUC. Reverting changes.
Training on augumented user 91958 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91958 AUC after training: 0.5
User 91958 does not improve AUC. Reverting changes.
Training on augumented user 119752 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119752 AUC after training: 0.5
User 119752 does not improve AUC. Reverting changes.
Training on augumented user 49362 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49362 AUC after training: 0.5
User 49362 does not improve AUC. Reverting changes.
Training on augumented user 5318 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5318 AUC after training: 0.5
User 5318 does not improve AUC. Reverting changes.
Training on augumented user 2103 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2103 AUC after training: 0.5
User 2103 does not improve AUC. Reverting changes.
Training on augumented user 67720 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67720 AUC after training: 0.5
User 67720 does not improve AUC. Reverting changes.
Training on augumented user 71772 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71772 AUC after training: 0.5
User 71772 does not improve AUC. Reverting changes.
Training on augumented user 89686 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89686 AUC after training: 0.5
User 89686 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:48.888625] start test user 44430 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:49.309707] start test user 44430 117/568 recall augumented users by random, augumented_users = [94169, 101267, 93690, 51983, 14142, 35982, 82390, 123565, 64639, 106619, 11041, 72312, 50220, 23861, 102249, 13084, 107506, 89623, 121391, 132813, 71172, 5640, 102647, 127741, 95134, 95540, 96427, 113521, 29144, 44210, 49629, 20149, 33848, 124942, 125067, 28363, 114340, 76901, 29307, 124579, 86330, 114875, 108571, 76924, 40473, 86279, 132939, 91290, 116554, 21759]
[2024-12-02 18:41:49.323961] user = 44430 Cloud 117/568
[2024-12-02 18:41:49.334047] user = 44430 Local 117/568
[2024-12-02 18:41:49.362751] user = 44430 Local+ 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:51.438322] user = 44430 MPDA- 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 94169 0/50 current_auc = 1.0
User 94169 AUC after training: 1.0
User 94169 does not improve AUC. Reverting changes.
Training on augumented user 101267 1/50 current_auc = 1.0
User 101267 AUC after training: 1.0
User 101267 does not improve AUC. Reverting changes.
Training on augumented user 93690 2/50 current_auc = 1.0
User 93690 AUC after training: 1.0
User 93690 does not improve AUC. Reverting changes.
Training on augumented user 51983 3/50 current_auc = 1.0
User 51983 AUC after training: 1.0
User 51983 does not improve AUC. Reverting changes.
Training on augumented user 14142 4/50 current_auc = 1.0
User 14142 AUC after training: 1.0
User 14142 does not improve AUC. Reverting changes.
Training on augumented user 35982 5/50 current_auc = 1.0
User 35982 AUC after training: 1.0
User 35982 does not improve AUC. Reverting changes.
Training on augumented user 82390 6/50 current_auc = 1.0
User 82390 AUC after training: 1.0
User 82390 does not improve AUC. Reverting changes.
Training on augumented user 123565 7/50 current_auc = 1.0
User 123565 AUC after training: 1.0
User 123565 does not improve AUC. Reverting changes.
Training on augumented user 64639 8/50 current_auc = 1.0
User 64639 AUC after training: 1.0
User 64639 does not improve AUC. Reverting changes.
Training on augumented user 106619 9/50 current_auc = 1.0
User 106619 AUC after training: 1.0
User 106619 does not improve AUC. Reverting changes.
Training on augumented user 11041 10/50 current_auc = 1.0
User 11041 AUC after training: 1.0
User 11041 does not improve AUC. Reverting changes.
Training on augumented user 72312 11/50 current_auc = 1.0
User 72312 AUC after training: 1.0
User 72312 does not improve AUC. Reverting changes.
Training on augumented user 50220 12/50 current_auc = 1.0
User 50220 AUC after training: 1.0
User 50220 does not improve AUC. Reverting changes.
Training on augumented user 23861 13/50 current_auc = 1.0
User 23861 AUC after training: 1.0
User 23861 does not improve AUC. Reverting changes.
Training on augumented user 102249 14/50 current_auc = 1.0
User 102249 AUC after training: 1.0
User 102249 does not improve AUC. Reverting changes.
Training on augumented user 13084 15/50 current_auc = 1.0
User 13084 AUC after training: 1.0
User 13084 does not improve AUC. Reverting changes.
Training on augumented user 107506 16/50 current_auc = 1.0
User 107506 AUC after training: 1.0
User 107506 does not improve AUC. Reverting changes.
Training on augumented user 89623 17/50 current_auc = 1.0
User 89623 AUC after training: 1.0
User 89623 does not improve AUC. Reverting changes.
Training on augumented user 121391 18/50 current_auc = 1.0
User 121391 AUC after training: 1.0
User 121391 does not improve AUC. Reverting changes.
Training on augumented user 132813 19/50 current_auc = 1.0
User 132813 AUC after training: 1.0
User 132813 does not improve AUC. Reverting changes.
Training on augumented user 71172 20/50 current_auc = 1.0
User 71172 AUC after training: 1.0
User 71172 does not improve AUC. Reverting changes.
Training on augumented user 5640 21/50 current_auc = 1.0
User 5640 AUC after training: 1.0
User 5640 does not improve AUC. Reverting changes.
Training on augumented user 102647 22/50 current_auc = 1.0
User 102647 AUC after training: 1.0
User 102647 does not improve AUC. Reverting changes.
Training on augumented user 127741 23/50 current_auc = 1.0
User 127741 AUC after training: 1.0
User 127741 does not improve AUC. Reverting changes.
Training on augumented user 95134 24/50 current_auc = 1.0
User 95134 AUC after training: 1.0
User 95134 does not improve AUC. Reverting changes.
Training on augumented user 95540 25/50 current_auc = 1.0
User 95540 AUC after training: 1.0
User 95540 does not improve AUC. Reverting changes.
Training on augumented user 96427 26/50 current_auc = 1.0
User 96427 AUC after training: 1.0
User 96427 does not improve AUC. Reverting changes.
Training on augumented user 113521 27/50 current_auc = 1.0
User 113521 AUC after training: 1.0
User 113521 does not improve AUC. Reverting changes.
Training on augumented user 29144 28/50 current_auc = 1.0
User 29144 AUC after training: 1.0
User 29144 does not improve AUC. Reverting changes.
Training on augumented user 44210 29/50 current_auc = 1.0
User 44210 AUC after training: 1.0
User 44210 does not improve AUC. Reverting changes.
Training on augumented user 49629 30/50 current_auc = 1.0
User 49629 AUC after training: 1.0
User 49629 does not improve AUC. Reverting changes.
Training on augumented user 20149 31/50 current_auc = 1.0
User 20149 AUC after training: 1.0
User 20149 does not improve AUC. Reverting changes.
Training on augumented user 33848 32/50 current_auc = 1.0
User 33848 AUC after training: 1.0
User 33848 does not improve AUC. Reverting changes.
Training on augumented user 124942 33/50 current_auc = 1.0
User 124942 AUC after training: 1.0
User 124942 does not improve AUC. Reverting changes.
Training on augumented user 125067 34/50 current_auc = 1.0
User 125067 AUC after training: 1.0
User 125067 does not improve AUC. Reverting changes.
Training on augumented user 28363 35/50 current_auc = 1.0
User 28363 AUC after training: 1.0
User 28363 does not improve AUC. Reverting changes.
Training on augumented user 114340 36/50 current_auc = 1.0
User 114340 AUC after training: 1.0
User 114340 does not improve AUC. Reverting changes.
Training on augumented user 76901 37/50 current_auc = 1.0
User 76901 AUC after training: 1.0
User 76901 does not improve AUC. Reverting changes.
Training on augumented user 29307 38/50 current_auc = 1.0
User 29307 AUC after training: 1.0
User 29307 does not improve AUC. Reverting changes.
Training on augumented user 124579 39/50 current_auc = 1.0
User 124579 AUC after training: 1.0
User 124579 does not improve AUC. Reverting changes.
Training on augumented user 86330 40/50 current_auc = 1.0
User 86330 AUC after training: 1.0
User 86330 does not improve AUC. Reverting changes.
Training on augumented user 114875 41/50 current_auc = 1.0
User 114875 AUC after training: 1.0
User 114875 does not improve AUC. Reverting changes.
Training on augumented user 108571 42/50 current_auc = 1.0
User 108571 AUC after training: 1.0
User 108571 does not improve AUC. Reverting changes.
Training on augumented user 76924 43/50 current_auc = 1.0
User 76924 AUC after training: 1.0
User 76924 does not improve AUC. Reverting changes.
Training on augumented user 40473 44/50 current_auc = 1.0
User 40473 AUC after training: 1.0
User 40473 does not improve AUC. Reverting changes.
Training on augumented user 86279 45/50 current_auc = 1.0
User 86279 AUC after training: 1.0
User 86279 does not improve AUC. Reverting changes.
Training on augumented user 132939 46/50 current_auc = 1.0
User 132939 AUC after training: 1.0
User 132939 does not improve AUC. Reverting changes.
Training on augumented user 91290 47/50 current_auc = 1.0
User 91290 AUC after training: 1.0
User 91290 does not improve AUC. Reverting changes.
Training on augumented user 116554 48/50 current_auc = 1.0
User 116554 AUC after training: 1.0
User 116554 does not improve AUC. Reverting changes.
Training on augumented user 21759 49/50 current_auc = 1.0
User 21759 AUC after training: 1.0
User 21759 does not improve AUC. Reverting changes.
[2024-12-02 18:42:19.519009] start test user 44440 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:19.946580] start test user 44440 118/568 recall augumented users by random, augumented_users = [70019, 10989, 27321, 87331, 58065, 107796, 8116, 39184, 132739, 15264, 116805, 64682, 1587, 128636, 23851, 66394, 118068, 72189, 107389, 94944, 50628, 102777, 127566, 100034, 128321, 79356, 118245, 47062, 60465, 121218, 36053, 52949, 23940, 130447, 128397, 86971, 8337, 68858, 22108, 66590, 78836, 23020, 80633, 9273, 86785, 25461, 47868, 86699, 49854, 119483]
[2024-12-02 18:42:19.961058] user = 44440 Cloud 118/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:42:19.967779] user = 44440 Local 118/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:42:19.988953] user = 44440 Local+ 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:42:22.806527] user = 44440 MPDA- 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 70019 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70019 AUC after training: 0.5
User 70019 does not improve AUC. Reverting changes.
Training on augumented user 10989 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10989 AUC after training: 0.5
User 10989 does not improve AUC. Reverting changes.
Training on augumented user 27321 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27321 AUC after training: 0.5
User 27321 does not improve AUC. Reverting changes.
Training on augumented user 87331 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87331 AUC after training: 0.5
User 87331 does not improve AUC. Reverting changes.
Training on augumented user 58065 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58065 AUC after training: 0.5
User 58065 does not improve AUC. Reverting changes.
Training on augumented user 107796 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107796 AUC after training: 0.5
User 107796 does not improve AUC. Reverting changes.
Training on augumented user 8116 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8116 AUC after training: 0.5
User 8116 does not improve AUC. Reverting changes.
Training on augumented user 39184 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39184 AUC after training: 0.5
User 39184 does not improve AUC. Reverting changes.
Training on augumented user 132739 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132739 AUC after training: 0.5
User 132739 does not improve AUC. Reverting changes.
Training on augumented user 15264 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15264 AUC after training: 0.5
User 15264 does not improve AUC. Reverting changes.
Training on augumented user 116805 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116805 AUC after training: 0.5
User 116805 does not improve AUC. Reverting changes.
Training on augumented user 64682 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64682 AUC after training: 0.5
User 64682 does not improve AUC. Reverting changes.
Training on augumented user 1587 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1587 AUC after training: 0.5
User 1587 does not improve AUC. Reverting changes.
Training on augumented user 128636 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128636 AUC after training: 0.5
User 128636 does not improve AUC. Reverting changes.
Training on augumented user 23851 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23851 AUC after training: 0.5
User 23851 does not improve AUC. Reverting changes.
Training on augumented user 66394 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66394 AUC after training: 0.5
User 66394 does not improve AUC. Reverting changes.
Training on augumented user 118068 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118068 AUC after training: 0.5
User 118068 does not improve AUC. Reverting changes.
Training on augumented user 72189 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72189 AUC after training: 0.5
User 72189 does not improve AUC. Reverting changes.
Training on augumented user 107389 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107389 AUC after training: 0.5
User 107389 does not improve AUC. Reverting changes.
Training on augumented user 94944 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94944 AUC after training: 0.5
User 94944 does not improve AUC. Reverting changes.
Training on augumented user 50628 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50628 AUC after training: 0.5
User 50628 does not improve AUC. Reverting changes.
Training on augumented user 102777 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102777 AUC after training: 0.5
User 102777 does not improve AUC. Reverting changes.
Training on augumented user 127566 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127566 AUC after training: 0.5
User 127566 does not improve AUC. Reverting changes.
Training on augumented user 100034 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100034 AUC after training: 0.5
User 100034 does not improve AUC. Reverting changes.
Training on augumented user 128321 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128321 AUC after training: 0.5
User 128321 does not improve AUC. Reverting changes.
Training on augumented user 79356 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79356 AUC after training: 0.5
User 79356 does not improve AUC. Reverting changes.
Training on augumented user 118245 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118245 AUC after training: 0.5
User 118245 does not improve AUC. Reverting changes.
Training on augumented user 47062 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47062 AUC after training: 0.5
User 47062 does not improve AUC. Reverting changes.
Training on augumented user 60465 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60465 AUC after training: 0.5
User 60465 does not improve AUC. Reverting changes.
Training on augumented user 121218 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121218 AUC after training: 0.5
User 121218 does not improve AUC. Reverting changes.
Training on augumented user 36053 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36053 AUC after training: 0.5
User 36053 does not improve AUC. Reverting changes.
Training on augumented user 52949 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52949 AUC after training: 0.5
User 52949 does not improve AUC. Reverting changes.
Training on augumented user 23940 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23940 AUC after training: 0.5
User 23940 does not improve AUC. Reverting changes.
Training on augumented user 130447 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130447 AUC after training: 0.5
User 130447 does not improve AUC. Reverting changes.
Training on augumented user 128397 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128397 AUC after training: 0.5
User 128397 does not improve AUC. Reverting changes.
Training on augumented user 86971 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86971 AUC after training: 0.5
User 86971 does not improve AUC. Reverting changes.
Training on augumented user 8337 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8337 AUC after training: 0.5
User 8337 does not improve AUC. Reverting changes.
Training on augumented user 68858 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68858 AUC after training: 0.5
User 68858 does not improve AUC. Reverting changes.
Training on augumented user 22108 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22108 AUC after training: 0.5
User 22108 does not improve AUC. Reverting changes.
Training on augumented user 66590 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66590 AUC after training: 0.5
User 66590 does not improve AUC. Reverting changes.
Training on augumented user 78836 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78836 AUC after training: 0.5
User 78836 does not improve AUC. Reverting changes.
Training on augumented user 23020 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23020 AUC after training: 0.5
User 23020 does not improve AUC. Reverting changes.
Training on augumented user 80633 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80633 AUC after training: 0.5
User 80633 does not improve AUC. Reverting changes.
Training on augumented user 9273 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9273 AUC after training: 0.5
User 9273 does not improve AUC. Reverting changes.
Training on augumented user 86785 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86785 AUC after training: 0.5
User 86785 does not improve AUC. Reverting changes.
Training on augumented user 25461 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25461 AUC after training: 0.5
User 25461 does not improve AUC. Reverting changes.
Training on augumented user 47868 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47868 AUC after training: 0.5
User 47868 does not improve AUC. Reverting changes.
Training on augumented user 86699 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86699 AUC after training: 0.5
User 86699 does not improve AUC. Reverting changes.
Training on augumented user 49854 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49854 AUC after training: 0.5
User 49854 does not improve AUC. Reverting changes.
Training on augumented user 119483 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119483 AUC after training: 0.5
User 119483 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:42:54.158634] start test user 44477 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:54.819351] start test user 44477 119/568 recall augumented users by random, augumented_users = [103928, 110792, 14113, 108634, 44876, 87070, 127326, 81766, 15511, 26599, 81321, 58487, 407, 35701, 64578, 119236, 44560, 87537, 43913, 112036, 23957, 3791, 33772, 59353, 1505, 94484, 94145, 32988, 136689, 133965, 79889, 53992, 114935, 131541, 32082, 60635, 22890, 125361, 33252, 17081, 104684, 84867, 98270, 27214, 91801, 98743, 64611, 84168, 107626, 9046]
[2024-12-02 18:42:54.836682] user = 44477 Cloud 119/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:42:54.845713] user = 44477 Local 119/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:42:54.888340] user = 44477 Local+ 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:42:57.728972] user = 44477 MPDA- 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 103928 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103928 AUC after training: 0.5
User 103928 does not improve AUC. Reverting changes.
Training on augumented user 110792 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110792 AUC after training: 0.5
User 110792 does not improve AUC. Reverting changes.
Training on augumented user 14113 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14113 AUC after training: 0.5
User 14113 does not improve AUC. Reverting changes.
Training on augumented user 108634 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108634 AUC after training: 0.5
User 108634 does not improve AUC. Reverting changes.
Training on augumented user 44876 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44876 AUC after training: 0.5
User 44876 does not improve AUC. Reverting changes.
Training on augumented user 87070 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87070 AUC after training: 0.5
User 87070 does not improve AUC. Reverting changes.
Training on augumented user 127326 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127326 AUC after training: 0.5
User 127326 does not improve AUC. Reverting changes.
Training on augumented user 81766 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81766 AUC after training: 0.5
User 81766 does not improve AUC. Reverting changes.
Training on augumented user 15511 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15511 AUC after training: 0.5
User 15511 does not improve AUC. Reverting changes.
Training on augumented user 26599 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26599 AUC after training: 0.5
User 26599 does not improve AUC. Reverting changes.
Training on augumented user 81321 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81321 AUC after training: 0.5
User 81321 does not improve AUC. Reverting changes.
Training on augumented user 58487 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58487 AUC after training: 0.5
User 58487 does not improve AUC. Reverting changes.
Training on augumented user 407 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 407 AUC after training: 0.5
User 407 does not improve AUC. Reverting changes.
Training on augumented user 35701 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35701 AUC after training: 0.5
User 35701 does not improve AUC. Reverting changes.
Training on augumented user 64578 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64578 AUC after training: 0.5
User 64578 does not improve AUC. Reverting changes.
Training on augumented user 119236 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119236 AUC after training: 0.5
User 119236 does not improve AUC. Reverting changes.
Training on augumented user 44560 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44560 AUC after training: 0.5
User 44560 does not improve AUC. Reverting changes.
Training on augumented user 87537 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87537 AUC after training: 0.5
User 87537 does not improve AUC. Reverting changes.
Training on augumented user 43913 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43913 AUC after training: 0.5
User 43913 does not improve AUC. Reverting changes.
Training on augumented user 112036 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112036 AUC after training: 0.5
User 112036 does not improve AUC. Reverting changes.
Training on augumented user 23957 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23957 AUC after training: 0.5
User 23957 does not improve AUC. Reverting changes.
Training on augumented user 3791 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3791 AUC after training: 0.5
User 3791 does not improve AUC. Reverting changes.
Training on augumented user 33772 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33772 AUC after training: 0.5
User 33772 does not improve AUC. Reverting changes.
Training on augumented user 59353 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59353 AUC after training: 0.5
User 59353 does not improve AUC. Reverting changes.
Training on augumented user 1505 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1505 AUC after training: 0.5
User 1505 does not improve AUC. Reverting changes.
Training on augumented user 94484 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94484 AUC after training: 0.5
User 94484 does not improve AUC. Reverting changes.
Training on augumented user 94145 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94145 AUC after training: 0.5
User 94145 does not improve AUC. Reverting changes.
Training on augumented user 32988 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32988 AUC after training: 0.5
User 32988 does not improve AUC. Reverting changes.
Training on augumented user 136689 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136689 AUC after training: 0.5
User 136689 does not improve AUC. Reverting changes.
Training on augumented user 133965 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133965 AUC after training: 0.5
User 133965 does not improve AUC. Reverting changes.
Training on augumented user 79889 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79889 AUC after training: 0.5
User 79889 does not improve AUC. Reverting changes.
Training on augumented user 53992 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53992 AUC after training: 0.5
User 53992 does not improve AUC. Reverting changes.
Training on augumented user 114935 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114935 AUC after training: 0.5
User 114935 does not improve AUC. Reverting changes.
Training on augumented user 131541 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131541 AUC after training: 0.5
User 131541 does not improve AUC. Reverting changes.
Training on augumented user 32082 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32082 AUC after training: 0.5
User 32082 does not improve AUC. Reverting changes.
Training on augumented user 60635 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60635 AUC after training: 0.5
User 60635 does not improve AUC. Reverting changes.
Training on augumented user 22890 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22890 AUC after training: 0.5
User 22890 does not improve AUC. Reverting changes.
Training on augumented user 125361 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125361 AUC after training: 0.5
User 125361 does not improve AUC. Reverting changes.
Training on augumented user 33252 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33252 AUC after training: 0.5
User 33252 does not improve AUC. Reverting changes.
Training on augumented user 17081 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17081 AUC after training: 0.5
User 17081 does not improve AUC. Reverting changes.
Training on augumented user 104684 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104684 AUC after training: 0.5
User 104684 does not improve AUC. Reverting changes.
Training on augumented user 84867 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84867 AUC after training: 0.5
User 84867 does not improve AUC. Reverting changes.
Training on augumented user 98270 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98270 AUC after training: 0.5
User 98270 does not improve AUC. Reverting changes.
Training on augumented user 27214 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27214 AUC after training: 0.5
User 27214 does not improve AUC. Reverting changes.
Training on augumented user 91801 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91801 AUC after training: 0.5
User 91801 does not improve AUC. Reverting changes.
Training on augumented user 98743 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98743 AUC after training: 0.5
User 98743 does not improve AUC. Reverting changes.
Training on augumented user 64611 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64611 AUC after training: 0.5
User 64611 does not improve AUC. Reverting changes.
Training on augumented user 84168 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84168 AUC after training: 0.5
User 84168 does not improve AUC. Reverting changes.
Training on augumented user 107626 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107626 AUC after training: 0.5
User 107626 does not improve AUC. Reverting changes.
Training on augumented user 9046 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9046 AUC after training: 0.5
User 9046 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:43:26.922813] start test user 44508 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:27.613565] start test user 44508 120/568 recall augumented users by random, augumented_users = [18702, 43278, 34241, 69023, 61186, 121815, 102797, 71117, 11468, 38123, 48420, 130915, 19064, 91995, 128924, 104209, 55679, 67425, 99398, 69821, 66174, 110902, 19824, 129568, 134623, 10529, 59534, 108308, 63441, 36044, 41675, 15957, 25664, 35725, 72179, 38114, 108887, 103123, 95783, 57415, 128922, 113778, 111047, 118281, 64155, 16731, 70319, 40828, 122712, 88675]
[2024-12-02 18:43:27.627701] user = 44508 Cloud 120/568
[2024-12-02 18:43:27.651208] user = 44508 Local 120/568
[2024-12-02 18:43:27.678373] user = 44508 Local+ 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:29.674877] user = 44508 MPDA- 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6000000000000001
Training on augumented user 18702 0/50 current_auc = 0.6000000000000001
User 18702 AUC after training: 0.6000000000000001
User 18702 does not improve AUC. Reverting changes.
Training on augumented user 43278 1/50 current_auc = 0.6000000000000001
User 43278 AUC after training: 0.6000000000000001
User 43278 does not improve AUC. Reverting changes.
Training on augumented user 34241 2/50 current_auc = 0.6000000000000001
User 34241 AUC after training: 0.6000000000000001
User 34241 does not improve AUC. Reverting changes.
Training on augumented user 69023 3/50 current_auc = 0.6000000000000001
User 69023 AUC after training: 0.6000000000000001
User 69023 does not improve AUC. Reverting changes.
Training on augumented user 61186 4/50 current_auc = 0.6000000000000001
User 61186 AUC after training: 0.6000000000000001
User 61186 does not improve AUC. Reverting changes.
Training on augumented user 121815 5/50 current_auc = 0.6000000000000001
User 121815 AUC after training: 0.6000000000000001
User 121815 does not improve AUC. Reverting changes.
Training on augumented user 102797 6/50 current_auc = 0.6000000000000001
User 102797 AUC after training: 0.6000000000000001
User 102797 does not improve AUC. Reverting changes.
Training on augumented user 71117 7/50 current_auc = 0.6000000000000001
User 71117 AUC after training: 0.6000000000000001
User 71117 does not improve AUC. Reverting changes.
Training on augumented user 11468 8/50 current_auc = 0.6000000000000001
User 11468 AUC after training: 0.6000000000000001
User 11468 does not improve AUC. Reverting changes.
Training on augumented user 38123 9/50 current_auc = 0.6000000000000001
User 38123 AUC after training: 0.6000000000000001
User 38123 does not improve AUC. Reverting changes.
Training on augumented user 48420 10/50 current_auc = 0.6000000000000001
User 48420 AUC after training: 0.6000000000000001
User 48420 does not improve AUC. Reverting changes.
Training on augumented user 130915 11/50 current_auc = 0.6000000000000001
User 130915 AUC after training: 0.6000000000000001
User 130915 does not improve AUC. Reverting changes.
Training on augumented user 19064 12/50 current_auc = 0.6000000000000001
User 19064 AUC after training: 0.6000000000000001
User 19064 does not improve AUC. Reverting changes.
Training on augumented user 91995 13/50 current_auc = 0.6000000000000001
User 91995 AUC after training: 0.6000000000000001
User 91995 does not improve AUC. Reverting changes.
Training on augumented user 128924 14/50 current_auc = 0.6000000000000001
User 128924 AUC after training: 0.6000000000000001
User 128924 does not improve AUC. Reverting changes.
Training on augumented user 104209 15/50 current_auc = 0.6000000000000001
User 104209 AUC after training: 0.6000000000000001
User 104209 does not improve AUC. Reverting changes.
Training on augumented user 55679 16/50 current_auc = 0.6000000000000001
User 55679 AUC after training: 0.6000000000000001
User 55679 does not improve AUC. Reverting changes.
Training on augumented user 67425 17/50 current_auc = 0.6000000000000001
User 67425 AUC after training: 0.6000000000000001
User 67425 does not improve AUC. Reverting changes.
Training on augumented user 99398 18/50 current_auc = 0.6000000000000001
User 99398 AUC after training: 0.6000000000000001
User 99398 does not improve AUC. Reverting changes.
Training on augumented user 69821 19/50 current_auc = 0.6000000000000001
User 69821 AUC after training: 0.6000000000000001
User 69821 does not improve AUC. Reverting changes.
Training on augumented user 66174 20/50 current_auc = 0.6000000000000001
User 66174 AUC after training: 0.6000000000000001
User 66174 does not improve AUC. Reverting changes.
Training on augumented user 110902 21/50 current_auc = 0.6000000000000001
User 110902 AUC after training: 0.6000000000000001
User 110902 does not improve AUC. Reverting changes.
Training on augumented user 19824 22/50 current_auc = 0.6000000000000001
User 19824 AUC after training: 0.6000000000000001
User 19824 does not improve AUC. Reverting changes.
Training on augumented user 129568 23/50 current_auc = 0.6000000000000001
User 129568 AUC after training: 0.6000000000000001
User 129568 does not improve AUC. Reverting changes.
Training on augumented user 134623 24/50 current_auc = 0.6000000000000001
User 134623 AUC after training: 0.6000000000000001
User 134623 does not improve AUC. Reverting changes.
Training on augumented user 10529 25/50 current_auc = 0.6000000000000001
User 10529 AUC after training: 0.6000000000000001
User 10529 does not improve AUC. Reverting changes.
Training on augumented user 59534 26/50 current_auc = 0.6000000000000001
User 59534 AUC after training: 0.6000000000000001
User 59534 does not improve AUC. Reverting changes.
Training on augumented user 108308 27/50 current_auc = 0.6000000000000001
User 108308 AUC after training: 0.625
User 108308 improves AUC. Keeping the model.
Training on augumented user 63441 28/50 current_auc = 0.625
User 63441 AUC after training: 0.625
User 63441 does not improve AUC. Reverting changes.
Training on augumented user 36044 29/50 current_auc = 0.625
User 36044 AUC after training: 0.625
User 36044 does not improve AUC. Reverting changes.
Training on augumented user 41675 30/50 current_auc = 0.625
User 41675 AUC after training: 0.625
User 41675 does not improve AUC. Reverting changes.
Training on augumented user 15957 31/50 current_auc = 0.625
User 15957 AUC after training: 0.625
User 15957 does not improve AUC. Reverting changes.
Training on augumented user 25664 32/50 current_auc = 0.625
User 25664 AUC after training: 0.6000000000000001
User 25664 does not improve AUC. Reverting changes.
Training on augumented user 35725 33/50 current_auc = 0.625
User 35725 AUC after training: 0.625
User 35725 does not improve AUC. Reverting changes.
Training on augumented user 72179 34/50 current_auc = 0.625
User 72179 AUC after training: 0.6000000000000001
User 72179 does not improve AUC. Reverting changes.
Training on augumented user 38114 35/50 current_auc = 0.625
User 38114 AUC after training: 0.625
User 38114 does not improve AUC. Reverting changes.
Training on augumented user 108887 36/50 current_auc = 0.625
User 108887 AUC after training: 0.625
User 108887 does not improve AUC. Reverting changes.
Training on augumented user 103123 37/50 current_auc = 0.625
User 103123 AUC after training: 0.625
User 103123 does not improve AUC. Reverting changes.
Training on augumented user 95783 38/50 current_auc = 0.625
User 95783 AUC after training: 0.625
User 95783 does not improve AUC. Reverting changes.
Training on augumented user 57415 39/50 current_auc = 0.625
User 57415 AUC after training: 0.625
User 57415 does not improve AUC. Reverting changes.
Training on augumented user 128922 40/50 current_auc = 0.625
User 128922 AUC after training: 0.625
User 128922 does not improve AUC. Reverting changes.
Training on augumented user 113778 41/50 current_auc = 0.625
User 113778 AUC after training: 0.625
User 113778 does not improve AUC. Reverting changes.
Training on augumented user 111047 42/50 current_auc = 0.625
User 111047 AUC after training: 0.625
User 111047 does not improve AUC. Reverting changes.
Training on augumented user 118281 43/50 current_auc = 0.625
User 118281 AUC after training: 0.625
User 118281 does not improve AUC. Reverting changes.
Training on augumented user 64155 44/50 current_auc = 0.625
User 64155 AUC after training: 0.625
User 64155 does not improve AUC. Reverting changes.
Training on augumented user 16731 45/50 current_auc = 0.625
User 16731 AUC after training: 0.625
User 16731 does not improve AUC. Reverting changes.
Training on augumented user 70319 46/50 current_auc = 0.625
User 70319 AUC after training: 0.625
User 70319 does not improve AUC. Reverting changes.
Training on augumented user 40828 47/50 current_auc = 0.625
User 40828 AUC after training: 0.625
User 40828 does not improve AUC. Reverting changes.
Training on augumented user 122712 48/50 current_auc = 0.625
User 122712 AUC after training: 0.625
User 122712 does not improve AUC. Reverting changes.
Training on augumented user 88675 49/50 current_auc = 0.625
User 88675 AUC after training: 0.625
User 88675 does not improve AUC. Reverting changes.
[2024-12-02 18:44:02.104076] start test user 44535 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:02.673479] start test user 44535 121/568 recall augumented users by random, augumented_users = [57605, 11147, 135741, 89264, 68261, 3882, 8932, 3349, 127609, 112138, 103025, 127868, 116330, 43301, 81921, 19469, 19123, 93776, 135628, 15549, 25036, 29268, 123583, 43957, 29168, 73345, 80125, 123540, 128520, 61649, 109913, 92143, 87303, 106126, 31677, 104930, 99501, 58554, 43207, 87723, 9183, 67296, 46970, 85749, 89643, 37233, 67707, 41192, 34127, 17247]
[2024-12-02 18:44:02.694586] user = 44535 Cloud 121/568
[2024-12-02 18:44:02.711745] user = 44535 Local 121/568
[2024-12-02 18:44:02.758464] user = 44535 Local+ 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:05.982653] user = 44535 MPDA- 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4444444444444445
Training on augumented user 57605 0/50 current_auc = 0.4444444444444445
User 57605 AUC after training: 0.4444444444444445
User 57605 does not improve AUC. Reverting changes.
Training on augumented user 11147 1/50 current_auc = 0.4444444444444445
User 11147 AUC after training: 0.4444444444444445
User 11147 does not improve AUC. Reverting changes.
Training on augumented user 135741 2/50 current_auc = 0.4444444444444445
User 135741 AUC after training: 0.4444444444444445
User 135741 does not improve AUC. Reverting changes.
Training on augumented user 89264 3/50 current_auc = 0.4444444444444445
User 89264 AUC after training: 0.4444444444444445
User 89264 does not improve AUC. Reverting changes.
Training on augumented user 68261 4/50 current_auc = 0.4444444444444445
User 68261 AUC after training: 0.4444444444444445
User 68261 does not improve AUC. Reverting changes.
Training on augumented user 3882 5/50 current_auc = 0.4444444444444445
User 3882 AUC after training: 0.4444444444444445
User 3882 does not improve AUC. Reverting changes.
Training on augumented user 8932 6/50 current_auc = 0.4444444444444445
User 8932 AUC after training: 0.4444444444444445
User 8932 does not improve AUC. Reverting changes.
Training on augumented user 3349 7/50 current_auc = 0.4444444444444445
User 3349 AUC after training: 0.4444444444444445
User 3349 does not improve AUC. Reverting changes.
Training on augumented user 127609 8/50 current_auc = 0.4444444444444445
User 127609 AUC after training: 0.4444444444444445
User 127609 does not improve AUC. Reverting changes.
Training on augumented user 112138 9/50 current_auc = 0.4444444444444445
User 112138 AUC after training: 0.4444444444444445
User 112138 does not improve AUC. Reverting changes.
Training on augumented user 103025 10/50 current_auc = 0.4444444444444445
User 103025 AUC after training: 0.4444444444444445
User 103025 does not improve AUC. Reverting changes.
Training on augumented user 127868 11/50 current_auc = 0.4444444444444445
User 127868 AUC after training: 0.4444444444444445
User 127868 does not improve AUC. Reverting changes.
Training on augumented user 116330 12/50 current_auc = 0.4444444444444445
User 116330 AUC after training: 0.4444444444444445
User 116330 does not improve AUC. Reverting changes.
Training on augumented user 43301 13/50 current_auc = 0.4444444444444445
User 43301 AUC after training: 0.4444444444444445
User 43301 does not improve AUC. Reverting changes.
Training on augumented user 81921 14/50 current_auc = 0.4444444444444445
User 81921 AUC after training: 0.4444444444444445
User 81921 does not improve AUC. Reverting changes.
Training on augumented user 19469 15/50 current_auc = 0.4444444444444445
User 19469 AUC after training: 0.4444444444444445
User 19469 does not improve AUC. Reverting changes.
Training on augumented user 19123 16/50 current_auc = 0.4444444444444445
User 19123 AUC after training: 0.4444444444444445
User 19123 does not improve AUC. Reverting changes.
Training on augumented user 93776 17/50 current_auc = 0.4444444444444445
User 93776 AUC after training: 0.4444444444444445
User 93776 does not improve AUC. Reverting changes.
Training on augumented user 135628 18/50 current_auc = 0.4444444444444445
User 135628 AUC after training: 0.4444444444444445
User 135628 does not improve AUC. Reverting changes.
Training on augumented user 15549 19/50 current_auc = 0.4444444444444445
User 15549 AUC after training: 0.4444444444444445
User 15549 does not improve AUC. Reverting changes.
Training on augumented user 25036 20/50 current_auc = 0.4444444444444445
User 25036 AUC after training: 0.4444444444444445
User 25036 does not improve AUC. Reverting changes.
Training on augumented user 29268 21/50 current_auc = 0.4444444444444445
User 29268 AUC after training: 0.4444444444444445
User 29268 does not improve AUC. Reverting changes.
Training on augumented user 123583 22/50 current_auc = 0.4444444444444445
User 123583 AUC after training: 0.4444444444444445
User 123583 does not improve AUC. Reverting changes.
Training on augumented user 43957 23/50 current_auc = 0.4444444444444445
User 43957 AUC after training: 0.4444444444444445
User 43957 does not improve AUC. Reverting changes.
Training on augumented user 29168 24/50 current_auc = 0.4444444444444445
User 29168 AUC after training: 0.4444444444444445
User 29168 does not improve AUC. Reverting changes.
Training on augumented user 73345 25/50 current_auc = 0.4444444444444445
User 73345 AUC after training: 0.4444444444444445
User 73345 does not improve AUC. Reverting changes.
Training on augumented user 80125 26/50 current_auc = 0.4444444444444445
User 80125 AUC after training: 0.4444444444444445
User 80125 does not improve AUC. Reverting changes.
Training on augumented user 123540 27/50 current_auc = 0.4444444444444445
User 123540 AUC after training: 0.4444444444444445
User 123540 does not improve AUC. Reverting changes.
Training on augumented user 128520 28/50 current_auc = 0.4444444444444445
User 128520 AUC after training: 0.4444444444444445
User 128520 does not improve AUC. Reverting changes.
Training on augumented user 61649 29/50 current_auc = 0.4444444444444445
User 61649 AUC after training: 0.4444444444444445
User 61649 does not improve AUC. Reverting changes.
Training on augumented user 109913 30/50 current_auc = 0.4444444444444445
User 109913 AUC after training: 0.4444444444444445
User 109913 does not improve AUC. Reverting changes.
Training on augumented user 92143 31/50 current_auc = 0.4444444444444445
User 92143 AUC after training: 0.4444444444444445
User 92143 does not improve AUC. Reverting changes.
Training on augumented user 87303 32/50 current_auc = 0.4444444444444445
User 87303 AUC after training: 0.4444444444444445
User 87303 does not improve AUC. Reverting changes.
Training on augumented user 106126 33/50 current_auc = 0.4444444444444445
User 106126 AUC after training: 0.4444444444444445
User 106126 does not improve AUC. Reverting changes.
Training on augumented user 31677 34/50 current_auc = 0.4444444444444445
User 31677 AUC after training: 0.4444444444444445
User 31677 does not improve AUC. Reverting changes.
Training on augumented user 104930 35/50 current_auc = 0.4444444444444445
User 104930 AUC after training: 0.4444444444444445
User 104930 does not improve AUC. Reverting changes.
Training on augumented user 99501 36/50 current_auc = 0.4444444444444445
User 99501 AUC after training: 0.4444444444444445
User 99501 does not improve AUC. Reverting changes.
Training on augumented user 58554 37/50 current_auc = 0.4444444444444445
User 58554 AUC after training: 0.4444444444444445
User 58554 does not improve AUC. Reverting changes.
Training on augumented user 43207 38/50 current_auc = 0.4444444444444445
User 43207 AUC after training: 0.4444444444444445
User 43207 does not improve AUC. Reverting changes.
Training on augumented user 87723 39/50 current_auc = 0.4444444444444445
User 87723 AUC after training: 0.4444444444444445
User 87723 does not improve AUC. Reverting changes.
Training on augumented user 9183 40/50 current_auc = 0.4444444444444445
User 9183 AUC after training: 0.4444444444444445
User 9183 does not improve AUC. Reverting changes.
Training on augumented user 67296 41/50 current_auc = 0.4444444444444445
User 67296 AUC after training: 0.4444444444444445
User 67296 does not improve AUC. Reverting changes.
Training on augumented user 46970 42/50 current_auc = 0.4444444444444445
User 46970 AUC after training: 0.4444444444444445
User 46970 does not improve AUC. Reverting changes.
Training on augumented user 85749 43/50 current_auc = 0.4444444444444445
User 85749 AUC after training: 0.4444444444444445
User 85749 does not improve AUC. Reverting changes.
Training on augumented user 89643 44/50 current_auc = 0.4444444444444445
User 89643 AUC after training: 0.4444444444444445
User 89643 does not improve AUC. Reverting changes.
Training on augumented user 37233 45/50 current_auc = 0.4444444444444445
User 37233 AUC after training: 0.4444444444444445
User 37233 does not improve AUC. Reverting changes.
Training on augumented user 67707 46/50 current_auc = 0.4444444444444445
User 67707 AUC after training: 0.4444444444444445
User 67707 does not improve AUC. Reverting changes.
Training on augumented user 41192 47/50 current_auc = 0.4444444444444445
User 41192 AUC after training: 0.4444444444444445
User 41192 does not improve AUC. Reverting changes.
Training on augumented user 34127 48/50 current_auc = 0.4444444444444445
User 34127 AUC after training: 0.4444444444444445
User 34127 does not improve AUC. Reverting changes.
Training on augumented user 17247 49/50 current_auc = 0.4444444444444445
User 17247 AUC after training: 0.4444444444444445
User 17247 does not improve AUC. Reverting changes.
[2024-12-02 18:44:37.167865] start test user 44576 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:37.608896] start test user 44576 122/568 recall augumented users by random, augumented_users = [108219, 109176, 48516, 102253, 16175, 112153, 90106, 37456, 5921, 105951, 97839, 133009, 16050, 121313, 30477, 34270, 78820, 6925, 100692, 38761, 13788, 109517, 121019, 44321, 120731, 7171, 39882, 134781, 32092, 58641, 120703, 97246, 44270, 99499, 24179, 53982, 112611, 100232, 17803, 111602, 43586, 49114, 87583, 100462, 37217, 3238, 82533, 77704, 79166, 119753]
[2024-12-02 18:44:37.624876] user = 44576 Cloud 122/568
[2024-12-02 18:44:37.635246] user = 44576 Local 122/568
[2024-12-02 18:44:37.894037] user = 44576 Local+ 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:41.492866] user = 44576 MPDA- 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7012987012987013
Training on augumented user 108219 0/50 current_auc = 0.7012987012987013
User 108219 AUC after training: 0.7012987012987013
User 108219 does not improve AUC. Reverting changes.
Training on augumented user 109176 1/50 current_auc = 0.7012987012987013
User 109176 AUC after training: 0.7012987012987013
User 109176 does not improve AUC. Reverting changes.
Training on augumented user 48516 2/50 current_auc = 0.7012987012987013
User 48516 AUC after training: 0.7012987012987013
User 48516 does not improve AUC. Reverting changes.
Training on augumented user 102253 3/50 current_auc = 0.7012987012987013
User 102253 AUC after training: 0.7012987012987013
User 102253 does not improve AUC. Reverting changes.
Training on augumented user 16175 4/50 current_auc = 0.7012987012987013
User 16175 AUC after training: 0.6948051948051949
User 16175 does not improve AUC. Reverting changes.
Training on augumented user 112153 5/50 current_auc = 0.7012987012987013
User 112153 AUC after training: 0.7012987012987013
User 112153 does not improve AUC. Reverting changes.
Training on augumented user 90106 6/50 current_auc = 0.7012987012987013
User 90106 AUC after training: 0.698051948051948
User 90106 does not improve AUC. Reverting changes.
Training on augumented user 37456 7/50 current_auc = 0.7012987012987013
User 37456 AUC after training: 0.7012987012987013
User 37456 does not improve AUC. Reverting changes.
Training on augumented user 5921 8/50 current_auc = 0.7012987012987013
User 5921 AUC after training: 0.7012987012987013
User 5921 does not improve AUC. Reverting changes.
Training on augumented user 105951 9/50 current_auc = 0.7012987012987013
User 105951 AUC after training: 0.7012987012987013
User 105951 does not improve AUC. Reverting changes.
Training on augumented user 97839 10/50 current_auc = 0.7012987012987013
User 97839 AUC after training: 0.7012987012987013
User 97839 does not improve AUC. Reverting changes.
Training on augumented user 133009 11/50 current_auc = 0.7012987012987013
User 133009 AUC after training: 0.7012987012987013
User 133009 does not improve AUC. Reverting changes.
Training on augumented user 16050 12/50 current_auc = 0.7012987012987013
User 16050 AUC after training: 0.6948051948051949
User 16050 does not improve AUC. Reverting changes.
Training on augumented user 121313 13/50 current_auc = 0.7012987012987013
User 121313 AUC after training: 0.698051948051948
User 121313 does not improve AUC. Reverting changes.
Training on augumented user 30477 14/50 current_auc = 0.7012987012987013
User 30477 AUC after training: 0.7012987012987013
User 30477 does not improve AUC. Reverting changes.
Training on augumented user 34270 15/50 current_auc = 0.7012987012987013
User 34270 AUC after training: 0.7012987012987013
User 34270 does not improve AUC. Reverting changes.
Training on augumented user 78820 16/50 current_auc = 0.7012987012987013
User 78820 AUC after training: 0.7012987012987013
User 78820 does not improve AUC. Reverting changes.
Training on augumented user 6925 17/50 current_auc = 0.7012987012987013
User 6925 AUC after training: 0.7012987012987013
User 6925 does not improve AUC. Reverting changes.
Training on augumented user 100692 18/50 current_auc = 0.7012987012987013
User 100692 AUC after training: 0.7012987012987013
User 100692 does not improve AUC. Reverting changes.
Training on augumented user 38761 19/50 current_auc = 0.7012987012987013
User 38761 AUC after training: 0.7012987012987013
User 38761 does not improve AUC. Reverting changes.
Training on augumented user 13788 20/50 current_auc = 0.7012987012987013
User 13788 AUC after training: 0.698051948051948
User 13788 does not improve AUC. Reverting changes.
Training on augumented user 109517 21/50 current_auc = 0.7012987012987013
User 109517 AUC after training: 0.7012987012987013
User 109517 does not improve AUC. Reverting changes.
Training on augumented user 121019 22/50 current_auc = 0.7012987012987013
User 121019 AUC after training: 0.7012987012987013
User 121019 does not improve AUC. Reverting changes.
Training on augumented user 44321 23/50 current_auc = 0.7012987012987013
User 44321 AUC after training: 0.7012987012987013
User 44321 does not improve AUC. Reverting changes.
Training on augumented user 120731 24/50 current_auc = 0.7012987012987013
User 120731 AUC after training: 0.7012987012987013
User 120731 does not improve AUC. Reverting changes.
Training on augumented user 7171 25/50 current_auc = 0.7012987012987013
User 7171 AUC after training: 0.7012987012987013
User 7171 does not improve AUC. Reverting changes.
Training on augumented user 39882 26/50 current_auc = 0.7012987012987013
User 39882 AUC after training: 0.7012987012987013
User 39882 does not improve AUC. Reverting changes.
Training on augumented user 134781 27/50 current_auc = 0.7012987012987013
User 134781 AUC after training: 0.7012987012987013
User 134781 does not improve AUC. Reverting changes.
Training on augumented user 32092 28/50 current_auc = 0.7012987012987013
User 32092 AUC after training: 0.7012987012987013
User 32092 does not improve AUC. Reverting changes.
Training on augumented user 58641 29/50 current_auc = 0.7012987012987013
User 58641 AUC after training: 0.7012987012987013
User 58641 does not improve AUC. Reverting changes.
Training on augumented user 120703 30/50 current_auc = 0.7012987012987013
User 120703 AUC after training: 0.698051948051948
User 120703 does not improve AUC. Reverting changes.
Training on augumented user 97246 31/50 current_auc = 0.7012987012987013
User 97246 AUC after training: 0.7012987012987013
User 97246 does not improve AUC. Reverting changes.
Training on augumented user 44270 32/50 current_auc = 0.7012987012987013
User 44270 AUC after training: 0.7045454545454546
User 44270 improves AUC. Keeping the model.
Training on augumented user 99499 33/50 current_auc = 0.7045454545454546
User 99499 AUC after training: 0.7077922077922079
User 99499 improves AUC. Keeping the model.
Training on augumented user 24179 34/50 current_auc = 0.7077922077922079
User 24179 AUC after training: 0.7045454545454546
User 24179 does not improve AUC. Reverting changes.
Training on augumented user 53982 35/50 current_auc = 0.7077922077922079
User 53982 AUC after training: 0.7077922077922079
User 53982 does not improve AUC. Reverting changes.
Training on augumented user 112611 36/50 current_auc = 0.7077922077922079
User 112611 AUC after training: 0.7077922077922079
User 112611 does not improve AUC. Reverting changes.
Training on augumented user 100232 37/50 current_auc = 0.7077922077922079
User 100232 AUC after training: 0.7077922077922079
User 100232 does not improve AUC. Reverting changes.
Training on augumented user 17803 38/50 current_auc = 0.7077922077922079
User 17803 AUC after training: 0.7077922077922079
User 17803 does not improve AUC. Reverting changes.
Training on augumented user 111602 39/50 current_auc = 0.7077922077922079
User 111602 AUC after training: 0.7077922077922079
User 111602 does not improve AUC. Reverting changes.
Training on augumented user 43586 40/50 current_auc = 0.7077922077922079
User 43586 AUC after training: 0.7077922077922079
User 43586 does not improve AUC. Reverting changes.
Training on augumented user 49114 41/50 current_auc = 0.7077922077922079
User 49114 AUC after training: 0.7045454545454546
User 49114 does not improve AUC. Reverting changes.
Training on augumented user 87583 42/50 current_auc = 0.7077922077922079
User 87583 AUC after training: 0.7077922077922079
User 87583 does not improve AUC. Reverting changes.
Training on augumented user 100462 43/50 current_auc = 0.7077922077922079
User 100462 AUC after training: 0.7012987012987013
User 100462 does not improve AUC. Reverting changes.
Training on augumented user 37217 44/50 current_auc = 0.7077922077922079
User 37217 AUC after training: 0.7110389610389611
User 37217 improves AUC. Keeping the model.
Training on augumented user 3238 45/50 current_auc = 0.7110389610389611
User 3238 AUC after training: 0.7110389610389611
User 3238 does not improve AUC. Reverting changes.
Training on augumented user 82533 46/50 current_auc = 0.7110389610389611
User 82533 AUC after training: 0.7142857142857143
User 82533 improves AUC. Keeping the model.
Training on augumented user 77704 47/50 current_auc = 0.7142857142857143
User 77704 AUC after training: 0.7207792207792209
User 77704 improves AUC. Keeping the model.
Training on augumented user 79166 48/50 current_auc = 0.7207792207792209
User 79166 AUC after training: 0.7207792207792209
User 79166 does not improve AUC. Reverting changes.
Training on augumented user 119753 49/50 current_auc = 0.7207792207792209
User 119753 AUC after training: 0.7142857142857143
User 119753 does not improve AUC. Reverting changes.
[2024-12-02 18:45:12.890275] start test user 44608 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:13.425323] start test user 44608 123/568 recall augumented users by random, augumented_users = [61051, 7457, 100968, 45372, 88004, 27862, 91809, 62433, 84410, 45520, 51, 59186, 208, 130070, 44874, 131492, 90245, 68585, 14434, 125603, 71578, 84154, 120376, 66239, 82824, 53772, 4406, 593, 87719, 99875, 36450, 101895, 70261, 47691, 30650, 69895, 67701, 34092, 1359, 129855, 2280, 26411, 53451, 95107, 136916, 77443, 55259, 120836, 33000, 100573]
[2024-12-02 18:45:13.442145] user = 44608 Cloud 123/568
[2024-12-02 18:45:13.454625] user = 44608 Local 123/568
[2024-12-02 18:45:13.513452] user = 44608 Local+ 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:16.784234] user = 44608 MPDA- 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6224489795918368
Training on augumented user 61051 0/50 current_auc = 0.6224489795918368
User 61051 AUC after training: 0.6224489795918368
User 61051 does not improve AUC. Reverting changes.
Training on augumented user 7457 1/50 current_auc = 0.6224489795918368
User 7457 AUC after training: 0.6122448979591837
User 7457 does not improve AUC. Reverting changes.
Training on augumented user 100968 2/50 current_auc = 0.6224489795918368
User 100968 AUC after training: 0.6224489795918368
User 100968 does not improve AUC. Reverting changes.
Training on augumented user 45372 3/50 current_auc = 0.6224489795918368
User 45372 AUC after training: 0.6122448979591837
User 45372 does not improve AUC. Reverting changes.
Training on augumented user 88004 4/50 current_auc = 0.6224489795918368
User 88004 AUC after training: 0.6224489795918368
User 88004 does not improve AUC. Reverting changes.
Training on augumented user 27862 5/50 current_auc = 0.6224489795918368
User 27862 AUC after training: 0.6326530612244898
User 27862 improves AUC. Keeping the model.
Training on augumented user 91809 6/50 current_auc = 0.6326530612244898
User 91809 AUC after training: 0.6122448979591837
User 91809 does not improve AUC. Reverting changes.
Training on augumented user 62433 7/50 current_auc = 0.6326530612244898
User 62433 AUC after training: 0.6224489795918368
User 62433 does not improve AUC. Reverting changes.
Training on augumented user 84410 8/50 current_auc = 0.6326530612244898
User 84410 AUC after training: 0.6224489795918368
User 84410 does not improve AUC. Reverting changes.
Training on augumented user 45520 9/50 current_auc = 0.6326530612244898
User 45520 AUC after training: 0.6326530612244898
User 45520 does not improve AUC. Reverting changes.
Training on augumented user 51 10/50 current_auc = 0.6326530612244898
User 51 AUC after training: 0.6122448979591837
User 51 does not improve AUC. Reverting changes.
Training on augumented user 59186 11/50 current_auc = 0.6326530612244898
User 59186 AUC after training: 0.6224489795918368
User 59186 does not improve AUC. Reverting changes.
Training on augumented user 208 12/50 current_auc = 0.6326530612244898
User 208 AUC after training: 0.6326530612244898
User 208 does not improve AUC. Reverting changes.
Training on augumented user 130070 13/50 current_auc = 0.6326530612244898
User 130070 AUC after training: 0.6326530612244898
User 130070 does not improve AUC. Reverting changes.
Training on augumented user 44874 14/50 current_auc = 0.6326530612244898
User 44874 AUC after training: 0.6122448979591837
User 44874 does not improve AUC. Reverting changes.
Training on augumented user 131492 15/50 current_auc = 0.6326530612244898
User 131492 AUC after training: 0.6326530612244898
User 131492 does not improve AUC. Reverting changes.
Training on augumented user 90245 16/50 current_auc = 0.6326530612244898
User 90245 AUC after training: 0.6122448979591837
User 90245 does not improve AUC. Reverting changes.
Training on augumented user 68585 17/50 current_auc = 0.6326530612244898
User 68585 AUC after training: 0.6326530612244898
User 68585 does not improve AUC. Reverting changes.
Training on augumented user 14434 18/50 current_auc = 0.6326530612244898
User 14434 AUC after training: 0.6326530612244898
User 14434 does not improve AUC. Reverting changes.
Training on augumented user 125603 19/50 current_auc = 0.6326530612244898
User 125603 AUC after training: 0.6326530612244898
User 125603 does not improve AUC. Reverting changes.
Training on augumented user 71578 20/50 current_auc = 0.6326530612244898
User 71578 AUC after training: 0.6326530612244898
User 71578 does not improve AUC. Reverting changes.
Training on augumented user 84154 21/50 current_auc = 0.6326530612244898
User 84154 AUC after training: 0.6224489795918368
User 84154 does not improve AUC. Reverting changes.
Training on augumented user 120376 22/50 current_auc = 0.6326530612244898
User 120376 AUC after training: 0.6224489795918368
User 120376 does not improve AUC. Reverting changes.
Training on augumented user 66239 23/50 current_auc = 0.6326530612244898
User 66239 AUC after training: 0.6122448979591837
User 66239 does not improve AUC. Reverting changes.
Training on augumented user 82824 24/50 current_auc = 0.6326530612244898
User 82824 AUC after training: 0.6326530612244898
User 82824 does not improve AUC. Reverting changes.
Training on augumented user 53772 25/50 current_auc = 0.6326530612244898
User 53772 AUC after training: 0.6224489795918368
User 53772 does not improve AUC. Reverting changes.
Training on augumented user 4406 26/50 current_auc = 0.6326530612244898
User 4406 AUC after training: 0.6326530612244898
User 4406 does not improve AUC. Reverting changes.
Training on augumented user 593 27/50 current_auc = 0.6326530612244898
User 593 AUC after training: 0.6326530612244898
User 593 does not improve AUC. Reverting changes.
Training on augumented user 87719 28/50 current_auc = 0.6326530612244898
User 87719 AUC after training: 0.6326530612244898
User 87719 does not improve AUC. Reverting changes.
Training on augumented user 99875 29/50 current_auc = 0.6326530612244898
User 99875 AUC after training: 0.6224489795918368
User 99875 does not improve AUC. Reverting changes.
Training on augumented user 36450 30/50 current_auc = 0.6326530612244898
User 36450 AUC after training: 0.6224489795918368
User 36450 does not improve AUC. Reverting changes.
Training on augumented user 101895 31/50 current_auc = 0.6326530612244898
User 101895 AUC after training: 0.6326530612244898
User 101895 does not improve AUC. Reverting changes.
Training on augumented user 70261 32/50 current_auc = 0.6326530612244898
User 70261 AUC after training: 0.6326530612244898
User 70261 does not improve AUC. Reverting changes.
Training on augumented user 47691 33/50 current_auc = 0.6326530612244898
User 47691 AUC after training: 0.6326530612244898
User 47691 does not improve AUC. Reverting changes.
Training on augumented user 30650 34/50 current_auc = 0.6326530612244898
User 30650 AUC after training: 0.6224489795918368
User 30650 does not improve AUC. Reverting changes.
Training on augumented user 69895 35/50 current_auc = 0.6326530612244898
User 69895 AUC after training: 0.6224489795918368
User 69895 does not improve AUC. Reverting changes.
Training on augumented user 67701 36/50 current_auc = 0.6326530612244898
User 67701 AUC after training: 0.6224489795918368
User 67701 does not improve AUC. Reverting changes.
Training on augumented user 34092 37/50 current_auc = 0.6326530612244898
User 34092 AUC after training: 0.6122448979591837
User 34092 does not improve AUC. Reverting changes.
Training on augumented user 1359 38/50 current_auc = 0.6326530612244898
User 1359 AUC after training: 0.6224489795918368
User 1359 does not improve AUC. Reverting changes.
Training on augumented user 129855 39/50 current_auc = 0.6326530612244898
User 129855 AUC after training: 0.6326530612244898
User 129855 does not improve AUC. Reverting changes.
Training on augumented user 2280 40/50 current_auc = 0.6326530612244898
User 2280 AUC after training: 0.6122448979591837
User 2280 does not improve AUC. Reverting changes.
Training on augumented user 26411 41/50 current_auc = 0.6326530612244898
User 26411 AUC after training: 0.6224489795918368
User 26411 does not improve AUC. Reverting changes.
Training on augumented user 53451 42/50 current_auc = 0.6326530612244898
User 53451 AUC after training: 0.6326530612244898
User 53451 does not improve AUC. Reverting changes.
Training on augumented user 95107 43/50 current_auc = 0.6326530612244898
User 95107 AUC after training: 0.6224489795918368
User 95107 does not improve AUC. Reverting changes.
Training on augumented user 136916 44/50 current_auc = 0.6326530612244898
User 136916 AUC after training: 0.6326530612244898
User 136916 does not improve AUC. Reverting changes.
Training on augumented user 77443 45/50 current_auc = 0.6326530612244898
User 77443 AUC after training: 0.6224489795918368
User 77443 does not improve AUC. Reverting changes.
Training on augumented user 55259 46/50 current_auc = 0.6326530612244898
User 55259 AUC after training: 0.6326530612244898
User 55259 does not improve AUC. Reverting changes.
Training on augumented user 120836 47/50 current_auc = 0.6326530612244898
User 120836 AUC after training: 0.6224489795918368
User 120836 does not improve AUC. Reverting changes.
Training on augumented user 33000 48/50 current_auc = 0.6326530612244898
User 33000 AUC after training: 0.6122448979591837
User 33000 does not improve AUC. Reverting changes.
Training on augumented user 100573 49/50 current_auc = 0.6326530612244898
User 100573 AUC after training: 0.6224489795918368
User 100573 does not improve AUC. Reverting changes.
[2024-12-02 18:45:45.654262] start test user 44615 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:46.222981] start test user 44615 124/568 recall augumented users by random, augumented_users = [111398, 92117, 62591, 63377, 80380, 112550, 127699, 108036, 58022, 133492, 126579, 134762, 88850, 41678, 22706, 124703, 108613, 5070, 21075, 43463, 131611, 103698, 77435, 63731, 80035, 3541, 67666, 110812, 109058, 67672, 97369, 54901, 105749, 13031, 113212, 18059, 50514, 8228, 109044, 44817, 136477, 128796, 122595, 55657, 86994, 60886, 22204, 1004, 134963, 102778]
[2024-12-02 18:45:46.258431] user = 44615 Cloud 124/568
[2024-12-02 18:45:46.277922] user = 44615 Local 124/568
[2024-12-02 18:45:46.382805] user = 44615 Local+ 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:48.891302] user = 44615 MPDA- 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.446078431372549
Training on augumented user 111398 0/50 current_auc = 0.446078431372549
User 111398 AUC after training: 0.44852941176470584
User 111398 improves AUC. Keeping the model.
Training on augumented user 92117 1/50 current_auc = 0.44852941176470584
User 92117 AUC after training: 0.446078431372549
User 92117 does not improve AUC. Reverting changes.
Training on augumented user 62591 2/50 current_auc = 0.44852941176470584
User 62591 AUC after training: 0.44852941176470584
User 62591 does not improve AUC. Reverting changes.
Training on augumented user 63377 3/50 current_auc = 0.44852941176470584
User 63377 AUC after training: 0.45588235294117646
User 63377 improves AUC. Keeping the model.
Training on augumented user 80380 4/50 current_auc = 0.45588235294117646
User 80380 AUC after training: 0.45588235294117646
User 80380 does not improve AUC. Reverting changes.
Training on augumented user 112550 5/50 current_auc = 0.45588235294117646
User 112550 AUC after training: 0.45588235294117646
User 112550 does not improve AUC. Reverting changes.
Training on augumented user 127699 6/50 current_auc = 0.45588235294117646
User 127699 AUC after training: 0.4583333333333333
User 127699 improves AUC. Keeping the model.
Training on augumented user 108036 7/50 current_auc = 0.4583333333333333
User 108036 AUC after training: 0.45588235294117646
User 108036 does not improve AUC. Reverting changes.
Training on augumented user 58022 8/50 current_auc = 0.4583333333333333
User 58022 AUC after training: 0.45588235294117646
User 58022 does not improve AUC. Reverting changes.
Training on augumented user 133492 9/50 current_auc = 0.4583333333333333
User 133492 AUC after training: 0.4583333333333333
User 133492 does not improve AUC. Reverting changes.
Training on augumented user 126579 10/50 current_auc = 0.4583333333333333
User 126579 AUC after training: 0.45588235294117646
User 126579 does not improve AUC. Reverting changes.
Training on augumented user 134762 11/50 current_auc = 0.4583333333333333
User 134762 AUC after training: 0.4583333333333333
User 134762 does not improve AUC. Reverting changes.
Training on augumented user 88850 12/50 current_auc = 0.4583333333333333
User 88850 AUC after training: 0.46078431372549017
User 88850 improves AUC. Keeping the model.
Training on augumented user 41678 13/50 current_auc = 0.46078431372549017
User 41678 AUC after training: 0.4583333333333333
User 41678 does not improve AUC. Reverting changes.
Training on augumented user 22706 14/50 current_auc = 0.46078431372549017
User 22706 AUC after training: 0.4583333333333333
User 22706 does not improve AUC. Reverting changes.
Training on augumented user 124703 15/50 current_auc = 0.46078431372549017
User 124703 AUC after training: 0.46078431372549017
User 124703 does not improve AUC. Reverting changes.
Training on augumented user 108613 16/50 current_auc = 0.46078431372549017
User 108613 AUC after training: 0.45588235294117646
User 108613 does not improve AUC. Reverting changes.
Training on augumented user 5070 17/50 current_auc = 0.46078431372549017
User 5070 AUC after training: 0.4583333333333333
User 5070 does not improve AUC. Reverting changes.
Training on augumented user 21075 18/50 current_auc = 0.46078431372549017
User 21075 AUC after training: 0.4583333333333333
User 21075 does not improve AUC. Reverting changes.
Training on augumented user 43463 19/50 current_auc = 0.46078431372549017
User 43463 AUC after training: 0.463235294117647
User 43463 improves AUC. Keeping the model.
Training on augumented user 131611 20/50 current_auc = 0.463235294117647
User 131611 AUC after training: 0.4583333333333333
User 131611 does not improve AUC. Reverting changes.
Training on augumented user 103698 21/50 current_auc = 0.463235294117647
User 103698 AUC after training: 0.46078431372549017
User 103698 does not improve AUC. Reverting changes.
Training on augumented user 77435 22/50 current_auc = 0.463235294117647
User 77435 AUC after training: 0.463235294117647
User 77435 does not improve AUC. Reverting changes.
Training on augumented user 63731 23/50 current_auc = 0.463235294117647
User 63731 AUC after training: 0.463235294117647
User 63731 does not improve AUC. Reverting changes.
Training on augumented user 80035 24/50 current_auc = 0.463235294117647
User 80035 AUC after training: 0.46078431372549017
User 80035 does not improve AUC. Reverting changes.
Training on augumented user 3541 25/50 current_auc = 0.463235294117647
User 3541 AUC after training: 0.463235294117647
User 3541 does not improve AUC. Reverting changes.
Training on augumented user 67666 26/50 current_auc = 0.463235294117647
User 67666 AUC after training: 0.4534313725490196
User 67666 does not improve AUC. Reverting changes.
Training on augumented user 110812 27/50 current_auc = 0.463235294117647
User 110812 AUC after training: 0.463235294117647
User 110812 does not improve AUC. Reverting changes.
Training on augumented user 109058 28/50 current_auc = 0.463235294117647
User 109058 AUC after training: 0.4583333333333333
User 109058 does not improve AUC. Reverting changes.
Training on augumented user 67672 29/50 current_auc = 0.463235294117647
User 67672 AUC after training: 0.463235294117647
User 67672 does not improve AUC. Reverting changes.
Training on augumented user 97369 30/50 current_auc = 0.463235294117647
User 97369 AUC after training: 0.463235294117647
User 97369 does not improve AUC. Reverting changes.
Training on augumented user 54901 31/50 current_auc = 0.463235294117647
User 54901 AUC after training: 0.46078431372549017
User 54901 does not improve AUC. Reverting changes.
Training on augumented user 105749 32/50 current_auc = 0.463235294117647
User 105749 AUC after training: 0.463235294117647
User 105749 does not improve AUC. Reverting changes.
Training on augumented user 13031 33/50 current_auc = 0.463235294117647
User 13031 AUC after training: 0.463235294117647
User 13031 does not improve AUC. Reverting changes.
Training on augumented user 113212 34/50 current_auc = 0.463235294117647
User 113212 AUC after training: 0.4656862745098039
User 113212 improves AUC. Keeping the model.
Training on augumented user 18059 35/50 current_auc = 0.4656862745098039
User 18059 AUC after training: 0.463235294117647
User 18059 does not improve AUC. Reverting changes.
Training on augumented user 50514 36/50 current_auc = 0.4656862745098039
User 50514 AUC after training: 0.4656862745098039
User 50514 does not improve AUC. Reverting changes.
Training on augumented user 8228 37/50 current_auc = 0.4656862745098039
User 8228 AUC after training: 0.4656862745098039
User 8228 does not improve AUC. Reverting changes.
Training on augumented user 109044 38/50 current_auc = 0.4656862745098039
User 109044 AUC after training: 0.4656862745098039
User 109044 does not improve AUC. Reverting changes.
Training on augumented user 44817 39/50 current_auc = 0.4656862745098039
User 44817 AUC after training: 0.4656862745098039
User 44817 does not improve AUC. Reverting changes.
Training on augumented user 136477 40/50 current_auc = 0.4656862745098039
User 136477 AUC after training: 0.463235294117647
User 136477 does not improve AUC. Reverting changes.
Training on augumented user 128796 41/50 current_auc = 0.4656862745098039
User 128796 AUC after training: 0.463235294117647
User 128796 does not improve AUC. Reverting changes.
Training on augumented user 122595 42/50 current_auc = 0.4656862745098039
User 122595 AUC after training: 0.4656862745098039
User 122595 does not improve AUC. Reverting changes.
Training on augumented user 55657 43/50 current_auc = 0.4656862745098039
User 55657 AUC after training: 0.4583333333333333
User 55657 does not improve AUC. Reverting changes.
Training on augumented user 86994 44/50 current_auc = 0.4656862745098039
User 86994 AUC after training: 0.4656862745098039
User 86994 does not improve AUC. Reverting changes.
Training on augumented user 60886 45/50 current_auc = 0.4656862745098039
User 60886 AUC after training: 0.463235294117647
User 60886 does not improve AUC. Reverting changes.
Training on augumented user 22204 46/50 current_auc = 0.4656862745098039
User 22204 AUC after training: 0.463235294117647
User 22204 does not improve AUC. Reverting changes.
Training on augumented user 1004 47/50 current_auc = 0.4656862745098039
User 1004 AUC after training: 0.463235294117647
User 1004 does not improve AUC. Reverting changes.
Training on augumented user 134963 48/50 current_auc = 0.4656862745098039
User 134963 AUC after training: 0.463235294117647
User 134963 does not improve AUC. Reverting changes.
Training on augumented user 102778 49/50 current_auc = 0.4656862745098039
User 102778 AUC after training: 0.463235294117647
User 102778 does not improve AUC. Reverting changes.
[2024-12-02 18:46:15.813752] start test user 44642 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:16.524374] start test user 44642 125/568 recall augumented users by random, augumented_users = [51469, 25145, 20033, 38693, 74640, 103788, 56469, 101934, 133962, 92841, 135301, 31895, 133736, 136494, 125106, 5579, 7057, 130143, 84537, 12042, 71320, 51617, 114189, 47890, 97397, 58273, 40, 42533, 74414, 2995, 95874, 22466, 120133, 129077, 64347, 112808, 113488, 66083, 31865, 38644, 126582, 57829, 77435, 56529, 64059, 30989, 12527, 83897, 93438, 74309]
[2024-12-02 18:46:16.539917] user = 44642 Cloud 125/568
[2024-12-02 18:46:16.551005] user = 44642 Local 125/568
[2024-12-02 18:46:16.583517] user = 44642 Local+ 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:18.698844] user = 44642 MPDA- 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 51469 0/50 current_auc = 0.0
User 51469 AUC after training: 0.0
User 51469 does not improve AUC. Reverting changes.
Training on augumented user 25145 1/50 current_auc = 0.0
User 25145 AUC after training: 0.0
User 25145 does not improve AUC. Reverting changes.
Training on augumented user 20033 2/50 current_auc = 0.0
User 20033 AUC after training: 0.0
User 20033 does not improve AUC. Reverting changes.
Training on augumented user 38693 3/50 current_auc = 0.0
User 38693 AUC after training: 0.0
User 38693 does not improve AUC. Reverting changes.
Training on augumented user 74640 4/50 current_auc = 0.0
User 74640 AUC after training: 0.0
User 74640 does not improve AUC. Reverting changes.
Training on augumented user 103788 5/50 current_auc = 0.0
User 103788 AUC after training: 0.0
User 103788 does not improve AUC. Reverting changes.
Training on augumented user 56469 6/50 current_auc = 0.0
User 56469 AUC after training: 0.0
User 56469 does not improve AUC. Reverting changes.
Training on augumented user 101934 7/50 current_auc = 0.0
User 101934 AUC after training: 0.0
User 101934 does not improve AUC. Reverting changes.
Training on augumented user 133962 8/50 current_auc = 0.0
User 133962 AUC after training: 0.0
User 133962 does not improve AUC. Reverting changes.
Training on augumented user 92841 9/50 current_auc = 0.0
User 92841 AUC after training: 0.0
User 92841 does not improve AUC. Reverting changes.
Training on augumented user 135301 10/50 current_auc = 0.0
User 135301 AUC after training: 0.0
User 135301 does not improve AUC. Reverting changes.
Training on augumented user 31895 11/50 current_auc = 0.0
User 31895 AUC after training: 0.0
User 31895 does not improve AUC. Reverting changes.
Training on augumented user 133736 12/50 current_auc = 0.0
User 133736 AUC after training: 0.0
User 133736 does not improve AUC. Reverting changes.
Training on augumented user 136494 13/50 current_auc = 0.0
User 136494 AUC after training: 0.0
User 136494 does not improve AUC. Reverting changes.
Training on augumented user 125106 14/50 current_auc = 0.0
User 125106 AUC after training: 0.0
User 125106 does not improve AUC. Reverting changes.
Training on augumented user 5579 15/50 current_auc = 0.0
User 5579 AUC after training: 0.0
User 5579 does not improve AUC. Reverting changes.
Training on augumented user 7057 16/50 current_auc = 0.0
User 7057 AUC after training: 0.0
User 7057 does not improve AUC. Reverting changes.
Training on augumented user 130143 17/50 current_auc = 0.0
User 130143 AUC after training: 0.0
User 130143 does not improve AUC. Reverting changes.
Training on augumented user 84537 18/50 current_auc = 0.0
User 84537 AUC after training: 0.0
User 84537 does not improve AUC. Reverting changes.
Training on augumented user 12042 19/50 current_auc = 0.0
User 12042 AUC after training: 0.0
User 12042 does not improve AUC. Reverting changes.
Training on augumented user 71320 20/50 current_auc = 0.0
User 71320 AUC after training: 0.0
User 71320 does not improve AUC. Reverting changes.
Training on augumented user 51617 21/50 current_auc = 0.0
User 51617 AUC after training: 0.0
User 51617 does not improve AUC. Reverting changes.
Training on augumented user 114189 22/50 current_auc = 0.0
User 114189 AUC after training: 0.0
User 114189 does not improve AUC. Reverting changes.
Training on augumented user 47890 23/50 current_auc = 0.0
User 47890 AUC after training: 0.0
User 47890 does not improve AUC. Reverting changes.
Training on augumented user 97397 24/50 current_auc = 0.0
User 97397 AUC after training: 0.0
User 97397 does not improve AUC. Reverting changes.
Training on augumented user 58273 25/50 current_auc = 0.0
User 58273 AUC after training: 0.0
User 58273 does not improve AUC. Reverting changes.
Training on augumented user 40 26/50 current_auc = 0.0
User 40 AUC after training: 0.0
User 40 does not improve AUC. Reverting changes.
Training on augumented user 42533 27/50 current_auc = 0.0
User 42533 AUC after training: 0.0
User 42533 does not improve AUC. Reverting changes.
Training on augumented user 74414 28/50 current_auc = 0.0
User 74414 AUC after training: 0.0
User 74414 does not improve AUC. Reverting changes.
Training on augumented user 2995 29/50 current_auc = 0.0
User 2995 AUC after training: 0.0
User 2995 does not improve AUC. Reverting changes.
Training on augumented user 95874 30/50 current_auc = 0.0
User 95874 AUC after training: 0.0
User 95874 does not improve AUC. Reverting changes.
Training on augumented user 22466 31/50 current_auc = 0.0
User 22466 AUC after training: 0.0
User 22466 does not improve AUC. Reverting changes.
Training on augumented user 120133 32/50 current_auc = 0.0
User 120133 AUC after training: 0.0
User 120133 does not improve AUC. Reverting changes.
Training on augumented user 129077 33/50 current_auc = 0.0
User 129077 AUC after training: 0.0
User 129077 does not improve AUC. Reverting changes.
Training on augumented user 64347 34/50 current_auc = 0.0
User 64347 AUC after training: 0.0
User 64347 does not improve AUC. Reverting changes.
Training on augumented user 112808 35/50 current_auc = 0.0
User 112808 AUC after training: 0.0
User 112808 does not improve AUC. Reverting changes.
Training on augumented user 113488 36/50 current_auc = 0.0
User 113488 AUC after training: 0.0
User 113488 does not improve AUC. Reverting changes.
Training on augumented user 66083 37/50 current_auc = 0.0
User 66083 AUC after training: 0.0
User 66083 does not improve AUC. Reverting changes.
Training on augumented user 31865 38/50 current_auc = 0.0
User 31865 AUC after training: 0.0
User 31865 does not improve AUC. Reverting changes.
Training on augumented user 38644 39/50 current_auc = 0.0
User 38644 AUC after training: 0.0
User 38644 does not improve AUC. Reverting changes.
Training on augumented user 126582 40/50 current_auc = 0.0
User 126582 AUC after training: 0.0
User 126582 does not improve AUC. Reverting changes.
Training on augumented user 57829 41/50 current_auc = 0.0
User 57829 AUC after training: 0.0
User 57829 does not improve AUC. Reverting changes.
Training on augumented user 77435 42/50 current_auc = 0.0
User 77435 AUC after training: 0.0
User 77435 does not improve AUC. Reverting changes.
Training on augumented user 56529 43/50 current_auc = 0.0
User 56529 AUC after training: 0.0
User 56529 does not improve AUC. Reverting changes.
Training on augumented user 64059 44/50 current_auc = 0.0
User 64059 AUC after training: 0.0
User 64059 does not improve AUC. Reverting changes.
Training on augumented user 30989 45/50 current_auc = 0.0
User 30989 AUC after training: 0.0
User 30989 does not improve AUC. Reverting changes.
Training on augumented user 12527 46/50 current_auc = 0.0
User 12527 AUC after training: 0.0
User 12527 does not improve AUC. Reverting changes.
Training on augumented user 83897 47/50 current_auc = 0.0
User 83897 AUC after training: 0.0
User 83897 does not improve AUC. Reverting changes.
Training on augumented user 93438 48/50 current_auc = 0.0
User 93438 AUC after training: 0.0
User 93438 does not improve AUC. Reverting changes.
Training on augumented user 74309 49/50 current_auc = 0.0
User 74309 AUC after training: 0.0
User 74309 does not improve AUC. Reverting changes.
[2024-12-02 18:46:49.001560] start test user 44696 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:49.472859] start test user 44696 126/568 recall augumented users by random, augumented_users = [8721, 86720, 12480, 44437, 34565, 106667, 22909, 128285, 92632, 130288, 118808, 12668, 9501, 67502, 1640, 99353, 92395, 101928, 9468, 69092, 84036, 124451, 70988, 66973, 8480, 125097, 746, 84749, 133709, 17687, 7252, 96748, 63937, 46453, 7008, 105973, 125114, 13685, 112498, 81289, 52073, 107652, 31721, 46117, 66863, 23732, 126430, 101248, 45946, 59952]
[2024-12-02 18:46:49.491345] user = 44696 Cloud 126/568
[2024-12-02 18:46:49.506689] user = 44696 Local 126/568
[2024-12-02 18:46:49.588988] user = 44696 Local+ 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:52.599224] user = 44696 MPDA- 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6203473945409429
Training on augumented user 8721 0/50 current_auc = 0.6203473945409429
User 8721 AUC after training: 0.6215880893300249
User 8721 improves AUC. Keeping the model.
Training on augumented user 86720 1/50 current_auc = 0.6215880893300249
User 86720 AUC after training: 0.6191066997518611
User 86720 does not improve AUC. Reverting changes.
Training on augumented user 12480 2/50 current_auc = 0.6215880893300249
User 12480 AUC after training: 0.6209677419354838
User 12480 does not improve AUC. Reverting changes.
Training on augumented user 44437 3/50 current_auc = 0.6215880893300249
User 44437 AUC after training: 0.6215880893300249
User 44437 does not improve AUC. Reverting changes.
Training on augumented user 34565 4/50 current_auc = 0.6215880893300249
User 34565 AUC after training: 0.620347394540943
User 34565 does not improve AUC. Reverting changes.
Training on augumented user 106667 5/50 current_auc = 0.6215880893300249
User 106667 AUC after training: 0.6209677419354839
User 106667 does not improve AUC. Reverting changes.
Training on augumented user 22909 6/50 current_auc = 0.6215880893300249
User 22909 AUC after training: 0.620347394540943
User 22909 does not improve AUC. Reverting changes.
Training on augumented user 128285 7/50 current_auc = 0.6215880893300249
User 128285 AUC after training: 0.6203473945409429
User 128285 does not improve AUC. Reverting changes.
Training on augumented user 92632 8/50 current_auc = 0.6215880893300249
User 92632 AUC after training: 0.620967741935484
User 92632 does not improve AUC. Reverting changes.
Training on augumented user 130288 9/50 current_auc = 0.6215880893300249
User 130288 AUC after training: 0.620967741935484
User 130288 does not improve AUC. Reverting changes.
Training on augumented user 118808 10/50 current_auc = 0.6215880893300249
User 118808 AUC after training: 0.6228287841191067
User 118808 improves AUC. Keeping the model.
Training on augumented user 12668 11/50 current_auc = 0.6228287841191067
User 12668 AUC after training: 0.6222084367245657
User 12668 does not improve AUC. Reverting changes.
Training on augumented user 9501 12/50 current_auc = 0.6228287841191067
User 9501 AUC after training: 0.6191066997518611
User 9501 does not improve AUC. Reverting changes.
Training on augumented user 67502 13/50 current_auc = 0.6228287841191067
User 67502 AUC after training: 0.6222084367245657
User 67502 does not improve AUC. Reverting changes.
Training on augumented user 1640 14/50 current_auc = 0.6228287841191067
User 1640 AUC after training: 0.6209677419354839
User 1640 does not improve AUC. Reverting changes.
Training on augumented user 99353 15/50 current_auc = 0.6228287841191067
User 99353 AUC after training: 0.6234491315136477
User 99353 improves AUC. Keeping the model.
Training on augumented user 92395 16/50 current_auc = 0.6234491315136477
User 92395 AUC after training: 0.6228287841191067
User 92395 does not improve AUC. Reverting changes.
Training on augumented user 101928 17/50 current_auc = 0.6234491315136477
User 101928 AUC after training: 0.620347394540943
User 101928 does not improve AUC. Reverting changes.
Training on augumented user 9468 18/50 current_auc = 0.6234491315136477
User 9468 AUC after training: 0.6222084367245657
User 9468 does not improve AUC. Reverting changes.
Training on augumented user 69092 19/50 current_auc = 0.6234491315136477
User 69092 AUC after training: 0.6240694789081886
User 69092 improves AUC. Keeping the model.
Training on augumented user 84036 20/50 current_auc = 0.6240694789081886
User 84036 AUC after training: 0.621588089330025
User 84036 does not improve AUC. Reverting changes.
Training on augumented user 124451 21/50 current_auc = 0.6240694789081886
User 124451 AUC after training: 0.6234491315136477
User 124451 does not improve AUC. Reverting changes.
Training on augumented user 70988 22/50 current_auc = 0.6240694789081886
User 70988 AUC after training: 0.6240694789081886
User 70988 does not improve AUC. Reverting changes.
Training on augumented user 66973 23/50 current_auc = 0.6240694789081886
User 66973 AUC after training: 0.6234491315136477
User 66973 does not improve AUC. Reverting changes.
Training on augumented user 8480 24/50 current_auc = 0.6240694789081886
User 8480 AUC after training: 0.6215880893300249
User 8480 does not improve AUC. Reverting changes.
Training on augumented user 125097 25/50 current_auc = 0.6240694789081886
User 125097 AUC after training: 0.6234491315136477
User 125097 does not improve AUC. Reverting changes.
Training on augumented user 746 26/50 current_auc = 0.6240694789081886
User 746 AUC after training: 0.6228287841191067
User 746 does not improve AUC. Reverting changes.
Training on augumented user 84749 27/50 current_auc = 0.6240694789081886
User 84749 AUC after training: 0.6228287841191067
User 84749 does not improve AUC. Reverting changes.
Training on augumented user 133709 28/50 current_auc = 0.6240694789081886
User 133709 AUC after training: 0.6228287841191067
User 133709 does not improve AUC. Reverting changes.
Training on augumented user 17687 29/50 current_auc = 0.6240694789081886
User 17687 AUC after training: 0.6222084367245657
User 17687 does not improve AUC. Reverting changes.
Training on augumented user 7252 30/50 current_auc = 0.6240694789081886
User 7252 AUC after training: 0.6222084367245657
User 7252 does not improve AUC. Reverting changes.
Training on augumented user 96748 31/50 current_auc = 0.6240694789081886
User 96748 AUC after training: 0.6222084367245657
User 96748 does not improve AUC. Reverting changes.
Training on augumented user 63937 32/50 current_auc = 0.6240694789081886
User 63937 AUC after training: 0.6228287841191067
User 63937 does not improve AUC. Reverting changes.
Training on augumented user 46453 33/50 current_auc = 0.6240694789081886
User 46453 AUC after training: 0.6228287841191067
User 46453 does not improve AUC. Reverting changes.
Training on augumented user 7008 34/50 current_auc = 0.6240694789081886
User 7008 AUC after training: 0.6240694789081886
User 7008 does not improve AUC. Reverting changes.
Training on augumented user 105973 35/50 current_auc = 0.6240694789081886
User 105973 AUC after training: 0.6228287841191067
User 105973 does not improve AUC. Reverting changes.
Training on augumented user 125114 36/50 current_auc = 0.6240694789081886
User 125114 AUC after training: 0.6228287841191067
User 125114 does not improve AUC. Reverting changes.
Training on augumented user 13685 37/50 current_auc = 0.6240694789081886
User 13685 AUC after training: 0.6234491315136477
User 13685 does not improve AUC. Reverting changes.
Training on augumented user 112498 38/50 current_auc = 0.6240694789081886
User 112498 AUC after training: 0.6240694789081886
User 112498 does not improve AUC. Reverting changes.
Training on augumented user 81289 39/50 current_auc = 0.6240694789081886
User 81289 AUC after training: 0.6234491315136477
User 81289 does not improve AUC. Reverting changes.
Training on augumented user 52073 40/50 current_auc = 0.6240694789081886
User 52073 AUC after training: 0.6234491315136477
User 52073 does not improve AUC. Reverting changes.
Training on augumented user 107652 41/50 current_auc = 0.6240694789081886
User 107652 AUC after training: 0.6234491315136477
User 107652 does not improve AUC. Reverting changes.
Training on augumented user 31721 42/50 current_auc = 0.6240694789081886
User 31721 AUC after training: 0.6240694789081886
User 31721 does not improve AUC. Reverting changes.
Training on augumented user 46117 43/50 current_auc = 0.6240694789081886
User 46117 AUC after training: 0.6228287841191067
User 46117 does not improve AUC. Reverting changes.
Training on augumented user 66863 44/50 current_auc = 0.6240694789081886
User 66863 AUC after training: 0.6222084367245658
User 66863 does not improve AUC. Reverting changes.
Training on augumented user 23732 45/50 current_auc = 0.6240694789081886
User 23732 AUC after training: 0.6209677419354839
User 23732 does not improve AUC. Reverting changes.
Training on augumented user 126430 46/50 current_auc = 0.6240694789081886
User 126430 AUC after training: 0.6222084367245658
User 126430 does not improve AUC. Reverting changes.
Training on augumented user 101248 47/50 current_auc = 0.6240694789081886
User 101248 AUC after training: 0.6234491315136477
User 101248 does not improve AUC. Reverting changes.
Training on augumented user 45946 48/50 current_auc = 0.6240694789081886
User 45946 AUC after training: 0.6228287841191067
User 45946 does not improve AUC. Reverting changes.
Training on augumented user 59952 49/50 current_auc = 0.6240694789081886
User 59952 AUC after training: 0.6222084367245657
User 59952 does not improve AUC. Reverting changes.
[2024-12-02 18:47:20.727909] start test user 44762 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:21.346452] start test user 44762 127/568 recall augumented users by random, augumented_users = [111823, 63301, 42903, 120937, 60174, 48739, 1199, 112589, 87769, 77562, 120149, 101030, 105773, 4177, 16894, 52895, 79424, 6809, 72184, 35134, 23996, 58677, 54362, 18644, 84392, 2292, 43034, 46252, 93044, 103094, 20896, 67227, 89689, 11035, 90683, 39189, 47353, 114683, 7837, 76538, 97406, 86822, 82511, 133709, 75038, 125280, 41462, 17118, 124244, 136483]
[2024-12-02 18:47:21.363409] user = 44762 Cloud 127/568
[2024-12-02 18:47:21.374463] user = 44762 Local 127/568
[2024-12-02 18:47:21.589301] user = 44762 Local+ 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:23.688464] user = 44762 MPDA- 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8518518518518519
Training on augumented user 111823 0/50 current_auc = 0.8518518518518519
User 111823 AUC after training: 0.8518518518518519
User 111823 does not improve AUC. Reverting changes.
Training on augumented user 63301 1/50 current_auc = 0.8518518518518519
User 63301 AUC after training: 0.8518518518518519
User 63301 does not improve AUC. Reverting changes.
Training on augumented user 42903 2/50 current_auc = 0.8518518518518519
User 42903 AUC after training: 0.8518518518518519
User 42903 does not improve AUC. Reverting changes.
Training on augumented user 120937 3/50 current_auc = 0.8518518518518519
User 120937 AUC after training: 0.8518518518518519
User 120937 does not improve AUC. Reverting changes.
Training on augumented user 60174 4/50 current_auc = 0.8518518518518519
User 60174 AUC after training: 0.8518518518518519
User 60174 does not improve AUC. Reverting changes.
Training on augumented user 48739 5/50 current_auc = 0.8518518518518519
User 48739 AUC after training: 0.8518518518518519
User 48739 does not improve AUC. Reverting changes.
Training on augumented user 1199 6/50 current_auc = 0.8518518518518519
User 1199 AUC after training: 0.8518518518518519
User 1199 does not improve AUC. Reverting changes.
Training on augumented user 112589 7/50 current_auc = 0.8518518518518519
User 112589 AUC after training: 0.8518518518518519
User 112589 does not improve AUC. Reverting changes.
Training on augumented user 87769 8/50 current_auc = 0.8518518518518519
User 87769 AUC after training: 0.8518518518518519
User 87769 does not improve AUC. Reverting changes.
Training on augumented user 77562 9/50 current_auc = 0.8518518518518519
User 77562 AUC after training: 0.8518518518518519
User 77562 does not improve AUC. Reverting changes.
Training on augumented user 120149 10/50 current_auc = 0.8518518518518519
User 120149 AUC after training: 0.8518518518518519
User 120149 does not improve AUC. Reverting changes.
Training on augumented user 101030 11/50 current_auc = 0.8518518518518519
User 101030 AUC after training: 0.8518518518518519
User 101030 does not improve AUC. Reverting changes.
Training on augumented user 105773 12/50 current_auc = 0.8518518518518519
User 105773 AUC after training: 0.8518518518518519
User 105773 does not improve AUC. Reverting changes.
Training on augumented user 4177 13/50 current_auc = 0.8518518518518519
User 4177 AUC after training: 0.8518518518518519
User 4177 does not improve AUC. Reverting changes.
Training on augumented user 16894 14/50 current_auc = 0.8518518518518519
User 16894 AUC after training: 0.8518518518518519
User 16894 does not improve AUC. Reverting changes.
Training on augumented user 52895 15/50 current_auc = 0.8518518518518519
User 52895 AUC after training: 0.8518518518518519
User 52895 does not improve AUC. Reverting changes.
Training on augumented user 79424 16/50 current_auc = 0.8518518518518519
User 79424 AUC after training: 0.8518518518518519
User 79424 does not improve AUC. Reverting changes.
Training on augumented user 6809 17/50 current_auc = 0.8518518518518519
User 6809 AUC after training: 0.8518518518518519
User 6809 does not improve AUC. Reverting changes.
Training on augumented user 72184 18/50 current_auc = 0.8518518518518519
User 72184 AUC after training: 0.8518518518518519
User 72184 does not improve AUC. Reverting changes.
Training on augumented user 35134 19/50 current_auc = 0.8518518518518519
User 35134 AUC after training: 0.8518518518518519
User 35134 does not improve AUC. Reverting changes.
Training on augumented user 23996 20/50 current_auc = 0.8518518518518519
User 23996 AUC after training: 0.8518518518518519
User 23996 does not improve AUC. Reverting changes.
Training on augumented user 58677 21/50 current_auc = 0.8518518518518519
User 58677 AUC after training: 0.8518518518518519
User 58677 does not improve AUC. Reverting changes.
Training on augumented user 54362 22/50 current_auc = 0.8518518518518519
User 54362 AUC after training: 0.8518518518518519
User 54362 does not improve AUC. Reverting changes.
Training on augumented user 18644 23/50 current_auc = 0.8518518518518519
User 18644 AUC after training: 0.8518518518518519
User 18644 does not improve AUC. Reverting changes.
Training on augumented user 84392 24/50 current_auc = 0.8518518518518519
User 84392 AUC after training: 0.8518518518518519
User 84392 does not improve AUC. Reverting changes.
Training on augumented user 2292 25/50 current_auc = 0.8518518518518519
User 2292 AUC after training: 0.8518518518518519
User 2292 does not improve AUC. Reverting changes.
Training on augumented user 43034 26/50 current_auc = 0.8518518518518519
User 43034 AUC after training: 0.8518518518518519
User 43034 does not improve AUC. Reverting changes.
Training on augumented user 46252 27/50 current_auc = 0.8518518518518519
User 46252 AUC after training: 0.8518518518518519
User 46252 does not improve AUC. Reverting changes.
Training on augumented user 93044 28/50 current_auc = 0.8518518518518519
User 93044 AUC after training: 0.8518518518518519
User 93044 does not improve AUC. Reverting changes.
Training on augumented user 103094 29/50 current_auc = 0.8518518518518519
User 103094 AUC after training: 0.8518518518518519
User 103094 does not improve AUC. Reverting changes.
Training on augumented user 20896 30/50 current_auc = 0.8518518518518519
User 20896 AUC after training: 0.8518518518518519
User 20896 does not improve AUC. Reverting changes.
Training on augumented user 67227 31/50 current_auc = 0.8518518518518519
User 67227 AUC after training: 0.8518518518518519
User 67227 does not improve AUC. Reverting changes.
Training on augumented user 89689 32/50 current_auc = 0.8518518518518519
User 89689 AUC after training: 0.8518518518518519
User 89689 does not improve AUC. Reverting changes.
Training on augumented user 11035 33/50 current_auc = 0.8518518518518519
User 11035 AUC after training: 0.8518518518518519
User 11035 does not improve AUC. Reverting changes.
Training on augumented user 90683 34/50 current_auc = 0.8518518518518519
User 90683 AUC after training: 0.8518518518518519
User 90683 does not improve AUC. Reverting changes.
Training on augumented user 39189 35/50 current_auc = 0.8518518518518519
User 39189 AUC after training: 0.8518518518518519
User 39189 does not improve AUC. Reverting changes.
Training on augumented user 47353 36/50 current_auc = 0.8518518518518519
User 47353 AUC after training: 0.8518518518518519
User 47353 does not improve AUC. Reverting changes.
Training on augumented user 114683 37/50 current_auc = 0.8518518518518519
User 114683 AUC after training: 0.8518518518518519
User 114683 does not improve AUC. Reverting changes.
Training on augumented user 7837 38/50 current_auc = 0.8518518518518519
User 7837 AUC after training: 0.8518518518518519
User 7837 does not improve AUC. Reverting changes.
Training on augumented user 76538 39/50 current_auc = 0.8518518518518519
User 76538 AUC after training: 0.8518518518518519
User 76538 does not improve AUC. Reverting changes.
Training on augumented user 97406 40/50 current_auc = 0.8518518518518519
User 97406 AUC after training: 0.8518518518518519
User 97406 does not improve AUC. Reverting changes.
Training on augumented user 86822 41/50 current_auc = 0.8518518518518519
User 86822 AUC after training: 0.8518518518518519
User 86822 does not improve AUC. Reverting changes.
Training on augumented user 82511 42/50 current_auc = 0.8518518518518519
User 82511 AUC after training: 0.8518518518518519
User 82511 does not improve AUC. Reverting changes.
Training on augumented user 133709 43/50 current_auc = 0.8518518518518519
User 133709 AUC after training: 0.8518518518518519
User 133709 does not improve AUC. Reverting changes.
Training on augumented user 75038 44/50 current_auc = 0.8518518518518519
User 75038 AUC after training: 0.8518518518518519
User 75038 does not improve AUC. Reverting changes.
Training on augumented user 125280 45/50 current_auc = 0.8518518518518519
User 125280 AUC after training: 0.8518518518518519
User 125280 does not improve AUC. Reverting changes.
Training on augumented user 41462 46/50 current_auc = 0.8518518518518519
User 41462 AUC after training: 0.8518518518518519
User 41462 does not improve AUC. Reverting changes.
Training on augumented user 17118 47/50 current_auc = 0.8518518518518519
User 17118 AUC after training: 0.8518518518518519
User 17118 does not improve AUC. Reverting changes.
Training on augumented user 124244 48/50 current_auc = 0.8518518518518519
User 124244 AUC after training: 0.8518518518518519
User 124244 does not improve AUC. Reverting changes.
Training on augumented user 136483 49/50 current_auc = 0.8518518518518519
User 136483 AUC after training: 0.8518518518518519
User 136483 does not improve AUC. Reverting changes.
[2024-12-02 18:47:56.798434] start test user 44780 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:57.604010] start test user 44780 128/568 recall augumented users by random, augumented_users = [47804, 88622, 28742, 61263, 131354, 90672, 34535, 71464, 79220, 128365, 116443, 133336, 61119, 104426, 95736, 108893, 44702, 18203, 25653, 45109, 24285, 2773, 30952, 53651, 44269, 95269, 108143, 51805, 133289, 61163, 6186, 67151, 126514, 89805, 94605, 25592, 77263, 74416, 40862, 41602, 99263, 59967, 40761, 109094, 47409, 121569, 41820, 48726, 131535, 115374]
[2024-12-02 18:47:57.645279] user = 44780 Cloud 128/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:57.672590] user = 44780 Local 128/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:57.846359] user = 44780 Local+ 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:00.509211] user = 44780 MPDA- 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 47804 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47804 AUC after training: 0.5
User 47804 does not improve AUC. Reverting changes.
Training on augumented user 88622 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88622 AUC after training: 0.5
User 88622 does not improve AUC. Reverting changes.
Training on augumented user 28742 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28742 AUC after training: 0.5
User 28742 does not improve AUC. Reverting changes.
Training on augumented user 61263 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61263 AUC after training: 0.5
User 61263 does not improve AUC. Reverting changes.
Training on augumented user 131354 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131354 AUC after training: 0.5
User 131354 does not improve AUC. Reverting changes.
Training on augumented user 90672 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90672 AUC after training: 0.5
User 90672 does not improve AUC. Reverting changes.
Training on augumented user 34535 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34535 AUC after training: 0.5
User 34535 does not improve AUC. Reverting changes.
Training on augumented user 71464 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71464 AUC after training: 0.5
User 71464 does not improve AUC. Reverting changes.
Training on augumented user 79220 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79220 AUC after training: 0.5
User 79220 does not improve AUC. Reverting changes.
Training on augumented user 128365 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128365 AUC after training: 0.5
User 128365 does not improve AUC. Reverting changes.
Training on augumented user 116443 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116443 AUC after training: 0.5
User 116443 does not improve AUC. Reverting changes.
Training on augumented user 133336 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133336 AUC after training: 0.5
User 133336 does not improve AUC. Reverting changes.
Training on augumented user 61119 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61119 AUC after training: 0.5
User 61119 does not improve AUC. Reverting changes.
Training on augumented user 104426 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104426 AUC after training: 0.5
User 104426 does not improve AUC. Reverting changes.
Training on augumented user 95736 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95736 AUC after training: 0.5
User 95736 does not improve AUC. Reverting changes.
Training on augumented user 108893 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108893 AUC after training: 0.5
User 108893 does not improve AUC. Reverting changes.
Training on augumented user 44702 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44702 AUC after training: 0.5
User 44702 does not improve AUC. Reverting changes.
Training on augumented user 18203 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18203 AUC after training: 0.5
User 18203 does not improve AUC. Reverting changes.
Training on augumented user 25653 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25653 AUC after training: 0.5
User 25653 does not improve AUC. Reverting changes.
Training on augumented user 45109 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45109 AUC after training: 0.5
User 45109 does not improve AUC. Reverting changes.
Training on augumented user 24285 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24285 AUC after training: 0.5
User 24285 does not improve AUC. Reverting changes.
Training on augumented user 2773 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2773 AUC after training: 0.5
User 2773 does not improve AUC. Reverting changes.
Training on augumented user 30952 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30952 AUC after training: 0.5
User 30952 does not improve AUC. Reverting changes.
Training on augumented user 53651 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53651 AUC after training: 0.5
User 53651 does not improve AUC. Reverting changes.
Training on augumented user 44269 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44269 AUC after training: 0.5
User 44269 does not improve AUC. Reverting changes.
Training on augumented user 95269 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95269 AUC after training: 0.5
User 95269 does not improve AUC. Reverting changes.
Training on augumented user 108143 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108143 AUC after training: 0.5
User 108143 does not improve AUC. Reverting changes.
Training on augumented user 51805 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51805 AUC after training: 0.5
User 51805 does not improve AUC. Reverting changes.
Training on augumented user 133289 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133289 AUC after training: 0.5
User 133289 does not improve AUC. Reverting changes.
Training on augumented user 61163 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61163 AUC after training: 0.5
User 61163 does not improve AUC. Reverting changes.
Training on augumented user 6186 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6186 AUC after training: 0.5
User 6186 does not improve AUC. Reverting changes.
Training on augumented user 67151 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67151 AUC after training: 0.5
User 67151 does not improve AUC. Reverting changes.
Training on augumented user 126514 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126514 AUC after training: 0.5
User 126514 does not improve AUC. Reverting changes.
Training on augumented user 89805 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89805 AUC after training: 0.5
User 89805 does not improve AUC. Reverting changes.
Training on augumented user 94605 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94605 AUC after training: 0.5
User 94605 does not improve AUC. Reverting changes.
Training on augumented user 25592 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25592 AUC after training: 0.5
User 25592 does not improve AUC. Reverting changes.
Training on augumented user 77263 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77263 AUC after training: 0.5
User 77263 does not improve AUC. Reverting changes.
Training on augumented user 74416 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74416 AUC after training: 0.5
User 74416 does not improve AUC. Reverting changes.
Training on augumented user 40862 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40862 AUC after training: 0.5
User 40862 does not improve AUC. Reverting changes.
Training on augumented user 41602 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41602 AUC after training: 0.5
User 41602 does not improve AUC. Reverting changes.
Training on augumented user 99263 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99263 AUC after training: 0.5
User 99263 does not improve AUC. Reverting changes.
Training on augumented user 59967 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59967 AUC after training: 0.5
User 59967 does not improve AUC. Reverting changes.
Training on augumented user 40761 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40761 AUC after training: 0.5
User 40761 does not improve AUC. Reverting changes.
Training on augumented user 109094 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109094 AUC after training: 0.5
User 109094 does not improve AUC. Reverting changes.
Training on augumented user 47409 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47409 AUC after training: 0.5
User 47409 does not improve AUC. Reverting changes.
Training on augumented user 121569 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121569 AUC after training: 0.5
User 121569 does not improve AUC. Reverting changes.
Training on augumented user 41820 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41820 AUC after training: 0.5
User 41820 does not improve AUC. Reverting changes.
Training on augumented user 48726 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48726 AUC after training: 0.5
User 48726 does not improve AUC. Reverting changes.
Training on augumented user 131535 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131535 AUC after training: 0.5
User 131535 does not improve AUC. Reverting changes.
Training on augumented user 115374 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115374 AUC after training: 0.5
User 115374 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:31.740756] start test user 44826 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:32.546616] start test user 44826 129/568 recall augumented users by random, augumented_users = [118980, 79937, 124483, 69051, 59917, 9645, 74376, 79722, 21443, 45741, 115081, 95827, 34928, 81164, 46587, 113996, 5853, 46005, 116948, 91427, 88094, 1912, 46843, 45077, 2714, 128873, 119707, 88101, 33824, 83036, 55672, 111998, 22496, 135391, 51113, 86286, 17544, 116651, 131098, 50324, 28866, 88697, 33190, 78384, 53712, 47803, 2772, 109449, 19122, 111670]
[2024-12-02 18:48:32.564154] user = 44826 Cloud 129/568
[2024-12-02 18:48:32.576718] user = 44826 Local 129/568
[2024-12-02 18:48:32.623788] user = 44826 Local+ 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:36.104451] user = 44826 MPDA- 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9285714285714286
Training on augumented user 118980 0/50 current_auc = 0.9285714285714286
User 118980 AUC after training: 0.9285714285714286
User 118980 does not improve AUC. Reverting changes.
Training on augumented user 79937 1/50 current_auc = 0.9285714285714286
User 79937 AUC after training: 0.9285714285714286
User 79937 does not improve AUC. Reverting changes.
Training on augumented user 124483 2/50 current_auc = 0.9285714285714286
User 124483 AUC after training: 0.9285714285714286
User 124483 does not improve AUC. Reverting changes.
Training on augumented user 69051 3/50 current_auc = 0.9285714285714286
User 69051 AUC after training: 0.9285714285714286
User 69051 does not improve AUC. Reverting changes.
Training on augumented user 59917 4/50 current_auc = 0.9285714285714286
User 59917 AUC after training: 0.9285714285714286
User 59917 does not improve AUC. Reverting changes.
Training on augumented user 9645 5/50 current_auc = 0.9285714285714286
User 9645 AUC after training: 0.9285714285714286
User 9645 does not improve AUC. Reverting changes.
Training on augumented user 74376 6/50 current_auc = 0.9285714285714286
User 74376 AUC after training: 0.9285714285714286
User 74376 does not improve AUC. Reverting changes.
Training on augumented user 79722 7/50 current_auc = 0.9285714285714286
User 79722 AUC after training: 0.9285714285714286
User 79722 does not improve AUC. Reverting changes.
Training on augumented user 21443 8/50 current_auc = 0.9285714285714286
User 21443 AUC after training: 0.9285714285714286
User 21443 does not improve AUC. Reverting changes.
Training on augumented user 45741 9/50 current_auc = 0.9285714285714286
User 45741 AUC after training: 0.9285714285714286
User 45741 does not improve AUC. Reverting changes.
Training on augumented user 115081 10/50 current_auc = 0.9285714285714286
User 115081 AUC after training: 0.9285714285714286
User 115081 does not improve AUC. Reverting changes.
Training on augumented user 95827 11/50 current_auc = 0.9285714285714286
User 95827 AUC after training: 0.9285714285714286
User 95827 does not improve AUC. Reverting changes.
Training on augumented user 34928 12/50 current_auc = 0.9285714285714286
User 34928 AUC after training: 0.9285714285714286
User 34928 does not improve AUC. Reverting changes.
Training on augumented user 81164 13/50 current_auc = 0.9285714285714286
User 81164 AUC after training: 0.9285714285714286
User 81164 does not improve AUC. Reverting changes.
Training on augumented user 46587 14/50 current_auc = 0.9285714285714286
User 46587 AUC after training: 0.9285714285714286
User 46587 does not improve AUC. Reverting changes.
Training on augumented user 113996 15/50 current_auc = 0.9285714285714286
User 113996 AUC after training: 0.9285714285714286
User 113996 does not improve AUC. Reverting changes.
Training on augumented user 5853 16/50 current_auc = 0.9285714285714286
User 5853 AUC after training: 0.9285714285714286
User 5853 does not improve AUC. Reverting changes.
Training on augumented user 46005 17/50 current_auc = 0.9285714285714286
User 46005 AUC after training: 0.9285714285714286
User 46005 does not improve AUC. Reverting changes.
Training on augumented user 116948 18/50 current_auc = 0.9285714285714286
User 116948 AUC after training: 0.9285714285714286
User 116948 does not improve AUC. Reverting changes.
Training on augumented user 91427 19/50 current_auc = 0.9285714285714286
User 91427 AUC after training: 0.9285714285714286
User 91427 does not improve AUC. Reverting changes.
Training on augumented user 88094 20/50 current_auc = 0.9285714285714286
User 88094 AUC after training: 0.9285714285714286
User 88094 does not improve AUC. Reverting changes.
Training on augumented user 1912 21/50 current_auc = 0.9285714285714286
User 1912 AUC after training: 0.9285714285714286
User 1912 does not improve AUC. Reverting changes.
Training on augumented user 46843 22/50 current_auc = 0.9285714285714286
User 46843 AUC after training: 0.9285714285714286
User 46843 does not improve AUC. Reverting changes.
Training on augumented user 45077 23/50 current_auc = 0.9285714285714286
User 45077 AUC after training: 0.9285714285714286
User 45077 does not improve AUC. Reverting changes.
Training on augumented user 2714 24/50 current_auc = 0.9285714285714286
User 2714 AUC after training: 0.9285714285714286
User 2714 does not improve AUC. Reverting changes.
Training on augumented user 128873 25/50 current_auc = 0.9285714285714286
User 128873 AUC after training: 0.9285714285714286
User 128873 does not improve AUC. Reverting changes.
Training on augumented user 119707 26/50 current_auc = 0.9285714285714286
User 119707 AUC after training: 0.9285714285714286
User 119707 does not improve AUC. Reverting changes.
Training on augumented user 88101 27/50 current_auc = 0.9285714285714286
User 88101 AUC after training: 0.9285714285714286
User 88101 does not improve AUC. Reverting changes.
Training on augumented user 33824 28/50 current_auc = 0.9285714285714286
User 33824 AUC after training: 0.9285714285714286
User 33824 does not improve AUC. Reverting changes.
Training on augumented user 83036 29/50 current_auc = 0.9285714285714286
User 83036 AUC after training: 0.9285714285714286
User 83036 does not improve AUC. Reverting changes.
Training on augumented user 55672 30/50 current_auc = 0.9285714285714286
User 55672 AUC after training: 0.9285714285714286
User 55672 does not improve AUC. Reverting changes.
Training on augumented user 111998 31/50 current_auc = 0.9285714285714286
User 111998 AUC after training: 0.9285714285714286
User 111998 does not improve AUC. Reverting changes.
Training on augumented user 22496 32/50 current_auc = 0.9285714285714286
User 22496 AUC after training: 0.9285714285714286
User 22496 does not improve AUC. Reverting changes.
Training on augumented user 135391 33/50 current_auc = 0.9285714285714286
User 135391 AUC after training: 0.9285714285714286
User 135391 does not improve AUC. Reverting changes.
Training on augumented user 51113 34/50 current_auc = 0.9285714285714286
User 51113 AUC after training: 0.9285714285714286
User 51113 does not improve AUC. Reverting changes.
Training on augumented user 86286 35/50 current_auc = 0.9285714285714286
User 86286 AUC after training: 0.9285714285714286
User 86286 does not improve AUC. Reverting changes.
Training on augumented user 17544 36/50 current_auc = 0.9285714285714286
User 17544 AUC after training: 0.9285714285714286
User 17544 does not improve AUC. Reverting changes.
Training on augumented user 116651 37/50 current_auc = 0.9285714285714286
User 116651 AUC after training: 0.9285714285714286
User 116651 does not improve AUC. Reverting changes.
Training on augumented user 131098 38/50 current_auc = 0.9285714285714286
User 131098 AUC after training: 0.9285714285714286
User 131098 does not improve AUC. Reverting changes.
Training on augumented user 50324 39/50 current_auc = 0.9285714285714286
User 50324 AUC after training: 0.9285714285714286
User 50324 does not improve AUC. Reverting changes.
Training on augumented user 28866 40/50 current_auc = 0.9285714285714286
User 28866 AUC after training: 0.9285714285714286
User 28866 does not improve AUC. Reverting changes.
Training on augumented user 88697 41/50 current_auc = 0.9285714285714286
User 88697 AUC after training: 0.9285714285714286
User 88697 does not improve AUC. Reverting changes.
Training on augumented user 33190 42/50 current_auc = 0.9285714285714286
User 33190 AUC after training: 0.9285714285714286
User 33190 does not improve AUC. Reverting changes.
Training on augumented user 78384 43/50 current_auc = 0.9285714285714286
User 78384 AUC after training: 0.9285714285714286
User 78384 does not improve AUC. Reverting changes.
Training on augumented user 53712 44/50 current_auc = 0.9285714285714286
User 53712 AUC after training: 0.9285714285714286
User 53712 does not improve AUC. Reverting changes.
Training on augumented user 47803 45/50 current_auc = 0.9285714285714286
User 47803 AUC after training: 0.9285714285714286
User 47803 does not improve AUC. Reverting changes.
Training on augumented user 2772 46/50 current_auc = 0.9285714285714286
User 2772 AUC after training: 0.9285714285714286
User 2772 does not improve AUC. Reverting changes.
Training on augumented user 109449 47/50 current_auc = 0.9285714285714286
User 109449 AUC after training: 0.9285714285714286
User 109449 does not improve AUC. Reverting changes.
Training on augumented user 19122 48/50 current_auc = 0.9285714285714286
User 19122 AUC after training: 0.9285714285714286
User 19122 does not improve AUC. Reverting changes.
Training on augumented user 111670 49/50 current_auc = 0.9285714285714286
User 111670 AUC after training: 0.9285714285714286
User 111670 does not improve AUC. Reverting changes.
[2024-12-02 18:49:04.216843] start test user 44875 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:05.092581] start test user 44875 130/568 recall augumented users by random, augumented_users = [8273, 55244, 78118, 74913, 22222, 80172, 5339, 2541, 107806, 52071, 74997, 30502, 121305, 38193, 21157, 91507, 1436, 24323, 108585, 61953, 125980, 120072, 45603, 16527, 90755, 56237, 89600, 24525, 64589, 49742, 32031, 39644, 88019, 95865, 6082, 117814, 17958, 64988, 33671, 28570, 56486, 117410, 97881, 55846, 19827, 99866, 107256, 87970, 55253, 88913]
[2024-12-02 18:49:05.110692] user = 44875 Cloud 130/568
[2024-12-02 18:49:05.138360] user = 44875 Local 130/568
[2024-12-02 18:49:05.209801] user = 44875 Local+ 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:08.797028] user = 44875 MPDA- 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7190099411645364
Training on augumented user 8273 0/50 current_auc = 0.7190099411645364
User 8273 AUC after training: 0.7178940961655509
User 8273 does not improve AUC. Reverting changes.
Training on augumented user 55244 1/50 current_auc = 0.7190099411645364
User 55244 AUC after training: 0.7177926557110976
User 55244 does not improve AUC. Reverting changes.
Training on augumented user 78118 2/50 current_auc = 0.7190099411645364
User 78118 AUC after training: 0.7177926557110976
User 78118 does not improve AUC. Reverting changes.
Training on augumented user 74913 3/50 current_auc = 0.7190099411645364
User 74913 AUC after training: 0.7176912152566444
User 74913 does not improve AUC. Reverting changes.
Training on augumented user 22222 4/50 current_auc = 0.7190099411645364
User 22222 AUC after training: 0.7176404950294177
User 22222 does not improve AUC. Reverting changes.
Training on augumented user 80172 5/50 current_auc = 0.7190099411645364
User 80172 AUC after training: 0.7178940961655508
User 80172 does not improve AUC. Reverting changes.
Training on augumented user 5339 6/50 current_auc = 0.7190099411645364
User 5339 AUC after training: 0.7189592209373097
User 5339 does not improve AUC. Reverting changes.
Training on augumented user 2541 7/50 current_auc = 0.7190099411645364
User 2541 AUC after training: 0.7191621018462163
User 2541 improves AUC. Keeping the model.
Training on augumented user 107806 8/50 current_auc = 0.7191621018462163
User 107806 AUC after training: 0.7197707445729357
User 107806 improves AUC. Keeping the model.
Training on augumented user 52071 9/50 current_auc = 0.7197707445729357
User 52071 AUC after training: 0.7198721850273889
User 52071 improves AUC. Keeping the model.
Training on augumented user 74997 10/50 current_auc = 0.7198721850273889
User 74997 AUC after training: 0.7204808277541083
User 74997 improves AUC. Keeping the model.
Training on augumented user 30502 11/50 current_auc = 0.7204808277541083
User 30502 AUC after training: 0.7199736254818421
User 30502 does not improve AUC. Reverting changes.
Training on augumented user 121305 12/50 current_auc = 0.7204808277541083
User 121305 AUC after training: 0.7209373097991478
User 121305 improves AUC. Keeping the model.
Training on augumented user 38193 13/50 current_auc = 0.7209373097991478
User 38193 AUC after training: 0.7183505782105905
User 38193 does not improve AUC. Reverting changes.
Training on augumented user 21157 14/50 current_auc = 0.7209373097991478
User 21157 AUC after training: 0.7176912152566444
User 21157 does not improve AUC. Reverting changes.
Training on augumented user 91507 15/50 current_auc = 0.7209373097991478
User 91507 AUC after training: 0.7209373097991478
User 91507 does not improve AUC. Reverting changes.
Training on augumented user 1436 16/50 current_auc = 0.7209373097991478
User 1436 AUC after training: 0.7208865895719213
User 1436 does not improve AUC. Reverting changes.
Training on augumented user 24323 17/50 current_auc = 0.7209373097991478
User 24323 AUC after training: 0.7178433759383241
User 24323 does not improve AUC. Reverting changes.
Training on augumented user 108585 18/50 current_auc = 0.7209373097991478
User 108585 AUC after training: 0.7205822682085616
User 108585 does not improve AUC. Reverting changes.
Training on augumented user 61953 19/50 current_auc = 0.7209373097991478
User 61953 AUC after training: 0.7200243457090687
User 61953 does not improve AUC. Reverting changes.
Training on augumented user 125980 20/50 current_auc = 0.7209373097991478
User 125980 AUC after training: 0.7209373097991478
User 125980 does not improve AUC. Reverting changes.
Training on augumented user 120072 21/50 current_auc = 0.7209373097991478
User 120072 AUC after training: 0.7219009941164536
User 120072 improves AUC. Keeping the model.
Training on augumented user 45603 22/50 current_auc = 0.7219009941164536
User 45603 AUC after training: 0.7215459525258673
User 45603 does not improve AUC. Reverting changes.
Training on augumented user 16527 23/50 current_auc = 0.7219009941164536
User 16527 AUC after training: 0.7191113816189897
User 16527 does not improve AUC. Reverting changes.
Training on augumented user 90755 24/50 current_auc = 0.7219009941164536
User 90755 AUC after training: 0.7217488334347738
User 90755 does not improve AUC. Reverting changes.
Training on augumented user 56237 25/50 current_auc = 0.7219009941164536
User 56237 AUC after training: 0.7217488334347737
User 56237 does not improve AUC. Reverting changes.
Training on augumented user 89600 26/50 current_auc = 0.7219009941164536
User 89600 AUC after training: 0.720785149117468
User 89600 does not improve AUC. Reverting changes.
Training on augumented user 24525 27/50 current_auc = 0.7219009941164536
User 24525 AUC after training: 0.7217488334347737
User 24525 does not improve AUC. Reverting changes.
Training on augumented user 64589 28/50 current_auc = 0.7219009941164536
User 64589 AUC after training: 0.7226617975248528
User 64589 improves AUC. Keeping the model.
Training on augumented user 49742 29/50 current_auc = 0.7226617975248528
User 49742 AUC after training: 0.7213937918441875
User 49742 does not improve AUC. Reverting changes.
Training on augumented user 32031 30/50 current_auc = 0.7226617975248528
User 32031 AUC after training: 0.7216473929803205
User 32031 does not improve AUC. Reverting changes.
Training on augumented user 39644 31/50 current_auc = 0.7226617975248528
User 39644 AUC after training: 0.7216473929803204
User 39644 does not improve AUC. Reverting changes.
Training on augumented user 88019 32/50 current_auc = 0.7226617975248528
User 88019 AUC after training: 0.7216473929803205
User 88019 does not improve AUC. Reverting changes.
Training on augumented user 95865 33/50 current_auc = 0.7226617975248528
User 95865 AUC after training: 0.7212416311625076
User 95865 does not improve AUC. Reverting changes.
Training on augumented user 6082 34/50 current_auc = 0.7226617975248528
User 6082 AUC after training: 0.7220024345709067
User 6082 does not improve AUC. Reverting changes.
Training on augumented user 117814 35/50 current_auc = 0.7226617975248528
User 117814 AUC after training: 0.7207344288902414
User 117814 does not improve AUC. Reverting changes.
Training on augumented user 17958 36/50 current_auc = 0.7226617975248528
User 17958 AUC after training: 0.7226110772976263
User 17958 does not improve AUC. Reverting changes.
Training on augumented user 64988 37/50 current_auc = 0.7226617975248528
User 64988 AUC after training: 0.7236762020693852
User 64988 improves AUC. Keeping the model.
Training on augumented user 33671 38/50 current_auc = 0.7236762020693852
User 33671 AUC after training: 0.7233718807060255
User 33671 does not improve AUC. Reverting changes.
Training on augumented user 28570 39/50 current_auc = 0.7236762020693852
User 28570 AUC after training: 0.7232704402515723
User 28570 does not improve AUC. Reverting changes.
Training on augumented user 56486 40/50 current_auc = 0.7236762020693852
User 56486 AUC after training: 0.7233718807060256
User 56486 does not improve AUC. Reverting changes.
Training on augumented user 117410 41/50 current_auc = 0.7236762020693852
User 117410 AUC after training: 0.7192128220734428
User 117410 does not improve AUC. Reverting changes.
Training on augumented user 97881 42/50 current_auc = 0.7236762020693852
User 97881 AUC after training: 0.7213430716169609
User 97881 does not improve AUC. Reverting changes.
Training on augumented user 55846 43/50 current_auc = 0.7236762020693852
User 55846 AUC after training: 0.7233718807060255
User 55846 does not improve AUC. Reverting changes.
Training on augumented user 19827 44/50 current_auc = 0.7236762020693852
User 19827 AUC after training: 0.723168999797119
User 19827 does not improve AUC. Reverting changes.
Training on augumented user 99866 45/50 current_auc = 0.7236762020693852
User 99866 AUC after training: 0.7229661188882126
User 99866 does not improve AUC. Reverting changes.
Training on augumented user 107256 46/50 current_auc = 0.7236762020693852
User 107256 AUC after training: 0.7219517143436802
User 107256 does not improve AUC. Reverting changes.
Training on augumented user 87970 47/50 current_auc = 0.7236762020693852
User 87970 AUC after training: 0.7229661188882126
User 87970 does not improve AUC. Reverting changes.
Training on augumented user 55253 48/50 current_auc = 0.7236762020693852
User 55253 AUC after training: 0.7228646784337593
User 55253 does not improve AUC. Reverting changes.
Training on augumented user 88913 49/50 current_auc = 0.7236762020693852
User 88913 AUC after training: 0.7222560357070399
User 88913 does not improve AUC. Reverting changes.
[2024-12-02 18:49:39.266409] start test user 44952 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:39.682988] start test user 44952 131/568 recall augumented users by random, augumented_users = [43691, 89974, 46702, 106737, 7914, 130933, 89557, 122713, 39252, 22522, 99768, 94499, 46657, 53438, 63376, 45280, 103510, 110204, 114695, 64188, 124871, 22646, 27772, 19243, 31268, 60752, 483, 54511, 7810, 17641, 8926, 5036, 44560, 91808, 76982, 8994, 51466, 129103, 111466, 79611, 33715, 22096, 51474, 106467, 97631, 47841, 48840, 138104, 49204, 98972]
[2024-12-02 18:49:39.698100] user = 44952 Cloud 131/568
[2024-12-02 18:49:39.707746] user = 44952 Local 131/568
[2024-12-02 18:49:39.791697] user = 44952 Local+ 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:41.674665] user = 44952 MPDA- 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7619047619047619
Training on augumented user 43691 0/50 current_auc = 0.7619047619047619
User 43691 AUC after training: 0.7619047619047619
User 43691 does not improve AUC. Reverting changes.
Training on augumented user 89974 1/50 current_auc = 0.7619047619047619
User 89974 AUC after training: 0.7619047619047619
User 89974 does not improve AUC. Reverting changes.
Training on augumented user 46702 2/50 current_auc = 0.7619047619047619
User 46702 AUC after training: 0.7619047619047619
User 46702 does not improve AUC. Reverting changes.
Training on augumented user 106737 3/50 current_auc = 0.7619047619047619
User 106737 AUC after training: 0.7619047619047619
User 106737 does not improve AUC. Reverting changes.
Training on augumented user 7914 4/50 current_auc = 0.7619047619047619
User 7914 AUC after training: 0.7619047619047619
User 7914 does not improve AUC. Reverting changes.
Training on augumented user 130933 5/50 current_auc = 0.7619047619047619
User 130933 AUC after training: 0.7619047619047619
User 130933 does not improve AUC. Reverting changes.
Training on augumented user 89557 6/50 current_auc = 0.7619047619047619
User 89557 AUC after training: 0.7619047619047619
User 89557 does not improve AUC. Reverting changes.
Training on augumented user 122713 7/50 current_auc = 0.7619047619047619
User 122713 AUC after training: 0.7619047619047619
User 122713 does not improve AUC. Reverting changes.
Training on augumented user 39252 8/50 current_auc = 0.7619047619047619
User 39252 AUC after training: 0.7619047619047619
User 39252 does not improve AUC. Reverting changes.
Training on augumented user 22522 9/50 current_auc = 0.7619047619047619
User 22522 AUC after training: 0.7619047619047619
User 22522 does not improve AUC. Reverting changes.
Training on augumented user 99768 10/50 current_auc = 0.7619047619047619
User 99768 AUC after training: 0.7619047619047619
User 99768 does not improve AUC. Reverting changes.
Training on augumented user 94499 11/50 current_auc = 0.7619047619047619
User 94499 AUC after training: 0.7619047619047619
User 94499 does not improve AUC. Reverting changes.
Training on augumented user 46657 12/50 current_auc = 0.7619047619047619
User 46657 AUC after training: 0.7619047619047619
User 46657 does not improve AUC. Reverting changes.
Training on augumented user 53438 13/50 current_auc = 0.7619047619047619
User 53438 AUC after training: 0.7619047619047619
User 53438 does not improve AUC. Reverting changes.
Training on augumented user 63376 14/50 current_auc = 0.7619047619047619
User 63376 AUC after training: 0.7619047619047619
User 63376 does not improve AUC. Reverting changes.
Training on augumented user 45280 15/50 current_auc = 0.7619047619047619
User 45280 AUC after training: 0.7619047619047619
User 45280 does not improve AUC. Reverting changes.
Training on augumented user 103510 16/50 current_auc = 0.7619047619047619
User 103510 AUC after training: 0.7619047619047619
User 103510 does not improve AUC. Reverting changes.
Training on augumented user 110204 17/50 current_auc = 0.7619047619047619
User 110204 AUC after training: 0.7619047619047619
User 110204 does not improve AUC. Reverting changes.
Training on augumented user 114695 18/50 current_auc = 0.7619047619047619
User 114695 AUC after training: 0.7619047619047619
User 114695 does not improve AUC. Reverting changes.
Training on augumented user 64188 19/50 current_auc = 0.7619047619047619
User 64188 AUC after training: 0.7619047619047619
User 64188 does not improve AUC. Reverting changes.
Training on augumented user 124871 20/50 current_auc = 0.7619047619047619
User 124871 AUC after training: 0.7619047619047619
User 124871 does not improve AUC. Reverting changes.
Training on augumented user 22646 21/50 current_auc = 0.7619047619047619
User 22646 AUC after training: 0.7619047619047619
User 22646 does not improve AUC. Reverting changes.
Training on augumented user 27772 22/50 current_auc = 0.7619047619047619
User 27772 AUC after training: 0.7619047619047619
User 27772 does not improve AUC. Reverting changes.
Training on augumented user 19243 23/50 current_auc = 0.7619047619047619
User 19243 AUC after training: 0.7619047619047619
User 19243 does not improve AUC. Reverting changes.
Training on augumented user 31268 24/50 current_auc = 0.7619047619047619
User 31268 AUC after training: 0.7619047619047619
User 31268 does not improve AUC. Reverting changes.
Training on augumented user 60752 25/50 current_auc = 0.7619047619047619
User 60752 AUC after training: 0.7619047619047619
User 60752 does not improve AUC. Reverting changes.
Training on augumented user 483 26/50 current_auc = 0.7619047619047619
User 483 AUC after training: 0.7619047619047619
User 483 does not improve AUC. Reverting changes.
Training on augumented user 54511 27/50 current_auc = 0.7619047619047619
User 54511 AUC after training: 0.7619047619047619
User 54511 does not improve AUC. Reverting changes.
Training on augumented user 7810 28/50 current_auc = 0.7619047619047619
User 7810 AUC after training: 0.7619047619047619
User 7810 does not improve AUC. Reverting changes.
Training on augumented user 17641 29/50 current_auc = 0.7619047619047619
User 17641 AUC after training: 0.7619047619047619
User 17641 does not improve AUC. Reverting changes.
Training on augumented user 8926 30/50 current_auc = 0.7619047619047619
User 8926 AUC after training: 0.7619047619047619
User 8926 does not improve AUC. Reverting changes.
Training on augumented user 5036 31/50 current_auc = 0.7619047619047619
User 5036 AUC after training: 0.7619047619047619
User 5036 does not improve AUC. Reverting changes.
Training on augumented user 44560 32/50 current_auc = 0.7619047619047619
User 44560 AUC after training: 0.7619047619047619
User 44560 does not improve AUC. Reverting changes.
Training on augumented user 91808 33/50 current_auc = 0.7619047619047619
User 91808 AUC after training: 0.7619047619047619
User 91808 does not improve AUC. Reverting changes.
Training on augumented user 76982 34/50 current_auc = 0.7619047619047619
User 76982 AUC after training: 0.7619047619047619
User 76982 does not improve AUC. Reverting changes.
Training on augumented user 8994 35/50 current_auc = 0.7619047619047619
User 8994 AUC after training: 0.7619047619047619
User 8994 does not improve AUC. Reverting changes.
Training on augumented user 51466 36/50 current_auc = 0.7619047619047619
User 51466 AUC after training: 0.7619047619047619
User 51466 does not improve AUC. Reverting changes.
Training on augumented user 129103 37/50 current_auc = 0.7619047619047619
User 129103 AUC after training: 0.7619047619047619
User 129103 does not improve AUC. Reverting changes.
Training on augumented user 111466 38/50 current_auc = 0.7619047619047619
User 111466 AUC after training: 0.7619047619047619
User 111466 does not improve AUC. Reverting changes.
Training on augumented user 79611 39/50 current_auc = 0.7619047619047619
User 79611 AUC after training: 0.7619047619047619
User 79611 does not improve AUC. Reverting changes.
Training on augumented user 33715 40/50 current_auc = 0.7619047619047619
User 33715 AUC after training: 0.7619047619047619
User 33715 does not improve AUC. Reverting changes.
Training on augumented user 22096 41/50 current_auc = 0.7619047619047619
User 22096 AUC after training: 0.7619047619047619
User 22096 does not improve AUC. Reverting changes.
Training on augumented user 51474 42/50 current_auc = 0.7619047619047619
User 51474 AUC after training: 0.7619047619047619
User 51474 does not improve AUC. Reverting changes.
Training on augumented user 106467 43/50 current_auc = 0.7619047619047619
User 106467 AUC after training: 0.7619047619047619
User 106467 does not improve AUC. Reverting changes.
Training on augumented user 97631 44/50 current_auc = 0.7619047619047619
User 97631 AUC after training: 0.7619047619047619
User 97631 does not improve AUC. Reverting changes.
Training on augumented user 47841 45/50 current_auc = 0.7619047619047619
User 47841 AUC after training: 0.7619047619047619
User 47841 does not improve AUC. Reverting changes.
Training on augumented user 48840 46/50 current_auc = 0.7619047619047619
User 48840 AUC after training: 0.7619047619047619
User 48840 does not improve AUC. Reverting changes.
Training on augumented user 138104 47/50 current_auc = 0.7619047619047619
User 138104 AUC after training: 0.7619047619047619
User 138104 does not improve AUC. Reverting changes.
Training on augumented user 49204 48/50 current_auc = 0.7619047619047619
User 49204 AUC after training: 0.7619047619047619
User 49204 does not improve AUC. Reverting changes.
Training on augumented user 98972 49/50 current_auc = 0.7619047619047619
User 98972 AUC after training: 0.7619047619047619
User 98972 does not improve AUC. Reverting changes.
[2024-12-02 18:50:13.720441] start test user 44963 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:14.478422] start test user 44963 132/568 recall augumented users by random, augumented_users = [26350, 17318, 7490, 69957, 101277, 51874, 7144, 9191, 41059, 130347, 13928, 105793, 32997, 32133, 114710, 111643, 6628, 95558, 22949, 55453, 47145, 113741, 14378, 44935, 75142, 78166, 30842, 79224, 17157, 133155, 22532, 15310, 96990, 24247, 134897, 62963, 1695, 79591, 4657, 24182, 125350, 135664, 5922, 133410, 14801, 10536, 58547, 15404, 40814, 46683]
[2024-12-02 18:50:14.497609] user = 44963 Cloud 132/568
[2024-12-02 18:50:14.537342] user = 44963 Local 132/568
[2024-12-02 18:50:14.701366] user = 44963 Local+ 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:17.223042] user = 44963 MPDA- 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5242507435369481
Training on augumented user 26350 0/50 current_auc = 0.5242507435369481
User 26350 AUC after training: 0.5237931823381377
User 26350 does not improve AUC. Reverting changes.
Training on augumented user 17318 1/50 current_auc = 0.5242507435369481
User 17318 AUC after training: 0.5235644017387326
User 17318 does not improve AUC. Reverting changes.
Training on augumented user 7490 2/50 current_auc = 0.5242507435369481
User 7490 AUC after training: 0.5235644017387325
User 7490 does not improve AUC. Reverting changes.
Training on augumented user 69957 3/50 current_auc = 0.5242507435369481
User 69957 AUC after training: 0.5240219629375429
User 69957 does not improve AUC. Reverting changes.
Training on augumented user 101277 4/50 current_auc = 0.5242507435369481
User 101277 AUC after training: 0.5237931823381378
User 101277 does not improve AUC. Reverting changes.
Training on augumented user 51874 5/50 current_auc = 0.5242507435369481
User 51874 AUC after training: 0.5248226950354611
User 51874 improves AUC. Keeping the model.
Training on augumented user 7144 6/50 current_auc = 0.5248226950354611
User 7144 AUC after training: 0.5245939144360559
User 7144 does not improve AUC. Reverting changes.
Training on augumented user 9191 7/50 current_auc = 0.5248226950354611
User 9191 AUC after training: 0.5245939144360559
User 9191 does not improve AUC. Reverting changes.
Training on augumented user 41059 8/50 current_auc = 0.5248226950354611
User 41059 AUC after training: 0.5255090368336766
User 41059 improves AUC. Keeping the model.
Training on augumented user 130347 9/50 current_auc = 0.5255090368336766
User 130347 AUC after training: 0.5247083047357584
User 130347 does not improve AUC. Reverting changes.
Training on augumented user 13928 10/50 current_auc = 0.5255090368336766
User 13928 AUC after training: 0.5251658659345687
User 13928 does not improve AUC. Reverting changes.
Training on augumented user 105793 11/50 current_auc = 0.5255090368336766
User 105793 AUC after training: 0.5231068405399222
User 105793 does not improve AUC. Reverting changes.
Training on augumented user 32997 12/50 current_auc = 0.5255090368336766
User 32997 AUC after training: 0.5255090368336766
User 32997 does not improve AUC. Reverting changes.
Training on augumented user 32133 13/50 current_auc = 0.5255090368336766
User 32133 AUC after training: 0.5255090368336766
User 32133 does not improve AUC. Reverting changes.
Training on augumented user 114710 14/50 current_auc = 0.5255090368336766
User 114710 AUC after training: 0.5244795241363532
User 114710 does not improve AUC. Reverting changes.
Training on augumented user 111643 15/50 current_auc = 0.5255090368336766
User 111643 AUC after training: 0.5247083047357584
User 111643 does not improve AUC. Reverting changes.
Training on augumented user 6628 16/50 current_auc = 0.5255090368336766
User 6628 AUC after training: 0.5249370853351636
User 6628 does not improve AUC. Reverting changes.
Training on augumented user 95558 17/50 current_auc = 0.5255090368336766
User 95558 AUC after training: 0.5251658659345688
User 95558 does not improve AUC. Reverting changes.
Training on augumented user 22949 18/50 current_auc = 0.5255090368336766
User 22949 AUC after training: 0.5243651338366506
User 22949 does not improve AUC. Reverting changes.
Training on augumented user 55453 19/50 current_auc = 0.5255090368336766
User 55453 AUC after training: 0.5255090368336766
User 55453 does not improve AUC. Reverting changes.
Training on augumented user 47145 20/50 current_auc = 0.5255090368336766
User 47145 AUC after training: 0.5252802562342713
User 47145 does not improve AUC. Reverting changes.
Training on augumented user 113741 21/50 current_auc = 0.5255090368336766
User 113741 AUC after training: 0.5252802562342713
User 113741 does not improve AUC. Reverting changes.
Training on augumented user 14378 22/50 current_auc = 0.5255090368336766
User 14378 AUC after training: 0.5253946465339739
User 14378 does not improve AUC. Reverting changes.
Training on augumented user 44935 23/50 current_auc = 0.5255090368336766
User 44935 AUC after training: 0.5241363532372454
User 44935 does not improve AUC. Reverting changes.
Training on augumented user 75142 24/50 current_auc = 0.5255090368336766
User 75142 AUC after training: 0.5257378174330817
User 75142 improves AUC. Keeping the model.
Training on augumented user 78166 25/50 current_auc = 0.5257378174330817
User 78166 AUC after training: 0.5258522077327843
User 78166 improves AUC. Keeping the model.
Training on augumented user 30842 26/50 current_auc = 0.5258522077327843
User 30842 AUC after training: 0.5257378174330818
User 30842 does not improve AUC. Reverting changes.
Training on augumented user 79224 27/50 current_auc = 0.5258522077327843
User 79224 AUC after training: 0.5249370853351636
User 79224 does not improve AUC. Reverting changes.
Training on augumented user 17157 28/50 current_auc = 0.5258522077327843
User 17157 AUC after training: 0.5272248913292152
User 17157 improves AUC. Keeping the model.
Training on augumented user 133155 29/50 current_auc = 0.5272248913292152
User 133155 AUC after training: 0.526767330130405
User 133155 does not improve AUC. Reverting changes.
Training on augumented user 22532 30/50 current_auc = 0.5272248913292152
User 22532 AUC after training: 0.5267673301304049
User 22532 does not improve AUC. Reverting changes.
Training on augumented user 15310 31/50 current_auc = 0.5272248913292152
User 15310 AUC after training: 0.5259665980324868
User 15310 does not improve AUC. Reverting changes.
Training on augumented user 96990 32/50 current_auc = 0.5272248913292152
User 96990 AUC after training: 0.5265385495309998
User 96990 does not improve AUC. Reverting changes.
Training on augumented user 24247 33/50 current_auc = 0.5272248913292152
User 24247 AUC after training: 0.526195378631892
User 24247 does not improve AUC. Reverting changes.
Training on augumented user 134897 34/50 current_auc = 0.5272248913292152
User 134897 AUC after training: 0.5268817204301075
User 134897 does not improve AUC. Reverting changes.
Training on augumented user 62963 35/50 current_auc = 0.5272248913292152
User 62963 AUC after training: 0.5264241592312972
User 62963 does not improve AUC. Reverting changes.
Training on augumented user 1695 36/50 current_auc = 0.5272248913292152
User 1695 AUC after training: 0.5271105010295127
User 1695 does not improve AUC. Reverting changes.
Training on augumented user 79591 37/50 current_auc = 0.5272248913292152
User 79591 AUC after training: 0.5276824525280257
User 79591 improves AUC. Keeping the model.
Training on augumented user 4657 38/50 current_auc = 0.5276824525280257
User 4657 AUC after training: 0.527568062228323
User 4657 does not improve AUC. Reverting changes.
Training on augumented user 24182 39/50 current_auc = 0.5276824525280257
User 24182 AUC after training: 0.5271105010295127
User 24182 does not improve AUC. Reverting changes.
Training on augumented user 125350 40/50 current_auc = 0.5276824525280257
User 125350 AUC after training: 0.5274536719286205
User 125350 does not improve AUC. Reverting changes.
Training on augumented user 135664 41/50 current_auc = 0.5276824525280257
User 135664 AUC after training: 0.5272248913292152
User 135664 does not improve AUC. Reverting changes.
Training on augumented user 5922 42/50 current_auc = 0.5276824525280257
User 5922 AUC after training: 0.5252802562342713
User 5922 does not improve AUC. Reverting changes.
Training on augumented user 133410 43/50 current_auc = 0.5276824525280257
User 133410 AUC after training: 0.5252802562342713
User 133410 does not improve AUC. Reverting changes.
Training on augumented user 14801 44/50 current_auc = 0.5276824525280257
User 14801 AUC after training: 0.5274536719286205
User 14801 does not improve AUC. Reverting changes.
Training on augumented user 10536 45/50 current_auc = 0.5276824525280257
User 10536 AUC after training: 0.5274536719286205
User 10536 does not improve AUC. Reverting changes.
Training on augumented user 58547 46/50 current_auc = 0.5276824525280257
User 58547 AUC after training: 0.5277968428277282
User 58547 improves AUC. Keeping the model.
Training on augumented user 15404 47/50 current_auc = 0.5277968428277282
User 15404 AUC after training: 0.5264241592312973
User 15404 does not improve AUC. Reverting changes.
Training on augumented user 40814 48/50 current_auc = 0.5277968428277282
User 40814 AUC after training: 0.5242507435369481
User 40814 does not improve AUC. Reverting changes.
Training on augumented user 46683 49/50 current_auc = 0.5277968428277282
User 46683 AUC after training: 0.5269961107298101
User 46683 does not improve AUC. Reverting changes.
[2024-12-02 18:50:48.358233] start test user 44989 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:48.798265] start test user 44989 133/568 recall augumented users by random, augumented_users = [96302, 86524, 85208, 38900, 135264, 52977, 59578, 95298, 43163, 64121, 110462, 97536, 16711, 56027, 105635, 61380, 93446, 80085, 100296, 138067, 133321, 98909, 48069, 1683, 107627, 31916, 117394, 136805, 41894, 57048, 19220, 109337, 78878, 34360, 100042, 94914, 22313, 25657, 131905, 44392, 4936, 13421, 12692, 95993, 98145, 74449, 9337, 75702, 35224, 9331]
[2024-12-02 18:50:48.812907] user = 44989 Cloud 133/568
[2024-12-02 18:50:48.822353] user = 44989 Local 133/568
[2024-12-02 18:50:48.877047] user = 44989 Local+ 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:51.141551] user = 44989 MPDA- 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3611111111111111
Training on augumented user 96302 0/50 current_auc = 0.3611111111111111
User 96302 AUC after training: 0.3611111111111111
User 96302 does not improve AUC. Reverting changes.
Training on augumented user 86524 1/50 current_auc = 0.3611111111111111
User 86524 AUC after training: 0.3472222222222222
User 86524 does not improve AUC. Reverting changes.
Training on augumented user 85208 2/50 current_auc = 0.3611111111111111
User 85208 AUC after training: 0.3611111111111111
User 85208 does not improve AUC. Reverting changes.
Training on augumented user 38900 3/50 current_auc = 0.3611111111111111
User 38900 AUC after training: 0.3472222222222222
User 38900 does not improve AUC. Reverting changes.
Training on augumented user 135264 4/50 current_auc = 0.3611111111111111
User 135264 AUC after training: 0.3611111111111111
User 135264 does not improve AUC. Reverting changes.
Training on augumented user 52977 5/50 current_auc = 0.3611111111111111
User 52977 AUC after training: 0.3611111111111111
User 52977 does not improve AUC. Reverting changes.
Training on augumented user 59578 6/50 current_auc = 0.3611111111111111
User 59578 AUC after training: 0.3541666666666667
User 59578 does not improve AUC. Reverting changes.
Training on augumented user 95298 7/50 current_auc = 0.3611111111111111
User 95298 AUC after training: 0.3541666666666667
User 95298 does not improve AUC. Reverting changes.
Training on augumented user 43163 8/50 current_auc = 0.3611111111111111
User 43163 AUC after training: 0.3541666666666667
User 43163 does not improve AUC. Reverting changes.
Training on augumented user 64121 9/50 current_auc = 0.3611111111111111
User 64121 AUC after training: 0.3611111111111111
User 64121 does not improve AUC. Reverting changes.
Training on augumented user 110462 10/50 current_auc = 0.3611111111111111
User 110462 AUC after training: 0.3680555555555556
User 110462 improves AUC. Keeping the model.
Training on augumented user 97536 11/50 current_auc = 0.3680555555555556
User 97536 AUC after training: 0.3680555555555556
User 97536 does not improve AUC. Reverting changes.
Training on augumented user 16711 12/50 current_auc = 0.3680555555555556
User 16711 AUC after training: 0.3680555555555556
User 16711 does not improve AUC. Reverting changes.
Training on augumented user 56027 13/50 current_auc = 0.3680555555555556
User 56027 AUC after training: 0.3611111111111111
User 56027 does not improve AUC. Reverting changes.
Training on augumented user 105635 14/50 current_auc = 0.3680555555555556
User 105635 AUC after training: 0.3680555555555556
User 105635 does not improve AUC. Reverting changes.
Training on augumented user 61380 15/50 current_auc = 0.3680555555555556
User 61380 AUC after training: 0.3611111111111111
User 61380 does not improve AUC. Reverting changes.
Training on augumented user 93446 16/50 current_auc = 0.3680555555555556
User 93446 AUC after training: 0.3680555555555556
User 93446 does not improve AUC. Reverting changes.
Training on augumented user 80085 17/50 current_auc = 0.3680555555555556
User 80085 AUC after training: 0.3611111111111111
User 80085 does not improve AUC. Reverting changes.
Training on augumented user 100296 18/50 current_auc = 0.3680555555555556
User 100296 AUC after training: 0.3541666666666667
User 100296 does not improve AUC. Reverting changes.
Training on augumented user 138067 19/50 current_auc = 0.3680555555555556
User 138067 AUC after training: 0.3680555555555556
User 138067 does not improve AUC. Reverting changes.
Training on augumented user 133321 20/50 current_auc = 0.3680555555555556
User 133321 AUC after training: 0.3611111111111111
User 133321 does not improve AUC. Reverting changes.
Training on augumented user 98909 21/50 current_auc = 0.3680555555555556
User 98909 AUC after training: 0.3472222222222222
User 98909 does not improve AUC. Reverting changes.
Training on augumented user 48069 22/50 current_auc = 0.3680555555555556
User 48069 AUC after training: 0.3680555555555556
User 48069 does not improve AUC. Reverting changes.
Training on augumented user 1683 23/50 current_auc = 0.3680555555555556
User 1683 AUC after training: 0.3611111111111111
User 1683 does not improve AUC. Reverting changes.
Training on augumented user 107627 24/50 current_auc = 0.3680555555555556
User 107627 AUC after training: 0.3680555555555556
User 107627 does not improve AUC. Reverting changes.
Training on augumented user 31916 25/50 current_auc = 0.3680555555555556
User 31916 AUC after training: 0.3680555555555556
User 31916 does not improve AUC. Reverting changes.
Training on augumented user 117394 26/50 current_auc = 0.3680555555555556
User 117394 AUC after training: 0.3680555555555556
User 117394 does not improve AUC. Reverting changes.
Training on augumented user 136805 27/50 current_auc = 0.3680555555555556
User 136805 AUC after training: 0.3611111111111111
User 136805 does not improve AUC. Reverting changes.
Training on augumented user 41894 28/50 current_auc = 0.3680555555555556
User 41894 AUC after training: 0.3680555555555556
User 41894 does not improve AUC. Reverting changes.
Training on augumented user 57048 29/50 current_auc = 0.3680555555555556
User 57048 AUC after training: 0.3680555555555556
User 57048 does not improve AUC. Reverting changes.
Training on augumented user 19220 30/50 current_auc = 0.3680555555555556
User 19220 AUC after training: 0.3611111111111111
User 19220 does not improve AUC. Reverting changes.
Training on augumented user 109337 31/50 current_auc = 0.3680555555555556
User 109337 AUC after training: 0.3680555555555556
User 109337 does not improve AUC. Reverting changes.
Training on augumented user 78878 32/50 current_auc = 0.3680555555555556
User 78878 AUC after training: 0.3611111111111111
User 78878 does not improve AUC. Reverting changes.
Training on augumented user 34360 33/50 current_auc = 0.3680555555555556
User 34360 AUC after training: 0.3611111111111111
User 34360 does not improve AUC. Reverting changes.
Training on augumented user 100042 34/50 current_auc = 0.3680555555555556
User 100042 AUC after training: 0.3680555555555556
User 100042 does not improve AUC. Reverting changes.
Training on augumented user 94914 35/50 current_auc = 0.3680555555555556
User 94914 AUC after training: 0.3680555555555556
User 94914 does not improve AUC. Reverting changes.
Training on augumented user 22313 36/50 current_auc = 0.3680555555555556
User 22313 AUC after training: 0.3680555555555556
User 22313 does not improve AUC. Reverting changes.
Training on augumented user 25657 37/50 current_auc = 0.3680555555555556
User 25657 AUC after training: 0.3611111111111111
User 25657 does not improve AUC. Reverting changes.
Training on augumented user 131905 38/50 current_auc = 0.3680555555555556
User 131905 AUC after training: 0.3541666666666667
User 131905 does not improve AUC. Reverting changes.
Training on augumented user 44392 39/50 current_auc = 0.3680555555555556
User 44392 AUC after training: 0.3611111111111111
User 44392 does not improve AUC. Reverting changes.
Training on augumented user 4936 40/50 current_auc = 0.3680555555555556
User 4936 AUC after training: 0.3680555555555556
User 4936 does not improve AUC. Reverting changes.
Training on augumented user 13421 41/50 current_auc = 0.3680555555555556
User 13421 AUC after training: 0.3541666666666667
User 13421 does not improve AUC. Reverting changes.
Training on augumented user 12692 42/50 current_auc = 0.3680555555555556
User 12692 AUC after training: 0.3680555555555556
User 12692 does not improve AUC. Reverting changes.
Training on augumented user 95993 43/50 current_auc = 0.3680555555555556
User 95993 AUC after training: 0.39583333333333337
User 95993 improves AUC. Keeping the model.
Training on augumented user 98145 44/50 current_auc = 0.39583333333333337
User 98145 AUC after training: 0.375
User 98145 does not improve AUC. Reverting changes.
Training on augumented user 74449 45/50 current_auc = 0.39583333333333337
User 74449 AUC after training: 0.3819444444444445
User 74449 does not improve AUC. Reverting changes.
Training on augumented user 9337 46/50 current_auc = 0.39583333333333337
User 9337 AUC after training: 0.39583333333333337
User 9337 does not improve AUC. Reverting changes.
Training on augumented user 75702 47/50 current_auc = 0.39583333333333337
User 75702 AUC after training: 0.3680555555555556
User 75702 does not improve AUC. Reverting changes.
Training on augumented user 35224 48/50 current_auc = 0.39583333333333337
User 35224 AUC after training: 0.3819444444444444
User 35224 does not improve AUC. Reverting changes.
Training on augumented user 9331 49/50 current_auc = 0.39583333333333337
User 9331 AUC after training: 0.3819444444444444
User 9331 does not improve AUC. Reverting changes.
[2024-12-02 18:51:25.487129] start test user 45015 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:25.912669] start test user 45015 134/568 recall augumented users by random, augumented_users = [57215, 63884, 81341, 71121, 119977, 133284, 102025, 52839, 38715, 42078, 39409, 37209, 107989, 5255, 30168, 17483, 11779, 22796, 58921, 73262, 111439, 18569, 106094, 131398, 35488, 93730, 800, 138149, 50665, 12682, 126039, 24535, 91777, 47530, 12079, 103, 110170, 35189, 98505, 10213, 76414, 93734, 115105, 75035, 106587, 124521, 114126, 4199, 103596, 118822]
[2024-12-02 18:51:25.930373] user = 45015 Cloud 134/568
[2024-12-02 18:51:25.965803] user = 45015 Local 134/568
[2024-12-02 18:51:26.196821] user = 45015 Local+ 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:27.700636] user = 45015 MPDA- 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6124765917602997
Training on augumented user 57215 0/50 current_auc = 0.6124765917602997
User 57215 AUC after training: 0.6124765917602997
User 57215 does not improve AUC. Reverting changes.
Training on augumented user 63884 1/50 current_auc = 0.6124765917602997
User 63884 AUC after training: 0.6132373595505618
User 63884 improves AUC. Keeping the model.
Training on augumented user 81341 2/50 current_auc = 0.6132373595505618
User 81341 AUC after training: 0.6144077715355805
User 81341 improves AUC. Keeping the model.
Training on augumented user 71121 3/50 current_auc = 0.6144077715355805
User 71121 AUC after training: 0.6137055243445693
User 71121 does not improve AUC. Reverting changes.
Training on augumented user 119977 4/50 current_auc = 0.6144077715355805
User 119977 AUC after training: 0.6137640449438202
User 119977 does not improve AUC. Reverting changes.
Training on augumented user 133284 5/50 current_auc = 0.6144077715355805
User 133284 AUC after training: 0.6136470037453183
User 133284 does not improve AUC. Reverting changes.
Training on augumented user 102025 6/50 current_auc = 0.6144077715355805
User 102025 AUC after training: 0.6161048689138577
User 102025 improves AUC. Keeping the model.
Training on augumented user 52839 7/50 current_auc = 0.6161048689138577
User 52839 AUC after training: 0.6159878277153559
User 52839 does not improve AUC. Reverting changes.
Training on augumented user 38715 8/50 current_auc = 0.6161048689138577
User 38715 AUC after training: 0.6157244850187267
User 38715 does not improve AUC. Reverting changes.
Training on augumented user 42078 9/50 current_auc = 0.6161048689138577
User 42078 AUC after training: 0.6161633895131087
User 42078 improves AUC. Keeping the model.
Training on augumented user 39409 10/50 current_auc = 0.6161633895131087
User 39409 AUC after training: 0.6159878277153558
User 39409 does not improve AUC. Reverting changes.
Training on augumented user 37209 11/50 current_auc = 0.6161633895131087
User 37209 AUC after training: 0.6159878277153559
User 37209 does not improve AUC. Reverting changes.
Training on augumented user 107989 12/50 current_auc = 0.6161633895131087
User 107989 AUC after training: 0.6163389513108615
User 107989 improves AUC. Keeping the model.
Training on augumented user 5255 13/50 current_auc = 0.6163389513108615
User 5255 AUC after training: 0.6161048689138577
User 5255 does not improve AUC. Reverting changes.
Training on augumented user 30168 14/50 current_auc = 0.6163389513108615
User 30168 AUC after training: 0.6162219101123596
User 30168 does not improve AUC. Reverting changes.
Training on augumented user 17483 15/50 current_auc = 0.6163389513108615
User 17483 AUC after training: 0.6157244850187265
User 17483 does not improve AUC. Reverting changes.
Training on augumented user 11779 16/50 current_auc = 0.6163389513108615
User 11779 AUC after training: 0.6162804307116104
User 11779 does not improve AUC. Reverting changes.
Training on augumented user 22796 17/50 current_auc = 0.6163389513108615
User 22796 AUC after training: 0.6161048689138576
User 22796 does not improve AUC. Reverting changes.
Training on augumented user 58921 18/50 current_auc = 0.6163389513108615
User 58921 AUC after training: 0.6163389513108615
User 58921 does not improve AUC. Reverting changes.
Training on augumented user 73262 19/50 current_auc = 0.6163389513108615
User 73262 AUC after training: 0.6162219101123596
User 73262 does not improve AUC. Reverting changes.
Training on augumented user 111439 20/50 current_auc = 0.6163389513108615
User 111439 AUC after training: 0.6162219101123596
User 111439 does not improve AUC. Reverting changes.
Training on augumented user 18569 21/50 current_auc = 0.6163389513108615
User 18569 AUC after training: 0.6158707865168539
User 18569 does not improve AUC. Reverting changes.
Training on augumented user 106094 22/50 current_auc = 0.6163389513108615
User 106094 AUC after training: 0.6161633895131087
User 106094 does not improve AUC. Reverting changes.
Training on augumented user 131398 23/50 current_auc = 0.6163389513108615
User 131398 AUC after training: 0.6161633895131087
User 131398 does not improve AUC. Reverting changes.
Training on augumented user 35488 24/50 current_auc = 0.6163389513108615
User 35488 AUC after training: 0.6156074438202247
User 35488 does not improve AUC. Reverting changes.
Training on augumented user 93730 25/50 current_auc = 0.6163389513108615
User 93730 AUC after training: 0.6159878277153558
User 93730 does not improve AUC. Reverting changes.
Training on augumented user 800 26/50 current_auc = 0.6163389513108615
User 800 AUC after training: 0.6161048689138577
User 800 does not improve AUC. Reverting changes.
Training on augumented user 138149 27/50 current_auc = 0.6163389513108615
User 138149 AUC after training: 0.6161633895131087
User 138149 does not improve AUC. Reverting changes.
Training on augumented user 50665 28/50 current_auc = 0.6163389513108615
User 50665 AUC after training: 0.6163389513108615
User 50665 does not improve AUC. Reverting changes.
Training on augumented user 12682 29/50 current_auc = 0.6163389513108615
User 12682 AUC after training: 0.6161633895131087
User 12682 does not improve AUC. Reverting changes.
Training on augumented user 126039 30/50 current_auc = 0.6163389513108615
User 126039 AUC after training: 0.615431882022472
User 126039 does not improve AUC. Reverting changes.
Training on augumented user 24535 31/50 current_auc = 0.6163389513108615
User 24535 AUC after training: 0.6162804307116105
User 24535 does not improve AUC. Reverting changes.
Training on augumented user 91777 32/50 current_auc = 0.6163389513108615
User 91777 AUC after training: 0.6154026217228463
User 91777 does not improve AUC. Reverting changes.
Training on augumented user 47530 33/50 current_auc = 0.6163389513108615
User 47530 AUC after training: 0.6166315543071161
User 47530 improves AUC. Keeping the model.
Training on augumented user 12079 34/50 current_auc = 0.6166315543071161
User 12079 AUC after training: 0.6163974719101124
User 12079 does not improve AUC. Reverting changes.
Training on augumented user 103 35/50 current_auc = 0.6166315543071161
User 103 AUC after training: 0.6159878277153559
User 103 does not improve AUC. Reverting changes.
Training on augumented user 110170 36/50 current_auc = 0.6166315543071161
User 110170 AUC after training: 0.6165730337078652
User 110170 does not improve AUC. Reverting changes.
Training on augumented user 35189 37/50 current_auc = 0.6166315543071161
User 35189 AUC after training: 0.6161633895131087
User 35189 does not improve AUC. Reverting changes.
Training on augumented user 98505 38/50 current_auc = 0.6166315543071161
User 98505 AUC after training: 0.6158122659176031
User 98505 does not improve AUC. Reverting changes.
Training on augumented user 10213 39/50 current_auc = 0.6166315543071161
User 10213 AUC after training: 0.6161633895131086
User 10213 does not improve AUC. Reverting changes.
Training on augumented user 76414 40/50 current_auc = 0.6166315543071161
User 76414 AUC after training: 0.6161633895131087
User 76414 does not improve AUC. Reverting changes.
Training on augumented user 93734 41/50 current_auc = 0.6166315543071161
User 93734 AUC after training: 0.6164559925093633
User 93734 does not improve AUC. Reverting changes.
Training on augumented user 115105 42/50 current_auc = 0.6166315543071161
User 115105 AUC after training: 0.6163389513108615
User 115105 does not improve AUC. Reverting changes.
Training on augumented user 75035 43/50 current_auc = 0.6166315543071161
User 75035 AUC after training: 0.6164559925093633
User 75035 does not improve AUC. Reverting changes.
Training on augumented user 106587 44/50 current_auc = 0.6166315543071161
User 106587 AUC after training: 0.6161633895131086
User 106587 does not improve AUC. Reverting changes.
Training on augumented user 124521 45/50 current_auc = 0.6166315543071161
User 124521 AUC after training: 0.6165145131086143
User 124521 does not improve AUC. Reverting changes.
Training on augumented user 114126 46/50 current_auc = 0.6166315543071161
User 114126 AUC after training: 0.6163974719101124
User 114126 does not improve AUC. Reverting changes.
Training on augumented user 4199 47/50 current_auc = 0.6166315543071161
User 4199 AUC after training: 0.6161633895131087
User 4199 does not improve AUC. Reverting changes.
Training on augumented user 103596 48/50 current_auc = 0.6166315543071161
User 103596 AUC after training: 0.6163974719101124
User 103596 does not improve AUC. Reverting changes.
Training on augumented user 118822 49/50 current_auc = 0.6166315543071161
User 118822 AUC after training: 0.6159878277153558
User 118822 does not improve AUC. Reverting changes.
[2024-12-02 18:51:58.267073] start test user 45028 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:58.997740] start test user 45028 135/568 recall augumented users by random, augumented_users = [93557, 40254, 40421, 136532, 105291, 118566, 54247, 41346, 24663, 100583, 72751, 104201, 92460, 46950, 48668, 133288, 77733, 136595, 82188, 125524, 79465, 85568, 13042, 69643, 69275, 117239, 52235, 25707, 63670, 71008, 59898, 118620, 11765, 14450, 45622, 38608, 819, 61806, 51115, 58636, 127305, 130055, 113934, 56836, 110800, 61184, 14101, 100019, 1981, 16538]
[2024-12-02 18:51:59.014466] user = 45028 Cloud 135/568
[2024-12-02 18:51:59.025060] user = 45028 Local 135/568
[2024-12-02 18:51:59.043831] user = 45028 Local+ 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:01.586320] user = 45028 MPDA- 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 93557 0/50 current_auc = 0.25
User 93557 AUC after training: 0.25
User 93557 does not improve AUC. Reverting changes.
Training on augumented user 40254 1/50 current_auc = 0.25
User 40254 AUC after training: 0.25
User 40254 does not improve AUC. Reverting changes.
Training on augumented user 40421 2/50 current_auc = 0.25
User 40421 AUC after training: 0.25
User 40421 does not improve AUC. Reverting changes.
Training on augumented user 136532 3/50 current_auc = 0.25
User 136532 AUC after training: 0.25
User 136532 does not improve AUC. Reverting changes.
Training on augumented user 105291 4/50 current_auc = 0.25
User 105291 AUC after training: 0.25
User 105291 does not improve AUC. Reverting changes.
Training on augumented user 118566 5/50 current_auc = 0.25
User 118566 AUC after training: 0.25
User 118566 does not improve AUC. Reverting changes.
Training on augumented user 54247 6/50 current_auc = 0.25
User 54247 AUC after training: 0.25
User 54247 does not improve AUC. Reverting changes.
Training on augumented user 41346 7/50 current_auc = 0.25
User 41346 AUC after training: 0.25
User 41346 does not improve AUC. Reverting changes.
Training on augumented user 24663 8/50 current_auc = 0.25
User 24663 AUC after training: 0.25
User 24663 does not improve AUC. Reverting changes.
Training on augumented user 100583 9/50 current_auc = 0.25
User 100583 AUC after training: 0.25
User 100583 does not improve AUC. Reverting changes.
Training on augumented user 72751 10/50 current_auc = 0.25
User 72751 AUC after training: 0.25
User 72751 does not improve AUC. Reverting changes.
Training on augumented user 104201 11/50 current_auc = 0.25
User 104201 AUC after training: 0.25
User 104201 does not improve AUC. Reverting changes.
Training on augumented user 92460 12/50 current_auc = 0.25
User 92460 AUC after training: 0.25
User 92460 does not improve AUC. Reverting changes.
Training on augumented user 46950 13/50 current_auc = 0.25
User 46950 AUC after training: 0.25
User 46950 does not improve AUC. Reverting changes.
Training on augumented user 48668 14/50 current_auc = 0.25
User 48668 AUC after training: 0.25
User 48668 does not improve AUC. Reverting changes.
Training on augumented user 133288 15/50 current_auc = 0.25
User 133288 AUC after training: 0.25
User 133288 does not improve AUC. Reverting changes.
Training on augumented user 77733 16/50 current_auc = 0.25
User 77733 AUC after training: 0.25
User 77733 does not improve AUC. Reverting changes.
Training on augumented user 136595 17/50 current_auc = 0.25
User 136595 AUC after training: 0.5
User 136595 improves AUC. Keeping the model.
Training on augumented user 82188 18/50 current_auc = 0.5
User 82188 AUC after training: 0.25
User 82188 does not improve AUC. Reverting changes.
Training on augumented user 125524 19/50 current_auc = 0.5
User 125524 AUC after training: 0.5
User 125524 does not improve AUC. Reverting changes.
Training on augumented user 79465 20/50 current_auc = 0.5
User 79465 AUC after training: 0.25
User 79465 does not improve AUC. Reverting changes.
Training on augumented user 85568 21/50 current_auc = 0.5
User 85568 AUC after training: 0.5
User 85568 does not improve AUC. Reverting changes.
Training on augumented user 13042 22/50 current_auc = 0.5
User 13042 AUC after training: 0.5
User 13042 does not improve AUC. Reverting changes.
Training on augumented user 69643 23/50 current_auc = 0.5
User 69643 AUC after training: 0.5
User 69643 does not improve AUC. Reverting changes.
Training on augumented user 69275 24/50 current_auc = 0.5
User 69275 AUC after training: 0.25
User 69275 does not improve AUC. Reverting changes.
Training on augumented user 117239 25/50 current_auc = 0.5
User 117239 AUC after training: 0.5
User 117239 does not improve AUC. Reverting changes.
Training on augumented user 52235 26/50 current_auc = 0.5
User 52235 AUC after training: 0.5
User 52235 does not improve AUC. Reverting changes.
Training on augumented user 25707 27/50 current_auc = 0.5
User 25707 AUC after training: 0.5
User 25707 does not improve AUC. Reverting changes.
Training on augumented user 63670 28/50 current_auc = 0.5
User 63670 AUC after training: 0.5
User 63670 does not improve AUC. Reverting changes.
Training on augumented user 71008 29/50 current_auc = 0.5
User 71008 AUC after training: 0.5
User 71008 does not improve AUC. Reverting changes.
Training on augumented user 59898 30/50 current_auc = 0.5
User 59898 AUC after training: 0.25
User 59898 does not improve AUC. Reverting changes.
Training on augumented user 118620 31/50 current_auc = 0.5
User 118620 AUC after training: 0.25
User 118620 does not improve AUC. Reverting changes.
Training on augumented user 11765 32/50 current_auc = 0.5
User 11765 AUC after training: 0.25
User 11765 does not improve AUC. Reverting changes.
Training on augumented user 14450 33/50 current_auc = 0.5
User 14450 AUC after training: 0.5
User 14450 does not improve AUC. Reverting changes.
Training on augumented user 45622 34/50 current_auc = 0.5
User 45622 AUC after training: 0.25
User 45622 does not improve AUC. Reverting changes.
Training on augumented user 38608 35/50 current_auc = 0.5
User 38608 AUC after training: 0.5
User 38608 does not improve AUC. Reverting changes.
Training on augumented user 819 36/50 current_auc = 0.5
User 819 AUC after training: 0.5
User 819 does not improve AUC. Reverting changes.
Training on augumented user 61806 37/50 current_auc = 0.5
User 61806 AUC after training: 0.5
User 61806 does not improve AUC. Reverting changes.
Training on augumented user 51115 38/50 current_auc = 0.5
User 51115 AUC after training: 0.25
User 51115 does not improve AUC. Reverting changes.
Training on augumented user 58636 39/50 current_auc = 0.5
User 58636 AUC after training: 0.5
User 58636 does not improve AUC. Reverting changes.
Training on augumented user 127305 40/50 current_auc = 0.5
User 127305 AUC after training: 0.5
User 127305 does not improve AUC. Reverting changes.
Training on augumented user 130055 41/50 current_auc = 0.5
User 130055 AUC after training: 0.5
User 130055 does not improve AUC. Reverting changes.
Training on augumented user 113934 42/50 current_auc = 0.5
User 113934 AUC after training: 0.25
User 113934 does not improve AUC. Reverting changes.
Training on augumented user 56836 43/50 current_auc = 0.5
User 56836 AUC after training: 0.5
User 56836 does not improve AUC. Reverting changes.
Training on augumented user 110800 44/50 current_auc = 0.5
User 110800 AUC after training: 0.5
User 110800 does not improve AUC. Reverting changes.
Training on augumented user 61184 45/50 current_auc = 0.5
User 61184 AUC after training: 0.25
User 61184 does not improve AUC. Reverting changes.
Training on augumented user 14101 46/50 current_auc = 0.5
User 14101 AUC after training: 0.25
User 14101 does not improve AUC. Reverting changes.
Training on augumented user 100019 47/50 current_auc = 0.5
User 100019 AUC after training: 0.5
User 100019 does not improve AUC. Reverting changes.
Training on augumented user 1981 48/50 current_auc = 0.5
User 1981 AUC after training: 0.5
User 1981 does not improve AUC. Reverting changes.
Training on augumented user 16538 49/50 current_auc = 0.5
User 16538 AUC after training: 0.25
User 16538 does not improve AUC. Reverting changes.
[2024-12-02 18:52:32.348268] start test user 45039 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:32.978898] start test user 45039 136/568 recall augumented users by random, augumented_users = [5418, 85743, 78800, 121022, 50101, 48027, 59886, 906, 12137, 75285, 11752, 23910, 79284, 127901, 16278, 48733, 84988, 121226, 135867, 7907, 82457, 15096, 126611, 47927, 121228, 86004, 73411, 120859, 98360, 99010, 58878, 81091, 25953, 127587, 54776, 47462, 6825, 8354, 30340, 37536, 138442, 77217, 122748, 134371, 4267, 10465, 96997, 91343, 95759, 71551]
[2024-12-02 18:52:33.050875] user = 45039 Cloud 136/568
[2024-12-02 18:52:33.158854] user = 45039 Local 136/568
[2024-12-02 18:52:33.288627] user = 45039 Local+ 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:36.010137] user = 45039 MPDA- 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7990783410138249
Training on augumented user 5418 0/50 current_auc = 0.7990783410138249
User 5418 AUC after training: 0.798905529953917
User 5418 does not improve AUC. Reverting changes.
Training on augumented user 85743 1/50 current_auc = 0.7990783410138249
User 85743 AUC after training: 0.7991167434715821
User 85743 improves AUC. Keeping the model.
Training on augumented user 78800 2/50 current_auc = 0.7991167434715821
User 78800 AUC after training: 0.7990207373271889
User 78800 does not improve AUC. Reverting changes.
Training on augumented user 121022 3/50 current_auc = 0.7991167434715821
User 121022 AUC after training: 0.7990879416282641
User 121022 does not improve AUC. Reverting changes.
Training on augumented user 50101 4/50 current_auc = 0.7991167434715821
User 50101 AUC after training: 0.7989247311827956
User 50101 does not improve AUC. Reverting changes.
Training on augumented user 48027 5/50 current_auc = 0.7991167434715821
User 48027 AUC after training: 0.799231950844854
User 48027 improves AUC. Keeping the model.
Training on augumented user 59886 6/50 current_auc = 0.799231950844854
User 59886 AUC after training: 0.7991935483870967
User 59886 does not improve AUC. Reverting changes.
Training on augumented user 906 7/50 current_auc = 0.799231950844854
User 906 AUC after training: 0.799231950844854
User 906 does not improve AUC. Reverting changes.
Training on augumented user 12137 8/50 current_auc = 0.799231950844854
User 12137 AUC after training: 0.7998079877112135
User 12137 improves AUC. Keeping the model.
Training on augumented user 75285 9/50 current_auc = 0.7998079877112135
User 75285 AUC after training: 0.7997887864823349
User 75285 does not improve AUC. Reverting changes.
Training on augumented user 11752 10/50 current_auc = 0.7998079877112135
User 11752 AUC after training: 0.7997887864823348
User 11752 does not improve AUC. Reverting changes.
Training on augumented user 23910 11/50 current_auc = 0.7998079877112135
User 23910 AUC after training: 0.7998271889400922
User 23910 improves AUC. Keeping the model.
Training on augumented user 79284 12/50 current_auc = 0.7998271889400922
User 79284 AUC after training: 0.7996927803379414
User 79284 does not improve AUC. Reverting changes.
Training on augumented user 127901 13/50 current_auc = 0.7998271889400922
User 127901 AUC after training: 0.7995967741935485
User 127901 does not improve AUC. Reverting changes.
Training on augumented user 16278 14/50 current_auc = 0.7998271889400922
User 16278 AUC after training: 0.7997695852534562
User 16278 does not improve AUC. Reverting changes.
Training on augumented user 48733 15/50 current_auc = 0.7998271889400922
User 48733 AUC after training: 0.7999807987711214
User 48733 improves AUC. Keeping the model.
Training on augumented user 84988 16/50 current_auc = 0.7999807987711214
User 84988 AUC after training: 0.8002112135176651
User 84988 improves AUC. Keeping the model.
Training on augumented user 121226 17/50 current_auc = 0.8002112135176651
User 121226 AUC after training: 0.800297619047619
User 121226 improves AUC. Keeping the model.
Training on augumented user 135867 18/50 current_auc = 0.800297619047619
User 135867 AUC after training: 0.8001824116743472
User 135867 does not improve AUC. Reverting changes.
Training on augumented user 7907 19/50 current_auc = 0.800297619047619
User 7907 AUC after training: 0.8002400153609831
User 7907 does not improve AUC. Reverting changes.
Training on augumented user 82457 20/50 current_auc = 0.800297619047619
User 82457 AUC after training: 0.8000192012288786
User 82457 does not improve AUC. Reverting changes.
Training on augumented user 15096 21/50 current_auc = 0.800297619047619
User 15096 AUC after training: 0.8002496159754224
User 15096 does not improve AUC. Reverting changes.
Training on augumented user 126611 22/50 current_auc = 0.800297619047619
User 126611 AUC after training: 0.8001440092165899
User 126611 does not improve AUC. Reverting changes.
Training on augumented user 47927 23/50 current_auc = 0.800297619047619
User 47927 AUC after training: 0.8002880184331798
User 47927 does not improve AUC. Reverting changes.
Training on augumented user 121228 24/50 current_auc = 0.800297619047619
User 121228 AUC after training: 0.8003072196620584
User 121228 improves AUC. Keeping the model.
Training on augumented user 86004 25/50 current_auc = 0.8003072196620584
User 86004 AUC after training: 0.8002304147465438
User 86004 does not improve AUC. Reverting changes.
Training on augumented user 73411 26/50 current_auc = 0.8003072196620584
User 73411 AUC after training: 0.8001248079877112
User 73411 does not improve AUC. Reverting changes.
Training on augumented user 120859 27/50 current_auc = 0.8003072196620584
User 120859 AUC after training: 0.800240015360983
User 120859 does not improve AUC. Reverting changes.
Training on augumented user 98360 28/50 current_auc = 0.8003072196620584
User 98360 AUC after training: 0.8002304147465438
User 98360 does not improve AUC. Reverting changes.
Training on augumented user 99010 29/50 current_auc = 0.8003072196620584
User 99010 AUC after training: 0.8002304147465438
User 99010 does not improve AUC. Reverting changes.
Training on augumented user 58878 30/50 current_auc = 0.8003072196620584
User 58878 AUC after training: 0.8002880184331798
User 58878 does not improve AUC. Reverting changes.
Training on augumented user 81091 31/50 current_auc = 0.8003072196620584
User 81091 AUC after training: 0.8002688172043011
User 81091 does not improve AUC. Reverting changes.
Training on augumented user 25953 32/50 current_auc = 0.8003072196620584
User 25953 AUC after training: 0.8003840245775729
User 25953 improves AUC. Keeping the model.
Training on augumented user 127587 33/50 current_auc = 0.8003840245775729
User 127587 AUC after training: 0.8002688172043011
User 127587 does not improve AUC. Reverting changes.
Training on augumented user 54776 34/50 current_auc = 0.8003840245775729
User 54776 AUC after training: 0.8003072196620583
User 54776 does not improve AUC. Reverting changes.
Training on augumented user 47462 35/50 current_auc = 0.8003840245775729
User 47462 AUC after training: 0.8003456221198156
User 47462 does not improve AUC. Reverting changes.
Training on augumented user 6825 36/50 current_auc = 0.8003840245775729
User 6825 AUC after training: 0.800326420890937
User 6825 does not improve AUC. Reverting changes.
Training on augumented user 8354 37/50 current_auc = 0.8003840245775729
User 8354 AUC after training: 0.8006720430107527
User 8354 improves AUC. Keeping the model.
Training on augumented user 30340 38/50 current_auc = 0.8006720430107527
User 30340 AUC after training: 0.8003168202764976
User 30340 does not improve AUC. Reverting changes.
Training on augumented user 37536 39/50 current_auc = 0.8006720430107527
User 37536 AUC after training: 0.8004320276497696
User 37536 does not improve AUC. Reverting changes.
Training on augumented user 138442 40/50 current_auc = 0.8006720430107527
User 138442 AUC after training: 0.8005760368663595
User 138442 does not improve AUC. Reverting changes.
Training on augumented user 77217 41/50 current_auc = 0.8006720430107527
User 77217 AUC after training: 0.8004224270353302
User 77217 does not improve AUC. Reverting changes.
Training on augumented user 122748 42/50 current_auc = 0.8006720430107527
User 122748 AUC after training: 0.8006336405529954
User 122748 does not improve AUC. Reverting changes.
Training on augumented user 134371 43/50 current_auc = 0.8006720430107527
User 134371 AUC after training: 0.8004032258064516
User 134371 does not improve AUC. Reverting changes.
Training on augumented user 4267 44/50 current_auc = 0.8006720430107527
User 4267 AUC after training: 0.8006720430107527
User 4267 does not improve AUC. Reverting changes.
Training on augumented user 10465 45/50 current_auc = 0.8006720430107527
User 10465 AUC after training: 0.8004608294930876
User 10465 does not improve AUC. Reverting changes.
Training on augumented user 96997 46/50 current_auc = 0.8006720430107527
User 96997 AUC after training: 0.8006144393241167
User 96997 does not improve AUC. Reverting changes.
Training on augumented user 91343 47/50 current_auc = 0.8006720430107527
User 91343 AUC after training: 0.800681643625192
User 91343 improves AUC. Keeping the model.
Training on augumented user 95759 48/50 current_auc = 0.800681643625192
User 95759 AUC after training: 0.8002688172043011
User 95759 does not improve AUC. Reverting changes.
Training on augumented user 71551 49/50 current_auc = 0.800681643625192
User 71551 AUC after training: 0.8005472350230414
User 71551 does not improve AUC. Reverting changes.
[2024-12-02 18:53:04.773817] start test user 45064 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:05.202820] start test user 45064 137/568 recall augumented users by random, augumented_users = [41992, 87997, 79349, 90805, 48781, 95702, 33373, 19772, 41118, 97423, 132059, 102354, 60023, 120711, 113725, 86944, 64347, 49628, 5582, 82955, 39680, 122741, 41879, 123372, 64981, 71117, 51612, 50101, 69018, 78757, 84696, 13301, 29943, 55726, 24758, 117473, 115871, 122585, 66826, 40132, 138030, 90751, 48760, 99494, 90180, 40861, 44496, 1122, 44338, 23654]
[2024-12-02 18:53:05.218853] user = 45064 Cloud 137/568
[2024-12-02 18:53:05.239894] user = 45064 Local 137/568
[2024-12-02 18:53:05.308460] user = 45064 Local+ 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:07.544213] user = 45064 MPDA- 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7457309454394002
Training on augumented user 41992 0/50 current_auc = 0.7457309454394002
User 41992 AUC after training: 0.7455921143967791
User 41992 does not improve AUC. Reverting changes.
Training on augumented user 87997 1/50 current_auc = 0.7457309454394002
User 87997 AUC after training: 0.7458003609607108
User 87997 improves AUC. Keeping the model.
Training on augumented user 79349 2/50 current_auc = 0.7458003609607108
User 79349 AUC after training: 0.7458003609607107
User 79349 does not improve AUC. Reverting changes.
Training on augumented user 90805 3/50 current_auc = 0.7458003609607108
User 90805 AUC after training: 0.7459391920033319
User 90805 improves AUC. Keeping the model.
Training on augumented user 48781 4/50 current_auc = 0.7459391920033319
User 48781 AUC after training: 0.7459391920033319
User 48781 does not improve AUC. Reverting changes.
Training on augumented user 95702 5/50 current_auc = 0.7459391920033319
User 95702 AUC after training: 0.746563931695127
User 95702 improves AUC. Keeping the model.
Training on augumented user 33373 6/50 current_auc = 0.746563931695127
User 33373 AUC after training: 0.747188671386922
User 33373 improves AUC. Keeping the model.
Training on augumented user 19772 7/50 current_auc = 0.747188671386922
User 19772 AUC after training: 0.7469110093016798
User 19772 does not improve AUC. Reverting changes.
Training on augumented user 41118 8/50 current_auc = 0.747188671386922
User 41118 AUC after training: 0.747188671386922
User 41118 does not improve AUC. Reverting changes.
Training on augumented user 97423 9/50 current_auc = 0.747188671386922
User 97423 AUC after training: 0.7482299042065805
User 97423 improves AUC. Keeping the model.
Training on augumented user 132059 10/50 current_auc = 0.7482299042065805
User 132059 AUC after training: 0.7485075662918228
User 132059 improves AUC. Keeping the model.
Training on augumented user 102354 11/50 current_auc = 0.7485075662918228
User 102354 AUC after training: 0.7480216576426489
User 102354 does not improve AUC. Reverting changes.
Training on augumented user 60023 12/50 current_auc = 0.7485075662918228
User 60023 AUC after training: 0.7479522421213383
User 60023 does not improve AUC. Reverting changes.
Training on augumented user 120711 13/50 current_auc = 0.7485075662918228
User 120711 AUC after training: 0.7480910731639595
User 120711 does not improve AUC. Reverting changes.
Training on augumented user 113725 14/50 current_auc = 0.7485075662918228
User 113725 AUC after training: 0.7487852283770651
User 113725 improves AUC. Keeping the model.
Training on augumented user 86944 15/50 current_auc = 0.7487852283770651
User 86944 AUC after training: 0.7489240594196862
User 86944 improves AUC. Keeping the model.
Training on augumented user 64347 16/50 current_auc = 0.7489240594196862
User 64347 AUC after training: 0.7487852283770651
User 64347 does not improve AUC. Reverting changes.
Training on augumented user 49628 17/50 current_auc = 0.7489240594196862
User 49628 AUC after training: 0.7478828266000278
User 49628 does not improve AUC. Reverting changes.
Training on augumented user 5582 18/50 current_auc = 0.7489240594196862
User 5582 AUC after training: 0.7482299042065806
User 5582 does not improve AUC. Reverting changes.
Training on augumented user 82955 19/50 current_auc = 0.7489240594196862
User 82955 AUC after training: 0.7487852283770651
User 82955 does not improve AUC. Reverting changes.
Training on augumented user 39680 20/50 current_auc = 0.7489240594196862
User 39680 AUC after training: 0.7494099680688602
User 39680 improves AUC. Keeping the model.
Training on augumented user 122741 21/50 current_auc = 0.7494099680688602
User 122741 AUC after training: 0.7483687352492018
User 122741 does not improve AUC. Reverting changes.
Training on augumented user 41879 22/50 current_auc = 0.7494099680688602
User 41879 AUC after training: 0.7483687352492016
User 41879 does not improve AUC. Reverting changes.
Training on augumented user 123372 23/50 current_auc = 0.7494099680688602
User 123372 AUC after training: 0.7494099680688601
User 123372 does not improve AUC. Reverting changes.
Training on augumented user 64981 24/50 current_auc = 0.7494099680688602
User 64981 AUC after training: 0.7495487991114813
User 64981 improves AUC. Keeping the model.
Training on augumented user 71117 25/50 current_auc = 0.7495487991114813
User 71117 AUC after training: 0.7485075662918228
User 71117 does not improve AUC. Reverting changes.
Training on augumented user 51612 26/50 current_auc = 0.7495487991114813
User 51612 AUC after training: 0.7495487991114813
User 51612 does not improve AUC. Reverting changes.
Training on augumented user 50101 27/50 current_auc = 0.7495487991114813
User 50101 AUC after training: 0.7494793835901707
User 50101 does not improve AUC. Reverting changes.
Training on augumented user 69018 28/50 current_auc = 0.7495487991114813
User 69018 AUC after training: 0.749271137026239
User 69018 does not improve AUC. Reverting changes.
Training on augumented user 78757 29/50 current_auc = 0.7495487991114813
User 78757 AUC after training: 0.7493405525475496
User 78757 does not improve AUC. Reverting changes.
Training on augumented user 84696 30/50 current_auc = 0.7495487991114813
User 84696 AUC after training: 0.7495487991114812
User 84696 does not improve AUC. Reverting changes.
Training on augumented user 13301 31/50 current_auc = 0.7495487991114813
User 13301 AUC after training: 0.7494793835901706
User 13301 does not improve AUC. Reverting changes.
Training on augumented user 29943 32/50 current_auc = 0.7495487991114813
User 29943 AUC after training: 0.7494793835901706
User 29943 does not improve AUC. Reverting changes.
Training on augumented user 55726 33/50 current_auc = 0.7495487991114813
User 55726 AUC after training: 0.7467721782590586
User 55726 does not improve AUC. Reverting changes.
Training on augumented user 24758 34/50 current_auc = 0.7495487991114813
User 24758 AUC after training: 0.7494099680688601
User 24758 does not improve AUC. Reverting changes.
Training on augumented user 117473 35/50 current_auc = 0.7495487991114813
User 117473 AUC after training: 0.7495487991114813
User 117473 does not improve AUC. Reverting changes.
Training on augumented user 115871 36/50 current_auc = 0.7495487991114813
User 115871 AUC after training: 0.7487158128557545
User 115871 does not improve AUC. Reverting changes.
Training on augumented user 122585 37/50 current_auc = 0.7495487991114813
User 122585 AUC after training: 0.7494099680688601
User 122585 does not improve AUC. Reverting changes.
Training on augumented user 66826 38/50 current_auc = 0.7495487991114813
User 66826 AUC after training: 0.749132305983618
User 66826 does not improve AUC. Reverting changes.
Training on augumented user 40132 39/50 current_auc = 0.7495487991114813
User 40132 AUC after training: 0.7496182146327919
User 40132 improves AUC. Keeping the model.
Training on augumented user 138030 40/50 current_auc = 0.7496182146327919
User 138030 AUC after training: 0.7498264611967235
User 138030 improves AUC. Keeping the model.
Training on augumented user 90751 41/50 current_auc = 0.7498264611967235
User 90751 AUC after training: 0.7498264611967235
User 90751 does not improve AUC. Reverting changes.
Training on augumented user 48760 42/50 current_auc = 0.7498264611967235
User 48760 AUC after training: 0.7501041232819659
User 48760 improves AUC. Keeping the model.
Training on augumented user 99494 43/50 current_auc = 0.7501041232819659
User 99494 AUC after training: 0.7501041232819657
User 99494 does not improve AUC. Reverting changes.
Training on augumented user 90180 44/50 current_auc = 0.7501041232819659
User 90180 AUC after training: 0.7501735388032764
User 90180 improves AUC. Keeping the model.
Training on augumented user 40861 45/50 current_auc = 0.7501735388032764
User 40861 AUC after training: 0.7501041232819659
User 40861 does not improve AUC. Reverting changes.
Training on augumented user 44496 46/50 current_auc = 0.7501735388032764
User 44496 AUC after training: 0.7500347077606553
User 44496 does not improve AUC. Reverting changes.
Training on augumented user 1122 47/50 current_auc = 0.7501735388032764
User 1122 AUC after training: 0.750104123281966
User 1122 does not improve AUC. Reverting changes.
Training on augumented user 44338 48/50 current_auc = 0.7501735388032764
User 44338 AUC after training: 0.750381785367208
User 44338 improves AUC. Keeping the model.
Training on augumented user 23654 49/50 current_auc = 0.750381785367208
User 23654 AUC after training: 0.7501041232819657
User 23654 does not improve AUC. Reverting changes.
[2024-12-02 18:53:34.678281] start test user 45112 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:35.083122] start test user 45112 138/568 recall augumented users by random, augumented_users = [57375, 107112, 83088, 96105, 73654, 123480, 83305, 4286, 4024, 106077, 81020, 99794, 18922, 59082, 96500, 65620, 43900, 138159, 137483, 42233, 97468, 13125, 104096, 38486, 9933, 136404, 15065, 74993, 93990, 73657, 46124, 6804, 76901, 69695, 23621, 27533, 130093, 18436, 18537, 38011, 50235, 121565, 77751, 61049, 57043, 103672, 2981, 76722, 127556, 135560]
[2024-12-02 18:53:35.099204] user = 45112 Cloud 138/568
[2024-12-02 18:53:35.158249] user = 45112 Local 138/568
[2024-12-02 18:53:35.262857] user = 45112 Local+ 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:37.602686] user = 45112 MPDA- 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6019800549212314
Training on augumented user 57375 0/50 current_auc = 0.6019800549212314
User 57375 AUC after training: 0.6037649949414655
User 57375 improves AUC. Keeping the model.
Training on augumented user 107112 1/50 current_auc = 0.6037649949414655
User 107112 AUC after training: 0.603801127330539
User 107112 improves AUC. Keeping the model.
Training on augumented user 83088 2/50 current_auc = 0.603801127330539
User 83088 AUC after training: 0.6032808209278797
User 83088 does not improve AUC. Reverting changes.
Training on augumented user 96105 3/50 current_auc = 0.603801127330539
User 96105 AUC after training: 0.6022944067061714
User 96105 does not improve AUC. Reverting changes.
Training on augumented user 73654 4/50 current_auc = 0.603801127330539
User 73654 AUC after training: 0.6063737534325769
User 73654 improves AUC. Keeping the model.
Training on augumented user 123480 5/50 current_auc = 0.6063737534325769
User 123480 AUC after training: 0.6064171122994653
User 123480 improves AUC. Keeping the model.
Training on augumented user 83305 6/50 current_auc = 0.6064171122994653
User 83305 AUC after training: 0.6096545743604568
User 83305 improves AUC. Keeping the model.
Training on augumented user 4286 7/50 current_auc = 0.6096545743604568
User 4286 AUC after training: 0.6096112154935684
User 4286 does not improve AUC. Reverting changes.
Training on augumented user 4024 8/50 current_auc = 0.6096545743604568
User 4024 AUC after training: 0.6113383436912849
User 4024 improves AUC. Keeping the model.
Training on augumented user 106077 9/50 current_auc = 0.6113383436912849
User 106077 AUC after training: 0.6106409885821651
User 106077 does not improve AUC. Reverting changes.
Training on augumented user 81020 10/50 current_auc = 0.6113383436912849
User 81020 AUC after training: 0.6120754444283856
User 81020 improves AUC. Keeping the model.
Training on augumented user 99794 11/50 current_auc = 0.6120754444283856
User 99794 AUC after training: 0.6097846509611216
User 99794 does not improve AUC. Reverting changes.
Training on augumented user 18922 12/50 current_auc = 0.6120754444283856
User 18922 AUC after training: 0.6103483162306691
User 18922 does not improve AUC. Reverting changes.
Training on augumented user 59082 13/50 current_auc = 0.6120754444283856
User 59082 AUC after training: 0.6106446018210725
User 59082 does not improve AUC. Reverting changes.
Training on augumented user 96500 14/50 current_auc = 0.6120754444283856
User 96500 AUC after training: 0.6106156959098136
User 96500 does not improve AUC. Reverting changes.
Training on augumented user 65620 15/50 current_auc = 0.6120754444283856
User 65620 AUC after training: 0.6141928024280965
User 65620 improves AUC. Keeping the model.
Training on augumented user 43900 16/50 current_auc = 0.6141928024280965
User 43900 AUC after training: 0.6078407284289638
User 43900 does not improve AUC. Reverting changes.
Training on augumented user 138159 17/50 current_auc = 0.6141928024280965
User 138159 AUC after training: 0.6133400780459604
User 138159 does not improve AUC. Reverting changes.
Training on augumented user 137483 18/50 current_auc = 0.6141928024280965
User 137483 AUC after training: 0.6117936117936118
User 137483 does not improve AUC. Reverting changes.
Training on augumented user 42233 19/50 current_auc = 0.6141928024280965
User 42233 AUC after training: 0.6155224743460038
User 42233 improves AUC. Keeping the model.
Training on augumented user 97468 20/50 current_auc = 0.6155224743460038
User 97468 AUC after training: 0.6132316808787397
User 97468 does not improve AUC. Reverting changes.
Training on augumented user 13125 21/50 current_auc = 0.6155224743460038
User 13125 AUC after training: 0.6149515825986415
User 13125 does not improve AUC. Reverting changes.
Training on augumented user 104096 22/50 current_auc = 0.6155224743460038
User 104096 AUC after training: 0.6169822228645758
User 104096 improves AUC. Keeping the model.
Training on augumented user 38486 23/50 current_auc = 0.6169822228645758
User 38486 AUC after training: 0.6157970805029629
User 38486 does not improve AUC. Reverting changes.
Training on augumented user 9933 24/50 current_auc = 0.6169822228645758
User 9933 AUC after training: 0.6154646625234861
User 9933 does not improve AUC. Reverting changes.
Training on augumented user 136404 25/50 current_auc = 0.6169822228645758
User 136404 AUC after training: 0.6179939297586357
User 136404 improves AUC. Keeping the model.
Training on augumented user 15065 26/50 current_auc = 0.6179939297586357
User 15065 AUC after training: 0.6171267524208701
User 15065 does not improve AUC. Reverting changes.
Training on augumented user 74993 27/50 current_auc = 0.6179939297586357
User 74993 AUC after training: 0.6193525075878017
User 74993 improves AUC. Keeping the model.
Training on augumented user 93990 28/50 current_auc = 0.6193525075878017
User 93990 AUC after training: 0.6187960687960687
User 93990 does not improve AUC. Reverting changes.
Training on augumented user 73657 29/50 current_auc = 0.6193525075878017
User 73657 AUC after training: 0.6195187165775401
User 73657 improves AUC. Keeping the model.
Training on augumented user 46124 30/50 current_auc = 0.6195187165775401
User 46124 AUC after training: 0.6196921520450932
User 46124 improves AUC. Keeping the model.
Training on augumented user 6804 31/50 current_auc = 0.6196921520450932
User 6804 AUC after training: 0.6190056366526955
User 6804 does not improve AUC. Reverting changes.
Training on augumented user 76901 32/50 current_auc = 0.6196921520450932
User 76901 AUC after training: 0.618918918918919
User 76901 does not improve AUC. Reverting changes.
Training on augumented user 69695 33/50 current_auc = 0.6196921520450932
User 69695 AUC after training: 0.6206099147275619
User 69695 improves AUC. Keeping the model.
Training on augumented user 23621 34/50 current_auc = 0.6206099147275619
User 23621 AUC after training: 0.6213686948981066
User 23621 improves AUC. Keeping the model.
Training on augumented user 27533 35/50 current_auc = 0.6213686948981066
User 27533 AUC after training: 0.621108541696777
User 27533 does not improve AUC. Reverting changes.
Training on augumented user 130093 36/50 current_auc = 0.6213686948981066
User 130093 AUC after training: 0.6209495591848533
User 130093 does not improve AUC. Reverting changes.
Training on augumented user 18436 37/50 current_auc = 0.6213686948981066
User 18436 AUC after training: 0.6202558173146409
User 18436 does not improve AUC. Reverting changes.
Training on augumented user 18537 38/50 current_auc = 0.6213686948981066
User 18537 AUC after training: 0.6200101170689406
User 18537 does not improve AUC. Reverting changes.
Training on augumented user 38011 39/50 current_auc = 0.6213686948981066
User 38011 AUC after training: 0.6212602977308861
User 38011 does not improve AUC. Reverting changes.
Training on augumented user 50235 40/50 current_auc = 0.6213686948981066
User 50235 AUC after training: 0.6198150021679433
User 50235 does not improve AUC. Reverting changes.
Training on augumented user 121565 41/50 current_auc = 0.6213686948981066
User 121565 AUC after training: 0.6216216216216216
User 121565 improves AUC. Keeping the model.
Training on augumented user 77751 42/50 current_auc = 0.6216216216216216
User 77751 AUC after training: 0.6229079346726405
User 77751 improves AUC. Keeping the model.
Training on augumented user 61049 43/50 current_auc = 0.6229079346726405
User 61049 AUC after training: 0.6188972394854747
User 61049 does not improve AUC. Reverting changes.
Training on augumented user 57043 44/50 current_auc = 0.6229079346726405
User 57043 AUC after training: 0.6240208122561064
User 57043 improves AUC. Keeping the model.
Training on augumented user 103672 45/50 current_auc = 0.6240208122561064
User 103672 AUC after training: 0.6232258996964879
User 103672 does not improve AUC. Reverting changes.
Training on augumented user 2981 46/50 current_auc = 0.6240208122561064
User 2981 AUC after training: 0.6243676831912126
User 2981 improves AUC. Keeping the model.
Training on augumented user 76722 47/50 current_auc = 0.6243676831912126
User 76722 AUC after training: 0.6208267090620032
User 76722 does not improve AUC. Reverting changes.
Training on augumented user 127556 48/50 current_auc = 0.6243676831912126
User 127556 AUC after training: 0.6233053909524497
User 127556 does not improve AUC. Reverting changes.
Training on augumented user 135560 49/50 current_auc = 0.6243676831912126
User 135560 AUC after training: 0.6236594883653708
User 135560 does not improve AUC. Reverting changes.
[2024-12-02 18:54:09.972134] start test user 45120 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:10.393956] start test user 45120 139/568 recall augumented users by random, augumented_users = [37348, 129139, 13694, 124473, 70050, 22914, 105893, 16700, 62275, 109777, 16446, 55035, 1074, 38057, 120373, 133893, 129710, 98852, 72908, 113974, 39622, 12412, 129749, 34325, 36989, 121680, 85139, 111134, 30516, 34901, 1556, 53174, 80210, 14863, 94516, 114931, 15276, 50534, 9429, 9064, 120079, 22343, 70424, 107492, 72565, 134482, 75101, 53459, 30815, 115615]
[2024-12-02 18:54:10.408996] user = 45120 Cloud 139/568
[2024-12-02 18:54:10.426884] user = 45120 Local 139/568
[2024-12-02 18:54:10.480908] user = 45120 Local+ 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:12.941129] user = 45120 MPDA- 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6503961516694964
Training on augumented user 37348 0/50 current_auc = 0.6503961516694964
User 37348 AUC after training: 0.6525891341256366
User 37348 improves AUC. Keeping the model.
Training on augumented user 129139 1/50 current_auc = 0.6525891341256366
User 129139 AUC after training: 0.6523769100169778
User 129139 does not improve AUC. Reverting changes.
Training on augumented user 13694 2/50 current_auc = 0.6525891341256366
User 13694 AUC after training: 0.6529428409734013
User 13694 improves AUC. Keeping the model.
Training on augumented user 124473 3/50 current_auc = 0.6529428409734013
User 124473 AUC after training: 0.6528013582342954
User 124473 does not improve AUC. Reverting changes.
Training on augumented user 70050 4/50 current_auc = 0.6529428409734013
User 70050 AUC after training: 0.6523769100169778
User 70050 does not improve AUC. Reverting changes.
Training on augumented user 22914 5/50 current_auc = 0.6529428409734013
User 22914 AUC after training: 0.6528013582342955
User 22914 does not improve AUC. Reverting changes.
Training on augumented user 105893 6/50 current_auc = 0.6529428409734013
User 105893 AUC after training: 0.6521646859083192
User 105893 does not improve AUC. Reverting changes.
Training on augumented user 16700 7/50 current_auc = 0.6529428409734013
User 16700 AUC after training: 0.6526598754951896
User 16700 does not improve AUC. Reverting changes.
Training on augumented user 62275 8/50 current_auc = 0.6529428409734013
User 62275 AUC after training: 0.6526598754951896
User 62275 does not improve AUC. Reverting changes.
Training on augumented user 109777 9/50 current_auc = 0.6529428409734013
User 109777 AUC after training: 0.6528013582342954
User 109777 does not improve AUC. Reverting changes.
Training on augumented user 16446 10/50 current_auc = 0.6529428409734013
User 16446 AUC after training: 0.6535087719298247
User 16446 improves AUC. Keeping the model.
Training on augumented user 55035 11/50 current_auc = 0.6535087719298247
User 55035 AUC after training: 0.6528013582342954
User 55035 does not improve AUC. Reverting changes.
Training on augumented user 1074 12/50 current_auc = 0.6535087719298247
User 1074 AUC after training: 0.6544991511035654
User 1074 improves AUC. Keeping the model.
Training on augumented user 38057 13/50 current_auc = 0.6544991511035654
User 38057 AUC after training: 0.6536502546689305
User 38057 does not improve AUC. Reverting changes.
Training on augumented user 120373 14/50 current_auc = 0.6544991511035654
User 120373 AUC after training: 0.653933220147142
User 120373 does not improve AUC. Reverting changes.
Training on augumented user 133893 15/50 current_auc = 0.6544991511035654
User 133893 AUC after training: 0.6533672891907187
User 133893 does not improve AUC. Reverting changes.
Training on augumented user 129710 16/50 current_auc = 0.6544991511035654
User 129710 AUC after training: 0.6525183927560838
User 129710 does not improve AUC. Reverting changes.
Training on augumented user 98852 17/50 current_auc = 0.6544991511035654
User 98852 AUC after training: 0.6542161856253537
User 98852 does not improve AUC. Reverting changes.
Training on augumented user 72908 18/50 current_auc = 0.6544991511035654
User 72908 AUC after training: 0.6540747028862479
User 72908 does not improve AUC. Reverting changes.
Training on augumented user 113974 19/50 current_auc = 0.6544991511035654
User 113974 AUC after training: 0.6544991511035654
User 113974 does not improve AUC. Reverting changes.
Training on augumented user 39622 20/50 current_auc = 0.6544991511035654
User 39622 AUC after training: 0.6537917374080362
User 39622 does not improve AUC. Reverting changes.
Training on augumented user 12412 21/50 current_auc = 0.6544991511035654
User 12412 AUC after training: 0.6550650820599886
User 12412 improves AUC. Keeping the model.
Training on augumented user 129749 22/50 current_auc = 0.6550650820599886
User 129749 AUC after training: 0.6529428409734013
User 129749 does not improve AUC. Reverting changes.
Training on augumented user 34325 23/50 current_auc = 0.6550650820599886
User 34325 AUC after training: 0.6540747028862479
User 34325 does not improve AUC. Reverting changes.
Training on augumented user 36989 24/50 current_auc = 0.6550650820599886
User 36989 AUC after training: 0.6526598754951894
User 36989 does not improve AUC. Reverting changes.
Training on augumented user 121680 25/50 current_auc = 0.6550650820599886
User 121680 AUC after training: 0.6557017543859649
User 121680 improves AUC. Keeping the model.
Training on augumented user 85139 26/50 current_auc = 0.6557017543859649
User 85139 AUC after training: 0.6551358234295416
User 85139 does not improve AUC. Reverting changes.
Training on augumented user 111134 27/50 current_auc = 0.6557017543859649
User 111134 AUC after training: 0.655701754385965
User 111134 improves AUC. Keeping the model.
Training on augumented user 30516 28/50 current_auc = 0.655701754385965
User 30516 AUC after training: 0.6549943406904357
User 30516 does not improve AUC. Reverting changes.
Training on augumented user 34901 29/50 current_auc = 0.655701754385965
User 34901 AUC after training: 0.6546406338426712
User 34901 does not improve AUC. Reverting changes.
Training on augumented user 1556 30/50 current_auc = 0.655701754385965
User 1556 AUC after training: 0.6557017543859649
User 1556 does not improve AUC. Reverting changes.
Training on augumented user 53174 31/50 current_auc = 0.655701754385965
User 53174 AUC after training: 0.6540747028862479
User 53174 does not improve AUC. Reverting changes.
Training on augumented user 80210 32/50 current_auc = 0.655701754385965
User 80210 AUC after training: 0.6546406338426712
User 80210 does not improve AUC. Reverting changes.
Training on augumented user 14863 33/50 current_auc = 0.655701754385965
User 14863 AUC after training: 0.6502546689303905
User 14863 does not improve AUC. Reverting changes.
Training on augumented user 94516 34/50 current_auc = 0.655701754385965
User 94516 AUC after training: 0.648273910582909
User 94516 does not improve AUC. Reverting changes.
Training on augumented user 114931 35/50 current_auc = 0.655701754385965
User 114931 AUC after training: 0.6537209960384833
User 114931 does not improve AUC. Reverting changes.
Training on augumented user 15276 36/50 current_auc = 0.655701754385965
User 15276 AUC after training: 0.6517402376910016
User 15276 does not improve AUC. Reverting changes.
Training on augumented user 50534 37/50 current_auc = 0.655701754385965
User 50534 AUC after training: 0.6554187889077533
User 50534 does not improve AUC. Reverting changes.
Training on augumented user 9429 38/50 current_auc = 0.655701754385965
User 9429 AUC after training: 0.6553480475382003
User 9429 does not improve AUC. Reverting changes.
Training on augumented user 9064 39/50 current_auc = 0.655701754385965
User 9064 AUC after training: 0.6549235993208828
User 9064 does not improve AUC. Reverting changes.
Training on augumented user 120079 40/50 current_auc = 0.655701754385965
User 120079 AUC after training: 0.6518817204301075
User 120079 does not improve AUC. Reverting changes.
Training on augumented user 22343 41/50 current_auc = 0.655701754385965
User 22343 AUC after training: 0.6549943406904357
User 22343 does not improve AUC. Reverting changes.
Training on augumented user 70424 42/50 current_auc = 0.655701754385965
User 70424 AUC after training: 0.6543576683644596
User 70424 does not improve AUC. Reverting changes.
Training on augumented user 107492 43/50 current_auc = 0.655701754385965
User 107492 AUC after training: 0.6550650820599887
User 107492 does not improve AUC. Reverting changes.
Training on augumented user 72565 44/50 current_auc = 0.655701754385965
User 72565 AUC after training: 0.6550650820599887
User 72565 does not improve AUC. Reverting changes.
Training on augumented user 134482 45/50 current_auc = 0.655701754385965
User 134482 AUC after training: 0.6516694963214488
User 134482 does not improve AUC. Reverting changes.
Training on augumented user 75101 46/50 current_auc = 0.655701754385965
User 75101 AUC after training: 0.6552773061686474
User 75101 does not improve AUC. Reverting changes.
Training on augumented user 53459 47/50 current_auc = 0.655701754385965
User 53459 AUC after training: 0.6552065647990946
User 53459 does not improve AUC. Reverting changes.
Training on augumented user 30815 48/50 current_auc = 0.655701754385965
User 30815 AUC after training: 0.6534380305602716
User 30815 does not improve AUC. Reverting changes.
Training on augumented user 115615 49/50 current_auc = 0.655701754385965
User 115615 AUC after training: 0.6540747028862479
User 115615 does not improve AUC. Reverting changes.
[2024-12-02 18:54:44.306379] start test user 45135 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:45.223611] start test user 45135 140/568 recall augumented users by random, augumented_users = [58338, 25144, 45804, 28437, 107092, 134523, 116081, 114871, 63963, 54732, 4679, 92629, 56647, 44675, 120305, 86604, 26106, 58470, 109632, 101392, 54541, 39217, 40668, 135026, 87860, 109462, 69609, 86887, 116868, 57464, 79355, 93103, 113499, 82999, 24794, 103535, 47908, 93421, 4551, 48497, 14636, 133455, 70368, 89279, 98360, 45600, 4387, 86307, 50154, 75903]
[2024-12-02 18:54:45.242983] user = 45135 Cloud 140/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:45.249377] user = 45135 Local 140/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:45.355990] user = 45135 Local+ 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:47.496581] user = 45135 MPDA- 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 58338 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58338 AUC after training: 0.5
User 58338 does not improve AUC. Reverting changes.
Training on augumented user 25144 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25144 AUC after training: 0.5
User 25144 does not improve AUC. Reverting changes.
Training on augumented user 45804 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45804 AUC after training: 0.5
User 45804 does not improve AUC. Reverting changes.
Training on augumented user 28437 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28437 AUC after training: 0.5
User 28437 does not improve AUC. Reverting changes.
Training on augumented user 107092 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107092 AUC after training: 0.5
User 107092 does not improve AUC. Reverting changes.
Training on augumented user 134523 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134523 AUC after training: 0.5
User 134523 does not improve AUC. Reverting changes.
Training on augumented user 116081 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116081 AUC after training: 0.5
User 116081 does not improve AUC. Reverting changes.
Training on augumented user 114871 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114871 AUC after training: 0.5
User 114871 does not improve AUC. Reverting changes.
Training on augumented user 63963 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63963 AUC after training: 0.5
User 63963 does not improve AUC. Reverting changes.
Training on augumented user 54732 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54732 AUC after training: 0.5
User 54732 does not improve AUC. Reverting changes.
Training on augumented user 4679 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4679 AUC after training: 0.5
User 4679 does not improve AUC. Reverting changes.
Training on augumented user 92629 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92629 AUC after training: 0.5
User 92629 does not improve AUC. Reverting changes.
Training on augumented user 56647 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56647 AUC after training: 0.5
User 56647 does not improve AUC. Reverting changes.
Training on augumented user 44675 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44675 AUC after training: 0.5
User 44675 does not improve AUC. Reverting changes.
Training on augumented user 120305 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120305 AUC after training: 0.5
User 120305 does not improve AUC. Reverting changes.
Training on augumented user 86604 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86604 AUC after training: 0.5
User 86604 does not improve AUC. Reverting changes.
Training on augumented user 26106 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26106 AUC after training: 0.5
User 26106 does not improve AUC. Reverting changes.
Training on augumented user 58470 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58470 AUC after training: 0.5
User 58470 does not improve AUC. Reverting changes.
Training on augumented user 109632 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109632 AUC after training: 0.5
User 109632 does not improve AUC. Reverting changes.
Training on augumented user 101392 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101392 AUC after training: 0.5
User 101392 does not improve AUC. Reverting changes.
Training on augumented user 54541 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54541 AUC after training: 0.5
User 54541 does not improve AUC. Reverting changes.
Training on augumented user 39217 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39217 AUC after training: 0.5
User 39217 does not improve AUC. Reverting changes.
Training on augumented user 40668 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40668 AUC after training: 0.5
User 40668 does not improve AUC. Reverting changes.
Training on augumented user 135026 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135026 AUC after training: 0.5
User 135026 does not improve AUC. Reverting changes.
Training on augumented user 87860 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87860 AUC after training: 0.5
User 87860 does not improve AUC. Reverting changes.
Training on augumented user 109462 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109462 AUC after training: 0.5
User 109462 does not improve AUC. Reverting changes.
Training on augumented user 69609 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69609 AUC after training: 0.5
User 69609 does not improve AUC. Reverting changes.
Training on augumented user 86887 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86887 AUC after training: 0.5
User 86887 does not improve AUC. Reverting changes.
Training on augumented user 116868 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116868 AUC after training: 0.5
User 116868 does not improve AUC. Reverting changes.
Training on augumented user 57464 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57464 AUC after training: 0.5
User 57464 does not improve AUC. Reverting changes.
Training on augumented user 79355 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79355 AUC after training: 0.5
User 79355 does not improve AUC. Reverting changes.
Training on augumented user 93103 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93103 AUC after training: 0.5
User 93103 does not improve AUC. Reverting changes.
Training on augumented user 113499 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113499 AUC after training: 0.5
User 113499 does not improve AUC. Reverting changes.
Training on augumented user 82999 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82999 AUC after training: 0.5
User 82999 does not improve AUC. Reverting changes.
Training on augumented user 24794 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24794 AUC after training: 0.5
User 24794 does not improve AUC. Reverting changes.
Training on augumented user 103535 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103535 AUC after training: 0.5
User 103535 does not improve AUC. Reverting changes.
Training on augumented user 47908 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47908 AUC after training: 0.5
User 47908 does not improve AUC. Reverting changes.
Training on augumented user 93421 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93421 AUC after training: 0.5
User 93421 does not improve AUC. Reverting changes.
Training on augumented user 4551 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4551 AUC after training: 0.5
User 4551 does not improve AUC. Reverting changes.
Training on augumented user 48497 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48497 AUC after training: 0.5
User 48497 does not improve AUC. Reverting changes.
Training on augumented user 14636 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14636 AUC after training: 0.5
User 14636 does not improve AUC. Reverting changes.
Training on augumented user 133455 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133455 AUC after training: 0.5
User 133455 does not improve AUC. Reverting changes.
Training on augumented user 70368 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70368 AUC after training: 0.5
User 70368 does not improve AUC. Reverting changes.
Training on augumented user 89279 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89279 AUC after training: 0.5
User 89279 does not improve AUC. Reverting changes.
Training on augumented user 98360 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98360 AUC after training: 0.5
User 98360 does not improve AUC. Reverting changes.
Training on augumented user 45600 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45600 AUC after training: 0.5
User 45600 does not improve AUC. Reverting changes.
Training on augumented user 4387 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4387 AUC after training: 0.5
User 4387 does not improve AUC. Reverting changes.
Training on augumented user 86307 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86307 AUC after training: 0.5
User 86307 does not improve AUC. Reverting changes.
Training on augumented user 50154 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50154 AUC after training: 0.5
User 50154 does not improve AUC. Reverting changes.
Training on augumented user 75903 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75903 AUC after training: 0.5
User 75903 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:55:17.871075] start test user 45143 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:18.439629] start test user 45143 141/568 recall augumented users by random, augumented_users = [14134, 94085, 83842, 31033, 59396, 92315, 77715, 8673, 138136, 78955, 60940, 123791, 68855, 107993, 25126, 80295, 109224, 94288, 12473, 31054, 97151, 107226, 46797, 118783, 61477, 93577, 66398, 129266, 87541, 104885, 2374, 128880, 42955, 68954, 96540, 125528, 30007, 131631, 134687, 2256, 57444, 116747, 107653, 95311, 127318, 82718, 122531, 6246, 117112, 55943]
[2024-12-02 18:55:18.470111] user = 45143 Cloud 141/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:55:18.477123] user = 45143 Local 141/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:55:18.510043] user = 45143 Local+ 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:55:20.757411] user = 45143 MPDA- 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 14134 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14134 AUC after training: 0.5
User 14134 does not improve AUC. Reverting changes.
Training on augumented user 94085 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94085 AUC after training: 0.5
User 94085 does not improve AUC. Reverting changes.
Training on augumented user 83842 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83842 AUC after training: 0.5
User 83842 does not improve AUC. Reverting changes.
Training on augumented user 31033 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31033 AUC after training: 0.5
User 31033 does not improve AUC. Reverting changes.
Training on augumented user 59396 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59396 AUC after training: 0.5
User 59396 does not improve AUC. Reverting changes.
Training on augumented user 92315 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92315 AUC after training: 0.5
User 92315 does not improve AUC. Reverting changes.
Training on augumented user 77715 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77715 AUC after training: 0.5
User 77715 does not improve AUC. Reverting changes.
Training on augumented user 8673 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8673 AUC after training: 0.5
User 8673 does not improve AUC. Reverting changes.
Training on augumented user 138136 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138136 AUC after training: 0.5
User 138136 does not improve AUC. Reverting changes.
Training on augumented user 78955 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78955 AUC after training: 0.5
User 78955 does not improve AUC. Reverting changes.
Training on augumented user 60940 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60940 AUC after training: 0.5
User 60940 does not improve AUC. Reverting changes.
Training on augumented user 123791 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123791 AUC after training: 0.5
User 123791 does not improve AUC. Reverting changes.
Training on augumented user 68855 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68855 AUC after training: 0.5
User 68855 does not improve AUC. Reverting changes.
Training on augumented user 107993 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107993 AUC after training: 0.5
User 107993 does not improve AUC. Reverting changes.
Training on augumented user 25126 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25126 AUC after training: 0.5
User 25126 does not improve AUC. Reverting changes.
Training on augumented user 80295 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80295 AUC after training: 0.5
User 80295 does not improve AUC. Reverting changes.
Training on augumented user 109224 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109224 AUC after training: 0.5
User 109224 does not improve AUC. Reverting changes.
Training on augumented user 94288 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94288 AUC after training: 0.5
User 94288 does not improve AUC. Reverting changes.
Training on augumented user 12473 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12473 AUC after training: 0.5
User 12473 does not improve AUC. Reverting changes.
Training on augumented user 31054 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31054 AUC after training: 0.5
User 31054 does not improve AUC. Reverting changes.
Training on augumented user 97151 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97151 AUC after training: 0.5
User 97151 does not improve AUC. Reverting changes.
Training on augumented user 107226 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107226 AUC after training: 0.5
User 107226 does not improve AUC. Reverting changes.
Training on augumented user 46797 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46797 AUC after training: 0.5
User 46797 does not improve AUC. Reverting changes.
Training on augumented user 118783 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118783 AUC after training: 0.5
User 118783 does not improve AUC. Reverting changes.
Training on augumented user 61477 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61477 AUC after training: 0.5
User 61477 does not improve AUC. Reverting changes.
Training on augumented user 93577 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93577 AUC after training: 0.5
User 93577 does not improve AUC. Reverting changes.
Training on augumented user 66398 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66398 AUC after training: 0.5
User 66398 does not improve AUC. Reverting changes.
Training on augumented user 129266 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129266 AUC after training: 0.5
User 129266 does not improve AUC. Reverting changes.
Training on augumented user 87541 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87541 AUC after training: 0.5
User 87541 does not improve AUC. Reverting changes.
Training on augumented user 104885 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104885 AUC after training: 0.5
User 104885 does not improve AUC. Reverting changes.
Training on augumented user 2374 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2374 AUC after training: 0.5
User 2374 does not improve AUC. Reverting changes.
Training on augumented user 128880 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128880 AUC after training: 0.5
User 128880 does not improve AUC. Reverting changes.
Training on augumented user 42955 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42955 AUC after training: 0.5
User 42955 does not improve AUC. Reverting changes.
Training on augumented user 68954 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68954 AUC after training: 0.5
User 68954 does not improve AUC. Reverting changes.
Training on augumented user 96540 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96540 AUC after training: 0.5
User 96540 does not improve AUC. Reverting changes.
Training on augumented user 125528 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125528 AUC after training: 0.5
User 125528 does not improve AUC. Reverting changes.
Training on augumented user 30007 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30007 AUC after training: 0.5
User 30007 does not improve AUC. Reverting changes.
Training on augumented user 131631 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131631 AUC after training: 0.5
User 131631 does not improve AUC. Reverting changes.
Training on augumented user 134687 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134687 AUC after training: 0.5
User 134687 does not improve AUC. Reverting changes.
Training on augumented user 2256 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2256 AUC after training: 0.5
User 2256 does not improve AUC. Reverting changes.
Training on augumented user 57444 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57444 AUC after training: 0.5
User 57444 does not improve AUC. Reverting changes.
Training on augumented user 116747 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116747 AUC after training: 0.5
User 116747 does not improve AUC. Reverting changes.
Training on augumented user 107653 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107653 AUC after training: 0.5
User 107653 does not improve AUC. Reverting changes.
Training on augumented user 95311 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95311 AUC after training: 0.5
User 95311 does not improve AUC. Reverting changes.
Training on augumented user 127318 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127318 AUC after training: 0.5
User 127318 does not improve AUC. Reverting changes.
Training on augumented user 82718 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82718 AUC after training: 0.5
User 82718 does not improve AUC. Reverting changes.
Training on augumented user 122531 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122531 AUC after training: 0.5
User 122531 does not improve AUC. Reverting changes.
Training on augumented user 6246 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6246 AUC after training: 0.5
User 6246 does not improve AUC. Reverting changes.
Training on augumented user 117112 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117112 AUC after training: 0.5
User 117112 does not improve AUC. Reverting changes.
Training on augumented user 55943 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55943 AUC after training: 0.5
User 55943 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:55:50.554263] start test user 45148 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:51.053905] start test user 45148 142/568 recall augumented users by random, augumented_users = [49791, 29198, 127622, 21530, 134148, 44587, 99215, 35966, 91792, 94883, 33091, 63792, 48440, 48455, 90187, 88206, 98452, 37940, 130104, 127216, 52330, 54815, 15813, 69059, 124898, 94611, 101362, 7606, 121096, 27024, 119187, 97620, 121505, 133516, 28373, 124178, 3374, 59752, 40110, 17883, 69925, 120743, 13101, 20057, 30966, 81054, 98499, 14395, 49815, 126136]
[2024-12-02 18:55:51.088698] user = 45148 Cloud 142/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:55:51.101409] user = 45148 Local 142/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:55:51.143620] user = 45148 Local+ 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:55:53.581619] user = 45148 MPDA- 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 49791 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49791 AUC after training: 0.5
User 49791 does not improve AUC. Reverting changes.
Training on augumented user 29198 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29198 AUC after training: 0.5
User 29198 does not improve AUC. Reverting changes.
Training on augumented user 127622 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127622 AUC after training: 0.5
User 127622 does not improve AUC. Reverting changes.
Training on augumented user 21530 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21530 AUC after training: 0.5
User 21530 does not improve AUC. Reverting changes.
Training on augumented user 134148 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134148 AUC after training: 0.5
User 134148 does not improve AUC. Reverting changes.
Training on augumented user 44587 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44587 AUC after training: 0.5
User 44587 does not improve AUC. Reverting changes.
Training on augumented user 99215 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99215 AUC after training: 0.5
User 99215 does not improve AUC. Reverting changes.
Training on augumented user 35966 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35966 AUC after training: 0.5
User 35966 does not improve AUC. Reverting changes.
Training on augumented user 91792 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91792 AUC after training: 0.5
User 91792 does not improve AUC. Reverting changes.
Training on augumented user 94883 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94883 AUC after training: 0.5
User 94883 does not improve AUC. Reverting changes.
Training on augumented user 33091 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33091 AUC after training: 0.5
User 33091 does not improve AUC. Reverting changes.
Training on augumented user 63792 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63792 AUC after training: 0.5
User 63792 does not improve AUC. Reverting changes.
Training on augumented user 48440 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48440 AUC after training: 0.5
User 48440 does not improve AUC. Reverting changes.
Training on augumented user 48455 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48455 AUC after training: 0.5
User 48455 does not improve AUC. Reverting changes.
Training on augumented user 90187 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90187 AUC after training: 0.5
User 90187 does not improve AUC. Reverting changes.
Training on augumented user 88206 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88206 AUC after training: 0.5
User 88206 does not improve AUC. Reverting changes.
Training on augumented user 98452 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98452 AUC after training: 0.5
User 98452 does not improve AUC. Reverting changes.
Training on augumented user 37940 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37940 AUC after training: 0.5
User 37940 does not improve AUC. Reverting changes.
Training on augumented user 130104 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130104 AUC after training: 0.5
User 130104 does not improve AUC. Reverting changes.
Training on augumented user 127216 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127216 AUC after training: 0.5
User 127216 does not improve AUC. Reverting changes.
Training on augumented user 52330 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52330 AUC after training: 0.5
User 52330 does not improve AUC. Reverting changes.
Training on augumented user 54815 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54815 AUC after training: 0.5
User 54815 does not improve AUC. Reverting changes.
Training on augumented user 15813 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15813 AUC after training: 0.5
User 15813 does not improve AUC. Reverting changes.
Training on augumented user 69059 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69059 AUC after training: 0.5
User 69059 does not improve AUC. Reverting changes.
Training on augumented user 124898 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124898 AUC after training: 0.5
User 124898 does not improve AUC. Reverting changes.
Training on augumented user 94611 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94611 AUC after training: 0.5
User 94611 does not improve AUC. Reverting changes.
Training on augumented user 101362 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101362 AUC after training: 0.5
User 101362 does not improve AUC. Reverting changes.
Training on augumented user 7606 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7606 AUC after training: 0.5
User 7606 does not improve AUC. Reverting changes.
Training on augumented user 121096 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121096 AUC after training: 0.5
User 121096 does not improve AUC. Reverting changes.
Training on augumented user 27024 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27024 AUC after training: 0.5
User 27024 does not improve AUC. Reverting changes.
Training on augumented user 119187 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119187 AUC after training: 0.5
User 119187 does not improve AUC. Reverting changes.
Training on augumented user 97620 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97620 AUC after training: 0.5
User 97620 does not improve AUC. Reverting changes.
Training on augumented user 121505 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121505 AUC after training: 0.5
User 121505 does not improve AUC. Reverting changes.
Training on augumented user 133516 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133516 AUC after training: 0.5
User 133516 does not improve AUC. Reverting changes.
Training on augumented user 28373 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28373 AUC after training: 0.5
User 28373 does not improve AUC. Reverting changes.
Training on augumented user 124178 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124178 AUC after training: 0.5
User 124178 does not improve AUC. Reverting changes.
Training on augumented user 3374 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3374 AUC after training: 0.5
User 3374 does not improve AUC. Reverting changes.
Training on augumented user 59752 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59752 AUC after training: 0.5
User 59752 does not improve AUC. Reverting changes.
Training on augumented user 40110 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40110 AUC after training: 0.5
User 40110 does not improve AUC. Reverting changes.
Training on augumented user 17883 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17883 AUC after training: 0.5
User 17883 does not improve AUC. Reverting changes.
Training on augumented user 69925 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69925 AUC after training: 0.5
User 69925 does not improve AUC. Reverting changes.
Training on augumented user 120743 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120743 AUC after training: 0.5
User 120743 does not improve AUC. Reverting changes.
Training on augumented user 13101 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13101 AUC after training: 0.5
User 13101 does not improve AUC. Reverting changes.
Training on augumented user 20057 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20057 AUC after training: 0.5
User 20057 does not improve AUC. Reverting changes.
Training on augumented user 30966 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30966 AUC after training: 0.5
User 30966 does not improve AUC. Reverting changes.
Training on augumented user 81054 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81054 AUC after training: 0.5
User 81054 does not improve AUC. Reverting changes.
Training on augumented user 98499 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98499 AUC after training: 0.5
User 98499 does not improve AUC. Reverting changes.
Training on augumented user 14395 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14395 AUC after training: 0.5
User 14395 does not improve AUC. Reverting changes.
Training on augumented user 49815 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49815 AUC after training: 0.5
User 49815 does not improve AUC. Reverting changes.
Training on augumented user 126136 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126136 AUC after training: 0.5
User 126136 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:56:21.867785] start test user 45182 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:22.296913] start test user 45182 143/568 recall augumented users by random, augumented_users = [91705, 42385, 44778, 131820, 37011, 104777, 131708, 33564, 26185, 126250, 127031, 102047, 55100, 54457, 39145, 128462, 129163, 138171, 64036, 22599, 77584, 12476, 111660, 134038, 119318, 65079, 67536, 82573, 133696, 131850, 122793, 67434, 64355, 34728, 95766, 5720, 7291, 3329, 96812, 56493, 127374, 28845, 46925, 94158, 85140, 128918, 31414, 14409, 126740, 12432]
[2024-12-02 18:56:22.311508] user = 45182 Cloud 143/568
[2024-12-02 18:56:22.322891] user = 45182 Local 143/568
[2024-12-02 18:56:22.355947] user = 45182 Local+ 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:24.924804] user = 45182 MPDA- 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5654761904761905
Training on augumented user 91705 0/50 current_auc = 0.5654761904761905
User 91705 AUC after training: 0.5654761904761905
User 91705 does not improve AUC. Reverting changes.
Training on augumented user 42385 1/50 current_auc = 0.5654761904761905
User 42385 AUC after training: 0.5654761904761905
User 42385 does not improve AUC. Reverting changes.
Training on augumented user 44778 2/50 current_auc = 0.5654761904761905
User 44778 AUC after training: 0.5654761904761905
User 44778 does not improve AUC. Reverting changes.
Training on augumented user 131820 3/50 current_auc = 0.5654761904761905
User 131820 AUC after training: 0.5654761904761905
User 131820 does not improve AUC. Reverting changes.
Training on augumented user 37011 4/50 current_auc = 0.5654761904761905
User 37011 AUC after training: 0.5654761904761905
User 37011 does not improve AUC. Reverting changes.
Training on augumented user 104777 5/50 current_auc = 0.5654761904761905
User 104777 AUC after training: 0.5654761904761905
User 104777 does not improve AUC. Reverting changes.
Training on augumented user 131708 6/50 current_auc = 0.5654761904761905
User 131708 AUC after training: 0.5654761904761905
User 131708 does not improve AUC. Reverting changes.
Training on augumented user 33564 7/50 current_auc = 0.5654761904761905
User 33564 AUC after training: 0.5654761904761905
User 33564 does not improve AUC. Reverting changes.
Training on augumented user 26185 8/50 current_auc = 0.5654761904761905
User 26185 AUC after training: 0.5714285714285714
User 26185 improves AUC. Keeping the model.
Training on augumented user 126250 9/50 current_auc = 0.5714285714285714
User 126250 AUC after training: 0.5714285714285714
User 126250 does not improve AUC. Reverting changes.
Training on augumented user 127031 10/50 current_auc = 0.5714285714285714
User 127031 AUC after training: 0.5654761904761905
User 127031 does not improve AUC. Reverting changes.
Training on augumented user 102047 11/50 current_auc = 0.5714285714285714
User 102047 AUC after training: 0.5714285714285714
User 102047 does not improve AUC. Reverting changes.
Training on augumented user 55100 12/50 current_auc = 0.5714285714285714
User 55100 AUC after training: 0.5833333333333333
User 55100 improves AUC. Keeping the model.
Training on augumented user 54457 13/50 current_auc = 0.5833333333333333
User 54457 AUC after training: 0.5833333333333333
User 54457 does not improve AUC. Reverting changes.
Training on augumented user 39145 14/50 current_auc = 0.5833333333333333
User 39145 AUC after training: 0.5892857142857142
User 39145 improves AUC. Keeping the model.
Training on augumented user 128462 15/50 current_auc = 0.5892857142857142
User 128462 AUC after training: 0.5892857142857142
User 128462 does not improve AUC. Reverting changes.
Training on augumented user 129163 16/50 current_auc = 0.5892857142857142
User 129163 AUC after training: 0.5892857142857142
User 129163 does not improve AUC. Reverting changes.
Training on augumented user 138171 17/50 current_auc = 0.5892857142857142
User 138171 AUC after training: 0.5833333333333333
User 138171 does not improve AUC. Reverting changes.
Training on augumented user 64036 18/50 current_auc = 0.5892857142857142
User 64036 AUC after training: 0.5892857142857142
User 64036 does not improve AUC. Reverting changes.
Training on augumented user 22599 19/50 current_auc = 0.5892857142857142
User 22599 AUC after training: 0.5773809523809523
User 22599 does not improve AUC. Reverting changes.
Training on augumented user 77584 20/50 current_auc = 0.5892857142857142
User 77584 AUC after training: 0.5773809523809523
User 77584 does not improve AUC. Reverting changes.
Training on augumented user 12476 21/50 current_auc = 0.5892857142857142
User 12476 AUC after training: 0.5833333333333333
User 12476 does not improve AUC. Reverting changes.
Training on augumented user 111660 22/50 current_auc = 0.5892857142857142
User 111660 AUC after training: 0.5714285714285714
User 111660 does not improve AUC. Reverting changes.
Training on augumented user 134038 23/50 current_auc = 0.5892857142857142
User 134038 AUC after training: 0.5892857142857142
User 134038 does not improve AUC. Reverting changes.
Training on augumented user 119318 24/50 current_auc = 0.5892857142857142
User 119318 AUC after training: 0.5833333333333333
User 119318 does not improve AUC. Reverting changes.
Training on augumented user 65079 25/50 current_auc = 0.5892857142857142
User 65079 AUC after training: 0.5892857142857142
User 65079 does not improve AUC. Reverting changes.
Training on augumented user 67536 26/50 current_auc = 0.5892857142857142
User 67536 AUC after training: 0.5892857142857142
User 67536 does not improve AUC. Reverting changes.
Training on augumented user 82573 27/50 current_auc = 0.5892857142857142
User 82573 AUC after training: 0.5833333333333333
User 82573 does not improve AUC. Reverting changes.
Training on augumented user 133696 28/50 current_auc = 0.5892857142857142
User 133696 AUC after training: 0.5892857142857142
User 133696 does not improve AUC. Reverting changes.
Training on augumented user 131850 29/50 current_auc = 0.5892857142857142
User 131850 AUC after training: 0.5833333333333333
User 131850 does not improve AUC. Reverting changes.
Training on augumented user 122793 30/50 current_auc = 0.5892857142857142
User 122793 AUC after training: 0.5833333333333333
User 122793 does not improve AUC. Reverting changes.
Training on augumented user 67434 31/50 current_auc = 0.5892857142857142
User 67434 AUC after training: 0.5892857142857142
User 67434 does not improve AUC. Reverting changes.
Training on augumented user 64355 32/50 current_auc = 0.5892857142857142
User 64355 AUC after training: 0.5833333333333333
User 64355 does not improve AUC. Reverting changes.
Training on augumented user 34728 33/50 current_auc = 0.5892857142857142
User 34728 AUC after training: 0.5892857142857142
User 34728 does not improve AUC. Reverting changes.
Training on augumented user 95766 34/50 current_auc = 0.5892857142857142
User 95766 AUC after training: 0.5833333333333333
User 95766 does not improve AUC. Reverting changes.
Training on augumented user 5720 35/50 current_auc = 0.5892857142857142
User 5720 AUC after training: 0.5892857142857142
User 5720 does not improve AUC. Reverting changes.
Training on augumented user 7291 36/50 current_auc = 0.5892857142857142
User 7291 AUC after training: 0.5892857142857142
User 7291 does not improve AUC. Reverting changes.
Training on augumented user 3329 37/50 current_auc = 0.5892857142857142
User 3329 AUC after training: 0.5833333333333333
User 3329 does not improve AUC. Reverting changes.
Training on augumented user 96812 38/50 current_auc = 0.5892857142857142
User 96812 AUC after training: 0.5833333333333333
User 96812 does not improve AUC. Reverting changes.
Training on augumented user 56493 39/50 current_auc = 0.5892857142857142
User 56493 AUC after training: 0.5892857142857142
User 56493 does not improve AUC. Reverting changes.
Training on augumented user 127374 40/50 current_auc = 0.5892857142857142
User 127374 AUC after training: 0.5892857142857142
User 127374 does not improve AUC. Reverting changes.
Training on augumented user 28845 41/50 current_auc = 0.5892857142857142
User 28845 AUC after training: 0.5833333333333333
User 28845 does not improve AUC. Reverting changes.
Training on augumented user 46925 42/50 current_auc = 0.5892857142857142
User 46925 AUC after training: 0.5833333333333333
User 46925 does not improve AUC. Reverting changes.
Training on augumented user 94158 43/50 current_auc = 0.5892857142857142
User 94158 AUC after training: 0.5833333333333333
User 94158 does not improve AUC. Reverting changes.
Training on augumented user 85140 44/50 current_auc = 0.5892857142857142
User 85140 AUC after training: 0.5833333333333333
User 85140 does not improve AUC. Reverting changes.
Training on augumented user 128918 45/50 current_auc = 0.5892857142857142
User 128918 AUC after training: 0.5892857142857142
User 128918 does not improve AUC. Reverting changes.
Training on augumented user 31414 46/50 current_auc = 0.5892857142857142
User 31414 AUC after training: 0.5833333333333333
User 31414 does not improve AUC. Reverting changes.
Training on augumented user 14409 47/50 current_auc = 0.5892857142857142
User 14409 AUC after training: 0.5892857142857142
User 14409 does not improve AUC. Reverting changes.
Training on augumented user 126740 48/50 current_auc = 0.5892857142857142
User 126740 AUC after training: 0.5833333333333333
User 126740 does not improve AUC. Reverting changes.
Training on augumented user 12432 49/50 current_auc = 0.5892857142857142
User 12432 AUC after training: 0.5833333333333333
User 12432 does not improve AUC. Reverting changes.
[2024-12-02 18:56:54.368842] start test user 45189 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:54.824578] start test user 45189 144/568 recall augumented users by random, augumented_users = [26974, 134851, 100564, 6797, 91206, 23080, 127744, 72722, 137846, 32230, 86822, 47385, 94660, 80346, 89653, 4056, 133316, 74023, 88543, 69022, 132045, 7896, 18586, 47509, 36050, 93717, 13158, 130048, 81238, 4881, 133104, 12215, 1932, 120411, 52961, 43472, 38771, 107449, 15380, 12239, 23341, 49512, 122521, 111339, 39995, 40578, 8405, 58824, 23863, 102058]
[2024-12-02 18:56:54.839309] user = 45189 Cloud 144/568
[2024-12-02 18:56:54.853446] user = 45189 Local 144/568
[2024-12-02 18:56:54.881704] user = 45189 Local+ 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:57.741072] user = 45189 MPDA- 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4711375212224108
Training on augumented user 26974 0/50 current_auc = 0.4711375212224108
User 26974 AUC after training: 0.4719864176570458
User 26974 improves AUC. Keeping the model.
Training on augumented user 134851 1/50 current_auc = 0.4719864176570458
User 134851 AUC after training: 0.4719864176570458
User 134851 does not improve AUC. Reverting changes.
Training on augumented user 100564 2/50 current_auc = 0.4719864176570458
User 100564 AUC after training: 0.47198641765704585
User 100564 improves AUC. Keeping the model.
Training on augumented user 6797 3/50 current_auc = 0.47198641765704585
User 6797 AUC after training: 0.4728353140916808
User 6797 improves AUC. Keeping the model.
Training on augumented user 91206 4/50 current_auc = 0.4728353140916808
User 91206 AUC after training: 0.4736842105263158
User 91206 improves AUC. Keeping the model.
Training on augumented user 23080 5/50 current_auc = 0.4736842105263158
User 23080 AUC after training: 0.4728353140916808
User 23080 does not improve AUC. Reverting changes.
Training on augumented user 127744 6/50 current_auc = 0.4736842105263158
User 127744 AUC after training: 0.47198641765704585
User 127744 does not improve AUC. Reverting changes.
Training on augumented user 72722 7/50 current_auc = 0.4736842105263158
User 72722 AUC after training: 0.4719864176570458
User 72722 does not improve AUC. Reverting changes.
Training on augumented user 137846 8/50 current_auc = 0.4736842105263158
User 137846 AUC after training: 0.47198641765704585
User 137846 does not improve AUC. Reverting changes.
Training on augumented user 32230 9/50 current_auc = 0.4736842105263158
User 32230 AUC after training: 0.4736842105263158
User 32230 does not improve AUC. Reverting changes.
Training on augumented user 86822 10/50 current_auc = 0.4736842105263158
User 86822 AUC after training: 0.47113752122241087
User 86822 does not improve AUC. Reverting changes.
Training on augumented user 47385 11/50 current_auc = 0.4736842105263158
User 47385 AUC after training: 0.4736842105263158
User 47385 does not improve AUC. Reverting changes.
Training on augumented user 94660 12/50 current_auc = 0.4736842105263158
User 94660 AUC after training: 0.47453310696095075
User 94660 improves AUC. Keeping the model.
Training on augumented user 80346 13/50 current_auc = 0.47453310696095075
User 80346 AUC after training: 0.4719864176570458
User 80346 does not improve AUC. Reverting changes.
Training on augumented user 89653 14/50 current_auc = 0.47453310696095075
User 89653 AUC after training: 0.4736842105263158
User 89653 does not improve AUC. Reverting changes.
Training on augumented user 4056 15/50 current_auc = 0.47453310696095075
User 4056 AUC after training: 0.4770797962648557
User 4056 improves AUC. Keeping the model.
Training on augumented user 133316 16/50 current_auc = 0.4770797962648557
User 133316 AUC after training: 0.4753820033955857
User 133316 does not improve AUC. Reverting changes.
Training on augumented user 74023 17/50 current_auc = 0.4770797962648557
User 74023 AUC after training: 0.4736842105263158
User 74023 does not improve AUC. Reverting changes.
Training on augumented user 88543 18/50 current_auc = 0.4770797962648557
User 88543 AUC after training: 0.4779286926994907
User 88543 improves AUC. Keeping the model.
Training on augumented user 69022 19/50 current_auc = 0.4779286926994907
User 69022 AUC after training: 0.4779286926994907
User 69022 does not improve AUC. Reverting changes.
Training on augumented user 132045 20/50 current_auc = 0.4779286926994907
User 132045 AUC after training: 0.4753820033955858
User 132045 does not improve AUC. Reverting changes.
Training on augumented user 7896 21/50 current_auc = 0.4779286926994907
User 7896 AUC after training: 0.4762308998302207
User 7896 does not improve AUC. Reverting changes.
Training on augumented user 18586 22/50 current_auc = 0.4779286926994907
User 18586 AUC after training: 0.4779286926994907
User 18586 does not improve AUC. Reverting changes.
Training on augumented user 47509 23/50 current_auc = 0.4779286926994907
User 47509 AUC after training: 0.4770797962648557
User 47509 does not improve AUC. Reverting changes.
Training on augumented user 36050 24/50 current_auc = 0.4779286926994907
User 36050 AUC after training: 0.4779286926994907
User 36050 does not improve AUC. Reverting changes.
Training on augumented user 93717 25/50 current_auc = 0.4779286926994907
User 93717 AUC after training: 0.47453310696095075
User 93717 does not improve AUC. Reverting changes.
Training on augumented user 13158 26/50 current_auc = 0.4779286926994907
User 13158 AUC after training: 0.47877758913412566
User 13158 improves AUC. Keeping the model.
Training on augumented user 130048 27/50 current_auc = 0.47877758913412566
User 130048 AUC after training: 0.4779286926994907
User 130048 does not improve AUC. Reverting changes.
Training on augumented user 81238 28/50 current_auc = 0.47877758913412566
User 81238 AUC after training: 0.4779286926994907
User 81238 does not improve AUC. Reverting changes.
Training on augumented user 4881 29/50 current_auc = 0.47877758913412566
User 4881 AUC after training: 0.47877758913412566
User 4881 does not improve AUC. Reverting changes.
Training on augumented user 133104 30/50 current_auc = 0.47877758913412566
User 133104 AUC after training: 0.4779286926994907
User 133104 does not improve AUC. Reverting changes.
Training on augumented user 12215 31/50 current_auc = 0.47877758913412566
User 12215 AUC after training: 0.4796264855687606
User 12215 improves AUC. Keeping the model.
Training on augumented user 1932 32/50 current_auc = 0.4796264855687606
User 1932 AUC after training: 0.4770797962648557
User 1932 does not improve AUC. Reverting changes.
Training on augumented user 120411 33/50 current_auc = 0.4796264855687606
User 120411 AUC after training: 0.47877758913412566
User 120411 does not improve AUC. Reverting changes.
Training on augumented user 52961 34/50 current_auc = 0.4796264855687606
User 52961 AUC after training: 0.4770797962648557
User 52961 does not improve AUC. Reverting changes.
Training on augumented user 43472 35/50 current_auc = 0.4796264855687606
User 43472 AUC after training: 0.4779286926994906
User 43472 does not improve AUC. Reverting changes.
Training on augumented user 38771 36/50 current_auc = 0.4796264855687606
User 38771 AUC after training: 0.4796264855687606
User 38771 does not improve AUC. Reverting changes.
Training on augumented user 107449 37/50 current_auc = 0.4796264855687606
User 107449 AUC after training: 0.4779286926994907
User 107449 does not improve AUC. Reverting changes.
Training on augumented user 15380 38/50 current_auc = 0.4796264855687606
User 15380 AUC after training: 0.4779286926994907
User 15380 does not improve AUC. Reverting changes.
Training on augumented user 12239 39/50 current_auc = 0.4796264855687606
User 12239 AUC after training: 0.47453310696095075
User 12239 does not improve AUC. Reverting changes.
Training on augumented user 23341 40/50 current_auc = 0.4796264855687606
User 23341 AUC after training: 0.47877758913412566
User 23341 does not improve AUC. Reverting changes.
Training on augumented user 49512 41/50 current_auc = 0.4796264855687606
User 49512 AUC after training: 0.47113752122241087
User 49512 does not improve AUC. Reverting changes.
Training on augumented user 122521 42/50 current_auc = 0.4796264855687606
User 122521 AUC after training: 0.4762308998302207
User 122521 does not improve AUC. Reverting changes.
Training on augumented user 111339 43/50 current_auc = 0.4796264855687606
User 111339 AUC after training: 0.4762308998302207
User 111339 does not improve AUC. Reverting changes.
Training on augumented user 39995 44/50 current_auc = 0.4796264855687606
User 39995 AUC after training: 0.4779286926994906
User 39995 does not improve AUC. Reverting changes.
Training on augumented user 40578 45/50 current_auc = 0.4796264855687606
User 40578 AUC after training: 0.4804753820033956
User 40578 improves AUC. Keeping the model.
Training on augumented user 8405 46/50 current_auc = 0.4804753820033956
User 8405 AUC after training: 0.47453310696095075
User 8405 does not improve AUC. Reverting changes.
Training on augumented user 58824 47/50 current_auc = 0.4804753820033956
User 58824 AUC after training: 0.47538200339558573
User 58824 does not improve AUC. Reverting changes.
Training on augumented user 23863 48/50 current_auc = 0.4804753820033956
User 23863 AUC after training: 0.4762308998302207
User 23863 does not improve AUC. Reverting changes.
Training on augumented user 102058 49/50 current_auc = 0.4804753820033956
User 102058 AUC after training: 0.4804753820033956
User 102058 does not improve AUC. Reverting changes.
[2024-12-02 18:57:26.907578] start test user 45214 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:27.429869] start test user 45214 145/568 recall augumented users by random, augumented_users = [60850, 32731, 81406, 42749, 4701, 100017, 80289, 133869, 21601, 121468, 67160, 63931, 75020, 18210, 12392, 119825, 33798, 83377, 116820, 121065, 110769, 73824, 71513, 100972, 123288, 67169, 29564, 127144, 65418, 134680, 4706, 53810, 54345, 43203, 80844, 111294, 48640, 82366, 117751, 116403, 12184, 52380, 131376, 87236, 74577, 48980, 50008, 68613, 107088, 99927]
[2024-12-02 18:57:27.448340] user = 45214 Cloud 145/568
[2024-12-02 18:57:27.459396] user = 45214 Local 145/568
[2024-12-02 18:57:27.490654] user = 45214 Local+ 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:29.957450] user = 45214 MPDA- 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6298076923076923
Training on augumented user 60850 0/50 current_auc = 0.6298076923076923
User 60850 AUC after training: 0.6201923076923077
User 60850 does not improve AUC. Reverting changes.
Training on augumented user 32731 1/50 current_auc = 0.6298076923076923
User 32731 AUC after training: 0.6298076923076923
User 32731 does not improve AUC. Reverting changes.
Training on augumented user 81406 2/50 current_auc = 0.6298076923076923
User 81406 AUC after training: 0.625
User 81406 does not improve AUC. Reverting changes.
Training on augumented user 42749 3/50 current_auc = 0.6298076923076923
User 42749 AUC after training: 0.625
User 42749 does not improve AUC. Reverting changes.
Training on augumented user 4701 4/50 current_auc = 0.6298076923076923
User 4701 AUC after training: 0.625
User 4701 does not improve AUC. Reverting changes.
Training on augumented user 100017 5/50 current_auc = 0.6298076923076923
User 100017 AUC after training: 0.625
User 100017 does not improve AUC. Reverting changes.
Training on augumented user 80289 6/50 current_auc = 0.6298076923076923
User 80289 AUC after training: 0.6298076923076923
User 80289 does not improve AUC. Reverting changes.
Training on augumented user 133869 7/50 current_auc = 0.6298076923076923
User 133869 AUC after training: 0.6298076923076923
User 133869 does not improve AUC. Reverting changes.
Training on augumented user 21601 8/50 current_auc = 0.6298076923076923
User 21601 AUC after training: 0.6298076923076923
User 21601 does not improve AUC. Reverting changes.
Training on augumented user 121468 9/50 current_auc = 0.6298076923076923
User 121468 AUC after training: 0.6346153846153846
User 121468 improves AUC. Keeping the model.
Training on augumented user 67160 10/50 current_auc = 0.6346153846153846
User 67160 AUC after training: 0.6298076923076923
User 67160 does not improve AUC. Reverting changes.
Training on augumented user 63931 11/50 current_auc = 0.6346153846153846
User 63931 AUC after training: 0.6346153846153846
User 63931 does not improve AUC. Reverting changes.
Training on augumented user 75020 12/50 current_auc = 0.6346153846153846
User 75020 AUC after training: 0.6346153846153846
User 75020 does not improve AUC. Reverting changes.
Training on augumented user 18210 13/50 current_auc = 0.6346153846153846
User 18210 AUC after training: 0.6490384615384615
User 18210 improves AUC. Keeping the model.
Training on augumented user 12392 14/50 current_auc = 0.6490384615384615
User 12392 AUC after training: 0.6490384615384615
User 12392 does not improve AUC. Reverting changes.
Training on augumented user 119825 15/50 current_auc = 0.6490384615384615
User 119825 AUC after training: 0.6442307692307692
User 119825 does not improve AUC. Reverting changes.
Training on augumented user 33798 16/50 current_auc = 0.6490384615384615
User 33798 AUC after training: 0.6201923076923077
User 33798 does not improve AUC. Reverting changes.
Training on augumented user 83377 17/50 current_auc = 0.6490384615384615
User 83377 AUC after training: 0.6346153846153846
User 83377 does not improve AUC. Reverting changes.
Training on augumented user 116820 18/50 current_auc = 0.6490384615384615
User 116820 AUC after training: 0.6346153846153846
User 116820 does not improve AUC. Reverting changes.
Training on augumented user 121065 19/50 current_auc = 0.6490384615384615
User 121065 AUC after training: 0.6346153846153846
User 121065 does not improve AUC. Reverting changes.
Training on augumented user 110769 20/50 current_auc = 0.6490384615384615
User 110769 AUC after training: 0.625
User 110769 does not improve AUC. Reverting changes.
Training on augumented user 73824 21/50 current_auc = 0.6490384615384615
User 73824 AUC after training: 0.6442307692307692
User 73824 does not improve AUC. Reverting changes.
Training on augumented user 71513 22/50 current_auc = 0.6490384615384615
User 71513 AUC after training: 0.6346153846153846
User 71513 does not improve AUC. Reverting changes.
Training on augumented user 100972 23/50 current_auc = 0.6490384615384615
User 100972 AUC after training: 0.6394230769230769
User 100972 does not improve AUC. Reverting changes.
Training on augumented user 123288 24/50 current_auc = 0.6490384615384615
User 123288 AUC after training: 0.6538461538461537
User 123288 improves AUC. Keeping the model.
Training on augumented user 67169 25/50 current_auc = 0.6538461538461537
User 67169 AUC after training: 0.6538461538461537
User 67169 does not improve AUC. Reverting changes.
Training on augumented user 29564 26/50 current_auc = 0.6538461538461537
User 29564 AUC after training: 0.6298076923076923
User 29564 does not improve AUC. Reverting changes.
Training on augumented user 127144 27/50 current_auc = 0.6538461538461537
User 127144 AUC after training: 0.6538461538461537
User 127144 does not improve AUC. Reverting changes.
Training on augumented user 65418 28/50 current_auc = 0.6538461538461537
User 65418 AUC after training: 0.6466346153846154
User 65418 does not improve AUC. Reverting changes.
Training on augumented user 134680 29/50 current_auc = 0.6538461538461537
User 134680 AUC after training: 0.6298076923076923
User 134680 does not improve AUC. Reverting changes.
Training on augumented user 4706 30/50 current_auc = 0.6538461538461537
User 4706 AUC after training: 0.6394230769230769
User 4706 does not improve AUC. Reverting changes.
Training on augumented user 53810 31/50 current_auc = 0.6538461538461537
User 53810 AUC after training: 0.6442307692307692
User 53810 does not improve AUC. Reverting changes.
Training on augumented user 54345 32/50 current_auc = 0.6538461538461537
User 54345 AUC after training: 0.6394230769230769
User 54345 does not improve AUC. Reverting changes.
Training on augumented user 43203 33/50 current_auc = 0.6538461538461537
User 43203 AUC after training: 0.6490384615384615
User 43203 does not improve AUC. Reverting changes.
Training on augumented user 80844 34/50 current_auc = 0.6538461538461537
User 80844 AUC after training: 0.6177884615384616
User 80844 does not improve AUC. Reverting changes.
Training on augumented user 111294 35/50 current_auc = 0.6538461538461537
User 111294 AUC after training: 0.6394230769230769
User 111294 does not improve AUC. Reverting changes.
Training on augumented user 48640 36/50 current_auc = 0.6538461538461537
User 48640 AUC after training: 0.6346153846153846
User 48640 does not improve AUC. Reverting changes.
Training on augumented user 82366 37/50 current_auc = 0.6538461538461537
User 82366 AUC after training: 0.6346153846153846
User 82366 does not improve AUC. Reverting changes.
Training on augumented user 117751 38/50 current_auc = 0.6538461538461537
User 117751 AUC after training: 0.6514423076923077
User 117751 does not improve AUC. Reverting changes.
Training on augumented user 116403 39/50 current_auc = 0.6538461538461537
User 116403 AUC after training: 0.6538461538461537
User 116403 does not improve AUC. Reverting changes.
Training on augumented user 12184 40/50 current_auc = 0.6538461538461537
User 12184 AUC after training: 0.6490384615384615
User 12184 does not improve AUC. Reverting changes.
Training on augumented user 52380 41/50 current_auc = 0.6538461538461537
User 52380 AUC after training: 0.6394230769230769
User 52380 does not improve AUC. Reverting changes.
Training on augumented user 131376 42/50 current_auc = 0.6538461538461537
User 131376 AUC after training: 0.6490384615384615
User 131376 does not improve AUC. Reverting changes.
Training on augumented user 87236 43/50 current_auc = 0.6538461538461537
User 87236 AUC after training: 0.6538461538461537
User 87236 does not improve AUC. Reverting changes.
Training on augumented user 74577 44/50 current_auc = 0.6538461538461537
User 74577 AUC after training: 0.6490384615384615
User 74577 does not improve AUC. Reverting changes.
Training on augumented user 48980 45/50 current_auc = 0.6538461538461537
User 48980 AUC after training: 0.6442307692307692
User 48980 does not improve AUC. Reverting changes.
Training on augumented user 50008 46/50 current_auc = 0.6538461538461537
User 50008 AUC after training: 0.6346153846153846
User 50008 does not improve AUC. Reverting changes.
Training on augumented user 68613 47/50 current_auc = 0.6538461538461537
User 68613 AUC after training: 0.6538461538461537
User 68613 does not improve AUC. Reverting changes.
Training on augumented user 107088 48/50 current_auc = 0.6538461538461537
User 107088 AUC after training: 0.6394230769230769
User 107088 does not improve AUC. Reverting changes.
Training on augumented user 99927 49/50 current_auc = 0.6538461538461537
User 99927 AUC after training: 0.6442307692307692
User 99927 does not improve AUC. Reverting changes.
[2024-12-02 18:57:59.945007] start test user 45267 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:00.453949] start test user 45267 146/568 recall augumented users by random, augumented_users = [73274, 5854, 89692, 74481, 90511, 49061, 115720, 50934, 113663, 57975, 97861, 19365, 101216, 100584, 121856, 18606, 4778, 103320, 96604, 86168, 3780, 36271, 119303, 92410, 108123, 85901, 101700, 61606, 39640, 102352, 22740, 69099, 122247, 89327, 132561, 122323, 11148, 78528, 81632, 44341, 28086, 88864, 25984, 75741, 39245, 138370, 37305, 132303, 85183, 110526]
[2024-12-02 18:58:00.471974] user = 45267 Cloud 146/568
[2024-12-02 18:58:00.502144] user = 45267 Local 146/568
[2024-12-02 18:58:00.540331] user = 45267 Local+ 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:03.602570] user = 45267 MPDA- 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6994070837884225
Training on augumented user 73274 0/50 current_auc = 0.6994070837884225
User 73274 AUC after training: 0.6990950226244345
User 73274 does not improve AUC. Reverting changes.
Training on augumented user 5854 1/50 current_auc = 0.6994070837884225
User 5854 AUC after training: 0.6991340302699328
User 5854 does not improve AUC. Reverting changes.
Training on augumented user 89692 2/50 current_auc = 0.6994070837884225
User 89692 AUC after training: 0.6987049461694491
User 89692 does not improve AUC. Reverting changes.
Training on augumented user 74481 3/50 current_auc = 0.6994070837884225
User 74481 AUC after training: 0.6989779996879388
User 74481 does not improve AUC. Reverting changes.
Training on augumented user 90511 4/50 current_auc = 0.6994070837884225
User 90511 AUC after training: 0.6990950226244343
User 90511 does not improve AUC. Reverting changes.
Training on augumented user 49061 5/50 current_auc = 0.6994070837884225
User 49061 AUC after training: 0.6991340302699328
User 49061 does not improve AUC. Reverting changes.
Training on augumented user 115720 6/50 current_auc = 0.6994070837884225
User 115720 AUC after training: 0.6997191449524106
User 115720 improves AUC. Keeping the model.
Training on augumented user 50934 7/50 current_auc = 0.6997191449524106
User 50934 AUC after training: 0.6999141831799033
User 50934 improves AUC. Keeping the model.
Training on augumented user 113663 8/50 current_auc = 0.6999141831799033
User 113663 AUC after training: 0.6998361678889061
User 113663 does not improve AUC. Reverting changes.
Training on augumented user 57975 9/50 current_auc = 0.6999141831799033
User 57975 AUC after training: 0.6999921984709002
User 57975 improves AUC. Keeping the model.
Training on augumented user 97861 10/50 current_auc = 0.6999921984709002
User 97861 AUC after training: 0.6998361678889063
User 97861 does not improve AUC. Reverting changes.
Training on augumented user 19365 11/50 current_auc = 0.6999921984709002
User 19365 AUC after training: 0.6995631143704166
User 19365 does not improve AUC. Reverting changes.
Training on augumented user 101216 12/50 current_auc = 0.6999921984709002
User 101216 AUC after training: 0.6995631143704166
User 101216 does not improve AUC. Reverting changes.
Training on augumented user 100584 13/50 current_auc = 0.6999921984709002
User 100584 AUC after training: 0.6999531908254019
User 100584 does not improve AUC. Reverting changes.
Training on augumented user 121856 14/50 current_auc = 0.6999921984709002
User 121856 AUC after training: 0.6995631143704166
User 121856 does not improve AUC. Reverting changes.
Training on augumented user 18606 15/50 current_auc = 0.6999921984709002
User 18606 AUC after training: 0.6997191449524106
User 18606 does not improve AUC. Reverting changes.
Training on augumented user 4778 16/50 current_auc = 0.6999921984709002
User 4778 AUC after training: 0.6996411296614137
User 4778 does not improve AUC. Reverting changes.
Training on augumented user 103320 17/50 current_auc = 0.6999921984709002
User 103320 AUC after training: 0.7004212825713839
User 103320 improves AUC. Keeping the model.
Training on augumented user 96604 18/50 current_auc = 0.7004212825713839
User 96604 AUC after training: 0.7002262443438915
User 96604 does not improve AUC. Reverting changes.
Training on augumented user 86168 19/50 current_auc = 0.7004212825713839
User 86168 AUC after training: 0.7009673896083632
User 86168 improves AUC. Keeping the model.
Training on augumented user 3780 20/50 current_auc = 0.7009673896083632
User 3780 AUC after training: 0.700811359026369
User 3780 does not improve AUC. Reverting changes.
Training on augumented user 36271 21/50 current_auc = 0.7009673896083632
User 36271 AUC after training: 0.7009673896083631
User 36271 does not improve AUC. Reverting changes.
Training on augumented user 119303 22/50 current_auc = 0.7009673896083632
User 119303 AUC after training: 0.7010063972538617
User 119303 improves AUC. Keeping the model.
Training on augumented user 92410 23/50 current_auc = 0.7010063972538617
User 92410 AUC after training: 0.7008113590263693
User 92410 does not improve AUC. Reverting changes.
Training on augumented user 108123 24/50 current_auc = 0.7010063972538617
User 108123 AUC after training: 0.7009283819628648
User 108123 does not improve AUC. Reverting changes.
Training on augumented user 85901 25/50 current_auc = 0.7010063972538617
User 85901 AUC after training: 0.7008113590263692
User 85901 does not improve AUC. Reverting changes.
Training on augumented user 101700 26/50 current_auc = 0.7010063972538617
User 101700 AUC after training: 0.7007333437353721
User 101700 does not improve AUC. Reverting changes.
Training on augumented user 61606 27/50 current_auc = 0.7010063972538617
User 61606 AUC after training: 0.7006553284443752
User 61606 does not improve AUC. Reverting changes.
Training on augumented user 39640 28/50 current_auc = 0.7010063972538617
User 39640 AUC after training: 0.7002652519893898
User 39640 does not improve AUC. Reverting changes.
Training on augumented user 102352 29/50 current_auc = 0.7010063972538617
User 102352 AUC after training: 0.6993290684974255
User 102352 does not improve AUC. Reverting changes.
Training on augumented user 22740 30/50 current_auc = 0.7010063972538617
User 22740 AUC after training: 0.7000312061163988
User 22740 does not improve AUC. Reverting changes.
Training on augumented user 69099 31/50 current_auc = 0.7010063972538617
User 69099 AUC after training: 0.7019815883913247
User 69099 improves AUC. Keeping the model.
Training on augumented user 122247 32/50 current_auc = 0.7019815883913247
User 122247 AUC after training: 0.7018255578093306
User 122247 does not improve AUC. Reverting changes.
Training on augumented user 89327 33/50 current_auc = 0.7019815883913247
User 89327 AUC after training: 0.7018255578093305
User 89327 does not improve AUC. Reverting changes.
Training on augumented user 132561 34/50 current_auc = 0.7019815883913247
User 132561 AUC after training: 0.7003042596348884
User 132561 does not improve AUC. Reverting changes.
Training on augumented user 122323 35/50 current_auc = 0.7019815883913247
User 122323 AUC after training: 0.7014354813543454
User 122323 does not improve AUC. Reverting changes.
Training on augumented user 11148 36/50 current_auc = 0.7019815883913247
User 11148 AUC after training: 0.7009673896083631
User 11148 does not improve AUC. Reverting changes.
Training on augumented user 78528 37/50 current_auc = 0.7019815883913247
User 78528 AUC after training: 0.7011234201903574
User 78528 does not improve AUC. Reverting changes.
Training on augumented user 81632 38/50 current_auc = 0.7019815883913247
User 81632 AUC after training: 0.7020596036823218
User 81632 improves AUC. Keeping the model.
Training on augumented user 44341 39/50 current_auc = 0.7020596036823218
User 44341 AUC after training: 0.7012014354813544
User 44341 does not improve AUC. Reverting changes.
Training on augumented user 28086 40/50 current_auc = 0.7020596036823218
User 28086 AUC after training: 0.701942580745826
User 28086 does not improve AUC. Reverting changes.
Training on augumented user 88864 41/50 current_auc = 0.7020596036823218
User 88864 AUC after training: 0.7022156342643159
User 88864 improves AUC. Keeping the model.
Training on augumented user 25984 42/50 current_auc = 0.7022156342643159
User 25984 AUC after training: 0.7019425807458262
User 25984 does not improve AUC. Reverting changes.
Training on augumented user 75741 43/50 current_auc = 0.7022156342643159
User 75741 AUC after training: 0.7024496801373069
User 75741 improves AUC. Keeping the model.
Training on augumented user 39245 44/50 current_auc = 0.7024496801373069
User 39245 AUC after training: 0.7008113590263693
User 39245 does not improve AUC. Reverting changes.
Training on augumented user 138370 45/50 current_auc = 0.7024496801373069
User 138370 AUC after training: 0.7017475425183336
User 138370 does not improve AUC. Reverting changes.
Training on augumented user 37305 46/50 current_auc = 0.7024496801373069
User 37305 AUC after training: 0.7023716648463099
User 37305 does not improve AUC. Reverting changes.
Training on augumented user 132303 47/50 current_auc = 0.7024496801373069
User 132303 AUC after training: 0.7024496801373069
User 132303 does not improve AUC. Reverting changes.
Training on augumented user 85183 48/50 current_auc = 0.7024496801373069
User 85183 AUC after training: 0.702605710719301
User 85183 improves AUC. Keeping the model.
Training on augumented user 110526 49/50 current_auc = 0.702605710719301
User 110526 AUC after training: 0.7019035731003277
User 110526 does not improve AUC. Reverting changes.
[2024-12-02 18:58:37.358967] start test user 45300 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:37.987297] start test user 45300 147/568 recall augumented users by random, augumented_users = [65862, 20144, 27052, 63076, 69444, 35598, 84514, 37013, 15382, 70254, 59701, 26818, 97921, 26759, 19946, 81718, 11683, 9093, 62523, 73945, 23839, 65683, 133847, 56859, 56497, 61765, 50614, 6241, 136268, 106626, 67857, 98844, 23809, 20502, 81226, 124863, 64170, 25899, 43098, 20198, 55330, 25625, 109911, 48033, 105827, 113114, 72146, 67532, 106295, 110730]
[2024-12-02 18:58:38.002052] user = 45300 Cloud 147/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:58:38.008829] user = 45300 Local 147/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:58:38.040494] user = 45300 Local+ 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:58:41.608397] user = 45300 MPDA- 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 65862 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65862 AUC after training: 0.5
User 65862 does not improve AUC. Reverting changes.
Training on augumented user 20144 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20144 AUC after training: 0.5
User 20144 does not improve AUC. Reverting changes.
Training on augumented user 27052 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27052 AUC after training: 0.5
User 27052 does not improve AUC. Reverting changes.
Training on augumented user 63076 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63076 AUC after training: 0.5
User 63076 does not improve AUC. Reverting changes.
Training on augumented user 69444 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69444 AUC after training: 0.5
User 69444 does not improve AUC. Reverting changes.
Training on augumented user 35598 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35598 AUC after training: 0.5
User 35598 does not improve AUC. Reverting changes.
Training on augumented user 84514 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84514 AUC after training: 0.5
User 84514 does not improve AUC. Reverting changes.
Training on augumented user 37013 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37013 AUC after training: 0.5
User 37013 does not improve AUC. Reverting changes.
Training on augumented user 15382 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15382 AUC after training: 0.5
User 15382 does not improve AUC. Reverting changes.
Training on augumented user 70254 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70254 AUC after training: 0.5
User 70254 does not improve AUC. Reverting changes.
Training on augumented user 59701 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59701 AUC after training: 0.5
User 59701 does not improve AUC. Reverting changes.
Training on augumented user 26818 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26818 AUC after training: 0.5
User 26818 does not improve AUC. Reverting changes.
Training on augumented user 97921 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97921 AUC after training: 0.5
User 97921 does not improve AUC. Reverting changes.
Training on augumented user 26759 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26759 AUC after training: 0.5
User 26759 does not improve AUC. Reverting changes.
Training on augumented user 19946 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19946 AUC after training: 0.5
User 19946 does not improve AUC. Reverting changes.
Training on augumented user 81718 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81718 AUC after training: 0.5
User 81718 does not improve AUC. Reverting changes.
Training on augumented user 11683 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11683 AUC after training: 0.5
User 11683 does not improve AUC. Reverting changes.
Training on augumented user 9093 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9093 AUC after training: 0.5
User 9093 does not improve AUC. Reverting changes.
Training on augumented user 62523 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62523 AUC after training: 0.5
User 62523 does not improve AUC. Reverting changes.
Training on augumented user 73945 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73945 AUC after training: 0.5
User 73945 does not improve AUC. Reverting changes.
Training on augumented user 23839 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23839 AUC after training: 0.5
User 23839 does not improve AUC. Reverting changes.
Training on augumented user 65683 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65683 AUC after training: 0.5
User 65683 does not improve AUC. Reverting changes.
Training on augumented user 133847 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133847 AUC after training: 0.5
User 133847 does not improve AUC. Reverting changes.
Training on augumented user 56859 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56859 AUC after training: 0.5
User 56859 does not improve AUC. Reverting changes.
Training on augumented user 56497 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56497 AUC after training: 0.5
User 56497 does not improve AUC. Reverting changes.
Training on augumented user 61765 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61765 AUC after training: 0.5
User 61765 does not improve AUC. Reverting changes.
Training on augumented user 50614 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50614 AUC after training: 0.5
User 50614 does not improve AUC. Reverting changes.
Training on augumented user 6241 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6241 AUC after training: 0.5
User 6241 does not improve AUC. Reverting changes.
Training on augumented user 136268 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136268 AUC after training: 0.5
User 136268 does not improve AUC. Reverting changes.
Training on augumented user 106626 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106626 AUC after training: 0.5
User 106626 does not improve AUC. Reverting changes.
Training on augumented user 67857 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67857 AUC after training: 0.5
User 67857 does not improve AUC. Reverting changes.
Training on augumented user 98844 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98844 AUC after training: 0.5
User 98844 does not improve AUC. Reverting changes.
Training on augumented user 23809 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23809 AUC after training: 0.5
User 23809 does not improve AUC. Reverting changes.
Training on augumented user 20502 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20502 AUC after training: 0.5
User 20502 does not improve AUC. Reverting changes.
Training on augumented user 81226 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81226 AUC after training: 0.5
User 81226 does not improve AUC. Reverting changes.
Training on augumented user 124863 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124863 AUC after training: 0.5
User 124863 does not improve AUC. Reverting changes.
Training on augumented user 64170 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64170 AUC after training: 0.5
User 64170 does not improve AUC. Reverting changes.
Training on augumented user 25899 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25899 AUC after training: 0.5
User 25899 does not improve AUC. Reverting changes.
Training on augumented user 43098 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43098 AUC after training: 0.5
User 43098 does not improve AUC. Reverting changes.
Training on augumented user 20198 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20198 AUC after training: 0.5
User 20198 does not improve AUC. Reverting changes.
Training on augumented user 55330 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55330 AUC after training: 0.5
User 55330 does not improve AUC. Reverting changes.
Training on augumented user 25625 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25625 AUC after training: 0.5
User 25625 does not improve AUC. Reverting changes.
Training on augumented user 109911 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109911 AUC after training: 0.5
User 109911 does not improve AUC. Reverting changes.
Training on augumented user 48033 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48033 AUC after training: 0.5
User 48033 does not improve AUC. Reverting changes.
Training on augumented user 105827 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105827 AUC after training: 0.5
User 105827 does not improve AUC. Reverting changes.
Training on augumented user 113114 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113114 AUC after training: 0.5
User 113114 does not improve AUC. Reverting changes.
Training on augumented user 72146 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72146 AUC after training: 0.5
User 72146 does not improve AUC. Reverting changes.
Training on augumented user 67532 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67532 AUC after training: 0.5
User 67532 does not improve AUC. Reverting changes.
Training on augumented user 106295 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106295 AUC after training: 0.5
User 106295 does not improve AUC. Reverting changes.
Training on augumented user 110730 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110730 AUC after training: 0.5
User 110730 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:11.742366] start test user 45303 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:12.385063] start test user 45303 148/568 recall augumented users by random, augumented_users = [137412, 107428, 93332, 34081, 12957, 101238, 7289, 97592, 38570, 11072, 42451, 121450, 42415, 116792, 118545, 102066, 100741, 26446, 72912, 3597, 90283, 118628, 54123, 78808, 104690, 58219, 131651, 57600, 111646, 131875, 86244, 5542, 60740, 29025, 108036, 14936, 104674, 127377, 29255, 124960, 84293, 38118, 29692, 60385, 4797, 103079, 121405, 101759, 99344, 67601]
[2024-12-02 18:59:12.425672] user = 45303 Cloud 148/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:12.481000] user = 45303 Local 148/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:12.688357] user = 45303 Local+ 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:16.904200] user = 45303 MPDA- 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 137412 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137412 AUC after training: 0.5
User 137412 does not improve AUC. Reverting changes.
Training on augumented user 107428 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107428 AUC after training: 0.5
User 107428 does not improve AUC. Reverting changes.
Training on augumented user 93332 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93332 AUC after training: 0.5
User 93332 does not improve AUC. Reverting changes.
Training on augumented user 34081 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34081 AUC after training: 0.5
User 34081 does not improve AUC. Reverting changes.
Training on augumented user 12957 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12957 AUC after training: 0.5
User 12957 does not improve AUC. Reverting changes.
Training on augumented user 101238 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101238 AUC after training: 0.5
User 101238 does not improve AUC. Reverting changes.
Training on augumented user 7289 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7289 AUC after training: 0.5
User 7289 does not improve AUC. Reverting changes.
Training on augumented user 97592 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97592 AUC after training: 0.5
User 97592 does not improve AUC. Reverting changes.
Training on augumented user 38570 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38570 AUC after training: 0.5
User 38570 does not improve AUC. Reverting changes.
Training on augumented user 11072 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11072 AUC after training: 0.5
User 11072 does not improve AUC. Reverting changes.
Training on augumented user 42451 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42451 AUC after training: 0.5
User 42451 does not improve AUC. Reverting changes.
Training on augumented user 121450 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121450 AUC after training: 0.5
User 121450 does not improve AUC. Reverting changes.
Training on augumented user 42415 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42415 AUC after training: 0.5
User 42415 does not improve AUC. Reverting changes.
Training on augumented user 116792 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116792 AUC after training: 0.5
User 116792 does not improve AUC. Reverting changes.
Training on augumented user 118545 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118545 AUC after training: 0.5
User 118545 does not improve AUC. Reverting changes.
Training on augumented user 102066 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102066 AUC after training: 0.5
User 102066 does not improve AUC. Reverting changes.
Training on augumented user 100741 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100741 AUC after training: 0.5
User 100741 does not improve AUC. Reverting changes.
Training on augumented user 26446 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26446 AUC after training: 0.5
User 26446 does not improve AUC. Reverting changes.
Training on augumented user 72912 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72912 AUC after training: 0.5
User 72912 does not improve AUC. Reverting changes.
Training on augumented user 3597 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3597 AUC after training: 0.5
User 3597 does not improve AUC. Reverting changes.
Training on augumented user 90283 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90283 AUC after training: 0.5
User 90283 does not improve AUC. Reverting changes.
Training on augumented user 118628 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118628 AUC after training: 0.5
User 118628 does not improve AUC. Reverting changes.
Training on augumented user 54123 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54123 AUC after training: 0.5
User 54123 does not improve AUC. Reverting changes.
Training on augumented user 78808 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78808 AUC after training: 0.5
User 78808 does not improve AUC. Reverting changes.
Training on augumented user 104690 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104690 AUC after training: 0.5
User 104690 does not improve AUC. Reverting changes.
Training on augumented user 58219 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58219 AUC after training: 0.5
User 58219 does not improve AUC. Reverting changes.
Training on augumented user 131651 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131651 AUC after training: 0.5
User 131651 does not improve AUC. Reverting changes.
Training on augumented user 57600 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57600 AUC after training: 0.5
User 57600 does not improve AUC. Reverting changes.
Training on augumented user 111646 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111646 AUC after training: 0.5
User 111646 does not improve AUC. Reverting changes.
Training on augumented user 131875 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131875 AUC after training: 0.5
User 131875 does not improve AUC. Reverting changes.
Training on augumented user 86244 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86244 AUC after training: 0.5
User 86244 does not improve AUC. Reverting changes.
Training on augumented user 5542 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5542 AUC after training: 0.5
User 5542 does not improve AUC. Reverting changes.
Training on augumented user 60740 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60740 AUC after training: 0.5
User 60740 does not improve AUC. Reverting changes.
Training on augumented user 29025 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29025 AUC after training: 0.5
User 29025 does not improve AUC. Reverting changes.
Training on augumented user 108036 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108036 AUC after training: 0.5
User 108036 does not improve AUC. Reverting changes.
Training on augumented user 14936 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14936 AUC after training: 0.5
User 14936 does not improve AUC. Reverting changes.
Training on augumented user 104674 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104674 AUC after training: 0.5
User 104674 does not improve AUC. Reverting changes.
Training on augumented user 127377 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127377 AUC after training: 0.5
User 127377 does not improve AUC. Reverting changes.
Training on augumented user 29255 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29255 AUC after training: 0.5
User 29255 does not improve AUC. Reverting changes.
Training on augumented user 124960 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124960 AUC after training: 0.5
User 124960 does not improve AUC. Reverting changes.
Training on augumented user 84293 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84293 AUC after training: 0.5
User 84293 does not improve AUC. Reverting changes.
Training on augumented user 38118 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38118 AUC after training: 0.5
User 38118 does not improve AUC. Reverting changes.
Training on augumented user 29692 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29692 AUC after training: 0.5
User 29692 does not improve AUC. Reverting changes.
Training on augumented user 60385 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60385 AUC after training: 0.5
User 60385 does not improve AUC. Reverting changes.
Training on augumented user 4797 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4797 AUC after training: 0.5
User 4797 does not improve AUC. Reverting changes.
Training on augumented user 103079 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103079 AUC after training: 0.5
User 103079 does not improve AUC. Reverting changes.
Training on augumented user 121405 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121405 AUC after training: 0.5
User 121405 does not improve AUC. Reverting changes.
Training on augumented user 101759 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101759 AUC after training: 0.5
User 101759 does not improve AUC. Reverting changes.
Training on augumented user 99344 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99344 AUC after training: 0.5
User 99344 does not improve AUC. Reverting changes.
Training on augumented user 67601 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67601 AUC after training: 0.5
User 67601 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:44.239200] start test user 45322 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:44.696962] start test user 45322 149/568 recall augumented users by random, augumented_users = [43907, 61117, 22508, 133192, 124001, 8922, 65528, 47897, 20659, 27862, 49899, 73493, 99316, 53604, 109891, 134531, 71241, 49061, 11942, 132791, 102942, 18660, 49948, 11341, 24855, 103666, 69992, 107029, 44276, 35316, 28732, 80054, 91072, 105782, 42535, 108703, 119523, 101609, 73701, 27293, 10723, 41889, 70449, 31051, 18238, 14962, 90067, 101085, 85786, 138351]
[2024-12-02 18:59:44.711976] user = 45322 Cloud 149/568
[2024-12-02 18:59:44.740001] user = 45322 Local 149/568
[2024-12-02 18:59:44.772727] user = 45322 Local+ 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:46.649236] user = 45322 MPDA- 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7893749999999999
Training on augumented user 43907 0/50 current_auc = 0.7893749999999999
User 43907 AUC after training: 0.7893749999999999
User 43907 does not improve AUC. Reverting changes.
Training on augumented user 61117 1/50 current_auc = 0.7893749999999999
User 61117 AUC after training: 0.7893749999999999
User 61117 does not improve AUC. Reverting changes.
Training on augumented user 22508 2/50 current_auc = 0.7893749999999999
User 22508 AUC after training: 0.78875
User 22508 does not improve AUC. Reverting changes.
Training on augumented user 133192 3/50 current_auc = 0.7893749999999999
User 133192 AUC after training: 0.78875
User 133192 does not improve AUC. Reverting changes.
Training on augumented user 124001 4/50 current_auc = 0.7893749999999999
User 124001 AUC after training: 0.7925
User 124001 improves AUC. Keeping the model.
Training on augumented user 8922 5/50 current_auc = 0.7925
User 8922 AUC after training: 0.7925
User 8922 does not improve AUC. Reverting changes.
Training on augumented user 65528 6/50 current_auc = 0.7925
User 65528 AUC after training: 0.7925
User 65528 does not improve AUC. Reverting changes.
Training on augumented user 47897 7/50 current_auc = 0.7925
User 47897 AUC after training: 0.7925
User 47897 does not improve AUC. Reverting changes.
Training on augumented user 20659 8/50 current_auc = 0.7925
User 20659 AUC after training: 0.7925
User 20659 does not improve AUC. Reverting changes.
Training on augumented user 27862 9/50 current_auc = 0.7925
User 27862 AUC after training: 0.79375
User 27862 improves AUC. Keeping the model.
Training on augumented user 49899 10/50 current_auc = 0.79375
User 49899 AUC after training: 0.79375
User 49899 does not improve AUC. Reverting changes.
Training on augumented user 73493 11/50 current_auc = 0.79375
User 73493 AUC after training: 0.79375
User 73493 does not improve AUC. Reverting changes.
Training on augumented user 99316 12/50 current_auc = 0.79375
User 99316 AUC after training: 0.7925
User 99316 does not improve AUC. Reverting changes.
Training on augumented user 53604 13/50 current_auc = 0.79375
User 53604 AUC after training: 0.79375
User 53604 does not improve AUC. Reverting changes.
Training on augumented user 109891 14/50 current_auc = 0.79375
User 109891 AUC after training: 0.7937500000000001
User 109891 improves AUC. Keeping the model.
Training on augumented user 134531 15/50 current_auc = 0.7937500000000001
User 134531 AUC after training: 0.7925
User 134531 does not improve AUC. Reverting changes.
Training on augumented user 71241 16/50 current_auc = 0.7937500000000001
User 71241 AUC after training: 0.79375
User 71241 does not improve AUC. Reverting changes.
Training on augumented user 49061 17/50 current_auc = 0.7937500000000001
User 49061 AUC after training: 0.79375
User 49061 does not improve AUC. Reverting changes.
Training on augumented user 11942 18/50 current_auc = 0.7937500000000001
User 11942 AUC after training: 0.7949999999999999
User 11942 improves AUC. Keeping the model.
Training on augumented user 132791 19/50 current_auc = 0.7949999999999999
User 132791 AUC after training: 0.7925
User 132791 does not improve AUC. Reverting changes.
Training on augumented user 102942 20/50 current_auc = 0.7949999999999999
User 102942 AUC after training: 0.7937500000000001
User 102942 does not improve AUC. Reverting changes.
Training on augumented user 18660 21/50 current_auc = 0.7949999999999999
User 18660 AUC after training: 0.7937500000000001
User 18660 does not improve AUC. Reverting changes.
Training on augumented user 49948 22/50 current_auc = 0.7949999999999999
User 49948 AUC after training: 0.7925
User 49948 does not improve AUC. Reverting changes.
Training on augumented user 11341 23/50 current_auc = 0.7949999999999999
User 11341 AUC after training: 0.7925
User 11341 does not improve AUC. Reverting changes.
Training on augumented user 24855 24/50 current_auc = 0.7949999999999999
User 24855 AUC after training: 0.7925
User 24855 does not improve AUC. Reverting changes.
Training on augumented user 103666 25/50 current_auc = 0.7949999999999999
User 103666 AUC after training: 0.7949999999999999
User 103666 does not improve AUC. Reverting changes.
Training on augumented user 69992 26/50 current_auc = 0.7949999999999999
User 69992 AUC after training: 0.7949999999999999
User 69992 does not improve AUC. Reverting changes.
Training on augumented user 107029 27/50 current_auc = 0.7949999999999999
User 107029 AUC after training: 0.7949999999999999
User 107029 does not improve AUC. Reverting changes.
Training on augumented user 44276 28/50 current_auc = 0.7949999999999999
User 44276 AUC after training: 0.79125
User 44276 does not improve AUC. Reverting changes.
Training on augumented user 35316 29/50 current_auc = 0.7949999999999999
User 35316 AUC after training: 0.7925
User 35316 does not improve AUC. Reverting changes.
Training on augumented user 28732 30/50 current_auc = 0.7949999999999999
User 28732 AUC after training: 0.7925
User 28732 does not improve AUC. Reverting changes.
Training on augumented user 80054 31/50 current_auc = 0.7949999999999999
User 80054 AUC after training: 0.7937500000000001
User 80054 does not improve AUC. Reverting changes.
Training on augumented user 91072 32/50 current_auc = 0.7949999999999999
User 91072 AUC after training: 0.7937500000000001
User 91072 does not improve AUC. Reverting changes.
Training on augumented user 105782 33/50 current_auc = 0.7949999999999999
User 105782 AUC after training: 0.7937500000000001
User 105782 does not improve AUC. Reverting changes.
Training on augumented user 42535 34/50 current_auc = 0.7949999999999999
User 42535 AUC after training: 0.7949999999999999
User 42535 does not improve AUC. Reverting changes.
Training on augumented user 108703 35/50 current_auc = 0.7949999999999999
User 108703 AUC after training: 0.7925
User 108703 does not improve AUC. Reverting changes.
Training on augumented user 119523 36/50 current_auc = 0.7949999999999999
User 119523 AUC after training: 0.7925
User 119523 does not improve AUC. Reverting changes.
Training on augumented user 101609 37/50 current_auc = 0.7949999999999999
User 101609 AUC after training: 0.7937500000000001
User 101609 does not improve AUC. Reverting changes.
Training on augumented user 73701 38/50 current_auc = 0.7949999999999999
User 73701 AUC after training: 0.79375
User 73701 does not improve AUC. Reverting changes.
Training on augumented user 27293 39/50 current_auc = 0.7949999999999999
User 27293 AUC after training: 0.7949999999999999
User 27293 does not improve AUC. Reverting changes.
Training on augumented user 10723 40/50 current_auc = 0.7949999999999999
User 10723 AUC after training: 0.7925
User 10723 does not improve AUC. Reverting changes.
Training on augumented user 41889 41/50 current_auc = 0.7949999999999999
User 41889 AUC after training: 0.79375
User 41889 does not improve AUC. Reverting changes.
Training on augumented user 70449 42/50 current_auc = 0.7949999999999999
User 70449 AUC after training: 0.79375
User 70449 does not improve AUC. Reverting changes.
Training on augumented user 31051 43/50 current_auc = 0.7949999999999999
User 31051 AUC after training: 0.79375
User 31051 does not improve AUC. Reverting changes.
Training on augumented user 18238 44/50 current_auc = 0.7949999999999999
User 18238 AUC after training: 0.7937500000000001
User 18238 does not improve AUC. Reverting changes.
Training on augumented user 14962 45/50 current_auc = 0.7949999999999999
User 14962 AUC after training: 0.79375
User 14962 does not improve AUC. Reverting changes.
Training on augumented user 90067 46/50 current_auc = 0.7949999999999999
User 90067 AUC after training: 0.79375
User 90067 does not improve AUC. Reverting changes.
Training on augumented user 101085 47/50 current_auc = 0.7949999999999999
User 101085 AUC after training: 0.7925
User 101085 does not improve AUC. Reverting changes.
Training on augumented user 85786 48/50 current_auc = 0.7949999999999999
User 85786 AUC after training: 0.79375
User 85786 does not improve AUC. Reverting changes.
Training on augumented user 138351 49/50 current_auc = 0.7949999999999999
User 138351 AUC after training: 0.79375
User 138351 does not improve AUC. Reverting changes.
[2024-12-02 19:00:18.310259] start test user 45346 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:18.732331] start test user 45346 150/568 recall augumented users by random, augumented_users = [105411, 55949, 62171, 30350, 8446, 105218, 4417, 125043, 79414, 26226, 32943, 92048, 116185, 50006, 86413, 28307, 105652, 91681, 72428, 23912, 94548, 5052, 98414, 89250, 39808, 54913, 107560, 18520, 108006, 106553, 115476, 124933, 1044, 34076, 42893, 33441, 13400, 64227, 84271, 64140, 100597, 105614, 121207, 78595, 50980, 21141, 41678, 13189, 114709, 34271]
[2024-12-02 19:00:18.747357] user = 45346 Cloud 150/568
[2024-12-02 19:00:18.767393] user = 45346 Local 150/568
[2024-12-02 19:00:18.788366] user = 45346 Local+ 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:20.477197] user = 45346 MPDA- 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.650735294117647
Training on augumented user 105411 0/50 current_auc = 0.650735294117647
User 105411 AUC after training: 0.6516544117647058
User 105411 improves AUC. Keeping the model.
Training on augumented user 55949 1/50 current_auc = 0.6516544117647058
User 55949 AUC after training: 0.6470588235294117
User 55949 does not improve AUC. Reverting changes.
Training on augumented user 62171 2/50 current_auc = 0.6516544117647058
User 62171 AUC after training: 0.6470588235294117
User 62171 does not improve AUC. Reverting changes.
Training on augumented user 30350 3/50 current_auc = 0.6516544117647058
User 30350 AUC after training: 0.6590073529411764
User 30350 improves AUC. Keeping the model.
Training on augumented user 8446 4/50 current_auc = 0.6590073529411764
User 8446 AUC after training: 0.6590073529411764
User 8446 does not improve AUC. Reverting changes.
Training on augumented user 105218 5/50 current_auc = 0.6590073529411764
User 105218 AUC after training: 0.6608455882352942
User 105218 improves AUC. Keeping the model.
Training on augumented user 4417 6/50 current_auc = 0.6608455882352942
User 4417 AUC after training: 0.6580882352941176
User 4417 does not improve AUC. Reverting changes.
Training on augumented user 125043 7/50 current_auc = 0.6608455882352942
User 125043 AUC after training: 0.6636029411764706
User 125043 improves AUC. Keeping the model.
Training on augumented user 79414 8/50 current_auc = 0.6636029411764706
User 79414 AUC after training: 0.6617647058823529
User 79414 does not improve AUC. Reverting changes.
Training on augumented user 26226 9/50 current_auc = 0.6636029411764706
User 26226 AUC after training: 0.6672794117647058
User 26226 improves AUC. Keeping the model.
Training on augumented user 32943 10/50 current_auc = 0.6672794117647058
User 32943 AUC after training: 0.6617647058823529
User 32943 does not improve AUC. Reverting changes.
Training on augumented user 92048 11/50 current_auc = 0.6672794117647058
User 92048 AUC after training: 0.6672794117647058
User 92048 does not improve AUC. Reverting changes.
Training on augumented user 116185 12/50 current_auc = 0.6672794117647058
User 116185 AUC after training: 0.6654411764705882
User 116185 does not improve AUC. Reverting changes.
Training on augumented user 50006 13/50 current_auc = 0.6672794117647058
User 50006 AUC after training: 0.6617647058823529
User 50006 does not improve AUC. Reverting changes.
Training on augumented user 86413 14/50 current_auc = 0.6672794117647058
User 86413 AUC after training: 0.6672794117647058
User 86413 does not improve AUC. Reverting changes.
Training on augumented user 28307 15/50 current_auc = 0.6672794117647058
User 28307 AUC after training: 0.6672794117647058
User 28307 does not improve AUC. Reverting changes.
Training on augumented user 105652 16/50 current_auc = 0.6672794117647058
User 105652 AUC after training: 0.6672794117647058
User 105652 does not improve AUC. Reverting changes.
Training on augumented user 91681 17/50 current_auc = 0.6672794117647058
User 91681 AUC after training: 0.6645220588235294
User 91681 does not improve AUC. Reverting changes.
Training on augumented user 72428 18/50 current_auc = 0.6672794117647058
User 72428 AUC after training: 0.6672794117647058
User 72428 does not improve AUC. Reverting changes.
Training on augumented user 23912 19/50 current_auc = 0.6672794117647058
User 23912 AUC after training: 0.6636029411764706
User 23912 does not improve AUC. Reverting changes.
Training on augumented user 94548 20/50 current_auc = 0.6672794117647058
User 94548 AUC after training: 0.6672794117647058
User 94548 does not improve AUC. Reverting changes.
Training on augumented user 5052 21/50 current_auc = 0.6672794117647058
User 5052 AUC after training: 0.6672794117647058
User 5052 does not improve AUC. Reverting changes.
Training on augumented user 98414 22/50 current_auc = 0.6672794117647058
User 98414 AUC after training: 0.6681985294117647
User 98414 improves AUC. Keeping the model.
Training on augumented user 89250 23/50 current_auc = 0.6681985294117647
User 89250 AUC after training: 0.6654411764705883
User 89250 does not improve AUC. Reverting changes.
Training on augumented user 39808 24/50 current_auc = 0.6681985294117647
User 39808 AUC after training: 0.6636029411764706
User 39808 does not improve AUC. Reverting changes.
Training on augumented user 54913 25/50 current_auc = 0.6681985294117647
User 54913 AUC after training: 0.666360294117647
User 54913 does not improve AUC. Reverting changes.
Training on augumented user 107560 26/50 current_auc = 0.6681985294117647
User 107560 AUC after training: 0.6672794117647058
User 107560 does not improve AUC. Reverting changes.
Training on augumented user 18520 27/50 current_auc = 0.6681985294117647
User 18520 AUC after training: 0.6654411764705883
User 18520 does not improve AUC. Reverting changes.
Training on augumented user 108006 28/50 current_auc = 0.6681985294117647
User 108006 AUC after training: 0.6681985294117647
User 108006 does not improve AUC. Reverting changes.
Training on augumented user 106553 29/50 current_auc = 0.6681985294117647
User 106553 AUC after training: 0.666360294117647
User 106553 does not improve AUC. Reverting changes.
Training on augumented user 115476 30/50 current_auc = 0.6681985294117647
User 115476 AUC after training: 0.666360294117647
User 115476 does not improve AUC. Reverting changes.
Training on augumented user 124933 31/50 current_auc = 0.6681985294117647
User 124933 AUC after training: 0.6681985294117647
User 124933 does not improve AUC. Reverting changes.
Training on augumented user 1044 32/50 current_auc = 0.6681985294117647
User 1044 AUC after training: 0.6681985294117647
User 1044 does not improve AUC. Reverting changes.
Training on augumented user 34076 33/50 current_auc = 0.6681985294117647
User 34076 AUC after training: 0.6672794117647058
User 34076 does not improve AUC. Reverting changes.
Training on augumented user 42893 34/50 current_auc = 0.6681985294117647
User 42893 AUC after training: 0.6681985294117647
User 42893 does not improve AUC. Reverting changes.
Training on augumented user 33441 35/50 current_auc = 0.6681985294117647
User 33441 AUC after training: 0.6626838235294118
User 33441 does not improve AUC. Reverting changes.
Training on augumented user 13400 36/50 current_auc = 0.6681985294117647
User 13400 AUC after training: 0.666360294117647
User 13400 does not improve AUC. Reverting changes.
Training on augumented user 64227 37/50 current_auc = 0.6681985294117647
User 64227 AUC after training: 0.6672794117647058
User 64227 does not improve AUC. Reverting changes.
Training on augumented user 84271 38/50 current_auc = 0.6681985294117647
User 84271 AUC after training: 0.6654411764705883
User 84271 does not improve AUC. Reverting changes.
Training on augumented user 64140 39/50 current_auc = 0.6681985294117647
User 64140 AUC after training: 0.6681985294117647
User 64140 does not improve AUC. Reverting changes.
Training on augumented user 100597 40/50 current_auc = 0.6681985294117647
User 100597 AUC after training: 0.6654411764705883
User 100597 does not improve AUC. Reverting changes.
Training on augumented user 105614 41/50 current_auc = 0.6681985294117647
User 105614 AUC after training: 0.6709558823529411
User 105614 improves AUC. Keeping the model.
Training on augumented user 121207 42/50 current_auc = 0.6709558823529411
User 121207 AUC after training: 0.6709558823529411
User 121207 does not improve AUC. Reverting changes.
Training on augumented user 78595 43/50 current_auc = 0.6709558823529411
User 78595 AUC after training: 0.6709558823529411
User 78595 does not improve AUC. Reverting changes.
Training on augumented user 50980 44/50 current_auc = 0.6709558823529411
User 50980 AUC after training: 0.6672794117647058
User 50980 does not improve AUC. Reverting changes.
Training on augumented user 21141 45/50 current_auc = 0.6709558823529411
User 21141 AUC after training: 0.6654411764705882
User 21141 does not improve AUC. Reverting changes.
Training on augumented user 41678 46/50 current_auc = 0.6709558823529411
User 41678 AUC after training: 0.6691176470588236
User 41678 does not improve AUC. Reverting changes.
Training on augumented user 13189 47/50 current_auc = 0.6709558823529411
User 13189 AUC after training: 0.6746323529411764
User 13189 improves AUC. Keeping the model.
Training on augumented user 114709 48/50 current_auc = 0.6746323529411764
User 114709 AUC after training: 0.6727941176470588
User 114709 does not improve AUC. Reverting changes.
Training on augumented user 34271 49/50 current_auc = 0.6746323529411764
User 34271 AUC after training: 0.6654411764705883
User 34271 does not improve AUC. Reverting changes.
[2024-12-02 19:00:47.546781] start test user 45461 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:48.204609] start test user 45461 151/568 recall augumented users by random, augumented_users = [27583, 9075, 128874, 95156, 21716, 128376, 133309, 91054, 105483, 20858, 76636, 60572, 133187, 26004, 19700, 19634, 52235, 136865, 25817, 22996, 7267, 34201, 21701, 871, 37910, 25687, 134053, 22844, 58879, 136885, 112463, 122611, 81422, 85091, 87123, 9388, 39637, 56894, 77367, 74060, 24997, 114905, 129313, 131832, 119509, 59775, 39113, 98494, 40568, 76458]
[2024-12-02 19:00:48.233621] user = 45461 Cloud 151/568
[2024-12-02 19:00:48.260962] user = 45461 Local 151/568
[2024-12-02 19:00:48.453460] user = 45461 Local+ 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:51.285852] user = 45461 MPDA- 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5822598454177401
Training on augumented user 27583 0/50 current_auc = 0.5822598454177401
User 27583 AUC after training: 0.5826278984173721
User 27583 improves AUC. Keeping the model.
Training on augumented user 9075 1/50 current_auc = 0.5826278984173721
User 9075 AUC after training: 0.5832106490001226
User 9075 improves AUC. Keeping the model.
Training on augumented user 128874 2/50 current_auc = 0.5832106490001226
User 128874 AUC after training: 0.583456017666544
User 128874 improves AUC. Keeping the model.
Training on augumented user 95156 3/50 current_auc = 0.583456017666544
User 95156 AUC after training: 0.583456017666544
User 95156 does not improve AUC. Reverting changes.
Training on augumented user 21716 4/50 current_auc = 0.583456017666544
User 21716 AUC after training: 0.5840080971659919
User 21716 improves AUC. Keeping the model.
Training on augumented user 128376 5/50 current_auc = 0.5840080971659919
User 128376 AUC after training: 0.5844374923322292
User 128376 improves AUC. Keeping the model.
Training on augumented user 133309 6/50 current_auc = 0.5844374923322292
User 133309 AUC after training: 0.5822905165010428
User 133309 does not improve AUC. Reverting changes.
Training on augumented user 91054 7/50 current_auc = 0.5844374923322292
User 91054 AUC after training: 0.5839774260826893
User 91054 does not improve AUC. Reverting changes.
Training on augumented user 105483 8/50 current_auc = 0.5844374923322292
User 105483 AUC after training: 0.5843761501656239
User 105483 does not improve AUC. Reverting changes.
Training on augumented user 20858 9/50 current_auc = 0.5844374923322292
User 20858 AUC after training: 0.5844681634155319
User 20858 improves AUC. Keeping the model.
Training on augumented user 76636 10/50 current_auc = 0.5844681634155319
User 76636 AUC after training: 0.5837627284995706
User 76636 does not improve AUC. Reverting changes.
Training on augumented user 60572 11/50 current_auc = 0.5844681634155319
User 60572 AUC after training: 0.5847442031652558
User 60572 improves AUC. Keeping the model.
Training on augumented user 133187 12/50 current_auc = 0.5847442031652558
User 133187 AUC after training: 0.5852349404980983
User 133187 improves AUC. Keeping the model.
Training on augumented user 26004 13/50 current_auc = 0.5852349404980983
User 26004 AUC after training: 0.5860323886639676
User 26004 improves AUC. Keeping the model.
Training on augumented user 19700 14/50 current_auc = 0.5860323886639676
User 19700 AUC after training: 0.585725677830941
User 19700 does not improve AUC. Reverting changes.
Training on augumented user 19634 15/50 current_auc = 0.5860323886639676
User 19634 AUC after training: 0.5854189669979144
User 19634 does not improve AUC. Reverting changes.
Training on augumented user 52235 16/50 current_auc = 0.5860323886639676
User 52235 AUC after training: 0.5856029934977304
User 52235 does not improve AUC. Reverting changes.
Training on augumented user 136865 17/50 current_auc = 0.5860323886639676
User 136865 AUC after training: 0.585725677830941
User 136865 does not improve AUC. Reverting changes.
Training on augumented user 25817 18/50 current_auc = 0.5860323886639676
User 25817 AUC after training: 0.5851122561648878
User 25817 does not improve AUC. Reverting changes.
Training on augumented user 22996 19/50 current_auc = 0.5860323886639676
User 22996 AUC after training: 0.5856643356643356
User 22996 does not improve AUC. Reverting changes.
Training on augumented user 7267 20/50 current_auc = 0.5860323886639676
User 7267 AUC after training: 0.5840694393325971
User 7267 does not improve AUC. Reverting changes.
Training on augumented user 34201 21/50 current_auc = 0.5860323886639676
User 34201 AUC after training: 0.5851735983314931
User 34201 does not improve AUC. Reverting changes.
Training on augumented user 21701 22/50 current_auc = 0.5860323886639676
User 21701 AUC after training: 0.5863390994969943
User 21701 improves AUC. Keeping the model.
Training on augumented user 871 23/50 current_auc = 0.5863390994969943
User 871 AUC after training: 0.5860937308305729
User 871 does not improve AUC. Reverting changes.
Training on augumented user 37910 24/50 current_auc = 0.5863390994969943
User 37910 AUC after training: 0.585909704330757
User 37910 does not improve AUC. Reverting changes.
Training on augumented user 25687 25/50 current_auc = 0.5863390994969943
User 25687 AUC after training: 0.5856029934977303
User 25687 does not improve AUC. Reverting changes.
Training on augumented user 134053 26/50 current_auc = 0.5863390994969943
User 134053 AUC after training: 0.585725677830941
User 134053 does not improve AUC. Reverting changes.
Training on augumented user 22844 27/50 current_auc = 0.5863390994969943
User 22844 AUC after training: 0.5861550729971783
User 22844 does not improve AUC. Reverting changes.
Training on augumented user 58879 28/50 current_auc = 0.5863390994969943
User 58879 AUC after training: 0.5862164151637836
User 58879 does not improve AUC. Reverting changes.
Training on augumented user 136885 29/50 current_auc = 0.5863390994969943
User 136885 AUC after training: 0.5854803091645198
User 136885 does not improve AUC. Reverting changes.
Training on augumented user 112463 30/50 current_auc = 0.5863390994969943
User 112463 AUC after training: 0.585725677830941
User 112463 does not improve AUC. Reverting changes.
Training on augumented user 122611 31/50 current_auc = 0.5863390994969943
User 122611 AUC after training: 0.5856643356643357
User 122611 does not improve AUC. Reverting changes.
Training on augumented user 81422 32/50 current_auc = 0.5863390994969943
User 81422 AUC after training: 0.585725677830941
User 81422 does not improve AUC. Reverting changes.
Training on augumented user 85091 33/50 current_auc = 0.5863390994969943
User 85091 AUC after training: 0.585725677830941
User 85091 does not improve AUC. Reverting changes.
Training on augumented user 87123 34/50 current_auc = 0.5863390994969943
User 87123 AUC after training: 0.5858483621641517
User 87123 does not improve AUC. Reverting changes.
Training on augumented user 9388 35/50 current_auc = 0.5863390994969943
User 9388 AUC after training: 0.5860323886639676
User 9388 does not improve AUC. Reverting changes.
Training on augumented user 39637 36/50 current_auc = 0.5863390994969943
User 39637 AUC after training: 0.5859710464973622
User 39637 does not improve AUC. Reverting changes.
Training on augumented user 56894 37/50 current_auc = 0.5863390994969943
User 56894 AUC after training: 0.5856643356643356
User 56894 does not improve AUC. Reverting changes.
Training on augumented user 77367 38/50 current_auc = 0.5863390994969943
User 77367 AUC after training: 0.5853576248313092
User 77367 does not improve AUC. Reverting changes.
Training on augumented user 74060 39/50 current_auc = 0.5863390994969943
User 74060 AUC after training: 0.5844068212489265
User 74060 does not improve AUC. Reverting changes.
Training on augumented user 24997 40/50 current_auc = 0.5863390994969943
User 24997 AUC after training: 0.585725677830941
User 24997 does not improve AUC. Reverting changes.
Training on augumented user 114905 41/50 current_auc = 0.5863390994969943
User 114905 AUC after training: 0.5859710464973623
User 114905 does not improve AUC. Reverting changes.
Training on augumented user 129313 42/50 current_auc = 0.5863390994969943
User 129313 AUC after training: 0.5862777573303889
User 129313 does not improve AUC. Reverting changes.
Training on augumented user 131832 43/50 current_auc = 0.5863390994969943
User 131832 AUC after training: 0.5862164151637835
User 131832 does not improve AUC. Reverting changes.
Training on augumented user 119509 44/50 current_auc = 0.5863390994969943
User 119509 AUC after training: 0.5861550729971783
User 119509 does not improve AUC. Reverting changes.
Training on augumented user 59775 45/50 current_auc = 0.5863390994969943
User 59775 AUC after training: 0.5856643356643356
User 59775 does not improve AUC. Reverting changes.
Training on augumented user 39113 46/50 current_auc = 0.5863390994969943
User 39113 AUC after training: 0.5856029934977304
User 39113 does not improve AUC. Reverting changes.
Training on augumented user 98494 47/50 current_auc = 0.5863390994969943
User 98494 AUC after training: 0.5861244019138756
User 98494 does not improve AUC. Reverting changes.
Training on augumented user 40568 48/50 current_auc = 0.5863390994969943
User 40568 AUC after training: 0.5865844681634155
User 40568 improves AUC. Keeping the model.
Training on augumented user 76458 49/50 current_auc = 0.5865844681634155
User 76458 AUC after training: 0.585909704330757
User 76458 does not improve AUC. Reverting changes.
[2024-12-02 19:01:21.818132] start test user 45483 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:22.585577] start test user 45483 152/568 recall augumented users by random, augumented_users = [21649, 12023, 94610, 49031, 63870, 105772, 71204, 113028, 81148, 114079, 56232, 79600, 69942, 120166, 116883, 9587, 107854, 36172, 93342, 134015, 57697, 28759, 25631, 132056, 59257, 133415, 59192, 2225, 135367, 18059, 40976, 84461, 17097, 10953, 47169, 104144, 9, 14803, 12648, 3541, 14065, 112196, 94143, 47496, 11841, 131345, 62477, 138458, 44220, 81309]
[2024-12-02 19:01:22.601387] user = 45483 Cloud 152/568
[2024-12-02 19:01:22.614300] user = 45483 Local 152/568
[2024-12-02 19:01:22.663889] user = 45483 Local+ 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:24.321347] user = 45483 MPDA- 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.819838056680162
Training on augumented user 21649 0/50 current_auc = 0.819838056680162
User 21649 AUC after training: 0.819838056680162
User 21649 does not improve AUC. Reverting changes.
Training on augumented user 12023 1/50 current_auc = 0.819838056680162
User 12023 AUC after training: 0.8178137651821863
User 12023 does not improve AUC. Reverting changes.
Training on augumented user 94610 2/50 current_auc = 0.819838056680162
User 94610 AUC after training: 0.8218623481781376
User 94610 improves AUC. Keeping the model.
Training on augumented user 49031 3/50 current_auc = 0.8218623481781376
User 49031 AUC after training: 0.8238866396761133
User 49031 improves AUC. Keeping the model.
Training on augumented user 63870 4/50 current_auc = 0.8238866396761133
User 63870 AUC after training: 0.8238866396761134
User 63870 improves AUC. Keeping the model.
Training on augumented user 105772 5/50 current_auc = 0.8238866396761134
User 105772 AUC after training: 0.8259109311740891
User 105772 improves AUC. Keeping the model.
Training on augumented user 71204 6/50 current_auc = 0.8259109311740891
User 71204 AUC after training: 0.8238866396761133
User 71204 does not improve AUC. Reverting changes.
Training on augumented user 113028 7/50 current_auc = 0.8259109311740891
User 113028 AUC after training: 0.8259109311740891
User 113028 does not improve AUC. Reverting changes.
Training on augumented user 81148 8/50 current_auc = 0.8259109311740891
User 81148 AUC after training: 0.8259109311740891
User 81148 does not improve AUC. Reverting changes.
Training on augumented user 114079 9/50 current_auc = 0.8259109311740891
User 114079 AUC after training: 0.8259109311740891
User 114079 does not improve AUC. Reverting changes.
Training on augumented user 56232 10/50 current_auc = 0.8259109311740891
User 56232 AUC after training: 0.8218623481781376
User 56232 does not improve AUC. Reverting changes.
Training on augumented user 79600 11/50 current_auc = 0.8259109311740891
User 79600 AUC after training: 0.8238866396761134
User 79600 does not improve AUC. Reverting changes.
Training on augumented user 69942 12/50 current_auc = 0.8259109311740891
User 69942 AUC after training: 0.8259109311740891
User 69942 does not improve AUC. Reverting changes.
Training on augumented user 120166 13/50 current_auc = 0.8259109311740891
User 120166 AUC after training: 0.8218623481781376
User 120166 does not improve AUC. Reverting changes.
Training on augumented user 116883 14/50 current_auc = 0.8259109311740891
User 116883 AUC after training: 0.8279352226720648
User 116883 improves AUC. Keeping the model.
Training on augumented user 9587 15/50 current_auc = 0.8279352226720648
User 9587 AUC after training: 0.8279352226720648
User 9587 does not improve AUC. Reverting changes.
Training on augumented user 107854 16/50 current_auc = 0.8279352226720648
User 107854 AUC after training: 0.8238866396761133
User 107854 does not improve AUC. Reverting changes.
Training on augumented user 36172 17/50 current_auc = 0.8279352226720648
User 36172 AUC after training: 0.8279352226720648
User 36172 does not improve AUC. Reverting changes.
Training on augumented user 93342 18/50 current_auc = 0.8279352226720648
User 93342 AUC after training: 0.8259109311740891
User 93342 does not improve AUC. Reverting changes.
Training on augumented user 134015 19/50 current_auc = 0.8279352226720648
User 134015 AUC after training: 0.8178137651821863
User 134015 does not improve AUC. Reverting changes.
Training on augumented user 57697 20/50 current_auc = 0.8279352226720648
User 57697 AUC after training: 0.8279352226720648
User 57697 does not improve AUC. Reverting changes.
Training on augumented user 28759 21/50 current_auc = 0.8279352226720648
User 28759 AUC after training: 0.8259109311740891
User 28759 does not improve AUC. Reverting changes.
Training on augumented user 25631 22/50 current_auc = 0.8279352226720648
User 25631 AUC after training: 0.8279352226720648
User 25631 does not improve AUC. Reverting changes.
Training on augumented user 132056 23/50 current_auc = 0.8279352226720648
User 132056 AUC after training: 0.8238866396761133
User 132056 does not improve AUC. Reverting changes.
Training on augumented user 59257 24/50 current_auc = 0.8279352226720648
User 59257 AUC after training: 0.8238866396761133
User 59257 does not improve AUC. Reverting changes.
Training on augumented user 133415 25/50 current_auc = 0.8279352226720648
User 133415 AUC after training: 0.8218623481781376
User 133415 does not improve AUC. Reverting changes.
Training on augumented user 59192 26/50 current_auc = 0.8279352226720648
User 59192 AUC after training: 0.8279352226720648
User 59192 does not improve AUC. Reverting changes.
Training on augumented user 2225 27/50 current_auc = 0.8279352226720648
User 2225 AUC after training: 0.8238866396761133
User 2225 does not improve AUC. Reverting changes.
Training on augumented user 135367 28/50 current_auc = 0.8279352226720648
User 135367 AUC after training: 0.8238866396761134
User 135367 does not improve AUC. Reverting changes.
Training on augumented user 18059 29/50 current_auc = 0.8279352226720648
User 18059 AUC after training: 0.8218623481781376
User 18059 does not improve AUC. Reverting changes.
Training on augumented user 40976 30/50 current_auc = 0.8279352226720648
User 40976 AUC after training: 0.8157894736842105
User 40976 does not improve AUC. Reverting changes.
Training on augumented user 84461 31/50 current_auc = 0.8279352226720648
User 84461 AUC after training: 0.8259109311740891
User 84461 does not improve AUC. Reverting changes.
Training on augumented user 17097 32/50 current_auc = 0.8279352226720648
User 17097 AUC after training: 0.8259109311740891
User 17097 does not improve AUC. Reverting changes.
Training on augumented user 10953 33/50 current_auc = 0.8279352226720648
User 10953 AUC after training: 0.8259109311740891
User 10953 does not improve AUC. Reverting changes.
Training on augumented user 47169 34/50 current_auc = 0.8279352226720648
User 47169 AUC after training: 0.8259109311740891
User 47169 does not improve AUC. Reverting changes.
Training on augumented user 104144 35/50 current_auc = 0.8279352226720648
User 104144 AUC after training: 0.8238866396761133
User 104144 does not improve AUC. Reverting changes.
Training on augumented user 9 36/50 current_auc = 0.8279352226720648
User 9 AUC after training: 0.8279352226720648
User 9 does not improve AUC. Reverting changes.
Training on augumented user 14803 37/50 current_auc = 0.8279352226720648
User 14803 AUC after training: 0.8259109311740891
User 14803 does not improve AUC. Reverting changes.
Training on augumented user 12648 38/50 current_auc = 0.8279352226720648
User 12648 AUC after training: 0.8259109311740891
User 12648 does not improve AUC. Reverting changes.
Training on augumented user 3541 39/50 current_auc = 0.8279352226720648
User 3541 AUC after training: 0.8238866396761133
User 3541 does not improve AUC. Reverting changes.
Training on augumented user 14065 40/50 current_auc = 0.8279352226720648
User 14065 AUC after training: 0.8279352226720648
User 14065 does not improve AUC. Reverting changes.
Training on augumented user 112196 41/50 current_auc = 0.8279352226720648
User 112196 AUC after training: 0.8279352226720648
User 112196 does not improve AUC. Reverting changes.
Training on augumented user 94143 42/50 current_auc = 0.8279352226720648
User 94143 AUC after training: 0.8238866396761133
User 94143 does not improve AUC. Reverting changes.
Training on augumented user 47496 43/50 current_auc = 0.8279352226720648
User 47496 AUC after training: 0.8259109311740891
User 47496 does not improve AUC. Reverting changes.
Training on augumented user 11841 44/50 current_auc = 0.8279352226720648
User 11841 AUC after training: 0.8259109311740891
User 11841 does not improve AUC. Reverting changes.
Training on augumented user 131345 45/50 current_auc = 0.8279352226720648
User 131345 AUC after training: 0.819838056680162
User 131345 does not improve AUC. Reverting changes.
Training on augumented user 62477 46/50 current_auc = 0.8279352226720648
User 62477 AUC after training: 0.8279352226720648
User 62477 does not improve AUC. Reverting changes.
Training on augumented user 138458 47/50 current_auc = 0.8279352226720648
User 138458 AUC after training: 0.8279352226720648
User 138458 does not improve AUC. Reverting changes.
Training on augumented user 44220 48/50 current_auc = 0.8279352226720648
User 44220 AUC after training: 0.8238866396761134
User 44220 does not improve AUC. Reverting changes.
Training on augumented user 81309 49/50 current_auc = 0.8279352226720648
User 81309 AUC after training: 0.8259109311740891
User 81309 does not improve AUC. Reverting changes.
[2024-12-02 19:01:53.502263] start test user 45499 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:53.917372] start test user 45499 153/568 recall augumented users by random, augumented_users = [36531, 133695, 119348, 46277, 130520, 23010, 84914, 55131, 103493, 76175, 13743, 35012, 110628, 110813, 39932, 120262, 137355, 57397, 92721, 37111, 84910, 25946, 16542, 10020, 60630, 13903, 63751, 712, 77448, 54592, 122864, 112826, 122505, 3457, 11830, 116107, 134628, 51891, 122799, 18363, 30657, 95067, 20516, 44641, 114164, 116044, 135001, 46364, 138482, 116135]
[2024-12-02 19:01:53.931974] user = 45499 Cloud 153/568
[2024-12-02 19:01:53.988329] user = 45499 Local 153/568
[2024-12-02 19:01:54.062169] user = 45499 Local+ 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:55.501490] user = 45499 MPDA- 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6122239207211007
Training on augumented user 36531 0/50 current_auc = 0.6122239207211007
User 36531 AUC after training: 0.6113673501660428
User 36531 does not improve AUC. Reverting changes.
Training on augumented user 133695 1/50 current_auc = 0.6122239207211007
User 133695 AUC after training: 0.6121316746613252
User 133695 does not improve AUC. Reverting changes.
Training on augumented user 119348 2/50 current_auc = 0.6122239207211007
User 119348 AUC after training: 0.6124215908491909
User 119348 improves AUC. Keeping the model.
Training on augumented user 46277 3/50 current_auc = 0.6124215908491909
User 46277 AUC after training: 0.6122898107637974
User 46277 does not improve AUC. Reverting changes.
Training on augumented user 130520 4/50 current_auc = 0.6124215908491909
User 130520 AUC after training: 0.6126060829687417
User 130520 improves AUC. Keeping the model.
Training on augumented user 23010 5/50 current_auc = 0.6126060829687417
User 23010 AUC after training: 0.6117758684307628
User 23010 does not improve AUC. Reverting changes.
Training on augumented user 84914 6/50 current_auc = 0.6126060829687417
User 84914 AUC after training: 0.6121712086869433
User 84914 does not improve AUC. Reverting changes.
Training on augumented user 55131 7/50 current_auc = 0.6126060829687417
User 55131 AUC after training: 0.610958831901323
User 55131 does not improve AUC. Reverting changes.
Training on augumented user 103493 8/50 current_auc = 0.6126060829687417
User 103493 AUC after training: 0.6125138369089662
User 103493 does not improve AUC. Reverting changes.
Training on augumented user 76175 9/50 current_auc = 0.6126060829687417
User 76175 AUC after training: 0.611709978388066
User 76175 does not improve AUC. Reverting changes.
Training on augumented user 13743 10/50 current_auc = 0.6126060829687417
User 13743 AUC after training: 0.6118549364819988
User 13743 does not improve AUC. Reverting changes.
Training on augumented user 35012 11/50 current_auc = 0.6126060829687417
User 35012 AUC after training: 0.6126983290285173
User 35012 improves AUC. Keeping the model.
Training on augumented user 110628 12/50 current_auc = 0.6126983290285173
User 110628 AUC after training: 0.611749512413684
User 110628 does not improve AUC. Reverting changes.
Training on augumented user 110813 13/50 current_auc = 0.6126983290285173
User 110813 AUC after training: 0.6136998576775078
User 110813 improves AUC. Keeping the model.
Training on augumented user 39932 14/50 current_auc = 0.6136998576775078
User 39932 AUC after training: 0.6142533340361604
User 39932 improves AUC. Keeping the model.
Training on augumented user 120262 15/50 current_auc = 0.6142533340361604
User 120262 AUC after training: 0.6142796900532392
User 120262 improves AUC. Keeping the model.
Training on augumented user 137355 16/50 current_auc = 0.6142796900532392
User 137355 AUC after training: 0.6135680775921144
User 137355 does not improve AUC. Reverting changes.
Training on augumented user 57397 17/50 current_auc = 0.6142796900532392
User 57397 AUC after training: 0.6141347319593063
User 57397 does not improve AUC. Reverting changes.
Training on augumented user 92721 18/50 current_auc = 0.6142796900532392
User 92721 AUC after training: 0.613897527805598
User 92721 does not improve AUC. Reverting changes.
Training on augumented user 37111 19/50 current_auc = 0.6142796900532392
User 37111 AUC after training: 0.614240156027621
User 37111 does not improve AUC. Reverting changes.
Training on augumented user 84910 20/50 current_auc = 0.6142796900532392
User 84910 AUC after training: 0.6124084128406515
User 84910 does not improve AUC. Reverting changes.
Training on augumented user 25946 21/50 current_auc = 0.6142796900532392
User 25946 AUC after training: 0.6108006957988509
User 25946 does not improve AUC. Reverting changes.
Training on augumented user 16542 22/50 current_auc = 0.6142796900532392
User 16542 AUC after training: 0.6129091771651468
User 16542 does not improve AUC. Reverting changes.
Training on augumented user 10020 23/50 current_auc = 0.6142796900532392
User 10020 AUC after training: 0.6143851141215539
User 10020 improves AUC. Keeping the model.
Training on augumented user 60630 24/50 current_auc = 0.6143851141215539
User 60630 AUC after training: 0.613937061831216
User 60630 does not improve AUC. Reverting changes.
Training on augumented user 13903 25/50 current_auc = 0.6143851141215539
User 13903 AUC after training: 0.6145037161984082
User 13903 improves AUC. Keeping the model.
Training on augumented user 63751 26/50 current_auc = 0.6145037161984082
User 63751 AUC after training: 0.6147145643350378
User 63751 improves AUC. Keeping the model.
Training on augumented user 712 27/50 current_auc = 0.6147145643350378
User 712 AUC after training: 0.6151757946339149
User 712 improves AUC. Keeping the model.
Training on augumented user 77448 28/50 current_auc = 0.6151757946339149
User 77448 AUC after training: 0.6138843497970586
User 77448 does not improve AUC. Reverting changes.
Training on augumented user 54592 29/50 current_auc = 0.6151757946339149
User 54592 AUC after training: 0.6148858784460492
User 54592 does not improve AUC. Reverting changes.
Training on augumented user 122864 30/50 current_auc = 0.6151757946339149
User 122864 AUC after training: 0.6148858784460492
User 122864 does not improve AUC. Reverting changes.
Training on augumented user 112826 31/50 current_auc = 0.6151757946339149
User 112826 AUC after training: 0.6149385904802066
User 112826 does not improve AUC. Reverting changes.
Training on augumented user 122505 32/50 current_auc = 0.6151757946339149
User 122505 AUC after training: 0.6150967265826788
User 122505 does not improve AUC. Reverting changes.
Training on augumented user 3457 33/50 current_auc = 0.6151757946339149
User 3457 AUC after training: 0.6117231563966053
User 3457 does not improve AUC. Reverting changes.
Training on augumented user 11830 34/50 current_auc = 0.6151757946339149
User 11830 AUC after training: 0.6142269780190819
User 11830 does not improve AUC. Reverting changes.
Training on augumented user 116107 35/50 current_auc = 0.6151757946339149
User 116107 AUC after training: 0.6145168942069474
User 116107 does not improve AUC. Reverting changes.
Training on augumented user 134628 36/50 current_auc = 0.6151757946339149
User 134628 AUC after training: 0.6148595224289706
User 134628 does not improve AUC. Reverting changes.
Training on augumented user 51891 37/50 current_auc = 0.6151757946339149
User 51891 AUC after training: 0.6147145643350378
User 51891 does not improve AUC. Reverting changes.
Training on augumented user 122799 38/50 current_auc = 0.6151757946339149
User 122799 AUC after training: 0.6157951610352643
User 122799 improves AUC. Keeping the model.
Training on augumented user 18363 39/50 current_auc = 0.6157951610352643
User 18363 AUC after training: 0.6154657108217806
User 18363 does not improve AUC. Reverting changes.
Training on augumented user 30657 40/50 current_auc = 0.6157951610352643
User 30657 AUC after training: 0.6155447788730167
User 30657 does not improve AUC. Reverting changes.
Training on augumented user 95067 41/50 current_auc = 0.6157951610352643
User 95067 AUC after training: 0.6133045174213273
User 95067 does not improve AUC. Reverting changes.
Training on augumented user 20516 42/50 current_auc = 0.6157951610352643
User 20516 AUC after training: 0.614161087976385
User 20516 does not improve AUC. Reverting changes.
Training on augumented user 44641 43/50 current_auc = 0.6157951610352643
User 44641 AUC after training: 0.6156633809498708
User 44641 does not improve AUC. Reverting changes.
Training on augumented user 114164 44/50 current_auc = 0.6157951610352643
User 114164 AUC after training: 0.6149649464972853
User 114164 does not improve AUC. Reverting changes.
Training on augumented user 116044 45/50 current_auc = 0.6157951610352643
User 116044 AUC after training: 0.6148068103948132
User 116044 does not improve AUC. Reverting changes.
Training on augumented user 135001 46/50 current_auc = 0.6157951610352643
User 135001 AUC after training: 0.6166649095988614
User 135001 improves AUC. Keeping the model.
Training on augumented user 46364 47/50 current_auc = 0.6166649095988614
User 46364 AUC after training: 0.616836223709873
User 46364 improves AUC. Keeping the model.
Training on augumented user 138482 48/50 current_auc = 0.616836223709873
User 138482 AUC after training: 0.6154657108217806
User 138482 does not improve AUC. Reverting changes.
Training on augumented user 116135 49/50 current_auc = 0.616836223709873
User 116135 AUC after training: 0.6158610510779612
User 116135 does not improve AUC. Reverting changes.
[2024-12-02 19:02:28.907988] start test user 45619 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:29.812001] start test user 45619 154/568 recall augumented users by random, augumented_users = [123964, 74597, 106843, 80121, 55845, 94433, 104777, 68692, 71360, 90953, 101153, 90622, 92699, 134409, 65755, 73655, 74892, 106965, 100034, 67006, 123627, 36380, 75469, 11422, 58775, 100338, 35814, 112698, 3719, 68436, 82558, 41413, 92725, 128278, 88094, 41606, 73840, 112900, 103603, 72514, 40850, 86823, 1223, 14598, 92130, 56724, 95862, 55422, 94201, 54296]
[2024-12-02 19:02:29.831010] user = 45619 Cloud 154/568
[2024-12-02 19:02:29.845789] user = 45619 Local 154/568
[2024-12-02 19:02:30.326945] user = 45619 Local+ 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:33.705517] user = 45619 MPDA- 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7711442786069652
Training on augumented user 123964 0/50 current_auc = 0.7711442786069652
User 123964 AUC after training: 0.7744610281923715
User 123964 improves AUC. Keeping the model.
Training on augumented user 74597 1/50 current_auc = 0.7744610281923715
User 74597 AUC after training: 0.7744610281923715
User 74597 does not improve AUC. Reverting changes.
Training on augumented user 106843 2/50 current_auc = 0.7744610281923715
User 106843 AUC after training: 0.7744610281923715
User 106843 does not improve AUC. Reverting changes.
Training on augumented user 80121 3/50 current_auc = 0.7744610281923715
User 80121 AUC after training: 0.7740464344941957
User 80121 does not improve AUC. Reverting changes.
Training on augumented user 55845 4/50 current_auc = 0.7744610281923715
User 55845 AUC after training: 0.7748756218905473
User 55845 improves AUC. Keeping the model.
Training on augumented user 94433 5/50 current_auc = 0.7748756218905473
User 94433 AUC after training: 0.7748756218905473
User 94433 does not improve AUC. Reverting changes.
Training on augumented user 104777 6/50 current_auc = 0.7748756218905473
User 104777 AUC after training: 0.7740464344941956
User 104777 does not improve AUC. Reverting changes.
Training on augumented user 68692 7/50 current_auc = 0.7748756218905473
User 68692 AUC after training: 0.7744610281923715
User 68692 does not improve AUC. Reverting changes.
Training on augumented user 71360 8/50 current_auc = 0.7748756218905473
User 71360 AUC after training: 0.7728026533996684
User 71360 does not improve AUC. Reverting changes.
Training on augumented user 90953 9/50 current_auc = 0.7748756218905473
User 90953 AUC after training: 0.7744610281923715
User 90953 does not improve AUC. Reverting changes.
Training on augumented user 101153 10/50 current_auc = 0.7748756218905473
User 101153 AUC after training: 0.7744610281923715
User 101153 does not improve AUC. Reverting changes.
Training on augumented user 90622 11/50 current_auc = 0.7748756218905473
User 90622 AUC after training: 0.7728026533996684
User 90622 does not improve AUC. Reverting changes.
Training on augumented user 92699 12/50 current_auc = 0.7748756218905473
User 92699 AUC after training: 0.7748756218905473
User 92699 does not improve AUC. Reverting changes.
Training on augumented user 134409 13/50 current_auc = 0.7748756218905473
User 134409 AUC after training: 0.7719734660033167
User 134409 does not improve AUC. Reverting changes.
Training on augumented user 65755 14/50 current_auc = 0.7748756218905473
User 65755 AUC after training: 0.7744610281923715
User 65755 does not improve AUC. Reverting changes.
Training on augumented user 73655 15/50 current_auc = 0.7748756218905473
User 73655 AUC after training: 0.7732172470978442
User 73655 does not improve AUC. Reverting changes.
Training on augumented user 74892 16/50 current_auc = 0.7748756218905473
User 74892 AUC after training: 0.7740464344941957
User 74892 does not improve AUC. Reverting changes.
Training on augumented user 106965 17/50 current_auc = 0.7748756218905473
User 106965 AUC after training: 0.7732172470978441
User 106965 does not improve AUC. Reverting changes.
Training on augumented user 100034 18/50 current_auc = 0.7748756218905473
User 100034 AUC after training: 0.7732172470978441
User 100034 does not improve AUC. Reverting changes.
Training on augumented user 67006 19/50 current_auc = 0.7748756218905473
User 67006 AUC after training: 0.7744610281923715
User 67006 does not improve AUC. Reverting changes.
Training on augumented user 123627 20/50 current_auc = 0.7748756218905473
User 123627 AUC after training: 0.7744610281923715
User 123627 does not improve AUC. Reverting changes.
Training on augumented user 36380 21/50 current_auc = 0.7748756218905473
User 36380 AUC after training: 0.7740464344941956
User 36380 does not improve AUC. Reverting changes.
Training on augumented user 75469 22/50 current_auc = 0.7748756218905473
User 75469 AUC after training: 0.775290215588723
User 75469 improves AUC. Keeping the model.
Training on augumented user 11422 23/50 current_auc = 0.775290215588723
User 11422 AUC after training: 0.7757048092868989
User 11422 improves AUC. Keeping the model.
Training on augumented user 58775 24/50 current_auc = 0.7757048092868989
User 58775 AUC after training: 0.7757048092868989
User 58775 does not improve AUC. Reverting changes.
Training on augumented user 100338 25/50 current_auc = 0.7757048092868989
User 100338 AUC after training: 0.7757048092868989
User 100338 does not improve AUC. Reverting changes.
Training on augumented user 35814 26/50 current_auc = 0.7757048092868989
User 35814 AUC after training: 0.7757048092868989
User 35814 does not improve AUC. Reverting changes.
Training on augumented user 112698 27/50 current_auc = 0.7757048092868989
User 112698 AUC after training: 0.7744610281923715
User 112698 does not improve AUC. Reverting changes.
Training on augumented user 3719 28/50 current_auc = 0.7757048092868989
User 3719 AUC after training: 0.7740464344941956
User 3719 does not improve AUC. Reverting changes.
Training on augumented user 68436 29/50 current_auc = 0.7757048092868989
User 68436 AUC after training: 0.775290215588723
User 68436 does not improve AUC. Reverting changes.
Training on augumented user 82558 30/50 current_auc = 0.7757048092868989
User 82558 AUC after training: 0.775290215588723
User 82558 does not improve AUC. Reverting changes.
Training on augumented user 41413 31/50 current_auc = 0.7757048092868989
User 41413 AUC after training: 0.7757048092868989
User 41413 does not improve AUC. Reverting changes.
Training on augumented user 92725 32/50 current_auc = 0.7757048092868989
User 92725 AUC after training: 0.775290215588723
User 92725 does not improve AUC. Reverting changes.
Training on augumented user 128278 33/50 current_auc = 0.7757048092868989
User 128278 AUC after training: 0.775290215588723
User 128278 does not improve AUC. Reverting changes.
Training on augumented user 88094 34/50 current_auc = 0.7757048092868989
User 88094 AUC after training: 0.775290215588723
User 88094 does not improve AUC. Reverting changes.
Training on augumented user 41606 35/50 current_auc = 0.7757048092868989
User 41606 AUC after training: 0.7748756218905473
User 41606 does not improve AUC. Reverting changes.
Training on augumented user 73840 36/50 current_auc = 0.7757048092868989
User 73840 AUC after training: 0.7752902155887231
User 73840 does not improve AUC. Reverting changes.
Training on augumented user 112900 37/50 current_auc = 0.7757048092868989
User 112900 AUC after training: 0.775290215588723
User 112900 does not improve AUC. Reverting changes.
Training on augumented user 103603 38/50 current_auc = 0.7757048092868989
User 103603 AUC after training: 0.7761194029850746
User 103603 improves AUC. Keeping the model.
Training on augumented user 72514 39/50 current_auc = 0.7761194029850746
User 72514 AUC after training: 0.775290215588723
User 72514 does not improve AUC. Reverting changes.
Training on augumented user 40850 40/50 current_auc = 0.7761194029850746
User 40850 AUC after training: 0.7736318407960199
User 40850 does not improve AUC. Reverting changes.
Training on augumented user 86823 41/50 current_auc = 0.7761194029850746
User 86823 AUC after training: 0.7740464344941957
User 86823 does not improve AUC. Reverting changes.
Training on augumented user 1223 42/50 current_auc = 0.7761194029850746
User 1223 AUC after training: 0.7769485903814262
User 1223 improves AUC. Keeping the model.
Training on augumented user 14598 43/50 current_auc = 0.7769485903814262
User 14598 AUC after training: 0.7761194029850745
User 14598 does not improve AUC. Reverting changes.
Training on augumented user 92130 44/50 current_auc = 0.7769485903814262
User 92130 AUC after training: 0.7765339966832504
User 92130 does not improve AUC. Reverting changes.
Training on augumented user 56724 45/50 current_auc = 0.7769485903814262
User 56724 AUC after training: 0.7777777777777778
User 56724 improves AUC. Keeping the model.
Training on augumented user 95862 46/50 current_auc = 0.7777777777777778
User 95862 AUC after training: 0.7765339966832504
User 95862 does not improve AUC. Reverting changes.
Training on augumented user 55422 47/50 current_auc = 0.7777777777777778
User 55422 AUC after training: 0.777363184079602
User 55422 does not improve AUC. Reverting changes.
Training on augumented user 94201 48/50 current_auc = 0.7777777777777778
User 94201 AUC after training: 0.7769485903814262
User 94201 does not improve AUC. Reverting changes.
Training on augumented user 54296 49/50 current_auc = 0.7777777777777778
User 54296 AUC after training: 0.7773631840796019
User 54296 does not improve AUC. Reverting changes.
[2024-12-02 19:03:03.105196] start test user 45666 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:03.540499] start test user 45666 155/568 recall augumented users by random, augumented_users = [80925, 4236, 106553, 127659, 112188, 115603, 87467, 125036, 96322, 55230, 115451, 96129, 38685, 60124, 58695, 4361, 31274, 14139, 22384, 117317, 31874, 57796, 129228, 3398, 62694, 104775, 91818, 121464, 10193, 27676, 114610, 35465, 64030, 118089, 70298, 112338, 3672, 56903, 44242, 84299, 79821, 42868, 45777, 20958, 133930, 127182, 868, 52271, 92266, 39042]
[2024-12-02 19:03:03.555203] user = 45666 Cloud 155/568
[2024-12-02 19:03:03.593608] user = 45666 Local 155/568
[2024-12-02 19:03:03.705951] user = 45666 Local+ 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:06.687363] user = 45666 MPDA- 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.42785714285714294
Training on augumented user 80925 0/50 current_auc = 0.42785714285714294
User 80925 AUC after training: 0.4282142857142857
User 80925 improves AUC. Keeping the model.
Training on augumented user 4236 1/50 current_auc = 0.4282142857142857
User 4236 AUC after training: 0.4285714285714286
User 4236 improves AUC. Keeping the model.
Training on augumented user 106553 2/50 current_auc = 0.4285714285714286
User 106553 AUC after training: 0.42928571428571427
User 106553 improves AUC. Keeping the model.
Training on augumented user 127659 3/50 current_auc = 0.42928571428571427
User 127659 AUC after training: 0.4301785714285714
User 127659 improves AUC. Keeping the model.
Training on augumented user 112188 4/50 current_auc = 0.4301785714285714
User 112188 AUC after training: 0.4298214285714286
User 112188 does not improve AUC. Reverting changes.
Training on augumented user 115603 5/50 current_auc = 0.4301785714285714
User 115603 AUC after training: 0.42999999999999994
User 115603 does not improve AUC. Reverting changes.
Training on augumented user 87467 6/50 current_auc = 0.4301785714285714
User 87467 AUC after training: 0.4285714285714286
User 87467 does not improve AUC. Reverting changes.
Training on augumented user 125036 7/50 current_auc = 0.4301785714285714
User 125036 AUC after training: 0.42821428571428566
User 125036 does not improve AUC. Reverting changes.
Training on augumented user 96322 8/50 current_auc = 0.4301785714285714
User 96322 AUC after training: 0.42928571428571427
User 96322 does not improve AUC. Reverting changes.
Training on augumented user 55230 9/50 current_auc = 0.4301785714285714
User 55230 AUC after training: 0.4301785714285714
User 55230 does not improve AUC. Reverting changes.
Training on augumented user 115451 10/50 current_auc = 0.4301785714285714
User 115451 AUC after training: 0.4303571428571429
User 115451 improves AUC. Keeping the model.
Training on augumented user 96129 11/50 current_auc = 0.4303571428571429
User 96129 AUC after training: 0.4294642857142857
User 96129 does not improve AUC. Reverting changes.
Training on augumented user 38685 12/50 current_auc = 0.4303571428571429
User 38685 AUC after training: 0.4301785714285714
User 38685 does not improve AUC. Reverting changes.
Training on augumented user 60124 13/50 current_auc = 0.4303571428571429
User 60124 AUC after training: 0.4292857142857143
User 60124 does not improve AUC. Reverting changes.
Training on augumented user 58695 14/50 current_auc = 0.4303571428571429
User 58695 AUC after training: 0.4280357142857143
User 58695 does not improve AUC. Reverting changes.
Training on augumented user 4361 15/50 current_auc = 0.4303571428571429
User 4361 AUC after training: 0.4298214285714286
User 4361 does not improve AUC. Reverting changes.
Training on augumented user 31274 16/50 current_auc = 0.4303571428571429
User 31274 AUC after training: 0.42892857142857144
User 31274 does not improve AUC. Reverting changes.
Training on augumented user 14139 17/50 current_auc = 0.4303571428571429
User 14139 AUC after training: 0.42660714285714285
User 14139 does not improve AUC. Reverting changes.
Training on augumented user 22384 18/50 current_auc = 0.4303571428571429
User 22384 AUC after training: 0.4291071428571429
User 22384 does not improve AUC. Reverting changes.
Training on augumented user 117317 19/50 current_auc = 0.4303571428571429
User 117317 AUC after training: 0.4301785714285715
User 117317 does not improve AUC. Reverting changes.
Training on augumented user 31874 20/50 current_auc = 0.4303571428571429
User 31874 AUC after training: 0.4292857142857143
User 31874 does not improve AUC. Reverting changes.
Training on augumented user 57796 21/50 current_auc = 0.4303571428571429
User 57796 AUC after training: 0.43160714285714297
User 57796 improves AUC. Keeping the model.
Training on augumented user 129228 22/50 current_auc = 0.43160714285714297
User 129228 AUC after training: 0.4307142857142857
User 129228 does not improve AUC. Reverting changes.
Training on augumented user 3398 23/50 current_auc = 0.43160714285714297
User 3398 AUC after training: 0.43178571428571433
User 3398 improves AUC. Keeping the model.
Training on augumented user 62694 24/50 current_auc = 0.43178571428571433
User 62694 AUC after training: 0.43142857142857144
User 62694 does not improve AUC. Reverting changes.
Training on augumented user 104775 25/50 current_auc = 0.43178571428571433
User 104775 AUC after training: 0.43178571428571433
User 104775 does not improve AUC. Reverting changes.
Training on augumented user 91818 26/50 current_auc = 0.43178571428571433
User 91818 AUC after training: 0.4332142857142858
User 91818 improves AUC. Keeping the model.
Training on augumented user 121464 27/50 current_auc = 0.4332142857142858
User 121464 AUC after training: 0.4321428571428572
User 121464 does not improve AUC. Reverting changes.
Training on augumented user 10193 28/50 current_auc = 0.4332142857142858
User 10193 AUC after training: 0.43214285714285716
User 10193 does not improve AUC. Reverting changes.
Training on augumented user 27676 29/50 current_auc = 0.4332142857142858
User 27676 AUC after training: 0.43214285714285716
User 27676 does not improve AUC. Reverting changes.
Training on augumented user 114610 30/50 current_auc = 0.4332142857142858
User 114610 AUC after training: 0.4307142857142857
User 114610 does not improve AUC. Reverting changes.
Training on augumented user 35465 31/50 current_auc = 0.4332142857142858
User 35465 AUC after training: 0.4298214285714286
User 35465 does not improve AUC. Reverting changes.
Training on augumented user 64030 32/50 current_auc = 0.4332142857142858
User 64030 AUC after training: 0.43214285714285716
User 64030 does not improve AUC. Reverting changes.
Training on augumented user 118089 33/50 current_auc = 0.4332142857142858
User 118089 AUC after training: 0.4335714285714286
User 118089 improves AUC. Keeping the model.
Training on augumented user 70298 34/50 current_auc = 0.4335714285714286
User 70298 AUC after training: 0.43107142857142855
User 70298 does not improve AUC. Reverting changes.
Training on augumented user 112338 35/50 current_auc = 0.4335714285714286
User 112338 AUC after training: 0.43285714285714294
User 112338 does not improve AUC. Reverting changes.
Training on augumented user 3672 36/50 current_auc = 0.4335714285714286
User 3672 AUC after training: 0.43214285714285716
User 3672 does not improve AUC. Reverting changes.
Training on augumented user 56903 37/50 current_auc = 0.4335714285714286
User 56903 AUC after training: 0.4325
User 56903 does not improve AUC. Reverting changes.
Training on augumented user 44242 38/50 current_auc = 0.4335714285714286
User 44242 AUC after training: 0.4335714285714286
User 44242 does not improve AUC. Reverting changes.
Training on augumented user 84299 39/50 current_auc = 0.4335714285714286
User 84299 AUC after training: 0.4335714285714286
User 84299 does not improve AUC. Reverting changes.
Training on augumented user 79821 40/50 current_auc = 0.4335714285714286
User 79821 AUC after training: 0.43125
User 79821 does not improve AUC. Reverting changes.
Training on augumented user 42868 41/50 current_auc = 0.4335714285714286
User 42868 AUC after training: 0.43285714285714294
User 42868 does not improve AUC. Reverting changes.
Training on augumented user 45777 42/50 current_auc = 0.4335714285714286
User 45777 AUC after training: 0.4332142857142858
User 45777 does not improve AUC. Reverting changes.
Training on augumented user 20958 43/50 current_auc = 0.4335714285714286
User 20958 AUC after training: 0.43285714285714294
User 20958 does not improve AUC. Reverting changes.
Training on augumented user 133930 44/50 current_auc = 0.4335714285714286
User 133930 AUC after training: 0.4314285714285714
User 133930 does not improve AUC. Reverting changes.
Training on augumented user 127182 45/50 current_auc = 0.4335714285714286
User 127182 AUC after training: 0.4332142857142857
User 127182 does not improve AUC. Reverting changes.
Training on augumented user 868 46/50 current_auc = 0.4335714285714286
User 868 AUC after training: 0.43107142857142855
User 868 does not improve AUC. Reverting changes.
Training on augumented user 52271 47/50 current_auc = 0.4335714285714286
User 52271 AUC after training: 0.43214285714285716
User 52271 does not improve AUC. Reverting changes.
Training on augumented user 92266 48/50 current_auc = 0.4335714285714286
User 92266 AUC after training: 0.4292857142857144
User 92266 does not improve AUC. Reverting changes.
Training on augumented user 39042 49/50 current_auc = 0.4335714285714286
User 39042 AUC after training: 0.4308928571428572
User 39042 does not improve AUC. Reverting changes.
[2024-12-02 19:03:34.160989] start test user 45681 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:34.591552] start test user 45681 156/568 recall augumented users by random, augumented_users = [105858, 87345, 113549, 87169, 131737, 21062, 23776, 91450, 113887, 59367, 65895, 12942, 98062, 57342, 48992, 23166, 96004, 118183, 84380, 119614, 103668, 9133, 96829, 78349, 2649, 34251, 18562, 45728, 52921, 14149, 19916, 109845, 61946, 23492, 123653, 12595, 97192, 68107, 92033, 10858, 80456, 70549, 98265, 61422, 3591, 110018, 44502, 85701, 13527, 129603]
[2024-12-02 19:03:34.606005] user = 45681 Cloud 156/568
[2024-12-02 19:03:34.615775] user = 45681 Local 156/568
[2024-12-02 19:03:34.667793] user = 45681 Local+ 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:37.149851] user = 45681 MPDA- 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6363636363636364
Training on augumented user 105858 0/50 current_auc = 0.6363636363636364
User 105858 AUC after training: 0.6363636363636364
User 105858 does not improve AUC. Reverting changes.
Training on augumented user 87345 1/50 current_auc = 0.6363636363636364
User 87345 AUC after training: 0.638888888888889
User 87345 improves AUC. Keeping the model.
Training on augumented user 113549 2/50 current_auc = 0.638888888888889
User 113549 AUC after training: 0.638888888888889
User 113549 does not improve AUC. Reverting changes.
Training on augumented user 87169 3/50 current_auc = 0.638888888888889
User 87169 AUC after training: 0.638888888888889
User 87169 does not improve AUC. Reverting changes.
Training on augumented user 131737 4/50 current_auc = 0.638888888888889
User 131737 AUC after training: 0.6363636363636364
User 131737 does not improve AUC. Reverting changes.
Training on augumented user 21062 5/50 current_auc = 0.638888888888889
User 21062 AUC after training: 0.638888888888889
User 21062 does not improve AUC. Reverting changes.
Training on augumented user 23776 6/50 current_auc = 0.638888888888889
User 23776 AUC after training: 0.6363636363636364
User 23776 does not improve AUC. Reverting changes.
Training on augumented user 91450 7/50 current_auc = 0.638888888888889
User 91450 AUC after training: 0.6363636363636364
User 91450 does not improve AUC. Reverting changes.
Training on augumented user 113887 8/50 current_auc = 0.638888888888889
User 113887 AUC after training: 0.638888888888889
User 113887 does not improve AUC. Reverting changes.
Training on augumented user 59367 9/50 current_auc = 0.638888888888889
User 59367 AUC after training: 0.6363636363636364
User 59367 does not improve AUC. Reverting changes.
Training on augumented user 65895 10/50 current_auc = 0.638888888888889
User 65895 AUC after training: 0.638888888888889
User 65895 does not improve AUC. Reverting changes.
Training on augumented user 12942 11/50 current_auc = 0.638888888888889
User 12942 AUC after training: 0.638888888888889
User 12942 does not improve AUC. Reverting changes.
Training on augumented user 98062 12/50 current_auc = 0.638888888888889
User 98062 AUC after training: 0.638888888888889
User 98062 does not improve AUC. Reverting changes.
Training on augumented user 57342 13/50 current_auc = 0.638888888888889
User 57342 AUC after training: 0.638888888888889
User 57342 does not improve AUC. Reverting changes.
Training on augumented user 48992 14/50 current_auc = 0.638888888888889
User 48992 AUC after training: 0.638888888888889
User 48992 does not improve AUC. Reverting changes.
Training on augumented user 23166 15/50 current_auc = 0.638888888888889
User 23166 AUC after training: 0.6363636363636364
User 23166 does not improve AUC. Reverting changes.
Training on augumented user 96004 16/50 current_auc = 0.638888888888889
User 96004 AUC after training: 0.638888888888889
User 96004 does not improve AUC. Reverting changes.
Training on augumented user 118183 17/50 current_auc = 0.638888888888889
User 118183 AUC after training: 0.6363636363636364
User 118183 does not improve AUC. Reverting changes.
Training on augumented user 84380 18/50 current_auc = 0.638888888888889
User 84380 AUC after training: 0.6388888888888888
User 84380 does not improve AUC. Reverting changes.
Training on augumented user 119614 19/50 current_auc = 0.638888888888889
User 119614 AUC after training: 0.6414141414141414
User 119614 improves AUC. Keeping the model.
Training on augumented user 103668 20/50 current_auc = 0.6414141414141414
User 103668 AUC after training: 0.6388888888888888
User 103668 does not improve AUC. Reverting changes.
Training on augumented user 9133 21/50 current_auc = 0.6414141414141414
User 9133 AUC after training: 0.6414141414141414
User 9133 does not improve AUC. Reverting changes.
Training on augumented user 96829 22/50 current_auc = 0.6414141414141414
User 96829 AUC after training: 0.6388888888888888
User 96829 does not improve AUC. Reverting changes.
Training on augumented user 78349 23/50 current_auc = 0.6414141414141414
User 78349 AUC after training: 0.6414141414141414
User 78349 does not improve AUC. Reverting changes.
Training on augumented user 2649 24/50 current_auc = 0.6414141414141414
User 2649 AUC after training: 0.6363636363636364
User 2649 does not improve AUC. Reverting changes.
Training on augumented user 34251 25/50 current_auc = 0.6414141414141414
User 34251 AUC after training: 0.6414141414141414
User 34251 does not improve AUC. Reverting changes.
Training on augumented user 18562 26/50 current_auc = 0.6414141414141414
User 18562 AUC after training: 0.6363636363636364
User 18562 does not improve AUC. Reverting changes.
Training on augumented user 45728 27/50 current_auc = 0.6414141414141414
User 45728 AUC after training: 0.6363636363636364
User 45728 does not improve AUC. Reverting changes.
Training on augumented user 52921 28/50 current_auc = 0.6414141414141414
User 52921 AUC after training: 0.6388888888888888
User 52921 does not improve AUC. Reverting changes.
Training on augumented user 14149 29/50 current_auc = 0.6414141414141414
User 14149 AUC after training: 0.6414141414141414
User 14149 does not improve AUC. Reverting changes.
Training on augumented user 19916 30/50 current_auc = 0.6414141414141414
User 19916 AUC after training: 0.6414141414141414
User 19916 does not improve AUC. Reverting changes.
Training on augumented user 109845 31/50 current_auc = 0.6414141414141414
User 109845 AUC after training: 0.6414141414141414
User 109845 does not improve AUC. Reverting changes.
Training on augumented user 61946 32/50 current_auc = 0.6414141414141414
User 61946 AUC after training: 0.6414141414141414
User 61946 does not improve AUC. Reverting changes.
Training on augumented user 23492 33/50 current_auc = 0.6414141414141414
User 23492 AUC after training: 0.6414141414141414
User 23492 does not improve AUC. Reverting changes.
Training on augumented user 123653 34/50 current_auc = 0.6414141414141414
User 123653 AUC after training: 0.6414141414141414
User 123653 does not improve AUC. Reverting changes.
Training on augumented user 12595 35/50 current_auc = 0.6414141414141414
User 12595 AUC after training: 0.6414141414141414
User 12595 does not improve AUC. Reverting changes.
Training on augumented user 97192 36/50 current_auc = 0.6414141414141414
User 97192 AUC after training: 0.6363636363636364
User 97192 does not improve AUC. Reverting changes.
Training on augumented user 68107 37/50 current_auc = 0.6414141414141414
User 68107 AUC after training: 0.638888888888889
User 68107 does not improve AUC. Reverting changes.
Training on augumented user 92033 38/50 current_auc = 0.6414141414141414
User 92033 AUC after training: 0.6414141414141414
User 92033 does not improve AUC. Reverting changes.
Training on augumented user 10858 39/50 current_auc = 0.6414141414141414
User 10858 AUC after training: 0.6414141414141414
User 10858 does not improve AUC. Reverting changes.
Training on augumented user 80456 40/50 current_auc = 0.6414141414141414
User 80456 AUC after training: 0.6414141414141414
User 80456 does not improve AUC. Reverting changes.
Training on augumented user 70549 41/50 current_auc = 0.6414141414141414
User 70549 AUC after training: 0.6414141414141414
User 70549 does not improve AUC. Reverting changes.
Training on augumented user 98265 42/50 current_auc = 0.6414141414141414
User 98265 AUC after training: 0.6414141414141414
User 98265 does not improve AUC. Reverting changes.
Training on augumented user 61422 43/50 current_auc = 0.6414141414141414
User 61422 AUC after training: 0.6414141414141414
User 61422 does not improve AUC. Reverting changes.
Training on augumented user 3591 44/50 current_auc = 0.6414141414141414
User 3591 AUC after training: 0.6388888888888888
User 3591 does not improve AUC. Reverting changes.
Training on augumented user 110018 45/50 current_auc = 0.6414141414141414
User 110018 AUC after training: 0.6414141414141414
User 110018 does not improve AUC. Reverting changes.
Training on augumented user 44502 46/50 current_auc = 0.6414141414141414
User 44502 AUC after training: 0.6363636363636364
User 44502 does not improve AUC. Reverting changes.
Training on augumented user 85701 47/50 current_auc = 0.6414141414141414
User 85701 AUC after training: 0.6388888888888888
User 85701 does not improve AUC. Reverting changes.
Training on augumented user 13527 48/50 current_auc = 0.6414141414141414
User 13527 AUC after training: 0.6363636363636364
User 13527 does not improve AUC. Reverting changes.
Training on augumented user 129603 49/50 current_auc = 0.6414141414141414
User 129603 AUC after training: 0.6388888888888888
User 129603 does not improve AUC. Reverting changes.
[2024-12-02 19:04:05.598947] start test user 45769 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:06.013705] start test user 45769 157/568 recall augumented users by random, augumented_users = [105492, 5437, 92913, 22630, 35921, 125589, 23414, 25578, 83074, 133758, 40086, 39307, 132877, 39355, 135225, 79407, 56926, 90226, 67577, 15887, 86055, 32447, 43786, 125071, 91105, 42015, 11816, 59632, 3310, 47791, 7698, 106940, 61036, 107705, 122133, 57095, 111149, 50007, 23192, 27092, 126171, 66465, 37156, 97620, 123305, 44348, 6797, 126747, 123610, 95107]
[2024-12-02 19:04:06.028299] user = 45769 Cloud 157/568
[2024-12-02 19:04:06.038548] user = 45769 Local 157/568
[2024-12-02 19:04:06.056930] user = 45769 Local+ 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:07.384250] user = 45769 MPDA- 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 105492 0/50 current_auc = 0.0
User 105492 AUC after training: 0.0
User 105492 does not improve AUC. Reverting changes.
Training on augumented user 5437 1/50 current_auc = 0.0
User 5437 AUC after training: 0.0
User 5437 does not improve AUC. Reverting changes.
Training on augumented user 92913 2/50 current_auc = 0.0
User 92913 AUC after training: 0.0
User 92913 does not improve AUC. Reverting changes.
Training on augumented user 22630 3/50 current_auc = 0.0
User 22630 AUC after training: 0.0
User 22630 does not improve AUC. Reverting changes.
Training on augumented user 35921 4/50 current_auc = 0.0
User 35921 AUC after training: 0.0
User 35921 does not improve AUC. Reverting changes.
Training on augumented user 125589 5/50 current_auc = 0.0
User 125589 AUC after training: 0.0
User 125589 does not improve AUC. Reverting changes.
Training on augumented user 23414 6/50 current_auc = 0.0
User 23414 AUC after training: 0.0
User 23414 does not improve AUC. Reverting changes.
Training on augumented user 25578 7/50 current_auc = 0.0
User 25578 AUC after training: 0.0
User 25578 does not improve AUC. Reverting changes.
Training on augumented user 83074 8/50 current_auc = 0.0
User 83074 AUC after training: 0.0
User 83074 does not improve AUC. Reverting changes.
Training on augumented user 133758 9/50 current_auc = 0.0
User 133758 AUC after training: 0.0
User 133758 does not improve AUC. Reverting changes.
Training on augumented user 40086 10/50 current_auc = 0.0
User 40086 AUC after training: 0.0
User 40086 does not improve AUC. Reverting changes.
Training on augumented user 39307 11/50 current_auc = 0.0
User 39307 AUC after training: 0.0
User 39307 does not improve AUC. Reverting changes.
Training on augumented user 132877 12/50 current_auc = 0.0
User 132877 AUC after training: 0.0
User 132877 does not improve AUC. Reverting changes.
Training on augumented user 39355 13/50 current_auc = 0.0
User 39355 AUC after training: 0.0
User 39355 does not improve AUC. Reverting changes.
Training on augumented user 135225 14/50 current_auc = 0.0
User 135225 AUC after training: 0.0
User 135225 does not improve AUC. Reverting changes.
Training on augumented user 79407 15/50 current_auc = 0.0
User 79407 AUC after training: 0.0
User 79407 does not improve AUC. Reverting changes.
Training on augumented user 56926 16/50 current_auc = 0.0
User 56926 AUC after training: 0.0
User 56926 does not improve AUC. Reverting changes.
Training on augumented user 90226 17/50 current_auc = 0.0
User 90226 AUC after training: 0.0
User 90226 does not improve AUC. Reverting changes.
Training on augumented user 67577 18/50 current_auc = 0.0
User 67577 AUC after training: 0.0
User 67577 does not improve AUC. Reverting changes.
Training on augumented user 15887 19/50 current_auc = 0.0
User 15887 AUC after training: 0.0
User 15887 does not improve AUC. Reverting changes.
Training on augumented user 86055 20/50 current_auc = 0.0
User 86055 AUC after training: 0.0
User 86055 does not improve AUC. Reverting changes.
Training on augumented user 32447 21/50 current_auc = 0.0
User 32447 AUC after training: 0.0
User 32447 does not improve AUC. Reverting changes.
Training on augumented user 43786 22/50 current_auc = 0.0
User 43786 AUC after training: 0.0
User 43786 does not improve AUC. Reverting changes.
Training on augumented user 125071 23/50 current_auc = 0.0
User 125071 AUC after training: 0.0
User 125071 does not improve AUC. Reverting changes.
Training on augumented user 91105 24/50 current_auc = 0.0
User 91105 AUC after training: 0.0
User 91105 does not improve AUC. Reverting changes.
Training on augumented user 42015 25/50 current_auc = 0.0
User 42015 AUC after training: 0.0
User 42015 does not improve AUC. Reverting changes.
Training on augumented user 11816 26/50 current_auc = 0.0
User 11816 AUC after training: 0.0
User 11816 does not improve AUC. Reverting changes.
Training on augumented user 59632 27/50 current_auc = 0.0
User 59632 AUC after training: 0.0
User 59632 does not improve AUC. Reverting changes.
Training on augumented user 3310 28/50 current_auc = 0.0
User 3310 AUC after training: 0.0
User 3310 does not improve AUC. Reverting changes.
Training on augumented user 47791 29/50 current_auc = 0.0
User 47791 AUC after training: 0.0
User 47791 does not improve AUC. Reverting changes.
Training on augumented user 7698 30/50 current_auc = 0.0
User 7698 AUC after training: 0.0
User 7698 does not improve AUC. Reverting changes.
Training on augumented user 106940 31/50 current_auc = 0.0
User 106940 AUC after training: 0.0
User 106940 does not improve AUC. Reverting changes.
Training on augumented user 61036 32/50 current_auc = 0.0
User 61036 AUC after training: 0.0
User 61036 does not improve AUC. Reverting changes.
Training on augumented user 107705 33/50 current_auc = 0.0
User 107705 AUC after training: 0.0
User 107705 does not improve AUC. Reverting changes.
Training on augumented user 122133 34/50 current_auc = 0.0
User 122133 AUC after training: 0.0
User 122133 does not improve AUC. Reverting changes.
Training on augumented user 57095 35/50 current_auc = 0.0
User 57095 AUC after training: 0.0
User 57095 does not improve AUC. Reverting changes.
Training on augumented user 111149 36/50 current_auc = 0.0
User 111149 AUC after training: 0.0
User 111149 does not improve AUC. Reverting changes.
Training on augumented user 50007 37/50 current_auc = 0.0
User 50007 AUC after training: 0.0
User 50007 does not improve AUC. Reverting changes.
Training on augumented user 23192 38/50 current_auc = 0.0
User 23192 AUC after training: 0.0
User 23192 does not improve AUC. Reverting changes.
Training on augumented user 27092 39/50 current_auc = 0.0
User 27092 AUC after training: 0.0
User 27092 does not improve AUC. Reverting changes.
Training on augumented user 126171 40/50 current_auc = 0.0
User 126171 AUC after training: 0.0
User 126171 does not improve AUC. Reverting changes.
Training on augumented user 66465 41/50 current_auc = 0.0
User 66465 AUC after training: 0.0
User 66465 does not improve AUC. Reverting changes.
Training on augumented user 37156 42/50 current_auc = 0.0
User 37156 AUC after training: 0.0
User 37156 does not improve AUC. Reverting changes.
Training on augumented user 97620 43/50 current_auc = 0.0
User 97620 AUC after training: 0.0
User 97620 does not improve AUC. Reverting changes.
Training on augumented user 123305 44/50 current_auc = 0.0
User 123305 AUC after training: 0.0
User 123305 does not improve AUC. Reverting changes.
Training on augumented user 44348 45/50 current_auc = 0.0
User 44348 AUC after training: 0.0
User 44348 does not improve AUC. Reverting changes.
Training on augumented user 6797 46/50 current_auc = 0.0
User 6797 AUC after training: 0.0
User 6797 does not improve AUC. Reverting changes.
Training on augumented user 126747 47/50 current_auc = 0.0
User 126747 AUC after training: 0.0
User 126747 does not improve AUC. Reverting changes.
Training on augumented user 123610 48/50 current_auc = 0.0
User 123610 AUC after training: 0.0
User 123610 does not improve AUC. Reverting changes.
Training on augumented user 95107 49/50 current_auc = 0.0
User 95107 AUC after training: 0.0
User 95107 does not improve AUC. Reverting changes.
[2024-12-02 19:04:32.336507] start test user 45775 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:32.764403] start test user 45775 158/568 recall augumented users by random, augumented_users = [25241, 108559, 98868, 12991, 98465, 103672, 10192, 73112, 106267, 59318, 45662, 25807, 23840, 98001, 64441, 72018, 18091, 57197, 73036, 60424, 55126, 67265, 302, 138112, 1299, 77377, 17040, 12211, 17519, 95567, 2750, 39028, 43824, 73161, 71934, 26025, 110687, 54422, 95809, 124420, 14470, 77810, 2972, 4578, 9420, 120545, 111469, 45364, 38047, 66347]
[2024-12-02 19:04:32.779409] user = 45775 Cloud 158/568
[2024-12-02 19:04:32.789088] user = 45775 Local 158/568
[2024-12-02 19:04:32.866425] user = 45775 Local+ 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:35.482242] user = 45775 MPDA- 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2916666666666667
Training on augumented user 25241 0/50 current_auc = 0.2916666666666667
User 25241 AUC after training: 0.2777777777777778
User 25241 does not improve AUC. Reverting changes.
Training on augumented user 108559 1/50 current_auc = 0.2916666666666667
User 108559 AUC after training: 0.2916666666666667
User 108559 does not improve AUC. Reverting changes.
Training on augumented user 98868 2/50 current_auc = 0.2916666666666667
User 98868 AUC after training: 0.2916666666666667
User 98868 does not improve AUC. Reverting changes.
Training on augumented user 12991 3/50 current_auc = 0.2916666666666667
User 12991 AUC after training: 0.2916666666666667
User 12991 does not improve AUC. Reverting changes.
Training on augumented user 98465 4/50 current_auc = 0.2916666666666667
User 98465 AUC after training: 0.2777777777777778
User 98465 does not improve AUC. Reverting changes.
Training on augumented user 103672 5/50 current_auc = 0.2916666666666667
User 103672 AUC after training: 0.2916666666666667
User 103672 does not improve AUC. Reverting changes.
Training on augumented user 10192 6/50 current_auc = 0.2916666666666667
User 10192 AUC after training: 0.2916666666666667
User 10192 does not improve AUC. Reverting changes.
Training on augumented user 73112 7/50 current_auc = 0.2916666666666667
User 73112 AUC after training: 0.2916666666666667
User 73112 does not improve AUC. Reverting changes.
Training on augumented user 106267 8/50 current_auc = 0.2916666666666667
User 106267 AUC after training: 0.2916666666666667
User 106267 does not improve AUC. Reverting changes.
Training on augumented user 59318 9/50 current_auc = 0.2916666666666667
User 59318 AUC after training: 0.2916666666666667
User 59318 does not improve AUC. Reverting changes.
Training on augumented user 45662 10/50 current_auc = 0.2916666666666667
User 45662 AUC after training: 0.2916666666666667
User 45662 does not improve AUC. Reverting changes.
Training on augumented user 25807 11/50 current_auc = 0.2916666666666667
User 25807 AUC after training: 0.2916666666666667
User 25807 does not improve AUC. Reverting changes.
Training on augumented user 23840 12/50 current_auc = 0.2916666666666667
User 23840 AUC after training: 0.2916666666666667
User 23840 does not improve AUC. Reverting changes.
Training on augumented user 98001 13/50 current_auc = 0.2916666666666667
User 98001 AUC after training: 0.2777777777777778
User 98001 does not improve AUC. Reverting changes.
Training on augumented user 64441 14/50 current_auc = 0.2916666666666667
User 64441 AUC after training: 0.2777777777777778
User 64441 does not improve AUC. Reverting changes.
Training on augumented user 72018 15/50 current_auc = 0.2916666666666667
User 72018 AUC after training: 0.2916666666666667
User 72018 does not improve AUC. Reverting changes.
Training on augumented user 18091 16/50 current_auc = 0.2916666666666667
User 18091 AUC after training: 0.2916666666666667
User 18091 does not improve AUC. Reverting changes.
Training on augumented user 57197 17/50 current_auc = 0.2916666666666667
User 57197 AUC after training: 0.2916666666666667
User 57197 does not improve AUC. Reverting changes.
Training on augumented user 73036 18/50 current_auc = 0.2916666666666667
User 73036 AUC after training: 0.2777777777777778
User 73036 does not improve AUC. Reverting changes.
Training on augumented user 60424 19/50 current_auc = 0.2916666666666667
User 60424 AUC after training: 0.2916666666666667
User 60424 does not improve AUC. Reverting changes.
Training on augumented user 55126 20/50 current_auc = 0.2916666666666667
User 55126 AUC after training: 0.2916666666666667
User 55126 does not improve AUC. Reverting changes.
Training on augumented user 67265 21/50 current_auc = 0.2916666666666667
User 67265 AUC after training: 0.2916666666666667
User 67265 does not improve AUC. Reverting changes.
Training on augumented user 302 22/50 current_auc = 0.2916666666666667
User 302 AUC after training: 0.2916666666666667
User 302 does not improve AUC. Reverting changes.
Training on augumented user 138112 23/50 current_auc = 0.2916666666666667
User 138112 AUC after training: 0.2916666666666667
User 138112 does not improve AUC. Reverting changes.
Training on augumented user 1299 24/50 current_auc = 0.2916666666666667
User 1299 AUC after training: 0.2916666666666667
User 1299 does not improve AUC. Reverting changes.
Training on augumented user 77377 25/50 current_auc = 0.2916666666666667
User 77377 AUC after training: 0.2916666666666667
User 77377 does not improve AUC. Reverting changes.
Training on augumented user 17040 26/50 current_auc = 0.2916666666666667
User 17040 AUC after training: 0.2777777777777778
User 17040 does not improve AUC. Reverting changes.
Training on augumented user 12211 27/50 current_auc = 0.2916666666666667
User 12211 AUC after training: 0.2916666666666667
User 12211 does not improve AUC. Reverting changes.
Training on augumented user 17519 28/50 current_auc = 0.2916666666666667
User 17519 AUC after training: 0.2916666666666667
User 17519 does not improve AUC. Reverting changes.
Training on augumented user 95567 29/50 current_auc = 0.2916666666666667
User 95567 AUC after training: 0.2916666666666667
User 95567 does not improve AUC. Reverting changes.
Training on augumented user 2750 30/50 current_auc = 0.2916666666666667
User 2750 AUC after training: 0.2916666666666667
User 2750 does not improve AUC. Reverting changes.
Training on augumented user 39028 31/50 current_auc = 0.2916666666666667
User 39028 AUC after training: 0.2916666666666667
User 39028 does not improve AUC. Reverting changes.
Training on augumented user 43824 32/50 current_auc = 0.2916666666666667
User 43824 AUC after training: 0.2916666666666667
User 43824 does not improve AUC. Reverting changes.
Training on augumented user 73161 33/50 current_auc = 0.2916666666666667
User 73161 AUC after training: 0.2916666666666667
User 73161 does not improve AUC. Reverting changes.
Training on augumented user 71934 34/50 current_auc = 0.2916666666666667
User 71934 AUC after training: 0.2916666666666667
User 71934 does not improve AUC. Reverting changes.
Training on augumented user 26025 35/50 current_auc = 0.2916666666666667
User 26025 AUC after training: 0.2916666666666667
User 26025 does not improve AUC. Reverting changes.
Training on augumented user 110687 36/50 current_auc = 0.2916666666666667
User 110687 AUC after training: 0.2916666666666667
User 110687 does not improve AUC. Reverting changes.
Training on augumented user 54422 37/50 current_auc = 0.2916666666666667
User 54422 AUC after training: 0.2916666666666667
User 54422 does not improve AUC. Reverting changes.
Training on augumented user 95809 38/50 current_auc = 0.2916666666666667
User 95809 AUC after training: 0.2916666666666667
User 95809 does not improve AUC. Reverting changes.
Training on augumented user 124420 39/50 current_auc = 0.2916666666666667
User 124420 AUC after training: 0.2916666666666667
User 124420 does not improve AUC. Reverting changes.
Training on augumented user 14470 40/50 current_auc = 0.2916666666666667
User 14470 AUC after training: 0.2916666666666667
User 14470 does not improve AUC. Reverting changes.
Training on augumented user 77810 41/50 current_auc = 0.2916666666666667
User 77810 AUC after training: 0.2916666666666667
User 77810 does not improve AUC. Reverting changes.
Training on augumented user 2972 42/50 current_auc = 0.2916666666666667
User 2972 AUC after training: 0.2916666666666667
User 2972 does not improve AUC. Reverting changes.
Training on augumented user 4578 43/50 current_auc = 0.2916666666666667
User 4578 AUC after training: 0.2916666666666667
User 4578 does not improve AUC. Reverting changes.
Training on augumented user 9420 44/50 current_auc = 0.2916666666666667
User 9420 AUC after training: 0.2916666666666667
User 9420 does not improve AUC. Reverting changes.
Training on augumented user 120545 45/50 current_auc = 0.2916666666666667
User 120545 AUC after training: 0.2916666666666667
User 120545 does not improve AUC. Reverting changes.
Training on augumented user 111469 46/50 current_auc = 0.2916666666666667
User 111469 AUC after training: 0.2916666666666667
User 111469 does not improve AUC. Reverting changes.
Training on augumented user 45364 47/50 current_auc = 0.2916666666666667
User 45364 AUC after training: 0.2916666666666667
User 45364 does not improve AUC. Reverting changes.
Training on augumented user 38047 48/50 current_auc = 0.2916666666666667
User 38047 AUC after training: 0.2916666666666667
User 38047 does not improve AUC. Reverting changes.
Training on augumented user 66347 49/50 current_auc = 0.2916666666666667
User 66347 AUC after training: 0.2916666666666667
User 66347 does not improve AUC. Reverting changes.
[2024-12-02 19:05:03.733326] start test user 45787 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:04.149473] start test user 45787 159/568 recall augumented users by random, augumented_users = [34924, 37766, 54396, 116273, 46841, 7773, 73268, 15198, 4774, 97627, 29744, 39013, 34222, 133450, 31162, 91091, 3115, 138134, 34458, 124475, 9435, 56366, 106941, 31882, 62196, 117257, 65662, 33757, 37785, 71293, 42029, 81637, 17344, 3499, 56774, 48144, 88125, 138377, 2888, 71025, 65995, 52886, 7210, 60796, 79101, 11347, 67310, 133267, 106081, 23666]
[2024-12-02 19:05:04.164079] user = 45787 Cloud 159/568
[2024-12-02 19:05:04.182835] user = 45787 Local 159/568
[2024-12-02 19:05:04.211004] user = 45787 Local+ 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:07.620070] user = 45787 MPDA- 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5562454346238129
Training on augumented user 34924 0/50 current_auc = 0.5562454346238129
User 34924 AUC after training: 0.5549671292914536
User 34924 does not improve AUC. Reverting changes.
Training on augumented user 37766 1/50 current_auc = 0.5562454346238129
User 37766 AUC after training: 0.5553323593864135
User 37766 does not improve AUC. Reverting changes.
Training on augumented user 54396 2/50 current_auc = 0.5562454346238129
User 54396 AUC after training: 0.5552410518626735
User 54396 does not improve AUC. Reverting changes.
Training on augumented user 116273 3/50 current_auc = 0.5562454346238129
User 116273 AUC after training: 0.556428049671293
User 116273 improves AUC. Keeping the model.
Training on augumented user 46841 4/50 current_auc = 0.556428049671293
User 46841 AUC after training: 0.5565193571950329
User 46841 improves AUC. Keeping the model.
Training on augumented user 7773 5/50 current_auc = 0.5565193571950329
User 7773 AUC after training: 0.5542366691015339
User 7773 does not improve AUC. Reverting changes.
Training on augumented user 73268 6/50 current_auc = 0.5565193571950329
User 73268 AUC after training: 0.556428049671293
User 73268 does not improve AUC. Reverting changes.
Training on augumented user 15198 7/50 current_auc = 0.5565193571950329
User 15198 AUC after training: 0.5570672023374725
User 15198 improves AUC. Keeping the model.
Training on augumented user 4774 8/50 current_auc = 0.5570672023374725
User 4774 AUC after training: 0.5565193571950329
User 4774 does not improve AUC. Reverting changes.
Training on augumented user 97627 9/50 current_auc = 0.5570672023374725
User 97627 AUC after training: 0.5524105186267347
User 97627 does not improve AUC. Reverting changes.
Training on augumented user 29744 10/50 current_auc = 0.5570672023374725
User 29744 AUC after training: 0.5567019722425128
User 29744 does not improve AUC. Reverting changes.
Training on augumented user 39013 11/50 current_auc = 0.5570672023374725
User 39013 AUC after training: 0.5554236669101535
User 39013 does not improve AUC. Reverting changes.
Training on augumented user 34222 12/50 current_auc = 0.5570672023374725
User 34222 AUC after training: 0.5561541271000731
User 34222 does not improve AUC. Reverting changes.
Training on augumented user 133450 13/50 current_auc = 0.5570672023374725
User 133450 AUC after training: 0.5563367421475529
User 133450 does not improve AUC. Reverting changes.
Training on augumented user 31162 14/50 current_auc = 0.5570672023374725
User 31162 AUC after training: 0.5558802045288532
User 31162 does not improve AUC. Reverting changes.
Training on augumented user 91091 15/50 current_auc = 0.5570672023374725
User 91091 AUC after training: 0.5556062819576334
User 91091 does not improve AUC. Reverting changes.
Training on augumented user 3115 16/50 current_auc = 0.5570672023374725
User 3115 AUC after training: 0.5568845872899927
User 3115 does not improve AUC. Reverting changes.
Training on augumented user 138134 17/50 current_auc = 0.5570672023374725
User 138134 AUC after training: 0.554145361577794
User 138134 does not improve AUC. Reverting changes.
Training on augumented user 34458 18/50 current_auc = 0.5570672023374725
User 34458 AUC after training: 0.5576150474799124
User 34458 improves AUC. Keeping the model.
Training on augumented user 124475 19/50 current_auc = 0.5576150474799124
User 124475 AUC after training: 0.5572498173849525
User 124475 does not improve AUC. Reverting changes.
Training on augumented user 9435 20/50 current_auc = 0.5576150474799124
User 9435 AUC after training: 0.5572498173849525
User 9435 does not improve AUC. Reverting changes.
Training on augumented user 56366 21/50 current_auc = 0.5576150474799124
User 56366 AUC after training: 0.5574324324324325
User 56366 does not improve AUC. Reverting changes.
Training on augumented user 106941 22/50 current_auc = 0.5576150474799124
User 106941 AUC after training: 0.5585281227173119
User 106941 improves AUC. Keeping the model.
Training on augumented user 31882 23/50 current_auc = 0.5585281227173119
User 31882 AUC after training: 0.5576150474799123
User 31882 does not improve AUC. Reverting changes.
Training on augumented user 62196 24/50 current_auc = 0.5585281227173119
User 62196 AUC after training: 0.5586194302410519
User 62196 improves AUC. Keeping the model.
Training on augumented user 117257 25/50 current_auc = 0.5586194302410519
User 117257 AUC after training: 0.5579802775748721
User 117257 does not improve AUC. Reverting changes.
Training on augumented user 65662 26/50 current_auc = 0.5586194302410519
User 65662 AUC after training: 0.5607195032870709
User 65662 improves AUC. Keeping the model.
Training on augumented user 33757 27/50 current_auc = 0.5607195032870709
User 33757 AUC after training: 0.560445580715851
User 33757 does not improve AUC. Reverting changes.
Training on augumented user 37785 28/50 current_auc = 0.5607195032870709
User 37785 AUC after training: 0.5591672753834916
User 37785 does not improve AUC. Reverting changes.
Training on augumented user 71293 29/50 current_auc = 0.5607195032870709
User 71293 AUC after training: 0.5612673484295106
User 71293 improves AUC. Keeping the model.
Training on augumented user 42029 30/50 current_auc = 0.5612673484295106
User 42029 AUC after training: 0.5614499634769905
User 42029 improves AUC. Keeping the model.
Training on augumented user 81637 31/50 current_auc = 0.5614499634769905
User 81637 AUC after training: 0.5612673484295105
User 81637 does not improve AUC. Reverting changes.
Training on augumented user 17344 32/50 current_auc = 0.5614499634769905
User 17344 AUC after training: 0.5621804236669101
User 17344 improves AUC. Keeping the model.
Training on augumented user 3499 33/50 current_auc = 0.5621804236669101
User 3499 AUC after training: 0.5619978086194302
User 3499 does not improve AUC. Reverting changes.
Training on augumented user 56774 34/50 current_auc = 0.5621804236669101
User 56774 AUC after training: 0.5619065010956903
User 56774 does not improve AUC. Reverting changes.
Training on augumented user 48144 35/50 current_auc = 0.5621804236669101
User 48144 AUC after training: 0.5619978086194302
User 48144 does not improve AUC. Reverting changes.
Training on augumented user 88125 36/50 current_auc = 0.5621804236669101
User 88125 AUC after training: 0.5616325785244705
User 88125 does not improve AUC. Reverting changes.
Training on augumented user 138377 37/50 current_auc = 0.5621804236669101
User 138377 AUC after training: 0.5607195032870709
User 138377 does not improve AUC. Reverting changes.
Training on augumented user 2888 38/50 current_auc = 0.5621804236669101
User 2888 AUC after training: 0.5622717311906501
User 2888 improves AUC. Keeping the model.
Training on augumented user 71025 39/50 current_auc = 0.5622717311906501
User 71025 AUC after training: 0.5630021913805698
User 71025 improves AUC. Keeping the model.
Training on augumented user 65995 40/50 current_auc = 0.5630021913805698
User 65995 AUC after training: 0.56227173119065
User 65995 does not improve AUC. Reverting changes.
Training on augumented user 52886 41/50 current_auc = 0.5630021913805698
User 52886 AUC after training: 0.5591672753834915
User 52886 does not improve AUC. Reverting changes.
Training on augumented user 7210 42/50 current_auc = 0.5630021913805698
User 7210 AUC after training: 0.5626369612856099
User 7210 does not improve AUC. Reverting changes.
Training on augumented user 60796 43/50 current_auc = 0.5630021913805698
User 60796 AUC after training: 0.5631848064280497
User 60796 improves AUC. Keeping the model.
Training on augumented user 79101 44/50 current_auc = 0.5631848064280497
User 79101 AUC after training: 0.5630021913805698
User 79101 does not improve AUC. Reverting changes.
Training on augumented user 11347 45/50 current_auc = 0.5631848064280497
User 11347 AUC after training: 0.5630021913805698
User 11347 does not improve AUC. Reverting changes.
Training on augumented user 67310 46/50 current_auc = 0.5631848064280497
User 67310 AUC after training: 0.5620891161431703
User 67310 does not improve AUC. Reverting changes.
Training on augumented user 133267 47/50 current_auc = 0.5631848064280497
User 133267 AUC after training: 0.5624543462381301
User 133267 does not improve AUC. Reverting changes.
Training on augumented user 106081 48/50 current_auc = 0.5631848064280497
User 106081 AUC after training: 0.5630021913805698
User 106081 does not improve AUC. Reverting changes.
Training on augumented user 23666 49/50 current_auc = 0.5631848064280497
User 23666 AUC after training: 0.56245434623813
User 23666 does not improve AUC. Reverting changes.
[2024-12-02 19:05:39.223417] start test user 45805 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:39.745808] start test user 45805 160/568 recall augumented users by random, augumented_users = [23887, 105652, 134903, 69654, 96354, 18333, 3434, 104237, 110789, 118919, 73474, 96708, 63205, 104337, 79379, 10788, 90843, 10966, 41198, 7656, 114038, 110043, 113367, 39806, 37201, 83263, 48878, 52893, 135028, 121586, 133074, 56732, 123550, 24616, 35337, 55944, 39818, 133337, 138420, 45189, 87347, 122110, 57745, 63279, 70108, 16217, 66245, 54663, 6745, 93941]
[2024-12-02 19:05:39.762580] user = 45805 Cloud 160/568
[2024-12-02 19:05:39.773148] user = 45805 Local 160/568
[2024-12-02 19:05:39.824135] user = 45805 Local+ 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:42.344328] user = 45805 MPDA- 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.16666666666666666
Training on augumented user 23887 0/50 current_auc = 0.16666666666666666
User 23887 AUC after training: 0.16666666666666666
User 23887 does not improve AUC. Reverting changes.
Training on augumented user 105652 1/50 current_auc = 0.16666666666666666
User 105652 AUC after training: 0.16666666666666666
User 105652 does not improve AUC. Reverting changes.
Training on augumented user 134903 2/50 current_auc = 0.16666666666666666
User 134903 AUC after training: 0.16666666666666666
User 134903 does not improve AUC. Reverting changes.
Training on augumented user 69654 3/50 current_auc = 0.16666666666666666
User 69654 AUC after training: 0.16666666666666666
User 69654 does not improve AUC. Reverting changes.
Training on augumented user 96354 4/50 current_auc = 0.16666666666666666
User 96354 AUC after training: 0.16666666666666666
User 96354 does not improve AUC. Reverting changes.
Training on augumented user 18333 5/50 current_auc = 0.16666666666666666
User 18333 AUC after training: 0.16666666666666666
User 18333 does not improve AUC. Reverting changes.
Training on augumented user 3434 6/50 current_auc = 0.16666666666666666
User 3434 AUC after training: 0.16666666666666666
User 3434 does not improve AUC. Reverting changes.
Training on augumented user 104237 7/50 current_auc = 0.16666666666666666
User 104237 AUC after training: 0.16666666666666666
User 104237 does not improve AUC. Reverting changes.
Training on augumented user 110789 8/50 current_auc = 0.16666666666666666
User 110789 AUC after training: 0.16666666666666666
User 110789 does not improve AUC. Reverting changes.
Training on augumented user 118919 9/50 current_auc = 0.16666666666666666
User 118919 AUC after training: 0.16666666666666666
User 118919 does not improve AUC. Reverting changes.
Training on augumented user 73474 10/50 current_auc = 0.16666666666666666
User 73474 AUC after training: 0.16666666666666666
User 73474 does not improve AUC. Reverting changes.
Training on augumented user 96708 11/50 current_auc = 0.16666666666666666
User 96708 AUC after training: 0.16666666666666666
User 96708 does not improve AUC. Reverting changes.
Training on augumented user 63205 12/50 current_auc = 0.16666666666666666
User 63205 AUC after training: 0.16666666666666666
User 63205 does not improve AUC. Reverting changes.
Training on augumented user 104337 13/50 current_auc = 0.16666666666666666
User 104337 AUC after training: 0.16666666666666666
User 104337 does not improve AUC. Reverting changes.
Training on augumented user 79379 14/50 current_auc = 0.16666666666666666
User 79379 AUC after training: 0.16666666666666666
User 79379 does not improve AUC. Reverting changes.
Training on augumented user 10788 15/50 current_auc = 0.16666666666666666
User 10788 AUC after training: 0.16666666666666666
User 10788 does not improve AUC. Reverting changes.
Training on augumented user 90843 16/50 current_auc = 0.16666666666666666
User 90843 AUC after training: 0.16666666666666666
User 90843 does not improve AUC. Reverting changes.
Training on augumented user 10966 17/50 current_auc = 0.16666666666666666
User 10966 AUC after training: 0.16666666666666666
User 10966 does not improve AUC. Reverting changes.
Training on augumented user 41198 18/50 current_auc = 0.16666666666666666
User 41198 AUC after training: 0.16666666666666666
User 41198 does not improve AUC. Reverting changes.
Training on augumented user 7656 19/50 current_auc = 0.16666666666666666
User 7656 AUC after training: 0.16666666666666666
User 7656 does not improve AUC. Reverting changes.
Training on augumented user 114038 20/50 current_auc = 0.16666666666666666
User 114038 AUC after training: 0.16666666666666666
User 114038 does not improve AUC. Reverting changes.
Training on augumented user 110043 21/50 current_auc = 0.16666666666666666
User 110043 AUC after training: 0.16666666666666666
User 110043 does not improve AUC. Reverting changes.
Training on augumented user 113367 22/50 current_auc = 0.16666666666666666
User 113367 AUC after training: 0.16666666666666666
User 113367 does not improve AUC. Reverting changes.
Training on augumented user 39806 23/50 current_auc = 0.16666666666666666
User 39806 AUC after training: 0.16666666666666666
User 39806 does not improve AUC. Reverting changes.
Training on augumented user 37201 24/50 current_auc = 0.16666666666666666
User 37201 AUC after training: 0.16666666666666666
User 37201 does not improve AUC. Reverting changes.
Training on augumented user 83263 25/50 current_auc = 0.16666666666666666
User 83263 AUC after training: 0.16666666666666666
User 83263 does not improve AUC. Reverting changes.
Training on augumented user 48878 26/50 current_auc = 0.16666666666666666
User 48878 AUC after training: 0.16666666666666666
User 48878 does not improve AUC. Reverting changes.
Training on augumented user 52893 27/50 current_auc = 0.16666666666666666
User 52893 AUC after training: 0.16666666666666666
User 52893 does not improve AUC. Reverting changes.
Training on augumented user 135028 28/50 current_auc = 0.16666666666666666
User 135028 AUC after training: 0.16666666666666666
User 135028 does not improve AUC. Reverting changes.
Training on augumented user 121586 29/50 current_auc = 0.16666666666666666
User 121586 AUC after training: 0.16666666666666666
User 121586 does not improve AUC. Reverting changes.
Training on augumented user 133074 30/50 current_auc = 0.16666666666666666
User 133074 AUC after training: 0.16666666666666666
User 133074 does not improve AUC. Reverting changes.
Training on augumented user 56732 31/50 current_auc = 0.16666666666666666
User 56732 AUC after training: 0.16666666666666666
User 56732 does not improve AUC. Reverting changes.
Training on augumented user 123550 32/50 current_auc = 0.16666666666666666
User 123550 AUC after training: 0.16666666666666666
User 123550 does not improve AUC. Reverting changes.
Training on augumented user 24616 33/50 current_auc = 0.16666666666666666
User 24616 AUC after training: 0.16666666666666666
User 24616 does not improve AUC. Reverting changes.
Training on augumented user 35337 34/50 current_auc = 0.16666666666666666
User 35337 AUC after training: 0.16666666666666666
User 35337 does not improve AUC. Reverting changes.
Training on augumented user 55944 35/50 current_auc = 0.16666666666666666
User 55944 AUC after training: 0.16666666666666666
User 55944 does not improve AUC. Reverting changes.
Training on augumented user 39818 36/50 current_auc = 0.16666666666666666
User 39818 AUC after training: 0.16666666666666666
User 39818 does not improve AUC. Reverting changes.
Training on augumented user 133337 37/50 current_auc = 0.16666666666666666
User 133337 AUC after training: 0.16666666666666666
User 133337 does not improve AUC. Reverting changes.
Training on augumented user 138420 38/50 current_auc = 0.16666666666666666
User 138420 AUC after training: 0.16666666666666666
User 138420 does not improve AUC. Reverting changes.
Training on augumented user 45189 39/50 current_auc = 0.16666666666666666
User 45189 AUC after training: 0.16666666666666666
User 45189 does not improve AUC. Reverting changes.
Training on augumented user 87347 40/50 current_auc = 0.16666666666666666
User 87347 AUC after training: 0.16666666666666666
User 87347 does not improve AUC. Reverting changes.
Training on augumented user 122110 41/50 current_auc = 0.16666666666666666
User 122110 AUC after training: 0.16666666666666666
User 122110 does not improve AUC. Reverting changes.
Training on augumented user 57745 42/50 current_auc = 0.16666666666666666
User 57745 AUC after training: 0.16666666666666666
User 57745 does not improve AUC. Reverting changes.
Training on augumented user 63279 43/50 current_auc = 0.16666666666666666
User 63279 AUC after training: 0.16666666666666666
User 63279 does not improve AUC. Reverting changes.
Training on augumented user 70108 44/50 current_auc = 0.16666666666666666
User 70108 AUC after training: 0.16666666666666666
User 70108 does not improve AUC. Reverting changes.
Training on augumented user 16217 45/50 current_auc = 0.16666666666666666
User 16217 AUC after training: 0.16666666666666666
User 16217 does not improve AUC. Reverting changes.
Training on augumented user 66245 46/50 current_auc = 0.16666666666666666
User 66245 AUC after training: 0.16666666666666666
User 66245 does not improve AUC. Reverting changes.
Training on augumented user 54663 47/50 current_auc = 0.16666666666666666
User 54663 AUC after training: 0.16666666666666666
User 54663 does not improve AUC. Reverting changes.
Training on augumented user 6745 48/50 current_auc = 0.16666666666666666
User 6745 AUC after training: 0.16666666666666666
User 6745 does not improve AUC. Reverting changes.
Training on augumented user 93941 49/50 current_auc = 0.16666666666666666
User 93941 AUC after training: 0.16666666666666666
User 93941 does not improve AUC. Reverting changes.
[2024-12-02 19:06:12.047359] start test user 45925 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:12.477268] start test user 45925 161/568 recall augumented users by random, augumented_users = [129098, 98195, 21630, 55658, 122077, 2829, 72948, 75650, 97218, 47071, 117147, 55772, 10933, 46733, 61416, 2341, 79987, 94983, 50314, 60600, 8243, 83863, 74347, 39541, 49653, 117267, 42520, 71938, 98783, 67877, 82687, 124151, 115737, 123459, 103604, 38026, 82166, 73313, 29701, 3593, 54371, 127831, 57980, 123760, 64285, 35741, 126931, 46007, 77941, 133665]
[2024-12-02 19:06:12.492083] user = 45925 Cloud 161/568
[2024-12-02 19:06:12.505724] user = 45925 Local 161/568
[2024-12-02 19:06:12.547647] user = 45925 Local+ 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:14.459082] user = 45925 MPDA- 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.542336083369518
Training on augumented user 129098 0/50 current_auc = 0.542336083369518
User 129098 AUC after training: 0.5401650021710812
User 129098 does not improve AUC. Reverting changes.
Training on augumented user 98195 1/50 current_auc = 0.542336083369518
User 98195 AUC after training: 0.541033434650456
User 98195 does not improve AUC. Reverting changes.
Training on augumented user 21630 2/50 current_auc = 0.542336083369518
User 21630 AUC after training: 0.541033434650456
User 21630 does not improve AUC. Reverting changes.
Training on augumented user 55658 3/50 current_auc = 0.542336083369518
User 55658 AUC after training: 0.5419018671298307
User 55658 does not improve AUC. Reverting changes.
Training on augumented user 122077 4/50 current_auc = 0.542336083369518
User 122077 AUC after training: 0.5405992184107686
User 122077 does not improve AUC. Reverting changes.
Training on augumented user 2829 5/50 current_auc = 0.542336083369518
User 2829 AUC after training: 0.541033434650456
User 2829 does not improve AUC. Reverting changes.
Training on augumented user 72948 6/50 current_auc = 0.542336083369518
User 72948 AUC after training: 0.5401650021710811
User 72948 does not improve AUC. Reverting changes.
Training on augumented user 75650 7/50 current_auc = 0.542336083369518
User 75650 AUC after training: 0.541033434650456
User 75650 does not improve AUC. Reverting changes.
Training on augumented user 97218 8/50 current_auc = 0.542336083369518
User 97218 AUC after training: 0.5432045158488927
User 97218 improves AUC. Keeping the model.
Training on augumented user 47071 9/50 current_auc = 0.5432045158488927
User 47071 AUC after training: 0.542336083369518
User 47071 does not improve AUC. Reverting changes.
Training on augumented user 117147 10/50 current_auc = 0.5432045158488927
User 117147 AUC after training: 0.5427702996092054
User 117147 does not improve AUC. Reverting changes.
Training on augumented user 55772 11/50 current_auc = 0.5432045158488927
User 55772 AUC after training: 0.5440729483282676
User 55772 improves AUC. Keeping the model.
Training on augumented user 10933 12/50 current_auc = 0.5440729483282676
User 10933 AUC after training: 0.5432045158488927
User 10933 does not improve AUC. Reverting changes.
Training on augumented user 46733 13/50 current_auc = 0.5440729483282676
User 46733 AUC after training: 0.5414676508901433
User 46733 does not improve AUC. Reverting changes.
Training on augumented user 61416 14/50 current_auc = 0.5440729483282676
User 61416 AUC after training: 0.5414676508901434
User 61416 does not improve AUC. Reverting changes.
Training on augumented user 2341 15/50 current_auc = 0.5440729483282676
User 2341 AUC after training: 0.5427702996092054
User 2341 does not improve AUC. Reverting changes.
Training on augumented user 79987 16/50 current_auc = 0.5440729483282676
User 79987 AUC after training: 0.5432045158488927
User 79987 does not improve AUC. Reverting changes.
Training on augumented user 94983 17/50 current_auc = 0.5440729483282676
User 94983 AUC after training: 0.5419018671298307
User 94983 does not improve AUC. Reverting changes.
Training on augumented user 50314 18/50 current_auc = 0.5440729483282676
User 50314 AUC after training: 0.5414676508901434
User 50314 does not improve AUC. Reverting changes.
Training on augumented user 60600 19/50 current_auc = 0.5440729483282676
User 60600 AUC after training: 0.5432045158488927
User 60600 does not improve AUC. Reverting changes.
Training on augumented user 8243 20/50 current_auc = 0.5440729483282676
User 8243 AUC after training: 0.542336083369518
User 8243 does not improve AUC. Reverting changes.
Training on augumented user 83863 21/50 current_auc = 0.5440729483282676
User 83863 AUC after training: 0.5401650021710812
User 83863 does not improve AUC. Reverting changes.
Training on augumented user 74347 22/50 current_auc = 0.5440729483282676
User 74347 AUC after training: 0.5436387320885802
User 74347 does not improve AUC. Reverting changes.
Training on augumented user 39541 23/50 current_auc = 0.5440729483282676
User 39541 AUC after training: 0.542336083369518
User 39541 does not improve AUC. Reverting changes.
Training on augumented user 49653 24/50 current_auc = 0.5440729483282676
User 49653 AUC after training: 0.5401650021710812
User 49653 does not improve AUC. Reverting changes.
Training on augumented user 117267 25/50 current_auc = 0.5440729483282676
User 117267 AUC after training: 0.5440729483282676
User 117267 does not improve AUC. Reverting changes.
Training on augumented user 42520 26/50 current_auc = 0.5440729483282676
User 42520 AUC after training: 0.5419018671298307
User 42520 does not improve AUC. Reverting changes.
Training on augumented user 71938 27/50 current_auc = 0.5440729483282676
User 71938 AUC after training: 0.5419018671298307
User 71938 does not improve AUC. Reverting changes.
Training on augumented user 98783 28/50 current_auc = 0.5440729483282676
User 98783 AUC after training: 0.542336083369518
User 98783 does not improve AUC. Reverting changes.
Training on augumented user 67877 29/50 current_auc = 0.5440729483282676
User 67877 AUC after training: 0.5410334346504561
User 67877 does not improve AUC. Reverting changes.
Training on augumented user 82687 30/50 current_auc = 0.5440729483282676
User 82687 AUC after training: 0.5419018671298307
User 82687 does not improve AUC. Reverting changes.
Training on augumented user 124151 31/50 current_auc = 0.5440729483282676
User 124151 AUC after training: 0.5414676508901434
User 124151 does not improve AUC. Reverting changes.
Training on augumented user 115737 32/50 current_auc = 0.5440729483282676
User 115737 AUC after training: 0.5414676508901434
User 115737 does not improve AUC. Reverting changes.
Training on augumented user 123459 33/50 current_auc = 0.5440729483282676
User 123459 AUC after training: 0.5419018671298307
User 123459 does not improve AUC. Reverting changes.
Training on augumented user 103604 34/50 current_auc = 0.5440729483282676
User 103604 AUC after training: 0.5414676508901434
User 103604 does not improve AUC. Reverting changes.
Training on augumented user 38026 35/50 current_auc = 0.5440729483282676
User 38026 AUC after training: 0.5427702996092054
User 38026 does not improve AUC. Reverting changes.
Training on augumented user 82166 36/50 current_auc = 0.5440729483282676
User 82166 AUC after training: 0.541033434650456
User 82166 does not improve AUC. Reverting changes.
Training on augumented user 73313 37/50 current_auc = 0.5440729483282676
User 73313 AUC after training: 0.5440729483282676
User 73313 does not improve AUC. Reverting changes.
Training on augumented user 29701 38/50 current_auc = 0.5440729483282676
User 29701 AUC after training: 0.5419018671298307
User 29701 does not improve AUC. Reverting changes.
Training on augumented user 3593 39/50 current_auc = 0.5440729483282676
User 3593 AUC after training: 0.541033434650456
User 3593 does not improve AUC. Reverting changes.
Training on augumented user 54371 40/50 current_auc = 0.5440729483282676
User 54371 AUC after training: 0.541033434650456
User 54371 does not improve AUC. Reverting changes.
Training on augumented user 127831 41/50 current_auc = 0.5440729483282676
User 127831 AUC after training: 0.542336083369518
User 127831 does not improve AUC. Reverting changes.
Training on augumented user 57980 42/50 current_auc = 0.5440729483282676
User 57980 AUC after training: 0.5405992184107686
User 57980 does not improve AUC. Reverting changes.
Training on augumented user 123760 43/50 current_auc = 0.5440729483282676
User 123760 AUC after training: 0.5405992184107686
User 123760 does not improve AUC. Reverting changes.
Training on augumented user 64285 44/50 current_auc = 0.5440729483282676
User 64285 AUC after training: 0.5432045158488928
User 64285 does not improve AUC. Reverting changes.
Training on augumented user 35741 45/50 current_auc = 0.5440729483282676
User 35741 AUC after training: 0.5440729483282676
User 35741 does not improve AUC. Reverting changes.
Training on augumented user 126931 46/50 current_auc = 0.5440729483282676
User 126931 AUC after training: 0.542336083369518
User 126931 does not improve AUC. Reverting changes.
Training on augumented user 46007 47/50 current_auc = 0.5440729483282676
User 46007 AUC after training: 0.542336083369518
User 46007 does not improve AUC. Reverting changes.
Training on augumented user 77941 48/50 current_auc = 0.5440729483282676
User 77941 AUC after training: 0.5427702996092054
User 77941 does not improve AUC. Reverting changes.
Training on augumented user 133665 49/50 current_auc = 0.5440729483282676
User 133665 AUC after training: 0.5419018671298307
User 133665 does not improve AUC. Reverting changes.
[2024-12-02 19:06:45.225104] start test user 45928 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:45.982538] start test user 45928 162/568 recall augumented users by random, augumented_users = [27458, 25338, 84360, 47422, 80068, 137668, 115686, 104785, 65895, 39781, 67582, 125645, 38032, 121458, 42558, 109473, 79816, 104852, 135222, 75628, 39184, 123060, 72997, 122088, 81897, 137028, 5683, 16018, 75186, 51881, 82593, 98348, 65202, 68104, 40842, 88119, 35168, 132846, 122920, 114659, 54815, 112131, 57052, 90710, 100519, 17804, 63987, 125043, 103765, 8358]
[2024-12-02 19:06:45.999717] user = 45928 Cloud 162/568
[2024-12-02 19:06:46.046116] user = 45928 Local 162/568
[2024-12-02 19:06:46.256308] user = 45928 Local+ 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:48.697466] user = 45928 MPDA- 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7630135153218252
Training on augumented user 27458 0/50 current_auc = 0.7630135153218252
User 27458 AUC after training: 0.7628797002542487
User 27458 does not improve AUC. Reverting changes.
Training on augumented user 25338 1/50 current_auc = 0.7630135153218252
User 25338 AUC after training: 0.7628797002542487
User 25338 does not improve AUC. Reverting changes.
Training on augumented user 84360 2/50 current_auc = 0.7630135153218252
User 84360 AUC after training: 0.7630135153218252
User 84360 does not improve AUC. Reverting changes.
Training on augumented user 47422 3/50 current_auc = 0.7630135153218252
User 47422 AUC after training: 0.763414960524555
User 47422 improves AUC. Keeping the model.
Training on augumented user 80068 4/50 current_auc = 0.763414960524555
User 80068 AUC after training: 0.763414960524555
User 80068 does not improve AUC. Reverting changes.
Training on augumented user 137668 5/50 current_auc = 0.763414960524555
User 137668 AUC after training: 0.762076809848789
User 137668 does not improve AUC. Reverting changes.
Training on augumented user 115686 6/50 current_auc = 0.763414960524555
User 115686 AUC after training: 0.7623444399839422
User 115686 does not improve AUC. Reverting changes.
Training on augumented user 104785 7/50 current_auc = 0.763414960524555
User 104785 AUC after training: 0.7636825906597082
User 104785 improves AUC. Keeping the model.
Training on augumented user 65895 8/50 current_auc = 0.7636825906597082
User 65895 AUC after training: 0.7637494981934966
User 65895 improves AUC. Keeping the model.
Training on augumented user 39781 9/50 current_auc = 0.7637494981934966
User 39781 AUC after training: 0.7634818680583433
User 39781 does not improve AUC. Reverting changes.
Training on augumented user 67582 10/50 current_auc = 0.7637494981934966
User 67582 AUC after training: 0.7616084571122708
User 67582 does not improve AUC. Reverting changes.
Training on augumented user 125645 11/50 current_auc = 0.7637494981934966
User 125645 AUC after training: 0.7638833132610732
User 125645 improves AUC. Keeping the model.
Training on augumented user 38032 12/50 current_auc = 0.7638833132610732
User 38032 AUC after training: 0.7637494981934966
User 38032 does not improve AUC. Reverting changes.
Training on augumented user 121458 13/50 current_auc = 0.7638833132610732
User 121458 AUC after training: 0.7632811454569786
User 121458 does not improve AUC. Reverting changes.
Training on augumented user 42558 14/50 current_auc = 0.7638833132610732
User 42558 AUC after training: 0.7635487755921317
User 42558 does not improve AUC. Reverting changes.
Training on augumented user 109473 15/50 current_auc = 0.7638833132610732
User 109473 AUC after training: 0.7642847584638031
User 109473 improves AUC. Keeping the model.
Training on augumented user 79816 16/50 current_auc = 0.7642847584638031
User 79816 AUC after training: 0.7643516659975913
User 79816 improves AUC. Keeping the model.
Training on augumented user 104852 17/50 current_auc = 0.7643516659975913
User 104852 AUC after training: 0.7643516659975913
User 104852 does not improve AUC. Reverting changes.
Training on augumented user 135222 18/50 current_auc = 0.7643516659975913
User 135222 AUC after training: 0.7636825906597082
User 135222 does not improve AUC. Reverting changes.
Training on augumented user 75628 19/50 current_auc = 0.7643516659975913
User 75628 AUC after training: 0.7640840358624381
User 75628 does not improve AUC. Reverting changes.
Training on augumented user 39184 20/50 current_auc = 0.7643516659975913
User 39184 AUC after training: 0.7643516659975913
User 39184 does not improve AUC. Reverting changes.
Training on augumented user 123060 21/50 current_auc = 0.7643516659975913
User 123060 AUC after training: 0.7642847584638031
User 123060 does not improve AUC. Reverting changes.
Training on augumented user 72997 22/50 current_auc = 0.7643516659975913
User 72997 AUC after training: 0.7634818680583433
User 72997 does not improve AUC. Reverting changes.
Training on augumented user 122088 23/50 current_auc = 0.7643516659975913
User 122088 AUC after training: 0.7642178509300148
User 122088 does not improve AUC. Reverting changes.
Training on augumented user 81897 24/50 current_auc = 0.7643516659975913
User 81897 AUC after training: 0.7642178509300148
User 81897 does not improve AUC. Reverting changes.
Training on augumented user 137028 25/50 current_auc = 0.7643516659975913
User 137028 AUC after training: 0.7641509433962264
User 137028 does not improve AUC. Reverting changes.
Training on augumented user 5683 26/50 current_auc = 0.7643516659975913
User 5683 AUC after training: 0.7643516659975913
User 5683 does not improve AUC. Reverting changes.
Training on augumented user 16018 27/50 current_auc = 0.7643516659975913
User 16018 AUC after training: 0.7643516659975913
User 16018 does not improve AUC. Reverting changes.
Training on augumented user 75186 28/50 current_auc = 0.7643516659975913
User 75186 AUC after training: 0.7640840358624381
User 75186 does not improve AUC. Reverting changes.
Training on augumented user 51881 29/50 current_auc = 0.7643516659975913
User 51881 AUC after training: 0.7642178509300148
User 51881 does not improve AUC. Reverting changes.
Training on augumented user 82593 30/50 current_auc = 0.7643516659975913
User 82593 AUC after training: 0.7643516659975913
User 82593 does not improve AUC. Reverting changes.
Training on augumented user 98348 31/50 current_auc = 0.7643516659975913
User 98348 AUC after training: 0.7642178509300146
User 98348 does not improve AUC. Reverting changes.
Training on augumented user 65202 32/50 current_auc = 0.7643516659975913
User 65202 AUC after training: 0.7642178509300148
User 65202 does not improve AUC. Reverting changes.
Training on augumented user 68104 33/50 current_auc = 0.7643516659975913
User 68104 AUC after training: 0.7641509433962264
User 68104 does not improve AUC. Reverting changes.
Training on augumented user 40842 34/50 current_auc = 0.7643516659975913
User 40842 AUC after training: 0.7640840358624381
User 40842 does not improve AUC. Reverting changes.
Training on augumented user 88119 35/50 current_auc = 0.7643516659975913
User 88119 AUC after training: 0.7646862036665328
User 88119 improves AUC. Keeping the model.
Training on augumented user 35168 36/50 current_auc = 0.7646862036665328
User 35168 AUC after training: 0.7644185735313795
User 35168 does not improve AUC. Reverting changes.
Training on augumented user 132846 37/50 current_auc = 0.7646862036665328
User 132846 AUC after training: 0.7639502207948614
User 132846 does not improve AUC. Reverting changes.
Training on augumented user 122920 38/50 current_auc = 0.7646862036665328
User 122920 AUC after training: 0.764485481065168
User 122920 does not improve AUC. Reverting changes.
Training on augumented user 114659 39/50 current_auc = 0.7646862036665328
User 114659 AUC after training: 0.7632811454569784
User 114659 does not improve AUC. Reverting changes.
Training on augumented user 54815 40/50 current_auc = 0.7646862036665328
User 54815 AUC after training: 0.7642178509300147
User 54815 does not improve AUC. Reverting changes.
Training on augumented user 112131 41/50 current_auc = 0.7646862036665328
User 112131 AUC after training: 0.7641509433962264
User 112131 does not improve AUC. Reverting changes.
Training on augumented user 57052 42/50 current_auc = 0.7646862036665328
User 57052 AUC after training: 0.7644185735313795
User 57052 does not improve AUC. Reverting changes.
Training on augumented user 90710 43/50 current_auc = 0.7646862036665328
User 90710 AUC after training: 0.7641509433962264
User 90710 does not improve AUC. Reverting changes.
Training on augumented user 100519 44/50 current_auc = 0.7646862036665328
User 100519 AUC after training: 0.7645523885989562
User 100519 does not improve AUC. Reverting changes.
Training on augumented user 17804 45/50 current_auc = 0.7646862036665328
User 17804 AUC after training: 0.7646862036665328
User 17804 does not improve AUC. Reverting changes.
Training on augumented user 63987 46/50 current_auc = 0.7646862036665328
User 63987 AUC after training: 0.7642847584638031
User 63987 does not improve AUC. Reverting changes.
Training on augumented user 125043 47/50 current_auc = 0.7646862036665328
User 125043 AUC after training: 0.7648200187341094
User 125043 improves AUC. Keeping the model.
Training on augumented user 103765 48/50 current_auc = 0.7648200187341094
User 103765 AUC after training: 0.7645523885989562
User 103765 does not improve AUC. Reverting changes.
Training on augumented user 8358 49/50 current_auc = 0.7648200187341094
User 8358 AUC after training: 0.7646862036665328
User 8358 does not improve AUC. Reverting changes.
[2024-12-02 19:07:24.169526] start test user 45982 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:24.663155] start test user 45982 163/568 recall augumented users by random, augumented_users = [118137, 43944, 107055, 101072, 133285, 12614, 103569, 130844, 102217, 128833, 104580, 52999, 5088, 38290, 43724, 12720, 50984, 42181, 92318, 65736, 38524, 47756, 127944, 122485, 64304, 26527, 52572, 27133, 28300, 112502, 78054, 113601, 85451, 77756, 40375, 83327, 85896, 49946, 74260, 115664, 25065, 20993, 82506, 115151, 37922, 43377, 30462, 96690, 41749, 39334]
[2024-12-02 19:07:24.678679] user = 45982 Cloud 163/568
[2024-12-02 19:07:24.708136] user = 45982 Local 163/568
[2024-12-02 19:07:24.791804] user = 45982 Local+ 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:26.949832] user = 45982 MPDA- 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7986022131624926
Training on augumented user 118137 0/50 current_auc = 0.7986022131624926
User 118137 AUC after training: 0.7984274898078043
User 118137 does not improve AUC. Reverting changes.
Training on augumented user 43944 1/50 current_auc = 0.7986022131624926
User 43944 AUC after training: 0.7986022131624927
User 43944 improves AUC. Keeping the model.
Training on augumented user 107055 2/50 current_auc = 0.7986022131624927
User 107055 AUC after training: 0.7984274898078043
User 107055 does not improve AUC. Reverting changes.
Training on augumented user 101072 3/50 current_auc = 0.7986022131624927
User 101072 AUC after training: 0.7986022131624927
User 101072 does not improve AUC. Reverting changes.
Training on augumented user 133285 4/50 current_auc = 0.7986022131624927
User 133285 AUC after training: 0.7986604542807222
User 133285 improves AUC. Keeping the model.
Training on augumented user 12614 5/50 current_auc = 0.7986604542807222
User 12614 AUC after training: 0.7988934187536401
User 12614 improves AUC. Keeping the model.
Training on augumented user 103569 6/50 current_auc = 0.7988934187536401
User 103569 AUC after training: 0.7989516598718694
User 103569 improves AUC. Keeping the model.
Training on augumented user 130844 7/50 current_auc = 0.7989516598718694
User 130844 AUC after training: 0.7989516598718696
User 130844 improves AUC. Keeping the model.
Training on augumented user 102217 8/50 current_auc = 0.7989516598718696
User 102217 AUC after training: 0.7992428654630168
User 102217 improves AUC. Keeping the model.
Training on augumented user 128833 9/50 current_auc = 0.7992428654630168
User 128833 AUC after training: 0.7988934187536401
User 128833 does not improve AUC. Reverting changes.
Training on augumented user 104580 10/50 current_auc = 0.7992428654630168
User 104580 AUC after training: 0.7987186953989516
User 104580 does not improve AUC. Reverting changes.
Training on augumented user 52999 11/50 current_auc = 0.7992428654630168
User 52999 AUC after training: 0.7992428654630169
User 52999 improves AUC. Keeping the model.
Training on augumented user 5088 12/50 current_auc = 0.7992428654630169
User 5088 AUC after training: 0.7995923121723937
User 5088 improves AUC. Keeping the model.
Training on augumented user 38290 13/50 current_auc = 0.7995923121723937
User 38290 AUC after training: 0.7994758299359348
User 38290 does not improve AUC. Reverting changes.
Training on augumented user 43724 14/50 current_auc = 0.7995923121723937
User 43724 AUC after training: 0.7993011065812463
User 43724 does not improve AUC. Reverting changes.
Training on augumented user 12720 15/50 current_auc = 0.7995923121723937
User 12720 AUC after training: 0.7993011065812463
User 12720 does not improve AUC. Reverting changes.
Training on augumented user 50984 16/50 current_auc = 0.7995923121723937
User 50984 AUC after training: 0.7998252766453116
User 50984 improves AUC. Keeping the model.
Training on augumented user 42181 17/50 current_auc = 0.7998252766453116
User 42181 AUC after training: 0.7998252766453116
User 42181 does not improve AUC. Reverting changes.
Training on augumented user 92318 18/50 current_auc = 0.7998252766453116
User 92318 AUC after training: 0.7995923121723937
User 92318 does not improve AUC. Reverting changes.
Training on augumented user 65736 19/50 current_auc = 0.7998252766453116
User 65736 AUC after training: 0.7993593476994758
User 65736 does not improve AUC. Reverting changes.
Training on augumented user 38524 20/50 current_auc = 0.7998252766453116
User 38524 AUC after training: 0.8
User 38524 improves AUC. Keeping the model.
Training on augumented user 47756 21/50 current_auc = 0.8
User 47756 AUC after training: 0.7995923121723937
User 47756 does not improve AUC. Reverting changes.
Training on augumented user 127944 22/50 current_auc = 0.8
User 127944 AUC after training: 0.7994758299359348
User 127944 does not improve AUC. Reverting changes.
Training on augumented user 122485 23/50 current_auc = 0.8
User 122485 AUC after training: 0.7997087944088526
User 122485 does not improve AUC. Reverting changes.
Training on augumented user 64304 24/50 current_auc = 0.8
User 64304 AUC after training: 0.7997670355270821
User 64304 does not improve AUC. Reverting changes.
Training on augumented user 26527 25/50 current_auc = 0.8
User 26527 AUC after training: 0.7997087944088527
User 26527 does not improve AUC. Reverting changes.
Training on augumented user 52572 26/50 current_auc = 0.8
User 52572 AUC after training: 0.7993593476994759
User 52572 does not improve AUC. Reverting changes.
Training on augumented user 27133 27/50 current_auc = 0.8
User 27133 AUC after training: 0.7999999999999999
User 27133 does not improve AUC. Reverting changes.
Training on augumented user 28300 28/50 current_auc = 0.8
User 28300 AUC after training: 0.7998252766453116
User 28300 does not improve AUC. Reverting changes.
Training on augumented user 112502 29/50 current_auc = 0.8
User 112502 AUC after training: 0.7995923121723937
User 112502 does not improve AUC. Reverting changes.
Training on augumented user 78054 30/50 current_auc = 0.8
User 78054 AUC after training: 0.799883517763541
User 78054 does not improve AUC. Reverting changes.
Training on augumented user 113601 31/50 current_auc = 0.8
User 113601 AUC after training: 0.7999417588817705
User 113601 does not improve AUC. Reverting changes.
Training on augumented user 85451 32/50 current_auc = 0.8
User 85451 AUC after training: 0.7999417588817705
User 85451 does not improve AUC. Reverting changes.
Training on augumented user 77756 33/50 current_auc = 0.8
User 77756 AUC after training: 0.799883517763541
User 77756 does not improve AUC. Reverting changes.
Training on augumented user 40375 34/50 current_auc = 0.8
User 40375 AUC after training: 0.7994758299359348
User 40375 does not improve AUC. Reverting changes.
Training on augumented user 83327 35/50 current_auc = 0.8
User 83327 AUC after training: 0.7999417588817704
User 83327 does not improve AUC. Reverting changes.
Training on augumented user 85896 36/50 current_auc = 0.8
User 85896 AUC after training: 0.8000582411182295
User 85896 improves AUC. Keeping the model.
Training on augumented user 49946 37/50 current_auc = 0.8000582411182295
User 49946 AUC after training: 0.7997670355270822
User 49946 does not improve AUC. Reverting changes.
Training on augumented user 74260 38/50 current_auc = 0.8000582411182295
User 74260 AUC after training: 0.799883517763541
User 74260 does not improve AUC. Reverting changes.
Training on augumented user 115664 39/50 current_auc = 0.8000582411182295
User 115664 AUC after training: 0.7999417588817705
User 115664 does not improve AUC. Reverting changes.
Training on augumented user 25065 40/50 current_auc = 0.8000582411182295
User 25065 AUC after training: 0.7999417588817705
User 25065 does not improve AUC. Reverting changes.
Training on augumented user 20993 41/50 current_auc = 0.8000582411182295
User 20993 AUC after training: 0.7998252766453116
User 20993 does not improve AUC. Reverting changes.
Training on augumented user 82506 42/50 current_auc = 0.8000582411182295
User 82506 AUC after training: 0.7993593476994758
User 82506 does not improve AUC. Reverting changes.
Training on augumented user 115151 43/50 current_auc = 0.8000582411182295
User 115151 AUC after training: 0.7997087944088527
User 115151 does not improve AUC. Reverting changes.
Training on augumented user 37922 44/50 current_auc = 0.8000582411182295
User 37922 AUC after training: 0.7998835177635412
User 37922 does not improve AUC. Reverting changes.
Training on augumented user 43377 45/50 current_auc = 0.8000582411182295
User 43377 AUC after training: 0.7996505532906232
User 43377 does not improve AUC. Reverting changes.
Training on augumented user 30462 46/50 current_auc = 0.8000582411182295
User 30462 AUC after training: 0.7995923121723937
User 30462 does not improve AUC. Reverting changes.
Training on augumented user 96690 47/50 current_auc = 0.8000582411182295
User 96690 AUC after training: 0.7999417588817707
User 96690 does not improve AUC. Reverting changes.
Training on augumented user 41749 48/50 current_auc = 0.8000582411182295
User 41749 AUC after training: 0.7993593476994758
User 41749 does not improve AUC. Reverting changes.
Training on augumented user 39334 49/50 current_auc = 0.8000582411182295
User 39334 AUC after training: 0.7998252766453116
User 39334 does not improve AUC. Reverting changes.
[2024-12-02 19:07:58.809658] start test user 46063 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:59.597626] start test user 46063 164/568 recall augumented users by random, augumented_users = [80762, 105984, 7887, 7746, 134242, 7032, 90007, 109296, 131640, 17286, 112416, 62358, 101671, 108030, 3346, 53319, 206, 16468, 86394, 57942, 84982, 123299, 40673, 123163, 101817, 2138, 99164, 70418, 109254, 53922, 87047, 132758, 18059, 118976, 51490, 123220, 45469, 128084, 5203, 51773, 107186, 111438, 5276, 64098, 19721, 15618, 4919, 121742, 717, 108855]
[2024-12-02 19:07:59.614213] user = 46063 Cloud 164/568
[2024-12-02 19:07:59.626152] user = 46063 Local 164/568
[2024-12-02 19:07:59.686835] user = 46063 Local+ 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:02.762934] user = 46063 MPDA- 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6084656084656084
Training on augumented user 80762 0/50 current_auc = 0.6084656084656084
User 80762 AUC after training: 0.6084656084656084
User 80762 does not improve AUC. Reverting changes.
Training on augumented user 105984 1/50 current_auc = 0.6084656084656084
User 105984 AUC after training: 0.6084656084656084
User 105984 does not improve AUC. Reverting changes.
Training on augumented user 7887 2/50 current_auc = 0.6084656084656084
User 7887 AUC after training: 0.6084656084656084
User 7887 does not improve AUC. Reverting changes.
Training on augumented user 7746 3/50 current_auc = 0.6084656084656084
User 7746 AUC after training: 0.6084656084656084
User 7746 does not improve AUC. Reverting changes.
Training on augumented user 134242 4/50 current_auc = 0.6084656084656084
User 134242 AUC after training: 0.6084656084656084
User 134242 does not improve AUC. Reverting changes.
Training on augumented user 7032 5/50 current_auc = 0.6084656084656084
User 7032 AUC after training: 0.6137566137566137
User 7032 improves AUC. Keeping the model.
Training on augumented user 90007 6/50 current_auc = 0.6137566137566137
User 90007 AUC after training: 0.6137566137566137
User 90007 does not improve AUC. Reverting changes.
Training on augumented user 109296 7/50 current_auc = 0.6137566137566137
User 109296 AUC after training: 0.6137566137566137
User 109296 does not improve AUC. Reverting changes.
Training on augumented user 131640 8/50 current_auc = 0.6137566137566137
User 131640 AUC after training: 0.6137566137566137
User 131640 does not improve AUC. Reverting changes.
Training on augumented user 17286 9/50 current_auc = 0.6137566137566137
User 17286 AUC after training: 0.6137566137566137
User 17286 does not improve AUC. Reverting changes.
Training on augumented user 112416 10/50 current_auc = 0.6137566137566137
User 112416 AUC after training: 0.6137566137566137
User 112416 does not improve AUC. Reverting changes.
Training on augumented user 62358 11/50 current_auc = 0.6137566137566137
User 62358 AUC after training: 0.6137566137566137
User 62358 does not improve AUC. Reverting changes.
Training on augumented user 101671 12/50 current_auc = 0.6137566137566137
User 101671 AUC after training: 0.6137566137566137
User 101671 does not improve AUC. Reverting changes.
Training on augumented user 108030 13/50 current_auc = 0.6137566137566137
User 108030 AUC after training: 0.6137566137566137
User 108030 does not improve AUC. Reverting changes.
Training on augumented user 3346 14/50 current_auc = 0.6137566137566137
User 3346 AUC after training: 0.6137566137566137
User 3346 does not improve AUC. Reverting changes.
Training on augumented user 53319 15/50 current_auc = 0.6137566137566137
User 53319 AUC after training: 0.6137566137566137
User 53319 does not improve AUC. Reverting changes.
Training on augumented user 206 16/50 current_auc = 0.6137566137566137
User 206 AUC after training: 0.6137566137566137
User 206 does not improve AUC. Reverting changes.
Training on augumented user 16468 17/50 current_auc = 0.6137566137566137
User 16468 AUC after training: 0.6137566137566137
User 16468 does not improve AUC. Reverting changes.
Training on augumented user 86394 18/50 current_auc = 0.6137566137566137
User 86394 AUC after training: 0.6137566137566137
User 86394 does not improve AUC. Reverting changes.
Training on augumented user 57942 19/50 current_auc = 0.6137566137566137
User 57942 AUC after training: 0.6137566137566137
User 57942 does not improve AUC. Reverting changes.
Training on augumented user 84982 20/50 current_auc = 0.6137566137566137
User 84982 AUC after training: 0.6137566137566137
User 84982 does not improve AUC. Reverting changes.
Training on augumented user 123299 21/50 current_auc = 0.6137566137566137
User 123299 AUC after training: 0.6137566137566137
User 123299 does not improve AUC. Reverting changes.
Training on augumented user 40673 22/50 current_auc = 0.6137566137566137
User 40673 AUC after training: 0.6137566137566137
User 40673 does not improve AUC. Reverting changes.
Training on augumented user 123163 23/50 current_auc = 0.6137566137566137
User 123163 AUC after training: 0.6031746031746031
User 123163 does not improve AUC. Reverting changes.
Training on augumented user 101817 24/50 current_auc = 0.6137566137566137
User 101817 AUC after training: 0.6137566137566137
User 101817 does not improve AUC. Reverting changes.
Training on augumented user 2138 25/50 current_auc = 0.6137566137566137
User 2138 AUC after training: 0.6084656084656084
User 2138 does not improve AUC. Reverting changes.
Training on augumented user 99164 26/50 current_auc = 0.6137566137566137
User 99164 AUC after training: 0.6137566137566137
User 99164 does not improve AUC. Reverting changes.
Training on augumented user 70418 27/50 current_auc = 0.6137566137566137
User 70418 AUC after training: 0.6084656084656084
User 70418 does not improve AUC. Reverting changes.
Training on augumented user 109254 28/50 current_auc = 0.6137566137566137
User 109254 AUC after training: 0.6137566137566137
User 109254 does not improve AUC. Reverting changes.
Training on augumented user 53922 29/50 current_auc = 0.6137566137566137
User 53922 AUC after training: 0.6137566137566137
User 53922 does not improve AUC. Reverting changes.
Training on augumented user 87047 30/50 current_auc = 0.6137566137566137
User 87047 AUC after training: 0.6137566137566137
User 87047 does not improve AUC. Reverting changes.
Training on augumented user 132758 31/50 current_auc = 0.6137566137566137
User 132758 AUC after training: 0.6137566137566137
User 132758 does not improve AUC. Reverting changes.
Training on augumented user 18059 32/50 current_auc = 0.6137566137566137
User 18059 AUC after training: 0.6137566137566137
User 18059 does not improve AUC. Reverting changes.
Training on augumented user 118976 33/50 current_auc = 0.6137566137566137
User 118976 AUC after training: 0.6137566137566137
User 118976 does not improve AUC. Reverting changes.
Training on augumented user 51490 34/50 current_auc = 0.6137566137566137
User 51490 AUC after training: 0.6137566137566137
User 51490 does not improve AUC. Reverting changes.
Training on augumented user 123220 35/50 current_auc = 0.6137566137566137
User 123220 AUC after training: 0.6137566137566137
User 123220 does not improve AUC. Reverting changes.
Training on augumented user 45469 36/50 current_auc = 0.6137566137566137
User 45469 AUC after training: 0.6137566137566137
User 45469 does not improve AUC. Reverting changes.
Training on augumented user 128084 37/50 current_auc = 0.6137566137566137
User 128084 AUC after training: 0.6137566137566137
User 128084 does not improve AUC. Reverting changes.
Training on augumented user 5203 38/50 current_auc = 0.6137566137566137
User 5203 AUC after training: 0.6137566137566137
User 5203 does not improve AUC. Reverting changes.
Training on augumented user 51773 39/50 current_auc = 0.6137566137566137
User 51773 AUC after training: 0.6137566137566137
User 51773 does not improve AUC. Reverting changes.
Training on augumented user 107186 40/50 current_auc = 0.6137566137566137
User 107186 AUC after training: 0.6137566137566137
User 107186 does not improve AUC. Reverting changes.
Training on augumented user 111438 41/50 current_auc = 0.6137566137566137
User 111438 AUC after training: 0.6137566137566137
User 111438 does not improve AUC. Reverting changes.
Training on augumented user 5276 42/50 current_auc = 0.6137566137566137
User 5276 AUC after training: 0.6137566137566137
User 5276 does not improve AUC. Reverting changes.
Training on augumented user 64098 43/50 current_auc = 0.6137566137566137
User 64098 AUC after training: 0.6084656084656084
User 64098 does not improve AUC. Reverting changes.
Training on augumented user 19721 44/50 current_auc = 0.6137566137566137
User 19721 AUC after training: 0.6137566137566137
User 19721 does not improve AUC. Reverting changes.
Training on augumented user 15618 45/50 current_auc = 0.6137566137566137
User 15618 AUC after training: 0.6137566137566137
User 15618 does not improve AUC. Reverting changes.
Training on augumented user 4919 46/50 current_auc = 0.6137566137566137
User 4919 AUC after training: 0.6137566137566137
User 4919 does not improve AUC. Reverting changes.
Training on augumented user 121742 47/50 current_auc = 0.6137566137566137
User 121742 AUC after training: 0.6137566137566137
User 121742 does not improve AUC. Reverting changes.
Training on augumented user 717 48/50 current_auc = 0.6137566137566137
User 717 AUC after training: 0.6031746031746031
User 717 does not improve AUC. Reverting changes.
Training on augumented user 108855 49/50 current_auc = 0.6137566137566137
User 108855 AUC after training: 0.6137566137566137
User 108855 does not improve AUC. Reverting changes.
[2024-12-02 19:08:32.870084] start test user 46069 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:33.327889] start test user 46069 165/568 recall augumented users by random, augumented_users = [102476, 47588, 83241, 27231, 69651, 68726, 53815, 82584, 1443, 50427, 126546, 19310, 79616, 108652, 87291, 77839, 95687, 44806, 27937, 100405, 80975, 88811, 95318, 120854, 13644, 137034, 55230, 20609, 49526, 54658, 118446, 73693, 15954, 71761, 119844, 30843, 51043, 24806, 55017, 118512, 131003, 39032, 33793, 18956, 40972, 43439, 126073, 71442, 111098, 84523]
[2024-12-02 19:08:33.343466] user = 46069 Cloud 165/568
[2024-12-02 19:08:33.354046] user = 46069 Local 165/568
[2024-12-02 19:08:33.382263] user = 46069 Local+ 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:35.523927] user = 46069 MPDA- 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.09090909090909094
Training on augumented user 102476 0/50 current_auc = 0.09090909090909094
User 102476 AUC after training: 0.09090909090909094
User 102476 does not improve AUC. Reverting changes.
Training on augumented user 47588 1/50 current_auc = 0.09090909090909094
User 47588 AUC after training: 0.09090909090909094
User 47588 does not improve AUC. Reverting changes.
Training on augumented user 83241 2/50 current_auc = 0.09090909090909094
User 83241 AUC after training: 0.09090909090909094
User 83241 does not improve AUC. Reverting changes.
Training on augumented user 27231 3/50 current_auc = 0.09090909090909094
User 27231 AUC after training: 0.09090909090909094
User 27231 does not improve AUC. Reverting changes.
Training on augumented user 69651 4/50 current_auc = 0.09090909090909094
User 69651 AUC after training: 0.09090909090909094
User 69651 does not improve AUC. Reverting changes.
Training on augumented user 68726 5/50 current_auc = 0.09090909090909094
User 68726 AUC after training: 0.09090909090909094
User 68726 does not improve AUC. Reverting changes.
Training on augumented user 53815 6/50 current_auc = 0.09090909090909094
User 53815 AUC after training: 0.09090909090909094
User 53815 does not improve AUC. Reverting changes.
Training on augumented user 82584 7/50 current_auc = 0.09090909090909094
User 82584 AUC after training: 0.09090909090909094
User 82584 does not improve AUC. Reverting changes.
Training on augumented user 1443 8/50 current_auc = 0.09090909090909094
User 1443 AUC after training: 0.09090909090909094
User 1443 does not improve AUC. Reverting changes.
Training on augumented user 50427 9/50 current_auc = 0.09090909090909094
User 50427 AUC after training: 0.09090909090909094
User 50427 does not improve AUC. Reverting changes.
Training on augumented user 126546 10/50 current_auc = 0.09090909090909094
User 126546 AUC after training: 0.09090909090909094
User 126546 does not improve AUC. Reverting changes.
Training on augumented user 19310 11/50 current_auc = 0.09090909090909094
User 19310 AUC after training: 0.09090909090909094
User 19310 does not improve AUC. Reverting changes.
Training on augumented user 79616 12/50 current_auc = 0.09090909090909094
User 79616 AUC after training: 0.09090909090909094
User 79616 does not improve AUC. Reverting changes.
Training on augumented user 108652 13/50 current_auc = 0.09090909090909094
User 108652 AUC after training: 0.09090909090909094
User 108652 does not improve AUC. Reverting changes.
Training on augumented user 87291 14/50 current_auc = 0.09090909090909094
User 87291 AUC after training: 0.09090909090909094
User 87291 does not improve AUC. Reverting changes.
Training on augumented user 77839 15/50 current_auc = 0.09090909090909094
User 77839 AUC after training: 0.09090909090909094
User 77839 does not improve AUC. Reverting changes.
Training on augumented user 95687 16/50 current_auc = 0.09090909090909094
User 95687 AUC after training: 0.09090909090909094
User 95687 does not improve AUC. Reverting changes.
Training on augumented user 44806 17/50 current_auc = 0.09090909090909094
User 44806 AUC after training: 0.09090909090909094
User 44806 does not improve AUC. Reverting changes.
Training on augumented user 27937 18/50 current_auc = 0.09090909090909094
User 27937 AUC after training: 0.09090909090909094
User 27937 does not improve AUC. Reverting changes.
Training on augumented user 100405 19/50 current_auc = 0.09090909090909094
User 100405 AUC after training: 0.09090909090909094
User 100405 does not improve AUC. Reverting changes.
Training on augumented user 80975 20/50 current_auc = 0.09090909090909094
User 80975 AUC after training: 0.09090909090909094
User 80975 does not improve AUC. Reverting changes.
Training on augumented user 88811 21/50 current_auc = 0.09090909090909094
User 88811 AUC after training: 0.09090909090909094
User 88811 does not improve AUC. Reverting changes.
Training on augumented user 95318 22/50 current_auc = 0.09090909090909094
User 95318 AUC after training: 0.09090909090909094
User 95318 does not improve AUC. Reverting changes.
Training on augumented user 120854 23/50 current_auc = 0.09090909090909094
User 120854 AUC after training: 0.09090909090909094
User 120854 does not improve AUC. Reverting changes.
Training on augumented user 13644 24/50 current_auc = 0.09090909090909094
User 13644 AUC after training: 0.09090909090909094
User 13644 does not improve AUC. Reverting changes.
Training on augumented user 137034 25/50 current_auc = 0.09090909090909094
User 137034 AUC after training: 0.09090909090909094
User 137034 does not improve AUC. Reverting changes.
Training on augumented user 55230 26/50 current_auc = 0.09090909090909094
User 55230 AUC after training: 0.09090909090909094
User 55230 does not improve AUC. Reverting changes.
Training on augumented user 20609 27/50 current_auc = 0.09090909090909094
User 20609 AUC after training: 0.09090909090909094
User 20609 does not improve AUC. Reverting changes.
Training on augumented user 49526 28/50 current_auc = 0.09090909090909094
User 49526 AUC after training: 0.09090909090909094
User 49526 does not improve AUC. Reverting changes.
Training on augumented user 54658 29/50 current_auc = 0.09090909090909094
User 54658 AUC after training: 0.09090909090909094
User 54658 does not improve AUC. Reverting changes.
Training on augumented user 118446 30/50 current_auc = 0.09090909090909094
User 118446 AUC after training: 0.09090909090909094
User 118446 does not improve AUC. Reverting changes.
Training on augumented user 73693 31/50 current_auc = 0.09090909090909094
User 73693 AUC after training: 0.09090909090909094
User 73693 does not improve AUC. Reverting changes.
Training on augumented user 15954 32/50 current_auc = 0.09090909090909094
User 15954 AUC after training: 0.09090909090909094
User 15954 does not improve AUC. Reverting changes.
Training on augumented user 71761 33/50 current_auc = 0.09090909090909094
User 71761 AUC after training: 0.09090909090909094
User 71761 does not improve AUC. Reverting changes.
Training on augumented user 119844 34/50 current_auc = 0.09090909090909094
User 119844 AUC after training: 0.09090909090909094
User 119844 does not improve AUC. Reverting changes.
Training on augumented user 30843 35/50 current_auc = 0.09090909090909094
User 30843 AUC after training: 0.09090909090909094
User 30843 does not improve AUC. Reverting changes.
Training on augumented user 51043 36/50 current_auc = 0.09090909090909094
User 51043 AUC after training: 0.09090909090909094
User 51043 does not improve AUC. Reverting changes.
Training on augumented user 24806 37/50 current_auc = 0.09090909090909094
User 24806 AUC after training: 0.09090909090909094
User 24806 does not improve AUC. Reverting changes.
Training on augumented user 55017 38/50 current_auc = 0.09090909090909094
User 55017 AUC after training: 0.09090909090909094
User 55017 does not improve AUC. Reverting changes.
Training on augumented user 118512 39/50 current_auc = 0.09090909090909094
User 118512 AUC after training: 0.09090909090909094
User 118512 does not improve AUC. Reverting changes.
Training on augumented user 131003 40/50 current_auc = 0.09090909090909094
User 131003 AUC after training: 0.09090909090909094
User 131003 does not improve AUC. Reverting changes.
Training on augumented user 39032 41/50 current_auc = 0.09090909090909094
User 39032 AUC after training: 0.09090909090909094
User 39032 does not improve AUC. Reverting changes.
Training on augumented user 33793 42/50 current_auc = 0.09090909090909094
User 33793 AUC after training: 0.09090909090909094
User 33793 does not improve AUC. Reverting changes.
Training on augumented user 18956 43/50 current_auc = 0.09090909090909094
User 18956 AUC after training: 0.09090909090909094
User 18956 does not improve AUC. Reverting changes.
Training on augumented user 40972 44/50 current_auc = 0.09090909090909094
User 40972 AUC after training: 0.09090909090909094
User 40972 does not improve AUC. Reverting changes.
Training on augumented user 43439 45/50 current_auc = 0.09090909090909094
User 43439 AUC after training: 0.09090909090909094
User 43439 does not improve AUC. Reverting changes.
Training on augumented user 126073 46/50 current_auc = 0.09090909090909094
User 126073 AUC after training: 0.09090909090909094
User 126073 does not improve AUC. Reverting changes.
Training on augumented user 71442 47/50 current_auc = 0.09090909090909094
User 71442 AUC after training: 0.09090909090909094
User 71442 does not improve AUC. Reverting changes.
Training on augumented user 111098 48/50 current_auc = 0.09090909090909094
User 111098 AUC after training: 0.09090909090909094
User 111098 does not improve AUC. Reverting changes.
Training on augumented user 84523 49/50 current_auc = 0.09090909090909094
User 84523 AUC after training: 0.09090909090909094
User 84523 does not improve AUC. Reverting changes.
[2024-12-02 19:09:05.053173] start test user 46095 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:05.487643] start test user 46095 166/568 recall augumented users by random, augumented_users = [21471, 95022, 44747, 131913, 44466, 10880, 16127, 11646, 62133, 101575, 87620, 75389, 127161, 17612, 90722, 86439, 8413, 50003, 109359, 76973, 3961, 51807, 126504, 12194, 83474, 120240, 45170, 43795, 88557, 35804, 68627, 137466, 113522, 62367, 66142, 31331, 82082, 20772, 9079, 19834, 33496, 107609, 44311, 67301, 92896, 88640, 34801, 99891, 105934, 11709]
[2024-12-02 19:09:05.504365] user = 46095 Cloud 166/568
[2024-12-02 19:09:05.544451] user = 46095 Local 166/568
[2024-12-02 19:09:05.681056] user = 46095 Local+ 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:08.537787] user = 46095 MPDA- 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7834975665444931
Training on augumented user 21471 0/50 current_auc = 0.7834975665444931
User 21471 AUC after training: 0.7833623745718922
User 21471 does not improve AUC. Reverting changes.
Training on augumented user 95022 1/50 current_auc = 0.7834975665444931
User 95022 AUC after training: 0.7830168839752448
User 95022 does not improve AUC. Reverting changes.
Training on augumented user 44747 2/50 current_auc = 0.7834975665444931
User 44747 AUC after training: 0.7835276092050711
User 44747 improves AUC. Keeping the model.
Training on augumented user 131913 3/50 current_auc = 0.7835276092050711
User 131913 AUC after training: 0.7835576518656492
User 131913 improves AUC. Keeping the model.
Training on augumented user 44466 4/50 current_auc = 0.7835576518656492
User 44466 AUC after training: 0.783377395902181
User 44466 does not improve AUC. Reverting changes.
Training on augumented user 10880 5/50 current_auc = 0.7835576518656492
User 10880 AUC after training: 0.7835876945262272
User 10880 improves AUC. Keeping the model.
Training on augumented user 16127 6/50 current_auc = 0.7835876945262272
User 16127 AUC after training: 0.7827389893648982
User 16127 does not improve AUC. Reverting changes.
Training on augumented user 11646 7/50 current_auc = 0.7835876945262272
User 11646 AUC after training: 0.7837529291594063
User 11646 improves AUC. Keeping the model.
Training on augumented user 62133 8/50 current_auc = 0.7837529291594063
User 62133 AUC after training: 0.7828967133329328
User 62133 does not improve AUC. Reverting changes.
Training on augumented user 101575 9/50 current_auc = 0.7837529291594063
User 101575 AUC after training: 0.7835576518656492
User 101575 does not improve AUC. Reverting changes.
Training on augumented user 87620 10/50 current_auc = 0.7837529291594063
User 87620 AUC after training: 0.783212161269002
User 87620 does not improve AUC. Reverting changes.
Training on augumented user 75389 11/50 current_auc = 0.7837529291594063
User 75389 AUC after training: 0.7831370546175569
User 75389 does not improve AUC. Reverting changes.
Training on augumented user 127161 12/50 current_auc = 0.7837529291594063
User 127161 AUC after training: 0.7835426305353603
User 127161 does not improve AUC. Reverting changes.
Training on augumented user 17612 13/50 current_auc = 0.7837529291594063
User 17612 AUC after training: 0.7834975665444932
User 17612 does not improve AUC. Reverting changes.
Training on augumented user 90722 14/50 current_auc = 0.7837529291594063
User 90722 AUC after training: 0.7830769692964009
User 90722 does not improve AUC. Reverting changes.
Training on augumented user 86439 15/50 current_auc = 0.7837529291594063
User 86439 AUC after training: 0.783287267920447
User 86439 does not improve AUC. Reverting changes.
Training on augumented user 8413 16/50 current_auc = 0.7837529291594063
User 8413 AUC after training: 0.7833623745718921
User 8413 does not improve AUC. Reverting changes.
Training on augumented user 50003 17/50 current_auc = 0.7837529291594063
User 50003 AUC after training: 0.7833323319113141
User 50003 does not improve AUC. Reverting changes.
Training on augumented user 109359 18/50 current_auc = 0.7837529291594063
User 109359 AUC after training: 0.7834675238839153
User 109359 does not improve AUC. Reverting changes.
Training on augumented user 76973 19/50 current_auc = 0.7837529291594063
User 76973 AUC after training: 0.7836327585170942
User 76973 does not improve AUC. Reverting changes.
Training on augumented user 3961 20/50 current_auc = 0.7837529291594063
User 3961 AUC after training: 0.7835576518656493
User 3961 does not improve AUC. Reverting changes.
Training on augumented user 51807 21/50 current_auc = 0.7837529291594063
User 51807 AUC after training: 0.7832797572553026
User 51807 does not improve AUC. Reverting changes.
Training on augumented user 126504 22/50 current_auc = 0.7837529291594063
User 126504 AUC after training: 0.783332331911314
User 126504 does not improve AUC. Reverting changes.
Training on augumented user 12194 23/50 current_auc = 0.7837529291594063
User 12194 AUC after training: 0.7837529291594063
User 12194 does not improve AUC. Reverting changes.
Training on augumented user 83474 24/50 current_auc = 0.7837529291594063
User 83474 AUC after training: 0.7835426305353601
User 83474 does not improve AUC. Reverting changes.
Training on augumented user 120240 25/50 current_auc = 0.7837529291594063
User 120240 AUC after training: 0.7835276092050711
User 120240 does not improve AUC. Reverting changes.
Training on augumented user 45170 26/50 current_auc = 0.7837529291594063
User 45170 AUC after training: 0.783212161269002
User 45170 does not improve AUC. Reverting changes.
Training on augumented user 43795 27/50 current_auc = 0.7837529291594063
User 43795 AUC after training: 0.7836327585170942
User 43795 does not improve AUC. Reverting changes.
Training on augumented user 88557 28/50 current_auc = 0.7837529291594063
User 88557 AUC after training: 0.7834074385627591
User 88557 does not improve AUC. Reverting changes.
Training on augumented user 35804 29/50 current_auc = 0.7837529291594063
User 35804 AUC after training: 0.7837003545033947
User 35804 does not improve AUC. Reverting changes.
Training on augumented user 68627 30/50 current_auc = 0.7837529291594063
User 68627 AUC after training: 0.7830769692964008
User 68627 does not improve AUC. Reverting changes.
Training on augumented user 137466 31/50 current_auc = 0.7837529291594063
User 137466 AUC after training: 0.7835576518656492
User 137466 does not improve AUC. Reverting changes.
Training on augumented user 113522 32/50 current_auc = 0.7837529291594063
User 113522 AUC after training: 0.7836477798473833
User 113522 does not improve AUC. Reverting changes.
Training on augumented user 62367 33/50 current_auc = 0.7837529291594063
User 62367 AUC after training: 0.783332331911314
User 62367 does not improve AUC. Reverting changes.
Training on augumented user 66142 34/50 current_auc = 0.7837529291594063
User 66142 AUC after training: 0.7829718199843778
User 66142 does not improve AUC. Reverting changes.
Training on augumented user 31331 35/50 current_auc = 0.7837529291594063
User 31331 AUC after training: 0.7835426305353602
User 31331 does not improve AUC. Reverting changes.
Training on augumented user 82082 36/50 current_auc = 0.7837529291594063
User 82082 AUC after training: 0.7837078651685394
User 82082 does not improve AUC. Reverting changes.
Training on augumented user 20772 37/50 current_auc = 0.7837529291594063
User 20772 AUC after training: 0.7834675238839153
User 20772 does not improve AUC. Reverting changes.
Training on augumented user 9079 38/50 current_auc = 0.7837529291594063
User 9079 AUC after training: 0.7836027158565162
User 9079 does not improve AUC. Reverting changes.
Training on augumented user 19834 39/50 current_auc = 0.7837529291594063
User 19834 AUC after training: 0.783287267920447
User 19834 does not improve AUC. Reverting changes.
Training on augumented user 33496 40/50 current_auc = 0.7837529291594063
User 33496 AUC after training: 0.7837078651685393
User 33496 does not improve AUC. Reverting changes.
Training on augumented user 107609 41/50 current_auc = 0.7837529291594063
User 107609 AUC after training: 0.7834675238839152
User 107609 does not improve AUC. Reverting changes.
Training on augumented user 44311 42/50 current_auc = 0.7837529291594063
User 44311 AUC after training: 0.7836628011776723
User 44311 does not improve AUC. Reverting changes.
Training on augumented user 67301 43/50 current_auc = 0.7837529291594063
User 67301 AUC after training: 0.7835426305353601
User 67301 does not improve AUC. Reverting changes.
Training on augumented user 92896 44/50 current_auc = 0.7837529291594063
User 92896 AUC after training: 0.7835576518656493
User 92896 does not improve AUC. Reverting changes.
Training on augumented user 88640 45/50 current_auc = 0.7837529291594063
User 88640 AUC after training: 0.7830168839752449
User 88640 does not improve AUC. Reverting changes.
Training on augumented user 34801 46/50 current_auc = 0.7837529291594063
User 34801 AUC after training: 0.7837679504896954
User 34801 improves AUC. Keeping the model.
Training on augumented user 99891 47/50 current_auc = 0.7837679504896954
User 99891 AUC after training: 0.7836477798473832
User 99891 does not improve AUC. Reverting changes.
Training on augumented user 105934 48/50 current_auc = 0.7837679504896954
User 105934 AUC after training: 0.7838130144805625
User 105934 improves AUC. Keeping the model.
Training on augumented user 11709 49/50 current_auc = 0.7838130144805625
User 11709 AUC after training: 0.7839632277834525
User 11709 improves AUC. Keeping the model.
[2024-12-02 19:09:39.408015] start test user 46104 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:39.812242] start test user 46104 167/568 recall augumented users by random, augumented_users = [24228, 26488, 112845, 79888, 10923, 71714, 107123, 108682, 4610, 132408, 36700, 70625, 68827, 17246, 23517, 103935, 137008, 39198, 93236, 108337, 59343, 932, 82564, 96331, 76763, 24783, 43997, 26743, 126475, 16518, 39843, 112990, 31478, 4588, 101025, 123250, 42864, 131966, 10374, 117897, 57865, 88110, 74603, 39769, 126803, 124653, 116017, 119089, 106816, 23]
[2024-12-02 19:09:39.828301] user = 46104 Cloud 167/568
[2024-12-02 19:09:39.899534] user = 46104 Local 167/568
[2024-12-02 19:09:39.997122] user = 46104 Local+ 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:42.429920] user = 46104 MPDA- 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8295818992490613
Training on augumented user 24228 0/50 current_auc = 0.8295818992490613
User 24228 AUC after training: 0.8295330100125156
User 24228 does not improve AUC. Reverting changes.
Training on augumented user 26488 1/50 current_auc = 0.8295818992490613
User 26488 AUC after training: 0.8295183432415518
User 26488 does not improve AUC. Reverting changes.
Training on augumented user 112845 2/50 current_auc = 0.8295818992490613
User 112845 AUC after training: 0.8299876799123904
User 112845 improves AUC. Keeping the model.
Training on augumented user 79888 3/50 current_auc = 0.8299876799123904
User 79888 AUC after training: 0.8300121245306633
User 79888 improves AUC. Keeping the model.
Training on augumented user 10923 4/50 current_auc = 0.8300121245306633
User 10923 AUC after training: 0.8299192349812267
User 10923 does not improve AUC. Reverting changes.
Training on augumented user 71714 5/50 current_auc = 0.8300121245306633
User 71714 AUC after training: 0.8298752346683353
User 71714 does not improve AUC. Reverting changes.
Training on augumented user 107123 6/50 current_auc = 0.8300121245306633
User 107123 AUC after training: 0.829855678973717
User 107123 does not improve AUC. Reverting changes.
Training on augumented user 108682 7/50 current_auc = 0.8300121245306633
User 108682 AUC after training: 0.8298263454317897
User 108682 does not improve AUC. Reverting changes.
Training on augumented user 4610 8/50 current_auc = 0.8300121245306633
User 4610 AUC after training: 0.8298019008135169
User 4610 does not improve AUC. Reverting changes.
Training on augumented user 132408 9/50 current_auc = 0.8300121245306633
User 132408 AUC after training: 0.8298752346683356
User 132408 does not improve AUC. Reverting changes.
Training on augumented user 36700 10/50 current_auc = 0.8300121245306633
User 36700 AUC after training: 0.8300023466833543
User 36700 does not improve AUC. Reverting changes.
Training on augumented user 70625 11/50 current_auc = 0.8300121245306633
User 70625 AUC after training: 0.8300414580725908
User 70625 improves AUC. Keeping the model.
Training on augumented user 68827 12/50 current_auc = 0.8300414580725908
User 68827 AUC after training: 0.8300512359198999
User 68827 improves AUC. Keeping the model.
Training on augumented user 17246 13/50 current_auc = 0.8300512359198999
User 17246 AUC after training: 0.8298703457446809
User 17246 does not improve AUC. Reverting changes.
Training on augumented user 23517 14/50 current_auc = 0.8300512359198999
User 23517 AUC after training: 0.8298263454317897
User 23517 does not improve AUC. Reverting changes.
Training on augumented user 103935 15/50 current_auc = 0.8300512359198999
User 103935 AUC after training: 0.8299290128285357
User 103935 does not improve AUC. Reverting changes.
Training on augumented user 137008 16/50 current_auc = 0.8300512359198999
User 137008 AUC after training: 0.8297334558823528
User 137008 does not improve AUC. Reverting changes.
Training on augumented user 39198 17/50 current_auc = 0.8300512359198999
User 39198 AUC after training: 0.8296454552565706
User 39198 does not improve AUC. Reverting changes.
Training on augumented user 93236 18/50 current_auc = 0.8300512359198999
User 93236 AUC after training: 0.8298654568210262
User 93236 does not improve AUC. Reverting changes.
Training on augumented user 108337 19/50 current_auc = 0.8300512359198999
User 108337 AUC after training: 0.830241903942428
User 108337 improves AUC. Keeping the model.
Training on augumented user 59343 20/50 current_auc = 0.830241903942428
User 59343 AUC after training: 0.8303445713391739
User 59343 improves AUC. Keeping the model.
Training on augumented user 932 21/50 current_auc = 0.8303445713391739
User 932 AUC after training: 0.8300756805381726
User 932 does not improve AUC. Reverting changes.
Training on augumented user 82564 22/50 current_auc = 0.8303445713391739
User 82564 AUC after training: 0.8302859042553191
User 82564 does not improve AUC. Reverting changes.
Training on augumented user 96331 23/50 current_auc = 0.8303445713391739
User 96331 AUC after training: 0.8301392365456821
User 96331 does not improve AUC. Reverting changes.
Training on augumented user 76763 24/50 current_auc = 0.8303445713391739
User 76763 AUC after training: 0.8301979036295369
User 76763 does not improve AUC. Reverting changes.
Training on augumented user 24783 25/50 current_auc = 0.8303445713391739
User 24783 AUC after training: 0.8301050140801002
User 24783 does not improve AUC. Reverting changes.
Training on augumented user 43997 26/50 current_auc = 0.8303445713391739
User 43997 AUC after training: 0.8303299045682103
User 43997 does not improve AUC. Reverting changes.
Training on augumented user 26743 27/50 current_auc = 0.8303445713391739
User 26743 AUC after training: 0.8303299045682102
User 26743 does not improve AUC. Reverting changes.
Training on augumented user 126475 28/50 current_auc = 0.8303445713391739
User 126475 AUC after training: 0.8303152377972466
User 126475 does not improve AUC. Reverting changes.
Training on augumented user 16518 29/50 current_auc = 0.8303445713391739
User 16518 AUC after training: 0.8301685700876094
User 16518 does not improve AUC. Reverting changes.
Training on augumented user 39843 30/50 current_auc = 0.8303445713391739
User 39843 AUC after training: 0.8302370150187734
User 39843 does not improve AUC. Reverting changes.
Training on augumented user 112990 31/50 current_auc = 0.8303445713391739
User 112990 AUC after training: 0.8301979036295369
User 112990 does not improve AUC. Reverting changes.
Training on augumented user 31478 32/50 current_auc = 0.8303445713391739
User 31478 AUC after training: 0.8301930147058824
User 31478 does not improve AUC. Reverting changes.
Training on augumented user 4588 33/50 current_auc = 0.8303445713391739
User 4588 AUC after training: 0.8303836827284106
User 4588 improves AUC. Keeping the model.
Training on augumented user 101025 34/50 current_auc = 0.8303836827284106
User 101025 AUC after training: 0.8302516817897372
User 101025 does not improve AUC. Reverting changes.
Training on augumented user 123250 35/50 current_auc = 0.8303836827284106
User 123250 AUC after training: 0.8300903473091366
User 123250 does not improve AUC. Reverting changes.
Training on augumented user 42864 36/50 current_auc = 0.8303836827284106
User 42864 AUC after training: 0.8301734590112642
User 42864 does not improve AUC. Reverting changes.
Training on augumented user 131966 37/50 current_auc = 0.8303836827284106
User 131966 AUC after training: 0.8302076814768461
User 131966 does not improve AUC. Reverting changes.
Training on augumented user 10374 38/50 current_auc = 0.8303836827284106
User 10374 AUC after training: 0.8301196808510639
User 10374 does not improve AUC. Reverting changes.
Training on augumented user 117897 39/50 current_auc = 0.8303836827284106
User 117897 AUC after training: 0.8304423498122653
User 117897 improves AUC. Keeping the model.
Training on augumented user 57865 40/50 current_auc = 0.8304423498122653
User 57865 AUC after training: 0.8307454630788486
User 57865 improves AUC. Keeping the model.
Training on augumented user 88110 41/50 current_auc = 0.8307454630788486
User 88110 AUC after training: 0.8303054599499375
User 88110 does not improve AUC. Reverting changes.
Training on augumented user 74603 42/50 current_auc = 0.8307454630788486
User 74603 AUC after training: 0.8308627972465582
User 74603 improves AUC. Keeping the model.
Training on augumented user 39769 43/50 current_auc = 0.8308627972465582
User 39769 AUC after training: 0.8308921307884856
User 39769 improves AUC. Keeping the model.
Training on augumented user 126803 44/50 current_auc = 0.8308921307884856
User 126803 AUC after training: 0.8309410200250313
User 126803 improves AUC. Keeping the model.
Training on augumented user 124653 45/50 current_auc = 0.8309410200250313
User 124653 AUC after training: 0.8306965738423029
User 124653 does not improve AUC. Reverting changes.
Training on augumented user 116017 46/50 current_auc = 0.8309410200250313
User 116017 AUC after training: 0.830921464330413
User 116017 does not improve AUC. Reverting changes.
Training on augumented user 119089 47/50 current_auc = 0.8309410200250313
User 119089 AUC after training: 0.8308041301627034
User 119089 does not improve AUC. Reverting changes.
Training on augumented user 106816 48/50 current_auc = 0.8309410200250313
User 106816 AUC after training: 0.8308725750938674
User 106816 does not improve AUC. Reverting changes.
Training on augumented user 23 49/50 current_auc = 0.8309410200250313
User 23 AUC after training: 0.8306183510638298
User 23 does not improve AUC. Reverting changes.
[2024-12-02 19:10:15.137164] start test user 46121 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:15.884682] start test user 46121 168/568 recall augumented users by random, augumented_users = [87711, 75814, 129781, 111366, 43433, 103544, 119714, 100348, 19768, 88287, 104112, 51759, 24151, 108603, 47431, 18606, 2994, 82863, 65466, 52226, 125797, 87806, 137547, 122188, 82713, 99440, 72242, 15231, 76962, 43932, 6709, 17526, 29489, 242, 8869, 45201, 50476, 126507, 96460, 58345, 520, 62631, 70426, 102351, 51142, 78802, 18226, 85618, 62977, 118483]
[2024-12-02 19:10:15.907367] user = 46121 Cloud 168/568
[2024-12-02 19:10:15.929451] user = 46121 Local 168/568
[2024-12-02 19:10:16.107500] user = 46121 Local+ 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:19.297600] user = 46121 MPDA- 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 87711 0/50 current_auc = 0.5555555555555556
User 87711 AUC after training: 0.5549645390070922
User 87711 does not improve AUC. Reverting changes.
Training on augumented user 75814 1/50 current_auc = 0.5555555555555556
User 75814 AUC after training: 0.5549645390070922
User 75814 does not improve AUC. Reverting changes.
Training on augumented user 129781 2/50 current_auc = 0.5555555555555556
User 129781 AUC after training: 0.5549645390070922
User 129781 does not improve AUC. Reverting changes.
Training on augumented user 111366 3/50 current_auc = 0.5555555555555556
User 111366 AUC after training: 0.5537825059101655
User 111366 does not improve AUC. Reverting changes.
Training on augumented user 43433 4/50 current_auc = 0.5555555555555556
User 43433 AUC after training: 0.5514184397163121
User 43433 does not improve AUC. Reverting changes.
Training on augumented user 103544 5/50 current_auc = 0.5555555555555556
User 103544 AUC after training: 0.556146572104019
User 103544 improves AUC. Keeping the model.
Training on augumented user 119714 6/50 current_auc = 0.556146572104019
User 119714 AUC after training: 0.5526004728132387
User 119714 does not improve AUC. Reverting changes.
Training on augumented user 100348 7/50 current_auc = 0.556146572104019
User 100348 AUC after training: 0.5543735224586289
User 100348 does not improve AUC. Reverting changes.
Training on augumented user 19768 8/50 current_auc = 0.556146572104019
User 19768 AUC after training: 0.556146572104019
User 19768 does not improve AUC. Reverting changes.
Training on augumented user 88287 9/50 current_auc = 0.556146572104019
User 88287 AUC after training: 0.5567375886524822
User 88287 improves AUC. Keeping the model.
Training on augumented user 104112 10/50 current_auc = 0.5567375886524822
User 104112 AUC after training: 0.5579196217494089
User 104112 improves AUC. Keeping the model.
Training on augumented user 51759 11/50 current_auc = 0.5579196217494089
User 51759 AUC after training: 0.556146572104019
User 51759 does not improve AUC. Reverting changes.
Training on augumented user 24151 12/50 current_auc = 0.5579196217494089
User 24151 AUC after training: 0.5602836879432624
User 24151 improves AUC. Keeping the model.
Training on augumented user 108603 13/50 current_auc = 0.5602836879432624
User 108603 AUC after training: 0.5614657210401891
User 108603 improves AUC. Keeping the model.
Training on augumented user 47431 14/50 current_auc = 0.5614657210401891
User 47431 AUC after training: 0.5626477541371158
User 47431 improves AUC. Keeping the model.
Training on augumented user 18606 15/50 current_auc = 0.5626477541371158
User 18606 AUC after training: 0.5596926713947991
User 18606 does not improve AUC. Reverting changes.
Training on augumented user 2994 16/50 current_auc = 0.5626477541371158
User 2994 AUC after training: 0.5620567375886524
User 2994 does not improve AUC. Reverting changes.
Training on augumented user 82863 17/50 current_auc = 0.5626477541371158
User 82863 AUC after training: 0.5591016548463358
User 82863 does not improve AUC. Reverting changes.
Training on augumented user 65466 18/50 current_auc = 0.5626477541371158
User 65466 AUC after training: 0.5614657210401891
User 65466 does not improve AUC. Reverting changes.
Training on augumented user 52226 19/50 current_auc = 0.5626477541371158
User 52226 AUC after training: 0.5602836879432624
User 52226 does not improve AUC. Reverting changes.
Training on augumented user 125797 20/50 current_auc = 0.5626477541371158
User 125797 AUC after training: 0.5585106382978724
User 125797 does not improve AUC. Reverting changes.
Training on augumented user 87806 21/50 current_auc = 0.5626477541371158
User 87806 AUC after training: 0.5620567375886525
User 87806 does not improve AUC. Reverting changes.
Training on augumented user 137547 22/50 current_auc = 0.5626477541371158
User 137547 AUC after training: 0.5602836879432624
User 137547 does not improve AUC. Reverting changes.
Training on augumented user 122188 23/50 current_auc = 0.5626477541371158
User 122188 AUC after training: 0.5573286052009456
User 122188 does not improve AUC. Reverting changes.
Training on augumented user 82713 24/50 current_auc = 0.5626477541371158
User 82713 AUC after training: 0.5632387706855791
User 82713 improves AUC. Keeping the model.
Training on augumented user 99440 25/50 current_auc = 0.5632387706855791
User 99440 AUC after training: 0.5626477541371159
User 99440 does not improve AUC. Reverting changes.
Training on augumented user 72242 26/50 current_auc = 0.5632387706855791
User 72242 AUC after training: 0.5620567375886525
User 72242 does not improve AUC. Reverting changes.
Training on augumented user 15231 27/50 current_auc = 0.5632387706855791
User 15231 AUC after training: 0.5620567375886525
User 15231 does not improve AUC. Reverting changes.
Training on augumented user 76962 28/50 current_auc = 0.5632387706855791
User 76962 AUC after training: 0.5638297872340425
User 76962 improves AUC. Keeping the model.
Training on augumented user 43932 29/50 current_auc = 0.5638297872340425
User 43932 AUC after training: 0.5644208037825059
User 43932 improves AUC. Keeping the model.
Training on augumented user 6709 30/50 current_auc = 0.5644208037825059
User 6709 AUC after training: 0.5626477541371159
User 6709 does not improve AUC. Reverting changes.
Training on augumented user 17526 31/50 current_auc = 0.5644208037825059
User 17526 AUC after training: 0.5650118203309693
User 17526 improves AUC. Keeping the model.
Training on augumented user 29489 32/50 current_auc = 0.5650118203309693
User 29489 AUC after training: 0.5626477541371159
User 29489 does not improve AUC. Reverting changes.
Training on augumented user 242 33/50 current_auc = 0.5650118203309693
User 242 AUC after training: 0.5626477541371159
User 242 does not improve AUC. Reverting changes.
Training on augumented user 8869 34/50 current_auc = 0.5650118203309693
User 8869 AUC after training: 0.5632387706855791
User 8869 does not improve AUC. Reverting changes.
Training on augumented user 45201 35/50 current_auc = 0.5650118203309693
User 45201 AUC after training: 0.5632387706855791
User 45201 does not improve AUC. Reverting changes.
Training on augumented user 50476 36/50 current_auc = 0.5650118203309693
User 50476 AUC after training: 0.5632387706855791
User 50476 does not improve AUC. Reverting changes.
Training on augumented user 126507 37/50 current_auc = 0.5650118203309693
User 126507 AUC after training: 0.5644208037825059
User 126507 does not improve AUC. Reverting changes.
Training on augumented user 96460 38/50 current_auc = 0.5650118203309693
User 96460 AUC after training: 0.5644208037825059
User 96460 does not improve AUC. Reverting changes.
Training on augumented user 58345 39/50 current_auc = 0.5650118203309693
User 58345 AUC after training: 0.5656028368794327
User 58345 improves AUC. Keeping the model.
Training on augumented user 520 40/50 current_auc = 0.5656028368794327
User 520 AUC after training: 0.5667848699763594
User 520 improves AUC. Keeping the model.
Training on augumented user 62631 41/50 current_auc = 0.5667848699763594
User 62631 AUC after training: 0.5632387706855791
User 62631 does not improve AUC. Reverting changes.
Training on augumented user 70426 42/50 current_auc = 0.5667848699763594
User 70426 AUC after training: 0.5656028368794327
User 70426 does not improve AUC. Reverting changes.
Training on augumented user 102351 43/50 current_auc = 0.5667848699763594
User 102351 AUC after training: 0.5650118203309693
User 102351 does not improve AUC. Reverting changes.
Training on augumented user 51142 44/50 current_auc = 0.5667848699763594
User 51142 AUC after training: 0.5650118203309693
User 51142 does not improve AUC. Reverting changes.
Training on augumented user 78802 45/50 current_auc = 0.5667848699763594
User 78802 AUC after training: 0.5602836879432624
User 78802 does not improve AUC. Reverting changes.
Training on augumented user 18226 46/50 current_auc = 0.5667848699763594
User 18226 AUC after training: 0.5602836879432624
User 18226 does not improve AUC. Reverting changes.
Training on augumented user 85618 47/50 current_auc = 0.5667848699763594
User 85618 AUC after training: 0.5656028368794326
User 85618 does not improve AUC. Reverting changes.
Training on augumented user 62977 48/50 current_auc = 0.5667848699763594
User 62977 AUC after training: 0.566193853427896
User 62977 does not improve AUC. Reverting changes.
Training on augumented user 118483 49/50 current_auc = 0.5667848699763594
User 118483 AUC after training: 0.566193853427896
User 118483 does not improve AUC. Reverting changes.
[2024-12-02 19:10:50.553604] start test user 46169 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:51.226899] start test user 46169 169/568 recall augumented users by random, augumented_users = [47574, 62331, 56079, 5126, 24489, 109501, 37123, 89028, 28589, 8731, 84395, 57009, 107329, 113802, 14035, 88856, 128890, 89519, 35174, 19471, 40144, 35226, 91070, 131760, 47526, 121993, 111034, 109793, 39551, 95183, 107169, 132213, 2913, 47250, 110786, 129631, 15050, 75595, 9396, 38348, 43655, 76679, 85322, 24917, 14940, 112076, 135489, 110942, 2795, 36109]
[2024-12-02 19:10:51.242802] user = 46169 Cloud 169/568
[2024-12-02 19:10:51.254848] user = 46169 Local 169/568
[2024-12-02 19:10:51.283703] user = 46169 Local+ 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:53.323985] user = 46169 MPDA- 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 47574 0/50 current_auc = 1.0
User 47574 AUC after training: 1.0
User 47574 does not improve AUC. Reverting changes.
Training on augumented user 62331 1/50 current_auc = 1.0
User 62331 AUC after training: 1.0
User 62331 does not improve AUC. Reverting changes.
Training on augumented user 56079 2/50 current_auc = 1.0
User 56079 AUC after training: 1.0
User 56079 does not improve AUC. Reverting changes.
Training on augumented user 5126 3/50 current_auc = 1.0
User 5126 AUC after training: 1.0
User 5126 does not improve AUC. Reverting changes.
Training on augumented user 24489 4/50 current_auc = 1.0
User 24489 AUC after training: 1.0
User 24489 does not improve AUC. Reverting changes.
Training on augumented user 109501 5/50 current_auc = 1.0
User 109501 AUC after training: 1.0
User 109501 does not improve AUC. Reverting changes.
Training on augumented user 37123 6/50 current_auc = 1.0
User 37123 AUC after training: 1.0
User 37123 does not improve AUC. Reverting changes.
Training on augumented user 89028 7/50 current_auc = 1.0
User 89028 AUC after training: 1.0
User 89028 does not improve AUC. Reverting changes.
Training on augumented user 28589 8/50 current_auc = 1.0
User 28589 AUC after training: 1.0
User 28589 does not improve AUC. Reverting changes.
Training on augumented user 8731 9/50 current_auc = 1.0
User 8731 AUC after training: 1.0
User 8731 does not improve AUC. Reverting changes.
Training on augumented user 84395 10/50 current_auc = 1.0
User 84395 AUC after training: 1.0
User 84395 does not improve AUC. Reverting changes.
Training on augumented user 57009 11/50 current_auc = 1.0
User 57009 AUC after training: 1.0
User 57009 does not improve AUC. Reverting changes.
Training on augumented user 107329 12/50 current_auc = 1.0
User 107329 AUC after training: 1.0
User 107329 does not improve AUC. Reverting changes.
Training on augumented user 113802 13/50 current_auc = 1.0
User 113802 AUC after training: 1.0
User 113802 does not improve AUC. Reverting changes.
Training on augumented user 14035 14/50 current_auc = 1.0
User 14035 AUC after training: 1.0
User 14035 does not improve AUC. Reverting changes.
Training on augumented user 88856 15/50 current_auc = 1.0
User 88856 AUC after training: 1.0
User 88856 does not improve AUC. Reverting changes.
Training on augumented user 128890 16/50 current_auc = 1.0
User 128890 AUC after training: 1.0
User 128890 does not improve AUC. Reverting changes.
Training on augumented user 89519 17/50 current_auc = 1.0
User 89519 AUC after training: 1.0
User 89519 does not improve AUC. Reverting changes.
Training on augumented user 35174 18/50 current_auc = 1.0
User 35174 AUC after training: 1.0
User 35174 does not improve AUC. Reverting changes.
Training on augumented user 19471 19/50 current_auc = 1.0
User 19471 AUC after training: 1.0
User 19471 does not improve AUC. Reverting changes.
Training on augumented user 40144 20/50 current_auc = 1.0
User 40144 AUC after training: 1.0
User 40144 does not improve AUC. Reverting changes.
Training on augumented user 35226 21/50 current_auc = 1.0
User 35226 AUC after training: 1.0
User 35226 does not improve AUC. Reverting changes.
Training on augumented user 91070 22/50 current_auc = 1.0
User 91070 AUC after training: 1.0
User 91070 does not improve AUC. Reverting changes.
Training on augumented user 131760 23/50 current_auc = 1.0
User 131760 AUC after training: 1.0
User 131760 does not improve AUC. Reverting changes.
Training on augumented user 47526 24/50 current_auc = 1.0
User 47526 AUC after training: 1.0
User 47526 does not improve AUC. Reverting changes.
Training on augumented user 121993 25/50 current_auc = 1.0
User 121993 AUC after training: 1.0
User 121993 does not improve AUC. Reverting changes.
Training on augumented user 111034 26/50 current_auc = 1.0
User 111034 AUC after training: 1.0
User 111034 does not improve AUC. Reverting changes.
Training on augumented user 109793 27/50 current_auc = 1.0
User 109793 AUC after training: 1.0
User 109793 does not improve AUC. Reverting changes.
Training on augumented user 39551 28/50 current_auc = 1.0
User 39551 AUC after training: 1.0
User 39551 does not improve AUC. Reverting changes.
Training on augumented user 95183 29/50 current_auc = 1.0
User 95183 AUC after training: 1.0
User 95183 does not improve AUC. Reverting changes.
Training on augumented user 107169 30/50 current_auc = 1.0
User 107169 AUC after training: 1.0
User 107169 does not improve AUC. Reverting changes.
Training on augumented user 132213 31/50 current_auc = 1.0
User 132213 AUC after training: 1.0
User 132213 does not improve AUC. Reverting changes.
Training on augumented user 2913 32/50 current_auc = 1.0
User 2913 AUC after training: 1.0
User 2913 does not improve AUC. Reverting changes.
Training on augumented user 47250 33/50 current_auc = 1.0
User 47250 AUC after training: 1.0
User 47250 does not improve AUC. Reverting changes.
Training on augumented user 110786 34/50 current_auc = 1.0
User 110786 AUC after training: 1.0
User 110786 does not improve AUC. Reverting changes.
Training on augumented user 129631 35/50 current_auc = 1.0
User 129631 AUC after training: 1.0
User 129631 does not improve AUC. Reverting changes.
Training on augumented user 15050 36/50 current_auc = 1.0
User 15050 AUC after training: 1.0
User 15050 does not improve AUC. Reverting changes.
Training on augumented user 75595 37/50 current_auc = 1.0
User 75595 AUC after training: 1.0
User 75595 does not improve AUC. Reverting changes.
Training on augumented user 9396 38/50 current_auc = 1.0
User 9396 AUC after training: 1.0
User 9396 does not improve AUC. Reverting changes.
Training on augumented user 38348 39/50 current_auc = 1.0
User 38348 AUC after training: 1.0
User 38348 does not improve AUC. Reverting changes.
Training on augumented user 43655 40/50 current_auc = 1.0
User 43655 AUC after training: 1.0
User 43655 does not improve AUC. Reverting changes.
Training on augumented user 76679 41/50 current_auc = 1.0
User 76679 AUC after training: 1.0
User 76679 does not improve AUC. Reverting changes.
Training on augumented user 85322 42/50 current_auc = 1.0
User 85322 AUC after training: 1.0
User 85322 does not improve AUC. Reverting changes.
Training on augumented user 24917 43/50 current_auc = 1.0
User 24917 AUC after training: 1.0
User 24917 does not improve AUC. Reverting changes.
Training on augumented user 14940 44/50 current_auc = 1.0
User 14940 AUC after training: 1.0
User 14940 does not improve AUC. Reverting changes.
Training on augumented user 112076 45/50 current_auc = 1.0
User 112076 AUC after training: 1.0
User 112076 does not improve AUC. Reverting changes.
Training on augumented user 135489 46/50 current_auc = 1.0
User 135489 AUC after training: 1.0
User 135489 does not improve AUC. Reverting changes.
Training on augumented user 110942 47/50 current_auc = 1.0
User 110942 AUC after training: 1.0
User 110942 does not improve AUC. Reverting changes.
Training on augumented user 2795 48/50 current_auc = 1.0
User 2795 AUC after training: 1.0
User 2795 does not improve AUC. Reverting changes.
Training on augumented user 36109 49/50 current_auc = 1.0
User 36109 AUC after training: 1.0
User 36109 does not improve AUC. Reverting changes.
[2024-12-02 19:11:28.860219] start test user 46190 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:29.731438] start test user 46190 170/568 recall augumented users by random, augumented_users = [123580, 113517, 1509, 88071, 14743, 76758, 69882, 25688, 127370, 61732, 2708, 99038, 19794, 16054, 98213, 46938, 132737, 133809, 13979, 124965, 91766, 85070, 103844, 67518, 22059, 115885, 90666, 35246, 36628, 97577, 92367, 52395, 113530, 99535, 85266, 75838, 103568, 55060, 86698, 71276, 125506, 110954, 17105, 3204, 48900, 40737, 59777, 59333, 114295, 89573]
[2024-12-02 19:11:29.748098] user = 46190 Cloud 170/568
[2024-12-02 19:11:29.766947] user = 46190 Local 170/568
[2024-12-02 19:11:29.827813] user = 46190 Local+ 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:32.241450] user = 46190 MPDA- 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6559139784946236
Training on augumented user 123580 0/50 current_auc = 0.6559139784946236
User 123580 AUC after training: 0.6606929510155317
User 123580 improves AUC. Keeping the model.
Training on augumented user 113517 1/50 current_auc = 0.6606929510155317
User 113517 AUC after training: 0.6571087216248507
User 113517 does not improve AUC. Reverting changes.
Training on augumented user 1509 2/50 current_auc = 0.6606929510155317
User 1509 AUC after training: 0.6583034647550776
User 1509 does not improve AUC. Reverting changes.
Training on augumented user 88071 3/50 current_auc = 0.6606929510155317
User 88071 AUC after training: 0.6583034647550776
User 88071 does not improve AUC. Reverting changes.
Training on augumented user 14743 4/50 current_auc = 0.6606929510155317
User 14743 AUC after training: 0.6606929510155317
User 14743 does not improve AUC. Reverting changes.
Training on augumented user 76758 5/50 current_auc = 0.6606929510155317
User 76758 AUC after training: 0.6559139784946236
User 76758 does not improve AUC. Reverting changes.
Training on augumented user 69882 6/50 current_auc = 0.6606929510155317
User 69882 AUC after training: 0.6606929510155317
User 69882 does not improve AUC. Reverting changes.
Training on augumented user 25688 7/50 current_auc = 0.6606929510155317
User 25688 AUC after training: 0.6583034647550776
User 25688 does not improve AUC. Reverting changes.
Training on augumented user 127370 8/50 current_auc = 0.6606929510155317
User 127370 AUC after training: 0.6606929510155317
User 127370 does not improve AUC. Reverting changes.
Training on augumented user 61732 9/50 current_auc = 0.6606929510155317
User 61732 AUC after training: 0.6606929510155317
User 61732 does not improve AUC. Reverting changes.
Training on augumented user 2708 10/50 current_auc = 0.6606929510155317
User 2708 AUC after training: 0.6594982078853047
User 2708 does not improve AUC. Reverting changes.
Training on augumented user 99038 11/50 current_auc = 0.6606929510155317
User 99038 AUC after training: 0.6618876941457587
User 99038 improves AUC. Keeping the model.
Training on augumented user 19794 12/50 current_auc = 0.6618876941457587
User 19794 AUC after training: 0.6606929510155317
User 19794 does not improve AUC. Reverting changes.
Training on augumented user 16054 13/50 current_auc = 0.6618876941457587
User 16054 AUC after training: 0.6606929510155316
User 16054 does not improve AUC. Reverting changes.
Training on augumented user 98213 14/50 current_auc = 0.6618876941457587
User 98213 AUC after training: 0.6559139784946237
User 98213 does not improve AUC. Reverting changes.
Training on augumented user 46938 15/50 current_auc = 0.6618876941457587
User 46938 AUC after training: 0.6594982078853047
User 46938 does not improve AUC. Reverting changes.
Training on augumented user 132737 16/50 current_auc = 0.6618876941457587
User 132737 AUC after training: 0.6618876941457587
User 132737 does not improve AUC. Reverting changes.
Training on augumented user 133809 17/50 current_auc = 0.6618876941457587
User 133809 AUC after training: 0.6630824372759856
User 133809 improves AUC. Keeping the model.
Training on augumented user 13979 18/50 current_auc = 0.6630824372759856
User 13979 AUC after training: 0.6618876941457587
User 13979 does not improve AUC. Reverting changes.
Training on augumented user 124965 19/50 current_auc = 0.6630824372759856
User 124965 AUC after training: 0.6630824372759856
User 124965 does not improve AUC. Reverting changes.
Training on augumented user 91766 20/50 current_auc = 0.6630824372759856
User 91766 AUC after training: 0.6630824372759856
User 91766 does not improve AUC. Reverting changes.
Training on augumented user 85070 21/50 current_auc = 0.6630824372759856
User 85070 AUC after training: 0.6630824372759856
User 85070 does not improve AUC. Reverting changes.
Training on augumented user 103844 22/50 current_auc = 0.6630824372759856
User 103844 AUC after training: 0.6630824372759856
User 103844 does not improve AUC. Reverting changes.
Training on augumented user 67518 23/50 current_auc = 0.6630824372759856
User 67518 AUC after training: 0.6606929510155317
User 67518 does not improve AUC. Reverting changes.
Training on augumented user 22059 24/50 current_auc = 0.6630824372759856
User 22059 AUC after training: 0.6630824372759856
User 22059 does not improve AUC. Reverting changes.
Training on augumented user 115885 25/50 current_auc = 0.6630824372759856
User 115885 AUC after training: 0.6642771804062126
User 115885 improves AUC. Keeping the model.
Training on augumented user 90666 26/50 current_auc = 0.6642771804062126
User 90666 AUC after training: 0.6642771804062126
User 90666 does not improve AUC. Reverting changes.
Training on augumented user 35246 27/50 current_auc = 0.6642771804062126
User 35246 AUC after training: 0.6618876941457587
User 35246 does not improve AUC. Reverting changes.
Training on augumented user 36628 28/50 current_auc = 0.6642771804062126
User 36628 AUC after training: 0.6606929510155317
User 36628 does not improve AUC. Reverting changes.
Training on augumented user 97577 29/50 current_auc = 0.6642771804062126
User 97577 AUC after training: 0.6594982078853047
User 97577 does not improve AUC. Reverting changes.
Training on augumented user 92367 30/50 current_auc = 0.6642771804062126
User 92367 AUC after training: 0.6618876941457587
User 92367 does not improve AUC. Reverting changes.
Training on augumented user 52395 31/50 current_auc = 0.6642771804062126
User 52395 AUC after training: 0.6642771804062126
User 52395 does not improve AUC. Reverting changes.
Training on augumented user 113530 32/50 current_auc = 0.6642771804062126
User 113530 AUC after training: 0.6642771804062126
User 113530 does not improve AUC. Reverting changes.
Training on augumented user 99535 33/50 current_auc = 0.6642771804062126
User 99535 AUC after training: 0.6630824372759856
User 99535 does not improve AUC. Reverting changes.
Training on augumented user 85266 34/50 current_auc = 0.6642771804062126
User 85266 AUC after training: 0.6630824372759856
User 85266 does not improve AUC. Reverting changes.
Training on augumented user 75838 35/50 current_auc = 0.6642771804062126
User 75838 AUC after training: 0.6606929510155316
User 75838 does not improve AUC. Reverting changes.
Training on augumented user 103568 36/50 current_auc = 0.6642771804062126
User 103568 AUC after training: 0.6630824372759856
User 103568 does not improve AUC. Reverting changes.
Training on augumented user 55060 37/50 current_auc = 0.6642771804062126
User 55060 AUC after training: 0.6630824372759857
User 55060 does not improve AUC. Reverting changes.
Training on augumented user 86698 38/50 current_auc = 0.6642771804062126
User 86698 AUC after training: 0.6642771804062126
User 86698 does not improve AUC. Reverting changes.
Training on augumented user 71276 39/50 current_auc = 0.6642771804062126
User 71276 AUC after training: 0.6618876941457587
User 71276 does not improve AUC. Reverting changes.
Training on augumented user 125506 40/50 current_auc = 0.6642771804062126
User 125506 AUC after training: 0.6630824372759856
User 125506 does not improve AUC. Reverting changes.
Training on augumented user 110954 41/50 current_auc = 0.6642771804062126
User 110954 AUC after training: 0.6606929510155317
User 110954 does not improve AUC. Reverting changes.
Training on augumented user 17105 42/50 current_auc = 0.6642771804062126
User 17105 AUC after training: 0.6594982078853047
User 17105 does not improve AUC. Reverting changes.
Training on augumented user 3204 43/50 current_auc = 0.6642771804062126
User 3204 AUC after training: 0.6630824372759856
User 3204 does not improve AUC. Reverting changes.
Training on augumented user 48900 44/50 current_auc = 0.6642771804062126
User 48900 AUC after training: 0.6630824372759856
User 48900 does not improve AUC. Reverting changes.
Training on augumented user 40737 45/50 current_auc = 0.6642771804062126
User 40737 AUC after training: 0.6642771804062126
User 40737 does not improve AUC. Reverting changes.
Training on augumented user 59777 46/50 current_auc = 0.6642771804062126
User 59777 AUC after training: 0.6618876941457587
User 59777 does not improve AUC. Reverting changes.
Training on augumented user 59333 47/50 current_auc = 0.6642771804062126
User 59333 AUC after training: 0.6642771804062126
User 59333 does not improve AUC. Reverting changes.
Training on augumented user 114295 48/50 current_auc = 0.6642771804062126
User 114295 AUC after training: 0.6642771804062126
User 114295 does not improve AUC. Reverting changes.
Training on augumented user 89573 49/50 current_auc = 0.6642771804062126
User 89573 AUC after training: 0.6630824372759856
User 89573 does not improve AUC. Reverting changes.
[2024-12-02 19:11:57.358866] start test user 46207 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:57.832975] start test user 46207 171/568 recall augumented users by random, augumented_users = [88480, 100101, 125864, 122214, 126780, 79359, 25892, 26517, 42803, 109262, 61423, 91191, 68456, 5358, 19733, 105251, 93745, 31091, 108896, 26200, 23404, 112421, 33596, 109498, 71189, 11820, 76156, 138432, 93931, 96451, 122637, 112514, 2542, 84314, 55170, 72552, 2661, 117892, 59780, 19044, 84773, 123000, 47173, 125218, 13392, 73586, 12391, 94257, 103851, 36683]
[2024-12-02 19:11:57.847674] user = 46207 Cloud 171/568
[2024-12-02 19:11:57.861225] user = 46207 Local 171/568
[2024-12-02 19:11:57.904734] user = 46207 Local+ 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:01.077212] user = 46207 MPDA- 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6024553571428571
Training on augumented user 88480 0/50 current_auc = 0.6024553571428571
User 88480 AUC after training: 0.6020089285714286
User 88480 does not improve AUC. Reverting changes.
Training on augumented user 100101 1/50 current_auc = 0.6024553571428571
User 100101 AUC after training: 0.6022321428571429
User 100101 does not improve AUC. Reverting changes.
Training on augumented user 125864 2/50 current_auc = 0.6024553571428571
User 125864 AUC after training: 0.6020089285714286
User 125864 does not improve AUC. Reverting changes.
Training on augumented user 122214 3/50 current_auc = 0.6024553571428571
User 122214 AUC after training: 0.6029017857142858
User 122214 improves AUC. Keeping the model.
Training on augumented user 126780 4/50 current_auc = 0.6029017857142858
User 126780 AUC after training: 0.6020089285714286
User 126780 does not improve AUC. Reverting changes.
Training on augumented user 79359 5/50 current_auc = 0.6029017857142858
User 79359 AUC after training: 0.6024553571428571
User 79359 does not improve AUC. Reverting changes.
Training on augumented user 25892 6/50 current_auc = 0.6029017857142858
User 25892 AUC after training: 0.6020089285714286
User 25892 does not improve AUC. Reverting changes.
Training on augumented user 26517 7/50 current_auc = 0.6029017857142858
User 26517 AUC after training: 0.6015625
User 26517 does not improve AUC. Reverting changes.
Training on augumented user 42803 8/50 current_auc = 0.6029017857142858
User 42803 AUC after training: 0.6026785714285715
User 42803 does not improve AUC. Reverting changes.
Training on augumented user 109262 9/50 current_auc = 0.6029017857142858
User 109262 AUC after training: 0.6035714285714285
User 109262 improves AUC. Keeping the model.
Training on augumented user 61423 10/50 current_auc = 0.6035714285714285
User 61423 AUC after training: 0.6029017857142858
User 61423 does not improve AUC. Reverting changes.
Training on augumented user 91191 11/50 current_auc = 0.6035714285714285
User 91191 AUC after training: 0.6040178571428572
User 91191 improves AUC. Keeping the model.
Training on augumented user 68456 12/50 current_auc = 0.6040178571428572
User 68456 AUC after training: 0.6040178571428572
User 68456 does not improve AUC. Reverting changes.
Training on augumented user 5358 13/50 current_auc = 0.6040178571428572
User 5358 AUC after training: 0.6035714285714286
User 5358 does not improve AUC. Reverting changes.
Training on augumented user 19733 14/50 current_auc = 0.6040178571428572
User 19733 AUC after training: 0.6044642857142857
User 19733 improves AUC. Keeping the model.
Training on augumented user 105251 15/50 current_auc = 0.6044642857142857
User 105251 AUC after training: 0.6049107142857143
User 105251 improves AUC. Keeping the model.
Training on augumented user 93745 16/50 current_auc = 0.6049107142857143
User 93745 AUC after training: 0.6022321428571429
User 93745 does not improve AUC. Reverting changes.
Training on augumented user 31091 17/50 current_auc = 0.6049107142857143
User 31091 AUC after training: 0.6044642857142857
User 31091 does not improve AUC. Reverting changes.
Training on augumented user 108896 18/50 current_auc = 0.6049107142857143
User 108896 AUC after training: 0.6035714285714285
User 108896 does not improve AUC. Reverting changes.
Training on augumented user 26200 19/50 current_auc = 0.6049107142857143
User 26200 AUC after training: 0.6035714285714286
User 26200 does not improve AUC. Reverting changes.
Training on augumented user 23404 20/50 current_auc = 0.6049107142857143
User 23404 AUC after training: 0.6044642857142857
User 23404 does not improve AUC. Reverting changes.
Training on augumented user 112421 21/50 current_auc = 0.6049107142857143
User 112421 AUC after training: 0.6044642857142858
User 112421 does not improve AUC. Reverting changes.
Training on augumented user 33596 22/50 current_auc = 0.6049107142857143
User 33596 AUC after training: 0.6031249999999999
User 33596 does not improve AUC. Reverting changes.
Training on augumented user 109498 23/50 current_auc = 0.6049107142857143
User 109498 AUC after training: 0.6035714285714286
User 109498 does not improve AUC. Reverting changes.
Training on augumented user 71189 24/50 current_auc = 0.6049107142857143
User 71189 AUC after training: 0.5995535714285715
User 71189 does not improve AUC. Reverting changes.
Training on augumented user 11820 25/50 current_auc = 0.6049107142857143
User 11820 AUC after training: 0.6017857142857143
User 11820 does not improve AUC. Reverting changes.
Training on augumented user 76156 26/50 current_auc = 0.6049107142857143
User 76156 AUC after training: 0.6017857142857144
User 76156 does not improve AUC. Reverting changes.
Training on augumented user 138432 27/50 current_auc = 0.6049107142857143
User 138432 AUC after training: 0.6033482142857143
User 138432 does not improve AUC. Reverting changes.
Training on augumented user 93931 28/50 current_auc = 0.6049107142857143
User 93931 AUC after training: 0.6040178571428572
User 93931 does not improve AUC. Reverting changes.
Training on augumented user 96451 29/50 current_auc = 0.6049107142857143
User 96451 AUC after training: 0.6017857142857144
User 96451 does not improve AUC. Reverting changes.
Training on augumented user 122637 30/50 current_auc = 0.6049107142857143
User 122637 AUC after training: 0.6053571428571428
User 122637 improves AUC. Keeping the model.
Training on augumented user 112514 31/50 current_auc = 0.6053571428571428
User 112514 AUC after training: 0.6022321428571429
User 112514 does not improve AUC. Reverting changes.
Training on augumented user 2542 32/50 current_auc = 0.6053571428571428
User 2542 AUC after training: 0.6013392857142857
User 2542 does not improve AUC. Reverting changes.
Training on augumented user 84314 33/50 current_auc = 0.6053571428571428
User 84314 AUC after training: 0.6053571428571429
User 84314 improves AUC. Keeping the model.
Training on augumented user 55170 34/50 current_auc = 0.6053571428571429
User 55170 AUC after training: 0.6042410714285714
User 55170 does not improve AUC. Reverting changes.
Training on augumented user 72552 35/50 current_auc = 0.6053571428571429
User 72552 AUC after training: 0.6008928571428571
User 72552 does not improve AUC. Reverting changes.
Training on augumented user 2661 36/50 current_auc = 0.6053571428571429
User 2661 AUC after training: 0.6026785714285714
User 2661 does not improve AUC. Reverting changes.
Training on augumented user 117892 37/50 current_auc = 0.6053571428571429
User 117892 AUC after training: 0.6053571428571428
User 117892 does not improve AUC. Reverting changes.
Training on augumented user 59780 38/50 current_auc = 0.6053571428571429
User 59780 AUC after training: 0.6015625
User 59780 does not improve AUC. Reverting changes.
Training on augumented user 19044 39/50 current_auc = 0.6053571428571429
User 19044 AUC after training: 0.6049107142857143
User 19044 does not improve AUC. Reverting changes.
Training on augumented user 84773 40/50 current_auc = 0.6053571428571429
User 84773 AUC after training: 0.6040178571428572
User 84773 does not improve AUC. Reverting changes.
Training on augumented user 123000 41/50 current_auc = 0.6053571428571429
User 123000 AUC after training: 0.6053571428571429
User 123000 does not improve AUC. Reverting changes.
Training on augumented user 47173 42/50 current_auc = 0.6053571428571429
User 47173 AUC after training: 0.6017857142857144
User 47173 does not improve AUC. Reverting changes.
Training on augumented user 125218 43/50 current_auc = 0.6053571428571429
User 125218 AUC after training: 0.6040178571428572
User 125218 does not improve AUC. Reverting changes.
Training on augumented user 13392 44/50 current_auc = 0.6053571428571429
User 13392 AUC after training: 0.6053571428571429
User 13392 does not improve AUC. Reverting changes.
Training on augumented user 73586 45/50 current_auc = 0.6053571428571429
User 73586 AUC after training: 0.603125
User 73586 does not improve AUC. Reverting changes.
Training on augumented user 12391 46/50 current_auc = 0.6053571428571429
User 12391 AUC after training: 0.6049107142857143
User 12391 does not improve AUC. Reverting changes.
Training on augumented user 94257 47/50 current_auc = 0.6053571428571429
User 94257 AUC after training: 0.6040178571428572
User 94257 does not improve AUC. Reverting changes.
Training on augumented user 103851 48/50 current_auc = 0.6053571428571429
User 103851 AUC after training: 0.6049107142857143
User 103851 does not improve AUC. Reverting changes.
Training on augumented user 36683 49/50 current_auc = 0.6053571428571429
User 36683 AUC after training: 0.6024553571428571
User 36683 does not improve AUC. Reverting changes.
[2024-12-02 19:12:34.671726] start test user 46233 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:35.169789] start test user 46233 172/568 recall augumented users by random, augumented_users = [81379, 17082, 56558, 83092, 57795, 108801, 80394, 94408, 84652, 48302, 123563, 120467, 43289, 104989, 137650, 122972, 63586, 36020, 120109, 20331, 37017, 95449, 77800, 19001, 32316, 106470, 106333, 72647, 70115, 6871, 99218, 67691, 10812, 80137, 43706, 128920, 52045, 121481, 102352, 37122, 66066, 83205, 44016, 121090, 90392, 18156, 50855, 8171, 18125, 113784]
[2024-12-02 19:12:35.185262] user = 46233 Cloud 172/568
[2024-12-02 19:12:35.195265] user = 46233 Local 172/568
[2024-12-02 19:12:35.221955] user = 46233 Local+ 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:37.913628] user = 46233 MPDA- 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.95
Training on augumented user 81379 0/50 current_auc = 0.95
User 81379 AUC after training: 0.95
User 81379 does not improve AUC. Reverting changes.
Training on augumented user 17082 1/50 current_auc = 0.95
User 17082 AUC after training: 0.95
User 17082 does not improve AUC. Reverting changes.
Training on augumented user 56558 2/50 current_auc = 0.95
User 56558 AUC after training: 0.95
User 56558 does not improve AUC. Reverting changes.
Training on augumented user 83092 3/50 current_auc = 0.95
User 83092 AUC after training: 0.95
User 83092 does not improve AUC. Reverting changes.
Training on augumented user 57795 4/50 current_auc = 0.95
User 57795 AUC after training: 0.95
User 57795 does not improve AUC. Reverting changes.
Training on augumented user 108801 5/50 current_auc = 0.95
User 108801 AUC after training: 0.95
User 108801 does not improve AUC. Reverting changes.
Training on augumented user 80394 6/50 current_auc = 0.95
User 80394 AUC after training: 0.95
User 80394 does not improve AUC. Reverting changes.
Training on augumented user 94408 7/50 current_auc = 0.95
User 94408 AUC after training: 0.95
User 94408 does not improve AUC. Reverting changes.
Training on augumented user 84652 8/50 current_auc = 0.95
User 84652 AUC after training: 0.95
User 84652 does not improve AUC. Reverting changes.
Training on augumented user 48302 9/50 current_auc = 0.95
User 48302 AUC after training: 0.95
User 48302 does not improve AUC. Reverting changes.
Training on augumented user 123563 10/50 current_auc = 0.95
User 123563 AUC after training: 0.95
User 123563 does not improve AUC. Reverting changes.
Training on augumented user 120467 11/50 current_auc = 0.95
User 120467 AUC after training: 0.95
User 120467 does not improve AUC. Reverting changes.
Training on augumented user 43289 12/50 current_auc = 0.95
User 43289 AUC after training: 0.95
User 43289 does not improve AUC. Reverting changes.
Training on augumented user 104989 13/50 current_auc = 0.95
User 104989 AUC after training: 0.95
User 104989 does not improve AUC. Reverting changes.
Training on augumented user 137650 14/50 current_auc = 0.95
User 137650 AUC after training: 0.95
User 137650 does not improve AUC. Reverting changes.
Training on augumented user 122972 15/50 current_auc = 0.95
User 122972 AUC after training: 0.95
User 122972 does not improve AUC. Reverting changes.
Training on augumented user 63586 16/50 current_auc = 0.95
User 63586 AUC after training: 0.95
User 63586 does not improve AUC. Reverting changes.
Training on augumented user 36020 17/50 current_auc = 0.95
User 36020 AUC after training: 0.95
User 36020 does not improve AUC. Reverting changes.
Training on augumented user 120109 18/50 current_auc = 0.95
User 120109 AUC after training: 0.95
User 120109 does not improve AUC. Reverting changes.
Training on augumented user 20331 19/50 current_auc = 0.95
User 20331 AUC after training: 0.95
User 20331 does not improve AUC. Reverting changes.
Training on augumented user 37017 20/50 current_auc = 0.95
User 37017 AUC after training: 0.95
User 37017 does not improve AUC. Reverting changes.
Training on augumented user 95449 21/50 current_auc = 0.95
User 95449 AUC after training: 0.95
User 95449 does not improve AUC. Reverting changes.
Training on augumented user 77800 22/50 current_auc = 0.95
User 77800 AUC after training: 0.95
User 77800 does not improve AUC. Reverting changes.
Training on augumented user 19001 23/50 current_auc = 0.95
User 19001 AUC after training: 0.95
User 19001 does not improve AUC. Reverting changes.
Training on augumented user 32316 24/50 current_auc = 0.95
User 32316 AUC after training: 0.95
User 32316 does not improve AUC. Reverting changes.
Training on augumented user 106470 25/50 current_auc = 0.95
User 106470 AUC after training: 0.95
User 106470 does not improve AUC. Reverting changes.
Training on augumented user 106333 26/50 current_auc = 0.95
User 106333 AUC after training: 0.95
User 106333 does not improve AUC. Reverting changes.
Training on augumented user 72647 27/50 current_auc = 0.95
User 72647 AUC after training: 0.95
User 72647 does not improve AUC. Reverting changes.
Training on augumented user 70115 28/50 current_auc = 0.95
User 70115 AUC after training: 0.95
User 70115 does not improve AUC. Reverting changes.
Training on augumented user 6871 29/50 current_auc = 0.95
User 6871 AUC after training: 0.95
User 6871 does not improve AUC. Reverting changes.
Training on augumented user 99218 30/50 current_auc = 0.95
User 99218 AUC after training: 0.95
User 99218 does not improve AUC. Reverting changes.
Training on augumented user 67691 31/50 current_auc = 0.95
User 67691 AUC after training: 0.95
User 67691 does not improve AUC. Reverting changes.
Training on augumented user 10812 32/50 current_auc = 0.95
User 10812 AUC after training: 0.95
User 10812 does not improve AUC. Reverting changes.
Training on augumented user 80137 33/50 current_auc = 0.95
User 80137 AUC after training: 0.95
User 80137 does not improve AUC. Reverting changes.
Training on augumented user 43706 34/50 current_auc = 0.95
User 43706 AUC after training: 0.95
User 43706 does not improve AUC. Reverting changes.
Training on augumented user 128920 35/50 current_auc = 0.95
User 128920 AUC after training: 0.95
User 128920 does not improve AUC. Reverting changes.
Training on augumented user 52045 36/50 current_auc = 0.95
User 52045 AUC after training: 0.95
User 52045 does not improve AUC. Reverting changes.
Training on augumented user 121481 37/50 current_auc = 0.95
User 121481 AUC after training: 0.95
User 121481 does not improve AUC. Reverting changes.
Training on augumented user 102352 38/50 current_auc = 0.95
User 102352 AUC after training: 0.95
User 102352 does not improve AUC. Reverting changes.
Training on augumented user 37122 39/50 current_auc = 0.95
User 37122 AUC after training: 0.95
User 37122 does not improve AUC. Reverting changes.
Training on augumented user 66066 40/50 current_auc = 0.95
User 66066 AUC after training: 0.95
User 66066 does not improve AUC. Reverting changes.
Training on augumented user 83205 41/50 current_auc = 0.95
User 83205 AUC after training: 0.95
User 83205 does not improve AUC. Reverting changes.
Training on augumented user 44016 42/50 current_auc = 0.95
User 44016 AUC after training: 0.95
User 44016 does not improve AUC. Reverting changes.
Training on augumented user 121090 43/50 current_auc = 0.95
User 121090 AUC after training: 0.95
User 121090 does not improve AUC. Reverting changes.
Training on augumented user 90392 44/50 current_auc = 0.95
User 90392 AUC after training: 0.95
User 90392 does not improve AUC. Reverting changes.
Training on augumented user 18156 45/50 current_auc = 0.95
User 18156 AUC after training: 0.95
User 18156 does not improve AUC. Reverting changes.
Training on augumented user 50855 46/50 current_auc = 0.95
User 50855 AUC after training: 0.95
User 50855 does not improve AUC. Reverting changes.
Training on augumented user 8171 47/50 current_auc = 0.95
User 8171 AUC after training: 0.95
User 8171 does not improve AUC. Reverting changes.
Training on augumented user 18125 48/50 current_auc = 0.95
User 18125 AUC after training: 0.95
User 18125 does not improve AUC. Reverting changes.
Training on augumented user 113784 49/50 current_auc = 0.95
User 113784 AUC after training: 0.95
User 113784 does not improve AUC. Reverting changes.
[2024-12-02 19:13:10.542782] start test user 46251 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:11.068785] start test user 46251 173/568 recall augumented users by random, augumented_users = [41040, 80740, 77170, 113978, 115588, 76252, 65595, 60932, 22015, 11903, 55456, 131828, 111621, 122818, 17804, 83188, 89646, 135725, 44779, 65206, 133010, 23190, 63289, 96512, 67980, 95953, 19786, 30155, 53266, 113947, 46838, 115482, 54788, 116296, 111066, 90494, 130759, 103317, 31971, 83241, 120034, 4832, 119036, 104304, 80169, 21285, 24996, 124339, 64184, 9032]
[2024-12-02 19:13:11.091388] user = 46251 Cloud 173/568
[2024-12-02 19:13:11.103305] user = 46251 Local 173/568
[2024-12-02 19:13:11.145103] user = 46251 Local+ 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:13.659824] user = 46251 MPDA- 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6681034482758621
Training on augumented user 41040 0/50 current_auc = 0.6681034482758621
User 41040 AUC after training: 0.6767241379310345
User 41040 improves AUC. Keeping the model.
Training on augumented user 80740 1/50 current_auc = 0.6767241379310345
User 80740 AUC after training: 0.6767241379310345
User 80740 does not improve AUC. Reverting changes.
Training on augumented user 77170 2/50 current_auc = 0.6767241379310345
User 77170 AUC after training: 0.6767241379310345
User 77170 does not improve AUC. Reverting changes.
Training on augumented user 113978 3/50 current_auc = 0.6767241379310345
User 113978 AUC after training: 0.6810344827586207
User 113978 improves AUC. Keeping the model.
Training on augumented user 115588 4/50 current_auc = 0.6810344827586207
User 115588 AUC after training: 0.6767241379310345
User 115588 does not improve AUC. Reverting changes.
Training on augumented user 76252 5/50 current_auc = 0.6810344827586207
User 76252 AUC after training: 0.6767241379310345
User 76252 does not improve AUC. Reverting changes.
Training on augumented user 65595 6/50 current_auc = 0.6810344827586207
User 65595 AUC after training: 0.6853448275862069
User 65595 improves AUC. Keeping the model.
Training on augumented user 60932 7/50 current_auc = 0.6853448275862069
User 60932 AUC after training: 0.6767241379310345
User 60932 does not improve AUC. Reverting changes.
Training on augumented user 22015 8/50 current_auc = 0.6853448275862069
User 22015 AUC after training: 0.6810344827586207
User 22015 does not improve AUC. Reverting changes.
Training on augumented user 11903 9/50 current_auc = 0.6853448275862069
User 11903 AUC after training: 0.6853448275862069
User 11903 does not improve AUC. Reverting changes.
Training on augumented user 55456 10/50 current_auc = 0.6853448275862069
User 55456 AUC after training: 0.6767241379310345
User 55456 does not improve AUC. Reverting changes.
Training on augumented user 131828 11/50 current_auc = 0.6853448275862069
User 131828 AUC after training: 0.6853448275862069
User 131828 does not improve AUC. Reverting changes.
Training on augumented user 111621 12/50 current_auc = 0.6853448275862069
User 111621 AUC after training: 0.6853448275862069
User 111621 does not improve AUC. Reverting changes.
Training on augumented user 122818 13/50 current_auc = 0.6853448275862069
User 122818 AUC after training: 0.6810344827586207
User 122818 does not improve AUC. Reverting changes.
Training on augumented user 17804 14/50 current_auc = 0.6853448275862069
User 17804 AUC after training: 0.6853448275862069
User 17804 does not improve AUC. Reverting changes.
Training on augumented user 83188 15/50 current_auc = 0.6853448275862069
User 83188 AUC after training: 0.6853448275862069
User 83188 does not improve AUC. Reverting changes.
Training on augumented user 89646 16/50 current_auc = 0.6853448275862069
User 89646 AUC after training: 0.6853448275862069
User 89646 does not improve AUC. Reverting changes.
Training on augumented user 135725 17/50 current_auc = 0.6853448275862069
User 135725 AUC after training: 0.6853448275862069
User 135725 does not improve AUC. Reverting changes.
Training on augumented user 44779 18/50 current_auc = 0.6853448275862069
User 44779 AUC after training: 0.6767241379310345
User 44779 does not improve AUC. Reverting changes.
Training on augumented user 65206 19/50 current_auc = 0.6853448275862069
User 65206 AUC after training: 0.6853448275862069
User 65206 does not improve AUC. Reverting changes.
Training on augumented user 133010 20/50 current_auc = 0.6853448275862069
User 133010 AUC after training: 0.6810344827586207
User 133010 does not improve AUC. Reverting changes.
Training on augumented user 23190 21/50 current_auc = 0.6853448275862069
User 23190 AUC after training: 0.6724137931034483
User 23190 does not improve AUC. Reverting changes.
Training on augumented user 63289 22/50 current_auc = 0.6853448275862069
User 63289 AUC after training: 0.6853448275862069
User 63289 does not improve AUC. Reverting changes.
Training on augumented user 96512 23/50 current_auc = 0.6853448275862069
User 96512 AUC after training: 0.6810344827586207
User 96512 does not improve AUC. Reverting changes.
Training on augumented user 67980 24/50 current_auc = 0.6853448275862069
User 67980 AUC after training: 0.6810344827586207
User 67980 does not improve AUC. Reverting changes.
Training on augumented user 95953 25/50 current_auc = 0.6853448275862069
User 95953 AUC after training: 0.6767241379310345
User 95953 does not improve AUC. Reverting changes.
Training on augumented user 19786 26/50 current_auc = 0.6853448275862069
User 19786 AUC after training: 0.6810344827586207
User 19786 does not improve AUC. Reverting changes.
Training on augumented user 30155 27/50 current_auc = 0.6853448275862069
User 30155 AUC after training: 0.6767241379310345
User 30155 does not improve AUC. Reverting changes.
Training on augumented user 53266 28/50 current_auc = 0.6853448275862069
User 53266 AUC after training: 0.6853448275862069
User 53266 does not improve AUC. Reverting changes.
Training on augumented user 113947 29/50 current_auc = 0.6853448275862069
User 113947 AUC after training: 0.6853448275862069
User 113947 does not improve AUC. Reverting changes.
Training on augumented user 46838 30/50 current_auc = 0.6853448275862069
User 46838 AUC after training: 0.6810344827586207
User 46838 does not improve AUC. Reverting changes.
Training on augumented user 115482 31/50 current_auc = 0.6853448275862069
User 115482 AUC after training: 0.6810344827586207
User 115482 does not improve AUC. Reverting changes.
Training on augumented user 54788 32/50 current_auc = 0.6853448275862069
User 54788 AUC after training: 0.6767241379310345
User 54788 does not improve AUC. Reverting changes.
Training on augumented user 116296 33/50 current_auc = 0.6853448275862069
User 116296 AUC after training: 0.6853448275862069
User 116296 does not improve AUC. Reverting changes.
Training on augumented user 111066 34/50 current_auc = 0.6853448275862069
User 111066 AUC after training: 0.6853448275862069
User 111066 does not improve AUC. Reverting changes.
Training on augumented user 90494 35/50 current_auc = 0.6853448275862069
User 90494 AUC after training: 0.6853448275862069
User 90494 does not improve AUC. Reverting changes.
Training on augumented user 130759 36/50 current_auc = 0.6853448275862069
User 130759 AUC after training: 0.6810344827586207
User 130759 does not improve AUC. Reverting changes.
Training on augumented user 103317 37/50 current_auc = 0.6853448275862069
User 103317 AUC after training: 0.6810344827586207
User 103317 does not improve AUC. Reverting changes.
Training on augumented user 31971 38/50 current_auc = 0.6853448275862069
User 31971 AUC after training: 0.6810344827586207
User 31971 does not improve AUC. Reverting changes.
Training on augumented user 83241 39/50 current_auc = 0.6853448275862069
User 83241 AUC after training: 0.6853448275862069
User 83241 does not improve AUC. Reverting changes.
Training on augumented user 120034 40/50 current_auc = 0.6853448275862069
User 120034 AUC after training: 0.6810344827586207
User 120034 does not improve AUC. Reverting changes.
Training on augumented user 4832 41/50 current_auc = 0.6853448275862069
User 4832 AUC after training: 0.6853448275862069
User 4832 does not improve AUC. Reverting changes.
Training on augumented user 119036 42/50 current_auc = 0.6853448275862069
User 119036 AUC after training: 0.6810344827586207
User 119036 does not improve AUC. Reverting changes.
Training on augumented user 104304 43/50 current_auc = 0.6853448275862069
User 104304 AUC after training: 0.6810344827586207
User 104304 does not improve AUC. Reverting changes.
Training on augumented user 80169 44/50 current_auc = 0.6853448275862069
User 80169 AUC after training: 0.6767241379310345
User 80169 does not improve AUC. Reverting changes.
Training on augumented user 21285 45/50 current_auc = 0.6853448275862069
User 21285 AUC after training: 0.6810344827586207
User 21285 does not improve AUC. Reverting changes.
Training on augumented user 24996 46/50 current_auc = 0.6853448275862069
User 24996 AUC after training: 0.6810344827586207
User 24996 does not improve AUC. Reverting changes.
Training on augumented user 124339 47/50 current_auc = 0.6853448275862069
User 124339 AUC after training: 0.6767241379310345
User 124339 does not improve AUC. Reverting changes.
Training on augumented user 64184 48/50 current_auc = 0.6853448275862069
User 64184 AUC after training: 0.6810344827586207
User 64184 does not improve AUC. Reverting changes.
Training on augumented user 9032 49/50 current_auc = 0.6853448275862069
User 9032 AUC after training: 0.6767241379310345
User 9032 does not improve AUC. Reverting changes.
[2024-12-02 19:13:40.286653] start test user 46314 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:40.728740] start test user 46314 174/568 recall augumented users by random, augumented_users = [14027, 7291, 106385, 45541, 125990, 65046, 32719, 46851, 125032, 87629, 49785, 89557, 67077, 69581, 42732, 25282, 47198, 38718, 135397, 46941, 24572, 130585, 84416, 62725, 73044, 127921, 114155, 91260, 113560, 55267, 7717, 130020, 17763, 100854, 48309, 52837, 110157, 89622, 132448, 102286, 42953, 126194, 134802, 103440, 4673, 80686, 129444, 36600, 53090, 11646]
[2024-12-02 19:13:40.744374] user = 46314 Cloud 174/568
[2024-12-02 19:13:40.755416] user = 46314 Local 174/568
[2024-12-02 19:13:40.775598] user = 46314 Local+ 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:43.378687] user = 46314 MPDA- 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.59375
Training on augumented user 14027 0/50 current_auc = 0.59375
User 14027 AUC after training: 0.59375
User 14027 does not improve AUC. Reverting changes.
Training on augumented user 7291 1/50 current_auc = 0.59375
User 7291 AUC after training: 0.59375
User 7291 does not improve AUC. Reverting changes.
Training on augumented user 106385 2/50 current_auc = 0.59375
User 106385 AUC after training: 0.59375
User 106385 does not improve AUC. Reverting changes.
Training on augumented user 45541 3/50 current_auc = 0.59375
User 45541 AUC after training: 0.59375
User 45541 does not improve AUC. Reverting changes.
Training on augumented user 125990 4/50 current_auc = 0.59375
User 125990 AUC after training: 0.59375
User 125990 does not improve AUC. Reverting changes.
Training on augumented user 65046 5/50 current_auc = 0.59375
User 65046 AUC after training: 0.59375
User 65046 does not improve AUC. Reverting changes.
Training on augumented user 32719 6/50 current_auc = 0.59375
User 32719 AUC after training: 0.59375
User 32719 does not improve AUC. Reverting changes.
Training on augumented user 46851 7/50 current_auc = 0.59375
User 46851 AUC after training: 0.59375
User 46851 does not improve AUC. Reverting changes.
Training on augumented user 125032 8/50 current_auc = 0.59375
User 125032 AUC after training: 0.59375
User 125032 does not improve AUC. Reverting changes.
Training on augumented user 87629 9/50 current_auc = 0.59375
User 87629 AUC after training: 0.59375
User 87629 does not improve AUC. Reverting changes.
Training on augumented user 49785 10/50 current_auc = 0.59375
User 49785 AUC after training: 0.59375
User 49785 does not improve AUC. Reverting changes.
Training on augumented user 89557 11/50 current_auc = 0.59375
User 89557 AUC after training: 0.59375
User 89557 does not improve AUC. Reverting changes.
Training on augumented user 67077 12/50 current_auc = 0.59375
User 67077 AUC after training: 0.59375
User 67077 does not improve AUC. Reverting changes.
Training on augumented user 69581 13/50 current_auc = 0.59375
User 69581 AUC after training: 0.59375
User 69581 does not improve AUC. Reverting changes.
Training on augumented user 42732 14/50 current_auc = 0.59375
User 42732 AUC after training: 0.59375
User 42732 does not improve AUC. Reverting changes.
Training on augumented user 25282 15/50 current_auc = 0.59375
User 25282 AUC after training: 0.59375
User 25282 does not improve AUC. Reverting changes.
Training on augumented user 47198 16/50 current_auc = 0.59375
User 47198 AUC after training: 0.59375
User 47198 does not improve AUC. Reverting changes.
Training on augumented user 38718 17/50 current_auc = 0.59375
User 38718 AUC after training: 0.59375
User 38718 does not improve AUC. Reverting changes.
Training on augumented user 135397 18/50 current_auc = 0.59375
User 135397 AUC after training: 0.59375
User 135397 does not improve AUC. Reverting changes.
Training on augumented user 46941 19/50 current_auc = 0.59375
User 46941 AUC after training: 0.59375
User 46941 does not improve AUC. Reverting changes.
Training on augumented user 24572 20/50 current_auc = 0.59375
User 24572 AUC after training: 0.59375
User 24572 does not improve AUC. Reverting changes.
Training on augumented user 130585 21/50 current_auc = 0.59375
User 130585 AUC after training: 0.59375
User 130585 does not improve AUC. Reverting changes.
Training on augumented user 84416 22/50 current_auc = 0.59375
User 84416 AUC after training: 0.59375
User 84416 does not improve AUC. Reverting changes.
Training on augumented user 62725 23/50 current_auc = 0.59375
User 62725 AUC after training: 0.59375
User 62725 does not improve AUC. Reverting changes.
Training on augumented user 73044 24/50 current_auc = 0.59375
User 73044 AUC after training: 0.59375
User 73044 does not improve AUC. Reverting changes.
Training on augumented user 127921 25/50 current_auc = 0.59375
User 127921 AUC after training: 0.59375
User 127921 does not improve AUC. Reverting changes.
Training on augumented user 114155 26/50 current_auc = 0.59375
User 114155 AUC after training: 0.59375
User 114155 does not improve AUC. Reverting changes.
Training on augumented user 91260 27/50 current_auc = 0.59375
User 91260 AUC after training: 0.59375
User 91260 does not improve AUC. Reverting changes.
Training on augumented user 113560 28/50 current_auc = 0.59375
User 113560 AUC after training: 0.59375
User 113560 does not improve AUC. Reverting changes.
Training on augumented user 55267 29/50 current_auc = 0.59375
User 55267 AUC after training: 0.59375
User 55267 does not improve AUC. Reverting changes.
Training on augumented user 7717 30/50 current_auc = 0.59375
User 7717 AUC after training: 0.59375
User 7717 does not improve AUC. Reverting changes.
Training on augumented user 130020 31/50 current_auc = 0.59375
User 130020 AUC after training: 0.59375
User 130020 does not improve AUC. Reverting changes.
Training on augumented user 17763 32/50 current_auc = 0.59375
User 17763 AUC after training: 0.59375
User 17763 does not improve AUC. Reverting changes.
Training on augumented user 100854 33/50 current_auc = 0.59375
User 100854 AUC after training: 0.59375
User 100854 does not improve AUC. Reverting changes.
Training on augumented user 48309 34/50 current_auc = 0.59375
User 48309 AUC after training: 0.59375
User 48309 does not improve AUC. Reverting changes.
Training on augumented user 52837 35/50 current_auc = 0.59375
User 52837 AUC after training: 0.59375
User 52837 does not improve AUC. Reverting changes.
Training on augumented user 110157 36/50 current_auc = 0.59375
User 110157 AUC after training: 0.59375
User 110157 does not improve AUC. Reverting changes.
Training on augumented user 89622 37/50 current_auc = 0.59375
User 89622 AUC after training: 0.59375
User 89622 does not improve AUC. Reverting changes.
Training on augumented user 132448 38/50 current_auc = 0.59375
User 132448 AUC after training: 0.59375
User 132448 does not improve AUC. Reverting changes.
Training on augumented user 102286 39/50 current_auc = 0.59375
User 102286 AUC after training: 0.59375
User 102286 does not improve AUC. Reverting changes.
Training on augumented user 42953 40/50 current_auc = 0.59375
User 42953 AUC after training: 0.59375
User 42953 does not improve AUC. Reverting changes.
Training on augumented user 126194 41/50 current_auc = 0.59375
User 126194 AUC after training: 0.59375
User 126194 does not improve AUC. Reverting changes.
Training on augumented user 134802 42/50 current_auc = 0.59375
User 134802 AUC after training: 0.59375
User 134802 does not improve AUC. Reverting changes.
Training on augumented user 103440 43/50 current_auc = 0.59375
User 103440 AUC after training: 0.59375
User 103440 does not improve AUC. Reverting changes.
Training on augumented user 4673 44/50 current_auc = 0.59375
User 4673 AUC after training: 0.59375
User 4673 does not improve AUC. Reverting changes.
Training on augumented user 80686 45/50 current_auc = 0.59375
User 80686 AUC after training: 0.59375
User 80686 does not improve AUC. Reverting changes.
Training on augumented user 129444 46/50 current_auc = 0.59375
User 129444 AUC after training: 0.59375
User 129444 does not improve AUC. Reverting changes.
Training on augumented user 36600 47/50 current_auc = 0.59375
User 36600 AUC after training: 0.59375
User 36600 does not improve AUC. Reverting changes.
Training on augumented user 53090 48/50 current_auc = 0.59375
User 53090 AUC after training: 0.59375
User 53090 does not improve AUC. Reverting changes.
Training on augumented user 11646 49/50 current_auc = 0.59375
User 11646 AUC after training: 0.59375
User 11646 does not improve AUC. Reverting changes.
[2024-12-02 19:14:12.849858] start test user 46329 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:13.296250] start test user 46329 175/568 recall augumented users by random, augumented_users = [19327, 100134, 4691, 131043, 64781, 37264, 40087, 5010, 60327, 78345, 51756, 121021, 7650, 84470, 120702, 37156, 44868, 52238, 89266, 121201, 67895, 78109, 61791, 126654, 60517, 119377, 94887, 86884, 121438, 123939, 119852, 53967, 108150, 121127, 83151, 18341, 112854, 136702, 89442, 84419, 10344, 59137, 71086, 81232, 122343, 21539, 92268, 63607, 45950, 47784]
[2024-12-02 19:14:13.311953] user = 46329 Cloud 175/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:14:13.318233] user = 46329 Local 175/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:14:13.350694] user = 46329 Local+ 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:14:16.798933] user = 46329 MPDA- 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 19327 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19327 AUC after training: 0.5
User 19327 does not improve AUC. Reverting changes.
Training on augumented user 100134 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100134 AUC after training: 0.5
User 100134 does not improve AUC. Reverting changes.
Training on augumented user 4691 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4691 AUC after training: 0.5
User 4691 does not improve AUC. Reverting changes.
Training on augumented user 131043 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131043 AUC after training: 0.5
User 131043 does not improve AUC. Reverting changes.
Training on augumented user 64781 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64781 AUC after training: 0.5
User 64781 does not improve AUC. Reverting changes.
Training on augumented user 37264 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37264 AUC after training: 0.5
User 37264 does not improve AUC. Reverting changes.
Training on augumented user 40087 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40087 AUC after training: 0.5
User 40087 does not improve AUC. Reverting changes.
Training on augumented user 5010 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5010 AUC after training: 0.5
User 5010 does not improve AUC. Reverting changes.
Training on augumented user 60327 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60327 AUC after training: 0.5
User 60327 does not improve AUC. Reverting changes.
Training on augumented user 78345 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78345 AUC after training: 0.5
User 78345 does not improve AUC. Reverting changes.
Training on augumented user 51756 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51756 AUC after training: 0.5
User 51756 does not improve AUC. Reverting changes.
Training on augumented user 121021 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121021 AUC after training: 0.5
User 121021 does not improve AUC. Reverting changes.
Training on augumented user 7650 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7650 AUC after training: 0.5
User 7650 does not improve AUC. Reverting changes.
Training on augumented user 84470 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84470 AUC after training: 0.5
User 84470 does not improve AUC. Reverting changes.
Training on augumented user 120702 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120702 AUC after training: 0.5
User 120702 does not improve AUC. Reverting changes.
Training on augumented user 37156 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37156 AUC after training: 0.5
User 37156 does not improve AUC. Reverting changes.
Training on augumented user 44868 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44868 AUC after training: 0.5
User 44868 does not improve AUC. Reverting changes.
Training on augumented user 52238 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52238 AUC after training: 0.5
User 52238 does not improve AUC. Reverting changes.
Training on augumented user 89266 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89266 AUC after training: 0.5
User 89266 does not improve AUC. Reverting changes.
Training on augumented user 121201 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121201 AUC after training: 0.5
User 121201 does not improve AUC. Reverting changes.
Training on augumented user 67895 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67895 AUC after training: 0.5
User 67895 does not improve AUC. Reverting changes.
Training on augumented user 78109 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78109 AUC after training: 0.5
User 78109 does not improve AUC. Reverting changes.
Training on augumented user 61791 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61791 AUC after training: 0.5
User 61791 does not improve AUC. Reverting changes.
Training on augumented user 126654 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126654 AUC after training: 0.5
User 126654 does not improve AUC. Reverting changes.
Training on augumented user 60517 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60517 AUC after training: 0.5
User 60517 does not improve AUC. Reverting changes.
Training on augumented user 119377 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119377 AUC after training: 0.5
User 119377 does not improve AUC. Reverting changes.
Training on augumented user 94887 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94887 AUC after training: 0.5
User 94887 does not improve AUC. Reverting changes.
Training on augumented user 86884 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86884 AUC after training: 0.5
User 86884 does not improve AUC. Reverting changes.
Training on augumented user 121438 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121438 AUC after training: 0.5
User 121438 does not improve AUC. Reverting changes.
Training on augumented user 123939 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123939 AUC after training: 0.5
User 123939 does not improve AUC. Reverting changes.
Training on augumented user 119852 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119852 AUC after training: 0.5
User 119852 does not improve AUC. Reverting changes.
Training on augumented user 53967 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53967 AUC after training: 0.5
User 53967 does not improve AUC. Reverting changes.
Training on augumented user 108150 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108150 AUC after training: 0.5
User 108150 does not improve AUC. Reverting changes.
Training on augumented user 121127 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121127 AUC after training: 0.5
User 121127 does not improve AUC. Reverting changes.
Training on augumented user 83151 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83151 AUC after training: 0.5
User 83151 does not improve AUC. Reverting changes.
Training on augumented user 18341 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18341 AUC after training: 0.5
User 18341 does not improve AUC. Reverting changes.
Training on augumented user 112854 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112854 AUC after training: 0.5
User 112854 does not improve AUC. Reverting changes.
Training on augumented user 136702 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136702 AUC after training: 0.5
User 136702 does not improve AUC. Reverting changes.
Training on augumented user 89442 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89442 AUC after training: 0.5
User 89442 does not improve AUC. Reverting changes.
Training on augumented user 84419 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84419 AUC after training: 0.5
User 84419 does not improve AUC. Reverting changes.
Training on augumented user 10344 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10344 AUC after training: 0.5
User 10344 does not improve AUC. Reverting changes.
Training on augumented user 59137 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59137 AUC after training: 0.5
User 59137 does not improve AUC. Reverting changes.
Training on augumented user 71086 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71086 AUC after training: 0.5
User 71086 does not improve AUC. Reverting changes.
Training on augumented user 81232 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81232 AUC after training: 0.5
User 81232 does not improve AUC. Reverting changes.
Training on augumented user 122343 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122343 AUC after training: 0.5
User 122343 does not improve AUC. Reverting changes.
Training on augumented user 21539 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21539 AUC after training: 0.5
User 21539 does not improve AUC. Reverting changes.
Training on augumented user 92268 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92268 AUC after training: 0.5
User 92268 does not improve AUC. Reverting changes.
Training on augumented user 63607 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63607 AUC after training: 0.5
User 63607 does not improve AUC. Reverting changes.
Training on augumented user 45950 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45950 AUC after training: 0.5
User 45950 does not improve AUC. Reverting changes.
Training on augumented user 47784 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47784 AUC after training: 0.5
User 47784 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:14:41.660095] start test user 46355 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:42.355143] start test user 46355 176/568 recall augumented users by random, augumented_users = [114255, 21898, 132542, 72558, 60385, 56675, 109439, 111011, 19070, 14498, 54857, 94398, 85656, 71376, 84004, 63089, 79415, 70797, 40641, 102502, 70241, 92827, 25434, 133583, 46475, 110227, 93028, 43120, 116498, 45302, 135461, 33986, 96577, 81089, 102991, 52590, 97988, 89541, 99208, 3768, 18238, 83276, 38638, 133914, 20264, 848, 22044, 109933, 62031, 33934]
[2024-12-02 19:14:42.371814] user = 46355 Cloud 176/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:14:42.378769] user = 46355 Local 176/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:14:42.471300] user = 46355 Local+ 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:14:45.602667] user = 46355 MPDA- 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 114255 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114255 AUC after training: 0.5
User 114255 does not improve AUC. Reverting changes.
Training on augumented user 21898 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21898 AUC after training: 0.5
User 21898 does not improve AUC. Reverting changes.
Training on augumented user 132542 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132542 AUC after training: 0.5
User 132542 does not improve AUC. Reverting changes.
Training on augumented user 72558 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72558 AUC after training: 0.5
User 72558 does not improve AUC. Reverting changes.
Training on augumented user 60385 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60385 AUC after training: 0.5
User 60385 does not improve AUC. Reverting changes.
Training on augumented user 56675 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56675 AUC after training: 0.5
User 56675 does not improve AUC. Reverting changes.
Training on augumented user 109439 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109439 AUC after training: 0.5
User 109439 does not improve AUC. Reverting changes.
Training on augumented user 111011 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111011 AUC after training: 0.5
User 111011 does not improve AUC. Reverting changes.
Training on augumented user 19070 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19070 AUC after training: 0.5
User 19070 does not improve AUC. Reverting changes.
Training on augumented user 14498 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14498 AUC after training: 0.5
User 14498 does not improve AUC. Reverting changes.
Training on augumented user 54857 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54857 AUC after training: 0.5
User 54857 does not improve AUC. Reverting changes.
Training on augumented user 94398 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94398 AUC after training: 0.5
User 94398 does not improve AUC. Reverting changes.
Training on augumented user 85656 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85656 AUC after training: 0.5
User 85656 does not improve AUC. Reverting changes.
Training on augumented user 71376 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71376 AUC after training: 0.5
User 71376 does not improve AUC. Reverting changes.
Training on augumented user 84004 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84004 AUC after training: 0.5
User 84004 does not improve AUC. Reverting changes.
Training on augumented user 63089 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63089 AUC after training: 0.5
User 63089 does not improve AUC. Reverting changes.
Training on augumented user 79415 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79415 AUC after training: 0.5
User 79415 does not improve AUC. Reverting changes.
Training on augumented user 70797 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70797 AUC after training: 0.5
User 70797 does not improve AUC. Reverting changes.
Training on augumented user 40641 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40641 AUC after training: 0.5
User 40641 does not improve AUC. Reverting changes.
Training on augumented user 102502 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102502 AUC after training: 0.5
User 102502 does not improve AUC. Reverting changes.
Training on augumented user 70241 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70241 AUC after training: 0.5
User 70241 does not improve AUC. Reverting changes.
Training on augumented user 92827 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92827 AUC after training: 0.5
User 92827 does not improve AUC. Reverting changes.
Training on augumented user 25434 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25434 AUC after training: 0.5
User 25434 does not improve AUC. Reverting changes.
Training on augumented user 133583 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133583 AUC after training: 0.5
User 133583 does not improve AUC. Reverting changes.
Training on augumented user 46475 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46475 AUC after training: 0.5
User 46475 does not improve AUC. Reverting changes.
Training on augumented user 110227 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110227 AUC after training: 0.5
User 110227 does not improve AUC. Reverting changes.
Training on augumented user 93028 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93028 AUC after training: 0.5
User 93028 does not improve AUC. Reverting changes.
Training on augumented user 43120 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43120 AUC after training: 0.5
User 43120 does not improve AUC. Reverting changes.
Training on augumented user 116498 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116498 AUC after training: 0.5
User 116498 does not improve AUC. Reverting changes.
Training on augumented user 45302 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45302 AUC after training: 0.5
User 45302 does not improve AUC. Reverting changes.
Training on augumented user 135461 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135461 AUC after training: 0.5
User 135461 does not improve AUC. Reverting changes.
Training on augumented user 33986 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33986 AUC after training: 0.5
User 33986 does not improve AUC. Reverting changes.
Training on augumented user 96577 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96577 AUC after training: 0.5
User 96577 does not improve AUC. Reverting changes.
Training on augumented user 81089 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81089 AUC after training: 0.5
User 81089 does not improve AUC. Reverting changes.
Training on augumented user 102991 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102991 AUC after training: 0.5
User 102991 does not improve AUC. Reverting changes.
Training on augumented user 52590 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52590 AUC after training: 0.5
User 52590 does not improve AUC. Reverting changes.
Training on augumented user 97988 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97988 AUC after training: 0.5
User 97988 does not improve AUC. Reverting changes.
Training on augumented user 89541 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89541 AUC after training: 0.5
User 89541 does not improve AUC. Reverting changes.
Training on augumented user 99208 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99208 AUC after training: 0.5
User 99208 does not improve AUC. Reverting changes.
Training on augumented user 3768 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3768 AUC after training: 0.5
User 3768 does not improve AUC. Reverting changes.
Training on augumented user 18238 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18238 AUC after training: 0.5
User 18238 does not improve AUC. Reverting changes.
Training on augumented user 83276 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83276 AUC after training: 0.5
User 83276 does not improve AUC. Reverting changes.
Training on augumented user 38638 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38638 AUC after training: 0.5
User 38638 does not improve AUC. Reverting changes.
Training on augumented user 133914 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133914 AUC after training: 0.5
User 133914 does not improve AUC. Reverting changes.
Training on augumented user 20264 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20264 AUC after training: 0.5
User 20264 does not improve AUC. Reverting changes.
Training on augumented user 848 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 848 AUC after training: 0.5
User 848 does not improve AUC. Reverting changes.
Training on augumented user 22044 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22044 AUC after training: 0.5
User 22044 does not improve AUC. Reverting changes.
Training on augumented user 109933 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109933 AUC after training: 0.5
User 109933 does not improve AUC. Reverting changes.
Training on augumented user 62031 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62031 AUC after training: 0.5
User 62031 does not improve AUC. Reverting changes.
Training on augumented user 33934 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33934 AUC after training: 0.5
User 33934 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:16.283246] start test user 46370 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:16.853282] start test user 46370 177/568 recall augumented users by random, augumented_users = [70406, 126961, 17970, 94061, 82597, 31174, 14110, 128272, 36266, 77046, 97166, 39767, 105008, 55596, 129129, 69282, 95272, 10870, 50613, 90547, 100741, 116841, 67954, 21247, 106888, 68523, 91083, 32550, 25507, 26108, 63454, 37100, 12362, 17709, 86831, 81596, 131386, 46536, 113071, 112336, 71102, 63574, 25483, 17532, 52654, 70265, 78473, 121836, 83202, 4023]
[2024-12-02 19:15:16.877420] user = 46370 Cloud 177/568
[2024-12-02 19:15:16.892132] user = 46370 Local 177/568
[2024-12-02 19:15:17.038684] user = 46370 Local+ 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:19.412663] user = 46370 MPDA- 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.543859649122807
Training on augumented user 70406 0/50 current_auc = 0.543859649122807
User 70406 AUC after training: 0.5416666666666667
User 70406 does not improve AUC. Reverting changes.
Training on augumented user 126961 1/50 current_auc = 0.543859649122807
User 126961 AUC after training: 0.5394736842105263
User 126961 does not improve AUC. Reverting changes.
Training on augumented user 17970 2/50 current_auc = 0.543859649122807
User 17970 AUC after training: 0.5394736842105263
User 17970 does not improve AUC. Reverting changes.
Training on augumented user 94061 3/50 current_auc = 0.543859649122807
User 94061 AUC after training: 0.5394736842105263
User 94061 does not improve AUC. Reverting changes.
Training on augumented user 82597 4/50 current_auc = 0.543859649122807
User 82597 AUC after training: 0.5416666666666667
User 82597 does not improve AUC. Reverting changes.
Training on augumented user 31174 5/50 current_auc = 0.543859649122807
User 31174 AUC after training: 0.5394736842105263
User 31174 does not improve AUC. Reverting changes.
Training on augumented user 14110 6/50 current_auc = 0.543859649122807
User 14110 AUC after training: 0.543859649122807
User 14110 does not improve AUC. Reverting changes.
Training on augumented user 128272 7/50 current_auc = 0.543859649122807
User 128272 AUC after training: 0.5394736842105263
User 128272 does not improve AUC. Reverting changes.
Training on augumented user 36266 8/50 current_auc = 0.543859649122807
User 36266 AUC after training: 0.543859649122807
User 36266 does not improve AUC. Reverting changes.
Training on augumented user 77046 9/50 current_auc = 0.543859649122807
User 77046 AUC after training: 0.5416666666666667
User 77046 does not improve AUC. Reverting changes.
Training on augumented user 97166 10/50 current_auc = 0.543859649122807
User 97166 AUC after training: 0.543859649122807
User 97166 does not improve AUC. Reverting changes.
Training on augumented user 39767 11/50 current_auc = 0.543859649122807
User 39767 AUC after training: 0.5416666666666667
User 39767 does not improve AUC. Reverting changes.
Training on augumented user 105008 12/50 current_auc = 0.543859649122807
User 105008 AUC after training: 0.5394736842105263
User 105008 does not improve AUC. Reverting changes.
Training on augumented user 55596 13/50 current_auc = 0.543859649122807
User 55596 AUC after training: 0.5416666666666667
User 55596 does not improve AUC. Reverting changes.
Training on augumented user 129129 14/50 current_auc = 0.543859649122807
User 129129 AUC after training: 0.543859649122807
User 129129 does not improve AUC. Reverting changes.
Training on augumented user 69282 15/50 current_auc = 0.543859649122807
User 69282 AUC after training: 0.537280701754386
User 69282 does not improve AUC. Reverting changes.
Training on augumented user 95272 16/50 current_auc = 0.543859649122807
User 95272 AUC after training: 0.543859649122807
User 95272 does not improve AUC. Reverting changes.
Training on augumented user 10870 17/50 current_auc = 0.543859649122807
User 10870 AUC after training: 0.543859649122807
User 10870 does not improve AUC. Reverting changes.
Training on augumented user 50613 18/50 current_auc = 0.543859649122807
User 50613 AUC after training: 0.543859649122807
User 50613 does not improve AUC. Reverting changes.
Training on augumented user 90547 19/50 current_auc = 0.543859649122807
User 90547 AUC after training: 0.5394736842105263
User 90547 does not improve AUC. Reverting changes.
Training on augumented user 100741 20/50 current_auc = 0.543859649122807
User 100741 AUC after training: 0.543859649122807
User 100741 does not improve AUC. Reverting changes.
Training on augumented user 116841 21/50 current_auc = 0.543859649122807
User 116841 AUC after training: 0.5416666666666667
User 116841 does not improve AUC. Reverting changes.
Training on augumented user 67954 22/50 current_auc = 0.543859649122807
User 67954 AUC after training: 0.543859649122807
User 67954 does not improve AUC. Reverting changes.
Training on augumented user 21247 23/50 current_auc = 0.543859649122807
User 21247 AUC after training: 0.5416666666666667
User 21247 does not improve AUC. Reverting changes.
Training on augumented user 106888 24/50 current_auc = 0.543859649122807
User 106888 AUC after training: 0.5394736842105263
User 106888 does not improve AUC. Reverting changes.
Training on augumented user 68523 25/50 current_auc = 0.543859649122807
User 68523 AUC after training: 0.5416666666666667
User 68523 does not improve AUC. Reverting changes.
Training on augumented user 91083 26/50 current_auc = 0.543859649122807
User 91083 AUC after training: 0.5394736842105263
User 91083 does not improve AUC. Reverting changes.
Training on augumented user 32550 27/50 current_auc = 0.543859649122807
User 32550 AUC after training: 0.543859649122807
User 32550 does not improve AUC. Reverting changes.
Training on augumented user 25507 28/50 current_auc = 0.543859649122807
User 25507 AUC after training: 0.5416666666666667
User 25507 does not improve AUC. Reverting changes.
Training on augumented user 26108 29/50 current_auc = 0.543859649122807
User 26108 AUC after training: 0.543859649122807
User 26108 does not improve AUC. Reverting changes.
Training on augumented user 63454 30/50 current_auc = 0.543859649122807
User 63454 AUC after training: 0.5416666666666667
User 63454 does not improve AUC. Reverting changes.
Training on augumented user 37100 31/50 current_auc = 0.543859649122807
User 37100 AUC after training: 0.543859649122807
User 37100 does not improve AUC. Reverting changes.
Training on augumented user 12362 32/50 current_auc = 0.543859649122807
User 12362 AUC after training: 0.5416666666666667
User 12362 does not improve AUC. Reverting changes.
Training on augumented user 17709 33/50 current_auc = 0.543859649122807
User 17709 AUC after training: 0.5416666666666667
User 17709 does not improve AUC. Reverting changes.
Training on augumented user 86831 34/50 current_auc = 0.543859649122807
User 86831 AUC after training: 0.5416666666666667
User 86831 does not improve AUC. Reverting changes.
Training on augumented user 81596 35/50 current_auc = 0.543859649122807
User 81596 AUC after training: 0.5482456140350878
User 81596 improves AUC. Keeping the model.
Training on augumented user 131386 36/50 current_auc = 0.5482456140350878
User 131386 AUC after training: 0.543859649122807
User 131386 does not improve AUC. Reverting changes.
Training on augumented user 46536 37/50 current_auc = 0.5482456140350878
User 46536 AUC after training: 0.5482456140350878
User 46536 does not improve AUC. Reverting changes.
Training on augumented user 113071 38/50 current_auc = 0.5482456140350878
User 113071 AUC after training: 0.5504385964912281
User 113071 improves AUC. Keeping the model.
Training on augumented user 112336 39/50 current_auc = 0.5504385964912281
User 112336 AUC after training: 0.5460526315789473
User 112336 does not improve AUC. Reverting changes.
Training on augumented user 71102 40/50 current_auc = 0.5504385964912281
User 71102 AUC after training: 0.5482456140350878
User 71102 does not improve AUC. Reverting changes.
Training on augumented user 63574 41/50 current_auc = 0.5504385964912281
User 63574 AUC after training: 0.5416666666666667
User 63574 does not improve AUC. Reverting changes.
Training on augumented user 25483 42/50 current_auc = 0.5504385964912281
User 25483 AUC after training: 0.5482456140350878
User 25483 does not improve AUC. Reverting changes.
Training on augumented user 17532 43/50 current_auc = 0.5504385964912281
User 17532 AUC after training: 0.5482456140350878
User 17532 does not improve AUC. Reverting changes.
Training on augumented user 52654 44/50 current_auc = 0.5504385964912281
User 52654 AUC after training: 0.5482456140350878
User 52654 does not improve AUC. Reverting changes.
Training on augumented user 70265 45/50 current_auc = 0.5504385964912281
User 70265 AUC after training: 0.5482456140350878
User 70265 does not improve AUC. Reverting changes.
Training on augumented user 78473 46/50 current_auc = 0.5504385964912281
User 78473 AUC after training: 0.5482456140350878
User 78473 does not improve AUC. Reverting changes.
Training on augumented user 121836 47/50 current_auc = 0.5504385964912281
User 121836 AUC after training: 0.5504385964912281
User 121836 does not improve AUC. Reverting changes.
Training on augumented user 83202 48/50 current_auc = 0.5504385964912281
User 83202 AUC after training: 0.5394736842105263
User 83202 does not improve AUC. Reverting changes.
Training on augumented user 4023 49/50 current_auc = 0.5504385964912281
User 4023 AUC after training: 0.5504385964912281
User 4023 does not improve AUC. Reverting changes.
[2024-12-02 19:15:45.766429] start test user 46403 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:46.177088] start test user 46403 178/568 recall augumented users by random, augumented_users = [40506, 123511, 68225, 47235, 124092, 116676, 70324, 109237, 134249, 67417, 120357, 40531, 75201, 116402, 132450, 23562, 135273, 47571, 122556, 123307, 94885, 3560, 116148, 113298, 54088, 120707, 134620, 125517, 94244, 111014, 129706, 10380, 62193, 123721, 83254, 13813, 62270, 125764, 49304, 15090, 69598, 106135, 119324, 118048, 131224, 37277, 37819, 50145, 116977, 74838]
[2024-12-02 19:15:46.192477] user = 46403 Cloud 178/568
[2024-12-02 19:15:46.202202] user = 46403 Local 178/568
[2024-12-02 19:15:46.236335] user = 46403 Local+ 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:48.248123] user = 46403 MPDA- 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 40506 0/50 current_auc = 0.6666666666666666
User 40506 AUC after training: 0.6666666666666666
User 40506 does not improve AUC. Reverting changes.
Training on augumented user 123511 1/50 current_auc = 0.6666666666666666
User 123511 AUC after training: 0.6666666666666666
User 123511 does not improve AUC. Reverting changes.
Training on augumented user 68225 2/50 current_auc = 0.6666666666666666
User 68225 AUC after training: 0.6666666666666666
User 68225 does not improve AUC. Reverting changes.
Training on augumented user 47235 3/50 current_auc = 0.6666666666666666
User 47235 AUC after training: 0.5833333333333334
User 47235 does not improve AUC. Reverting changes.
Training on augumented user 124092 4/50 current_auc = 0.6666666666666666
User 124092 AUC after training: 0.6666666666666666
User 124092 does not improve AUC. Reverting changes.
Training on augumented user 116676 5/50 current_auc = 0.6666666666666666
User 116676 AUC after training: 0.6666666666666666
User 116676 does not improve AUC. Reverting changes.
Training on augumented user 70324 6/50 current_auc = 0.6666666666666666
User 70324 AUC after training: 0.6666666666666666
User 70324 does not improve AUC. Reverting changes.
Training on augumented user 109237 7/50 current_auc = 0.6666666666666666
User 109237 AUC after training: 0.6666666666666666
User 109237 does not improve AUC. Reverting changes.
Training on augumented user 134249 8/50 current_auc = 0.6666666666666666
User 134249 AUC after training: 0.6666666666666666
User 134249 does not improve AUC. Reverting changes.
Training on augumented user 67417 9/50 current_auc = 0.6666666666666666
User 67417 AUC after training: 0.6666666666666666
User 67417 does not improve AUC. Reverting changes.
Training on augumented user 120357 10/50 current_auc = 0.6666666666666666
User 120357 AUC after training: 0.6666666666666666
User 120357 does not improve AUC. Reverting changes.
Training on augumented user 40531 11/50 current_auc = 0.6666666666666666
User 40531 AUC after training: 0.6666666666666666
User 40531 does not improve AUC. Reverting changes.
Training on augumented user 75201 12/50 current_auc = 0.6666666666666666
User 75201 AUC after training: 0.6666666666666666
User 75201 does not improve AUC. Reverting changes.
Training on augumented user 116402 13/50 current_auc = 0.6666666666666666
User 116402 AUC after training: 0.6666666666666666
User 116402 does not improve AUC. Reverting changes.
Training on augumented user 132450 14/50 current_auc = 0.6666666666666666
User 132450 AUC after training: 0.6666666666666666
User 132450 does not improve AUC. Reverting changes.
Training on augumented user 23562 15/50 current_auc = 0.6666666666666666
User 23562 AUC after training: 0.6666666666666666
User 23562 does not improve AUC. Reverting changes.
Training on augumented user 135273 16/50 current_auc = 0.6666666666666666
User 135273 AUC after training: 0.6666666666666666
User 135273 does not improve AUC. Reverting changes.
Training on augumented user 47571 17/50 current_auc = 0.6666666666666666
User 47571 AUC after training: 0.6666666666666666
User 47571 does not improve AUC. Reverting changes.
Training on augumented user 122556 18/50 current_auc = 0.6666666666666666
User 122556 AUC after training: 0.6666666666666666
User 122556 does not improve AUC. Reverting changes.
Training on augumented user 123307 19/50 current_auc = 0.6666666666666666
User 123307 AUC after training: 0.6666666666666666
User 123307 does not improve AUC. Reverting changes.
Training on augumented user 94885 20/50 current_auc = 0.6666666666666666
User 94885 AUC after training: 0.6666666666666666
User 94885 does not improve AUC. Reverting changes.
Training on augumented user 3560 21/50 current_auc = 0.6666666666666666
User 3560 AUC after training: 0.6666666666666666
User 3560 does not improve AUC. Reverting changes.
Training on augumented user 116148 22/50 current_auc = 0.6666666666666666
User 116148 AUC after training: 0.6666666666666666
User 116148 does not improve AUC. Reverting changes.
Training on augumented user 113298 23/50 current_auc = 0.6666666666666666
User 113298 AUC after training: 0.6666666666666666
User 113298 does not improve AUC. Reverting changes.
Training on augumented user 54088 24/50 current_auc = 0.6666666666666666
User 54088 AUC after training: 0.6666666666666666
User 54088 does not improve AUC. Reverting changes.
Training on augumented user 120707 25/50 current_auc = 0.6666666666666666
User 120707 AUC after training: 0.6666666666666666
User 120707 does not improve AUC. Reverting changes.
Training on augumented user 134620 26/50 current_auc = 0.6666666666666666
User 134620 AUC after training: 0.6666666666666666
User 134620 does not improve AUC. Reverting changes.
Training on augumented user 125517 27/50 current_auc = 0.6666666666666666
User 125517 AUC after training: 0.6666666666666666
User 125517 does not improve AUC. Reverting changes.
Training on augumented user 94244 28/50 current_auc = 0.6666666666666666
User 94244 AUC after training: 0.6666666666666666
User 94244 does not improve AUC. Reverting changes.
Training on augumented user 111014 29/50 current_auc = 0.6666666666666666
User 111014 AUC after training: 0.6666666666666666
User 111014 does not improve AUC. Reverting changes.
Training on augumented user 129706 30/50 current_auc = 0.6666666666666666
User 129706 AUC after training: 0.6666666666666666
User 129706 does not improve AUC. Reverting changes.
Training on augumented user 10380 31/50 current_auc = 0.6666666666666666
User 10380 AUC after training: 0.6666666666666666
User 10380 does not improve AUC. Reverting changes.
Training on augumented user 62193 32/50 current_auc = 0.6666666666666666
User 62193 AUC after training: 0.6666666666666666
User 62193 does not improve AUC. Reverting changes.
Training on augumented user 123721 33/50 current_auc = 0.6666666666666666
User 123721 AUC after training: 0.6666666666666666
User 123721 does not improve AUC. Reverting changes.
Training on augumented user 83254 34/50 current_auc = 0.6666666666666666
User 83254 AUC after training: 0.6666666666666666
User 83254 does not improve AUC. Reverting changes.
Training on augumented user 13813 35/50 current_auc = 0.6666666666666666
User 13813 AUC after training: 0.6666666666666666
User 13813 does not improve AUC. Reverting changes.
Training on augumented user 62270 36/50 current_auc = 0.6666666666666666
User 62270 AUC after training: 0.6666666666666666
User 62270 does not improve AUC. Reverting changes.
Training on augumented user 125764 37/50 current_auc = 0.6666666666666666
User 125764 AUC after training: 0.6666666666666666
User 125764 does not improve AUC. Reverting changes.
Training on augumented user 49304 38/50 current_auc = 0.6666666666666666
User 49304 AUC after training: 0.6666666666666666
User 49304 does not improve AUC. Reverting changes.
Training on augumented user 15090 39/50 current_auc = 0.6666666666666666
User 15090 AUC after training: 0.6666666666666666
User 15090 does not improve AUC. Reverting changes.
Training on augumented user 69598 40/50 current_auc = 0.6666666666666666
User 69598 AUC after training: 0.6666666666666666
User 69598 does not improve AUC. Reverting changes.
Training on augumented user 106135 41/50 current_auc = 0.6666666666666666
User 106135 AUC after training: 0.6666666666666666
User 106135 does not improve AUC. Reverting changes.
Training on augumented user 119324 42/50 current_auc = 0.6666666666666666
User 119324 AUC after training: 0.6666666666666666
User 119324 does not improve AUC. Reverting changes.
Training on augumented user 118048 43/50 current_auc = 0.6666666666666666
User 118048 AUC after training: 0.6666666666666666
User 118048 does not improve AUC. Reverting changes.
Training on augumented user 131224 44/50 current_auc = 0.6666666666666666
User 131224 AUC after training: 0.6666666666666666
User 131224 does not improve AUC. Reverting changes.
Training on augumented user 37277 45/50 current_auc = 0.6666666666666666
User 37277 AUC after training: 0.6666666666666666
User 37277 does not improve AUC. Reverting changes.
Training on augumented user 37819 46/50 current_auc = 0.6666666666666666
User 37819 AUC after training: 0.6666666666666666
User 37819 does not improve AUC. Reverting changes.
Training on augumented user 50145 47/50 current_auc = 0.6666666666666666
User 50145 AUC after training: 0.6666666666666666
User 50145 does not improve AUC. Reverting changes.
Training on augumented user 116977 48/50 current_auc = 0.6666666666666666
User 116977 AUC after training: 0.6666666666666666
User 116977 does not improve AUC. Reverting changes.
Training on augumented user 74838 49/50 current_auc = 0.6666666666666666
User 74838 AUC after training: 0.6666666666666666
User 74838 does not improve AUC. Reverting changes.
[2024-12-02 19:16:15.096759] start test user 46404 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:15.788253] start test user 46404 179/568 recall augumented users by random, augumented_users = [105699, 56900, 44624, 85671, 35879, 111247, 39486, 41240, 6688, 102004, 61788, 48903, 41658, 33798, 116084, 19242, 85353, 131313, 103393, 25838, 118191, 97821, 122128, 106013, 121478, 111817, 121668, 70151, 63810, 24608, 26517, 65721, 128219, 24179, 69672, 93403, 32775, 88740, 31761, 41960, 35696, 135579, 3060, 136989, 109925, 136362, 130243, 19052, 121886, 119900]
[2024-12-02 19:16:15.803641] user = 46404 Cloud 179/568
[2024-12-02 19:16:15.814012] user = 46404 Local 179/568
[2024-12-02 19:16:15.908250] user = 46404 Local+ 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:18.191832] user = 46404 MPDA- 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5232558139534884
Training on augumented user 105699 0/50 current_auc = 0.5232558139534884
User 105699 AUC after training: 0.5348837209302326
User 105699 improves AUC. Keeping the model.
Training on augumented user 56900 1/50 current_auc = 0.5348837209302326
User 56900 AUC after training: 0.5406976744186047
User 56900 improves AUC. Keeping the model.
Training on augumented user 44624 2/50 current_auc = 0.5406976744186047
User 44624 AUC after training: 0.5232558139534884
User 44624 does not improve AUC. Reverting changes.
Training on augumented user 85671 3/50 current_auc = 0.5406976744186047
User 85671 AUC after training: 0.5348837209302326
User 85671 does not improve AUC. Reverting changes.
Training on augumented user 35879 4/50 current_auc = 0.5406976744186047
User 35879 AUC after training: 0.5348837209302326
User 35879 does not improve AUC. Reverting changes.
Training on augumented user 111247 5/50 current_auc = 0.5406976744186047
User 111247 AUC after training: 0.5406976744186047
User 111247 does not improve AUC. Reverting changes.
Training on augumented user 39486 6/50 current_auc = 0.5406976744186047
User 39486 AUC after training: 0.5290697674418605
User 39486 does not improve AUC. Reverting changes.
Training on augumented user 41240 7/50 current_auc = 0.5406976744186047
User 41240 AUC after training: 0.5406976744186047
User 41240 does not improve AUC. Reverting changes.
Training on augumented user 6688 8/50 current_auc = 0.5406976744186047
User 6688 AUC after training: 0.5465116279069767
User 6688 improves AUC. Keeping the model.
Training on augumented user 102004 9/50 current_auc = 0.5465116279069767
User 102004 AUC after training: 0.5290697674418605
User 102004 does not improve AUC. Reverting changes.
Training on augumented user 61788 10/50 current_auc = 0.5465116279069767
User 61788 AUC after training: 0.5348837209302326
User 61788 does not improve AUC. Reverting changes.
Training on augumented user 48903 11/50 current_auc = 0.5465116279069767
User 48903 AUC after training: 0.5406976744186047
User 48903 does not improve AUC. Reverting changes.
Training on augumented user 41658 12/50 current_auc = 0.5465116279069767
User 41658 AUC after training: 0.5348837209302326
User 41658 does not improve AUC. Reverting changes.
Training on augumented user 33798 13/50 current_auc = 0.5465116279069767
User 33798 AUC after training: 0.5290697674418605
User 33798 does not improve AUC. Reverting changes.
Training on augumented user 116084 14/50 current_auc = 0.5465116279069767
User 116084 AUC after training: 0.5348837209302326
User 116084 does not improve AUC. Reverting changes.
Training on augumented user 19242 15/50 current_auc = 0.5465116279069767
User 19242 AUC after training: 0.5348837209302325
User 19242 does not improve AUC. Reverting changes.
Training on augumented user 85353 16/50 current_auc = 0.5465116279069767
User 85353 AUC after training: 0.5348837209302326
User 85353 does not improve AUC. Reverting changes.
Training on augumented user 131313 17/50 current_auc = 0.5465116279069767
User 131313 AUC after training: 0.5406976744186047
User 131313 does not improve AUC. Reverting changes.
Training on augumented user 103393 18/50 current_auc = 0.5465116279069767
User 103393 AUC after training: 0.5348837209302326
User 103393 does not improve AUC. Reverting changes.
Training on augumented user 25838 19/50 current_auc = 0.5465116279069767
User 25838 AUC after training: 0.5348837209302326
User 25838 does not improve AUC. Reverting changes.
Training on augumented user 118191 20/50 current_auc = 0.5465116279069767
User 118191 AUC after training: 0.5406976744186047
User 118191 does not improve AUC. Reverting changes.
Training on augumented user 97821 21/50 current_auc = 0.5465116279069767
User 97821 AUC after training: 0.5406976744186047
User 97821 does not improve AUC. Reverting changes.
Training on augumented user 122128 22/50 current_auc = 0.5465116279069767
User 122128 AUC after training: 0.5348837209302326
User 122128 does not improve AUC. Reverting changes.
Training on augumented user 106013 23/50 current_auc = 0.5465116279069767
User 106013 AUC after training: 0.5348837209302326
User 106013 does not improve AUC. Reverting changes.
Training on augumented user 121478 24/50 current_auc = 0.5465116279069767
User 121478 AUC after training: 0.5465116279069767
User 121478 does not improve AUC. Reverting changes.
Training on augumented user 111817 25/50 current_auc = 0.5465116279069767
User 111817 AUC after training: 0.5406976744186047
User 111817 does not improve AUC. Reverting changes.
Training on augumented user 121668 26/50 current_auc = 0.5465116279069767
User 121668 AUC after training: 0.5406976744186047
User 121668 does not improve AUC. Reverting changes.
Training on augumented user 70151 27/50 current_auc = 0.5465116279069767
User 70151 AUC after training: 0.5348837209302326
User 70151 does not improve AUC. Reverting changes.
Training on augumented user 63810 28/50 current_auc = 0.5465116279069767
User 63810 AUC after training: 0.5290697674418605
User 63810 does not improve AUC. Reverting changes.
Training on augumented user 24608 29/50 current_auc = 0.5465116279069767
User 24608 AUC after training: 0.5465116279069767
User 24608 does not improve AUC. Reverting changes.
Training on augumented user 26517 30/50 current_auc = 0.5465116279069767
User 26517 AUC after training: 0.5406976744186046
User 26517 does not improve AUC. Reverting changes.
Training on augumented user 65721 31/50 current_auc = 0.5465116279069767
User 65721 AUC after training: 0.5406976744186047
User 65721 does not improve AUC. Reverting changes.
Training on augumented user 128219 32/50 current_auc = 0.5465116279069767
User 128219 AUC after training: 0.5406976744186047
User 128219 does not improve AUC. Reverting changes.
Training on augumented user 24179 33/50 current_auc = 0.5465116279069767
User 24179 AUC after training: 0.5406976744186047
User 24179 does not improve AUC. Reverting changes.
Training on augumented user 69672 34/50 current_auc = 0.5465116279069767
User 69672 AUC after training: 0.5406976744186047
User 69672 does not improve AUC. Reverting changes.
Training on augumented user 93403 35/50 current_auc = 0.5465116279069767
User 93403 AUC after training: 0.5290697674418605
User 93403 does not improve AUC. Reverting changes.
Training on augumented user 32775 36/50 current_auc = 0.5465116279069767
User 32775 AUC after training: 0.5406976744186047
User 32775 does not improve AUC. Reverting changes.
Training on augumented user 88740 37/50 current_auc = 0.5465116279069767
User 88740 AUC after training: 0.5348837209302326
User 88740 does not improve AUC. Reverting changes.
Training on augumented user 31761 38/50 current_auc = 0.5465116279069767
User 31761 AUC after training: 0.5348837209302326
User 31761 does not improve AUC. Reverting changes.
Training on augumented user 41960 39/50 current_auc = 0.5465116279069767
User 41960 AUC after training: 0.5406976744186047
User 41960 does not improve AUC. Reverting changes.
Training on augumented user 35696 40/50 current_auc = 0.5465116279069767
User 35696 AUC after training: 0.5348837209302326
User 35696 does not improve AUC. Reverting changes.
Training on augumented user 135579 41/50 current_auc = 0.5465116279069767
User 135579 AUC after training: 0.5348837209302326
User 135579 does not improve AUC. Reverting changes.
Training on augumented user 3060 42/50 current_auc = 0.5465116279069767
User 3060 AUC after training: 0.5290697674418605
User 3060 does not improve AUC. Reverting changes.
Training on augumented user 136989 43/50 current_auc = 0.5465116279069767
User 136989 AUC after training: 0.5348837209302326
User 136989 does not improve AUC. Reverting changes.
Training on augumented user 109925 44/50 current_auc = 0.5465116279069767
User 109925 AUC after training: 0.5290697674418605
User 109925 does not improve AUC. Reverting changes.
Training on augumented user 136362 45/50 current_auc = 0.5465116279069767
User 136362 AUC after training: 0.5465116279069767
User 136362 does not improve AUC. Reverting changes.
Training on augumented user 130243 46/50 current_auc = 0.5465116279069767
User 130243 AUC after training: 0.5406976744186047
User 130243 does not improve AUC. Reverting changes.
Training on augumented user 19052 47/50 current_auc = 0.5465116279069767
User 19052 AUC after training: 0.5348837209302326
User 19052 does not improve AUC. Reverting changes.
Training on augumented user 121886 48/50 current_auc = 0.5465116279069767
User 121886 AUC after training: 0.5406976744186047
User 121886 does not improve AUC. Reverting changes.
Training on augumented user 119900 49/50 current_auc = 0.5465116279069767
User 119900 AUC after training: 0.5465116279069767
User 119900 does not improve AUC. Reverting changes.
[2024-12-02 19:16:46.451210] start test user 46436 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:47.190393] start test user 46436 180/568 recall augumented users by random, augumented_users = [34592, 83023, 61595, 138220, 75821, 36080, 39927, 12681, 79463, 60518, 17221, 93197, 80689, 31842, 14059, 72327, 95221, 126435, 122804, 122034, 81940, 84355, 106368, 134049, 10700, 79598, 127250, 10154, 15417, 8723, 1817, 14851, 30201, 115213, 122141, 116568, 120224, 107135, 26648, 58074, 32029, 64843, 108411, 136212, 82671, 21719, 62765, 986, 72820, 33909]
[2024-12-02 19:16:47.228672] user = 46436 Cloud 180/568
[2024-12-02 19:16:47.250612] user = 46436 Local 180/568
[2024-12-02 19:16:47.342793] user = 46436 Local+ 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:49.446124] user = 46436 MPDA- 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6130952380952381
Training on augumented user 34592 0/50 current_auc = 0.6130952380952381
User 34592 AUC after training: 0.6190476190476191
User 34592 improves AUC. Keeping the model.
Training on augumented user 83023 1/50 current_auc = 0.6190476190476191
User 83023 AUC after training: 0.6190476190476191
User 83023 does not improve AUC. Reverting changes.
Training on augumented user 61595 2/50 current_auc = 0.6190476190476191
User 61595 AUC after training: 0.625
User 61595 improves AUC. Keeping the model.
Training on augumented user 138220 3/50 current_auc = 0.625
User 138220 AUC after training: 0.6190476190476191
User 138220 does not improve AUC. Reverting changes.
Training on augumented user 75821 4/50 current_auc = 0.625
User 75821 AUC after training: 0.625
User 75821 does not improve AUC. Reverting changes.
Training on augumented user 36080 5/50 current_auc = 0.625
User 36080 AUC after training: 0.625
User 36080 does not improve AUC. Reverting changes.
Training on augumented user 39927 6/50 current_auc = 0.625
User 39927 AUC after training: 0.625
User 39927 does not improve AUC. Reverting changes.
Training on augumented user 12681 7/50 current_auc = 0.625
User 12681 AUC after training: 0.625
User 12681 does not improve AUC. Reverting changes.
Training on augumented user 79463 8/50 current_auc = 0.625
User 79463 AUC after training: 0.6190476190476191
User 79463 does not improve AUC. Reverting changes.
Training on augumented user 60518 9/50 current_auc = 0.625
User 60518 AUC after training: 0.630952380952381
User 60518 improves AUC. Keeping the model.
Training on augumented user 17221 10/50 current_auc = 0.630952380952381
User 17221 AUC after training: 0.6428571428571429
User 17221 improves AUC. Keeping the model.
Training on augumented user 93197 11/50 current_auc = 0.6428571428571429
User 93197 AUC after training: 0.6428571428571429
User 93197 does not improve AUC. Reverting changes.
Training on augumented user 80689 12/50 current_auc = 0.6428571428571429
User 80689 AUC after training: 0.6309523809523809
User 80689 does not improve AUC. Reverting changes.
Training on augumented user 31842 13/50 current_auc = 0.6428571428571429
User 31842 AUC after training: 0.6309523809523809
User 31842 does not improve AUC. Reverting changes.
Training on augumented user 14059 14/50 current_auc = 0.6428571428571429
User 14059 AUC after training: 0.625
User 14059 does not improve AUC. Reverting changes.
Training on augumented user 72327 15/50 current_auc = 0.6428571428571429
User 72327 AUC after training: 0.6309523809523809
User 72327 does not improve AUC. Reverting changes.
Training on augumented user 95221 16/50 current_auc = 0.6428571428571429
User 95221 AUC after training: 0.630952380952381
User 95221 does not improve AUC. Reverting changes.
Training on augumented user 126435 17/50 current_auc = 0.6428571428571429
User 126435 AUC after training: 0.6309523809523809
User 126435 does not improve AUC. Reverting changes.
Training on augumented user 122804 18/50 current_auc = 0.6428571428571429
User 122804 AUC after training: 0.6547619047619048
User 122804 improves AUC. Keeping the model.
Training on augumented user 122034 19/50 current_auc = 0.6547619047619048
User 122034 AUC after training: 0.6547619047619048
User 122034 does not improve AUC. Reverting changes.
Training on augumented user 81940 20/50 current_auc = 0.6547619047619048
User 81940 AUC after training: 0.6488095238095238
User 81940 does not improve AUC. Reverting changes.
Training on augumented user 84355 21/50 current_auc = 0.6547619047619048
User 84355 AUC after training: 0.6547619047619048
User 84355 does not improve AUC. Reverting changes.
Training on augumented user 106368 22/50 current_auc = 0.6547619047619048
User 106368 AUC after training: 0.6607142857142858
User 106368 improves AUC. Keeping the model.
Training on augumented user 134049 23/50 current_auc = 0.6607142857142858
User 134049 AUC after training: 0.6547619047619048
User 134049 does not improve AUC. Reverting changes.
Training on augumented user 10700 24/50 current_auc = 0.6607142857142858
User 10700 AUC after training: 0.6547619047619048
User 10700 does not improve AUC. Reverting changes.
Training on augumented user 79598 25/50 current_auc = 0.6607142857142858
User 79598 AUC after training: 0.6547619047619048
User 79598 does not improve AUC. Reverting changes.
Training on augumented user 127250 26/50 current_auc = 0.6607142857142858
User 127250 AUC after training: 0.6488095238095237
User 127250 does not improve AUC. Reverting changes.
Training on augumented user 10154 27/50 current_auc = 0.6607142857142858
User 10154 AUC after training: 0.6547619047619048
User 10154 does not improve AUC. Reverting changes.
Training on augumented user 15417 28/50 current_auc = 0.6607142857142858
User 15417 AUC after training: 0.6547619047619048
User 15417 does not improve AUC. Reverting changes.
Training on augumented user 8723 29/50 current_auc = 0.6607142857142858
User 8723 AUC after training: 0.6607142857142857
User 8723 does not improve AUC. Reverting changes.
Training on augumented user 1817 30/50 current_auc = 0.6607142857142858
User 1817 AUC after training: 0.6547619047619048
User 1817 does not improve AUC. Reverting changes.
Training on augumented user 14851 31/50 current_auc = 0.6607142857142858
User 14851 AUC after training: 0.6428571428571429
User 14851 does not improve AUC. Reverting changes.
Training on augumented user 30201 32/50 current_auc = 0.6607142857142858
User 30201 AUC after training: 0.6607142857142856
User 30201 does not improve AUC. Reverting changes.
Training on augumented user 115213 33/50 current_auc = 0.6607142857142858
User 115213 AUC after training: 0.6547619047619048
User 115213 does not improve AUC. Reverting changes.
Training on augumented user 122141 34/50 current_auc = 0.6607142857142858
User 122141 AUC after training: 0.6547619047619048
User 122141 does not improve AUC. Reverting changes.
Training on augumented user 116568 35/50 current_auc = 0.6607142857142858
User 116568 AUC after training: 0.6547619047619048
User 116568 does not improve AUC. Reverting changes.
Training on augumented user 120224 36/50 current_auc = 0.6607142857142858
User 120224 AUC after training: 0.6547619047619048
User 120224 does not improve AUC. Reverting changes.
Training on augumented user 107135 37/50 current_auc = 0.6607142857142858
User 107135 AUC after training: 0.6428571428571429
User 107135 does not improve AUC. Reverting changes.
Training on augumented user 26648 38/50 current_auc = 0.6607142857142858
User 26648 AUC after training: 0.6607142857142857
User 26648 does not improve AUC. Reverting changes.
Training on augumented user 58074 39/50 current_auc = 0.6607142857142858
User 58074 AUC after training: 0.6547619047619048
User 58074 does not improve AUC. Reverting changes.
Training on augumented user 32029 40/50 current_auc = 0.6607142857142858
User 32029 AUC after training: 0.6607142857142858
User 32029 does not improve AUC. Reverting changes.
Training on augumented user 64843 41/50 current_auc = 0.6607142857142858
User 64843 AUC after training: 0.6547619047619048
User 64843 does not improve AUC. Reverting changes.
Training on augumented user 108411 42/50 current_auc = 0.6607142857142858
User 108411 AUC after training: 0.6488095238095238
User 108411 does not improve AUC. Reverting changes.
Training on augumented user 136212 43/50 current_auc = 0.6607142857142858
User 136212 AUC after training: 0.6666666666666667
User 136212 improves AUC. Keeping the model.
Training on augumented user 82671 44/50 current_auc = 0.6666666666666667
User 82671 AUC after training: 0.6607142857142857
User 82671 does not improve AUC. Reverting changes.
Training on augumented user 21719 45/50 current_auc = 0.6666666666666667
User 21719 AUC after training: 0.6666666666666667
User 21719 does not improve AUC. Reverting changes.
Training on augumented user 62765 46/50 current_auc = 0.6666666666666667
User 62765 AUC after training: 0.6607142857142856
User 62765 does not improve AUC. Reverting changes.
Training on augumented user 986 47/50 current_auc = 0.6666666666666667
User 986 AUC after training: 0.6547619047619048
User 986 does not improve AUC. Reverting changes.
Training on augumented user 72820 48/50 current_auc = 0.6666666666666667
User 72820 AUC after training: 0.6666666666666667
User 72820 does not improve AUC. Reverting changes.
Training on augumented user 33909 49/50 current_auc = 0.6666666666666667
User 33909 AUC after training: 0.6607142857142857
User 33909 does not improve AUC. Reverting changes.
[2024-12-02 19:17:20.561770] start test user 46443 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:20.990304] start test user 46443 181/568 recall augumented users by random, augumented_users = [36721, 2014, 89373, 95844, 113399, 65070, 131982, 132394, 71558, 54518, 39881, 110358, 70818, 73015, 43369, 52933, 117387, 63224, 2805, 50092, 26255, 127067, 7837, 81844, 79670, 72850, 126634, 132286, 16441, 55059, 92388, 104569, 125990, 16645, 103204, 107801, 62469, 99027, 6366, 72436, 116718, 32663, 63444, 99748, 32454, 13477, 136736, 119882, 56781, 43674]
[2024-12-02 19:17:21.005870] user = 46443 Cloud 181/568
[2024-12-02 19:17:21.021935] user = 46443 Local 181/568
[2024-12-02 19:17:21.117003] user = 46443 Local+ 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:23.585010] user = 46443 MPDA- 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6590909090909092
Training on augumented user 36721 0/50 current_auc = 0.6590909090909092
User 36721 AUC after training: 0.6609848484848485
User 36721 improves AUC. Keeping the model.
Training on augumented user 2014 1/50 current_auc = 0.6609848484848485
User 2014 AUC after training: 0.6609848484848485
User 2014 does not improve AUC. Reverting changes.
Training on augumented user 89373 2/50 current_auc = 0.6609848484848485
User 89373 AUC after training: 0.6609848484848485
User 89373 does not improve AUC. Reverting changes.
Training on augumented user 95844 3/50 current_auc = 0.6609848484848485
User 95844 AUC after training: 0.6600378787878788
User 95844 does not improve AUC. Reverting changes.
Training on augumented user 113399 4/50 current_auc = 0.6609848484848485
User 113399 AUC after training: 0.6619318181818182
User 113399 improves AUC. Keeping the model.
Training on augumented user 65070 5/50 current_auc = 0.6619318181818182
User 65070 AUC after training: 0.6609848484848485
User 65070 does not improve AUC. Reverting changes.
Training on augumented user 131982 6/50 current_auc = 0.6619318181818182
User 131982 AUC after training: 0.6619318181818182
User 131982 does not improve AUC. Reverting changes.
Training on augumented user 132394 7/50 current_auc = 0.6619318181818182
User 132394 AUC after training: 0.6609848484848485
User 132394 does not improve AUC. Reverting changes.
Training on augumented user 71558 8/50 current_auc = 0.6619318181818182
User 71558 AUC after training: 0.6581439393939393
User 71558 does not improve AUC. Reverting changes.
Training on augumented user 54518 9/50 current_auc = 0.6619318181818182
User 54518 AUC after training: 0.6600378787878788
User 54518 does not improve AUC. Reverting changes.
Training on augumented user 39881 10/50 current_auc = 0.6619318181818182
User 39881 AUC after training: 0.6590909090909091
User 39881 does not improve AUC. Reverting changes.
Training on augumented user 110358 11/50 current_auc = 0.6619318181818182
User 110358 AUC after training: 0.6590909090909091
User 110358 does not improve AUC. Reverting changes.
Training on augumented user 70818 12/50 current_auc = 0.6619318181818182
User 70818 AUC after training: 0.6581439393939393
User 70818 does not improve AUC. Reverting changes.
Training on augumented user 73015 13/50 current_auc = 0.6619318181818182
User 73015 AUC after training: 0.6600378787878788
User 73015 does not improve AUC. Reverting changes.
Training on augumented user 43369 14/50 current_auc = 0.6619318181818182
User 43369 AUC after training: 0.6581439393939393
User 43369 does not improve AUC. Reverting changes.
Training on augumented user 52933 15/50 current_auc = 0.6619318181818182
User 52933 AUC after training: 0.6609848484848485
User 52933 does not improve AUC. Reverting changes.
Training on augumented user 117387 16/50 current_auc = 0.6619318181818182
User 117387 AUC after training: 0.6609848484848485
User 117387 does not improve AUC. Reverting changes.
Training on augumented user 63224 17/50 current_auc = 0.6619318181818182
User 63224 AUC after training: 0.6609848484848485
User 63224 does not improve AUC. Reverting changes.
Training on augumented user 2805 18/50 current_auc = 0.6619318181818182
User 2805 AUC after training: 0.6590909090909091
User 2805 does not improve AUC. Reverting changes.
Training on augumented user 50092 19/50 current_auc = 0.6619318181818182
User 50092 AUC after training: 0.6609848484848485
User 50092 does not improve AUC. Reverting changes.
Training on augumented user 26255 20/50 current_auc = 0.6619318181818182
User 26255 AUC after training: 0.6590909090909091
User 26255 does not improve AUC. Reverting changes.
Training on augumented user 127067 21/50 current_auc = 0.6619318181818182
User 127067 AUC after training: 0.6619318181818182
User 127067 does not improve AUC. Reverting changes.
Training on augumented user 7837 22/50 current_auc = 0.6619318181818182
User 7837 AUC after training: 0.6619318181818182
User 7837 does not improve AUC. Reverting changes.
Training on augumented user 81844 23/50 current_auc = 0.6619318181818182
User 81844 AUC after training: 0.6628787878787878
User 81844 improves AUC. Keeping the model.
Training on augumented user 79670 24/50 current_auc = 0.6628787878787878
User 79670 AUC after training: 0.6619318181818182
User 79670 does not improve AUC. Reverting changes.
Training on augumented user 72850 25/50 current_auc = 0.6628787878787878
User 72850 AUC after training: 0.6600378787878788
User 72850 does not improve AUC. Reverting changes.
Training on augumented user 126634 26/50 current_auc = 0.6628787878787878
User 126634 AUC after training: 0.6600378787878788
User 126634 does not improve AUC. Reverting changes.
Training on augumented user 132286 27/50 current_auc = 0.6628787878787878
User 132286 AUC after training: 0.6628787878787878
User 132286 does not improve AUC. Reverting changes.
Training on augumented user 16441 28/50 current_auc = 0.6628787878787878
User 16441 AUC after training: 0.6628787878787878
User 16441 does not improve AUC. Reverting changes.
Training on augumented user 55059 29/50 current_auc = 0.6628787878787878
User 55059 AUC after training: 0.6581439393939393
User 55059 does not improve AUC. Reverting changes.
Training on augumented user 92388 30/50 current_auc = 0.6628787878787878
User 92388 AUC after training: 0.6619318181818182
User 92388 does not improve AUC. Reverting changes.
Training on augumented user 104569 31/50 current_auc = 0.6628787878787878
User 104569 AUC after training: 0.6600378787878788
User 104569 does not improve AUC. Reverting changes.
Training on augumented user 125990 32/50 current_auc = 0.6628787878787878
User 125990 AUC after training: 0.6590909090909091
User 125990 does not improve AUC. Reverting changes.
Training on augumented user 16645 33/50 current_auc = 0.6628787878787878
User 16645 AUC after training: 0.6609848484848485
User 16645 does not improve AUC. Reverting changes.
Training on augumented user 103204 34/50 current_auc = 0.6628787878787878
User 103204 AUC after training: 0.6619318181818182
User 103204 does not improve AUC. Reverting changes.
Training on augumented user 107801 35/50 current_auc = 0.6628787878787878
User 107801 AUC after training: 0.6590909090909091
User 107801 does not improve AUC. Reverting changes.
Training on augumented user 62469 36/50 current_auc = 0.6628787878787878
User 62469 AUC after training: 0.6628787878787878
User 62469 does not improve AUC. Reverting changes.
Training on augumented user 99027 37/50 current_auc = 0.6628787878787878
User 99027 AUC after training: 0.6590909090909091
User 99027 does not improve AUC. Reverting changes.
Training on augumented user 6366 38/50 current_auc = 0.6628787878787878
User 6366 AUC after training: 0.6600378787878788
User 6366 does not improve AUC. Reverting changes.
Training on augumented user 72436 39/50 current_auc = 0.6628787878787878
User 72436 AUC after training: 0.6609848484848485
User 72436 does not improve AUC. Reverting changes.
Training on augumented user 116718 40/50 current_auc = 0.6628787878787878
User 116718 AUC after training: 0.6581439393939393
User 116718 does not improve AUC. Reverting changes.
Training on augumented user 32663 41/50 current_auc = 0.6628787878787878
User 32663 AUC after training: 0.6619318181818182
User 32663 does not improve AUC. Reverting changes.
Training on augumented user 63444 42/50 current_auc = 0.6628787878787878
User 63444 AUC after training: 0.6590909090909091
User 63444 does not improve AUC. Reverting changes.
Training on augumented user 99748 43/50 current_auc = 0.6628787878787878
User 99748 AUC after training: 0.6619318181818182
User 99748 does not improve AUC. Reverting changes.
Training on augumented user 32454 44/50 current_auc = 0.6628787878787878
User 32454 AUC after training: 0.6581439393939394
User 32454 does not improve AUC. Reverting changes.
Training on augumented user 13477 45/50 current_auc = 0.6628787878787878
User 13477 AUC after training: 0.6619318181818182
User 13477 does not improve AUC. Reverting changes.
Training on augumented user 136736 46/50 current_auc = 0.6628787878787878
User 136736 AUC after training: 0.6628787878787878
User 136736 does not improve AUC. Reverting changes.
Training on augumented user 119882 47/50 current_auc = 0.6628787878787878
User 119882 AUC after training: 0.6600378787878788
User 119882 does not improve AUC. Reverting changes.
Training on augumented user 56781 48/50 current_auc = 0.6628787878787878
User 56781 AUC after training: 0.6600378787878788
User 56781 does not improve AUC. Reverting changes.
Training on augumented user 43674 49/50 current_auc = 0.6628787878787878
User 43674 AUC after training: 0.6619318181818182
User 43674 does not improve AUC. Reverting changes.
[2024-12-02 19:17:53.239101] start test user 46465 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:53.708855] start test user 46465 182/568 recall augumented users by random, augumented_users = [65604, 53596, 57979, 128323, 37222, 75996, 131068, 4704, 34351, 43745, 122996, 109902, 38964, 107616, 119842, 71292, 57840, 113229, 46597, 106504, 54480, 46251, 132313, 74516, 65089, 2739, 114624, 131492, 123077, 114616, 49929, 59333, 39385, 75952, 136832, 17223, 112345, 107738, 28519, 110910, 133129, 13848, 16142, 106946, 16768, 80404, 28233, 25298, 7034, 135728]
[2024-12-02 19:17:53.723278] user = 46465 Cloud 182/568
[2024-12-02 19:17:53.740785] user = 46465 Local 182/568
[2024-12-02 19:17:53.787382] user = 46465 Local+ 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:56.668212] user = 46465 MPDA- 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8422501966955154
Training on augumented user 65604 0/50 current_auc = 0.8422501966955154
User 65604 AUC after training: 0.8430369787568843
User 65604 improves AUC. Keeping the model.
Training on augumented user 53596 1/50 current_auc = 0.8430369787568843
User 53596 AUC after training: 0.8430369787568843
User 53596 does not improve AUC. Reverting changes.
Training on augumented user 57979 2/50 current_auc = 0.8430369787568843
User 57979 AUC after training: 0.8430369787568843
User 57979 does not improve AUC. Reverting changes.
Training on augumented user 128323 3/50 current_auc = 0.8430369787568843
User 128323 AUC after training: 0.8426435877261998
User 128323 does not improve AUC. Reverting changes.
Training on augumented user 37222 4/50 current_auc = 0.8430369787568843
User 37222 AUC after training: 0.8426435877261998
User 37222 does not improve AUC. Reverting changes.
Training on augumented user 75996 5/50 current_auc = 0.8430369787568843
User 75996 AUC after training: 0.8426435877261998
User 75996 does not improve AUC. Reverting changes.
Training on augumented user 131068 6/50 current_auc = 0.8430369787568843
User 131068 AUC after training: 0.8442171518489379
User 131068 improves AUC. Keeping the model.
Training on augumented user 4704 7/50 current_auc = 0.8442171518489379
User 4704 AUC after training: 0.8446105428796223
User 4704 improves AUC. Keeping the model.
Training on augumented user 34351 8/50 current_auc = 0.8446105428796223
User 34351 AUC after training: 0.8446105428796223
User 34351 does not improve AUC. Reverting changes.
Training on augumented user 43745 9/50 current_auc = 0.8446105428796223
User 43745 AUC after training: 0.8442171518489379
User 43745 does not improve AUC. Reverting changes.
Training on augumented user 122996 10/50 current_auc = 0.8446105428796223
User 122996 AUC after training: 0.8438237608182533
User 122996 does not improve AUC. Reverting changes.
Training on augumented user 109902 11/50 current_auc = 0.8446105428796223
User 109902 AUC after training: 0.8434303697875689
User 109902 does not improve AUC. Reverting changes.
Training on augumented user 38964 12/50 current_auc = 0.8446105428796223
User 38964 AUC after training: 0.8461841070023604
User 38964 improves AUC. Keeping the model.
Training on augumented user 107616 13/50 current_auc = 0.8461841070023604
User 107616 AUC after training: 0.8461841070023604
User 107616 does not improve AUC. Reverting changes.
Training on augumented user 119842 14/50 current_auc = 0.8461841070023604
User 119842 AUC after training: 0.8469708890637293
User 119842 improves AUC. Keeping the model.
Training on augumented user 71292 15/50 current_auc = 0.8469708890637293
User 71292 AUC after training: 0.8461841070023604
User 71292 does not improve AUC. Reverting changes.
Training on augumented user 57840 16/50 current_auc = 0.8469708890637293
User 57840 AUC after training: 0.8465774980330448
User 57840 does not improve AUC. Reverting changes.
Training on augumented user 113229 17/50 current_auc = 0.8469708890637293
User 113229 AUC after training: 0.8465774980330447
User 113229 does not improve AUC. Reverting changes.
Training on augumented user 46597 18/50 current_auc = 0.8469708890637293
User 46597 AUC after training: 0.8453973249409913
User 46597 does not improve AUC. Reverting changes.
Training on augumented user 106504 19/50 current_auc = 0.8469708890637293
User 106504 AUC after training: 0.8477576711250983
User 106504 improves AUC. Keeping the model.
Training on augumented user 54480 20/50 current_auc = 0.8477576711250983
User 54480 AUC after training: 0.8481510621557828
User 54480 improves AUC. Keeping the model.
Training on augumented user 46251 21/50 current_auc = 0.8481510621557828
User 46251 AUC after training: 0.8485444531864673
User 46251 improves AUC. Keeping the model.
Training on augumented user 132313 22/50 current_auc = 0.8485444531864673
User 132313 AUC after training: 0.8485444531864673
User 132313 does not improve AUC. Reverting changes.
Training on augumented user 74516 23/50 current_auc = 0.8485444531864673
User 74516 AUC after training: 0.8481510621557828
User 74516 does not improve AUC. Reverting changes.
Training on augumented user 65089 24/50 current_auc = 0.8485444531864673
User 65089 AUC after training: 0.8481510621557828
User 65089 does not improve AUC. Reverting changes.
Training on augumented user 2739 25/50 current_auc = 0.8485444531864673
User 2739 AUC after training: 0.8481510621557828
User 2739 does not improve AUC. Reverting changes.
Training on augumented user 114624 26/50 current_auc = 0.8485444531864673
User 114624 AUC after training: 0.8497246262785209
User 114624 improves AUC. Keeping the model.
Training on augumented user 131492 27/50 current_auc = 0.8497246262785209
User 131492 AUC after training: 0.8497246262785207
User 131492 does not improve AUC. Reverting changes.
Training on augumented user 123077 28/50 current_auc = 0.8497246262785209
User 123077 AUC after training: 0.8505114083398898
User 123077 improves AUC. Keeping the model.
Training on augumented user 114616 29/50 current_auc = 0.8505114083398898
User 114616 AUC after training: 0.8493312352478364
User 114616 does not improve AUC. Reverting changes.
Training on augumented user 49929 30/50 current_auc = 0.8505114083398898
User 49929 AUC after training: 0.8489378442171518
User 49929 does not improve AUC. Reverting changes.
Training on augumented user 59333 31/50 current_auc = 0.8505114083398898
User 59333 AUC after training: 0.8501180173092053
User 59333 does not improve AUC. Reverting changes.
Training on augumented user 39385 32/50 current_auc = 0.8505114083398898
User 39385 AUC after training: 0.8485444531864674
User 39385 does not improve AUC. Reverting changes.
Training on augumented user 75952 33/50 current_auc = 0.8505114083398898
User 75952 AUC after training: 0.8501180173092053
User 75952 does not improve AUC. Reverting changes.
Training on augumented user 136832 34/50 current_auc = 0.8505114083398898
User 136832 AUC after training: 0.8497246262785209
User 136832 does not improve AUC. Reverting changes.
Training on augumented user 17223 35/50 current_auc = 0.8505114083398898
User 17223 AUC after training: 0.8501180173092053
User 17223 does not improve AUC. Reverting changes.
Training on augumented user 112345 36/50 current_auc = 0.8505114083398898
User 112345 AUC after training: 0.8497246262785207
User 112345 does not improve AUC. Reverting changes.
Training on augumented user 107738 37/50 current_auc = 0.8505114083398898
User 107738 AUC after training: 0.8497246262785209
User 107738 does not improve AUC. Reverting changes.
Training on augumented user 28519 38/50 current_auc = 0.8505114083398898
User 28519 AUC after training: 0.8505114083398898
User 28519 does not improve AUC. Reverting changes.
Training on augumented user 110910 39/50 current_auc = 0.8505114083398898
User 110910 AUC after training: 0.8493312352478364
User 110910 does not improve AUC. Reverting changes.
Training on augumented user 133129 40/50 current_auc = 0.8505114083398898
User 133129 AUC after training: 0.8497246262785209
User 133129 does not improve AUC. Reverting changes.
Training on augumented user 13848 41/50 current_auc = 0.8505114083398898
User 13848 AUC after training: 0.8505114083398898
User 13848 does not improve AUC. Reverting changes.
Training on augumented user 16142 42/50 current_auc = 0.8505114083398898
User 16142 AUC after training: 0.8481510621557828
User 16142 does not improve AUC. Reverting changes.
Training on augumented user 106946 43/50 current_auc = 0.8505114083398898
User 106946 AUC after training: 0.8505114083398898
User 106946 does not improve AUC. Reverting changes.
Training on augumented user 16768 44/50 current_auc = 0.8505114083398898
User 16768 AUC after training: 0.8493312352478364
User 16768 does not improve AUC. Reverting changes.
Training on augumented user 80404 45/50 current_auc = 0.8505114083398898
User 80404 AUC after training: 0.8501180173092053
User 80404 does not improve AUC. Reverting changes.
Training on augumented user 28233 46/50 current_auc = 0.8505114083398898
User 28233 AUC after training: 0.8497246262785209
User 28233 does not improve AUC. Reverting changes.
Training on augumented user 25298 47/50 current_auc = 0.8505114083398898
User 25298 AUC after training: 0.8489378442171518
User 25298 does not improve AUC. Reverting changes.
Training on augumented user 7034 48/50 current_auc = 0.8505114083398898
User 7034 AUC after training: 0.8497246262785209
User 7034 does not improve AUC. Reverting changes.
Training on augumented user 135728 49/50 current_auc = 0.8505114083398898
User 135728 AUC after training: 0.8493312352478364
User 135728 does not improve AUC. Reverting changes.
[2024-12-02 19:18:28.550514] start test user 46470 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:28.984642] start test user 46470 183/568 recall augumented users by random, augumented_users = [3162, 94415, 30764, 131073, 46011, 102135, 81380, 110687, 82846, 126093, 73237, 24558, 64647, 118489, 54891, 129838, 112673, 43641, 6266, 59068, 135104, 39601, 41004, 9025, 17437, 32907, 80341, 28585, 105103, 65304, 12283, 2705, 22044, 46940, 34100, 125542, 125627, 71299, 6240, 95510, 136802, 16037, 62038, 7268, 84623, 138085, 97738, 58635, 121139, 113806]
[2024-12-02 19:18:29.007514] user = 46470 Cloud 183/568
[2024-12-02 19:18:29.225142] user = 46470 Local 183/568
[2024-12-02 19:18:29.568692] user = 46470 Local+ 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:33.062392] user = 46470 MPDA- 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6798438536437268
Training on augumented user 3162 0/50 current_auc = 0.6798438536437268
User 3162 AUC after training: 0.6800668787563544
User 3162 improves AUC. Keeping the model.
Training on augumented user 94415 1/50 current_auc = 0.6800668787563544
User 94415 AUC after training: 0.6800884618317701
User 94415 improves AUC. Keeping the model.
Training on augumented user 30764 2/50 current_auc = 0.6800884618317701
User 30764 AUC after training: 0.6801143615222687
User 30764 improves AUC. Keeping the model.
Training on augumented user 131073 3/50 current_auc = 0.6801143615222687
User 131073 AUC after training: 0.6801057282921025
User 131073 does not improve AUC. Reverting changes.
Training on augumented user 46011 4/50 current_auc = 0.6801143615222687
User 46011 AUC after training: 0.6801747941334324
User 46011 improves AUC. Keeping the model.
Training on augumented user 102135 5/50 current_auc = 0.6801747941334324
User 102135 AUC after training: 0.6801345057259899
User 102135 does not improve AUC. Reverting changes.
Training on augumented user 81380 6/50 current_auc = 0.6801747941334324
User 81380 AUC after training: 0.6802596875634005
User 81380 improves AUC. Keeping the model.
Training on augumented user 110687 7/50 current_auc = 0.6802596875634005
User 110687 AUC after training: 0.6798416953361852
User 110687 does not improve AUC. Reverting changes.
Training on augumented user 82846 8/50 current_auc = 0.6802596875634005
User 82846 AUC after training: 0.6803733584272557
User 82846 improves AUC. Keeping the model.
Training on augumented user 126093 9/50 current_auc = 0.6803733584272557
User 126093 AUC after training: 0.6804352299101136
User 126093 improves AUC. Keeping the model.
Training on augumented user 73237 10/50 current_auc = 0.6804352299101136
User 73237 AUC after training: 0.6804021358611431
User 73237 does not improve AUC. Reverting changes.
Training on augumented user 24558 11/50 current_auc = 0.6804352299101136
User 24558 AUC after training: 0.6804273161157947
User 24558 does not improve AUC. Reverting changes.
Training on augumented user 64647 12/50 current_auc = 0.6804352299101136
User 64647 AUC after training: 0.6804409853968911
User 64647 improves AUC. Keeping the model.
Training on augumented user 118489 13/50 current_auc = 0.6804409853968911
User 118489 AUC after training: 0.6804366687818081
User 118489 does not improve AUC. Reverting changes.
Training on augumented user 54891 14/50 current_auc = 0.6804409853968911
User 54891 AUC after training: 0.6803316311481189
User 54891 does not improve AUC. Reverting changes.
Training on augumented user 129838 15/50 current_auc = 0.6804409853968911
User 129838 AUC after training: 0.6804798349326392
User 129838 improves AUC. Keeping the model.
Training on augumented user 112673 16/50 current_auc = 0.6804798349326392
User 112673 AUC after training: 0.6804582518572235
User 112673 does not improve AUC. Reverting changes.
Training on augumented user 43641 17/50 current_auc = 0.6804798349326392
User 43641 AUC after training: 0.6804855904194167
User 43641 improves AUC. Keeping the model.
Training on augumented user 6266 18/50 current_auc = 0.6804855904194167
User 6266 AUC after training: 0.6804956625212772
User 6266 improves AUC. Keeping the model.
Training on augumented user 59068 19/50 current_auc = 0.6804956625212772
User 59068 AUC after training: 0.6803690418121726
User 59068 does not improve AUC. Reverting changes.
Training on augumented user 135104 20/50 current_auc = 0.6804956625212772
User 135104 AUC after training: 0.6804150857063924
User 135104 does not improve AUC. Reverting changes.
Training on augumented user 39601 21/50 current_auc = 0.6804956625212772
User 39601 AUC after training: 0.6800050072734963
User 39601 does not improve AUC. Reverting changes.
Training on augumented user 41004 22/50 current_auc = 0.6804956625212772
User 41004 AUC after training: 0.680533073185331
User 41004 improves AUC. Keeping the model.
Training on augumented user 9025 23/50 current_auc = 0.680533073185331
User 9025 AUC after training: 0.6805359509287197
User 9025 improves AUC. Keeping the model.
Training on augumented user 17437 24/50 current_auc = 0.6805359509287197
User 17437 AUC after training: 0.6806122111285215
User 17437 improves AUC. Keeping the model.
Training on augumented user 32907 25/50 current_auc = 0.6806122111285215
User 32907 AUC after training: 0.6805992612832721
User 32907 does not improve AUC. Reverting changes.
Training on augumented user 80341 26/50 current_auc = 0.6806122111285215
User 80341 AUC after training: 0.6804783960609448
User 80341 does not improve AUC. Reverting changes.
Training on augumented user 28585 27/50 current_auc = 0.6806122111285215
User 28585 AUC after training: 0.6806265998454653
User 28585 improves AUC. Keeping the model.
Training on augumented user 105103 28/50 current_auc = 0.6806265998454653
User 105103 AUC after training: 0.6806150888719102
User 105103 does not improve AUC. Reverting changes.
Training on augumented user 65304 29/50 current_auc = 0.6806265998454653
User 65304 AUC after training: 0.6802373850521375
User 65304 does not improve AUC. Reverting changes.
Training on augumented user 12283 30/50 current_auc = 0.6806265998454653
User 12283 AUC after training: 0.6805891891814114
User 12283 does not improve AUC. Reverting changes.
Training on augumented user 2705 31/50 current_auc = 0.6806265998454653
User 2705 AUC after training: 0.6806352330756315
User 2705 improves AUC. Keeping the model.
Training on augumented user 22044 32/50 current_auc = 0.6806352330756315
User 22044 AUC after training: 0.6804524963704461
User 22044 does not improve AUC. Reverting changes.
Training on augumented user 46940 33/50 current_auc = 0.6806352330756315
User 46940 AUC after training: 0.6806956656867951
User 46940 improves AUC. Keeping the model.
Training on augumented user 34100 34/50 current_auc = 0.6806956656867951
User 34100 AUC after training: 0.6806726437396851
User 34100 does not improve AUC. Reverting changes.
Training on augumented user 125542 35/50 current_auc = 0.6806956656867951
User 125542 AUC after training: 0.6807086155320444
User 125542 improves AUC. Keeping the model.
Training on augumented user 125627 36/50 current_auc = 0.6807086155320444
User 125627 AUC after training: 0.6806668882529077
User 125627 does not improve AUC. Reverting changes.
Training on augumented user 71299 37/50 current_auc = 0.6807086155320444
User 71299 AUC after training: 0.6808280418826772
User 71299 improves AUC. Keeping the model.
Training on augumented user 6240 38/50 current_auc = 0.6808280418826772
User 6240 AUC after training: 0.6808712080335084
User 6240 improves AUC. Keeping the model.
Training on augumented user 95510 39/50 current_auc = 0.6808712080335084
User 95510 AUC after training: 0.6809503459766988
User 95510 improves AUC. Keeping the model.
Training on augumented user 136802 40/50 current_auc = 0.6809503459766988
User 136802 AUC after training: 0.6809805622822807
User 136802 improves AUC. Keeping the model.
Training on augumented user 16037 41/50 current_auc = 0.6809805622822807
User 16037 AUC after training: 0.6808395528562321
User 16037 does not improve AUC. Reverting changes.
Training on augumented user 62038 42/50 current_auc = 0.6809805622822807
User 62038 AUC after training: 0.6810014259218492
User 62038 improves AUC. Keeping the model.
Training on augumented user 7268 43/50 current_auc = 0.6810014259218492
User 7268 AUC after training: 0.681012217459557
User 7268 improves AUC. Keeping the model.
Training on augumented user 84623 44/50 current_auc = 0.681012217459557
User 84623 AUC after training: 0.6810021453576963
User 84623 does not improve AUC. Reverting changes.
Training on augumented user 138085 45/50 current_auc = 0.681012217459557
User 138085 AUC after training: 0.6811122190423158
User 138085 improves AUC. Keeping the model.
Training on augumented user 97738 46/50 current_auc = 0.6811122190423158
User 97738 AUC after training: 0.6810877582235115
User 97738 does not improve AUC. Reverting changes.
Training on augumented user 58635 47/50 current_auc = 0.6811122190423158
User 58635 AUC after training: 0.6810891970952059
User 58635 does not improve AUC. Reverting changes.
Training on augumented user 121139 48/50 current_auc = 0.6811122190423158
User 121139 AUC after training: 0.6811935152930478
User 121139 improves AUC. Keeping the model.
Training on augumented user 113806 49/50 current_auc = 0.6811935152930478
User 113806 AUC after training: 0.6820518022587407
User 113806 improves AUC. Keeping the model.
[2024-12-02 19:19:22.387825] start test user 46482 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:22.988566] start test user 46482 184/568 recall augumented users by random, augumented_users = [57706, 64618, 76409, 94094, 133970, 136376, 85019, 131727, 57721, 79384, 113904, 42578, 88457, 99025, 95804, 73161, 18880, 49681, 46319, 13538, 41496, 115214, 71474, 14147, 94250, 95652, 111238, 102789, 121335, 98493, 33658, 7698, 85795, 70233, 71173, 65355, 94799, 20775, 47328, 118980, 114488, 103078, 10793, 125887, 87684, 62348, 16068, 65595, 90352, 33401]
[2024-12-02 19:19:23.016327] user = 46482 Cloud 184/568
[2024-12-02 19:19:23.040454] user = 46482 Local 184/568
[2024-12-02 19:19:23.075607] user = 46482 Local+ 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:26.201065] user = 46482 MPDA- 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 57706 0/50 current_auc = 0.75
User 57706 AUC after training: 0.75
User 57706 does not improve AUC. Reverting changes.
Training on augumented user 64618 1/50 current_auc = 0.75
User 64618 AUC after training: 0.6875
User 64618 does not improve AUC. Reverting changes.
Training on augumented user 76409 2/50 current_auc = 0.75
User 76409 AUC after training: 0.75
User 76409 does not improve AUC. Reverting changes.
Training on augumented user 94094 3/50 current_auc = 0.75
User 94094 AUC after training: 0.75
User 94094 does not improve AUC. Reverting changes.
Training on augumented user 133970 4/50 current_auc = 0.75
User 133970 AUC after training: 0.6875
User 133970 does not improve AUC. Reverting changes.
Training on augumented user 136376 5/50 current_auc = 0.75
User 136376 AUC after training: 0.75
User 136376 does not improve AUC. Reverting changes.
Training on augumented user 85019 6/50 current_auc = 0.75
User 85019 AUC after training: 0.75
User 85019 does not improve AUC. Reverting changes.
Training on augumented user 131727 7/50 current_auc = 0.75
User 131727 AUC after training: 0.75
User 131727 does not improve AUC. Reverting changes.
Training on augumented user 57721 8/50 current_auc = 0.75
User 57721 AUC after training: 0.75
User 57721 does not improve AUC. Reverting changes.
Training on augumented user 79384 9/50 current_auc = 0.75
User 79384 AUC after training: 0.6875
User 79384 does not improve AUC. Reverting changes.
Training on augumented user 113904 10/50 current_auc = 0.75
User 113904 AUC after training: 0.75
User 113904 does not improve AUC. Reverting changes.
Training on augumented user 42578 11/50 current_auc = 0.75
User 42578 AUC after training: 0.75
User 42578 does not improve AUC. Reverting changes.
Training on augumented user 88457 12/50 current_auc = 0.75
User 88457 AUC after training: 0.75
User 88457 does not improve AUC. Reverting changes.
Training on augumented user 99025 13/50 current_auc = 0.75
User 99025 AUC after training: 0.75
User 99025 does not improve AUC. Reverting changes.
Training on augumented user 95804 14/50 current_auc = 0.75
User 95804 AUC after training: 0.75
User 95804 does not improve AUC. Reverting changes.
Training on augumented user 73161 15/50 current_auc = 0.75
User 73161 AUC after training: 0.75
User 73161 does not improve AUC. Reverting changes.
Training on augumented user 18880 16/50 current_auc = 0.75
User 18880 AUC after training: 0.75
User 18880 does not improve AUC. Reverting changes.
Training on augumented user 49681 17/50 current_auc = 0.75
User 49681 AUC after training: 0.75
User 49681 does not improve AUC. Reverting changes.
Training on augumented user 46319 18/50 current_auc = 0.75
User 46319 AUC after training: 0.75
User 46319 does not improve AUC. Reverting changes.
Training on augumented user 13538 19/50 current_auc = 0.75
User 13538 AUC after training: 0.75
User 13538 does not improve AUC. Reverting changes.
Training on augumented user 41496 20/50 current_auc = 0.75
User 41496 AUC after training: 0.75
User 41496 does not improve AUC. Reverting changes.
Training on augumented user 115214 21/50 current_auc = 0.75
User 115214 AUC after training: 0.75
User 115214 does not improve AUC. Reverting changes.
Training on augumented user 71474 22/50 current_auc = 0.75
User 71474 AUC after training: 0.75
User 71474 does not improve AUC. Reverting changes.
Training on augumented user 14147 23/50 current_auc = 0.75
User 14147 AUC after training: 0.75
User 14147 does not improve AUC. Reverting changes.
Training on augumented user 94250 24/50 current_auc = 0.75
User 94250 AUC after training: 0.75
User 94250 does not improve AUC. Reverting changes.
Training on augumented user 95652 25/50 current_auc = 0.75
User 95652 AUC after training: 0.75
User 95652 does not improve AUC. Reverting changes.
Training on augumented user 111238 26/50 current_auc = 0.75
User 111238 AUC after training: 0.75
User 111238 does not improve AUC. Reverting changes.
Training on augumented user 102789 27/50 current_auc = 0.75
User 102789 AUC after training: 0.6875
User 102789 does not improve AUC. Reverting changes.
Training on augumented user 121335 28/50 current_auc = 0.75
User 121335 AUC after training: 0.75
User 121335 does not improve AUC. Reverting changes.
Training on augumented user 98493 29/50 current_auc = 0.75
User 98493 AUC after training: 0.75
User 98493 does not improve AUC. Reverting changes.
Training on augumented user 33658 30/50 current_auc = 0.75
User 33658 AUC after training: 0.75
User 33658 does not improve AUC. Reverting changes.
Training on augumented user 7698 31/50 current_auc = 0.75
User 7698 AUC after training: 0.75
User 7698 does not improve AUC. Reverting changes.
Training on augumented user 85795 32/50 current_auc = 0.75
User 85795 AUC after training: 0.75
User 85795 does not improve AUC. Reverting changes.
Training on augumented user 70233 33/50 current_auc = 0.75
User 70233 AUC after training: 0.75
User 70233 does not improve AUC. Reverting changes.
Training on augumented user 71173 34/50 current_auc = 0.75
User 71173 AUC after training: 0.6875
User 71173 does not improve AUC. Reverting changes.
Training on augumented user 65355 35/50 current_auc = 0.75
User 65355 AUC after training: 0.75
User 65355 does not improve AUC. Reverting changes.
Training on augumented user 94799 36/50 current_auc = 0.75
User 94799 AUC after training: 0.75
User 94799 does not improve AUC. Reverting changes.
Training on augumented user 20775 37/50 current_auc = 0.75
User 20775 AUC after training: 0.75
User 20775 does not improve AUC. Reverting changes.
Training on augumented user 47328 38/50 current_auc = 0.75
User 47328 AUC after training: 0.75
User 47328 does not improve AUC. Reverting changes.
Training on augumented user 118980 39/50 current_auc = 0.75
User 118980 AUC after training: 0.75
User 118980 does not improve AUC. Reverting changes.
Training on augumented user 114488 40/50 current_auc = 0.75
User 114488 AUC after training: 0.75
User 114488 does not improve AUC. Reverting changes.
Training on augumented user 103078 41/50 current_auc = 0.75
User 103078 AUC after training: 0.75
User 103078 does not improve AUC. Reverting changes.
Training on augumented user 10793 42/50 current_auc = 0.75
User 10793 AUC after training: 0.75
User 10793 does not improve AUC. Reverting changes.
Training on augumented user 125887 43/50 current_auc = 0.75
User 125887 AUC after training: 0.75
User 125887 does not improve AUC. Reverting changes.
Training on augumented user 87684 44/50 current_auc = 0.75
User 87684 AUC after training: 0.75
User 87684 does not improve AUC. Reverting changes.
Training on augumented user 62348 45/50 current_auc = 0.75
User 62348 AUC after training: 0.75
User 62348 does not improve AUC. Reverting changes.
Training on augumented user 16068 46/50 current_auc = 0.75
User 16068 AUC after training: 0.75
User 16068 does not improve AUC. Reverting changes.
Training on augumented user 65595 47/50 current_auc = 0.75
User 65595 AUC after training: 0.75
User 65595 does not improve AUC. Reverting changes.
Training on augumented user 90352 48/50 current_auc = 0.75
User 90352 AUC after training: 0.75
User 90352 does not improve AUC. Reverting changes.
Training on augumented user 33401 49/50 current_auc = 0.75
User 33401 AUC after training: 0.75
User 33401 does not improve AUC. Reverting changes.
[2024-12-02 19:19:55.993865] start test user 46514 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:56.652119] start test user 46514 185/568 recall augumented users by random, augumented_users = [112405, 118401, 29713, 28078, 74688, 113004, 72650, 29426, 113868, 44614, 60637, 129220, 129126, 119947, 103582, 22231, 29062, 19402, 85995, 10404, 57419, 14189, 117136, 73608, 87555, 13904, 24947, 104988, 121042, 5312, 66518, 41460, 83108, 37950, 36019, 16046, 68975, 82451, 85705, 136654, 69173, 109219, 109006, 102215, 12918, 11666, 52379, 123731, 8558, 134766]
[2024-12-02 19:19:56.667213] user = 46514 Cloud 185/568
[2024-12-02 19:19:56.677593] user = 46514 Local 185/568
[2024-12-02 19:19:56.861471] user = 46514 Local+ 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:59.564779] user = 46514 MPDA- 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6428571428571428
Training on augumented user 112405 0/50 current_auc = 0.6428571428571428
User 112405 AUC after training: 0.6428571428571428
User 112405 does not improve AUC. Reverting changes.
Training on augumented user 118401 1/50 current_auc = 0.6428571428571428
User 118401 AUC after training: 0.6428571428571428
User 118401 does not improve AUC. Reverting changes.
Training on augumented user 29713 2/50 current_auc = 0.6428571428571428
User 29713 AUC after training: 0.6428571428571428
User 29713 does not improve AUC. Reverting changes.
Training on augumented user 28078 3/50 current_auc = 0.6428571428571428
User 28078 AUC after training: 0.625
User 28078 does not improve AUC. Reverting changes.
Training on augumented user 74688 4/50 current_auc = 0.6428571428571428
User 74688 AUC after training: 0.6428571428571428
User 74688 does not improve AUC. Reverting changes.
Training on augumented user 113004 5/50 current_auc = 0.6428571428571428
User 113004 AUC after training: 0.6428571428571428
User 113004 does not improve AUC. Reverting changes.
Training on augumented user 72650 6/50 current_auc = 0.6428571428571428
User 72650 AUC after training: 0.6428571428571428
User 72650 does not improve AUC. Reverting changes.
Training on augumented user 29426 7/50 current_auc = 0.6428571428571428
User 29426 AUC after training: 0.6428571428571428
User 29426 does not improve AUC. Reverting changes.
Training on augumented user 113868 8/50 current_auc = 0.6428571428571428
User 113868 AUC after training: 0.6428571428571428
User 113868 does not improve AUC. Reverting changes.
Training on augumented user 44614 9/50 current_auc = 0.6428571428571428
User 44614 AUC after training: 0.6428571428571428
User 44614 does not improve AUC. Reverting changes.
Training on augumented user 60637 10/50 current_auc = 0.6428571428571428
User 60637 AUC after training: 0.6428571428571428
User 60637 does not improve AUC. Reverting changes.
Training on augumented user 129220 11/50 current_auc = 0.6428571428571428
User 129220 AUC after training: 0.6428571428571428
User 129220 does not improve AUC. Reverting changes.
Training on augumented user 129126 12/50 current_auc = 0.6428571428571428
User 129126 AUC after training: 0.6428571428571428
User 129126 does not improve AUC. Reverting changes.
Training on augumented user 119947 13/50 current_auc = 0.6428571428571428
User 119947 AUC after training: 0.6428571428571428
User 119947 does not improve AUC. Reverting changes.
Training on augumented user 103582 14/50 current_auc = 0.6428571428571428
User 103582 AUC after training: 0.6428571428571428
User 103582 does not improve AUC. Reverting changes.
Training on augumented user 22231 15/50 current_auc = 0.6428571428571428
User 22231 AUC after training: 0.6428571428571428
User 22231 does not improve AUC. Reverting changes.
Training on augumented user 29062 16/50 current_auc = 0.6428571428571428
User 29062 AUC after training: 0.625
User 29062 does not improve AUC. Reverting changes.
Training on augumented user 19402 17/50 current_auc = 0.6428571428571428
User 19402 AUC after training: 0.625
User 19402 does not improve AUC. Reverting changes.
Training on augumented user 85995 18/50 current_auc = 0.6428571428571428
User 85995 AUC after training: 0.6428571428571428
User 85995 does not improve AUC. Reverting changes.
Training on augumented user 10404 19/50 current_auc = 0.6428571428571428
User 10404 AUC after training: 0.6428571428571428
User 10404 does not improve AUC. Reverting changes.
Training on augumented user 57419 20/50 current_auc = 0.6428571428571428
User 57419 AUC after training: 0.6428571428571428
User 57419 does not improve AUC. Reverting changes.
Training on augumented user 14189 21/50 current_auc = 0.6428571428571428
User 14189 AUC after training: 0.6428571428571428
User 14189 does not improve AUC. Reverting changes.
Training on augumented user 117136 22/50 current_auc = 0.6428571428571428
User 117136 AUC after training: 0.6428571428571428
User 117136 does not improve AUC. Reverting changes.
Training on augumented user 73608 23/50 current_auc = 0.6428571428571428
User 73608 AUC after training: 0.6428571428571428
User 73608 does not improve AUC. Reverting changes.
Training on augumented user 87555 24/50 current_auc = 0.6428571428571428
User 87555 AUC after training: 0.6428571428571428
User 87555 does not improve AUC. Reverting changes.
Training on augumented user 13904 25/50 current_auc = 0.6428571428571428
User 13904 AUC after training: 0.625
User 13904 does not improve AUC. Reverting changes.
Training on augumented user 24947 26/50 current_auc = 0.6428571428571428
User 24947 AUC after training: 0.6428571428571428
User 24947 does not improve AUC. Reverting changes.
Training on augumented user 104988 27/50 current_auc = 0.6428571428571428
User 104988 AUC after training: 0.6428571428571428
User 104988 does not improve AUC. Reverting changes.
Training on augumented user 121042 28/50 current_auc = 0.6428571428571428
User 121042 AUC after training: 0.6428571428571428
User 121042 does not improve AUC. Reverting changes.
Training on augumented user 5312 29/50 current_auc = 0.6428571428571428
User 5312 AUC after training: 0.6428571428571428
User 5312 does not improve AUC. Reverting changes.
Training on augumented user 66518 30/50 current_auc = 0.6428571428571428
User 66518 AUC after training: 0.6428571428571428
User 66518 does not improve AUC. Reverting changes.
Training on augumented user 41460 31/50 current_auc = 0.6428571428571428
User 41460 AUC after training: 0.625
User 41460 does not improve AUC. Reverting changes.
Training on augumented user 83108 32/50 current_auc = 0.6428571428571428
User 83108 AUC after training: 0.6428571428571428
User 83108 does not improve AUC. Reverting changes.
Training on augumented user 37950 33/50 current_auc = 0.6428571428571428
User 37950 AUC after training: 0.6428571428571428
User 37950 does not improve AUC. Reverting changes.
Training on augumented user 36019 34/50 current_auc = 0.6428571428571428
User 36019 AUC after training: 0.625
User 36019 does not improve AUC. Reverting changes.
Training on augumented user 16046 35/50 current_auc = 0.6428571428571428
User 16046 AUC after training: 0.6428571428571428
User 16046 does not improve AUC. Reverting changes.
Training on augumented user 68975 36/50 current_auc = 0.6428571428571428
User 68975 AUC after training: 0.6428571428571428
User 68975 does not improve AUC. Reverting changes.
Training on augumented user 82451 37/50 current_auc = 0.6428571428571428
User 82451 AUC after training: 0.6428571428571428
User 82451 does not improve AUC. Reverting changes.
Training on augumented user 85705 38/50 current_auc = 0.6428571428571428
User 85705 AUC after training: 0.6428571428571428
User 85705 does not improve AUC. Reverting changes.
Training on augumented user 136654 39/50 current_auc = 0.6428571428571428
User 136654 AUC after training: 0.625
User 136654 does not improve AUC. Reverting changes.
Training on augumented user 69173 40/50 current_auc = 0.6428571428571428
User 69173 AUC after training: 0.6428571428571428
User 69173 does not improve AUC. Reverting changes.
Training on augumented user 109219 41/50 current_auc = 0.6428571428571428
User 109219 AUC after training: 0.625
User 109219 does not improve AUC. Reverting changes.
Training on augumented user 109006 42/50 current_auc = 0.6428571428571428
User 109006 AUC after training: 0.6428571428571428
User 109006 does not improve AUC. Reverting changes.
Training on augumented user 102215 43/50 current_auc = 0.6428571428571428
User 102215 AUC after training: 0.6428571428571428
User 102215 does not improve AUC. Reverting changes.
Training on augumented user 12918 44/50 current_auc = 0.6428571428571428
User 12918 AUC after training: 0.6428571428571428
User 12918 does not improve AUC. Reverting changes.
Training on augumented user 11666 45/50 current_auc = 0.6428571428571428
User 11666 AUC after training: 0.6428571428571428
User 11666 does not improve AUC. Reverting changes.
Training on augumented user 52379 46/50 current_auc = 0.6428571428571428
User 52379 AUC after training: 0.625
User 52379 does not improve AUC. Reverting changes.
Training on augumented user 123731 47/50 current_auc = 0.6428571428571428
User 123731 AUC after training: 0.6428571428571428
User 123731 does not improve AUC. Reverting changes.
Training on augumented user 8558 48/50 current_auc = 0.6428571428571428
User 8558 AUC after training: 0.625
User 8558 does not improve AUC. Reverting changes.
Training on augumented user 134766 49/50 current_auc = 0.6428571428571428
User 134766 AUC after training: 0.625
User 134766 does not improve AUC. Reverting changes.
[2024-12-02 19:20:26.201906] start test user 46555 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:26.630803] start test user 46555 186/568 recall augumented users by random, augumented_users = [99077, 132747, 77801, 4601, 120535, 43143, 13851, 121253, 94713, 22903, 93321, 57509, 23607, 85438, 64356, 67831, 70067, 120217, 131434, 79003, 116658, 115839, 85421, 24563, 67, 77451, 35411, 52983, 124965, 117443, 94993, 39126, 66270, 8972, 137487, 37729, 1880, 28040, 74985, 136216, 56524, 55167, 2887, 44314, 136482, 90267, 4299, 67684, 22779, 61363]
[2024-12-02 19:20:26.646485] user = 46555 Cloud 186/568
[2024-12-02 19:20:26.700700] user = 46555 Local 186/568
[2024-12-02 19:20:26.787121] user = 46555 Local+ 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:29.120329] user = 46555 MPDA- 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5662538699690403
Training on augumented user 99077 0/50 current_auc = 0.5662538699690403
User 99077 AUC after training: 0.5662366701066391
User 99077 does not improve AUC. Reverting changes.
Training on augumented user 132747 1/50 current_auc = 0.5662538699690403
User 132747 AUC after training: 0.5684038527691778
User 132747 improves AUC. Keeping the model.
Training on augumented user 77801 2/50 current_auc = 0.5684038527691778
User 77801 AUC after training: 0.5686188510491915
User 77801 improves AUC. Keeping the model.
Training on augumented user 4601 3/50 current_auc = 0.5686188510491915
User 4601 AUC after training: 0.5682232542139662
User 4601 does not improve AUC. Reverting changes.
Training on augumented user 120535 4/50 current_auc = 0.5686188510491915
User 120535 AUC after training: 0.5677330581355349
User 120535 does not improve AUC. Reverting changes.
Training on augumented user 43143 5/50 current_auc = 0.5686188510491915
User 43143 AUC after training: 0.5683178534571723
User 43143 does not improve AUC. Reverting changes.
Training on augumented user 13851 6/50 current_auc = 0.5686188510491915
User 13851 AUC after training: 0.5679480564155487
User 13851 does not improve AUC. Reverting changes.
Training on augumented user 121253 7/50 current_auc = 0.5686188510491915
User 121253 AUC after training: 0.5679652562779497
User 121253 does not improve AUC. Reverting changes.
Training on augumented user 94713 8/50 current_auc = 0.5686188510491915
User 94713 AUC after training: 0.5682060543515652
User 94713 does not improve AUC. Reverting changes.
Training on augumented user 22903 9/50 current_auc = 0.5686188510491915
User 22903 AUC after training: 0.5678448572411421
User 22903 does not improve AUC. Reverting changes.
Training on augumented user 93321 10/50 current_auc = 0.5686188510491915
User 93321 AUC after training: 0.5680512555899553
User 93321 does not improve AUC. Reverting changes.
Training on augumented user 57509 11/50 current_auc = 0.5686188510491915
User 57509 AUC after training: 0.5668644650842793
User 57509 does not improve AUC. Reverting changes.
Training on augumented user 23607 12/50 current_auc = 0.5686188510491915
User 23607 AUC after training: 0.5683092535259717
User 23607 does not improve AUC. Reverting changes.
Training on augumented user 85438 13/50 current_auc = 0.5686188510491915
User 85438 AUC after training: 0.569797041623667
User 85438 improves AUC. Keeping the model.
Training on augumented user 64356 14/50 current_auc = 0.569797041623667
User 64356 AUC after training: 0.5702270381836946
User 64356 improves AUC. Keeping the model.
Training on augumented user 67831 15/50 current_auc = 0.5702270381836946
User 67831 AUC after training: 0.5702958376332988
User 67831 improves AUC. Keeping the model.
Training on augumented user 70067 16/50 current_auc = 0.5702958376332988
User 70067 AUC after training: 0.569969040247678
User 70067 does not improve AUC. Reverting changes.
Training on augumented user 120217 17/50 current_auc = 0.5702958376332988
User 120217 AUC after training: 0.5704162366701067
User 120217 improves AUC. Keeping the model.
Training on augumented user 131434 18/50 current_auc = 0.5704162366701067
User 131434 AUC after training: 0.5702614379084968
User 131434 does not improve AUC. Reverting changes.
Training on augumented user 79003 19/50 current_auc = 0.5704162366701067
User 79003 AUC after training: 0.5706742346061231
User 79003 improves AUC. Keeping the model.
Training on augumented user 116658 20/50 current_auc = 0.5706742346061231
User 116658 AUC after training: 0.5705710354317165
User 116658 does not improve AUC. Reverting changes.
Training on augumented user 115839 21/50 current_auc = 0.5706742346061231
User 115839 AUC after training: 0.5708376332989337
User 115839 improves AUC. Keeping the model.
Training on augumented user 85421 22/50 current_auc = 0.5708376332989337
User 85421 AUC after training: 0.5706828345373237
User 85421 does not improve AUC. Reverting changes.
Training on augumented user 24563 23/50 current_auc = 0.5708376332989337
User 24563 AUC after training: 0.5702098383212933
User 24563 does not improve AUC. Reverting changes.
Training on augumented user 67 24/50 current_auc = 0.5708376332989337
User 67 AUC after training: 0.5705538355693155
User 67 does not improve AUC. Reverting changes.
Training on augumented user 77451 25/50 current_auc = 0.5708376332989337
User 77451 AUC after training: 0.5705538355693154
User 77451 does not improve AUC. Reverting changes.
Training on augumented user 35411 26/50 current_auc = 0.5708376332989337
User 35411 AUC after training: 0.5708548331613347
User 35411 improves AUC. Keeping the model.
Training on augumented user 52983 27/50 current_auc = 0.5708548331613347
User 52983 AUC after training: 0.5699088407292742
User 52983 does not improve AUC. Reverting changes.
Training on augumented user 124965 28/50 current_auc = 0.5708548331613347
User 124965 AUC after training: 0.5708978328173374
User 124965 improves AUC. Keeping the model.
Training on augumented user 117443 29/50 current_auc = 0.5708978328173374
User 117443 AUC after training: 0.5713106295149638
User 117443 improves AUC. Keeping the model.
Training on augumented user 94993 30/50 current_auc = 0.5713106295149638
User 94993 AUC after training: 0.570983832129343
User 94993 does not improve AUC. Reverting changes.
Training on augumented user 39126 31/50 current_auc = 0.5713106295149638
User 39126 AUC after training: 0.5711214310285517
User 39126 does not improve AUC. Reverting changes.
Training on augumented user 66270 32/50 current_auc = 0.5713106295149638
User 66270 AUC after training: 0.5709322325421397
User 66270 does not improve AUC. Reverting changes.
Training on augumented user 8972 33/50 current_auc = 0.5713106295149638
User 8972 AUC after training: 0.5713966288269694
User 8972 improves AUC. Keeping the model.
Training on augumented user 137487 34/50 current_auc = 0.5713966288269694
User 137487 AUC after training: 0.5713966288269694
User 137487 does not improve AUC. Reverting changes.
Training on augumented user 37729 35/50 current_auc = 0.5713966288269694
User 37729 AUC after training: 0.5713278293773649
User 37729 does not improve AUC. Reverting changes.
Training on augumented user 1880 36/50 current_auc = 0.5713966288269694
User 1880 AUC after training: 0.5713278293773649
User 1880 does not improve AUC. Reverting changes.
Training on augumented user 28040 37/50 current_auc = 0.5713966288269694
User 28040 AUC after training: 0.5715686274509804
User 28040 improves AUC. Keeping the model.
Training on augumented user 74985 38/50 current_auc = 0.5715686274509804
User 74985 AUC after training: 0.5716546267629858
User 74985 improves AUC. Keeping the model.
Training on augumented user 136216 39/50 current_auc = 0.5716546267629858
User 136216 AUC after training: 0.5713794289645683
User 136216 does not improve AUC. Reverting changes.
Training on augumented user 56524 40/50 current_auc = 0.5716546267629858
User 56524 AUC after training: 0.5718266253869969
User 56524 improves AUC. Keeping the model.
Training on augumented user 55167 41/50 current_auc = 0.5718266253869969
User 55167 AUC after training: 0.5721190230478156
User 55167 improves AUC. Keeping the model.
Training on augumented user 2887 42/50 current_auc = 0.5721190230478156
User 2887 AUC after training: 0.5717492260061919
User 2887 does not improve AUC. Reverting changes.
Training on augumented user 44314 43/50 current_auc = 0.5721190230478156
User 44314 AUC after training: 0.5721362229102167
User 44314 improves AUC. Keeping the model.
Training on augumented user 136482 44/50 current_auc = 0.5721362229102167
User 136482 AUC after training: 0.5722050223598211
User 136482 improves AUC. Keeping the model.
Training on augumented user 90267 45/50 current_auc = 0.5722050223598211
User 90267 AUC after training: 0.5722738218094254
User 90267 improves AUC. Keeping the model.
Training on augumented user 4299 46/50 current_auc = 0.5722738218094254
User 4299 AUC after training: 0.5722222222222222
User 4299 does not improve AUC. Reverting changes.
Training on augumented user 67684 47/50 current_auc = 0.5722738218094254
User 67684 AUC after training: 0.5719126246990024
User 67684 does not improve AUC. Reverting changes.
Training on augumented user 22779 48/50 current_auc = 0.5722738218094254
User 22779 AUC after training: 0.5723426212590299
User 22779 improves AUC. Keeping the model.
Training on augumented user 61363 49/50 current_auc = 0.5723426212590299
User 61363 AUC after training: 0.5725146198830409
User 61363 improves AUC. Keeping the model.
[2024-12-02 19:20:59.538458] start test user 46569 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:00.087215] start test user 46569 187/568 recall augumented users by random, augumented_users = [57987, 4251, 45686, 86342, 84464, 61178, 129338, 25476, 48638, 126304, 17911, 28565, 112393, 25414, 65736, 78608, 19222, 113305, 6633, 24039, 13622, 128672, 117912, 137404, 61947, 106543, 109835, 7691, 56846, 133695, 134190, 27392, 63324, 105940, 36881, 2483, 72092, 107505, 121735, 77035, 95801, 130868, 50955, 37042, 70023, 56198, 129613, 81578, 86721, 64814]
[2024-12-02 19:21:00.104048] user = 46569 Cloud 187/568
[2024-12-02 19:21:00.132886] user = 46569 Local 187/568
[2024-12-02 19:21:00.191678] user = 46569 Local+ 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:04.261135] user = 46569 MPDA- 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6100840336134454
Training on augumented user 57987 0/50 current_auc = 0.6100840336134454
User 57987 AUC after training: 0.6105423987776929
User 57987 improves AUC. Keeping the model.
Training on augumented user 4251 1/50 current_auc = 0.6105423987776929
User 4251 AUC after training: 0.6099312452253629
User 4251 does not improve AUC. Reverting changes.
Training on augumented user 45686 2/50 current_auc = 0.6105423987776929
User 45686 AUC after training: 0.6102368220015278
User 45686 does not improve AUC. Reverting changes.
Training on augumented user 86342 3/50 current_auc = 0.6105423987776929
User 86342 AUC after training: 0.6103896103896104
User 86342 does not improve AUC. Reverting changes.
Training on augumented user 84464 4/50 current_auc = 0.6105423987776929
User 84464 AUC after training: 0.610236822001528
User 84464 does not improve AUC. Reverting changes.
Training on augumented user 61178 5/50 current_auc = 0.6105423987776929
User 61178 AUC after training: 0.6103896103896104
User 61178 does not improve AUC. Reverting changes.
Training on augumented user 129338 6/50 current_auc = 0.6105423987776929
User 129338 AUC after training: 0.6099312452253628
User 129338 does not improve AUC. Reverting changes.
Training on augumented user 25476 7/50 current_auc = 0.6105423987776929
User 25476 AUC after training: 0.6099312452253629
User 25476 does not improve AUC. Reverting changes.
Training on augumented user 48638 8/50 current_auc = 0.6105423987776929
User 48638 AUC after training: 0.6084033613445379
User 48638 does not improve AUC. Reverting changes.
Training on augumented user 126304 9/50 current_auc = 0.6105423987776929
User 126304 AUC after training: 0.6105423987776928
User 126304 does not improve AUC. Reverting changes.
Training on augumented user 17911 10/50 current_auc = 0.6105423987776929
User 17911 AUC after training: 0.6105423987776929
User 17911 does not improve AUC. Reverting changes.
Training on augumented user 28565 11/50 current_auc = 0.6105423987776929
User 28565 AUC after training: 0.6097784568372804
User 28565 does not improve AUC. Reverting changes.
Training on augumented user 112393 12/50 current_auc = 0.6105423987776929
User 112393 AUC after training: 0.610236822001528
User 112393 does not improve AUC. Reverting changes.
Training on augumented user 25414 13/50 current_auc = 0.6105423987776929
User 25414 AUC after training: 0.6100076394194041
User 25414 does not improve AUC. Reverting changes.
Training on augumented user 65736 14/50 current_auc = 0.6105423987776929
User 65736 AUC after training: 0.6100840336134454
User 65736 does not improve AUC. Reverting changes.
Training on augumented user 78608 15/50 current_auc = 0.6105423987776929
User 78608 AUC after training: 0.6094728800611153
User 78608 does not improve AUC. Reverting changes.
Training on augumented user 19222 16/50 current_auc = 0.6105423987776929
User 19222 AUC after training: 0.6099312452253629
User 19222 does not improve AUC. Reverting changes.
Training on augumented user 113305 17/50 current_auc = 0.6105423987776929
User 113305 AUC after training: 0.6102368220015278
User 113305 does not improve AUC. Reverting changes.
Training on augumented user 6633 18/50 current_auc = 0.6105423987776929
User 6633 AUC after training: 0.610236822001528
User 6633 does not improve AUC. Reverting changes.
Training on augumented user 24039 19/50 current_auc = 0.6105423987776929
User 24039 AUC after training: 0.6093200916730328
User 24039 does not improve AUC. Reverting changes.
Training on augumented user 13622 20/50 current_auc = 0.6105423987776929
User 13622 AUC after training: 0.6106951871657754
User 13622 improves AUC. Keeping the model.
Training on augumented user 128672 21/50 current_auc = 0.6106951871657754
User 128672 AUC after training: 0.6108479755538578
User 128672 improves AUC. Keeping the model.
Training on augumented user 117912 22/50 current_auc = 0.6108479755538578
User 117912 AUC after training: 0.6106187929717342
User 117912 does not improve AUC. Reverting changes.
Training on augumented user 137404 23/50 current_auc = 0.6108479755538578
User 137404 AUC after training: 0.6111535523300229
User 137404 improves AUC. Keeping the model.
Training on augumented user 61947 24/50 current_auc = 0.6111535523300229
User 61947 AUC after training: 0.6100076394194041
User 61947 does not improve AUC. Reverting changes.
Training on augumented user 106543 25/50 current_auc = 0.6111535523300229
User 106543 AUC after training: 0.6102368220015278
User 106543 does not improve AUC. Reverting changes.
Training on augumented user 109835 26/50 current_auc = 0.6111535523300229
User 109835 AUC after training: 0.611153552330023
User 109835 improves AUC. Keeping the model.
Training on augumented user 7691 27/50 current_auc = 0.611153552330023
User 7691 AUC after training: 0.6097784568372804
User 7691 does not improve AUC. Reverting changes.
Training on augumented user 56846 28/50 current_auc = 0.611153552330023
User 56846 AUC after training: 0.6110007639419405
User 56846 does not improve AUC. Reverting changes.
Training on augumented user 133695 29/50 current_auc = 0.611153552330023
User 133695 AUC after training: 0.6091673032849503
User 133695 does not improve AUC. Reverting changes.
Training on augumented user 134190 30/50 current_auc = 0.611153552330023
User 134190 AUC after training: 0.611153552330023
User 134190 does not improve AUC. Reverting changes.
Training on augumented user 27392 31/50 current_auc = 0.611153552330023
User 27392 AUC after training: 0.6110007639419405
User 27392 does not improve AUC. Reverting changes.
Training on augumented user 63324 32/50 current_auc = 0.611153552330023
User 63324 AUC after training: 0.6110007639419405
User 63324 does not improve AUC. Reverting changes.
Training on augumented user 105940 33/50 current_auc = 0.611153552330023
User 105940 AUC after training: 0.6100076394194041
User 105940 does not improve AUC. Reverting changes.
Training on augumented user 36881 34/50 current_auc = 0.611153552330023
User 36881 AUC after training: 0.6103896103896104
User 36881 does not improve AUC. Reverting changes.
Training on augumented user 2483 35/50 current_auc = 0.611153552330023
User 2483 AUC after training: 0.608785332314744
User 2483 does not improve AUC. Reverting changes.
Training on augumented user 72092 36/50 current_auc = 0.611153552330023
User 72092 AUC after training: 0.6110007639419404
User 72092 does not improve AUC. Reverting changes.
Training on augumented user 107505 37/50 current_auc = 0.611153552330023
User 107505 AUC after training: 0.611153552330023
User 107505 does not improve AUC. Reverting changes.
Training on augumented user 121735 38/50 current_auc = 0.611153552330023
User 121735 AUC after training: 0.6105423987776929
User 121735 does not improve AUC. Reverting changes.
Training on augumented user 77035 39/50 current_auc = 0.611153552330023
User 77035 AUC after training: 0.6103896103896104
User 77035 does not improve AUC. Reverting changes.
Training on augumented user 95801 40/50 current_auc = 0.611153552330023
User 95801 AUC after training: 0.6096256684491979
User 95801 does not improve AUC. Reverting changes.
Training on augumented user 130868 41/50 current_auc = 0.611153552330023
User 130868 AUC after training: 0.6103896103896105
User 130868 does not improve AUC. Reverting changes.
Training on augumented user 50955 42/50 current_auc = 0.611153552330023
User 50955 AUC after training: 0.6106951871657753
User 50955 does not improve AUC. Reverting changes.
Training on augumented user 37042 43/50 current_auc = 0.611153552330023
User 37042 AUC after training: 0.6085561497326203
User 37042 does not improve AUC. Reverting changes.
Training on augumented user 70023 44/50 current_auc = 0.611153552330023
User 70023 AUC after training: 0.6113063407181054
User 70023 improves AUC. Keeping the model.
Training on augumented user 56198 45/50 current_auc = 0.6113063407181054
User 56198 AUC after training: 0.610847975553858
User 56198 does not improve AUC. Reverting changes.
Training on augumented user 129613 46/50 current_auc = 0.6113063407181054
User 129613 AUC after training: 0.611153552330023
User 129613 does not improve AUC. Reverting changes.
Training on augumented user 81578 47/50 current_auc = 0.6113063407181054
User 81578 AUC after training: 0.6106951871657754
User 81578 does not improve AUC. Reverting changes.
Training on augumented user 86721 48/50 current_auc = 0.6113063407181054
User 86721 AUC after training: 0.6106951871657754
User 86721 does not improve AUC. Reverting changes.
Training on augumented user 64814 49/50 current_auc = 0.6113063407181054
User 64814 AUC after training: 0.6105423987776929
User 64814 does not improve AUC. Reverting changes.
[2024-12-02 19:21:33.140755] start test user 46577 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:33.797862] start test user 46577 188/568 recall augumented users by random, augumented_users = [114305, 92600, 84760, 725, 68227, 42396, 116105, 21400, 124615, 50269, 59464, 54649, 121712, 108792, 1261, 46346, 100191, 55354, 133921, 70410, 120489, 84135, 13643, 72931, 108311, 29160, 74950, 44499, 40375, 88858, 104334, 4341, 32187, 51858, 105, 14328, 49402, 128874, 55438, 51099, 66744, 9132, 122615, 138192, 17725, 52073, 83230, 70258, 73742, 28490]
[2024-12-02 19:21:33.813088] user = 46577 Cloud 188/568
[2024-12-02 19:21:33.830128] user = 46577 Local 188/568
[2024-12-02 19:21:33.920317] user = 46577 Local+ 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:36.400141] user = 46577 MPDA- 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5144036697247707
Training on augumented user 114305 0/50 current_auc = 0.5144036697247707
User 114305 AUC after training: 0.5160550458715596
User 114305 improves AUC. Keeping the model.
Training on augumented user 92600 1/50 current_auc = 0.5160550458715596
User 92600 AUC after training: 0.516605504587156
User 92600 improves AUC. Keeping the model.
Training on augumented user 84760 2/50 current_auc = 0.516605504587156
User 84760 AUC after training: 0.5156880733944954
User 84760 does not improve AUC. Reverting changes.
Training on augumented user 725 3/50 current_auc = 0.516605504587156
User 725 AUC after training: 0.5144036697247707
User 725 does not improve AUC. Reverting changes.
Training on augumented user 68227 4/50 current_auc = 0.516605504587156
User 68227 AUC after training: 0.5158715596330274
User 68227 does not improve AUC. Reverting changes.
Training on augumented user 42396 5/50 current_auc = 0.516605504587156
User 42396 AUC after training: 0.5149541284403669
User 42396 does not improve AUC. Reverting changes.
Training on augumented user 116105 6/50 current_auc = 0.516605504587156
User 116105 AUC after training: 0.5173394495412844
User 116105 improves AUC. Keeping the model.
Training on augumented user 21400 7/50 current_auc = 0.5173394495412844
User 21400 AUC after training: 0.5164220183486239
User 21400 does not improve AUC. Reverting changes.
Training on augumented user 124615 8/50 current_auc = 0.5173394495412844
User 124615 AUC after training: 0.5151376146788991
User 124615 does not improve AUC. Reverting changes.
Training on augumented user 50269 9/50 current_auc = 0.5173394495412844
User 50269 AUC after training: 0.5171559633027524
User 50269 does not improve AUC. Reverting changes.
Training on augumented user 59464 10/50 current_auc = 0.5173394495412844
User 59464 AUC after training: 0.5164220183486239
User 59464 does not improve AUC. Reverting changes.
Training on augumented user 54649 11/50 current_auc = 0.5173394495412844
User 54649 AUC after training: 0.5155045871559634
User 54649 does not improve AUC. Reverting changes.
Training on augumented user 121712 12/50 current_auc = 0.5173394495412844
User 121712 AUC after training: 0.5153211009174312
User 121712 does not improve AUC. Reverting changes.
Training on augumented user 108792 13/50 current_auc = 0.5173394495412844
User 108792 AUC after training: 0.5162385321100917
User 108792 does not improve AUC. Reverting changes.
Training on augumented user 1261 14/50 current_auc = 0.5173394495412844
User 1261 AUC after training: 0.5151376146788991
User 1261 does not improve AUC. Reverting changes.
Training on augumented user 46346 15/50 current_auc = 0.5173394495412844
User 46346 AUC after training: 0.5125688073394497
User 46346 does not improve AUC. Reverting changes.
Training on augumented user 100191 16/50 current_auc = 0.5173394495412844
User 100191 AUC after training: 0.5160550458715597
User 100191 does not improve AUC. Reverting changes.
Training on augumented user 55354 17/50 current_auc = 0.5173394495412844
User 55354 AUC after training: 0.516605504587156
User 55354 does not improve AUC. Reverting changes.
Training on augumented user 133921 18/50 current_auc = 0.5173394495412844
User 133921 AUC after training: 0.5153211009174312
User 133921 does not improve AUC. Reverting changes.
Training on augumented user 70410 19/50 current_auc = 0.5173394495412844
User 70410 AUC after training: 0.5153211009174312
User 70410 does not improve AUC. Reverting changes.
Training on augumented user 120489 20/50 current_auc = 0.5173394495412844
User 120489 AUC after training: 0.5167889908256881
User 120489 does not improve AUC. Reverting changes.
Training on augumented user 84135 21/50 current_auc = 0.5173394495412844
User 84135 AUC after training: 0.5175229357798166
User 84135 improves AUC. Keeping the model.
Training on augumented user 13643 22/50 current_auc = 0.5175229357798166
User 13643 AUC after training: 0.5153211009174312
User 13643 does not improve AUC. Reverting changes.
Training on augumented user 72931 23/50 current_auc = 0.5175229357798166
User 72931 AUC after training: 0.5156880733944954
User 72931 does not improve AUC. Reverting changes.
Training on augumented user 108311 24/50 current_auc = 0.5175229357798166
User 108311 AUC after training: 0.5155045871559634
User 108311 does not improve AUC. Reverting changes.
Training on augumented user 29160 25/50 current_auc = 0.5175229357798166
User 29160 AUC after training: 0.5155045871559634
User 29160 does not improve AUC. Reverting changes.
Training on augumented user 74950 26/50 current_auc = 0.5175229357798166
User 74950 AUC after training: 0.5182568807339449
User 74950 improves AUC. Keeping the model.
Training on augumented user 44499 27/50 current_auc = 0.5182568807339449
User 44499 AUC after training: 0.5173394495412844
User 44499 does not improve AUC. Reverting changes.
Training on augumented user 40375 28/50 current_auc = 0.5182568807339449
User 40375 AUC after training: 0.5153211009174312
User 40375 does not improve AUC. Reverting changes.
Training on augumented user 88858 29/50 current_auc = 0.5182568807339449
User 88858 AUC after training: 0.5160550458715596
User 88858 does not improve AUC. Reverting changes.
Training on augumented user 104334 30/50 current_auc = 0.5182568807339449
User 104334 AUC after training: 0.5166055045871559
User 104334 does not improve AUC. Reverting changes.
Training on augumented user 4341 31/50 current_auc = 0.5182568807339449
User 4341 AUC after training: 0.5177064220183487
User 4341 does not improve AUC. Reverting changes.
Training on augumented user 32187 32/50 current_auc = 0.5182568807339449
User 32187 AUC after training: 0.5175229357798166
User 32187 does not improve AUC. Reverting changes.
Training on augumented user 51858 33/50 current_auc = 0.5182568807339449
User 51858 AUC after training: 0.5171559633027523
User 51858 does not improve AUC. Reverting changes.
Training on augumented user 105 34/50 current_auc = 0.5182568807339449
User 105 AUC after training: 0.5177064220183486
User 105 does not improve AUC. Reverting changes.
Training on augumented user 14328 35/50 current_auc = 0.5182568807339449
User 14328 AUC after training: 0.5153211009174312
User 14328 does not improve AUC. Reverting changes.
Training on augumented user 49402 36/50 current_auc = 0.5182568807339449
User 49402 AUC after training: 0.5173394495412844
User 49402 does not improve AUC. Reverting changes.
Training on augumented user 128874 37/50 current_auc = 0.5182568807339449
User 128874 AUC after training: 0.5151376146788991
User 128874 does not improve AUC. Reverting changes.
Training on augumented user 55438 38/50 current_auc = 0.5182568807339449
User 55438 AUC after training: 0.5178899082568807
User 55438 does not improve AUC. Reverting changes.
Training on augumented user 51099 39/50 current_auc = 0.5182568807339449
User 51099 AUC after training: 0.5156880733944955
User 51099 does not improve AUC. Reverting changes.
Training on augumented user 66744 40/50 current_auc = 0.5182568807339449
User 66744 AUC after training: 0.5167889908256881
User 66744 does not improve AUC. Reverting changes.
Training on augumented user 9132 41/50 current_auc = 0.5182568807339449
User 9132 AUC after training: 0.5173394495412844
User 9132 does not improve AUC. Reverting changes.
Training on augumented user 122615 42/50 current_auc = 0.5182568807339449
User 122615 AUC after training: 0.5169724770642202
User 122615 does not improve AUC. Reverting changes.
Training on augumented user 138192 43/50 current_auc = 0.5182568807339449
User 138192 AUC after training: 0.5167889908256881
User 138192 does not improve AUC. Reverting changes.
Training on augumented user 17725 44/50 current_auc = 0.5182568807339449
User 17725 AUC after training: 0.514770642201835
User 17725 does not improve AUC. Reverting changes.
Training on augumented user 52073 45/50 current_auc = 0.5182568807339449
User 52073 AUC after training: 0.5169724770642202
User 52073 does not improve AUC. Reverting changes.
Training on augumented user 83230 46/50 current_auc = 0.5182568807339449
User 83230 AUC after training: 0.5177064220183486
User 83230 does not improve AUC. Reverting changes.
Training on augumented user 70258 47/50 current_auc = 0.5182568807339449
User 70258 AUC after training: 0.5169724770642202
User 70258 does not improve AUC. Reverting changes.
Training on augumented user 73742 48/50 current_auc = 0.5182568807339449
User 73742 AUC after training: 0.5175229357798166
User 73742 does not improve AUC. Reverting changes.
Training on augumented user 28490 49/50 current_auc = 0.5182568807339449
User 28490 AUC after training: 0.5145871559633027
User 28490 does not improve AUC. Reverting changes.
[2024-12-02 19:22:07.463835] start test user 46628 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:08.097869] start test user 46628 189/568 recall augumented users by random, augumented_users = [27392, 69501, 90961, 119858, 98899, 39524, 42643, 107047, 81842, 2692, 37668, 29714, 102518, 26730, 58354, 10401, 5431, 70212, 59835, 115248, 84352, 113460, 85208, 138240, 6069, 9939, 35242, 113212, 114046, 80647, 52171, 19597, 79191, 125735, 107343, 9366, 38139, 125368, 55286, 107335, 104631, 32451, 63920, 106054, 136598, 78454, 3091, 59302, 111599, 96883]
[2024-12-02 19:22:08.113404] user = 46628 Cloud 189/568
[2024-12-02 19:22:08.175755] user = 46628 Local 189/568
[2024-12-02 19:22:08.390042] user = 46628 Local+ 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:10.876939] user = 46628 MPDA- 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7857660174335894
Training on augumented user 27392 0/50 current_auc = 0.7857660174335894
User 27392 AUC after training: 0.7856366881353302
User 27392 does not improve AUC. Reverting changes.
Training on augumented user 69501 1/50 current_auc = 0.7857660174335894
User 69501 AUC after training: 0.7855914228809395
User 69501 does not improve AUC. Reverting changes.
Training on augumented user 90961 2/50 current_auc = 0.7857660174335894
User 90961 AUC after training: 0.7856108222756784
User 90961 does not improve AUC. Reverting changes.
Training on augumented user 119858 3/50 current_auc = 0.7857660174335894
User 119858 AUC after training: 0.785662553994982
User 119858 does not improve AUC. Reverting changes.
Training on augumented user 98899 4/50 current_auc = 0.7857660174335894
User 98899 AUC after training: 0.7855720234862006
User 98899 does not improve AUC. Reverting changes.
Training on augumented user 39524 5/50 current_auc = 0.7857660174335894
User 39524 AUC after training: 0.7855720234862006
User 39524 does not improve AUC. Reverting changes.
Training on augumented user 42643 6/50 current_auc = 0.7857660174335894
User 42643 AUC after training: 0.785998810170456
User 42643 improves AUC. Keeping the model.
Training on augumented user 107047 7/50 current_auc = 0.785998810170456
User 107047 AUC after training: 0.7858953467318487
User 107047 does not improve AUC. Reverting changes.
Training on augumented user 81842 8/50 current_auc = 0.785998810170456
User 81842 AUC after training: 0.7857078192493727
User 81842 does not improve AUC. Reverting changes.
Training on augumented user 2692 9/50 current_auc = 0.785998810170456
User 2692 AUC after training: 0.785837148547632
User 2692 does not improve AUC. Reverting changes.
Training on augumented user 37668 10/50 current_auc = 0.785998810170456
User 37668 AUC after training: 0.7859470784511523
User 37668 does not improve AUC. Reverting changes.
Training on augumented user 29714 11/50 current_auc = 0.785998810170456
User 29714 AUC after training: 0.7859341455213263
User 29714 does not improve AUC. Reverting changes.
Training on augumented user 102518 12/50 current_auc = 0.785998810170456
User 102518 AUC after training: 0.7856108222756784
User 102518 does not improve AUC. Reverting changes.
Training on augumented user 26730 13/50 current_auc = 0.785998810170456
User 26730 AUC after training: 0.7859858772406301
User 26730 does not improve AUC. Reverting changes.
Training on augumented user 58354 14/50 current_auc = 0.785998810170456
User 58354 AUC after training: 0.7857078192493727
User 58354 does not improve AUC. Reverting changes.
Training on augumented user 10401 15/50 current_auc = 0.785998810170456
User 10401 AUC after training: 0.7855849564160264
User 10401 does not improve AUC. Reverting changes.
Training on augumented user 5431 16/50 current_auc = 0.785998810170456
User 5431 AUC after training: 0.7856496210651561
User 5431 does not improve AUC. Reverting changes.
Training on augumented user 70212 17/50 current_auc = 0.785998810170456
User 70212 AUC after training: 0.7860505418897598
User 70212 improves AUC. Keeping the model.
Training on augumented user 59835 18/50 current_auc = 0.7860505418897598
User 59835 AUC after training: 0.7857983497581542
User 59835 does not improve AUC. Reverting changes.
Training on augumented user 115248 19/50 current_auc = 0.7860505418897598
User 115248 AUC after training: 0.7859600113809783
User 115248 does not improve AUC. Reverting changes.
Training on augumented user 84352 20/50 current_auc = 0.7860505418897598
User 84352 AUC after training: 0.7858630144072839
User 84352 does not improve AUC. Reverting changes.
Training on augumented user 113460 21/50 current_auc = 0.7860505418897598
User 113460 AUC after training: 0.786024676030108
User 113460 does not improve AUC. Reverting changes.
Training on augumented user 85208 22/50 current_auc = 0.7860505418897598
User 85208 AUC after training: 0.785998810170456
User 85208 does not improve AUC. Reverting changes.
Training on augumented user 138240 23/50 current_auc = 0.7860505418897598
User 138240 AUC after training: 0.7858694808721968
User 138240 does not improve AUC. Reverting changes.
Training on augumented user 6069 24/50 current_auc = 0.7860505418897598
User 6069 AUC after training: 0.7860505418897598
User 6069 does not improve AUC. Reverting changes.
Training on augumented user 9939 25/50 current_auc = 0.7860505418897598
User 9939 AUC after training: 0.7860634748195856
User 9939 improves AUC. Keeping the model.
Training on augumented user 35242 26/50 current_auc = 0.7860634748195856
User 35242 AUC after training: 0.7859341455213265
User 35242 does not improve AUC. Reverting changes.
Training on augumented user 113212 27/50 current_auc = 0.7860634748195856
User 113212 AUC after training: 0.7857207521791987
User 113212 does not improve AUC. Reverting changes.
Training on augumented user 114046 28/50 current_auc = 0.7860634748195856
User 114046 AUC after training: 0.7861540053283672
User 114046 improves AUC. Keeping the model.
Training on augumented user 80647 29/50 current_auc = 0.7861540053283672
User 80647 AUC after training: 0.7861281394687152
User 80647 does not improve AUC. Reverting changes.
Training on augumented user 52171 30/50 current_auc = 0.7861540053283672
User 52171 AUC after training: 0.7859018131967616
User 52171 does not improve AUC. Reverting changes.
Training on augumented user 19597 31/50 current_auc = 0.7861540053283672
User 19597 AUC after training: 0.7860117431002819
User 19597 does not improve AUC. Reverting changes.
Training on augumented user 79191 32/50 current_auc = 0.7861540053283672
User 79191 AUC after training: 0.7864061974599725
User 79191 improves AUC. Keeping the model.
Training on augumented user 125735 33/50 current_auc = 0.7864061974599725
User 125735 AUC after training: 0.7859341455213265
User 125735 does not improve AUC. Reverting changes.
Training on augumented user 107343 34/50 current_auc = 0.7864061974599725
User 107343 AUC after training: 0.7864255968547115
User 107343 improves AUC. Keeping the model.
Training on augumented user 9366 35/50 current_auc = 0.7864255968547115
User 9366 AUC after training: 0.7862962675564523
User 9366 does not improve AUC. Reverting changes.
Training on augumented user 38139 36/50 current_auc = 0.7864255968547115
User 38139 AUC after training: 0.785998810170456
User 38139 does not improve AUC. Reverting changes.
Training on augumented user 125368 37/50 current_auc = 0.7864255968547115
User 125368 AUC after training: 0.78633506634593
User 125368 does not improve AUC. Reverting changes.
Training on augumented user 55286 38/50 current_auc = 0.7864255968547115
User 55286 AUC after training: 0.7858048162230672
User 55286 does not improve AUC. Reverting changes.
Training on augumented user 107335 39/50 current_auc = 0.7864255968547115
User 107335 AUC after training: 0.7863932645301466
User 107335 does not improve AUC. Reverting changes.
Training on augumented user 104631 40/50 current_auc = 0.7864255968547115
User 104631 AUC after training: 0.7862316029073226
User 104631 does not improve AUC. Reverting changes.
Training on augumented user 32451 41/50 current_auc = 0.7864255968547115
User 32451 AUC after training: 0.7863092004862782
User 32451 does not improve AUC. Reverting changes.
Training on augumented user 63920 42/50 current_auc = 0.7864255968547115
User 63920 AUC after training: 0.7865807920126225
User 63920 improves AUC. Keeping the model.
Training on augumented user 106054 43/50 current_auc = 0.7865807920126225
User 106054 AUC after training: 0.7859729443108042
User 106054 does not improve AUC. Reverting changes.
Training on augumented user 136598 44/50 current_auc = 0.7865807920126225
User 136598 AUC after training: 0.7866131243371873
User 136598 improves AUC. Keeping the model.
Training on augumented user 78454 45/50 current_auc = 0.7866131243371873
User 78454 AUC after training: 0.7863609322055819
User 78454 does not improve AUC. Reverting changes.
Training on augumented user 3091 46/50 current_auc = 0.7866131243371873
User 3091 AUC after training: 0.7865290602933188
User 3091 does not improve AUC. Reverting changes.
Training on augumented user 59302 47/50 current_auc = 0.7866131243371873
User 59302 AUC after training: 0.7863415328108431
User 59302 does not improve AUC. Reverting changes.
Training on augumented user 111599 48/50 current_auc = 0.7866131243371873
User 111599 AUC after training: 0.7864643956441892
User 111599 does not improve AUC. Reverting changes.
Training on augumented user 96883 49/50 current_auc = 0.7866131243371873
User 96883 AUC after training: 0.7864579291792763
User 96883 does not improve AUC. Reverting changes.
[2024-12-02 19:22:39.887129] start test user 46636 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:40.653221] start test user 46636 190/568 recall augumented users by random, augumented_users = [6509, 943, 85618, 117871, 46912, 52850, 60720, 59920, 109585, 85791, 27787, 22281, 95379, 1669, 8981, 27137, 97967, 22112, 99120, 27322, 56350, 19122, 89103, 84562, 112407, 44872, 4771, 18793, 127866, 82271, 60192, 131121, 50124, 96567, 103636, 115627, 83197, 94208, 136780, 40142, 430, 7342, 130782, 120828, 118485, 64195, 65828, 38296, 2129, 7829]
[2024-12-02 19:22:40.669587] user = 46636 Cloud 190/568
[2024-12-02 19:22:40.691713] user = 46636 Local 190/568
[2024-12-02 19:22:40.862022] user = 46636 Local+ 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:43.299172] user = 46636 MPDA- 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4671616503886785
Training on augumented user 6509 0/50 current_auc = 0.4671616503886785
User 6509 AUC after training: 0.46835758421367346
User 6509 improves AUC. Keeping the model.
Training on augumented user 943 1/50 current_auc = 0.46835758421367346
User 943 AUC after training: 0.4680586007574248
User 943 does not improve AUC. Reverting changes.
Training on augumented user 85618 2/50 current_auc = 0.46835758421367346
User 85618 AUC after training: 0.4685569065178393
User 85618 improves AUC. Keeping the model.
Training on augumented user 117871 3/50 current_auc = 0.4685569065178393
User 117871 AUC after training: 0.46795893960534185
User 117871 does not improve AUC. Reverting changes.
Training on augumented user 46912 4/50 current_auc = 0.4685569065178393
User 46912 AUC after training: 0.4688558899740881
User 46912 improves AUC. Keeping the model.
Training on augumented user 52850 5/50 current_auc = 0.4688558899740881
User 52850 AUC after training: 0.4692545345824197
User 52850 improves AUC. Keeping the model.
Training on augumented user 60720 6/50 current_auc = 0.4692545345824197
User 60720 AUC after training: 0.46965317919075145
User 60720 improves AUC. Keeping the model.
Training on augumented user 59920 7/50 current_auc = 0.46965317919075145
User 59920 AUC after training: 0.47184572453657564
User 59920 improves AUC. Keeping the model.
Training on augumented user 109585 8/50 current_auc = 0.47184572453657564
User 109585 AUC after training: 0.47149691050428544
User 109585 does not improve AUC. Reverting changes.
Training on augumented user 85791 9/50 current_auc = 0.47184572453657564
User 85791 AUC after training: 0.47184572453657564
User 85791 does not improve AUC. Reverting changes.
Training on augumented user 27787 10/50 current_auc = 0.47184572453657564
User 27787 AUC after training: 0.4722443691449073
User 27787 improves AUC. Keeping the model.
Training on augumented user 22281 11/50 current_auc = 0.4722443691449073
User 22281 AUC after training: 0.4719952162647
User 22281 does not improve AUC. Reverting changes.
Training on augumented user 95379 12/50 current_auc = 0.4722443691449073
User 95379 AUC after training: 0.47109826589595377
User 95379 does not improve AUC. Reverting changes.
Training on augumented user 1669 13/50 current_auc = 0.4722443691449073
User 1669 AUC after training: 0.4723938608730317
User 1669 improves AUC. Keeping the model.
Training on augumented user 8981 14/50 current_auc = 0.4723938608730317
User 8981 AUC after training: 0.47169623280845124
User 8981 does not improve AUC. Reverting changes.
Training on augumented user 27137 15/50 current_auc = 0.4723938608730317
User 27137 AUC after training: 0.47239386087303165
User 27137 does not improve AUC. Reverting changes.
Training on augumented user 97967 16/50 current_auc = 0.4723938608730317
User 97967 AUC after training: 0.4713972493522025
User 97967 does not improve AUC. Reverting changes.
Training on augumented user 22112 17/50 current_auc = 0.4723938608730317
User 22112 AUC after training: 0.4721945385688659
User 22112 does not improve AUC. Reverting changes.
Training on augumented user 99120 18/50 current_auc = 0.4723938608730317
User 99120 AUC after training: 0.4726928443292805
User 99120 improves AUC. Keeping the model.
Training on augumented user 27322 19/50 current_auc = 0.4726928443292805
User 27322 AUC after training: 0.4705002989834562
User 27322 does not improve AUC. Reverting changes.
Training on augumented user 56350 20/50 current_auc = 0.4726928443292805
User 56350 AUC after training: 0.47358979469802664
User 56350 improves AUC. Keeping the model.
Training on augumented user 19122 21/50 current_auc = 0.47358979469802664
User 19122 AUC after training: 0.47289216663344624
User 19122 does not improve AUC. Reverting changes.
Training on augumented user 89103 22/50 current_auc = 0.47358979469802664
User 89103 AUC after training: 0.47279250548136337
User 89103 does not improve AUC. Reverting changes.
Training on augumented user 84562 23/50 current_auc = 0.47358979469802664
User 84562 AUC after training: 0.4733904723938609
User 84562 does not improve AUC. Reverting changes.
Training on augumented user 112407 24/50 current_auc = 0.47358979469802664
User 112407 AUC after training: 0.47249352202511463
User 112407 does not improve AUC. Reverting changes.
Training on augumented user 44872 25/50 current_auc = 0.47358979469802664
User 44872 AUC after training: 0.473191150089695
User 44872 does not improve AUC. Reverting changes.
Training on augumented user 4771 26/50 current_auc = 0.47358979469802664
User 4771 AUC after training: 0.47269284432928044
User 4771 does not improve AUC. Reverting changes.
Training on augumented user 18793 27/50 current_auc = 0.47358979469802664
User 18793 AUC after training: 0.47219453856886584
User 18793 does not improve AUC. Reverting changes.
Training on augumented user 127866 28/50 current_auc = 0.47358979469802664
User 127866 AUC after training: 0.4723938608730317
User 127866 does not improve AUC. Reverting changes.
Training on augumented user 82271 29/50 current_auc = 0.47358979469802664
User 82271 AUC after training: 0.4724935220251146
User 82271 does not improve AUC. Reverting changes.
Training on augumented user 60192 30/50 current_auc = 0.47358979469802664
User 60192 AUC after training: 0.47229419972094877
User 60192 does not improve AUC. Reverting changes.
Training on augumented user 131121 31/50 current_auc = 0.47358979469802664
User 131121 AUC after training: 0.47319115008969503
User 131121 does not improve AUC. Reverting changes.
Training on augumented user 50124 32/50 current_auc = 0.47358979469802664
User 50124 AUC after training: 0.47249352202511463
User 50124 does not improve AUC. Reverting changes.
Training on augumented user 96567 33/50 current_auc = 0.47358979469802664
User 96567 AUC after training: 0.47329081124177796
User 96567 does not improve AUC. Reverting changes.
Training on augumented user 103636 34/50 current_auc = 0.47358979469802664
User 103636 AUC after training: 0.473191150089695
User 103636 does not improve AUC. Reverting changes.
Training on augumented user 115627 35/50 current_auc = 0.47358979469802664
User 115627 AUC after training: 0.4725931831771975
User 115627 does not improve AUC. Reverting changes.
Training on augumented user 83197 36/50 current_auc = 0.47358979469802664
User 83197 AUC after training: 0.4740881004584413
User 83197 improves AUC. Keeping the model.
Training on augumented user 94208 37/50 current_auc = 0.4740881004584413
User 94208 AUC after training: 0.4738887781542755
User 94208 does not improve AUC. Reverting changes.
Training on augumented user 136780 38/50 current_auc = 0.4740881004584413
User 136780 AUC after training: 0.47294199720948776
User 136780 does not improve AUC. Reverting changes.
Training on augumented user 40142 39/50 current_auc = 0.4740881004584413
User 40142 AUC after training: 0.47304165836157064
User 40142 does not improve AUC. Reverting changes.
Training on augumented user 430 40/50 current_auc = 0.4740881004584413
User 430 AUC after training: 0.47254335260115604
User 430 does not improve AUC. Reverting changes.
Training on augumented user 7342 41/50 current_auc = 0.4740881004584413
User 7342 AUC after training: 0.4726928443292805
User 7342 does not improve AUC. Reverting changes.
Training on augumented user 130782 42/50 current_auc = 0.4740881004584413
User 130782 AUC after training: 0.4735897946980267
User 130782 does not improve AUC. Reverting changes.
Training on augumented user 120828 43/50 current_auc = 0.4740881004584413
User 120828 AUC after training: 0.47289216663344624
User 120828 does not improve AUC. Reverting changes.
Training on augumented user 118485 44/50 current_auc = 0.4740881004584413
User 118485 AUC after training: 0.4701016543751246
User 118485 does not improve AUC. Reverting changes.
Training on augumented user 64195 45/50 current_auc = 0.4740881004584413
User 64195 AUC after training: 0.47349013354594377
User 64195 does not improve AUC. Reverting changes.
Training on augumented user 65828 46/50 current_auc = 0.4740881004584413
User 65828 AUC after training: 0.4741877616105242
User 65828 improves AUC. Keeping the model.
Training on augumented user 38296 47/50 current_auc = 0.4741877616105242
User 38296 AUC after training: 0.47363962527406817
User 38296 does not improve AUC. Reverting changes.
Training on augumented user 2129 48/50 current_auc = 0.4741877616105242
User 2129 AUC after training: 0.4740881004584413
User 2129 does not improve AUC. Reverting changes.
Training on augumented user 7829 49/50 current_auc = 0.4741877616105242
User 7829 AUC after training: 0.4741877616105242
User 7829 does not improve AUC. Reverting changes.
[2024-12-02 19:23:15.421413] start test user 46645 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:15.943742] start test user 46645 191/568 recall augumented users by random, augumented_users = [130030, 127226, 94120, 111837, 53976, 21480, 100703, 18208, 91319, 86164, 72959, 68204, 86295, 97828, 109316, 31971, 24147, 22231, 63662, 83838, 102465, 65655, 60595, 138400, 9558, 112628, 21962, 136254, 127309, 14146, 129000, 81934, 116171, 73036, 73287, 67401, 107165, 35594, 76596, 65757, 133996, 89669, 62350, 135315, 97577, 80988, 135173, 74044, 137348, 124156]
[2024-12-02 19:23:15.962833] user = 46645 Cloud 191/568
[2024-12-02 19:23:16.067668] user = 46645 Local 191/568
[2024-12-02 19:23:16.243550] user = 46645 Local+ 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:18.843652] user = 46645 MPDA- 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8492053239381484
Training on augumented user 130030 0/50 current_auc = 0.8492053239381484
User 130030 AUC after training: 0.8499491094147582
User 130030 improves AUC. Keeping the model.
Training on augumented user 127226 1/50 current_auc = 0.8499491094147582
User 127226 AUC after training: 0.849722059111372
User 127226 does not improve AUC. Reverting changes.
Training on augumented user 94120 2/50 current_auc = 0.8499491094147582
User 94120 AUC after training: 0.8496946564885496
User 94120 does not improve AUC. Reverting changes.
Training on augumented user 111837 3/50 current_auc = 0.8499491094147582
User 111837 AUC after training: 0.8498747308670972
User 111837 does not improve AUC. Reverting changes.
Training on augumented user 53976 4/50 current_auc = 0.8499491094147582
User 53976 AUC after training: 0.8498042669798395
User 53976 does not improve AUC. Reverting changes.
Training on augumented user 21480 5/50 current_auc = 0.8499491094147582
User 21480 AUC after training: 0.8496652965355256
User 21480 does not improve AUC. Reverting changes.
Training on augumented user 100703 6/50 current_auc = 0.8499491094147582
User 100703 AUC after training: 0.8499021334899197
User 100703 does not improve AUC. Reverting changes.
Training on augumented user 18208 7/50 current_auc = 0.8499491094147582
User 18208 AUC after training: 0.8499021334899197
User 18208 does not improve AUC. Reverting changes.
Training on augumented user 91319 8/50 current_auc = 0.8499491094147582
User 91319 AUC after training: 0.8498923468389117
User 91319 does not improve AUC. Reverting changes.
Training on augumented user 86164 9/50 current_auc = 0.8499491094147582
User 86164 AUC after training: 0.8495850459972597
User 86164 does not improve AUC. Reverting changes.
Training on augumented user 72959 10/50 current_auc = 0.8499491094147582
User 72959 AUC after training: 0.849964768056371
User 72959 improves AUC. Keeping the model.
Training on augumented user 68204 11/50 current_auc = 0.849964768056371
User 68204 AUC after training: 0.8494382462321393
User 68204 does not improve AUC. Reverting changes.
Training on augumented user 86295 12/50 current_auc = 0.849964768056371
User 86295 AUC after training: 0.8502955568604422
User 86295 improves AUC. Keeping the model.
Training on augumented user 97828 13/50 current_auc = 0.8502955568604422
User 97828 AUC after training: 0.8500508905852417
User 97828 does not improve AUC. Reverting changes.
Training on augumented user 109316 14/50 current_auc = 0.8502955568604422
User 109316 AUC after training: 0.850326874143668
User 109316 improves AUC. Keeping the model.
Training on augumented user 31971 15/50 current_auc = 0.850326874143668
User 31971 AUC after training: 0.8503581914268938
User 31971 improves AUC. Keeping the model.
Training on augumented user 24147 16/50 current_auc = 0.8503581914268938
User 24147 AUC after training: 0.8503973380309258
User 24147 improves AUC. Keeping the model.
Training on augumented user 22231 17/50 current_auc = 0.8503973380309258
User 22231 AUC after training: 0.8508905852417302
User 22231 improves AUC. Keeping the model.
Training on augumented user 63662 18/50 current_auc = 0.8508905852417302
User 63662 AUC after training: 0.850753572127618
User 63662 does not improve AUC. Reverting changes.
Training on augumented user 83838 19/50 current_auc = 0.8508905852417302
User 83838 AUC after training: 0.8508005480524565
User 83838 does not improve AUC. Reverting changes.
Training on augumented user 102465 20/50 current_auc = 0.8508905852417302
User 102465 AUC after training: 0.8508592679585046
User 102465 does not improve AUC. Reverting changes.
Training on augumented user 65655 21/50 current_auc = 0.8508905852417302
User 65655 AUC after training: 0.8505539244470541
User 65655 does not improve AUC. Reverting changes.
Training on augumented user 60595 22/50 current_auc = 0.8508905852417302
User 60595 AUC after training: 0.8507418281464083
User 60595 does not improve AUC. Reverting changes.
Training on augumented user 138400 23/50 current_auc = 0.8508905852417302
User 138400 AUC after training: 0.8508788412605207
User 138400 does not improve AUC. Reverting changes.
Training on augumented user 9558 24/50 current_auc = 0.8508905852417302
User 9558 AUC after training: 0.8506674495987474
User 9558 does not improve AUC. Reverting changes.
Training on augumented user 112628 25/50 current_auc = 0.8508905852417302
User 112628 AUC after training: 0.850381679389313
User 112628 does not improve AUC. Reverting changes.
Training on augumented user 21962 26/50 current_auc = 0.8508905852417302
User 21962 AUC after training: 0.8508201213544724
User 21962 does not improve AUC. Reverting changes.
Training on augumented user 136254 27/50 current_auc = 0.8508905852417302
User 136254 AUC after training: 0.850941475826972
User 136254 improves AUC. Keeping the model.
Training on augumented user 127309 28/50 current_auc = 0.850941475826972
User 127309 AUC after training: 0.8509571344685848
User 127309 improves AUC. Keeping the model.
Training on augumented user 14146 29/50 current_auc = 0.8509571344685848
User 14146 AUC after training: 0.8505069485222156
User 14146 does not improve AUC. Reverting changes.
Training on augumented user 129000 30/50 current_auc = 0.8509571344685848
User 129000 AUC after training: 0.8508827559209238
User 129000 does not improve AUC. Reverting changes.
Training on augumented user 81934 31/50 current_auc = 0.8509571344685848
User 81934 AUC after training: 0.8509179878645529
User 81934 does not improve AUC. Reverting changes.
Training on augumented user 116171 32/50 current_auc = 0.8509571344685848
User 116171 AUC after training: 0.8509493051477783
User 116171 does not improve AUC. Reverting changes.
Training on augumented user 73036 33/50 current_auc = 0.8509571344685848
User 73036 AUC after training: 0.850733998825602
User 73036 does not improve AUC. Reverting changes.
Training on augumented user 73287 34/50 current_auc = 0.8509571344685848
User 73287 AUC after training: 0.8507144255235858
User 73287 does not improve AUC. Reverting changes.
Training on augumented user 67401 35/50 current_auc = 0.8509571344685848
User 67401 AUC after training: 0.850847523977295
User 67401 does not improve AUC. Reverting changes.
Training on augumented user 107165 36/50 current_auc = 0.8509571344685848
User 107165 AUC after training: 0.8507320414954002
User 107165 does not improve AUC. Reverting changes.
Training on augumented user 35594 37/50 current_auc = 0.8509571344685848
User 35594 AUC after training: 0.8508201213544724
User 35594 does not improve AUC. Reverting changes.
Training on augumented user 76596 38/50 current_auc = 0.8509571344685848
User 76596 AUC after training: 0.8510824036014877
User 76596 improves AUC. Keeping the model.
Training on augumented user 65757 39/50 current_auc = 0.8510824036014877
User 65757 AUC after training: 0.8509649637893912
User 65757 does not improve AUC. Reverting changes.
Training on augumented user 133996 40/50 current_auc = 0.8510824036014877
User 133996 AUC after training: 0.8509453904873753
User 133996 does not improve AUC. Reverting changes.
Training on augumented user 89669 41/50 current_auc = 0.8510824036014877
User 89669 AUC after training: 0.8508592679585048
User 89669 does not improve AUC. Reverting changes.
Training on augumented user 62350 42/50 current_auc = 0.8510824036014877
User 62350 AUC after training: 0.8507261695047955
User 62350 does not improve AUC. Reverting changes.
Training on augumented user 135315 43/50 current_auc = 0.8510824036014877
User 135315 AUC after training: 0.8511058915639067
User 135315 improves AUC. Keeping the model.
Training on augumented user 97577 44/50 current_auc = 0.8511058915639067
User 97577 AUC after training: 0.8510001957330201
User 97577 does not improve AUC. Reverting changes.
Training on augumented user 80988 45/50 current_auc = 0.8511058915639067
User 80988 AUC after training: 0.8511411235075358
User 80988 improves AUC. Keeping the model.
Training on augumented user 135173 46/50 current_auc = 0.8511411235075358
User 135173 AUC after training: 0.8511176355451164
User 135173 does not improve AUC. Reverting changes.
Training on augumented user 74044 47/50 current_auc = 0.8511411235075358
User 74044 AUC after training: 0.8511450381679388
User 74044 improves AUC. Keeping the model.
Training on augumented user 137348 48/50 current_auc = 0.8511450381679388
User 137348 AUC after training: 0.8510628302994714
User 137348 does not improve AUC. Reverting changes.
Training on augumented user 124156 49/50 current_auc = 0.8511450381679388
User 124156 AUC after training: 0.8511411235075357
User 124156 does not improve AUC. Reverting changes.
[2024-12-02 19:23:50.292436] start test user 46698 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:50.799535] start test user 46698 192/568 recall augumented users by random, augumented_users = [51439, 37461, 18862, 65689, 37291, 94436, 7895, 67435, 105436, 47521, 89069, 127727, 38498, 10234, 39018, 77134, 132461, 18419, 62494, 70950, 228, 33967, 92208, 73060, 97577, 21683, 97283, 130153, 125903, 93450, 66235, 80498, 40978, 1042, 119377, 107222, 8205, 31146, 111448, 130723, 135954, 90789, 69133, 74935, 72704, 49080, 3161, 63572, 105905, 45792]
[2024-12-02 19:23:50.815294] user = 46698 Cloud 192/568
[2024-12-02 19:23:50.854001] user = 46698 Local 192/568
[2024-12-02 19:23:51.014514] user = 46698 Local+ 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:53.876844] user = 46698 MPDA- 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.580861023206751
Training on augumented user 51439 0/50 current_auc = 0.580861023206751
User 51439 AUC after training: 0.5811577004219409
User 51439 improves AUC. Keeping the model.
Training on augumented user 37461 1/50 current_auc = 0.5811577004219409
User 37461 AUC after training: 0.5809599156118144
User 37461 does not improve AUC. Reverting changes.
Training on augumented user 18862 2/50 current_auc = 0.5811577004219409
User 18862 AUC after training: 0.5814214135021097
User 18862 improves AUC. Keeping the model.
Training on augumented user 65689 3/50 current_auc = 0.5814214135021097
User 65689 AUC after training: 0.581157700421941
User 65689 does not improve AUC. Reverting changes.
Training on augumented user 37291 4/50 current_auc = 0.5814214135021097
User 37291 AUC after training: 0.5814214135021096
User 37291 does not improve AUC. Reverting changes.
Training on augumented user 94436 5/50 current_auc = 0.5814214135021097
User 94436 AUC after training: 0.5807291666666667
User 94436 does not improve AUC. Reverting changes.
Training on augumented user 7895 6/50 current_auc = 0.5814214135021097
User 7895 AUC after training: 0.5812895569620253
User 7895 does not improve AUC. Reverting changes.
Training on augumented user 67435 7/50 current_auc = 0.5814214135021097
User 67435 AUC after training: 0.5813554852320675
User 67435 does not improve AUC. Reverting changes.
Training on augumented user 105436 8/50 current_auc = 0.5814214135021097
User 105436 AUC after training: 0.581487341772152
User 105436 improves AUC. Keeping the model.
Training on augumented user 47521 9/50 current_auc = 0.581487341772152
User 47521 AUC after training: 0.5815532700421941
User 47521 improves AUC. Keeping the model.
Training on augumented user 89069 10/50 current_auc = 0.5815532700421941
User 89069 AUC after training: 0.5807621308016877
User 89069 does not improve AUC. Reverting changes.
Training on augumented user 127727 11/50 current_auc = 0.5815532700421941
User 127727 AUC after training: 0.5811577004219409
User 127727 does not improve AUC. Reverting changes.
Training on augumented user 38498 12/50 current_auc = 0.5815532700421941
User 38498 AUC after training: 0.5806302742616034
User 38498 does not improve AUC. Reverting changes.
Training on augumented user 10234 13/50 current_auc = 0.5815532700421941
User 10234 AUC after training: 0.5813554852320675
User 10234 does not improve AUC. Reverting changes.
Training on augumented user 39018 14/50 current_auc = 0.5815532700421941
User 39018 AUC after training: 0.5814873417721519
User 39018 does not improve AUC. Reverting changes.
Training on augumented user 77134 15/50 current_auc = 0.5815532700421941
User 77134 AUC after training: 0.5815532700421941
User 77134 does not improve AUC. Reverting changes.
Training on augumented user 132461 16/50 current_auc = 0.5815532700421941
User 132461 AUC after training: 0.5814214135021096
User 132461 does not improve AUC. Reverting changes.
Training on augumented user 18419 17/50 current_auc = 0.5815532700421941
User 18419 AUC after training: 0.5814214135021096
User 18419 does not improve AUC. Reverting changes.
Training on augumented user 62494 18/50 current_auc = 0.5815532700421941
User 62494 AUC after training: 0.5812895569620253
User 62494 does not improve AUC. Reverting changes.
Training on augumented user 70950 19/50 current_auc = 0.5815532700421941
User 70950 AUC after training: 0.5812895569620253
User 70950 does not improve AUC. Reverting changes.
Training on augumented user 228 20/50 current_auc = 0.5815532700421941
User 228 AUC after training: 0.5814214135021096
User 228 does not improve AUC. Reverting changes.
Training on augumented user 33967 21/50 current_auc = 0.5815532700421941
User 33967 AUC after training: 0.5818829113924051
User 33967 improves AUC. Keeping the model.
Training on augumented user 92208 22/50 current_auc = 0.5818829113924051
User 92208 AUC after training: 0.5814873417721519
User 92208 does not improve AUC. Reverting changes.
Training on augumented user 73060 23/50 current_auc = 0.5818829113924051
User 73060 AUC after training: 0.5816851265822784
User 73060 does not improve AUC. Reverting changes.
Training on augumented user 97577 24/50 current_auc = 0.5818829113924051
User 97577 AUC after training: 0.5816851265822784
User 97577 does not improve AUC. Reverting changes.
Training on augumented user 21683 25/50 current_auc = 0.5818829113924051
User 21683 AUC after training: 0.5811577004219409
User 21683 does not improve AUC. Reverting changes.
Training on augumented user 97283 26/50 current_auc = 0.5818829113924051
User 97283 AUC after training: 0.5813225210970465
User 97283 does not improve AUC. Reverting changes.
Training on augumented user 130153 27/50 current_auc = 0.5818829113924051
User 130153 AUC after training: 0.5806962025316456
User 130153 does not improve AUC. Reverting changes.
Training on augumented user 125903 28/50 current_auc = 0.5818829113924051
User 125903 AUC after training: 0.5812895569620253
User 125903 does not improve AUC. Reverting changes.
Training on augumented user 93450 29/50 current_auc = 0.5818829113924051
User 93450 AUC after training: 0.5814214135021096
User 93450 does not improve AUC. Reverting changes.
Training on augumented user 66235 30/50 current_auc = 0.5818829113924051
User 66235 AUC after training: 0.5816191983122363
User 66235 does not improve AUC. Reverting changes.
Training on augumented user 80498 31/50 current_auc = 0.5818829113924051
User 80498 AUC after training: 0.5813884493670887
User 80498 does not improve AUC. Reverting changes.
Training on augumented user 40978 32/50 current_auc = 0.5818829113924051
User 40978 AUC after training: 0.5816191983122363
User 40978 does not improve AUC. Reverting changes.
Training on augumented user 1042 33/50 current_auc = 0.5818829113924051
User 1042 AUC after training: 0.581190664556962
User 1042 does not improve AUC. Reverting changes.
Training on augumented user 119377 34/50 current_auc = 0.5818829113924051
User 119377 AUC after training: 0.581487341772152
User 119377 does not improve AUC. Reverting changes.
Training on augumented user 107222 35/50 current_auc = 0.5818829113924051
User 107222 AUC after training: 0.5811577004219409
User 107222 does not improve AUC. Reverting changes.
Training on augumented user 8205 36/50 current_auc = 0.5818829113924051
User 8205 AUC after training: 0.5818169831223629
User 8205 does not improve AUC. Reverting changes.
Training on augumented user 31146 37/50 current_auc = 0.5818829113924051
User 31146 AUC after training: 0.5811577004219408
User 31146 does not improve AUC. Reverting changes.
Training on augumented user 111448 38/50 current_auc = 0.5818829113924051
User 111448 AUC after training: 0.5817510548523206
User 111448 does not improve AUC. Reverting changes.
Training on augumented user 130723 39/50 current_auc = 0.5818829113924051
User 130723 AUC after training: 0.5816851265822784
User 130723 does not improve AUC. Reverting changes.
Training on augumented user 135954 40/50 current_auc = 0.5818829113924051
User 135954 AUC after training: 0.5816191983122363
User 135954 does not improve AUC. Reverting changes.
Training on augumented user 90789 41/50 current_auc = 0.5818829113924051
User 90789 AUC after training: 0.5819488396624473
User 90789 improves AUC. Keeping the model.
Training on augumented user 69133 42/50 current_auc = 0.5819488396624473
User 69133 AUC after training: 0.5813225210970464
User 69133 does not improve AUC. Reverting changes.
Training on augumented user 74935 43/50 current_auc = 0.5819488396624473
User 74935 AUC after training: 0.5818829113924051
User 74935 does not improve AUC. Reverting changes.
Training on augumented user 72704 44/50 current_auc = 0.5819488396624473
User 72704 AUC after training: 0.5818829113924051
User 72704 does not improve AUC. Reverting changes.
Training on augumented user 49080 45/50 current_auc = 0.5819488396624473
User 49080 AUC after training: 0.5821795886075949
User 49080 improves AUC. Keeping the model.
Training on augumented user 3161 46/50 current_auc = 0.5821795886075949
User 3161 AUC after training: 0.5824103375527426
User 3161 improves AUC. Keeping the model.
Training on augumented user 63572 47/50 current_auc = 0.5824103375527426
User 63572 AUC after training: 0.5811247362869199
User 63572 does not improve AUC. Reverting changes.
Training on augumented user 105905 48/50 current_auc = 0.5824103375527426
User 105905 AUC after training: 0.581882911392405
User 105905 does not improve AUC. Reverting changes.
Training on augumented user 45792 49/50 current_auc = 0.5824103375527426
User 45792 AUC after training: 0.5816851265822784
User 45792 does not improve AUC. Reverting changes.
[2024-12-02 19:24:20.050059] start test user 46704 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:20.474460] start test user 46704 193/568 recall augumented users by random, augumented_users = [75767, 82301, 64270, 60728, 107151, 2532, 132245, 23864, 62334, 25082, 71125, 30966, 43390, 28180, 73399, 130411, 92850, 60831, 91387, 14064, 56440, 136499, 17411, 3886, 110702, 120930, 49711, 46023, 99339, 121723, 96186, 21541, 101077, 91965, 23963, 101480, 115594, 137499, 36916, 69376, 61330, 82875, 127100, 112940, 114774, 72794, 17290, 10459, 36419, 121585]
[2024-12-02 19:24:20.489709] user = 46704 Cloud 193/568
[2024-12-02 19:24:20.511148] user = 46704 Local 193/568
[2024-12-02 19:24:20.550153] user = 46704 Local+ 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:22.533592] user = 46704 MPDA- 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5791172595520422
Training on augumented user 75767 0/50 current_auc = 0.5791172595520422
User 75767 AUC after training: 0.5806982872200264
User 75767 improves AUC. Keeping the model.
Training on augumented user 82301 1/50 current_auc = 0.5806982872200264
User 82301 AUC after training: 0.5803030303030303
User 82301 does not improve AUC. Reverting changes.
Training on augumented user 64270 2/50 current_auc = 0.5806982872200264
User 64270 AUC after training: 0.5811923583662714
User 64270 improves AUC. Keeping the model.
Training on augumented user 60728 3/50 current_auc = 0.5811923583662714
User 60728 AUC after training: 0.5811923583662715
User 60728 improves AUC. Keeping the model.
Training on augumented user 107151 4/50 current_auc = 0.5811923583662715
User 107151 AUC after training: 0.5806324110671937
User 107151 does not improve AUC. Reverting changes.
Training on augumented user 2532 5/50 current_auc = 0.5811923583662715
User 2532 AUC after training: 0.5809947299077735
User 2532 does not improve AUC. Reverting changes.
Training on augumented user 132245 6/50 current_auc = 0.5811923583662715
User 132245 AUC after training: 0.5811594202898551
User 132245 does not improve AUC. Reverting changes.
Training on augumented user 23864 7/50 current_auc = 0.5811923583662715
User 23864 AUC after training: 0.581060606060606
User 23864 does not improve AUC. Reverting changes.
Training on augumented user 62334 8/50 current_auc = 0.5811923583662715
User 62334 AUC after training: 0.580961791831357
User 62334 does not improve AUC. Reverting changes.
Training on augumented user 25082 9/50 current_auc = 0.5811923583662715
User 25082 AUC after training: 0.5814229249011857
User 25082 improves AUC. Keeping the model.
Training on augumented user 71125 10/50 current_auc = 0.5814229249011857
User 71125 AUC after training: 0.5806324110671937
User 71125 does not improve AUC. Reverting changes.
Training on augumented user 30966 11/50 current_auc = 0.5814229249011857
User 30966 AUC after training: 0.5816205533596838
User 30966 improves AUC. Keeping the model.
Training on augumented user 43390 12/50 current_auc = 0.5816205533596838
User 43390 AUC after training: 0.5800395256916997
User 43390 does not improve AUC. Reverting changes.
Training on augumented user 28180 13/50 current_auc = 0.5816205533596838
User 28180 AUC after training: 0.5812252964426877
User 28180 does not improve AUC. Reverting changes.
Training on augumented user 73399 14/50 current_auc = 0.5816205533596838
User 73399 AUC after training: 0.5814229249011857
User 73399 does not improve AUC. Reverting changes.
Training on augumented user 130411 15/50 current_auc = 0.5816205533596838
User 130411 AUC after training: 0.5804347826086956
User 130411 does not improve AUC. Reverting changes.
Training on augumented user 92850 16/50 current_auc = 0.5816205533596838
User 92850 AUC after training: 0.5810935441370224
User 92850 does not improve AUC. Reverting changes.
Training on augumented user 60831 17/50 current_auc = 0.5816205533596838
User 60831 AUC after training: 0.5814229249011857
User 60831 does not improve AUC. Reverting changes.
Training on augumented user 91387 18/50 current_auc = 0.5816205533596838
User 91387 AUC after training: 0.5814229249011857
User 91387 does not improve AUC. Reverting changes.
Training on augumented user 14064 19/50 current_auc = 0.5816205533596838
User 14064 AUC after training: 0.5821475625823451
User 14064 improves AUC. Keeping the model.
Training on augumented user 56440 20/50 current_auc = 0.5821475625823451
User 56440 AUC after training: 0.5797101449275363
User 56440 does not improve AUC. Reverting changes.
Training on augumented user 136499 21/50 current_auc = 0.5821475625823451
User 136499 AUC after training: 0.5816864295125166
User 136499 does not improve AUC. Reverting changes.
Training on augumented user 17411 22/50 current_auc = 0.5821475625823451
User 17411 AUC after training: 0.5806982872200264
User 17411 does not improve AUC. Reverting changes.
Training on augumented user 3886 23/50 current_auc = 0.5821475625823451
User 3886 AUC after training: 0.5816864295125165
User 3886 does not improve AUC. Reverting changes.
Training on augumented user 110702 24/50 current_auc = 0.5821475625823451
User 110702 AUC after training: 0.5810276679841897
User 110702 does not improve AUC. Reverting changes.
Training on augumented user 120930 25/50 current_auc = 0.5821475625823451
User 120930 AUC after training: 0.5796442687747037
User 120930 does not improve AUC. Reverting changes.
Training on augumented user 49711 26/50 current_auc = 0.5821475625823451
User 49711 AUC after training: 0.5811594202898551
User 49711 does not improve AUC. Reverting changes.
Training on augumented user 46023 27/50 current_auc = 0.5821475625823451
User 46023 AUC after training: 0.5804347826086956
User 46023 does not improve AUC. Reverting changes.
Training on augumented user 99339 28/50 current_auc = 0.5821475625823451
User 99339 AUC after training: 0.5812252964426877
User 99339 does not improve AUC. Reverting changes.
Training on augumented user 121723 29/50 current_auc = 0.5821475625823451
User 121723 AUC after training: 0.5795125164690382
User 121723 does not improve AUC. Reverting changes.
Training on augumented user 96186 30/50 current_auc = 0.5821475625823451
User 96186 AUC after training: 0.5807641633728591
User 96186 does not improve AUC. Reverting changes.
Training on augumented user 21541 31/50 current_auc = 0.5821475625823451
User 21541 AUC after training: 0.5816864295125164
User 21541 does not improve AUC. Reverting changes.
Training on augumented user 101077 32/50 current_auc = 0.5821475625823451
User 101077 AUC after training: 0.5808300395256917
User 101077 does not improve AUC. Reverting changes.
Training on augumented user 91965 33/50 current_auc = 0.5821475625823451
User 91965 AUC after training: 0.581357048748353
User 91965 does not improve AUC. Reverting changes.
Training on augumented user 23963 34/50 current_auc = 0.5821475625823451
User 23963 AUC after training: 0.5794137022397892
User 23963 does not improve AUC. Reverting changes.
Training on augumented user 101480 35/50 current_auc = 0.5821475625823451
User 101480 AUC after training: 0.5815546772068512
User 101480 does not improve AUC. Reverting changes.
Training on augumented user 115594 36/50 current_auc = 0.5821475625823451
User 115594 AUC after training: 0.5811594202898551
User 115594 does not improve AUC. Reverting changes.
Training on augumented user 137499 37/50 current_auc = 0.5821475625823451
User 137499 AUC after training: 0.5817523056653491
User 137499 does not improve AUC. Reverting changes.
Training on augumented user 36916 38/50 current_auc = 0.5821475625823451
User 36916 AUC after training: 0.5811594202898551
User 36916 does not improve AUC. Reverting changes.
Training on augumented user 69376 39/50 current_auc = 0.5821475625823451
User 69376 AUC after training: 0.5811594202898551
User 69376 does not improve AUC. Reverting changes.
Training on augumented user 61330 40/50 current_auc = 0.5821475625823451
User 61330 AUC after training: 0.5809617918313571
User 61330 does not improve AUC. Reverting changes.
Training on augumented user 82875 41/50 current_auc = 0.5821475625823451
User 82875 AUC after training: 0.5820816864295126
User 82875 does not improve AUC. Reverting changes.
Training on augumented user 127100 42/50 current_auc = 0.5821475625823451
User 127100 AUC after training: 0.5810276679841897
User 127100 does not improve AUC. Reverting changes.
Training on augumented user 112940 43/50 current_auc = 0.5821475625823451
User 112940 AUC after training: 0.5791831357048749
User 112940 does not improve AUC. Reverting changes.
Training on augumented user 114774 44/50 current_auc = 0.5821475625823451
User 114774 AUC after training: 0.5810935441370224
User 114774 does not improve AUC. Reverting changes.
Training on augumented user 72794 45/50 current_auc = 0.5821475625823451
User 72794 AUC after training: 0.5812911725955204
User 72794 does not improve AUC. Reverting changes.
Training on augumented user 17290 46/50 current_auc = 0.5821475625823451
User 17290 AUC after training: 0.5819499341238472
User 17290 does not improve AUC. Reverting changes.
Training on augumented user 10459 47/50 current_auc = 0.5821475625823451
User 10459 AUC after training: 0.5809617918313571
User 10459 does not improve AUC. Reverting changes.
Training on augumented user 36419 48/50 current_auc = 0.5821475625823451
User 36419 AUC after training: 0.5789525691699605
User 36419 does not improve AUC. Reverting changes.
Training on augumented user 121585 49/50 current_auc = 0.5821475625823451
User 121585 AUC after training: 0.5808300395256917
User 121585 does not improve AUC. Reverting changes.
[2024-12-02 19:24:51.824813] start test user 46729 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:52.250276] start test user 46729 194/568 recall augumented users by random, augumented_users = [34737, 48493, 115175, 58637, 115511, 99879, 87925, 97014, 121117, 124698, 131034, 68954, 37572, 101868, 135259, 8413, 105424, 2317, 68920, 100469, 45480, 67939, 48165, 8472, 105163, 85346, 49651, 39377, 22285, 32537, 104714, 14243, 78633, 92699, 88241, 65439, 54710, 3558, 16643, 43023, 35626, 27978, 111235, 99471, 114110, 25169, 52301, 109119, 102402, 7534]
[2024-12-02 19:24:52.265955] user = 46729 Cloud 194/568
[2024-12-02 19:24:52.275872] user = 46729 Local 194/568
[2024-12-02 19:24:52.326449] user = 46729 Local+ 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:54.694804] user = 46729 MPDA- 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.625
Training on augumented user 34737 0/50 current_auc = 0.625
User 34737 AUC after training: 0.625
User 34737 does not improve AUC. Reverting changes.
Training on augumented user 48493 1/50 current_auc = 0.625
User 48493 AUC after training: 0.625
User 48493 does not improve AUC. Reverting changes.
Training on augumented user 115175 2/50 current_auc = 0.625
User 115175 AUC after training: 0.625
User 115175 does not improve AUC. Reverting changes.
Training on augumented user 58637 3/50 current_auc = 0.625
User 58637 AUC after training: 0.625
User 58637 does not improve AUC. Reverting changes.
Training on augumented user 115511 4/50 current_auc = 0.625
User 115511 AUC after training: 0.625
User 115511 does not improve AUC. Reverting changes.
Training on augumented user 99879 5/50 current_auc = 0.625
User 99879 AUC after training: 0.625
User 99879 does not improve AUC. Reverting changes.
Training on augumented user 87925 6/50 current_auc = 0.625
User 87925 AUC after training: 0.625
User 87925 does not improve AUC. Reverting changes.
Training on augumented user 97014 7/50 current_auc = 0.625
User 97014 AUC after training: 0.625
User 97014 does not improve AUC. Reverting changes.
Training on augumented user 121117 8/50 current_auc = 0.625
User 121117 AUC after training: 0.625
User 121117 does not improve AUC. Reverting changes.
Training on augumented user 124698 9/50 current_auc = 0.625
User 124698 AUC after training: 0.625
User 124698 does not improve AUC. Reverting changes.
Training on augumented user 131034 10/50 current_auc = 0.625
User 131034 AUC after training: 0.625
User 131034 does not improve AUC. Reverting changes.
Training on augumented user 68954 11/50 current_auc = 0.625
User 68954 AUC after training: 0.625
User 68954 does not improve AUC. Reverting changes.
Training on augumented user 37572 12/50 current_auc = 0.625
User 37572 AUC after training: 0.625
User 37572 does not improve AUC. Reverting changes.
Training on augumented user 101868 13/50 current_auc = 0.625
User 101868 AUC after training: 0.625
User 101868 does not improve AUC. Reverting changes.
Training on augumented user 135259 14/50 current_auc = 0.625
User 135259 AUC after training: 0.625
User 135259 does not improve AUC. Reverting changes.
Training on augumented user 8413 15/50 current_auc = 0.625
User 8413 AUC after training: 0.625
User 8413 does not improve AUC. Reverting changes.
Training on augumented user 105424 16/50 current_auc = 0.625
User 105424 AUC after training: 0.625
User 105424 does not improve AUC. Reverting changes.
Training on augumented user 2317 17/50 current_auc = 0.625
User 2317 AUC after training: 0.625
User 2317 does not improve AUC. Reverting changes.
Training on augumented user 68920 18/50 current_auc = 0.625
User 68920 AUC after training: 0.625
User 68920 does not improve AUC. Reverting changes.
Training on augumented user 100469 19/50 current_auc = 0.625
User 100469 AUC after training: 0.625
User 100469 does not improve AUC. Reverting changes.
Training on augumented user 45480 20/50 current_auc = 0.625
User 45480 AUC after training: 0.625
User 45480 does not improve AUC. Reverting changes.
Training on augumented user 67939 21/50 current_auc = 0.625
User 67939 AUC after training: 0.625
User 67939 does not improve AUC. Reverting changes.
Training on augumented user 48165 22/50 current_auc = 0.625
User 48165 AUC after training: 0.625
User 48165 does not improve AUC. Reverting changes.
Training on augumented user 8472 23/50 current_auc = 0.625
User 8472 AUC after training: 0.625
User 8472 does not improve AUC. Reverting changes.
Training on augumented user 105163 24/50 current_auc = 0.625
User 105163 AUC after training: 0.625
User 105163 does not improve AUC. Reverting changes.
Training on augumented user 85346 25/50 current_auc = 0.625
User 85346 AUC after training: 0.625
User 85346 does not improve AUC. Reverting changes.
Training on augumented user 49651 26/50 current_auc = 0.625
User 49651 AUC after training: 0.625
User 49651 does not improve AUC. Reverting changes.
Training on augumented user 39377 27/50 current_auc = 0.625
User 39377 AUC after training: 0.625
User 39377 does not improve AUC. Reverting changes.
Training on augumented user 22285 28/50 current_auc = 0.625
User 22285 AUC after training: 0.625
User 22285 does not improve AUC. Reverting changes.
Training on augumented user 32537 29/50 current_auc = 0.625
User 32537 AUC after training: 0.625
User 32537 does not improve AUC. Reverting changes.
Training on augumented user 104714 30/50 current_auc = 0.625
User 104714 AUC after training: 0.625
User 104714 does not improve AUC. Reverting changes.
Training on augumented user 14243 31/50 current_auc = 0.625
User 14243 AUC after training: 0.625
User 14243 does not improve AUC. Reverting changes.
Training on augumented user 78633 32/50 current_auc = 0.625
User 78633 AUC after training: 0.625
User 78633 does not improve AUC. Reverting changes.
Training on augumented user 92699 33/50 current_auc = 0.625
User 92699 AUC after training: 0.625
User 92699 does not improve AUC. Reverting changes.
Training on augumented user 88241 34/50 current_auc = 0.625
User 88241 AUC after training: 0.625
User 88241 does not improve AUC. Reverting changes.
Training on augumented user 65439 35/50 current_auc = 0.625
User 65439 AUC after training: 0.625
User 65439 does not improve AUC. Reverting changes.
Training on augumented user 54710 36/50 current_auc = 0.625
User 54710 AUC after training: 0.625
User 54710 does not improve AUC. Reverting changes.
Training on augumented user 3558 37/50 current_auc = 0.625
User 3558 AUC after training: 0.625
User 3558 does not improve AUC. Reverting changes.
Training on augumented user 16643 38/50 current_auc = 0.625
User 16643 AUC after training: 0.625
User 16643 does not improve AUC. Reverting changes.
Training on augumented user 43023 39/50 current_auc = 0.625
User 43023 AUC after training: 0.625
User 43023 does not improve AUC. Reverting changes.
Training on augumented user 35626 40/50 current_auc = 0.625
User 35626 AUC after training: 0.625
User 35626 does not improve AUC. Reverting changes.
Training on augumented user 27978 41/50 current_auc = 0.625
User 27978 AUC after training: 0.625
User 27978 does not improve AUC. Reverting changes.
Training on augumented user 111235 42/50 current_auc = 0.625
User 111235 AUC after training: 0.625
User 111235 does not improve AUC. Reverting changes.
Training on augumented user 99471 43/50 current_auc = 0.625
User 99471 AUC after training: 0.625
User 99471 does not improve AUC. Reverting changes.
Training on augumented user 114110 44/50 current_auc = 0.625
User 114110 AUC after training: 0.625
User 114110 does not improve AUC. Reverting changes.
Training on augumented user 25169 45/50 current_auc = 0.625
User 25169 AUC after training: 0.625
User 25169 does not improve AUC. Reverting changes.
Training on augumented user 52301 46/50 current_auc = 0.625
User 52301 AUC after training: 0.625
User 52301 does not improve AUC. Reverting changes.
Training on augumented user 109119 47/50 current_auc = 0.625
User 109119 AUC after training: 0.625
User 109119 does not improve AUC. Reverting changes.
Training on augumented user 102402 48/50 current_auc = 0.625
User 102402 AUC after training: 0.625
User 102402 does not improve AUC. Reverting changes.
Training on augumented user 7534 49/50 current_auc = 0.625
User 7534 AUC after training: 0.625
User 7534 does not improve AUC. Reverting changes.
[2024-12-02 19:25:21.224860] start test user 46742 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:21.650383] start test user 46742 195/568 recall augumented users by random, augumented_users = [36857, 22528, 11368, 56837, 4603, 104119, 41020, 120760, 25386, 116783, 87840, 51849, 8065, 38590, 93871, 121291, 89269, 97460, 99078, 14891, 85847, 35949, 60060, 43288, 4421, 138427, 60463, 45941, 35717, 15042, 95378, 42351, 86658, 16583, 71465, 108246, 77453, 109114, 117330, 30986, 71560, 11912, 23835, 4552, 111967, 46948, 54750, 33005, 27676, 131126]
[2024-12-02 19:25:21.665174] user = 46742 Cloud 195/568
[2024-12-02 19:25:21.675931] user = 46742 Local 195/568
[2024-12-02 19:25:21.696571] user = 46742 Local+ 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:24.001069] user = 46742 MPDA- 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3974358974358974
Training on augumented user 36857 0/50 current_auc = 0.3974358974358974
User 36857 AUC after training: 0.3974358974358974
User 36857 does not improve AUC. Reverting changes.
Training on augumented user 22528 1/50 current_auc = 0.3974358974358974
User 22528 AUC after training: 0.391025641025641
User 22528 does not improve AUC. Reverting changes.
Training on augumented user 11368 2/50 current_auc = 0.3974358974358974
User 11368 AUC after training: 0.391025641025641
User 11368 does not improve AUC. Reverting changes.
Training on augumented user 56837 3/50 current_auc = 0.3974358974358974
User 56837 AUC after training: 0.3974358974358974
User 56837 does not improve AUC. Reverting changes.
Training on augumented user 4603 4/50 current_auc = 0.3974358974358974
User 4603 AUC after training: 0.391025641025641
User 4603 does not improve AUC. Reverting changes.
Training on augumented user 104119 5/50 current_auc = 0.3974358974358974
User 104119 AUC after training: 0.3974358974358974
User 104119 does not improve AUC. Reverting changes.
Training on augumented user 41020 6/50 current_auc = 0.3974358974358974
User 41020 AUC after training: 0.3974358974358974
User 41020 does not improve AUC. Reverting changes.
Training on augumented user 120760 7/50 current_auc = 0.3974358974358974
User 120760 AUC after training: 0.3974358974358974
User 120760 does not improve AUC. Reverting changes.
Training on augumented user 25386 8/50 current_auc = 0.3974358974358974
User 25386 AUC after training: 0.391025641025641
User 25386 does not improve AUC. Reverting changes.
Training on augumented user 116783 9/50 current_auc = 0.3974358974358974
User 116783 AUC after training: 0.3974358974358974
User 116783 does not improve AUC. Reverting changes.
Training on augumented user 87840 10/50 current_auc = 0.3974358974358974
User 87840 AUC after training: 0.3974358974358974
User 87840 does not improve AUC. Reverting changes.
Training on augumented user 51849 11/50 current_auc = 0.3974358974358974
User 51849 AUC after training: 0.391025641025641
User 51849 does not improve AUC. Reverting changes.
Training on augumented user 8065 12/50 current_auc = 0.3974358974358974
User 8065 AUC after training: 0.3974358974358974
User 8065 does not improve AUC. Reverting changes.
Training on augumented user 38590 13/50 current_auc = 0.3974358974358974
User 38590 AUC after training: 0.391025641025641
User 38590 does not improve AUC. Reverting changes.
Training on augumented user 93871 14/50 current_auc = 0.3974358974358974
User 93871 AUC after training: 0.40384615384615385
User 93871 improves AUC. Keeping the model.
Training on augumented user 121291 15/50 current_auc = 0.40384615384615385
User 121291 AUC after training: 0.40384615384615385
User 121291 does not improve AUC. Reverting changes.
Training on augumented user 89269 16/50 current_auc = 0.40384615384615385
User 89269 AUC after training: 0.391025641025641
User 89269 does not improve AUC. Reverting changes.
Training on augumented user 97460 17/50 current_auc = 0.40384615384615385
User 97460 AUC after training: 0.41025641025641024
User 97460 improves AUC. Keeping the model.
Training on augumented user 99078 18/50 current_auc = 0.41025641025641024
User 99078 AUC after training: 0.41025641025641024
User 99078 does not improve AUC. Reverting changes.
Training on augumented user 14891 19/50 current_auc = 0.41025641025641024
User 14891 AUC after training: 0.41025641025641024
User 14891 does not improve AUC. Reverting changes.
Training on augumented user 85847 20/50 current_auc = 0.41025641025641024
User 85847 AUC after training: 0.41025641025641024
User 85847 does not improve AUC. Reverting changes.
Training on augumented user 35949 21/50 current_auc = 0.41025641025641024
User 35949 AUC after training: 0.41025641025641024
User 35949 does not improve AUC. Reverting changes.
Training on augumented user 60060 22/50 current_auc = 0.41025641025641024
User 60060 AUC after training: 0.41025641025641024
User 60060 does not improve AUC. Reverting changes.
Training on augumented user 43288 23/50 current_auc = 0.41025641025641024
User 43288 AUC after training: 0.40384615384615385
User 43288 does not improve AUC. Reverting changes.
Training on augumented user 4421 24/50 current_auc = 0.41025641025641024
User 4421 AUC after training: 0.41025641025641024
User 4421 does not improve AUC. Reverting changes.
Training on augumented user 138427 25/50 current_auc = 0.41025641025641024
User 138427 AUC after training: 0.41025641025641024
User 138427 does not improve AUC. Reverting changes.
Training on augumented user 60463 26/50 current_auc = 0.41025641025641024
User 60463 AUC after training: 0.41025641025641024
User 60463 does not improve AUC. Reverting changes.
Training on augumented user 45941 27/50 current_auc = 0.41025641025641024
User 45941 AUC after training: 0.3974358974358974
User 45941 does not improve AUC. Reverting changes.
Training on augumented user 35717 28/50 current_auc = 0.41025641025641024
User 35717 AUC after training: 0.41025641025641024
User 35717 does not improve AUC. Reverting changes.
Training on augumented user 15042 29/50 current_auc = 0.41025641025641024
User 15042 AUC after training: 0.40384615384615385
User 15042 does not improve AUC. Reverting changes.
Training on augumented user 95378 30/50 current_auc = 0.41025641025641024
User 95378 AUC after training: 0.41025641025641024
User 95378 does not improve AUC. Reverting changes.
Training on augumented user 42351 31/50 current_auc = 0.41025641025641024
User 42351 AUC after training: 0.40384615384615385
User 42351 does not improve AUC. Reverting changes.
Training on augumented user 86658 32/50 current_auc = 0.41025641025641024
User 86658 AUC after training: 0.41025641025641024
User 86658 does not improve AUC. Reverting changes.
Training on augumented user 16583 33/50 current_auc = 0.41025641025641024
User 16583 AUC after training: 0.41025641025641024
User 16583 does not improve AUC. Reverting changes.
Training on augumented user 71465 34/50 current_auc = 0.41025641025641024
User 71465 AUC after training: 0.40384615384615385
User 71465 does not improve AUC. Reverting changes.
Training on augumented user 108246 35/50 current_auc = 0.41025641025641024
User 108246 AUC after training: 0.40384615384615385
User 108246 does not improve AUC. Reverting changes.
Training on augumented user 77453 36/50 current_auc = 0.41025641025641024
User 77453 AUC after training: 0.3974358974358974
User 77453 does not improve AUC. Reverting changes.
Training on augumented user 109114 37/50 current_auc = 0.41025641025641024
User 109114 AUC after training: 0.40384615384615385
User 109114 does not improve AUC. Reverting changes.
Training on augumented user 117330 38/50 current_auc = 0.41025641025641024
User 117330 AUC after training: 0.40384615384615385
User 117330 does not improve AUC. Reverting changes.
Training on augumented user 30986 39/50 current_auc = 0.41025641025641024
User 30986 AUC after training: 0.41025641025641024
User 30986 does not improve AUC. Reverting changes.
Training on augumented user 71560 40/50 current_auc = 0.41025641025641024
User 71560 AUC after training: 0.391025641025641
User 71560 does not improve AUC. Reverting changes.
Training on augumented user 11912 41/50 current_auc = 0.41025641025641024
User 11912 AUC after training: 0.3974358974358974
User 11912 does not improve AUC. Reverting changes.
Training on augumented user 23835 42/50 current_auc = 0.41025641025641024
User 23835 AUC after training: 0.41025641025641024
User 23835 does not improve AUC. Reverting changes.
Training on augumented user 4552 43/50 current_auc = 0.41025641025641024
User 4552 AUC after training: 0.391025641025641
User 4552 does not improve AUC. Reverting changes.
Training on augumented user 111967 44/50 current_auc = 0.41025641025641024
User 111967 AUC after training: 0.41025641025641024
User 111967 does not improve AUC. Reverting changes.
Training on augumented user 46948 45/50 current_auc = 0.41025641025641024
User 46948 AUC after training: 0.3974358974358974
User 46948 does not improve AUC. Reverting changes.
Training on augumented user 54750 46/50 current_auc = 0.41025641025641024
User 54750 AUC after training: 0.40384615384615385
User 54750 does not improve AUC. Reverting changes.
Training on augumented user 33005 47/50 current_auc = 0.41025641025641024
User 33005 AUC after training: 0.41025641025641024
User 33005 does not improve AUC. Reverting changes.
Training on augumented user 27676 48/50 current_auc = 0.41025641025641024
User 27676 AUC after training: 0.41025641025641024
User 27676 does not improve AUC. Reverting changes.
Training on augumented user 131126 49/50 current_auc = 0.41025641025641024
User 131126 AUC after training: 0.40384615384615385
User 131126 does not improve AUC. Reverting changes.
[2024-12-02 19:25:53.875934] start test user 46764 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:54.330738] start test user 46764 196/568 recall augumented users by random, augumented_users = [30316, 18892, 46531, 80683, 55135, 76071, 136943, 18738, 93958, 57781, 103516, 81851, 39296, 95688, 110792, 109175, 133191, 36270, 88827, 72610, 100964, 4943, 72268, 5444, 108684, 70568, 100060, 78463, 95252, 103757, 71429, 114203, 87537, 117339, 46016, 16934, 47155, 65891, 30538, 106590, 137999, 132284, 47218, 133004, 137221, 98526, 62878, 71088, 83245, 84841]
[2024-12-02 19:25:54.345473] user = 46764 Cloud 196/568
[2024-12-02 19:25:54.393767] user = 46764 Local 196/568
[2024-12-02 19:25:54.432280] user = 46764 Local+ 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:56.991592] user = 46764 MPDA- 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8150943396226416
Training on augumented user 30316 0/50 current_auc = 0.8150943396226416
User 30316 AUC after training: 0.8149685534591196
User 30316 does not improve AUC. Reverting changes.
Training on augumented user 18892 1/50 current_auc = 0.8150943396226416
User 18892 AUC after training: 0.8159748427672956
User 18892 improves AUC. Keeping the model.
Training on augumented user 46531 2/50 current_auc = 0.8159748427672956
User 46531 AUC after training: 0.8168553459119496
User 46531 improves AUC. Keeping the model.
Training on augumented user 80683 3/50 current_auc = 0.8168553459119496
User 80683 AUC after training: 0.8168553459119496
User 80683 does not improve AUC. Reverting changes.
Training on augumented user 55135 4/50 current_auc = 0.8168553459119496
User 55135 AUC after training: 0.8173584905660378
User 55135 improves AUC. Keeping the model.
Training on augumented user 76071 5/50 current_auc = 0.8173584905660378
User 76071 AUC after training: 0.8174842767295598
User 76071 improves AUC. Keeping the model.
Training on augumented user 136943 6/50 current_auc = 0.8174842767295598
User 136943 AUC after training: 0.8176100628930818
User 136943 improves AUC. Keeping the model.
Training on augumented user 18738 7/50 current_auc = 0.8176100628930818
User 18738 AUC after training: 0.8168553459119496
User 18738 does not improve AUC. Reverting changes.
Training on augumented user 93958 8/50 current_auc = 0.8176100628930818
User 93958 AUC after training: 0.8177358490566038
User 93958 improves AUC. Keeping the model.
Training on augumented user 57781 9/50 current_auc = 0.8177358490566038
User 57781 AUC after training: 0.8181132075471698
User 57781 improves AUC. Keeping the model.
Training on augumented user 103516 10/50 current_auc = 0.8181132075471698
User 103516 AUC after training: 0.818616352201258
User 103516 improves AUC. Keeping the model.
Training on augumented user 81851 11/50 current_auc = 0.818616352201258
User 81851 AUC after training: 0.8178616352201258
User 81851 does not improve AUC. Reverting changes.
Training on augumented user 39296 12/50 current_auc = 0.818616352201258
User 39296 AUC after training: 0.818490566037736
User 39296 does not improve AUC. Reverting changes.
Training on augumented user 95688 13/50 current_auc = 0.818616352201258
User 95688 AUC after training: 0.818490566037736
User 95688 does not improve AUC. Reverting changes.
Training on augumented user 110792 14/50 current_auc = 0.818616352201258
User 110792 AUC after training: 0.8179874213836479
User 110792 does not improve AUC. Reverting changes.
Training on augumented user 109175 15/50 current_auc = 0.818616352201258
User 109175 AUC after training: 0.8179874213836478
User 109175 does not improve AUC. Reverting changes.
Training on augumented user 133191 16/50 current_auc = 0.818616352201258
User 133191 AUC after training: 0.818490566037736
User 133191 does not improve AUC. Reverting changes.
Training on augumented user 36270 17/50 current_auc = 0.818616352201258
User 36270 AUC after training: 0.8179874213836479
User 36270 does not improve AUC. Reverting changes.
Training on augumented user 88827 18/50 current_auc = 0.818616352201258
User 88827 AUC after training: 0.8178616352201258
User 88827 does not improve AUC. Reverting changes.
Training on augumented user 72610 19/50 current_auc = 0.818616352201258
User 72610 AUC after training: 0.8183647798742139
User 72610 does not improve AUC. Reverting changes.
Training on augumented user 100964 20/50 current_auc = 0.818616352201258
User 100964 AUC after training: 0.8182389937106919
User 100964 does not improve AUC. Reverting changes.
Training on augumented user 4943 21/50 current_auc = 0.818616352201258
User 4943 AUC after training: 0.818490566037736
User 4943 does not improve AUC. Reverting changes.
Training on augumented user 72268 22/50 current_auc = 0.818616352201258
User 72268 AUC after training: 0.8181132075471698
User 72268 does not improve AUC. Reverting changes.
Training on augumented user 5444 23/50 current_auc = 0.818616352201258
User 5444 AUC after training: 0.8183647798742139
User 5444 does not improve AUC. Reverting changes.
Training on augumented user 108684 24/50 current_auc = 0.818616352201258
User 108684 AUC after training: 0.8173584905660378
User 108684 does not improve AUC. Reverting changes.
Training on augumented user 70568 25/50 current_auc = 0.818616352201258
User 70568 AUC after training: 0.818490566037736
User 70568 does not improve AUC. Reverting changes.
Training on augumented user 100060 26/50 current_auc = 0.818616352201258
User 100060 AUC after training: 0.8174842767295598
User 100060 does not improve AUC. Reverting changes.
Training on augumented user 78463 27/50 current_auc = 0.818616352201258
User 78463 AUC after training: 0.8178616352201258
User 78463 does not improve AUC. Reverting changes.
Training on augumented user 95252 28/50 current_auc = 0.818616352201258
User 95252 AUC after training: 0.8182389937106919
User 95252 does not improve AUC. Reverting changes.
Training on augumented user 103757 29/50 current_auc = 0.818616352201258
User 103757 AUC after training: 0.8173584905660377
User 103757 does not improve AUC. Reverting changes.
Training on augumented user 71429 30/50 current_auc = 0.818616352201258
User 71429 AUC after training: 0.8183647798742139
User 71429 does not improve AUC. Reverting changes.
Training on augumented user 114203 31/50 current_auc = 0.818616352201258
User 114203 AUC after training: 0.8177358490566038
User 114203 does not improve AUC. Reverting changes.
Training on augumented user 87537 32/50 current_auc = 0.818616352201258
User 87537 AUC after training: 0.8173584905660378
User 87537 does not improve AUC. Reverting changes.
Training on augumented user 117339 33/50 current_auc = 0.818616352201258
User 117339 AUC after training: 0.8184905660377358
User 117339 does not improve AUC. Reverting changes.
Training on augumented user 46016 34/50 current_auc = 0.818616352201258
User 46016 AUC after training: 0.8187421383647799
User 46016 improves AUC. Keeping the model.
Training on augumented user 16934 35/50 current_auc = 0.8187421383647799
User 16934 AUC after training: 0.8182389937106919
User 16934 does not improve AUC. Reverting changes.
Training on augumented user 47155 36/50 current_auc = 0.8187421383647799
User 47155 AUC after training: 0.8182389937106919
User 47155 does not improve AUC. Reverting changes.
Training on augumented user 65891 37/50 current_auc = 0.8187421383647799
User 65891 AUC after training: 0.818490566037736
User 65891 does not improve AUC. Reverting changes.
Training on augumented user 30538 38/50 current_auc = 0.8187421383647799
User 30538 AUC after training: 0.8182389937106919
User 30538 does not improve AUC. Reverting changes.
Training on augumented user 106590 39/50 current_auc = 0.8187421383647799
User 106590 AUC after training: 0.8184905660377358
User 106590 does not improve AUC. Reverting changes.
Training on augumented user 137999 40/50 current_auc = 0.8187421383647799
User 137999 AUC after training: 0.8183647798742139
User 137999 does not improve AUC. Reverting changes.
Training on augumented user 132284 41/50 current_auc = 0.8187421383647799
User 132284 AUC after training: 0.8187421383647799
User 132284 does not improve AUC. Reverting changes.
Training on augumented user 47218 42/50 current_auc = 0.8187421383647799
User 47218 AUC after training: 0.8174842767295597
User 47218 does not improve AUC. Reverting changes.
Training on augumented user 133004 43/50 current_auc = 0.8187421383647799
User 133004 AUC after training: 0.8182389937106919
User 133004 does not improve AUC. Reverting changes.
Training on augumented user 137221 44/50 current_auc = 0.8187421383647799
User 137221 AUC after training: 0.818616352201258
User 137221 does not improve AUC. Reverting changes.
Training on augumented user 98526 45/50 current_auc = 0.8187421383647799
User 98526 AUC after training: 0.8182389937106919
User 98526 does not improve AUC. Reverting changes.
Training on augumented user 62878 46/50 current_auc = 0.8187421383647799
User 62878 AUC after training: 0.8183647798742139
User 62878 does not improve AUC. Reverting changes.
Training on augumented user 71088 47/50 current_auc = 0.8187421383647799
User 71088 AUC after training: 0.8191194968553459
User 71088 improves AUC. Keeping the model.
Training on augumented user 83245 48/50 current_auc = 0.8191194968553459
User 83245 AUC after training: 0.8191194968553459
User 83245 does not improve AUC. Reverting changes.
Training on augumented user 84841 49/50 current_auc = 0.8191194968553459
User 84841 AUC after training: 0.8194968553459119
User 84841 improves AUC. Keeping the model.
[2024-12-02 19:26:25.602386] start test user 46809 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:26.211374] start test user 46809 197/568 recall augumented users by random, augumented_users = [107963, 90010, 135222, 71794, 79879, 118587, 81803, 119108, 109763, 11433, 119882, 33242, 25466, 30475, 52215, 102710, 49786, 97478, 100171, 4194, 99959, 52372, 50896, 61410, 86679, 121022, 85194, 79598, 50467, 94464, 98729, 14592, 21998, 43528, 26698, 28418, 15990, 86148, 52807, 88134, 4457, 62412, 7512, 71444, 125394, 53909, 125751, 61407, 78584, 107761]
[2024-12-02 19:26:26.229626] user = 46809 Cloud 197/568
[2024-12-02 19:26:26.252871] user = 46809 Local 197/568
[2024-12-02 19:26:26.295394] user = 46809 Local+ 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:28.630604] user = 46809 MPDA- 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.506968506968507
Training on augumented user 107963 0/50 current_auc = 0.506968506968507
User 107963 AUC after training: 0.5075845075845076
User 107963 improves AUC. Keeping the model.
Training on augumented user 90010 1/50 current_auc = 0.5075845075845076
User 90010 AUC after training: 0.507045507045507
User 90010 does not improve AUC. Reverting changes.
Training on augumented user 135222 2/50 current_auc = 0.5075845075845076
User 135222 AUC after training: 0.5082005082005082
User 135222 improves AUC. Keeping the model.
Training on augumented user 71794 3/50 current_auc = 0.5082005082005082
User 71794 AUC after training: 0.5085855085855086
User 71794 improves AUC. Keeping the model.
Training on augumented user 79879 4/50 current_auc = 0.5085855085855086
User 79879 AUC after training: 0.5083545083545082
User 79879 does not improve AUC. Reverting changes.
Training on augumented user 118587 5/50 current_auc = 0.5085855085855086
User 118587 AUC after training: 0.5078925078925078
User 118587 does not improve AUC. Reverting changes.
Training on augumented user 81803 6/50 current_auc = 0.5085855085855086
User 81803 AUC after training: 0.5086625086625086
User 81803 improves AUC. Keeping the model.
Training on augumented user 119108 7/50 current_auc = 0.5086625086625086
User 119108 AUC after training: 0.508970508970509
User 119108 improves AUC. Keeping the model.
Training on augumented user 109763 8/50 current_auc = 0.508970508970509
User 109763 AUC after training: 0.5085085085085085
User 109763 does not improve AUC. Reverting changes.
Training on augumented user 11433 9/50 current_auc = 0.508970508970509
User 11433 AUC after training: 0.5084315084315084
User 11433 does not improve AUC. Reverting changes.
Training on augumented user 119882 10/50 current_auc = 0.508970508970509
User 119882 AUC after training: 0.5085085085085085
User 119882 does not improve AUC. Reverting changes.
Training on augumented user 33242 11/50 current_auc = 0.508970508970509
User 33242 AUC after training: 0.5088935088935089
User 33242 does not improve AUC. Reverting changes.
Training on augumented user 25466 12/50 current_auc = 0.508970508970509
User 25466 AUC after training: 0.5096635096635096
User 25466 improves AUC. Keeping the model.
Training on augumented user 30475 13/50 current_auc = 0.5096635096635096
User 30475 AUC after training: 0.5092015092015092
User 30475 does not improve AUC. Reverting changes.
Training on augumented user 52215 14/50 current_auc = 0.5096635096635096
User 52215 AUC after training: 0.5097405097405097
User 52215 improves AUC. Keeping the model.
Training on augumented user 102710 15/50 current_auc = 0.5097405097405097
User 102710 AUC after training: 0.5095095095095096
User 102710 does not improve AUC. Reverting changes.
Training on augumented user 49786 16/50 current_auc = 0.5097405097405097
User 49786 AUC after training: 0.5088165088165089
User 49786 does not improve AUC. Reverting changes.
Training on augumented user 97478 17/50 current_auc = 0.5097405097405097
User 97478 AUC after training: 0.5101255101255101
User 97478 improves AUC. Keeping the model.
Training on augumented user 100171 18/50 current_auc = 0.5101255101255101
User 100171 AUC after training: 0.5092785092785093
User 100171 does not improve AUC. Reverting changes.
Training on augumented user 4194 19/50 current_auc = 0.5101255101255101
User 4194 AUC after training: 0.5092015092015092
User 4194 does not improve AUC. Reverting changes.
Training on augumented user 99959 20/50 current_auc = 0.5101255101255101
User 99959 AUC after training: 0.5091245091245091
User 99959 does not improve AUC. Reverting changes.
Training on augumented user 52372 21/50 current_auc = 0.5101255101255101
User 52372 AUC after training: 0.5091245091245091
User 52372 does not improve AUC. Reverting changes.
Training on augumented user 50896 22/50 current_auc = 0.5101255101255101
User 50896 AUC after training: 0.5092785092785093
User 50896 does not improve AUC. Reverting changes.
Training on augumented user 61410 23/50 current_auc = 0.5101255101255101
User 61410 AUC after training: 0.5087395087395088
User 61410 does not improve AUC. Reverting changes.
Training on augumented user 86679 24/50 current_auc = 0.5101255101255101
User 86679 AUC after training: 0.508970508970509
User 86679 does not improve AUC. Reverting changes.
Training on augumented user 121022 25/50 current_auc = 0.5101255101255101
User 121022 AUC after training: 0.5091245091245091
User 121022 does not improve AUC. Reverting changes.
Training on augumented user 85194 26/50 current_auc = 0.5101255101255101
User 85194 AUC after training: 0.5092785092785093
User 85194 does not improve AUC. Reverting changes.
Training on augumented user 79598 27/50 current_auc = 0.5101255101255101
User 79598 AUC after training: 0.5086625086625086
User 79598 does not improve AUC. Reverting changes.
Training on augumented user 50467 28/50 current_auc = 0.5101255101255101
User 50467 AUC after training: 0.5092785092785093
User 50467 does not improve AUC. Reverting changes.
Training on augumented user 94464 29/50 current_auc = 0.5101255101255101
User 94464 AUC after training: 0.5079695079695079
User 94464 does not improve AUC. Reverting changes.
Training on augumented user 98729 30/50 current_auc = 0.5101255101255101
User 98729 AUC after training: 0.508970508970509
User 98729 does not improve AUC. Reverting changes.
Training on augumented user 14592 31/50 current_auc = 0.5101255101255101
User 14592 AUC after training: 0.5088935088935089
User 14592 does not improve AUC. Reverting changes.
Training on augumented user 21998 32/50 current_auc = 0.5101255101255101
User 21998 AUC after training: 0.5095095095095095
User 21998 does not improve AUC. Reverting changes.
Training on augumented user 43528 33/50 current_auc = 0.5101255101255101
User 43528 AUC after training: 0.5095865095865095
User 43528 does not improve AUC. Reverting changes.
Training on augumented user 26698 34/50 current_auc = 0.5101255101255101
User 26698 AUC after training: 0.5094325094325094
User 26698 does not improve AUC. Reverting changes.
Training on augumented user 28418 35/50 current_auc = 0.5101255101255101
User 28418 AUC after training: 0.5092785092785093
User 28418 does not improve AUC. Reverting changes.
Training on augumented user 15990 36/50 current_auc = 0.5101255101255101
User 15990 AUC after training: 0.5092785092785093
User 15990 does not improve AUC. Reverting changes.
Training on augumented user 86148 37/50 current_auc = 0.5101255101255101
User 86148 AUC after training: 0.5088165088165088
User 86148 does not improve AUC. Reverting changes.
Training on augumented user 52807 38/50 current_auc = 0.5101255101255101
User 52807 AUC after training: 0.5090475090475091
User 52807 does not improve AUC. Reverting changes.
Training on augumented user 88134 39/50 current_auc = 0.5101255101255101
User 88134 AUC after training: 0.5095865095865095
User 88134 does not improve AUC. Reverting changes.
Training on augumented user 4457 40/50 current_auc = 0.5101255101255101
User 4457 AUC after training: 0.5098175098175098
User 4457 does not improve AUC. Reverting changes.
Training on augumented user 62412 41/50 current_auc = 0.5101255101255101
User 62412 AUC after training: 0.5092785092785093
User 62412 does not improve AUC. Reverting changes.
Training on augumented user 7512 42/50 current_auc = 0.5101255101255101
User 7512 AUC after training: 0.5096635096635097
User 7512 does not improve AUC. Reverting changes.
Training on augumented user 71444 43/50 current_auc = 0.5101255101255101
User 71444 AUC after training: 0.5087395087395088
User 71444 does not improve AUC. Reverting changes.
Training on augumented user 125394 44/50 current_auc = 0.5101255101255101
User 125394 AUC after training: 0.5088935088935089
User 125394 does not improve AUC. Reverting changes.
Training on augumented user 53909 45/50 current_auc = 0.5101255101255101
User 53909 AUC after training: 0.5093555093555093
User 53909 does not improve AUC. Reverting changes.
Training on augumented user 125751 46/50 current_auc = 0.5101255101255101
User 125751 AUC after training: 0.5088935088935089
User 125751 does not improve AUC. Reverting changes.
Training on augumented user 61407 47/50 current_auc = 0.5101255101255101
User 61407 AUC after training: 0.5092785092785093
User 61407 does not improve AUC. Reverting changes.
Training on augumented user 78584 48/50 current_auc = 0.5101255101255101
User 78584 AUC after training: 0.5088935088935088
User 78584 does not improve AUC. Reverting changes.
Training on augumented user 107761 49/50 current_auc = 0.5101255101255101
User 107761 AUC after training: 0.5092785092785093
User 107761 does not improve AUC. Reverting changes.
[2024-12-02 19:26:55.831628] start test user 46820 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:56.275556] start test user 46820 198/568 recall augumented users by random, augumented_users = [102160, 75408, 100012, 122738, 57107, 81120, 131139, 76924, 135484, 83360, 127626, 10931, 94244, 70268, 53710, 16300, 35516, 35591, 113266, 134567, 43711, 6469, 94206, 95333, 91795, 117149, 119044, 32785, 84466, 132171, 16643, 55075, 123968, 51437, 52806, 111206, 9867, 37704, 83974, 112287, 71443, 70703, 74407, 3680, 21796, 134755, 24163, 138015, 19786, 12417]
[2024-12-02 19:26:56.291046] user = 46820 Cloud 198/568
[2024-12-02 19:26:56.302216] user = 46820 Local 198/568
[2024-12-02 19:26:56.369344] user = 46820 Local+ 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:58.606869] user = 46820 MPDA- 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5472222222222223
Training on augumented user 102160 0/50 current_auc = 0.5472222222222223
User 102160 AUC after training: 0.5472222222222223
User 102160 does not improve AUC. Reverting changes.
Training on augumented user 75408 1/50 current_auc = 0.5472222222222223
User 75408 AUC after training: 0.5477777777777777
User 75408 improves AUC. Keeping the model.
Training on augumented user 100012 2/50 current_auc = 0.5477777777777777
User 100012 AUC after training: 0.5466666666666666
User 100012 does not improve AUC. Reverting changes.
Training on augumented user 122738 3/50 current_auc = 0.5477777777777777
User 122738 AUC after training: 0.5494444444444444
User 122738 improves AUC. Keeping the model.
Training on augumented user 57107 4/50 current_auc = 0.5494444444444444
User 57107 AUC after training: 0.5466666666666666
User 57107 does not improve AUC. Reverting changes.
Training on augumented user 81120 5/50 current_auc = 0.5494444444444444
User 81120 AUC after training: 0.5472222222222222
User 81120 does not improve AUC. Reverting changes.
Training on augumented user 131139 6/50 current_auc = 0.5494444444444444
User 131139 AUC after training: 0.5494444444444444
User 131139 does not improve AUC. Reverting changes.
Training on augumented user 76924 7/50 current_auc = 0.5494444444444444
User 76924 AUC after training: 0.5483333333333333
User 76924 does not improve AUC. Reverting changes.
Training on augumented user 135484 8/50 current_auc = 0.5494444444444444
User 135484 AUC after training: 0.5461111111111111
User 135484 does not improve AUC. Reverting changes.
Training on augumented user 83360 9/50 current_auc = 0.5494444444444444
User 83360 AUC after training: 0.5472222222222223
User 83360 does not improve AUC. Reverting changes.
Training on augumented user 127626 10/50 current_auc = 0.5494444444444444
User 127626 AUC after training: 0.5494444444444444
User 127626 does not improve AUC. Reverting changes.
Training on augumented user 10931 11/50 current_auc = 0.5494444444444444
User 10931 AUC after training: 0.5472222222222223
User 10931 does not improve AUC. Reverting changes.
Training on augumented user 94244 12/50 current_auc = 0.5494444444444444
User 94244 AUC after training: 0.5483333333333333
User 94244 does not improve AUC. Reverting changes.
Training on augumented user 70268 13/50 current_auc = 0.5494444444444444
User 70268 AUC after training: 0.5472222222222223
User 70268 does not improve AUC. Reverting changes.
Training on augumented user 53710 14/50 current_auc = 0.5494444444444444
User 53710 AUC after training: 0.5483333333333333
User 53710 does not improve AUC. Reverting changes.
Training on augumented user 16300 15/50 current_auc = 0.5494444444444444
User 16300 AUC after training: 0.5472222222222223
User 16300 does not improve AUC. Reverting changes.
Training on augumented user 35516 16/50 current_auc = 0.5494444444444444
User 35516 AUC after training: 0.5494444444444444
User 35516 does not improve AUC. Reverting changes.
Training on augumented user 35591 17/50 current_auc = 0.5494444444444444
User 35591 AUC after training: 0.5494444444444444
User 35591 does not improve AUC. Reverting changes.
Training on augumented user 113266 18/50 current_auc = 0.5494444444444444
User 113266 AUC after training: 0.5494444444444444
User 113266 does not improve AUC. Reverting changes.
Training on augumented user 134567 19/50 current_auc = 0.5494444444444444
User 134567 AUC after training: 0.5488888888888889
User 134567 does not improve AUC. Reverting changes.
Training on augumented user 43711 20/50 current_auc = 0.5494444444444444
User 43711 AUC after training: 0.5483333333333333
User 43711 does not improve AUC. Reverting changes.
Training on augumented user 6469 21/50 current_auc = 0.5494444444444444
User 6469 AUC after training: 0.5494444444444444
User 6469 does not improve AUC. Reverting changes.
Training on augumented user 94206 22/50 current_auc = 0.5494444444444444
User 94206 AUC after training: 0.5494444444444444
User 94206 does not improve AUC. Reverting changes.
Training on augumented user 95333 23/50 current_auc = 0.5494444444444444
User 95333 AUC after training: 0.5494444444444444
User 95333 does not improve AUC. Reverting changes.
Training on augumented user 91795 24/50 current_auc = 0.5494444444444444
User 91795 AUC after training: 0.5449999999999999
User 91795 does not improve AUC. Reverting changes.
Training on augumented user 117149 25/50 current_auc = 0.5494444444444444
User 117149 AUC after training: 0.5494444444444444
User 117149 does not improve AUC. Reverting changes.
Training on augumented user 119044 26/50 current_auc = 0.5494444444444444
User 119044 AUC after training: 0.5483333333333333
User 119044 does not improve AUC. Reverting changes.
Training on augumented user 32785 27/50 current_auc = 0.5494444444444444
User 32785 AUC after training: 0.5494444444444444
User 32785 does not improve AUC. Reverting changes.
Training on augumented user 84466 28/50 current_auc = 0.5494444444444444
User 84466 AUC after training: 0.5472222222222223
User 84466 does not improve AUC. Reverting changes.
Training on augumented user 132171 29/50 current_auc = 0.5494444444444444
User 132171 AUC after training: 0.5494444444444444
User 132171 does not improve AUC. Reverting changes.
Training on augumented user 16643 30/50 current_auc = 0.5494444444444444
User 16643 AUC after training: 0.5472222222222223
User 16643 does not improve AUC. Reverting changes.
Training on augumented user 55075 31/50 current_auc = 0.5494444444444444
User 55075 AUC after training: 0.5494444444444444
User 55075 does not improve AUC. Reverting changes.
Training on augumented user 123968 32/50 current_auc = 0.5494444444444444
User 123968 AUC after training: 0.5483333333333333
User 123968 does not improve AUC. Reverting changes.
Training on augumented user 51437 33/50 current_auc = 0.5494444444444444
User 51437 AUC after training: 0.5483333333333333
User 51437 does not improve AUC. Reverting changes.
Training on augumented user 52806 34/50 current_auc = 0.5494444444444444
User 52806 AUC after training: 0.5483333333333333
User 52806 does not improve AUC. Reverting changes.
Training on augumented user 111206 35/50 current_auc = 0.5494444444444444
User 111206 AUC after training: 0.5461111111111111
User 111206 does not improve AUC. Reverting changes.
Training on augumented user 9867 36/50 current_auc = 0.5494444444444444
User 9867 AUC after training: 0.5494444444444444
User 9867 does not improve AUC. Reverting changes.
Training on augumented user 37704 37/50 current_auc = 0.5494444444444444
User 37704 AUC after training: 0.5494444444444444
User 37704 does not improve AUC. Reverting changes.
Training on augumented user 83974 38/50 current_auc = 0.5494444444444444
User 83974 AUC after training: 0.5494444444444444
User 83974 does not improve AUC. Reverting changes.
Training on augumented user 112287 39/50 current_auc = 0.5494444444444444
User 112287 AUC after training: 0.5494444444444444
User 112287 does not improve AUC. Reverting changes.
Training on augumented user 71443 40/50 current_auc = 0.5494444444444444
User 71443 AUC after training: 0.5494444444444444
User 71443 does not improve AUC. Reverting changes.
Training on augumented user 70703 41/50 current_auc = 0.5494444444444444
User 70703 AUC after training: 0.5494444444444444
User 70703 does not improve AUC. Reverting changes.
Training on augumented user 74407 42/50 current_auc = 0.5494444444444444
User 74407 AUC after training: 0.5472222222222223
User 74407 does not improve AUC. Reverting changes.
Training on augumented user 3680 43/50 current_auc = 0.5494444444444444
User 3680 AUC after training: 0.5483333333333333
User 3680 does not improve AUC. Reverting changes.
Training on augumented user 21796 44/50 current_auc = 0.5494444444444444
User 21796 AUC after training: 0.5483333333333333
User 21796 does not improve AUC. Reverting changes.
Training on augumented user 134755 45/50 current_auc = 0.5494444444444444
User 134755 AUC after training: 0.5494444444444444
User 134755 does not improve AUC. Reverting changes.
Training on augumented user 24163 46/50 current_auc = 0.5494444444444444
User 24163 AUC after training: 0.5483333333333333
User 24163 does not improve AUC. Reverting changes.
Training on augumented user 138015 47/50 current_auc = 0.5494444444444444
User 138015 AUC after training: 0.5472222222222223
User 138015 does not improve AUC. Reverting changes.
Training on augumented user 19786 48/50 current_auc = 0.5494444444444444
User 19786 AUC after training: 0.5494444444444444
User 19786 does not improve AUC. Reverting changes.
Training on augumented user 12417 49/50 current_auc = 0.5494444444444444
User 12417 AUC after training: 0.5494444444444444
User 12417 does not improve AUC. Reverting changes.
[2024-12-02 19:27:25.079557] start test user 46845 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:25.774148] start test user 46845 199/568 recall augumented users by random, augumented_users = [116376, 125006, 3537, 116713, 27624, 2442, 90483, 125871, 43797, 54694, 16295, 29946, 105962, 135406, 75448, 64105, 62530, 132679, 9113, 113707, 61637, 28629, 35518, 37261, 2660, 41353, 80754, 103245, 132868, 104799, 103802, 20691, 83845, 96561, 77669, 79329, 109014, 127099, 13116, 5922, 6895, 134612, 84714, 100113, 123191, 92118, 136561, 58590, 68417, 121564]
[2024-12-02 19:27:25.795721] user = 46845 Cloud 199/568
[2024-12-02 19:27:25.842405] user = 46845 Local 199/568
[2024-12-02 19:27:25.940545] user = 46845 Local+ 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:28.935361] user = 46845 MPDA- 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5437143483984204
Training on augumented user 116376 0/50 current_auc = 0.5437143483984204
User 116376 AUC after training: 0.5417946467749012
User 116376 does not improve AUC. Reverting changes.
Training on augumented user 125006 1/50 current_auc = 0.5437143483984204
User 125006 AUC after training: 0.5438788942518649
User 125006 improves AUC. Keeping the model.
Training on augumented user 3537 2/50 current_auc = 0.5438788942518649
User 3537 AUC after training: 0.5433029837648091
User 3537 does not improve AUC. Reverting changes.
Training on augumented user 116713 3/50 current_auc = 0.5438788942518649
User 116713 AUC after training: 0.5440434401053094
User 116713 improves AUC. Keeping the model.
Training on augumented user 27624 4/50 current_auc = 0.5440434401053094
User 27624 AUC after training: 0.5433852566915315
User 27624 does not improve AUC. Reverting changes.
Training on augumented user 2442 5/50 current_auc = 0.5440434401053094
User 2442 AUC after training: 0.54382404563405
User 2442 does not improve AUC. Reverting changes.
Training on augumented user 90483 6/50 current_auc = 0.5440434401053094
User 90483 AUC after training: 0.5446467749012724
User 90483 improves AUC. Keeping the model.
Training on augumented user 125871 7/50 current_auc = 0.5446467749012724
User 125871 AUC after training: 0.5442079859587539
User 125871 does not improve AUC. Reverting changes.
Training on augumented user 43797 8/50 current_auc = 0.5446467749012724
User 43797 AUC after training: 0.5439611671785871
User 43797 does not improve AUC. Reverting changes.
Training on augumented user 54694 9/50 current_auc = 0.5446467749012724
User 54694 AUC after training: 0.5448661693725317
User 54694 improves AUC. Keeping the model.
Training on augumented user 16295 10/50 current_auc = 0.5448661693725317
User 16295 AUC after training: 0.5446193505923651
User 16295 does not improve AUC. Reverting changes.
Training on augumented user 29946 11/50 current_auc = 0.5448661693725317
User 29946 AUC after training: 0.5444273804300132
User 29946 does not improve AUC. Reverting changes.
Training on augumented user 105962 12/50 current_auc = 0.5448661693725317
User 105962 AUC after training: 0.5438788942518649
User 105962 does not improve AUC. Reverting changes.
Training on augumented user 135406 13/50 current_auc = 0.5448661693725317
User 135406 AUC after training: 0.5445370776656427
User 135406 does not improve AUC. Reverting changes.
Training on augumented user 75448 14/50 current_auc = 0.5448661693725317
User 75448 AUC after training: 0.5459082931110135
User 75448 improves AUC. Keeping the model.
Training on augumented user 64105 15/50 current_auc = 0.5459082931110135
User 64105 AUC after training: 0.5459905660377358
User 64105 improves AUC. Keeping the model.
Training on augumented user 62530 16/50 current_auc = 0.5459905660377358
User 62530 AUC after training: 0.5462099605089952
User 62530 improves AUC. Keeping the model.
Training on augumented user 132679 17/50 current_auc = 0.5462099605089952
User 132679 AUC after training: 0.5453049583150504
User 132679 does not improve AUC. Reverting changes.
Training on augumented user 9113 18/50 current_auc = 0.5462099605089952
User 9113 AUC after training: 0.5458534444931988
User 9113 does not improve AUC. Reverting changes.
Training on augumented user 113707 19/50 current_auc = 0.5462099605089952
User 113707 AUC after training: 0.5459082931110136
User 113707 does not improve AUC. Reverting changes.
Training on augumented user 61637 20/50 current_auc = 0.5462099605089952
User 61637 AUC after training: 0.5455517770952172
User 61637 does not improve AUC. Reverting changes.
Training on augumented user 28629 21/50 current_auc = 0.5462099605089952
User 28629 AUC after training: 0.54541465555068
User 28629 does not improve AUC. Reverting changes.
Training on augumented user 35518 22/50 current_auc = 0.5462099605089952
User 35518 AUC after training: 0.5461825362000877
User 35518 does not improve AUC. Reverting changes.
Training on augumented user 37261 23/50 current_auc = 0.5462099605089952
User 37261 AUC after training: 0.5453598069328653
User 37261 does not improve AUC. Reverting changes.
Training on augumented user 2660 24/50 current_auc = 0.5462099605089952
User 2660 AUC after training: 0.5458808688021062
User 2660 does not improve AUC. Reverting changes.
Training on augumented user 41353 25/50 current_auc = 0.5462099605089952
User 41353 AUC after training: 0.5459082931110136
User 41353 does not improve AUC. Reverting changes.
Training on augumented user 80754 26/50 current_auc = 0.5462099605089952
User 80754 AUC after training: 0.5460454146555507
User 80754 does not improve AUC. Reverting changes.
Training on augumented user 103245 27/50 current_auc = 0.5462099605089952
User 103245 AUC after training: 0.54626480912681
User 103245 improves AUC. Keeping the model.
Training on augumented user 132868 28/50 current_auc = 0.54626480912681
User 132868 AUC after training: 0.5458808688021062
User 132868 does not improve AUC. Reverting changes.
Training on augumented user 104799 29/50 current_auc = 0.54626480912681
User 104799 AUC after training: 0.5448661693725317
User 104799 does not improve AUC. Reverting changes.
Training on augumented user 103802 30/50 current_auc = 0.54626480912681
User 103802 AUC after training: 0.5463745063624397
User 103802 improves AUC. Keeping the model.
Training on augumented user 20691 31/50 current_auc = 0.5463745063624397
User 20691 AUC after training: 0.5460454146555507
User 20691 does not improve AUC. Reverting changes.
Training on augumented user 83845 32/50 current_auc = 0.5463745063624397
User 83845 AUC after training: 0.5460454146555507
User 83845 does not improve AUC. Reverting changes.
Training on augumented user 96561 33/50 current_auc = 0.5463745063624397
User 96561 AUC after training: 0.54626480912681
User 96561 does not improve AUC. Reverting changes.
Training on augumented user 77669 34/50 current_auc = 0.5463745063624397
User 77669 AUC after training: 0.5463196577446249
User 77669 does not improve AUC. Reverting changes.
Training on augumented user 79329 35/50 current_auc = 0.5463745063624397
User 79329 AUC after training: 0.5459905660377358
User 79329 does not improve AUC. Reverting changes.
Training on augumented user 109014 36/50 current_auc = 0.5463745063624397
User 109014 AUC after training: 0.5459631417288284
User 109014 does not improve AUC. Reverting changes.
Training on augumented user 127099 37/50 current_auc = 0.5463745063624397
User 127099 AUC after training: 0.5458808688021062
User 127099 does not improve AUC. Reverting changes.
Training on augumented user 13116 38/50 current_auc = 0.5463745063624397
User 13116 AUC after training: 0.5458260201842913
User 13116 does not improve AUC. Reverting changes.
Training on augumented user 5922 39/50 current_auc = 0.5463745063624397
User 5922 AUC after training: 0.5459631417288284
User 5922 does not improve AUC. Reverting changes.
Training on augumented user 6895 40/50 current_auc = 0.5463745063624397
User 6895 AUC after training: 0.5463196577446249
User 6895 does not improve AUC. Reverting changes.
Training on augumented user 134612 41/50 current_auc = 0.5463745063624397
User 134612 AUC after training: 0.5461276875822729
User 134612 does not improve AUC. Reverting changes.
Training on augumented user 84714 42/50 current_auc = 0.5463745063624397
User 84714 AUC after training: 0.5455792014041245
User 84714 does not improve AUC. Reverting changes.
Training on augumented user 100113 43/50 current_auc = 0.5463745063624397
User 100113 AUC after training: 0.5456888986397542
User 100113 does not improve AUC. Reverting changes.
Training on augumented user 123191 44/50 current_auc = 0.5463745063624397
User 123191 AUC after training: 0.545003290917069
User 123191 does not improve AUC. Reverting changes.
Training on augumented user 92118 45/50 current_auc = 0.5463745063624397
User 92118 AUC after training: 0.5455792014041245
User 92118 does not improve AUC. Reverting changes.
Training on augumented user 136561 46/50 current_auc = 0.5463745063624397
User 136561 AUC after training: 0.5463196577446249
User 136561 does not improve AUC. Reverting changes.
Training on augumented user 58590 47/50 current_auc = 0.5463745063624397
User 58590 AUC after training: 0.5454146555506801
User 58590 does not improve AUC. Reverting changes.
Training on augumented user 68417 48/50 current_auc = 0.5463745063624397
User 68417 AUC after training: 0.545606625713032
User 68417 does not improve AUC. Reverting changes.
Training on augumented user 121564 49/50 current_auc = 0.5463745063624397
User 121564 AUC after training: 0.546072838964458
User 121564 does not improve AUC. Reverting changes.
[2024-12-02 19:28:00.618855] start test user 46880 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:01.356384] start test user 46880 200/568 recall augumented users by random, augumented_users = [36000, 84524, 128463, 128436, 87839, 70926, 101507, 37907, 98895, 128574, 96363, 78507, 2633, 131988, 87320, 33754, 82118, 19111, 118358, 5179, 117666, 3543, 44829, 14720, 21690, 1594, 120541, 99147, 64522, 116531, 94446, 43971, 122762, 109425, 40253, 93781, 53761, 111202, 70961, 42243, 52187, 7567, 113053, 67662, 54551, 31084, 16585, 76660, 64169, 11537]
[2024-12-02 19:28:01.385497] user = 46880 Cloud 200/568
[2024-12-02 19:28:01.404847] user = 46880 Local 200/568
[2024-12-02 19:28:01.614023] user = 46880 Local+ 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:04.852770] user = 46880 MPDA- 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7012522361359571
Training on augumented user 36000 0/50 current_auc = 0.7012522361359571
User 36000 AUC after training: 0.7110912343470484
User 36000 improves AUC. Keeping the model.
Training on augumented user 84524 1/50 current_auc = 0.7110912343470484
User 84524 AUC after training: 0.7048300536672629
User 84524 does not improve AUC. Reverting changes.
Training on augumented user 128463 2/50 current_auc = 0.7110912343470484
User 128463 AUC after training: 0.7075134168157424
User 128463 does not improve AUC. Reverting changes.
Training on augumented user 128436 3/50 current_auc = 0.7110912343470484
User 128436 AUC after training: 0.706618962432916
User 128436 does not improve AUC. Reverting changes.
Training on augumented user 87839 4/50 current_auc = 0.7110912343470484
User 87839 AUC after training: 0.7048300536672629
User 87839 does not improve AUC. Reverting changes.
Training on augumented user 70926 5/50 current_auc = 0.7110912343470484
User 70926 AUC after training: 0.706618962432916
User 70926 does not improve AUC. Reverting changes.
Training on augumented user 101507 6/50 current_auc = 0.7110912343470484
User 101507 AUC after training: 0.7093023255813953
User 101507 does not improve AUC. Reverting changes.
Training on augumented user 37907 7/50 current_auc = 0.7110912343470484
User 37907 AUC after training: 0.7057245080500893
User 37907 does not improve AUC. Reverting changes.
Training on augumented user 98895 8/50 current_auc = 0.7110912343470484
User 98895 AUC after training: 0.7075134168157424
User 98895 does not improve AUC. Reverting changes.
Training on augumented user 128574 9/50 current_auc = 0.7110912343470484
User 128574 AUC after training: 0.7066189624329159
User 128574 does not improve AUC. Reverting changes.
Training on augumented user 96363 10/50 current_auc = 0.7110912343470484
User 96363 AUC after training: 0.7075134168157424
User 96363 does not improve AUC. Reverting changes.
Training on augumented user 78507 11/50 current_auc = 0.7110912343470484
User 78507 AUC after training: 0.7057245080500895
User 78507 does not improve AUC. Reverting changes.
Training on augumented user 2633 12/50 current_auc = 0.7110912343470484
User 2633 AUC after training: 0.7057245080500895
User 2633 does not improve AUC. Reverting changes.
Training on augumented user 131988 13/50 current_auc = 0.7110912343470484
User 131988 AUC after training: 0.7110912343470482
User 131988 does not improve AUC. Reverting changes.
Training on augumented user 87320 14/50 current_auc = 0.7110912343470484
User 87320 AUC after training: 0.7075134168157424
User 87320 does not improve AUC. Reverting changes.
Training on augumented user 33754 15/50 current_auc = 0.7110912343470484
User 33754 AUC after training: 0.7075134168157424
User 33754 does not improve AUC. Reverting changes.
Training on augumented user 82118 16/50 current_auc = 0.7110912343470484
User 82118 AUC after training: 0.7075134168157424
User 82118 does not improve AUC. Reverting changes.
Training on augumented user 19111 17/50 current_auc = 0.7110912343470484
User 19111 AUC after training: 0.7093023255813953
User 19111 does not improve AUC. Reverting changes.
Training on augumented user 118358 18/50 current_auc = 0.7110912343470484
User 118358 AUC after training: 0.7093023255813953
User 118358 does not improve AUC. Reverting changes.
Training on augumented user 5179 19/50 current_auc = 0.7110912343470484
User 5179 AUC after training: 0.7110912343470484
User 5179 does not improve AUC. Reverting changes.
Training on augumented user 117666 20/50 current_auc = 0.7110912343470484
User 117666 AUC after training: 0.7075134168157424
User 117666 does not improve AUC. Reverting changes.
Training on augumented user 3543 21/50 current_auc = 0.7110912343470484
User 3543 AUC after training: 0.7119856887298748
User 3543 improves AUC. Keeping the model.
Training on augumented user 44829 22/50 current_auc = 0.7119856887298748
User 44829 AUC after training: 0.7110912343470484
User 44829 does not improve AUC. Reverting changes.
Training on augumented user 14720 23/50 current_auc = 0.7119856887298748
User 14720 AUC after training: 0.7021466905187835
User 14720 does not improve AUC. Reverting changes.
Training on augumented user 21690 24/50 current_auc = 0.7119856887298748
User 21690 AUC after training: 0.7021466905187835
User 21690 does not improve AUC. Reverting changes.
Training on augumented user 1594 25/50 current_auc = 0.7119856887298748
User 1594 AUC after training: 0.7101967799642218
User 1594 does not improve AUC. Reverting changes.
Training on augumented user 120541 26/50 current_auc = 0.7119856887298748
User 120541 AUC after training: 0.7084078711985689
User 120541 does not improve AUC. Reverting changes.
Training on augumented user 99147 27/50 current_auc = 0.7119856887298748
User 99147 AUC after training: 0.7093023255813953
User 99147 does not improve AUC. Reverting changes.
Training on augumented user 64522 28/50 current_auc = 0.7119856887298748
User 64522 AUC after training: 0.7039355992844365
User 64522 does not improve AUC. Reverting changes.
Training on augumented user 116531 29/50 current_auc = 0.7119856887298748
User 116531 AUC after training: 0.706618962432916
User 116531 does not improve AUC. Reverting changes.
Training on augumented user 94446 30/50 current_auc = 0.7119856887298748
User 94446 AUC after training: 0.7048300536672629
User 94446 does not improve AUC. Reverting changes.
Training on augumented user 43971 31/50 current_auc = 0.7119856887298748
User 43971 AUC after training: 0.7128801431127012
User 43971 improves AUC. Keeping the model.
Training on augumented user 122762 32/50 current_auc = 0.7128801431127012
User 122762 AUC after training: 0.7110912343470484
User 122762 does not improve AUC. Reverting changes.
Training on augumented user 109425 33/50 current_auc = 0.7128801431127012
User 109425 AUC after training: 0.7128801431127012
User 109425 does not improve AUC. Reverting changes.
Training on augumented user 40253 34/50 current_auc = 0.7128801431127012
User 40253 AUC after training: 0.7119856887298748
User 40253 does not improve AUC. Reverting changes.
Training on augumented user 93781 35/50 current_auc = 0.7128801431127012
User 93781 AUC after training: 0.7110912343470484
User 93781 does not improve AUC. Reverting changes.
Training on augumented user 53761 36/50 current_auc = 0.7128801431127012
User 53761 AUC after training: 0.7084078711985689
User 53761 does not improve AUC. Reverting changes.
Training on augumented user 111202 37/50 current_auc = 0.7128801431127012
User 111202 AUC after training: 0.7119856887298748
User 111202 does not improve AUC. Reverting changes.
Training on augumented user 70961 38/50 current_auc = 0.7128801431127012
User 70961 AUC after training: 0.7084078711985689
User 70961 does not improve AUC. Reverting changes.
Training on augumented user 42243 39/50 current_auc = 0.7128801431127012
User 42243 AUC after training: 0.7057245080500895
User 42243 does not improve AUC. Reverting changes.
Training on augumented user 52187 40/50 current_auc = 0.7128801431127012
User 52187 AUC after training: 0.7093023255813953
User 52187 does not improve AUC. Reverting changes.
Training on augumented user 7567 41/50 current_auc = 0.7128801431127012
User 7567 AUC after training: 0.7119856887298748
User 7567 does not improve AUC. Reverting changes.
Training on augumented user 113053 42/50 current_auc = 0.7128801431127012
User 113053 AUC after training: 0.7137745974955276
User 113053 improves AUC. Keeping the model.
Training on augumented user 67662 43/50 current_auc = 0.7137745974955276
User 67662 AUC after training: 0.7137745974955276
User 67662 does not improve AUC. Reverting changes.
Training on augumented user 54551 44/50 current_auc = 0.7137745974955276
User 54551 AUC after training: 0.7128801431127012
User 54551 does not improve AUC. Reverting changes.
Training on augumented user 31084 45/50 current_auc = 0.7137745974955276
User 31084 AUC after training: 0.7137745974955276
User 31084 does not improve AUC. Reverting changes.
Training on augumented user 16585 46/50 current_auc = 0.7137745974955276
User 16585 AUC after training: 0.7101967799642218
User 16585 does not improve AUC. Reverting changes.
Training on augumented user 76660 47/50 current_auc = 0.7137745974955276
User 76660 AUC after training: 0.7182468694096601
User 76660 improves AUC. Keeping the model.
Training on augumented user 64169 48/50 current_auc = 0.7182468694096601
User 64169 AUC after training: 0.7173524150268337
User 64169 does not improve AUC. Reverting changes.
Training on augumented user 11537 49/50 current_auc = 0.7182468694096601
User 11537 AUC after training: 0.7155635062611807
User 11537 does not improve AUC. Reverting changes.
[2024-12-02 19:28:35.850628] start test user 46929 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:36.409499] start test user 46929 201/568 recall augumented users by random, augumented_users = [70298, 74974, 9972, 44824, 66634, 1117, 27054, 76397, 25929, 7909, 68902, 97016, 34038, 11141, 31646, 5401, 52677, 118515, 11018, 134817, 132651, 115417, 78165, 134993, 45690, 11036, 51914, 98148, 117110, 52490, 4967, 897, 30310, 60587, 32610, 35286, 133210, 5033, 81418, 10810, 116632, 17955, 60190, 112395, 30811, 118973, 124106, 51098, 732, 118421]
[2024-12-02 19:28:36.426401] user = 46929 Cloud 201/568
[2024-12-02 19:28:36.455797] user = 46929 Local 201/568
[2024-12-02 19:28:36.575491] user = 46929 Local+ 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:39.359472] user = 46929 MPDA- 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8641196013289036
Training on augumented user 70298 0/50 current_auc = 0.8641196013289036
User 70298 AUC after training: 0.863579734219269
User 70298 does not improve AUC. Reverting changes.
Training on augumented user 74974 1/50 current_auc = 0.8641196013289036
User 74974 AUC after training: 0.8642441860465117
User 74974 improves AUC. Keeping the model.
Training on augumented user 9972 2/50 current_auc = 0.8642441860465117
User 9972 AUC after training: 0.8646179401993356
User 9972 improves AUC. Keeping the model.
Training on augumented user 44824 3/50 current_auc = 0.8646179401993356
User 44824 AUC after training: 0.864078073089701
User 44824 does not improve AUC. Reverting changes.
Training on augumented user 66634 4/50 current_auc = 0.8646179401993356
User 66634 AUC after training: 0.8646179401993356
User 66634 does not improve AUC. Reverting changes.
Training on augumented user 1117 5/50 current_auc = 0.8646179401993356
User 1117 AUC after training: 0.8646594684385381
User 1117 improves AUC. Keeping the model.
Training on augumented user 27054 6/50 current_auc = 0.8646594684385381
User 27054 AUC after training: 0.8628737541528239
User 27054 does not improve AUC. Reverting changes.
Training on augumented user 76397 7/50 current_auc = 0.8646594684385381
User 76397 AUC after training: 0.8642857142857143
User 76397 does not improve AUC. Reverting changes.
Training on augumented user 25929 8/50 current_auc = 0.8646594684385381
User 25929 AUC after training: 0.8649916943521595
User 25929 improves AUC. Keeping the model.
Training on augumented user 7909 9/50 current_auc = 0.8649916943521595
User 7909 AUC after training: 0.8653654485049834
User 7909 improves AUC. Keeping the model.
Training on augumented user 68902 10/50 current_auc = 0.8653654485049834
User 68902 AUC after training: 0.8651993355481727
User 68902 does not improve AUC. Reverting changes.
Training on augumented user 97016 11/50 current_auc = 0.8653654485049834
User 97016 AUC after training: 0.8647840531561461
User 97016 does not improve AUC. Reverting changes.
Training on augumented user 34038 12/50 current_auc = 0.8653654485049834
User 34038 AUC after training: 0.8656146179401993
User 34038 improves AUC. Keeping the model.
Training on augumented user 11141 13/50 current_auc = 0.8656146179401993
User 11141 AUC after training: 0.8656146179401993
User 11141 does not improve AUC. Reverting changes.
Training on augumented user 31646 14/50 current_auc = 0.8656146179401993
User 31646 AUC after training: 0.8659053156146179
User 31646 improves AUC. Keeping the model.
Training on augumented user 5401 15/50 current_auc = 0.8659053156146179
User 5401 AUC after training: 0.8656146179401993
User 5401 does not improve AUC. Reverting changes.
Training on augumented user 52677 16/50 current_auc = 0.8659053156146179
User 52677 AUC after training: 0.86578073089701
User 52677 does not improve AUC. Reverting changes.
Training on augumented user 118515 17/50 current_auc = 0.8659053156146179
User 118515 AUC after training: 0.8664867109634551
User 118515 improves AUC. Keeping the model.
Training on augumented user 11018 18/50 current_auc = 0.8664867109634551
User 11018 AUC after training: 0.8661960132890365
User 11018 does not improve AUC. Reverting changes.
Training on augumented user 134817 19/50 current_auc = 0.8664867109634551
User 134817 AUC after training: 0.86578073089701
User 134817 does not improve AUC. Reverting changes.
Training on augumented user 132651 20/50 current_auc = 0.8664867109634551
User 132651 AUC after training: 0.8659468438538206
User 132651 does not improve AUC. Reverting changes.
Training on augumented user 115417 21/50 current_auc = 0.8664867109634551
User 115417 AUC after training: 0.8654485049833887
User 115417 does not improve AUC. Reverting changes.
Training on augumented user 78165 22/50 current_auc = 0.8664867109634551
User 78165 AUC after training: 0.866860465116279
User 78165 improves AUC. Keeping the model.
Training on augumented user 134993 23/50 current_auc = 0.866860465116279
User 134993 AUC after training: 0.866735880398671
User 134993 does not improve AUC. Reverting changes.
Training on augumented user 45690 24/50 current_auc = 0.866860465116279
User 45690 AUC after training: 0.8669850498338871
User 45690 improves AUC. Keeping the model.
Training on augumented user 11036 25/50 current_auc = 0.8669850498338871
User 11036 AUC after training: 0.8661544850498338
User 11036 does not improve AUC. Reverting changes.
Training on augumented user 51914 26/50 current_auc = 0.8669850498338871
User 51914 AUC after training: 0.8659468438538206
User 51914 does not improve AUC. Reverting changes.
Training on augumented user 98148 27/50 current_auc = 0.8669850498338871
User 98148 AUC after training: 0.8664867109634552
User 98148 does not improve AUC. Reverting changes.
Training on augumented user 117110 28/50 current_auc = 0.8669850498338871
User 117110 AUC after training: 0.8665282392026579
User 117110 does not improve AUC. Reverting changes.
Training on augumented user 52490 29/50 current_auc = 0.8669850498338871
User 52490 AUC after training: 0.866860465116279
User 52490 does not improve AUC. Reverting changes.
Training on augumented user 4967 30/50 current_auc = 0.8669850498338871
User 4967 AUC after training: 0.8668189368770765
User 4967 does not improve AUC. Reverting changes.
Training on augumented user 897 31/50 current_auc = 0.8669850498338871
User 897 AUC after training: 0.8664451827242524
User 897 does not improve AUC. Reverting changes.
Training on augumented user 30310 32/50 current_auc = 0.8669850498338871
User 30310 AUC after training: 0.8664036544850497
User 30310 does not improve AUC. Reverting changes.
Training on augumented user 60587 33/50 current_auc = 0.8669850498338871
User 60587 AUC after training: 0.8659053156146179
User 60587 does not improve AUC. Reverting changes.
Training on augumented user 32610 34/50 current_auc = 0.8669850498338871
User 32610 AUC after training: 0.8666528239202659
User 32610 does not improve AUC. Reverting changes.
Training on augumented user 35286 35/50 current_auc = 0.8669850498338871
User 35286 AUC after training: 0.8666943521594684
User 35286 does not improve AUC. Reverting changes.
Training on augumented user 133210 36/50 current_auc = 0.8669850498338871
User 133210 AUC after training: 0.8672757475083056
User 133210 improves AUC. Keeping the model.
Training on augumented user 5033 37/50 current_auc = 0.8672757475083056
User 5033 AUC after training: 0.8667774086378738
User 5033 does not improve AUC. Reverting changes.
Training on augumented user 81418 38/50 current_auc = 0.8672757475083056
User 81418 AUC after training: 0.8666112956810632
User 81418 does not improve AUC. Reverting changes.
Training on augumented user 10810 39/50 current_auc = 0.8672757475083056
User 10810 AUC after training: 0.8664036544850499
User 10810 does not improve AUC. Reverting changes.
Training on augumented user 116632 40/50 current_auc = 0.8672757475083056
User 116632 AUC after training: 0.86578073089701
User 116632 does not improve AUC. Reverting changes.
Training on augumented user 17955 41/50 current_auc = 0.8672757475083056
User 17955 AUC after training: 0.8671926910299003
User 17955 does not improve AUC. Reverting changes.
Training on augumented user 60190 42/50 current_auc = 0.8672757475083056
User 60190 AUC after training: 0.8672342192691029
User 60190 does not improve AUC. Reverting changes.
Training on augumented user 112395 43/50 current_auc = 0.8672757475083056
User 112395 AUC after training: 0.8648255813953488
User 112395 does not improve AUC. Reverting changes.
Training on augumented user 30811 44/50 current_auc = 0.8672757475083056
User 30811 AUC after training: 0.8664451827242525
User 30811 does not improve AUC. Reverting changes.
Training on augumented user 118973 45/50 current_auc = 0.8672757475083056
User 118973 AUC after training: 0.8671926910299003
User 118973 does not improve AUC. Reverting changes.
Training on augumented user 124106 46/50 current_auc = 0.8672757475083056
User 124106 AUC after training: 0.866735880398671
User 124106 does not improve AUC. Reverting changes.
Training on augumented user 51098 47/50 current_auc = 0.8672757475083056
User 51098 AUC after training: 0.8664867109634551
User 51098 does not improve AUC. Reverting changes.
Training on augumented user 732 48/50 current_auc = 0.8672757475083056
User 732 AUC after training: 0.8669019933554818
User 732 does not improve AUC. Reverting changes.
Training on augumented user 118421 49/50 current_auc = 0.8672757475083056
User 118421 AUC after training: 0.8667358803986711
User 118421 does not improve AUC. Reverting changes.
[2024-12-02 19:29:11.229024] start test user 46974 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:11.638663] start test user 46974 202/568 recall augumented users by random, augumented_users = [60501, 7136, 64731, 89801, 35192, 107689, 88879, 97927, 40702, 22095, 63150, 103685, 26350, 1280, 2332, 48629, 81432, 125346, 30362, 137041, 4837, 104914, 85585, 80285, 25193, 89871, 4575, 79191, 70980, 114011, 49457, 68167, 96479, 23787, 13091, 84267, 47468, 31679, 97909, 56391, 104360, 79176, 41904, 68920, 18959, 90399, 80773, 133623, 1363, 390]
[2024-12-02 19:29:11.653870] user = 46974 Cloud 202/568
[2024-12-02 19:29:11.667030] user = 46974 Local 202/568
[2024-12-02 19:29:11.704487] user = 46974 Local+ 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:14.127752] user = 46974 MPDA- 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.65
Training on augumented user 60501 0/50 current_auc = 0.65
User 60501 AUC after training: 0.6375
User 60501 does not improve AUC. Reverting changes.
Training on augumented user 7136 1/50 current_auc = 0.65
User 7136 AUC after training: 0.6375
User 7136 does not improve AUC. Reverting changes.
Training on augumented user 64731 2/50 current_auc = 0.65
User 64731 AUC after training: 0.65
User 64731 does not improve AUC. Reverting changes.
Training on augumented user 89801 3/50 current_auc = 0.65
User 89801 AUC after training: 0.65
User 89801 does not improve AUC. Reverting changes.
Training on augumented user 35192 4/50 current_auc = 0.65
User 35192 AUC after training: 0.65
User 35192 does not improve AUC. Reverting changes.
Training on augumented user 107689 5/50 current_auc = 0.65
User 107689 AUC after training: 0.65
User 107689 does not improve AUC. Reverting changes.
Training on augumented user 88879 6/50 current_auc = 0.65
User 88879 AUC after training: 0.6375
User 88879 does not improve AUC. Reverting changes.
Training on augumented user 97927 7/50 current_auc = 0.65
User 97927 AUC after training: 0.6375
User 97927 does not improve AUC. Reverting changes.
Training on augumented user 40702 8/50 current_auc = 0.65
User 40702 AUC after training: 0.6375
User 40702 does not improve AUC. Reverting changes.
Training on augumented user 22095 9/50 current_auc = 0.65
User 22095 AUC after training: 0.6375
User 22095 does not improve AUC. Reverting changes.
Training on augumented user 63150 10/50 current_auc = 0.65
User 63150 AUC after training: 0.65
User 63150 does not improve AUC. Reverting changes.
Training on augumented user 103685 11/50 current_auc = 0.65
User 103685 AUC after training: 0.6375
User 103685 does not improve AUC. Reverting changes.
Training on augumented user 26350 12/50 current_auc = 0.65
User 26350 AUC after training: 0.65
User 26350 does not improve AUC. Reverting changes.
Training on augumented user 1280 13/50 current_auc = 0.65
User 1280 AUC after training: 0.6375
User 1280 does not improve AUC. Reverting changes.
Training on augumented user 2332 14/50 current_auc = 0.65
User 2332 AUC after training: 0.6375
User 2332 does not improve AUC. Reverting changes.
Training on augumented user 48629 15/50 current_auc = 0.65
User 48629 AUC after training: 0.6375
User 48629 does not improve AUC. Reverting changes.
Training on augumented user 81432 16/50 current_auc = 0.65
User 81432 AUC after training: 0.65
User 81432 does not improve AUC. Reverting changes.
Training on augumented user 125346 17/50 current_auc = 0.65
User 125346 AUC after training: 0.65
User 125346 does not improve AUC. Reverting changes.
Training on augumented user 30362 18/50 current_auc = 0.65
User 30362 AUC after training: 0.6375
User 30362 does not improve AUC. Reverting changes.
Training on augumented user 137041 19/50 current_auc = 0.65
User 137041 AUC after training: 0.6375
User 137041 does not improve AUC. Reverting changes.
Training on augumented user 4837 20/50 current_auc = 0.65
User 4837 AUC after training: 0.6375
User 4837 does not improve AUC. Reverting changes.
Training on augumented user 104914 21/50 current_auc = 0.65
User 104914 AUC after training: 0.6375
User 104914 does not improve AUC. Reverting changes.
Training on augumented user 85585 22/50 current_auc = 0.65
User 85585 AUC after training: 0.65
User 85585 does not improve AUC. Reverting changes.
Training on augumented user 80285 23/50 current_auc = 0.65
User 80285 AUC after training: 0.65
User 80285 does not improve AUC. Reverting changes.
Training on augumented user 25193 24/50 current_auc = 0.65
User 25193 AUC after training: 0.65
User 25193 does not improve AUC. Reverting changes.
Training on augumented user 89871 25/50 current_auc = 0.65
User 89871 AUC after training: 0.65
User 89871 does not improve AUC. Reverting changes.
Training on augumented user 4575 26/50 current_auc = 0.65
User 4575 AUC after training: 0.65
User 4575 does not improve AUC. Reverting changes.
Training on augumented user 79191 27/50 current_auc = 0.65
User 79191 AUC after training: 0.6375
User 79191 does not improve AUC. Reverting changes.
Training on augumented user 70980 28/50 current_auc = 0.65
User 70980 AUC after training: 0.6375
User 70980 does not improve AUC. Reverting changes.
Training on augumented user 114011 29/50 current_auc = 0.65
User 114011 AUC after training: 0.65
User 114011 does not improve AUC. Reverting changes.
Training on augumented user 49457 30/50 current_auc = 0.65
User 49457 AUC after training: 0.6375
User 49457 does not improve AUC. Reverting changes.
Training on augumented user 68167 31/50 current_auc = 0.65
User 68167 AUC after training: 0.65
User 68167 does not improve AUC. Reverting changes.
Training on augumented user 96479 32/50 current_auc = 0.65
User 96479 AUC after training: 0.6375
User 96479 does not improve AUC. Reverting changes.
Training on augumented user 23787 33/50 current_auc = 0.65
User 23787 AUC after training: 0.65
User 23787 does not improve AUC. Reverting changes.
Training on augumented user 13091 34/50 current_auc = 0.65
User 13091 AUC after training: 0.65
User 13091 does not improve AUC. Reverting changes.
Training on augumented user 84267 35/50 current_auc = 0.65
User 84267 AUC after training: 0.65
User 84267 does not improve AUC. Reverting changes.
Training on augumented user 47468 36/50 current_auc = 0.65
User 47468 AUC after training: 0.65
User 47468 does not improve AUC. Reverting changes.
Training on augumented user 31679 37/50 current_auc = 0.65
User 31679 AUC after training: 0.65
User 31679 does not improve AUC. Reverting changes.
Training on augumented user 97909 38/50 current_auc = 0.65
User 97909 AUC after training: 0.65
User 97909 does not improve AUC. Reverting changes.
Training on augumented user 56391 39/50 current_auc = 0.65
User 56391 AUC after training: 0.6375
User 56391 does not improve AUC. Reverting changes.
Training on augumented user 104360 40/50 current_auc = 0.65
User 104360 AUC after training: 0.65
User 104360 does not improve AUC. Reverting changes.
Training on augumented user 79176 41/50 current_auc = 0.65
User 79176 AUC after training: 0.6375
User 79176 does not improve AUC. Reverting changes.
Training on augumented user 41904 42/50 current_auc = 0.65
User 41904 AUC after training: 0.65
User 41904 does not improve AUC. Reverting changes.
Training on augumented user 68920 43/50 current_auc = 0.65
User 68920 AUC after training: 0.65
User 68920 does not improve AUC. Reverting changes.
Training on augumented user 18959 44/50 current_auc = 0.65
User 18959 AUC after training: 0.65
User 18959 does not improve AUC. Reverting changes.
Training on augumented user 90399 45/50 current_auc = 0.65
User 90399 AUC after training: 0.65
User 90399 does not improve AUC. Reverting changes.
Training on augumented user 80773 46/50 current_auc = 0.65
User 80773 AUC after training: 0.6375
User 80773 does not improve AUC. Reverting changes.
Training on augumented user 133623 47/50 current_auc = 0.65
User 133623 AUC after training: 0.6375
User 133623 does not improve AUC. Reverting changes.
Training on augumented user 1363 48/50 current_auc = 0.65
User 1363 AUC after training: 0.6375
User 1363 does not improve AUC. Reverting changes.
Training on augumented user 390 49/50 current_auc = 0.65
User 390 AUC after training: 0.6375
User 390 does not improve AUC. Reverting changes.
[2024-12-02 19:29:44.002773] start test user 47031 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:44.678919] start test user 47031 203/568 recall augumented users by random, augumented_users = [84457, 63275, 98027, 108199, 3427, 108217, 96581, 133827, 38505, 132037, 95002, 23835, 127334, 63815, 73234, 126980, 20160, 100735, 82973, 26235, 98145, 39456, 18354, 82826, 58864, 28787, 88863, 31047, 50087, 98503, 118256, 6736, 123286, 81331, 124879, 104476, 131299, 103265, 53269, 89510, 44746, 37089, 55357, 76324, 108581, 12649, 89207, 46989, 67204, 10276]
[2024-12-02 19:29:44.708158] user = 47031 Cloud 203/568
[2024-12-02 19:29:44.729570] user = 47031 Local 203/568
[2024-12-02 19:29:44.788399] user = 47031 Local+ 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:47.119228] user = 47031 MPDA- 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5152941176470589
Training on augumented user 84457 0/50 current_auc = 0.5152941176470589
User 84457 AUC after training: 0.5176470588235293
User 84457 improves AUC. Keeping the model.
Training on augumented user 63275 1/50 current_auc = 0.5176470588235293
User 63275 AUC after training: 0.5129411764705882
User 63275 does not improve AUC. Reverting changes.
Training on augumented user 98027 2/50 current_auc = 0.5176470588235293
User 98027 AUC after training: 0.5011764705882353
User 98027 does not improve AUC. Reverting changes.
Training on augumented user 108199 3/50 current_auc = 0.5176470588235293
User 108199 AUC after training: 0.52
User 108199 improves AUC. Keeping the model.
Training on augumented user 3427 4/50 current_auc = 0.52
User 3427 AUC after training: 0.52
User 3427 does not improve AUC. Reverting changes.
Training on augumented user 108217 5/50 current_auc = 0.52
User 108217 AUC after training: 0.5223529411764706
User 108217 improves AUC. Keeping the model.
Training on augumented user 96581 6/50 current_auc = 0.5223529411764706
User 96581 AUC after training: 0.5223529411764706
User 96581 does not improve AUC. Reverting changes.
Training on augumented user 133827 7/50 current_auc = 0.5223529411764706
User 133827 AUC after training: 0.52
User 133827 does not improve AUC. Reverting changes.
Training on augumented user 38505 8/50 current_auc = 0.5223529411764706
User 38505 AUC after training: 0.5223529411764706
User 38505 does not improve AUC. Reverting changes.
Training on augumented user 132037 9/50 current_auc = 0.5223529411764706
User 132037 AUC after training: 0.52
User 132037 does not improve AUC. Reverting changes.
Training on augumented user 95002 10/50 current_auc = 0.5223529411764706
User 95002 AUC after training: 0.5223529411764706
User 95002 does not improve AUC. Reverting changes.
Training on augumented user 23835 11/50 current_auc = 0.5223529411764706
User 23835 AUC after training: 0.5223529411764706
User 23835 does not improve AUC. Reverting changes.
Training on augumented user 127334 12/50 current_auc = 0.5223529411764706
User 127334 AUC after training: 0.5176470588235293
User 127334 does not improve AUC. Reverting changes.
Training on augumented user 63815 13/50 current_auc = 0.5223529411764706
User 63815 AUC after training: 0.52
User 63815 does not improve AUC. Reverting changes.
Training on augumented user 73234 14/50 current_auc = 0.5223529411764706
User 73234 AUC after training: 0.5152941176470588
User 73234 does not improve AUC. Reverting changes.
Training on augumented user 126980 15/50 current_auc = 0.5223529411764706
User 126980 AUC after training: 0.52
User 126980 does not improve AUC. Reverting changes.
Training on augumented user 20160 16/50 current_auc = 0.5223529411764706
User 20160 AUC after training: 0.5129411764705882
User 20160 does not improve AUC. Reverting changes.
Training on augumented user 100735 17/50 current_auc = 0.5223529411764706
User 100735 AUC after training: 0.52
User 100735 does not improve AUC. Reverting changes.
Training on augumented user 82973 18/50 current_auc = 0.5223529411764706
User 82973 AUC after training: 0.52
User 82973 does not improve AUC. Reverting changes.
Training on augumented user 26235 19/50 current_auc = 0.5223529411764706
User 26235 AUC after training: 0.5223529411764706
User 26235 does not improve AUC. Reverting changes.
Training on augumented user 98145 20/50 current_auc = 0.5223529411764706
User 98145 AUC after training: 0.5176470588235293
User 98145 does not improve AUC. Reverting changes.
Training on augumented user 39456 21/50 current_auc = 0.5223529411764706
User 39456 AUC after training: 0.5223529411764706
User 39456 does not improve AUC. Reverting changes.
Training on augumented user 18354 22/50 current_auc = 0.5223529411764706
User 18354 AUC after training: 0.5129411764705882
User 18354 does not improve AUC. Reverting changes.
Training on augumented user 82826 23/50 current_auc = 0.5223529411764706
User 82826 AUC after training: 0.5176470588235293
User 82826 does not improve AUC. Reverting changes.
Training on augumented user 58864 24/50 current_auc = 0.5223529411764706
User 58864 AUC after training: 0.52
User 58864 does not improve AUC. Reverting changes.
Training on augumented user 28787 25/50 current_auc = 0.5223529411764706
User 28787 AUC after training: 0.5223529411764706
User 28787 does not improve AUC. Reverting changes.
Training on augumented user 88863 26/50 current_auc = 0.5223529411764706
User 88863 AUC after training: 0.5223529411764706
User 88863 does not improve AUC. Reverting changes.
Training on augumented user 31047 27/50 current_auc = 0.5223529411764706
User 31047 AUC after training: 0.5223529411764706
User 31047 does not improve AUC. Reverting changes.
Training on augumented user 50087 28/50 current_auc = 0.5223529411764706
User 50087 AUC after training: 0.5129411764705882
User 50087 does not improve AUC. Reverting changes.
Training on augumented user 98503 29/50 current_auc = 0.5223529411764706
User 98503 AUC after training: 0.5223529411764706
User 98503 does not improve AUC. Reverting changes.
Training on augumented user 118256 30/50 current_auc = 0.5223529411764706
User 118256 AUC after training: 0.5176470588235293
User 118256 does not improve AUC. Reverting changes.
Training on augumented user 6736 31/50 current_auc = 0.5223529411764706
User 6736 AUC after training: 0.5223529411764706
User 6736 does not improve AUC. Reverting changes.
Training on augumented user 123286 32/50 current_auc = 0.5223529411764706
User 123286 AUC after training: 0.52
User 123286 does not improve AUC. Reverting changes.
Training on augumented user 81331 33/50 current_auc = 0.5223529411764706
User 81331 AUC after training: 0.5129411764705882
User 81331 does not improve AUC. Reverting changes.
Training on augumented user 124879 34/50 current_auc = 0.5223529411764706
User 124879 AUC after training: 0.52
User 124879 does not improve AUC. Reverting changes.
Training on augumented user 104476 35/50 current_auc = 0.5223529411764706
User 104476 AUC after training: 0.5176470588235293
User 104476 does not improve AUC. Reverting changes.
Training on augumented user 131299 36/50 current_auc = 0.5223529411764706
User 131299 AUC after training: 0.52
User 131299 does not improve AUC. Reverting changes.
Training on augumented user 103265 37/50 current_auc = 0.5223529411764706
User 103265 AUC after training: 0.5223529411764706
User 103265 does not improve AUC. Reverting changes.
Training on augumented user 53269 38/50 current_auc = 0.5223529411764706
User 53269 AUC after training: 0.5223529411764706
User 53269 does not improve AUC. Reverting changes.
Training on augumented user 89510 39/50 current_auc = 0.5223529411764706
User 89510 AUC after training: 0.5223529411764706
User 89510 does not improve AUC. Reverting changes.
Training on augumented user 44746 40/50 current_auc = 0.5223529411764706
User 44746 AUC after training: 0.52
User 44746 does not improve AUC. Reverting changes.
Training on augumented user 37089 41/50 current_auc = 0.5223529411764706
User 37089 AUC after training: 0.5176470588235293
User 37089 does not improve AUC. Reverting changes.
Training on augumented user 55357 42/50 current_auc = 0.5223529411764706
User 55357 AUC after training: 0.5223529411764706
User 55357 does not improve AUC. Reverting changes.
Training on augumented user 76324 43/50 current_auc = 0.5223529411764706
User 76324 AUC after training: 0.5152941176470589
User 76324 does not improve AUC. Reverting changes.
Training on augumented user 108581 44/50 current_auc = 0.5223529411764706
User 108581 AUC after training: 0.5223529411764706
User 108581 does not improve AUC. Reverting changes.
Training on augumented user 12649 45/50 current_auc = 0.5223529411764706
User 12649 AUC after training: 0.5176470588235293
User 12649 does not improve AUC. Reverting changes.
Training on augumented user 89207 46/50 current_auc = 0.5223529411764706
User 89207 AUC after training: 0.5223529411764706
User 89207 does not improve AUC. Reverting changes.
Training on augumented user 46989 47/50 current_auc = 0.5223529411764706
User 46989 AUC after training: 0.5129411764705882
User 46989 does not improve AUC. Reverting changes.
Training on augumented user 67204 48/50 current_auc = 0.5223529411764706
User 67204 AUC after training: 0.5223529411764706
User 67204 does not improve AUC. Reverting changes.
Training on augumented user 10276 49/50 current_auc = 0.5223529411764706
User 10276 AUC after training: 0.5152941176470588
User 10276 does not improve AUC. Reverting changes.
[2024-12-02 19:30:18.329888] start test user 47044 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:18.962228] start test user 47044 204/568 recall augumented users by random, augumented_users = [39933, 71060, 79844, 114526, 108425, 24054, 31418, 5743, 87825, 114423, 4772, 24284, 52802, 22158, 26155, 73334, 657, 16343, 111239, 71859, 132907, 66488, 75510, 103000, 2829, 38179, 42600, 18217, 105725, 87655, 37983, 85964, 98540, 78710, 17897, 132742, 118449, 51325, 29982, 51449, 30721, 101928, 94735, 78095, 37720, 133890, 132013, 104180, 91602, 68586]
[2024-12-02 19:30:18.977872] user = 47044 Cloud 204/568
[2024-12-02 19:30:18.992596] user = 47044 Local 204/568
[2024-12-02 19:30:19.129476] user = 47044 Local+ 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:21.744714] user = 47044 MPDA- 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6554323725055432
Training on augumented user 39933 0/50 current_auc = 0.6554323725055432
User 39933 AUC after training: 0.6554323725055433
User 39933 improves AUC. Keeping the model.
Training on augumented user 71060 1/50 current_auc = 0.6554323725055433
User 71060 AUC after training: 0.6545454545454545
User 71060 does not improve AUC. Reverting changes.
Training on augumented user 79844 2/50 current_auc = 0.6554323725055433
User 79844 AUC after training: 0.6554323725055433
User 79844 does not improve AUC. Reverting changes.
Training on augumented user 114526 3/50 current_auc = 0.6554323725055433
User 114526 AUC after training: 0.6549889135254989
User 114526 does not improve AUC. Reverting changes.
Training on augumented user 108425 4/50 current_auc = 0.6554323725055433
User 108425 AUC after training: 0.6554323725055433
User 108425 does not improve AUC. Reverting changes.
Training on augumented user 24054 5/50 current_auc = 0.6554323725055433
User 24054 AUC after training: 0.6549889135254989
User 24054 does not improve AUC. Reverting changes.
Training on augumented user 31418 6/50 current_auc = 0.6554323725055433
User 31418 AUC after training: 0.6554323725055433
User 31418 does not improve AUC. Reverting changes.
Training on augumented user 5743 7/50 current_auc = 0.6554323725055433
User 5743 AUC after training: 0.658980044345898
User 5743 improves AUC. Keeping the model.
Training on augumented user 87825 8/50 current_auc = 0.658980044345898
User 87825 AUC after training: 0.6589800443458981
User 87825 improves AUC. Keeping the model.
Training on augumented user 114423 9/50 current_auc = 0.6589800443458981
User 114423 AUC after training: 0.657649667405765
User 114423 does not improve AUC. Reverting changes.
Training on augumented user 4772 10/50 current_auc = 0.6589800443458981
User 4772 AUC after training: 0.6616407982261641
User 4772 improves AUC. Keeping the model.
Training on augumented user 24284 11/50 current_auc = 0.6616407982261641
User 24284 AUC after training: 0.6611973392461198
User 24284 does not improve AUC. Reverting changes.
Training on augumented user 52802 12/50 current_auc = 0.6616407982261641
User 52802 AUC after training: 0.6629711751662971
User 52802 improves AUC. Keeping the model.
Training on augumented user 22158 13/50 current_auc = 0.6629711751662971
User 22158 AUC after training: 0.6625277161862527
User 22158 does not improve AUC. Reverting changes.
Training on augumented user 26155 14/50 current_auc = 0.6629711751662971
User 26155 AUC after training: 0.6643015521064302
User 26155 improves AUC. Keeping the model.
Training on augumented user 73334 15/50 current_auc = 0.6643015521064302
User 73334 AUC after training: 0.6647450110864745
User 73334 improves AUC. Keeping the model.
Training on augumented user 657 16/50 current_auc = 0.6647450110864745
User 657 AUC after training: 0.6643015521064302
User 657 does not improve AUC. Reverting changes.
Training on augumented user 16343 17/50 current_auc = 0.6647450110864745
User 16343 AUC after training: 0.6647450110864744
User 16343 does not improve AUC. Reverting changes.
Training on augumented user 111239 18/50 current_auc = 0.6647450110864745
User 111239 AUC after training: 0.6643015521064303
User 111239 does not improve AUC. Reverting changes.
Training on augumented user 71859 19/50 current_auc = 0.6647450110864745
User 71859 AUC after training: 0.6651884700665189
User 71859 improves AUC. Keeping the model.
Training on augumented user 132907 20/50 current_auc = 0.6651884700665189
User 132907 AUC after training: 0.6629711751662971
User 132907 does not improve AUC. Reverting changes.
Training on augumented user 66488 21/50 current_auc = 0.6651884700665189
User 66488 AUC after training: 0.6643015521064302
User 66488 does not improve AUC. Reverting changes.
Training on augumented user 75510 22/50 current_auc = 0.6651884700665189
User 75510 AUC after training: 0.6651884700665188
User 75510 does not improve AUC. Reverting changes.
Training on augumented user 103000 23/50 current_auc = 0.6651884700665189
User 103000 AUC after training: 0.6629711751662971
User 103000 does not improve AUC. Reverting changes.
Training on augumented user 2829 24/50 current_auc = 0.6651884700665189
User 2829 AUC after training: 0.6643015521064302
User 2829 does not improve AUC. Reverting changes.
Training on augumented user 38179 25/50 current_auc = 0.6651884700665189
User 38179 AUC after training: 0.664079822616408
User 38179 does not improve AUC. Reverting changes.
Training on augumented user 42600 26/50 current_auc = 0.6651884700665189
User 42600 AUC after training: 0.6629711751662972
User 42600 does not improve AUC. Reverting changes.
Training on augumented user 18217 27/50 current_auc = 0.6651884700665189
User 18217 AUC after training: 0.6625277161862528
User 18217 does not improve AUC. Reverting changes.
Training on augumented user 105725 28/50 current_auc = 0.6651884700665189
User 105725 AUC after training: 0.6656319290465632
User 105725 improves AUC. Keeping the model.
Training on augumented user 87655 29/50 current_auc = 0.6656319290465632
User 87655 AUC after training: 0.6647450110864745
User 87655 does not improve AUC. Reverting changes.
Training on augumented user 37983 30/50 current_auc = 0.6656319290465632
User 37983 AUC after training: 0.6647450110864745
User 37983 does not improve AUC. Reverting changes.
Training on augumented user 85964 31/50 current_auc = 0.6656319290465632
User 85964 AUC after training: 0.6643015521064302
User 85964 does not improve AUC. Reverting changes.
Training on augumented user 98540 32/50 current_auc = 0.6656319290465632
User 98540 AUC after training: 0.6651884700665189
User 98540 does not improve AUC. Reverting changes.
Training on augumented user 78710 33/50 current_auc = 0.6656319290465632
User 78710 AUC after training: 0.6647450110864745
User 78710 does not improve AUC. Reverting changes.
Training on augumented user 17897 34/50 current_auc = 0.6656319290465632
User 17897 AUC after training: 0.6660753880266076
User 17897 improves AUC. Keeping the model.
Training on augumented user 132742 35/50 current_auc = 0.6660753880266076
User 132742 AUC after training: 0.6647450110864745
User 132742 does not improve AUC. Reverting changes.
Training on augumented user 118449 36/50 current_auc = 0.6660753880266076
User 118449 AUC after training: 0.6629711751662972
User 118449 does not improve AUC. Reverting changes.
Training on augumented user 51325 37/50 current_auc = 0.6660753880266076
User 51325 AUC after training: 0.6656319290465632
User 51325 does not improve AUC. Reverting changes.
Training on augumented user 29982 38/50 current_auc = 0.6660753880266076
User 29982 AUC after training: 0.6651884700665188
User 29982 does not improve AUC. Reverting changes.
Training on augumented user 51449 39/50 current_auc = 0.6660753880266076
User 51449 AUC after training: 0.6647450110864745
User 51449 does not improve AUC. Reverting changes.
Training on augumented user 30721 40/50 current_auc = 0.6660753880266076
User 30721 AUC after training: 0.6647450110864745
User 30721 does not improve AUC. Reverting changes.
Training on augumented user 101928 41/50 current_auc = 0.6660753880266076
User 101928 AUC after training: 0.6647450110864745
User 101928 does not improve AUC. Reverting changes.
Training on augumented user 94735 42/50 current_auc = 0.6660753880266076
User 94735 AUC after training: 0.6656319290465632
User 94735 does not improve AUC. Reverting changes.
Training on augumented user 78095 43/50 current_auc = 0.6660753880266076
User 78095 AUC after training: 0.6643015521064302
User 78095 does not improve AUC. Reverting changes.
Training on augumented user 37720 44/50 current_auc = 0.6660753880266076
User 37720 AUC after training: 0.6665188470066519
User 37720 improves AUC. Keeping the model.
Training on augumented user 133890 45/50 current_auc = 0.6665188470066519
User 133890 AUC after training: 0.6665188470066519
User 133890 does not improve AUC. Reverting changes.
Training on augumented user 132013 46/50 current_auc = 0.6665188470066519
User 132013 AUC after training: 0.6651884700665189
User 132013 does not improve AUC. Reverting changes.
Training on augumented user 104180 47/50 current_auc = 0.6665188470066519
User 104180 AUC after training: 0.6660753880266076
User 104180 does not improve AUC. Reverting changes.
Training on augumented user 91602 48/50 current_auc = 0.6665188470066519
User 91602 AUC after training: 0.6651884700665188
User 91602 does not improve AUC. Reverting changes.
Training on augumented user 68586 49/50 current_auc = 0.6665188470066519
User 68586 AUC after training: 0.6656319290465633
User 68586 does not improve AUC. Reverting changes.
[2024-12-02 19:30:55.810923] start test user 47053 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:56.234880] start test user 47053 205/568 recall augumented users by random, augumented_users = [113159, 125582, 132978, 79992, 72798, 64864, 46742, 89827, 123853, 81112, 41484, 7686, 59969, 129206, 72572, 67627, 129454, 115052, 112479, 7212, 90534, 32936, 112539, 107357, 129067, 16542, 90859, 80169, 63417, 57491, 51544, 126666, 47787, 103902, 123738, 110839, 38824, 103554, 87632, 90268, 109072, 25300, 31240, 127905, 46215, 17123, 117041, 14086, 58413, 51645]
[2024-12-02 19:30:56.250798] user = 47053 Cloud 205/568
[2024-12-02 19:30:56.262211] user = 47053 Local 205/568
[2024-12-02 19:30:56.418451] user = 47053 Local+ 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:59.392805] user = 47053 MPDA- 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7008797653958945
Training on augumented user 113159 0/50 current_auc = 0.7008797653958945
User 113159 AUC after training: 0.7008797653958945
User 113159 does not improve AUC. Reverting changes.
Training on augumented user 125582 1/50 current_auc = 0.7008797653958945
User 125582 AUC after training: 0.7008797653958945
User 125582 does not improve AUC. Reverting changes.
Training on augumented user 132978 2/50 current_auc = 0.7008797653958945
User 132978 AUC after training: 0.7008797653958945
User 132978 does not improve AUC. Reverting changes.
Training on augumented user 79992 3/50 current_auc = 0.7008797653958945
User 79992 AUC after training: 0.7008797653958945
User 79992 does not improve AUC. Reverting changes.
Training on augumented user 72798 4/50 current_auc = 0.7008797653958945
User 72798 AUC after training: 0.7008797653958945
User 72798 does not improve AUC. Reverting changes.
Training on augumented user 64864 5/50 current_auc = 0.7008797653958945
User 64864 AUC after training: 0.7008797653958945
User 64864 does not improve AUC. Reverting changes.
Training on augumented user 46742 6/50 current_auc = 0.7008797653958945
User 46742 AUC after training: 0.7008797653958945
User 46742 does not improve AUC. Reverting changes.
Training on augumented user 89827 7/50 current_auc = 0.7008797653958945
User 89827 AUC after training: 0.7008797653958945
User 89827 does not improve AUC. Reverting changes.
Training on augumented user 123853 8/50 current_auc = 0.7008797653958945
User 123853 AUC after training: 0.7008797653958945
User 123853 does not improve AUC. Reverting changes.
Training on augumented user 81112 9/50 current_auc = 0.7008797653958945
User 81112 AUC after training: 0.7008797653958945
User 81112 does not improve AUC. Reverting changes.
Training on augumented user 41484 10/50 current_auc = 0.7008797653958945
User 41484 AUC after training: 0.7008797653958945
User 41484 does not improve AUC. Reverting changes.
Training on augumented user 7686 11/50 current_auc = 0.7008797653958945
User 7686 AUC after training: 0.7008797653958945
User 7686 does not improve AUC. Reverting changes.
Training on augumented user 59969 12/50 current_auc = 0.7008797653958945
User 59969 AUC after training: 0.7008797653958945
User 59969 does not improve AUC. Reverting changes.
Training on augumented user 129206 13/50 current_auc = 0.7008797653958945
User 129206 AUC after training: 0.7008797653958945
User 129206 does not improve AUC. Reverting changes.
Training on augumented user 72572 14/50 current_auc = 0.7008797653958945
User 72572 AUC after training: 0.7008797653958945
User 72572 does not improve AUC. Reverting changes.
Training on augumented user 67627 15/50 current_auc = 0.7008797653958945
User 67627 AUC after training: 0.7008797653958945
User 67627 does not improve AUC. Reverting changes.
Training on augumented user 129454 16/50 current_auc = 0.7008797653958945
User 129454 AUC after training: 0.7008797653958945
User 129454 does not improve AUC. Reverting changes.
Training on augumented user 115052 17/50 current_auc = 0.7008797653958945
User 115052 AUC after training: 0.7008797653958945
User 115052 does not improve AUC. Reverting changes.
Training on augumented user 112479 18/50 current_auc = 0.7008797653958945
User 112479 AUC after training: 0.7008797653958945
User 112479 does not improve AUC. Reverting changes.
Training on augumented user 7212 19/50 current_auc = 0.7008797653958945
User 7212 AUC after training: 0.7008797653958945
User 7212 does not improve AUC. Reverting changes.
Training on augumented user 90534 20/50 current_auc = 0.7008797653958945
User 90534 AUC after training: 0.7008797653958945
User 90534 does not improve AUC. Reverting changes.
Training on augumented user 32936 21/50 current_auc = 0.7008797653958945
User 32936 AUC after training: 0.7008797653958945
User 32936 does not improve AUC. Reverting changes.
Training on augumented user 112539 22/50 current_auc = 0.7008797653958945
User 112539 AUC after training: 0.7008797653958945
User 112539 does not improve AUC. Reverting changes.
Training on augumented user 107357 23/50 current_auc = 0.7008797653958945
User 107357 AUC after training: 0.7008797653958945
User 107357 does not improve AUC. Reverting changes.
Training on augumented user 129067 24/50 current_auc = 0.7008797653958945
User 129067 AUC after training: 0.7008797653958945
User 129067 does not improve AUC. Reverting changes.
Training on augumented user 16542 25/50 current_auc = 0.7008797653958945
User 16542 AUC after training: 0.7008797653958945
User 16542 does not improve AUC. Reverting changes.
Training on augumented user 90859 26/50 current_auc = 0.7008797653958945
User 90859 AUC after training: 0.7008797653958945
User 90859 does not improve AUC. Reverting changes.
Training on augumented user 80169 27/50 current_auc = 0.7008797653958945
User 80169 AUC after training: 0.7008797653958945
User 80169 does not improve AUC. Reverting changes.
Training on augumented user 63417 28/50 current_auc = 0.7008797653958945
User 63417 AUC after training: 0.7008797653958945
User 63417 does not improve AUC. Reverting changes.
Training on augumented user 57491 29/50 current_auc = 0.7008797653958945
User 57491 AUC after training: 0.7008797653958945
User 57491 does not improve AUC. Reverting changes.
Training on augumented user 51544 30/50 current_auc = 0.7008797653958945
User 51544 AUC after training: 0.7008797653958945
User 51544 does not improve AUC. Reverting changes.
Training on augumented user 126666 31/50 current_auc = 0.7008797653958945
User 126666 AUC after training: 0.7008797653958945
User 126666 does not improve AUC. Reverting changes.
Training on augumented user 47787 32/50 current_auc = 0.7008797653958945
User 47787 AUC after training: 0.7008797653958945
User 47787 does not improve AUC. Reverting changes.
Training on augumented user 103902 33/50 current_auc = 0.7008797653958945
User 103902 AUC after training: 0.7008797653958945
User 103902 does not improve AUC. Reverting changes.
Training on augumented user 123738 34/50 current_auc = 0.7008797653958945
User 123738 AUC after training: 0.7008797653958945
User 123738 does not improve AUC. Reverting changes.
Training on augumented user 110839 35/50 current_auc = 0.7008797653958945
User 110839 AUC after training: 0.7008797653958945
User 110839 does not improve AUC. Reverting changes.
Training on augumented user 38824 36/50 current_auc = 0.7008797653958945
User 38824 AUC after training: 0.7008797653958945
User 38824 does not improve AUC. Reverting changes.
Training on augumented user 103554 37/50 current_auc = 0.7008797653958945
User 103554 AUC after training: 0.7008797653958945
User 103554 does not improve AUC. Reverting changes.
Training on augumented user 87632 38/50 current_auc = 0.7008797653958945
User 87632 AUC after training: 0.7008797653958945
User 87632 does not improve AUC. Reverting changes.
Training on augumented user 90268 39/50 current_auc = 0.7008797653958945
User 90268 AUC after training: 0.7008797653958945
User 90268 does not improve AUC. Reverting changes.
Training on augumented user 109072 40/50 current_auc = 0.7008797653958945
User 109072 AUC after training: 0.7008797653958945
User 109072 does not improve AUC. Reverting changes.
Training on augumented user 25300 41/50 current_auc = 0.7008797653958945
User 25300 AUC after training: 0.7008797653958945
User 25300 does not improve AUC. Reverting changes.
Training on augumented user 31240 42/50 current_auc = 0.7008797653958945
User 31240 AUC after training: 0.7008797653958945
User 31240 does not improve AUC. Reverting changes.
Training on augumented user 127905 43/50 current_auc = 0.7008797653958945
User 127905 AUC after training: 0.7008797653958945
User 127905 does not improve AUC. Reverting changes.
Training on augumented user 46215 44/50 current_auc = 0.7008797653958945
User 46215 AUC after training: 0.7008797653958945
User 46215 does not improve AUC. Reverting changes.
Training on augumented user 17123 45/50 current_auc = 0.7008797653958945
User 17123 AUC after training: 0.7008797653958945
User 17123 does not improve AUC. Reverting changes.
Training on augumented user 117041 46/50 current_auc = 0.7008797653958945
User 117041 AUC after training: 0.7008797653958945
User 117041 does not improve AUC. Reverting changes.
Training on augumented user 14086 47/50 current_auc = 0.7008797653958945
User 14086 AUC after training: 0.7008797653958945
User 14086 does not improve AUC. Reverting changes.
Training on augumented user 58413 48/50 current_auc = 0.7008797653958945
User 58413 AUC after training: 0.7008797653958945
User 58413 does not improve AUC. Reverting changes.
Training on augumented user 51645 49/50 current_auc = 0.7008797653958945
User 51645 AUC after training: 0.7008797653958945
User 51645 does not improve AUC. Reverting changes.
[2024-12-02 19:31:27.758031] start test user 47075 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:28.405386] start test user 47075 206/568 recall augumented users by random, augumented_users = [59871, 72423, 80076, 121420, 81328, 2881, 86819, 80199, 90706, 85206, 84886, 46821, 122526, 84030, 90760, 90057, 112002, 47855, 130824, 36919, 668, 58526, 80657, 44197, 105789, 134678, 92559, 135919, 91578, 51388, 52448, 107088, 40916, 5794, 88110, 60224, 53067, 136556, 106448, 78143, 78919, 39759, 1583, 122700, 2498, 100162, 92637, 109354, 138079, 117803]
[2024-12-02 19:31:28.428986] user = 47075 Cloud 206/568
[2024-12-02 19:31:28.445738] user = 47075 Local 206/568
[2024-12-02 19:31:28.569963] user = 47075 Local+ 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:31.006216] user = 47075 MPDA- 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8529411764705882
Training on augumented user 59871 0/50 current_auc = 0.8529411764705882
User 59871 AUC after training: 0.8529411764705882
User 59871 does not improve AUC. Reverting changes.
Training on augumented user 72423 1/50 current_auc = 0.8529411764705882
User 72423 AUC after training: 0.8529411764705882
User 72423 does not improve AUC. Reverting changes.
Training on augumented user 80076 2/50 current_auc = 0.8529411764705882
User 80076 AUC after training: 0.8529411764705882
User 80076 does not improve AUC. Reverting changes.
Training on augumented user 121420 3/50 current_auc = 0.8529411764705882
User 121420 AUC after training: 0.8529411764705882
User 121420 does not improve AUC. Reverting changes.
Training on augumented user 81328 4/50 current_auc = 0.8529411764705882
User 81328 AUC after training: 0.8529411764705882
User 81328 does not improve AUC. Reverting changes.
Training on augumented user 2881 5/50 current_auc = 0.8529411764705882
User 2881 AUC after training: 0.8529411764705882
User 2881 does not improve AUC. Reverting changes.
Training on augumented user 86819 6/50 current_auc = 0.8529411764705882
User 86819 AUC after training: 0.8529411764705882
User 86819 does not improve AUC. Reverting changes.
Training on augumented user 80199 7/50 current_auc = 0.8529411764705882
User 80199 AUC after training: 0.8529411764705882
User 80199 does not improve AUC. Reverting changes.
Training on augumented user 90706 8/50 current_auc = 0.8529411764705882
User 90706 AUC after training: 0.8529411764705882
User 90706 does not improve AUC. Reverting changes.
Training on augumented user 85206 9/50 current_auc = 0.8529411764705882
User 85206 AUC after training: 0.8529411764705882
User 85206 does not improve AUC. Reverting changes.
Training on augumented user 84886 10/50 current_auc = 0.8529411764705882
User 84886 AUC after training: 0.8487394957983193
User 84886 does not improve AUC. Reverting changes.
Training on augumented user 46821 11/50 current_auc = 0.8529411764705882
User 46821 AUC after training: 0.8487394957983193
User 46821 does not improve AUC. Reverting changes.
Training on augumented user 122526 12/50 current_auc = 0.8529411764705882
User 122526 AUC after training: 0.8529411764705882
User 122526 does not improve AUC. Reverting changes.
Training on augumented user 84030 13/50 current_auc = 0.8529411764705882
User 84030 AUC after training: 0.8487394957983193
User 84030 does not improve AUC. Reverting changes.
Training on augumented user 90760 14/50 current_auc = 0.8529411764705882
User 90760 AUC after training: 0.8529411764705882
User 90760 does not improve AUC. Reverting changes.
Training on augumented user 90057 15/50 current_auc = 0.8529411764705882
User 90057 AUC after training: 0.8487394957983193
User 90057 does not improve AUC. Reverting changes.
Training on augumented user 112002 16/50 current_auc = 0.8529411764705882
User 112002 AUC after training: 0.8529411764705882
User 112002 does not improve AUC. Reverting changes.
Training on augumented user 47855 17/50 current_auc = 0.8529411764705882
User 47855 AUC after training: 0.8487394957983193
User 47855 does not improve AUC. Reverting changes.
Training on augumented user 130824 18/50 current_auc = 0.8529411764705882
User 130824 AUC after training: 0.8529411764705882
User 130824 does not improve AUC. Reverting changes.
Training on augumented user 36919 19/50 current_auc = 0.8529411764705882
User 36919 AUC after training: 0.8529411764705882
User 36919 does not improve AUC. Reverting changes.
Training on augumented user 668 20/50 current_auc = 0.8529411764705882
User 668 AUC after training: 0.8529411764705882
User 668 does not improve AUC. Reverting changes.
Training on augumented user 58526 21/50 current_auc = 0.8529411764705882
User 58526 AUC after training: 0.8529411764705882
User 58526 does not improve AUC. Reverting changes.
Training on augumented user 80657 22/50 current_auc = 0.8529411764705882
User 80657 AUC after training: 0.8529411764705882
User 80657 does not improve AUC. Reverting changes.
Training on augumented user 44197 23/50 current_auc = 0.8529411764705882
User 44197 AUC after training: 0.8529411764705882
User 44197 does not improve AUC. Reverting changes.
Training on augumented user 105789 24/50 current_auc = 0.8529411764705882
User 105789 AUC after training: 0.8529411764705882
User 105789 does not improve AUC. Reverting changes.
Training on augumented user 134678 25/50 current_auc = 0.8529411764705882
User 134678 AUC after training: 0.8529411764705882
User 134678 does not improve AUC. Reverting changes.
Training on augumented user 92559 26/50 current_auc = 0.8529411764705882
User 92559 AUC after training: 0.8529411764705882
User 92559 does not improve AUC. Reverting changes.
Training on augumented user 135919 27/50 current_auc = 0.8529411764705882
User 135919 AUC after training: 0.8529411764705882
User 135919 does not improve AUC. Reverting changes.
Training on augumented user 91578 28/50 current_auc = 0.8529411764705882
User 91578 AUC after training: 0.8529411764705882
User 91578 does not improve AUC. Reverting changes.
Training on augumented user 51388 29/50 current_auc = 0.8529411764705882
User 51388 AUC after training: 0.8529411764705882
User 51388 does not improve AUC. Reverting changes.
Training on augumented user 52448 30/50 current_auc = 0.8529411764705882
User 52448 AUC after training: 0.8529411764705882
User 52448 does not improve AUC. Reverting changes.
Training on augumented user 107088 31/50 current_auc = 0.8529411764705882
User 107088 AUC after training: 0.8529411764705882
User 107088 does not improve AUC. Reverting changes.
Training on augumented user 40916 32/50 current_auc = 0.8529411764705882
User 40916 AUC after training: 0.8487394957983193
User 40916 does not improve AUC. Reverting changes.
Training on augumented user 5794 33/50 current_auc = 0.8529411764705882
User 5794 AUC after training: 0.8529411764705882
User 5794 does not improve AUC. Reverting changes.
Training on augumented user 88110 34/50 current_auc = 0.8529411764705882
User 88110 AUC after training: 0.8529411764705882
User 88110 does not improve AUC. Reverting changes.
Training on augumented user 60224 35/50 current_auc = 0.8529411764705882
User 60224 AUC after training: 0.8529411764705882
User 60224 does not improve AUC. Reverting changes.
Training on augumented user 53067 36/50 current_auc = 0.8529411764705882
User 53067 AUC after training: 0.8529411764705882
User 53067 does not improve AUC. Reverting changes.
Training on augumented user 136556 37/50 current_auc = 0.8529411764705882
User 136556 AUC after training: 0.8529411764705882
User 136556 does not improve AUC. Reverting changes.
Training on augumented user 106448 38/50 current_auc = 0.8529411764705882
User 106448 AUC after training: 0.8529411764705882
User 106448 does not improve AUC. Reverting changes.
Training on augumented user 78143 39/50 current_auc = 0.8529411764705882
User 78143 AUC after training: 0.8529411764705882
User 78143 does not improve AUC. Reverting changes.
Training on augumented user 78919 40/50 current_auc = 0.8529411764705882
User 78919 AUC after training: 0.8529411764705882
User 78919 does not improve AUC. Reverting changes.
Training on augumented user 39759 41/50 current_auc = 0.8529411764705882
User 39759 AUC after training: 0.8529411764705882
User 39759 does not improve AUC. Reverting changes.
Training on augumented user 1583 42/50 current_auc = 0.8529411764705882
User 1583 AUC after training: 0.8529411764705882
User 1583 does not improve AUC. Reverting changes.
Training on augumented user 122700 43/50 current_auc = 0.8529411764705882
User 122700 AUC after training: 0.8529411764705882
User 122700 does not improve AUC. Reverting changes.
Training on augumented user 2498 44/50 current_auc = 0.8529411764705882
User 2498 AUC after training: 0.8529411764705882
User 2498 does not improve AUC. Reverting changes.
Training on augumented user 100162 45/50 current_auc = 0.8529411764705882
User 100162 AUC after training: 0.8529411764705882
User 100162 does not improve AUC. Reverting changes.
Training on augumented user 92637 46/50 current_auc = 0.8529411764705882
User 92637 AUC after training: 0.8529411764705882
User 92637 does not improve AUC. Reverting changes.
Training on augumented user 109354 47/50 current_auc = 0.8529411764705882
User 109354 AUC after training: 0.8529411764705882
User 109354 does not improve AUC. Reverting changes.
Training on augumented user 138079 48/50 current_auc = 0.8529411764705882
User 138079 AUC after training: 0.8529411764705882
User 138079 does not improve AUC. Reverting changes.
Training on augumented user 117803 49/50 current_auc = 0.8529411764705882
User 117803 AUC after training: 0.8529411764705882
User 117803 does not improve AUC. Reverting changes.
[2024-12-02 19:32:01.305085] start test user 47148 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:02.069888] start test user 47148 207/568 recall augumented users by random, augumented_users = [2513, 90407, 53555, 102238, 25880, 133800, 101570, 126636, 12708, 132976, 9632, 85439, 128203, 7494, 117857, 94018, 72243, 20116, 112, 114722, 18466, 77699, 127123, 116305, 80388, 82250, 88869, 55323, 42467, 30413, 99362, 21145, 71421, 58025, 9200, 131731, 12573, 10529, 116402, 40065, 69556, 37277, 14229, 112313, 27854, 57884, 47643, 111601, 26479, 81993]
[2024-12-02 19:32:02.086009] user = 47148 Cloud 207/568
[2024-12-02 19:32:02.096750] user = 47148 Local 207/568
[2024-12-02 19:32:02.146308] user = 47148 Local+ 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:04.209418] user = 47148 MPDA- 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.37142857142857144
Training on augumented user 2513 0/50 current_auc = 0.37142857142857144
User 2513 AUC after training: 0.37857142857142856
User 2513 improves AUC. Keeping the model.
Training on augumented user 90407 1/50 current_auc = 0.37857142857142856
User 90407 AUC after training: 0.3857142857142857
User 90407 improves AUC. Keeping the model.
Training on augumented user 53555 2/50 current_auc = 0.3857142857142857
User 53555 AUC after training: 0.3857142857142857
User 53555 does not improve AUC. Reverting changes.
Training on augumented user 102238 3/50 current_auc = 0.3857142857142857
User 102238 AUC after training: 0.3857142857142857
User 102238 does not improve AUC. Reverting changes.
Training on augumented user 25880 4/50 current_auc = 0.3857142857142857
User 25880 AUC after training: 0.36428571428571427
User 25880 does not improve AUC. Reverting changes.
Training on augumented user 133800 5/50 current_auc = 0.3857142857142857
User 133800 AUC after training: 0.3857142857142857
User 133800 does not improve AUC. Reverting changes.
Training on augumented user 101570 6/50 current_auc = 0.3857142857142857
User 101570 AUC after training: 0.3857142857142857
User 101570 does not improve AUC. Reverting changes.
Training on augumented user 126636 7/50 current_auc = 0.3857142857142857
User 126636 AUC after training: 0.3857142857142857
User 126636 does not improve AUC. Reverting changes.
Training on augumented user 12708 8/50 current_auc = 0.3857142857142857
User 12708 AUC after training: 0.37142857142857144
User 12708 does not improve AUC. Reverting changes.
Training on augumented user 132976 9/50 current_auc = 0.3857142857142857
User 132976 AUC after training: 0.39285714285714285
User 132976 improves AUC. Keeping the model.
Training on augumented user 9632 10/50 current_auc = 0.39285714285714285
User 9632 AUC after training: 0.3857142857142857
User 9632 does not improve AUC. Reverting changes.
Training on augumented user 85439 11/50 current_auc = 0.39285714285714285
User 85439 AUC after training: 0.39285714285714285
User 85439 does not improve AUC. Reverting changes.
Training on augumented user 128203 12/50 current_auc = 0.39285714285714285
User 128203 AUC after training: 0.37857142857142856
User 128203 does not improve AUC. Reverting changes.
Training on augumented user 7494 13/50 current_auc = 0.39285714285714285
User 7494 AUC after training: 0.39285714285714285
User 7494 does not improve AUC. Reverting changes.
Training on augumented user 117857 14/50 current_auc = 0.39285714285714285
User 117857 AUC after training: 0.3857142857142857
User 117857 does not improve AUC. Reverting changes.
Training on augumented user 94018 15/50 current_auc = 0.39285714285714285
User 94018 AUC after training: 0.39285714285714285
User 94018 does not improve AUC. Reverting changes.
Training on augumented user 72243 16/50 current_auc = 0.39285714285714285
User 72243 AUC after training: 0.3857142857142857
User 72243 does not improve AUC. Reverting changes.
Training on augumented user 20116 17/50 current_auc = 0.39285714285714285
User 20116 AUC after training: 0.3857142857142857
User 20116 does not improve AUC. Reverting changes.
Training on augumented user 112 18/50 current_auc = 0.39285714285714285
User 112 AUC after training: 0.3857142857142857
User 112 does not improve AUC. Reverting changes.
Training on augumented user 114722 19/50 current_auc = 0.39285714285714285
User 114722 AUC after training: 0.3857142857142857
User 114722 does not improve AUC. Reverting changes.
Training on augumented user 18466 20/50 current_auc = 0.39285714285714285
User 18466 AUC after training: 0.3857142857142857
User 18466 does not improve AUC. Reverting changes.
Training on augumented user 77699 21/50 current_auc = 0.39285714285714285
User 77699 AUC after training: 0.3857142857142857
User 77699 does not improve AUC. Reverting changes.
Training on augumented user 127123 22/50 current_auc = 0.39285714285714285
User 127123 AUC after training: 0.3857142857142857
User 127123 does not improve AUC. Reverting changes.
Training on augumented user 116305 23/50 current_auc = 0.39285714285714285
User 116305 AUC after training: 0.3857142857142857
User 116305 does not improve AUC. Reverting changes.
Training on augumented user 80388 24/50 current_auc = 0.39285714285714285
User 80388 AUC after training: 0.3857142857142857
User 80388 does not improve AUC. Reverting changes.
Training on augumented user 82250 25/50 current_auc = 0.39285714285714285
User 82250 AUC after training: 0.3857142857142857
User 82250 does not improve AUC. Reverting changes.
Training on augumented user 88869 26/50 current_auc = 0.39285714285714285
User 88869 AUC after training: 0.39285714285714285
User 88869 does not improve AUC. Reverting changes.
Training on augumented user 55323 27/50 current_auc = 0.39285714285714285
User 55323 AUC after training: 0.3857142857142857
User 55323 does not improve AUC. Reverting changes.
Training on augumented user 42467 28/50 current_auc = 0.39285714285714285
User 42467 AUC after training: 0.3857142857142857
User 42467 does not improve AUC. Reverting changes.
Training on augumented user 30413 29/50 current_auc = 0.39285714285714285
User 30413 AUC after training: 0.39285714285714285
User 30413 does not improve AUC. Reverting changes.
Training on augumented user 99362 30/50 current_auc = 0.39285714285714285
User 99362 AUC after training: 0.39285714285714285
User 99362 does not improve AUC. Reverting changes.
Training on augumented user 21145 31/50 current_auc = 0.39285714285714285
User 21145 AUC after training: 0.4
User 21145 improves AUC. Keeping the model.
Training on augumented user 71421 32/50 current_auc = 0.4
User 71421 AUC after training: 0.4
User 71421 does not improve AUC. Reverting changes.
Training on augumented user 58025 33/50 current_auc = 0.4
User 58025 AUC after training: 0.4
User 58025 does not improve AUC. Reverting changes.
Training on augumented user 9200 34/50 current_auc = 0.4
User 9200 AUC after training: 0.4
User 9200 does not improve AUC. Reverting changes.
Training on augumented user 131731 35/50 current_auc = 0.4
User 131731 AUC after training: 0.4
User 131731 does not improve AUC. Reverting changes.
Training on augumented user 12573 36/50 current_auc = 0.4
User 12573 AUC after training: 0.4
User 12573 does not improve AUC. Reverting changes.
Training on augumented user 10529 37/50 current_auc = 0.4
User 10529 AUC after training: 0.4
User 10529 does not improve AUC. Reverting changes.
Training on augumented user 116402 38/50 current_auc = 0.4
User 116402 AUC after training: 0.39285714285714285
User 116402 does not improve AUC. Reverting changes.
Training on augumented user 40065 39/50 current_auc = 0.4
User 40065 AUC after training: 0.39285714285714285
User 40065 does not improve AUC. Reverting changes.
Training on augumented user 69556 40/50 current_auc = 0.4
User 69556 AUC after training: 0.3857142857142857
User 69556 does not improve AUC. Reverting changes.
Training on augumented user 37277 41/50 current_auc = 0.4
User 37277 AUC after training: 0.4
User 37277 does not improve AUC. Reverting changes.
Training on augumented user 14229 42/50 current_auc = 0.4
User 14229 AUC after training: 0.37857142857142856
User 14229 does not improve AUC. Reverting changes.
Training on augumented user 112313 43/50 current_auc = 0.4
User 112313 AUC after training: 0.39285714285714285
User 112313 does not improve AUC. Reverting changes.
Training on augumented user 27854 44/50 current_auc = 0.4
User 27854 AUC after training: 0.37857142857142856
User 27854 does not improve AUC. Reverting changes.
Training on augumented user 57884 45/50 current_auc = 0.4
User 57884 AUC after training: 0.4
User 57884 does not improve AUC. Reverting changes.
Training on augumented user 47643 46/50 current_auc = 0.4
User 47643 AUC after training: 0.37857142857142856
User 47643 does not improve AUC. Reverting changes.
Training on augumented user 111601 47/50 current_auc = 0.4
User 111601 AUC after training: 0.4
User 111601 does not improve AUC. Reverting changes.
Training on augumented user 26479 48/50 current_auc = 0.4
User 26479 AUC after training: 0.4
User 26479 does not improve AUC. Reverting changes.
Training on augumented user 81993 49/50 current_auc = 0.4
User 81993 AUC after training: 0.4
User 81993 does not improve AUC. Reverting changes.
[2024-12-02 19:32:35.507116] start test user 47154 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:36.076667] start test user 47154 208/568 recall augumented users by random, augumented_users = [104621, 57249, 70873, 55941, 23623, 87742, 76236, 90332, 30237, 30144, 59125, 17483, 75611, 89028, 13718, 47485, 97874, 99324, 74911, 68542, 73724, 59001, 14057, 107169, 58245, 77276, 131144, 72381, 43982, 131137, 79718, 29367, 12022, 1361, 62679, 85822, 125199, 111041, 103060, 34818, 34444, 78109, 16346, 32025, 82778, 40527, 125194, 118902, 90096, 106773]
[2024-12-02 19:32:36.093298] user = 47154 Cloud 208/568
[2024-12-02 19:32:36.150851] user = 47154 Local 208/568
[2024-12-02 19:32:36.224434] user = 47154 Local+ 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:38.470067] user = 47154 MPDA- 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7623074981065388
Training on augumented user 104621 0/50 current_auc = 0.7623074981065388
User 104621 AUC after training: 0.7618927399285894
User 104621 does not improve AUC. Reverting changes.
Training on augumented user 57249 1/50 current_auc = 0.7623074981065388
User 57249 AUC after training: 0.7620370036426587
User 57249 does not improve AUC. Reverting changes.
Training on augumented user 70873 2/50 current_auc = 0.7623074981065388
User 70873 AUC after training: 0.7621812673567281
User 70873 does not improve AUC. Reverting changes.
Training on augumented user 55941 3/50 current_auc = 0.7623074981065388
User 55941 AUC after training: 0.7623976629278321
User 55941 improves AUC. Keeping the model.
Training on augumented user 23623 4/50 current_auc = 0.7623976629278321
User 23623 AUC after training: 0.7619829047498827
User 23623 does not improve AUC. Reverting changes.
Training on augumented user 87742 5/50 current_auc = 0.7623976629278321
User 87742 AUC after training: 0.7618115915894255
User 87742 does not improve AUC. Reverting changes.
Training on augumented user 76236 6/50 current_auc = 0.7623976629278321
User 76236 AUC after training: 0.7617484762145201
User 76236 does not improve AUC. Reverting changes.
Training on augumented user 90332 7/50 current_auc = 0.7623976629278321
User 90332 AUC after training: 0.7626050420168067
User 90332 improves AUC. Keeping the model.
Training on augumented user 30237 8/50 current_auc = 0.7626050420168067
User 30237 AUC after training: 0.7628394705521694
User 30237 improves AUC. Keeping the model.
Training on augumented user 30144 9/50 current_auc = 0.7628394705521694
User 30144 AUC after training: 0.76228946514228
User 30144 does not improve AUC. Reverting changes.
Training on augumented user 59125 10/50 current_auc = 0.7628394705521694
User 59125 AUC after training: 0.7631099650160493
User 59125 improves AUC. Keeping the model.
Training on augumented user 17483 11/50 current_auc = 0.7631099650160493
User 17483 AUC after training: 0.7627312727666175
User 17483 does not improve AUC. Reverting changes.
Training on augumented user 75611 12/50 current_auc = 0.7631099650160493
User 75611 AUC after training: 0.763127997980308
User 75611 improves AUC. Keeping the model.
Training on augumented user 89028 13/50 current_auc = 0.763127997980308
User 89028 AUC after training: 0.7629296353734627
User 89028 does not improve AUC. Reverting changes.
Training on augumented user 13718 14/50 current_auc = 0.763127997980308
User 13718 AUC after training: 0.7605583005734482
User 13718 does not improve AUC. Reverting changes.
Training on augumented user 47485 15/50 current_auc = 0.763127997980308
User 47485 AUC after training: 0.7631279979803081
User 47485 improves AUC. Keeping the model.
Training on augumented user 97874 16/50 current_auc = 0.7631279979803081
User 97874 AUC after training: 0.7633083276228946
User 97874 improves AUC. Keeping the model.
Training on augumented user 99324 17/50 current_auc = 0.7633083276228946
User 99324 AUC after training: 0.762641107945324
User 99324 does not improve AUC. Reverting changes.
Training on augumented user 74911 18/50 current_auc = 0.7633083276228946
User 74911 AUC after training: 0.7633263605871532
User 74911 improves AUC. Keeping the model.
Training on augumented user 68542 19/50 current_auc = 0.7633263605871532
User 68542 AUC after training: 0.7634165254084466
User 68542 improves AUC. Keeping the model.
Training on augumented user 73724 20/50 current_auc = 0.7634165254084466
User 73724 AUC after training: 0.7634165254084466
User 73724 does not improve AUC. Reverting changes.
Training on augumented user 59001 21/50 current_auc = 0.7634165254084466
User 59001 AUC after training: 0.7632542287301186
User 59001 does not improve AUC. Reverting changes.
Training on augumented user 14057 22/50 current_auc = 0.7634165254084466
User 14057 AUC after training: 0.7634886572654813
User 14057 improves AUC. Keeping the model.
Training on augumented user 107169 23/50 current_auc = 0.7634886572654813
User 107169 AUC after training: 0.7625238936776427
User 107169 does not improve AUC. Reverting changes.
Training on augumented user 58245 24/50 current_auc = 0.7634886572654813
User 58245 AUC after training: 0.7634165254084466
User 58245 does not improve AUC. Reverting changes.
Training on augumented user 77276 25/50 current_auc = 0.7634886572654813
User 77276 AUC after training: 0.762803404623652
User 77276 does not improve AUC. Reverting changes.
Training on augumented user 131144 26/50 current_auc = 0.7634886572654813
User 131144 AUC after training: 0.7632001298373428
User 131144 does not improve AUC. Reverting changes.
Training on augumented user 72381 27/50 current_auc = 0.7634886572654813
User 72381 AUC after training: 0.7634706243012227
User 72381 does not improve AUC. Reverting changes.
Training on augumented user 43982 28/50 current_auc = 0.7634886572654813
User 43982 AUC after training: 0.7631911133552133
User 43982 does not improve AUC. Reverting changes.
Training on augumented user 131137 29/50 current_auc = 0.7634886572654813
User 131137 AUC after training: 0.762641107945324
User 131137 does not improve AUC. Reverting changes.
Training on augumented user 79718 30/50 current_auc = 0.7634886572654813
User 79718 AUC after training: 0.7635247231939987
User 79718 improves AUC. Keeping the model.
Training on augumented user 29367 31/50 current_auc = 0.7635247231939987
User 29367 AUC after training: 0.7632452122479894
User 29367 does not improve AUC. Reverting changes.
Training on augumented user 12022 32/50 current_auc = 0.7635247231939987
User 12022 AUC after training: 0.7632722616943772
User 12022 does not improve AUC. Reverting changes.
Training on augumented user 1361 33/50 current_auc = 0.7635247231939987
User 1361 AUC after training: 0.7633353770692827
User 1361 does not improve AUC. Reverting changes.
Training on augumented user 62679 34/50 current_auc = 0.7635247231939987
User 62679 AUC after training: 0.7631279979803081
User 62679 does not improve AUC. Reverting changes.
Training on augumented user 85822 35/50 current_auc = 0.7635247231939987
User 85822 AUC after training: 0.7632993111407653
User 85822 does not improve AUC. Reverting changes.
Training on augumented user 125199 36/50 current_auc = 0.7635247231939987
User 125199 AUC after training: 0.7636509539438092
User 125199 improves AUC. Keeping the model.
Training on augumented user 111041 37/50 current_auc = 0.7636509539438092
User 111041 AUC after training: 0.7637230858008439
User 111041 improves AUC. Keeping the model.
Training on augumented user 103060 38/50 current_auc = 0.7637230858008439
User 103060 AUC after training: 0.7634345583727052
User 103060 does not improve AUC. Reverting changes.
Training on augumented user 34818 39/50 current_auc = 0.7637230858008439
User 34818 AUC after training: 0.7635157067118693
User 34818 does not improve AUC. Reverting changes.
Training on augumented user 34444 40/50 current_auc = 0.7637230858008439
User 34444 AUC after training: 0.7633083276228947
User 34444 does not improve AUC. Reverting changes.
Training on augumented user 78109 41/50 current_auc = 0.7637230858008439
User 78109 AUC after training: 0.763885382479172
User 78109 improves AUC. Keeping the model.
Training on augumented user 16346 42/50 current_auc = 0.763885382479172
User 16346 AUC after training: 0.7633534100335413
User 16346 does not improve AUC. Reverting changes.
Training on augumented user 32025 43/50 current_auc = 0.763885382479172
User 32025 AUC after training: 0.7640025967468533
User 32025 improves AUC. Keeping the model.
Training on augumented user 82778 44/50 current_auc = 0.7640025967468533
User 82778 AUC after training: 0.7638943989613013
User 82778 does not improve AUC. Reverting changes.
Training on augumented user 40527 45/50 current_auc = 0.7640025967468533
User 40527 AUC after training: 0.7637411187651026
User 40527 does not improve AUC. Reverting changes.
Training on augumented user 125194 46/50 current_auc = 0.7640025967468533
User 125194 AUC after training: 0.7640116132289826
User 125194 improves AUC. Keeping the model.
Training on augumented user 118902 47/50 current_auc = 0.7640116132289826
User 118902 AUC after training: 0.7631730803909547
User 118902 does not improve AUC. Reverting changes.
Training on augumented user 90096 48/50 current_auc = 0.7640116132289826
User 90096 AUC after training: 0.7638943989613012
User 90096 does not improve AUC. Reverting changes.
Training on augumented user 106773 49/50 current_auc = 0.7640116132289826
User 106773 AUC after training: 0.7636239044974212
User 106773 does not improve AUC. Reverting changes.
[2024-12-02 19:33:12.576017] start test user 47160 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:13.306588] start test user 47160 209/568 recall augumented users by random, augumented_users = [97093, 121737, 84906, 37295, 95349, 52843, 86678, 113952, 42791, 65234, 101917, 53231, 135621, 91179, 10338, 106089, 32798, 113155, 83523, 68283, 65605, 31696, 67652, 91110, 45941, 35315, 95884, 11302, 96852, 3116, 117086, 38905, 138350, 103867, 112990, 64782, 133092, 9296, 25999, 54695, 91201, 105981, 83429, 90528, 13919, 55676, 93113, 71211, 91258, 4040]
[2024-12-02 19:33:13.323498] user = 47160 Cloud 209/568
[2024-12-02 19:33:13.339472] user = 47160 Local 209/568
[2024-12-02 19:33:13.520413] user = 47160 Local+ 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:16.594282] user = 47160 MPDA- 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.566875
Training on augumented user 97093 0/50 current_auc = 0.566875
User 97093 AUC after training: 0.5681250000000001
User 97093 improves AUC. Keeping the model.
Training on augumented user 121737 1/50 current_auc = 0.5681250000000001
User 121737 AUC after training: 0.566875
User 121737 does not improve AUC. Reverting changes.
Training on augumented user 84906 2/50 current_auc = 0.5681250000000001
User 84906 AUC after training: 0.5687500000000001
User 84906 improves AUC. Keeping the model.
Training on augumented user 37295 3/50 current_auc = 0.5687500000000001
User 37295 AUC after training: 0.573125
User 37295 improves AUC. Keeping the model.
Training on augumented user 95349 4/50 current_auc = 0.573125
User 95349 AUC after training: 0.5725
User 95349 does not improve AUC. Reverting changes.
Training on augumented user 52843 5/50 current_auc = 0.573125
User 52843 AUC after training: 0.5700000000000001
User 52843 does not improve AUC. Reverting changes.
Training on augumented user 86678 6/50 current_auc = 0.573125
User 86678 AUC after training: 0.57375
User 86678 improves AUC. Keeping the model.
Training on augumented user 113952 7/50 current_auc = 0.57375
User 113952 AUC after training: 0.57375
User 113952 does not improve AUC. Reverting changes.
Training on augumented user 42791 8/50 current_auc = 0.57375
User 42791 AUC after training: 0.57375
User 42791 does not improve AUC. Reverting changes.
Training on augumented user 65234 9/50 current_auc = 0.57375
User 65234 AUC after training: 0.5725000000000001
User 65234 does not improve AUC. Reverting changes.
Training on augumented user 101917 10/50 current_auc = 0.57375
User 101917 AUC after training: 0.57375
User 101917 does not improve AUC. Reverting changes.
Training on augumented user 53231 11/50 current_auc = 0.57375
User 53231 AUC after training: 0.5687500000000001
User 53231 does not improve AUC. Reverting changes.
Training on augumented user 135621 12/50 current_auc = 0.57375
User 135621 AUC after training: 0.57125
User 135621 does not improve AUC. Reverting changes.
Training on augumented user 91179 13/50 current_auc = 0.57375
User 91179 AUC after training: 0.5725
User 91179 does not improve AUC. Reverting changes.
Training on augumented user 10338 14/50 current_auc = 0.57375
User 10338 AUC after training: 0.573125
User 10338 does not improve AUC. Reverting changes.
Training on augumented user 106089 15/50 current_auc = 0.57375
User 106089 AUC after training: 0.570625
User 106089 does not improve AUC. Reverting changes.
Training on augumented user 32798 16/50 current_auc = 0.57375
User 32798 AUC after training: 0.5725
User 32798 does not improve AUC. Reverting changes.
Training on augumented user 113155 17/50 current_auc = 0.57375
User 113155 AUC after training: 0.5731250000000001
User 113155 does not improve AUC. Reverting changes.
Training on augumented user 83523 18/50 current_auc = 0.57375
User 83523 AUC after training: 0.5725
User 83523 does not improve AUC. Reverting changes.
Training on augumented user 68283 19/50 current_auc = 0.57375
User 68283 AUC after training: 0.570625
User 68283 does not improve AUC. Reverting changes.
Training on augumented user 65605 20/50 current_auc = 0.57375
User 65605 AUC after training: 0.57125
User 65605 does not improve AUC. Reverting changes.
Training on augumented user 31696 21/50 current_auc = 0.57375
User 31696 AUC after training: 0.571875
User 31696 does not improve AUC. Reverting changes.
Training on augumented user 67652 22/50 current_auc = 0.57375
User 67652 AUC after training: 0.569375
User 67652 does not improve AUC. Reverting changes.
Training on augumented user 91110 23/50 current_auc = 0.57375
User 91110 AUC after training: 0.5725
User 91110 does not improve AUC. Reverting changes.
Training on augumented user 45941 24/50 current_auc = 0.57375
User 45941 AUC after training: 0.5700000000000001
User 45941 does not improve AUC. Reverting changes.
Training on augumented user 35315 25/50 current_auc = 0.57375
User 35315 AUC after training: 0.569375
User 35315 does not improve AUC. Reverting changes.
Training on augumented user 95884 26/50 current_auc = 0.57375
User 95884 AUC after training: 0.57125
User 95884 does not improve AUC. Reverting changes.
Training on augumented user 11302 27/50 current_auc = 0.57375
User 11302 AUC after training: 0.570625
User 11302 does not improve AUC. Reverting changes.
Training on augumented user 96852 28/50 current_auc = 0.57375
User 96852 AUC after training: 0.57125
User 96852 does not improve AUC. Reverting changes.
Training on augumented user 3116 29/50 current_auc = 0.57375
User 3116 AUC after training: 0.5725
User 3116 does not improve AUC. Reverting changes.
Training on augumented user 117086 30/50 current_auc = 0.57375
User 117086 AUC after training: 0.570625
User 117086 does not improve AUC. Reverting changes.
Training on augumented user 38905 31/50 current_auc = 0.57375
User 38905 AUC after training: 0.57
User 38905 does not improve AUC. Reverting changes.
Training on augumented user 138350 32/50 current_auc = 0.57375
User 138350 AUC after training: 0.5725
User 138350 does not improve AUC. Reverting changes.
Training on augumented user 103867 33/50 current_auc = 0.57375
User 103867 AUC after training: 0.57125
User 103867 does not improve AUC. Reverting changes.
Training on augumented user 112990 34/50 current_auc = 0.57375
User 112990 AUC after training: 0.5725
User 112990 does not improve AUC. Reverting changes.
Training on augumented user 64782 35/50 current_auc = 0.57375
User 64782 AUC after training: 0.570625
User 64782 does not improve AUC. Reverting changes.
Training on augumented user 133092 36/50 current_auc = 0.57375
User 133092 AUC after training: 0.5725
User 133092 does not improve AUC. Reverting changes.
Training on augumented user 9296 37/50 current_auc = 0.57375
User 9296 AUC after training: 0.573125
User 9296 does not improve AUC. Reverting changes.
Training on augumented user 25999 38/50 current_auc = 0.57375
User 25999 AUC after training: 0.5737500000000001
User 25999 improves AUC. Keeping the model.
Training on augumented user 54695 39/50 current_auc = 0.5737500000000001
User 54695 AUC after training: 0.5706249999999999
User 54695 does not improve AUC. Reverting changes.
Training on augumented user 91201 40/50 current_auc = 0.5737500000000001
User 91201 AUC after training: 0.5725
User 91201 does not improve AUC. Reverting changes.
Training on augumented user 105981 41/50 current_auc = 0.5737500000000001
User 105981 AUC after training: 0.57375
User 105981 does not improve AUC. Reverting changes.
Training on augumented user 83429 42/50 current_auc = 0.5737500000000001
User 83429 AUC after training: 0.573125
User 83429 does not improve AUC. Reverting changes.
Training on augumented user 90528 43/50 current_auc = 0.5737500000000001
User 90528 AUC after training: 0.57375
User 90528 does not improve AUC. Reverting changes.
Training on augumented user 13919 44/50 current_auc = 0.5737500000000001
User 13919 AUC after training: 0.5725
User 13919 does not improve AUC. Reverting changes.
Training on augumented user 55676 45/50 current_auc = 0.5737500000000001
User 55676 AUC after training: 0.5725
User 55676 does not improve AUC. Reverting changes.
Training on augumented user 93113 46/50 current_auc = 0.5737500000000001
User 93113 AUC after training: 0.5737500000000001
User 93113 does not improve AUC. Reverting changes.
Training on augumented user 71211 47/50 current_auc = 0.5737500000000001
User 71211 AUC after training: 0.573125
User 71211 does not improve AUC. Reverting changes.
Training on augumented user 91258 48/50 current_auc = 0.5737500000000001
User 91258 AUC after training: 0.57375
User 91258 does not improve AUC. Reverting changes.
Training on augumented user 4040 49/50 current_auc = 0.5737500000000001
User 4040 AUC after training: 0.570625
User 4040 does not improve AUC. Reverting changes.
[2024-12-02 19:33:46.811879] start test user 47230 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:47.469824] start test user 47230 210/568 recall augumented users by random, augumented_users = [49872, 30839, 117698, 19331, 3556, 101610, 124104, 84666, 96094, 32221, 13207, 67177, 55793, 112600, 108338, 79214, 74266, 120926, 63776, 30851, 28713, 27718, 16089, 83408, 10598, 69779, 116892, 10589, 46910, 13418, 107912, 137679, 132787, 102949, 31793, 104372, 30901, 95647, 107972, 31693, 79158, 98635, 16532, 20536, 65092, 16645, 51896, 57444, 68898, 119358]
[2024-12-02 19:33:47.497584] user = 47230 Cloud 210/568
[2024-12-02 19:33:47.521326] user = 47230 Local 210/568
[2024-12-02 19:33:47.601849] user = 47230 Local+ 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:49.375110] user = 47230 MPDA- 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.393103448275862
Training on augumented user 49872 0/50 current_auc = 0.393103448275862
User 49872 AUC after training: 0.3879310344827586
User 49872 does not improve AUC. Reverting changes.
Training on augumented user 30839 1/50 current_auc = 0.393103448275862
User 30839 AUC after training: 0.393103448275862
User 30839 does not improve AUC. Reverting changes.
Training on augumented user 117698 2/50 current_auc = 0.393103448275862
User 117698 AUC after training: 0.3913793103448276
User 117698 does not improve AUC. Reverting changes.
Training on augumented user 19331 3/50 current_auc = 0.393103448275862
User 19331 AUC after training: 0.393103448275862
User 19331 does not improve AUC. Reverting changes.
Training on augumented user 3556 4/50 current_auc = 0.393103448275862
User 3556 AUC after training: 0.3948275862068966
User 3556 improves AUC. Keeping the model.
Training on augumented user 101610 5/50 current_auc = 0.3948275862068966
User 101610 AUC after training: 0.396551724137931
User 101610 improves AUC. Keeping the model.
Training on augumented user 124104 6/50 current_auc = 0.396551724137931
User 124104 AUC after training: 0.3948275862068966
User 124104 does not improve AUC. Reverting changes.
Training on augumented user 84666 7/50 current_auc = 0.396551724137931
User 84666 AUC after training: 0.3948275862068966
User 84666 does not improve AUC. Reverting changes.
Training on augumented user 96094 8/50 current_auc = 0.396551724137931
User 96094 AUC after training: 0.3939655172413793
User 96094 does not improve AUC. Reverting changes.
Training on augumented user 32221 9/50 current_auc = 0.396551724137931
User 32221 AUC after training: 0.39568965517241383
User 32221 does not improve AUC. Reverting changes.
Training on augumented user 13207 10/50 current_auc = 0.396551724137931
User 13207 AUC after training: 0.39137931034482754
User 13207 does not improve AUC. Reverting changes.
Training on augumented user 67177 11/50 current_auc = 0.396551724137931
User 67177 AUC after training: 0.3948275862068966
User 67177 does not improve AUC. Reverting changes.
Training on augumented user 55793 12/50 current_auc = 0.396551724137931
User 55793 AUC after training: 0.3913793103448276
User 55793 does not improve AUC. Reverting changes.
Training on augumented user 112600 13/50 current_auc = 0.396551724137931
User 112600 AUC after training: 0.39655172413793105
User 112600 improves AUC. Keeping the model.
Training on augumented user 108338 14/50 current_auc = 0.39655172413793105
User 108338 AUC after training: 0.3948275862068966
User 108338 does not improve AUC. Reverting changes.
Training on augumented user 79214 15/50 current_auc = 0.39655172413793105
User 79214 AUC after training: 0.3931034482758621
User 79214 does not improve AUC. Reverting changes.
Training on augumented user 74266 16/50 current_auc = 0.39655172413793105
User 74266 AUC after training: 0.3948275862068965
User 74266 does not improve AUC. Reverting changes.
Training on augumented user 120926 17/50 current_auc = 0.39655172413793105
User 120926 AUC after training: 0.3982758620689655
User 120926 improves AUC. Keeping the model.
Training on augumented user 63776 18/50 current_auc = 0.3982758620689655
User 63776 AUC after training: 0.396551724137931
User 63776 does not improve AUC. Reverting changes.
Training on augumented user 30851 19/50 current_auc = 0.3982758620689655
User 30851 AUC after training: 0.3939655172413793
User 30851 does not improve AUC. Reverting changes.
Training on augumented user 28713 20/50 current_auc = 0.3982758620689655
User 28713 AUC after training: 0.39655172413793105
User 28713 does not improve AUC. Reverting changes.
Training on augumented user 27718 21/50 current_auc = 0.3982758620689655
User 27718 AUC after training: 0.39655172413793105
User 27718 does not improve AUC. Reverting changes.
Training on augumented user 16089 22/50 current_auc = 0.3982758620689655
User 16089 AUC after training: 0.39655172413793105
User 16089 does not improve AUC. Reverting changes.
Training on augumented user 83408 23/50 current_auc = 0.3982758620689655
User 83408 AUC after training: 0.39655172413793105
User 83408 does not improve AUC. Reverting changes.
Training on augumented user 10598 24/50 current_auc = 0.3982758620689655
User 10598 AUC after training: 0.393103448275862
User 10598 does not improve AUC. Reverting changes.
Training on augumented user 69779 25/50 current_auc = 0.3982758620689655
User 69779 AUC after training: 0.39482758620689656
User 69779 does not improve AUC. Reverting changes.
Training on augumented user 116892 26/50 current_auc = 0.3982758620689655
User 116892 AUC after training: 0.3982758620689655
User 116892 does not improve AUC. Reverting changes.
Training on augumented user 10589 27/50 current_auc = 0.3982758620689655
User 10589 AUC after training: 0.3931034482758621
User 10589 does not improve AUC. Reverting changes.
Training on augumented user 46910 28/50 current_auc = 0.3982758620689655
User 46910 AUC after training: 0.3956896551724138
User 46910 does not improve AUC. Reverting changes.
Training on augumented user 13418 29/50 current_auc = 0.3982758620689655
User 13418 AUC after training: 0.39655172413793105
User 13418 does not improve AUC. Reverting changes.
Training on augumented user 107912 30/50 current_auc = 0.3982758620689655
User 107912 AUC after training: 0.3982758620689655
User 107912 does not improve AUC. Reverting changes.
Training on augumented user 137679 31/50 current_auc = 0.3982758620689655
User 137679 AUC after training: 0.3948275862068966
User 137679 does not improve AUC. Reverting changes.
Training on augumented user 132787 32/50 current_auc = 0.3982758620689655
User 132787 AUC after training: 0.393103448275862
User 132787 does not improve AUC. Reverting changes.
Training on augumented user 102949 33/50 current_auc = 0.3982758620689655
User 102949 AUC after training: 0.39655172413793105
User 102949 does not improve AUC. Reverting changes.
Training on augumented user 31793 34/50 current_auc = 0.3982758620689655
User 31793 AUC after training: 0.4
User 31793 improves AUC. Keeping the model.
Training on augumented user 104372 35/50 current_auc = 0.4
User 104372 AUC after training: 0.39999999999999997
User 104372 does not improve AUC. Reverting changes.
Training on augumented user 30901 36/50 current_auc = 0.4
User 30901 AUC after training: 0.40172413793103445
User 30901 improves AUC. Keeping the model.
Training on augumented user 95647 37/50 current_auc = 0.40172413793103445
User 95647 AUC after training: 0.39999999999999997
User 95647 does not improve AUC. Reverting changes.
Training on augumented user 107972 38/50 current_auc = 0.40172413793103445
User 107972 AUC after training: 0.40344827586206894
User 107972 improves AUC. Keeping the model.
Training on augumented user 31693 39/50 current_auc = 0.40344827586206894
User 31693 AUC after training: 0.40344827586206894
User 31693 does not improve AUC. Reverting changes.
Training on augumented user 79158 40/50 current_auc = 0.40344827586206894
User 79158 AUC after training: 0.40172413793103445
User 79158 does not improve AUC. Reverting changes.
Training on augumented user 98635 41/50 current_auc = 0.40344827586206894
User 98635 AUC after training: 0.40172413793103445
User 98635 does not improve AUC. Reverting changes.
Training on augumented user 16532 42/50 current_auc = 0.40344827586206894
User 16532 AUC after training: 0.3982758620689655
User 16532 does not improve AUC. Reverting changes.
Training on augumented user 20536 43/50 current_auc = 0.40344827586206894
User 20536 AUC after training: 0.40172413793103445
User 20536 does not improve AUC. Reverting changes.
Training on augumented user 65092 44/50 current_auc = 0.40344827586206894
User 65092 AUC after training: 0.40172413793103445
User 65092 does not improve AUC. Reverting changes.
Training on augumented user 16645 45/50 current_auc = 0.40344827586206894
User 16645 AUC after training: 0.403448275862069
User 16645 improves AUC. Keeping the model.
Training on augumented user 51896 46/50 current_auc = 0.403448275862069
User 51896 AUC after training: 0.403448275862069
User 51896 does not improve AUC. Reverting changes.
Training on augumented user 57444 47/50 current_auc = 0.403448275862069
User 57444 AUC after training: 0.4017241379310345
User 57444 does not improve AUC. Reverting changes.
Training on augumented user 68898 48/50 current_auc = 0.403448275862069
User 68898 AUC after training: 0.403448275862069
User 68898 does not improve AUC. Reverting changes.
Training on augumented user 119358 49/50 current_auc = 0.403448275862069
User 119358 AUC after training: 0.403448275862069
User 119358 does not improve AUC. Reverting changes.
[2024-12-02 19:34:15.498976] start test user 47242 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:16.166779] start test user 47242 211/568 recall augumented users by random, augumented_users = [80402, 40427, 45591, 87805, 77280, 75564, 68910, 49767, 89091, 97228, 15936, 28415, 19928, 66919, 63458, 120218, 85144, 79178, 53729, 14596, 91726, 117516, 89103, 133960, 118243, 61487, 48485, 84640, 122899, 75828, 116608, 137490, 107175, 97950, 132150, 35289, 128660, 40548, 95839, 54407, 9507, 8244, 46157, 7289, 44265, 101861, 66072, 61395, 22955, 126945]
[2024-12-02 19:34:16.182607] user = 47242 Cloud 211/568
[2024-12-02 19:34:16.244774] user = 47242 Local 211/568
[2024-12-02 19:34:16.415915] user = 47242 Local+ 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:19.646522] user = 47242 MPDA- 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6887298747763865
Training on augumented user 80402 0/50 current_auc = 0.6887298747763865
User 80402 AUC after training: 0.688953488372093
User 80402 improves AUC. Keeping the model.
Training on augumented user 40427 1/50 current_auc = 0.688953488372093
User 40427 AUC after training: 0.6885062611806798
User 40427 does not improve AUC. Reverting changes.
Training on augumented user 45591 2/50 current_auc = 0.688953488372093
User 45591 AUC after training: 0.6902951699463328
User 45591 improves AUC. Keeping the model.
Training on augumented user 87805 3/50 current_auc = 0.6902951699463328
User 87805 AUC after training: 0.6905187835420393
User 87805 improves AUC. Keeping the model.
Training on augumented user 77280 4/50 current_auc = 0.6905187835420393
User 77280 AUC after training: 0.6913014311270126
User 77280 improves AUC. Keeping the model.
Training on augumented user 75564 5/50 current_auc = 0.6913014311270126
User 75564 AUC after training: 0.6905187835420393
User 75564 does not improve AUC. Reverting changes.
Training on augumented user 68910 6/50 current_auc = 0.6913014311270126
User 68910 AUC after training: 0.690742397137746
User 68910 does not improve AUC. Reverting changes.
Training on augumented user 49767 7/50 current_auc = 0.6913014311270126
User 49767 AUC after training: 0.6908542039355993
User 49767 does not improve AUC. Reverting changes.
Training on augumented user 89091 8/50 current_auc = 0.6913014311270126
User 89091 AUC after training: 0.6913014311270126
User 89091 does not improve AUC. Reverting changes.
Training on augumented user 97228 9/50 current_auc = 0.6913014311270126
User 97228 AUC after training: 0.6913014311270126
User 97228 does not improve AUC. Reverting changes.
Training on augumented user 15936 10/50 current_auc = 0.6913014311270126
User 15936 AUC after training: 0.6908542039355993
User 15936 does not improve AUC. Reverting changes.
Training on augumented user 28415 11/50 current_auc = 0.6913014311270126
User 28415 AUC after training: 0.6902951699463328
User 28415 does not improve AUC. Reverting changes.
Training on augumented user 19928 12/50 current_auc = 0.6913014311270126
User 19928 AUC after training: 0.6898479427549195
User 19928 does not improve AUC. Reverting changes.
Training on augumented user 66919 13/50 current_auc = 0.6913014311270126
User 66919 AUC after training: 0.6898479427549195
User 66919 does not improve AUC. Reverting changes.
Training on augumented user 63458 14/50 current_auc = 0.6913014311270126
User 63458 AUC after training: 0.6905187835420393
User 63458 does not improve AUC. Reverting changes.
Training on augumented user 120218 15/50 current_auc = 0.6913014311270126
User 120218 AUC after training: 0.6899597495527728
User 120218 does not improve AUC. Reverting changes.
Training on augumented user 85144 16/50 current_auc = 0.6913014311270126
User 85144 AUC after training: 0.6906305903398927
User 85144 does not improve AUC. Reverting changes.
Training on augumented user 79178 17/50 current_auc = 0.6913014311270126
User 79178 AUC after training: 0.6871645796064401
User 79178 does not improve AUC. Reverting changes.
Training on augumented user 53729 18/50 current_auc = 0.6913014311270126
User 53729 AUC after training: 0.6915250447227191
User 53729 improves AUC. Keeping the model.
Training on augumented user 14596 19/50 current_auc = 0.6915250447227191
User 14596 AUC after training: 0.690742397137746
User 14596 does not improve AUC. Reverting changes.
Training on augumented user 91726 20/50 current_auc = 0.6915250447227191
User 91726 AUC after training: 0.6911896243291592
User 91726 does not improve AUC. Reverting changes.
Training on augumented user 117516 21/50 current_auc = 0.6915250447227191
User 117516 AUC after training: 0.6914132379248658
User 117516 does not improve AUC. Reverting changes.
Training on augumented user 89103 22/50 current_auc = 0.6915250447227191
User 89103 AUC after training: 0.6906305903398927
User 89103 does not improve AUC. Reverting changes.
Training on augumented user 133960 23/50 current_auc = 0.6915250447227191
User 133960 AUC after training: 0.6906305903398927
User 133960 does not improve AUC. Reverting changes.
Training on augumented user 118243 24/50 current_auc = 0.6915250447227191
User 118243 AUC after training: 0.6911896243291592
User 118243 does not improve AUC. Reverting changes.
Training on augumented user 61487 25/50 current_auc = 0.6915250447227191
User 61487 AUC after training: 0.6913014311270125
User 61487 does not improve AUC. Reverting changes.
Training on augumented user 48485 26/50 current_auc = 0.6915250447227191
User 48485 AUC after training: 0.6914132379248658
User 48485 does not improve AUC. Reverting changes.
Training on augumented user 84640 27/50 current_auc = 0.6915250447227191
User 84640 AUC after training: 0.6908542039355993
User 84640 does not improve AUC. Reverting changes.
Training on augumented user 122899 28/50 current_auc = 0.6915250447227191
User 122899 AUC after training: 0.6909660107334527
User 122899 does not improve AUC. Reverting changes.
Training on augumented user 75828 29/50 current_auc = 0.6915250447227191
User 75828 AUC after training: 0.6920840787119857
User 75828 improves AUC. Keeping the model.
Training on augumented user 116608 30/50 current_auc = 0.6920840787119857
User 116608 AUC after training: 0.6905187835420393
User 116608 does not improve AUC. Reverting changes.
Training on augumented user 137490 31/50 current_auc = 0.6920840787119857
User 137490 AUC after training: 0.6917486583184257
User 137490 does not improve AUC. Reverting changes.
Training on augumented user 107175 32/50 current_auc = 0.6920840787119857
User 107175 AUC after training: 0.6900715563506261
User 107175 does not improve AUC. Reverting changes.
Training on augumented user 97950 33/50 current_auc = 0.6920840787119857
User 97950 AUC after training: 0.6917486583184258
User 97950 does not improve AUC. Reverting changes.
Training on augumented user 132150 34/50 current_auc = 0.6920840787119857
User 132150 AUC after training: 0.689624329159213
User 132150 does not improve AUC. Reverting changes.
Training on augumented user 35289 35/50 current_auc = 0.6920840787119857
User 35289 AUC after training: 0.6909660107334527
User 35289 does not improve AUC. Reverting changes.
Training on augumented user 128660 36/50 current_auc = 0.6920840787119857
User 128660 AUC after training: 0.6918604651162791
User 128660 does not improve AUC. Reverting changes.
Training on augumented user 40548 37/50 current_auc = 0.6920840787119857
User 40548 AUC after training: 0.6918604651162791
User 40548 does not improve AUC. Reverting changes.
Training on augumented user 95839 38/50 current_auc = 0.6920840787119857
User 95839 AUC after training: 0.690742397137746
User 95839 does not improve AUC. Reverting changes.
Training on augumented user 54407 39/50 current_auc = 0.6920840787119857
User 54407 AUC after training: 0.6919722719141325
User 54407 does not improve AUC. Reverting changes.
Training on augumented user 9507 40/50 current_auc = 0.6920840787119857
User 9507 AUC after training: 0.6914132379248659
User 9507 does not improve AUC. Reverting changes.
Training on augumented user 8244 41/50 current_auc = 0.6920840787119857
User 8244 AUC after training: 0.6909660107334525
User 8244 does not improve AUC. Reverting changes.
Training on augumented user 46157 42/50 current_auc = 0.6920840787119857
User 46157 AUC after training: 0.6896243291592129
User 46157 does not improve AUC. Reverting changes.
Training on augumented user 7289 43/50 current_auc = 0.6920840787119857
User 7289 AUC after training: 0.6900715563506261
User 7289 does not improve AUC. Reverting changes.
Training on augumented user 44265 44/50 current_auc = 0.6920840787119857
User 44265 AUC after training: 0.6911896243291592
User 44265 does not improve AUC. Reverting changes.
Training on augumented user 101861 45/50 current_auc = 0.6920840787119857
User 101861 AUC after training: 0.6888416815742398
User 101861 does not improve AUC. Reverting changes.
Training on augumented user 66072 46/50 current_auc = 0.6920840787119857
User 66072 AUC after training: 0.692195885509839
User 66072 improves AUC. Keeping the model.
Training on augumented user 61395 47/50 current_auc = 0.692195885509839
User 61395 AUC after training: 0.6917486583184257
User 61395 does not improve AUC. Reverting changes.
Training on augumented user 22955 48/50 current_auc = 0.692195885509839
User 22955 AUC after training: 0.692195885509839
User 22955 does not improve AUC. Reverting changes.
Training on augumented user 126945 49/50 current_auc = 0.692195885509839
User 126945 AUC after training: 0.6916368515205724
User 126945 does not improve AUC. Reverting changes.
[2024-12-02 19:34:47.290903] start test user 47271 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:48.049953] start test user 47271 212/568 recall augumented users by random, augumented_users = [129019, 17567, 39962, 63251, 82092, 17682, 56669, 47336, 118795, 17661, 12854, 81039, 49612, 115800, 115896, 100143, 127455, 58789, 29446, 83409, 7551, 50886, 50858, 14956, 97066, 94503, 114963, 87425, 78038, 30879, 57212, 68161, 55003, 120345, 24757, 120343, 99901, 5654, 90200, 26786, 49408, 13856, 108456, 51516, 93276, 68718, 3001, 100784, 14703, 121397]
[2024-12-02 19:34:48.071419] user = 47271 Cloud 212/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:48.077517] user = 47271 Local 212/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:48.128668] user = 47271 Local+ 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:50.516431] user = 47271 MPDA- 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 129019 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129019 AUC after training: 0.5
User 129019 does not improve AUC. Reverting changes.
Training on augumented user 17567 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17567 AUC after training: 0.5
User 17567 does not improve AUC. Reverting changes.
Training on augumented user 39962 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39962 AUC after training: 0.5
User 39962 does not improve AUC. Reverting changes.
Training on augumented user 63251 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63251 AUC after training: 0.5
User 63251 does not improve AUC. Reverting changes.
Training on augumented user 82092 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82092 AUC after training: 0.5
User 82092 does not improve AUC. Reverting changes.
Training on augumented user 17682 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17682 AUC after training: 0.5
User 17682 does not improve AUC. Reverting changes.
Training on augumented user 56669 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56669 AUC after training: 0.5
User 56669 does not improve AUC. Reverting changes.
Training on augumented user 47336 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47336 AUC after training: 0.5
User 47336 does not improve AUC. Reverting changes.
Training on augumented user 118795 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118795 AUC after training: 0.5
User 118795 does not improve AUC. Reverting changes.
Training on augumented user 17661 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17661 AUC after training: 0.5
User 17661 does not improve AUC. Reverting changes.
Training on augumented user 12854 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12854 AUC after training: 0.5
User 12854 does not improve AUC. Reverting changes.
Training on augumented user 81039 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81039 AUC after training: 0.5
User 81039 does not improve AUC. Reverting changes.
Training on augumented user 49612 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49612 AUC after training: 0.5
User 49612 does not improve AUC. Reverting changes.
Training on augumented user 115800 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115800 AUC after training: 0.5
User 115800 does not improve AUC. Reverting changes.
Training on augumented user 115896 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115896 AUC after training: 0.5
User 115896 does not improve AUC. Reverting changes.
Training on augumented user 100143 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100143 AUC after training: 0.5
User 100143 does not improve AUC. Reverting changes.
Training on augumented user 127455 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127455 AUC after training: 0.5
User 127455 does not improve AUC. Reverting changes.
Training on augumented user 58789 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58789 AUC after training: 0.5
User 58789 does not improve AUC. Reverting changes.
Training on augumented user 29446 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29446 AUC after training: 0.5
User 29446 does not improve AUC. Reverting changes.
Training on augumented user 83409 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83409 AUC after training: 0.5
User 83409 does not improve AUC. Reverting changes.
Training on augumented user 7551 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7551 AUC after training: 0.5
User 7551 does not improve AUC. Reverting changes.
Training on augumented user 50886 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50886 AUC after training: 0.5
User 50886 does not improve AUC. Reverting changes.
Training on augumented user 50858 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50858 AUC after training: 0.5
User 50858 does not improve AUC. Reverting changes.
Training on augumented user 14956 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14956 AUC after training: 0.5
User 14956 does not improve AUC. Reverting changes.
Training on augumented user 97066 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97066 AUC after training: 0.5
User 97066 does not improve AUC. Reverting changes.
Training on augumented user 94503 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94503 AUC after training: 0.5
User 94503 does not improve AUC. Reverting changes.
Training on augumented user 114963 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114963 AUC after training: 0.5
User 114963 does not improve AUC. Reverting changes.
Training on augumented user 87425 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87425 AUC after training: 0.5
User 87425 does not improve AUC. Reverting changes.
Training on augumented user 78038 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78038 AUC after training: 0.5
User 78038 does not improve AUC. Reverting changes.
Training on augumented user 30879 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30879 AUC after training: 0.5
User 30879 does not improve AUC. Reverting changes.
Training on augumented user 57212 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57212 AUC after training: 0.5
User 57212 does not improve AUC. Reverting changes.
Training on augumented user 68161 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68161 AUC after training: 0.5
User 68161 does not improve AUC. Reverting changes.
Training on augumented user 55003 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55003 AUC after training: 0.5
User 55003 does not improve AUC. Reverting changes.
Training on augumented user 120345 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120345 AUC after training: 0.5
User 120345 does not improve AUC. Reverting changes.
Training on augumented user 24757 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24757 AUC after training: 0.5
User 24757 does not improve AUC. Reverting changes.
Training on augumented user 120343 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120343 AUC after training: 0.5
User 120343 does not improve AUC. Reverting changes.
Training on augumented user 99901 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99901 AUC after training: 0.5
User 99901 does not improve AUC. Reverting changes.
Training on augumented user 5654 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5654 AUC after training: 0.5
User 5654 does not improve AUC. Reverting changes.
Training on augumented user 90200 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90200 AUC after training: 0.5
User 90200 does not improve AUC. Reverting changes.
Training on augumented user 26786 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26786 AUC after training: 0.5
User 26786 does not improve AUC. Reverting changes.
Training on augumented user 49408 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49408 AUC after training: 0.5
User 49408 does not improve AUC. Reverting changes.
Training on augumented user 13856 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13856 AUC after training: 0.5
User 13856 does not improve AUC. Reverting changes.
Training on augumented user 108456 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108456 AUC after training: 0.5
User 108456 does not improve AUC. Reverting changes.
Training on augumented user 51516 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51516 AUC after training: 0.5
User 51516 does not improve AUC. Reverting changes.
Training on augumented user 93276 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93276 AUC after training: 0.5
User 93276 does not improve AUC. Reverting changes.
Training on augumented user 68718 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68718 AUC after training: 0.5
User 68718 does not improve AUC. Reverting changes.
Training on augumented user 3001 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3001 AUC after training: 0.5
User 3001 does not improve AUC. Reverting changes.
Training on augumented user 100784 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100784 AUC after training: 0.5
User 100784 does not improve AUC. Reverting changes.
Training on augumented user 14703 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14703 AUC after training: 0.5
User 14703 does not improve AUC. Reverting changes.
Training on augumented user 121397 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121397 AUC after training: 0.5
User 121397 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:18.815857] start test user 47292 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:19.389005] start test user 47292 213/568 recall augumented users by random, augumented_users = [31174, 131273, 128460, 123753, 45185, 132434, 8614, 70974, 121284, 64051, 103446, 121236, 47994, 73197, 11668, 42106, 4617, 66989, 129610, 105082, 19101, 28629, 71628, 75024, 107270, 121665, 38915, 40495, 77379, 16925, 24663, 49891, 50662, 77611, 18828, 111847, 84719, 117209, 110155, 87156, 116671, 124681, 133106, 136735, 128661, 102427, 114689, 15086, 80680, 122712]
[2024-12-02 19:35:19.403843] user = 47292 Cloud 213/568
[2024-12-02 19:35:19.438282] user = 47292 Local 213/568
[2024-12-02 19:35:19.516893] user = 47292 Local+ 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:21.573954] user = 47292 MPDA- 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7025
Training on augumented user 31174 0/50 current_auc = 0.7025
User 31174 AUC after training: 0.7022916666666666
User 31174 does not improve AUC. Reverting changes.
Training on augumented user 131273 1/50 current_auc = 0.7025
User 131273 AUC after training: 0.7022916666666666
User 131273 does not improve AUC. Reverting changes.
Training on augumented user 128460 2/50 current_auc = 0.7025
User 128460 AUC after training: 0.7023958333333333
User 128460 does not improve AUC. Reverting changes.
Training on augumented user 123753 3/50 current_auc = 0.7025
User 123753 AUC after training: 0.7028125
User 123753 improves AUC. Keeping the model.
Training on augumented user 45185 4/50 current_auc = 0.7028125
User 45185 AUC after training: 0.7031249999999999
User 45185 improves AUC. Keeping the model.
Training on augumented user 132434 5/50 current_auc = 0.7031249999999999
User 132434 AUC after training: 0.7029166666666666
User 132434 does not improve AUC. Reverting changes.
Training on augumented user 8614 6/50 current_auc = 0.7031249999999999
User 8614 AUC after training: 0.7029166666666666
User 8614 does not improve AUC. Reverting changes.
Training on augumented user 70974 7/50 current_auc = 0.7031249999999999
User 70974 AUC after training: 0.7030208333333333
User 70974 does not improve AUC. Reverting changes.
Training on augumented user 121284 8/50 current_auc = 0.7031249999999999
User 121284 AUC after training: 0.7032291666666666
User 121284 improves AUC. Keeping the model.
Training on augumented user 64051 9/50 current_auc = 0.7032291666666666
User 64051 AUC after training: 0.703125
User 64051 does not improve AUC. Reverting changes.
Training on augumented user 103446 10/50 current_auc = 0.7032291666666666
User 103446 AUC after training: 0.7034374999999999
User 103446 improves AUC. Keeping the model.
Training on augumented user 121236 11/50 current_auc = 0.7034374999999999
User 121236 AUC after training: 0.7030208333333333
User 121236 does not improve AUC. Reverting changes.
Training on augumented user 47994 12/50 current_auc = 0.7034374999999999
User 47994 AUC after training: 0.7030208333333333
User 47994 does not improve AUC. Reverting changes.
Training on augumented user 73197 13/50 current_auc = 0.7034374999999999
User 73197 AUC after training: 0.7035416666666666
User 73197 improves AUC. Keeping the model.
Training on augumented user 11668 14/50 current_auc = 0.7035416666666666
User 11668 AUC after training: 0.7033333333333334
User 11668 does not improve AUC. Reverting changes.
Training on augumented user 42106 15/50 current_auc = 0.7035416666666666
User 42106 AUC after training: 0.7039583333333334
User 42106 improves AUC. Keeping the model.
Training on augumented user 4617 16/50 current_auc = 0.7039583333333334
User 4617 AUC after training: 0.7047916666666666
User 4617 improves AUC. Keeping the model.
Training on augumented user 66989 17/50 current_auc = 0.7047916666666666
User 66989 AUC after training: 0.7045833333333333
User 66989 does not improve AUC. Reverting changes.
Training on augumented user 129610 18/50 current_auc = 0.7047916666666666
User 129610 AUC after training: 0.7045833333333333
User 129610 does not improve AUC. Reverting changes.
Training on augumented user 105082 19/50 current_auc = 0.7047916666666666
User 105082 AUC after training: 0.7047916666666667
User 105082 improves AUC. Keeping the model.
Training on augumented user 19101 20/50 current_auc = 0.7047916666666667
User 19101 AUC after training: 0.7044791666666667
User 19101 does not improve AUC. Reverting changes.
Training on augumented user 28629 21/50 current_auc = 0.7047916666666667
User 28629 AUC after training: 0.7040625
User 28629 does not improve AUC. Reverting changes.
Training on augumented user 71628 22/50 current_auc = 0.7047916666666667
User 71628 AUC after training: 0.7045833333333333
User 71628 does not improve AUC. Reverting changes.
Training on augumented user 75024 23/50 current_auc = 0.7047916666666667
User 75024 AUC after training: 0.7047916666666667
User 75024 does not improve AUC. Reverting changes.
Training on augumented user 107270 24/50 current_auc = 0.7047916666666667
User 107270 AUC after training: 0.7046875
User 107270 does not improve AUC. Reverting changes.
Training on augumented user 121665 25/50 current_auc = 0.7047916666666667
User 121665 AUC after training: 0.7040625
User 121665 does not improve AUC. Reverting changes.
Training on augumented user 38915 26/50 current_auc = 0.7047916666666667
User 38915 AUC after training: 0.704375
User 38915 does not improve AUC. Reverting changes.
Training on augumented user 40495 27/50 current_auc = 0.7047916666666667
User 40495 AUC after training: 0.7045833333333333
User 40495 does not improve AUC. Reverting changes.
Training on augumented user 77379 28/50 current_auc = 0.7047916666666667
User 77379 AUC after training: 0.7051041666666666
User 77379 improves AUC. Keeping the model.
Training on augumented user 16925 29/50 current_auc = 0.7051041666666666
User 16925 AUC after training: 0.7047916666666666
User 16925 does not improve AUC. Reverting changes.
Training on augumented user 24663 30/50 current_auc = 0.7051041666666666
User 24663 AUC after training: 0.7052083333333333
User 24663 improves AUC. Keeping the model.
Training on augumented user 49891 31/50 current_auc = 0.7052083333333333
User 49891 AUC after training: 0.705
User 49891 does not improve AUC. Reverting changes.
Training on augumented user 50662 32/50 current_auc = 0.7052083333333333
User 50662 AUC after training: 0.7030208333333333
User 50662 does not improve AUC. Reverting changes.
Training on augumented user 77611 33/50 current_auc = 0.7052083333333333
User 77611 AUC after training: 0.7051041666666666
User 77611 does not improve AUC. Reverting changes.
Training on augumented user 18828 34/50 current_auc = 0.7052083333333333
User 18828 AUC after training: 0.7051041666666666
User 18828 does not improve AUC. Reverting changes.
Training on augumented user 111847 35/50 current_auc = 0.7052083333333333
User 111847 AUC after training: 0.7047916666666666
User 111847 does not improve AUC. Reverting changes.
Training on augumented user 84719 36/50 current_auc = 0.7052083333333333
User 84719 AUC after training: 0.7053124999999999
User 84719 improves AUC. Keeping the model.
Training on augumented user 117209 37/50 current_auc = 0.7053124999999999
User 117209 AUC after training: 0.7051041666666666
User 117209 does not improve AUC. Reverting changes.
Training on augumented user 110155 38/50 current_auc = 0.7053124999999999
User 110155 AUC after training: 0.7047916666666667
User 110155 does not improve AUC. Reverting changes.
Training on augumented user 87156 39/50 current_auc = 0.7053124999999999
User 87156 AUC after training: 0.7033333333333334
User 87156 does not improve AUC. Reverting changes.
Training on augumented user 116671 40/50 current_auc = 0.7053124999999999
User 116671 AUC after training: 0.7055208333333333
User 116671 improves AUC. Keeping the model.
Training on augumented user 124681 41/50 current_auc = 0.7055208333333333
User 124681 AUC after training: 0.7053125
User 124681 does not improve AUC. Reverting changes.
Training on augumented user 133106 42/50 current_auc = 0.7055208333333333
User 133106 AUC after training: 0.7054166666666667
User 133106 does not improve AUC. Reverting changes.
Training on augumented user 136735 43/50 current_auc = 0.7055208333333333
User 136735 AUC after training: 0.7052083333333333
User 136735 does not improve AUC. Reverting changes.
Training on augumented user 128661 44/50 current_auc = 0.7055208333333333
User 128661 AUC after training: 0.7058333333333333
User 128661 improves AUC. Keeping the model.
Training on augumented user 102427 45/50 current_auc = 0.7058333333333333
User 102427 AUC after training: 0.7057291666666666
User 102427 does not improve AUC. Reverting changes.
Training on augumented user 114689 46/50 current_auc = 0.7058333333333333
User 114689 AUC after training: 0.7059375
User 114689 improves AUC. Keeping the model.
Training on augumented user 15086 47/50 current_auc = 0.7059375
User 15086 AUC after training: 0.7061458333333334
User 15086 improves AUC. Keeping the model.
Training on augumented user 80680 48/50 current_auc = 0.7061458333333334
User 80680 AUC after training: 0.7055208333333334
User 80680 does not improve AUC. Reverting changes.
Training on augumented user 122712 49/50 current_auc = 0.7061458333333334
User 122712 AUC after training: 0.7056250000000001
User 122712 does not improve AUC. Reverting changes.
[2024-12-02 19:35:53.781039] start test user 47301 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:54.702654] start test user 47301 214/568 recall augumented users by random, augumented_users = [108810, 61340, 131026, 41107, 129583, 106378, 72487, 119611, 122360, 3045, 49381, 132060, 41747, 26225, 115547, 45758, 58325, 43276, 97983, 34127, 105641, 92450, 29176, 11847, 32367, 56853, 79307, 116925, 28177, 46314, 34986, 85516, 75957, 127140, 119700, 32906, 47380, 69154, 10178, 47182, 105950, 82660, 39830, 4283, 52038, 72362, 87767, 44155, 81707, 109182]
[2024-12-02 19:35:54.750334] user = 47301 Cloud 214/568
[2024-12-02 19:35:54.777331] user = 47301 Local 214/568
[2024-12-02 19:35:54.879138] user = 47301 Local+ 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:57.589761] user = 47301 MPDA- 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6035087719298246
Training on augumented user 108810 0/50 current_auc = 0.6035087719298246
User 108810 AUC after training: 0.612280701754386
User 108810 improves AUC. Keeping the model.
Training on augumented user 61340 1/50 current_auc = 0.612280701754386
User 61340 AUC after training: 0.6087719298245614
User 61340 does not improve AUC. Reverting changes.
Training on augumented user 131026 2/50 current_auc = 0.612280701754386
User 131026 AUC after training: 0.612280701754386
User 131026 does not improve AUC. Reverting changes.
Training on augumented user 41107 3/50 current_auc = 0.612280701754386
User 41107 AUC after training: 0.6070175438596491
User 41107 does not improve AUC. Reverting changes.
Training on augumented user 129583 4/50 current_auc = 0.612280701754386
User 129583 AUC after training: 0.6
User 129583 does not improve AUC. Reverting changes.
Training on augumented user 106378 5/50 current_auc = 0.612280701754386
User 106378 AUC after training: 0.6105263157894737
User 106378 does not improve AUC. Reverting changes.
Training on augumented user 72487 6/50 current_auc = 0.612280701754386
User 72487 AUC after training: 0.6087719298245614
User 72487 does not improve AUC. Reverting changes.
Training on augumented user 119611 7/50 current_auc = 0.612280701754386
User 119611 AUC after training: 0.6087719298245614
User 119611 does not improve AUC. Reverting changes.
Training on augumented user 122360 8/50 current_auc = 0.612280701754386
User 122360 AUC after training: 0.6070175438596491
User 122360 does not improve AUC. Reverting changes.
Training on augumented user 3045 9/50 current_auc = 0.612280701754386
User 3045 AUC after training: 0.6105263157894737
User 3045 does not improve AUC. Reverting changes.
Training on augumented user 49381 10/50 current_auc = 0.612280701754386
User 49381 AUC after training: 0.6105263157894736
User 49381 does not improve AUC. Reverting changes.
Training on augumented user 132060 11/50 current_auc = 0.612280701754386
User 132060 AUC after training: 0.612280701754386
User 132060 does not improve AUC. Reverting changes.
Training on augumented user 41747 12/50 current_auc = 0.612280701754386
User 41747 AUC after training: 0.6087719298245614
User 41747 does not improve AUC. Reverting changes.
Training on augumented user 26225 13/50 current_auc = 0.612280701754386
User 26225 AUC after training: 0.612280701754386
User 26225 does not improve AUC. Reverting changes.
Training on augumented user 115547 14/50 current_auc = 0.612280701754386
User 115547 AUC after training: 0.6052631578947368
User 115547 does not improve AUC. Reverting changes.
Training on augumented user 45758 15/50 current_auc = 0.612280701754386
User 45758 AUC after training: 0.6105263157894737
User 45758 does not improve AUC. Reverting changes.
Training on augumented user 58325 16/50 current_auc = 0.612280701754386
User 58325 AUC after training: 0.6105263157894737
User 58325 does not improve AUC. Reverting changes.
Training on augumented user 43276 17/50 current_auc = 0.612280701754386
User 43276 AUC after training: 0.6087719298245614
User 43276 does not improve AUC. Reverting changes.
Training on augumented user 97983 18/50 current_auc = 0.612280701754386
User 97983 AUC after training: 0.6052631578947368
User 97983 does not improve AUC. Reverting changes.
Training on augumented user 34127 19/50 current_auc = 0.612280701754386
User 34127 AUC after training: 0.6140350877192983
User 34127 improves AUC. Keeping the model.
Training on augumented user 105641 20/50 current_auc = 0.6140350877192983
User 105641 AUC after training: 0.6087719298245614
User 105641 does not improve AUC. Reverting changes.
Training on augumented user 92450 21/50 current_auc = 0.6140350877192983
User 92450 AUC after training: 0.6105263157894737
User 92450 does not improve AUC. Reverting changes.
Training on augumented user 29176 22/50 current_auc = 0.6140350877192983
User 29176 AUC after training: 0.6157894736842106
User 29176 improves AUC. Keeping the model.
Training on augumented user 11847 23/50 current_auc = 0.6157894736842106
User 11847 AUC after training: 0.6140350877192983
User 11847 does not improve AUC. Reverting changes.
Training on augumented user 32367 24/50 current_auc = 0.6157894736842106
User 32367 AUC after training: 0.6157894736842106
User 32367 does not improve AUC. Reverting changes.
Training on augumented user 56853 25/50 current_auc = 0.6157894736842106
User 56853 AUC after training: 0.6105263157894737
User 56853 does not improve AUC. Reverting changes.
Training on augumented user 79307 26/50 current_auc = 0.6157894736842106
User 79307 AUC after training: 0.6157894736842106
User 79307 does not improve AUC. Reverting changes.
Training on augumented user 116925 27/50 current_auc = 0.6157894736842106
User 116925 AUC after training: 0.6157894736842106
User 116925 does not improve AUC. Reverting changes.
Training on augumented user 28177 28/50 current_auc = 0.6157894736842106
User 28177 AUC after training: 0.6140350877192983
User 28177 does not improve AUC. Reverting changes.
Training on augumented user 46314 29/50 current_auc = 0.6157894736842106
User 46314 AUC after training: 0.6157894736842106
User 46314 does not improve AUC. Reverting changes.
Training on augumented user 34986 30/50 current_auc = 0.6157894736842106
User 34986 AUC after training: 0.6157894736842106
User 34986 does not improve AUC. Reverting changes.
Training on augumented user 85516 31/50 current_auc = 0.6157894736842106
User 85516 AUC after training: 0.6157894736842106
User 85516 does not improve AUC. Reverting changes.
Training on augumented user 75957 32/50 current_auc = 0.6157894736842106
User 75957 AUC after training: 0.6070175438596491
User 75957 does not improve AUC. Reverting changes.
Training on augumented user 127140 33/50 current_auc = 0.6157894736842106
User 127140 AUC after training: 0.6140350877192983
User 127140 does not improve AUC. Reverting changes.
Training on augumented user 119700 34/50 current_auc = 0.6157894736842106
User 119700 AUC after training: 0.612280701754386
User 119700 does not improve AUC. Reverting changes.
Training on augumented user 32906 35/50 current_auc = 0.6157894736842106
User 32906 AUC after training: 0.612280701754386
User 32906 does not improve AUC. Reverting changes.
Training on augumented user 47380 36/50 current_auc = 0.6157894736842106
User 47380 AUC after training: 0.6105263157894737
User 47380 does not improve AUC. Reverting changes.
Training on augumented user 69154 37/50 current_auc = 0.6157894736842106
User 69154 AUC after training: 0.6157894736842106
User 69154 does not improve AUC. Reverting changes.
Training on augumented user 10178 38/50 current_auc = 0.6157894736842106
User 10178 AUC after training: 0.6070175438596491
User 10178 does not improve AUC. Reverting changes.
Training on augumented user 47182 39/50 current_auc = 0.6157894736842106
User 47182 AUC after training: 0.6157894736842106
User 47182 does not improve AUC. Reverting changes.
Training on augumented user 105950 40/50 current_auc = 0.6157894736842106
User 105950 AUC after training: 0.6140350877192983
User 105950 does not improve AUC. Reverting changes.
Training on augumented user 82660 41/50 current_auc = 0.6157894736842106
User 82660 AUC after training: 0.6105263157894737
User 82660 does not improve AUC. Reverting changes.
Training on augumented user 39830 42/50 current_auc = 0.6157894736842106
User 39830 AUC after training: 0.612280701754386
User 39830 does not improve AUC. Reverting changes.
Training on augumented user 4283 43/50 current_auc = 0.6157894736842106
User 4283 AUC after training: 0.6140350877192983
User 4283 does not improve AUC. Reverting changes.
Training on augumented user 52038 44/50 current_auc = 0.6157894736842106
User 52038 AUC after training: 0.6140350877192983
User 52038 does not improve AUC. Reverting changes.
Training on augumented user 72362 45/50 current_auc = 0.6157894736842106
User 72362 AUC after training: 0.6140350877192984
User 72362 does not improve AUC. Reverting changes.
Training on augumented user 87767 46/50 current_auc = 0.6157894736842106
User 87767 AUC after training: 0.6157894736842106
User 87767 does not improve AUC. Reverting changes.
Training on augumented user 44155 47/50 current_auc = 0.6157894736842106
User 44155 AUC after training: 0.6157894736842106
User 44155 does not improve AUC. Reverting changes.
Training on augumented user 81707 48/50 current_auc = 0.6157894736842106
User 81707 AUC after training: 0.6157894736842106
User 81707 does not improve AUC. Reverting changes.
Training on augumented user 109182 49/50 current_auc = 0.6157894736842106
User 109182 AUC after training: 0.6140350877192983
User 109182 does not improve AUC. Reverting changes.
[2024-12-02 19:36:23.178653] start test user 47311 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:23.594425] start test user 47311 215/568 recall augumented users by random, augumented_users = [129794, 63765, 96791, 15670, 26959, 25678, 98130, 24966, 135598, 106841, 28921, 112705, 101594, 42037, 68388, 120624, 121622, 6827, 112543, 136116, 23979, 109357, 31081, 28766, 93097, 69201, 73395, 82538, 130130, 137779, 49054, 112201, 37073, 128476, 93980, 135685, 126030, 10579, 129995, 33827, 65743, 26353, 135003, 72170, 122337, 8962, 87343, 87892, 108451, 9159]
[2024-12-02 19:36:23.608544] user = 47311 Cloud 215/568
[2024-12-02 19:36:23.624388] user = 47311 Local 215/568
[2024-12-02 19:36:23.671342] user = 47311 Local+ 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:25.805729] user = 47311 MPDA- 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.859776168531929
Training on augumented user 129794 0/50 current_auc = 0.859776168531929
User 129794 AUC after training: 0.8601053324555629
User 129794 improves AUC. Keeping the model.
Training on augumented user 63765 1/50 current_auc = 0.8601053324555629
User 63765 AUC after training: 0.8602150537634409
User 63765 improves AUC. Keeping the model.
Training on augumented user 96791 2/50 current_auc = 0.8602150537634409
User 96791 AUC after training: 0.8604344963791968
User 96791 improves AUC. Keeping the model.
Training on augumented user 15670 3/50 current_auc = 0.8604344963791968
User 15670 AUC after training: 0.8602150537634408
User 15670 does not improve AUC. Reverting changes.
Training on augumented user 26959 4/50 current_auc = 0.8604344963791968
User 26959 AUC after training: 0.8601053324555628
User 26959 does not improve AUC. Reverting changes.
Training on augumented user 25678 5/50 current_auc = 0.8604344963791968
User 25678 AUC after training: 0.8603247750713188
User 25678 does not improve AUC. Reverting changes.
Training on augumented user 98130 6/50 current_auc = 0.8604344963791968
User 98130 AUC after training: 0.8603247750713188
User 98130 does not improve AUC. Reverting changes.
Training on augumented user 24966 7/50 current_auc = 0.8604344963791968
User 24966 AUC after training: 0.8604344963791969
User 24966 improves AUC. Keeping the model.
Training on augumented user 135598 8/50 current_auc = 0.8604344963791969
User 135598 AUC after training: 0.8605442176870749
User 135598 improves AUC. Keeping the model.
Training on augumented user 106841 9/50 current_auc = 0.8605442176870749
User 106841 AUC after training: 0.8605442176870748
User 106841 does not improve AUC. Reverting changes.
Training on augumented user 28921 10/50 current_auc = 0.8605442176870749
User 28921 AUC after training: 0.8603247750713188
User 28921 does not improve AUC. Reverting changes.
Training on augumented user 112705 11/50 current_auc = 0.8605442176870749
User 112705 AUC after training: 0.8603247750713189
User 112705 does not improve AUC. Reverting changes.
Training on augumented user 101594 12/50 current_auc = 0.8605442176870749
User 101594 AUC after training: 0.8603247750713188
User 101594 does not improve AUC. Reverting changes.
Training on augumented user 42037 13/50 current_auc = 0.8605442176870749
User 42037 AUC after training: 0.8604344963791968
User 42037 does not improve AUC. Reverting changes.
Training on augumented user 68388 14/50 current_auc = 0.8605442176870749
User 68388 AUC after training: 0.8603247750713188
User 68388 does not improve AUC. Reverting changes.
Training on augumented user 120624 15/50 current_auc = 0.8605442176870749
User 120624 AUC after training: 0.8603247750713188
User 120624 does not improve AUC. Reverting changes.
Training on augumented user 121622 16/50 current_auc = 0.8605442176870749
User 121622 AUC after training: 0.8603247750713188
User 121622 does not improve AUC. Reverting changes.
Training on augumented user 6827 17/50 current_auc = 0.8605442176870749
User 6827 AUC after training: 0.8605442176870749
User 6827 does not improve AUC. Reverting changes.
Training on augumented user 112543 18/50 current_auc = 0.8605442176870749
User 112543 AUC after training: 0.8604344963791968
User 112543 does not improve AUC. Reverting changes.
Training on augumented user 136116 19/50 current_auc = 0.8605442176870749
User 136116 AUC after training: 0.8608733816107089
User 136116 improves AUC. Keeping the model.
Training on augumented user 23979 20/50 current_auc = 0.8608733816107089
User 23979 AUC after training: 0.8607636603028309
User 23979 does not improve AUC. Reverting changes.
Training on augumented user 109357 21/50 current_auc = 0.8608733816107089
User 109357 AUC after training: 0.8609831029185868
User 109357 improves AUC. Keeping the model.
Training on augumented user 31081 22/50 current_auc = 0.8609831029185868
User 31081 AUC after training: 0.8610928242264648
User 31081 improves AUC. Keeping the model.
Training on augumented user 28766 23/50 current_auc = 0.8610928242264648
User 28766 AUC after training: 0.8607636603028308
User 28766 does not improve AUC. Reverting changes.
Training on augumented user 93097 24/50 current_auc = 0.8610928242264648
User 93097 AUC after training: 0.8606539389949528
User 93097 does not improve AUC. Reverting changes.
Training on augumented user 69201 25/50 current_auc = 0.8610928242264648
User 69201 AUC after training: 0.8610928242264647
User 69201 does not improve AUC. Reverting changes.
Training on augumented user 73395 26/50 current_auc = 0.8610928242264648
User 73395 AUC after training: 0.8605442176870748
User 73395 does not improve AUC. Reverting changes.
Training on augumented user 82538 27/50 current_auc = 0.8610928242264648
User 82538 AUC after training: 0.8617511520737327
User 82538 improves AUC. Keeping the model.
Training on augumented user 130130 28/50 current_auc = 0.8617511520737327
User 130130 AUC after training: 0.8616414307658546
User 130130 does not improve AUC. Reverting changes.
Training on augumented user 137779 29/50 current_auc = 0.8617511520737327
User 137779 AUC after training: 0.8610928242264648
User 137779 does not improve AUC. Reverting changes.
Training on augumented user 49054 30/50 current_auc = 0.8617511520737327
User 49054 AUC after training: 0.8613122668422207
User 49054 does not improve AUC. Reverting changes.
Training on augumented user 112201 31/50 current_auc = 0.8617511520737327
User 112201 AUC after training: 0.8614219881500986
User 112201 does not improve AUC. Reverting changes.
Training on augumented user 37073 32/50 current_auc = 0.8617511520737327
User 37073 AUC after training: 0.8609831029185868
User 37073 does not improve AUC. Reverting changes.
Training on augumented user 128476 33/50 current_auc = 0.8617511520737327
User 128476 AUC after training: 0.8612025455343427
User 128476 does not improve AUC. Reverting changes.
Training on augumented user 93980 34/50 current_auc = 0.8617511520737327
User 93980 AUC after training: 0.8618608733816107
User 93980 improves AUC. Keeping the model.
Training on augumented user 135685 35/50 current_auc = 0.8618608733816107
User 135685 AUC after training: 0.8614219881500987
User 135685 does not improve AUC. Reverting changes.
Training on augumented user 126030 36/50 current_auc = 0.8618608733816107
User 126030 AUC after training: 0.8617511520737327
User 126030 does not improve AUC. Reverting changes.
Training on augumented user 10579 37/50 current_auc = 0.8618608733816107
User 10579 AUC after training: 0.8614219881500987
User 10579 does not improve AUC. Reverting changes.
Training on augumented user 129995 38/50 current_auc = 0.8618608733816107
User 129995 AUC after training: 0.859776168531929
User 129995 does not improve AUC. Reverting changes.
Training on augumented user 33827 39/50 current_auc = 0.8618608733816107
User 33827 AUC after training: 0.8619705946894887
User 33827 improves AUC. Keeping the model.
Training on augumented user 65743 40/50 current_auc = 0.8619705946894887
User 65743 AUC after training: 0.8612025455343427
User 65743 does not improve AUC. Reverting changes.
Training on augumented user 26353 41/50 current_auc = 0.8619705946894887
User 26353 AUC after training: 0.8620803159973667
User 26353 improves AUC. Keeping the model.
Training on augumented user 135003 42/50 current_auc = 0.8620803159973667
User 135003 AUC after training: 0.8620803159973667
User 135003 does not improve AUC. Reverting changes.
Training on augumented user 72170 43/50 current_auc = 0.8620803159973667
User 72170 AUC after training: 0.8612025455343427
User 72170 does not improve AUC. Reverting changes.
Training on augumented user 122337 44/50 current_auc = 0.8620803159973667
User 122337 AUC after training: 0.8617511520737327
User 122337 does not improve AUC. Reverting changes.
Training on augumented user 8962 45/50 current_auc = 0.8620803159973667
User 8962 AUC after training: 0.8614219881500987
User 8962 does not improve AUC. Reverting changes.
Training on augumented user 87343 46/50 current_auc = 0.8620803159973667
User 87343 AUC after training: 0.8613122668422206
User 87343 does not improve AUC. Reverting changes.
Training on augumented user 87892 47/50 current_auc = 0.8620803159973667
User 87892 AUC after training: 0.8619705946894887
User 87892 does not improve AUC. Reverting changes.
Training on augumented user 108451 48/50 current_auc = 0.8620803159973667
User 108451 AUC after training: 0.8618608733816107
User 108451 does not improve AUC. Reverting changes.
Training on augumented user 9159 49/50 current_auc = 0.8620803159973667
User 9159 AUC after training: 0.8620803159973667
User 9159 does not improve AUC. Reverting changes.
[2024-12-02 19:36:57.140137] start test user 47361 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:57.928488] start test user 47361 216/568 recall augumented users by random, augumented_users = [84676, 81145, 136643, 110881, 49202, 4252, 88326, 55344, 1967, 107285, 54629, 25438, 123500, 5910, 102140, 78035, 75836, 111870, 87569, 116932, 105918, 38112, 114212, 8563, 129840, 103031, 50748, 113683, 78853, 127930, 40515, 33687, 5504, 21294, 83141, 76301, 112705, 100943, 103307, 74070, 101815, 7641, 75345, 98875, 58749, 72477, 29718, 105410, 55055, 61668]
[2024-12-02 19:36:57.956967] user = 47361 Cloud 216/568
[2024-12-02 19:36:57.968735] user = 47361 Local 216/568
[2024-12-02 19:36:58.053943] user = 47361 Local+ 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:01.094268] user = 47361 MPDA- 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6770833333333333
Training on augumented user 84676 0/50 current_auc = 0.6770833333333333
User 84676 AUC after training: 0.6770833333333333
User 84676 does not improve AUC. Reverting changes.
Training on augumented user 81145 1/50 current_auc = 0.6770833333333333
User 81145 AUC after training: 0.6770833333333333
User 81145 does not improve AUC. Reverting changes.
Training on augumented user 136643 2/50 current_auc = 0.6770833333333333
User 136643 AUC after training: 0.6770833333333333
User 136643 does not improve AUC. Reverting changes.
Training on augumented user 110881 3/50 current_auc = 0.6770833333333333
User 110881 AUC after training: 0.6755952380952381
User 110881 does not improve AUC. Reverting changes.
Training on augumented user 49202 4/50 current_auc = 0.6770833333333333
User 49202 AUC after training: 0.6770833333333333
User 49202 does not improve AUC. Reverting changes.
Training on augumented user 4252 5/50 current_auc = 0.6770833333333333
User 4252 AUC after training: 0.6696428571428571
User 4252 does not improve AUC. Reverting changes.
Training on augumented user 88326 6/50 current_auc = 0.6770833333333333
User 88326 AUC after training: 0.6755952380952381
User 88326 does not improve AUC. Reverting changes.
Training on augumented user 55344 7/50 current_auc = 0.6770833333333333
User 55344 AUC after training: 0.6770833333333333
User 55344 does not improve AUC. Reverting changes.
Training on augumented user 1967 8/50 current_auc = 0.6770833333333333
User 1967 AUC after training: 0.6770833333333333
User 1967 does not improve AUC. Reverting changes.
Training on augumented user 107285 9/50 current_auc = 0.6770833333333333
User 107285 AUC after training: 0.6770833333333333
User 107285 does not improve AUC. Reverting changes.
Training on augumented user 54629 10/50 current_auc = 0.6770833333333333
User 54629 AUC after training: 0.6755952380952381
User 54629 does not improve AUC. Reverting changes.
Training on augumented user 25438 11/50 current_auc = 0.6770833333333333
User 25438 AUC after training: 0.6770833333333333
User 25438 does not improve AUC. Reverting changes.
Training on augumented user 123500 12/50 current_auc = 0.6770833333333333
User 123500 AUC after training: 0.6755952380952381
User 123500 does not improve AUC. Reverting changes.
Training on augumented user 5910 13/50 current_auc = 0.6770833333333333
User 5910 AUC after training: 0.6770833333333333
User 5910 does not improve AUC. Reverting changes.
Training on augumented user 102140 14/50 current_auc = 0.6770833333333333
User 102140 AUC after training: 0.6770833333333333
User 102140 does not improve AUC. Reverting changes.
Training on augumented user 78035 15/50 current_auc = 0.6770833333333333
User 78035 AUC after training: 0.6815476190476191
User 78035 improves AUC. Keeping the model.
Training on augumented user 75836 16/50 current_auc = 0.6815476190476191
User 75836 AUC after training: 0.6770833333333333
User 75836 does not improve AUC. Reverting changes.
Training on augumented user 111870 17/50 current_auc = 0.6815476190476191
User 111870 AUC after training: 0.6770833333333333
User 111870 does not improve AUC. Reverting changes.
Training on augumented user 87569 18/50 current_auc = 0.6815476190476191
User 87569 AUC after training: 0.6815476190476191
User 87569 does not improve AUC. Reverting changes.
Training on augumented user 116932 19/50 current_auc = 0.6815476190476191
User 116932 AUC after training: 0.6815476190476191
User 116932 does not improve AUC. Reverting changes.
Training on augumented user 105918 20/50 current_auc = 0.6815476190476191
User 105918 AUC after training: 0.6815476190476191
User 105918 does not improve AUC. Reverting changes.
Training on augumented user 38112 21/50 current_auc = 0.6815476190476191
User 38112 AUC after training: 0.6815476190476191
User 38112 does not improve AUC. Reverting changes.
Training on augumented user 114212 22/50 current_auc = 0.6815476190476191
User 114212 AUC after training: 0.6815476190476191
User 114212 does not improve AUC. Reverting changes.
Training on augumented user 8563 23/50 current_auc = 0.6815476190476191
User 8563 AUC after training: 0.6815476190476191
User 8563 does not improve AUC. Reverting changes.
Training on augumented user 129840 24/50 current_auc = 0.6815476190476191
User 129840 AUC after training: 0.6755952380952381
User 129840 does not improve AUC. Reverting changes.
Training on augumented user 103031 25/50 current_auc = 0.6815476190476191
User 103031 AUC after training: 0.6755952380952381
User 103031 does not improve AUC. Reverting changes.
Training on augumented user 50748 26/50 current_auc = 0.6815476190476191
User 50748 AUC after training: 0.6770833333333333
User 50748 does not improve AUC. Reverting changes.
Training on augumented user 113683 27/50 current_auc = 0.6815476190476191
User 113683 AUC after training: 0.6815476190476191
User 113683 does not improve AUC. Reverting changes.
Training on augumented user 78853 28/50 current_auc = 0.6815476190476191
User 78853 AUC after training: 0.6755952380952381
User 78853 does not improve AUC. Reverting changes.
Training on augumented user 127930 29/50 current_auc = 0.6815476190476191
User 127930 AUC after training: 0.6755952380952381
User 127930 does not improve AUC. Reverting changes.
Training on augumented user 40515 30/50 current_auc = 0.6815476190476191
User 40515 AUC after training: 0.6755952380952381
User 40515 does not improve AUC. Reverting changes.
Training on augumented user 33687 31/50 current_auc = 0.6815476190476191
User 33687 AUC after training: 0.6770833333333333
User 33687 does not improve AUC. Reverting changes.
Training on augumented user 5504 32/50 current_auc = 0.6815476190476191
User 5504 AUC after training: 0.6815476190476191
User 5504 does not improve AUC. Reverting changes.
Training on augumented user 21294 33/50 current_auc = 0.6815476190476191
User 21294 AUC after training: 0.6755952380952381
User 21294 does not improve AUC. Reverting changes.
Training on augumented user 83141 34/50 current_auc = 0.6815476190476191
User 83141 AUC after training: 0.6815476190476191
User 83141 does not improve AUC. Reverting changes.
Training on augumented user 76301 35/50 current_auc = 0.6815476190476191
User 76301 AUC after training: 0.6815476190476191
User 76301 does not improve AUC. Reverting changes.
Training on augumented user 112705 36/50 current_auc = 0.6815476190476191
User 112705 AUC after training: 0.6770833333333333
User 112705 does not improve AUC. Reverting changes.
Training on augumented user 100943 37/50 current_auc = 0.6815476190476191
User 100943 AUC after training: 0.6770833333333333
User 100943 does not improve AUC. Reverting changes.
Training on augumented user 103307 38/50 current_auc = 0.6815476190476191
User 103307 AUC after training: 0.6815476190476191
User 103307 does not improve AUC. Reverting changes.
Training on augumented user 74070 39/50 current_auc = 0.6815476190476191
User 74070 AUC after training: 0.6770833333333333
User 74070 does not improve AUC. Reverting changes.
Training on augumented user 101815 40/50 current_auc = 0.6815476190476191
User 101815 AUC after training: 0.6770833333333333
User 101815 does not improve AUC. Reverting changes.
Training on augumented user 7641 41/50 current_auc = 0.6815476190476191
User 7641 AUC after training: 0.6770833333333333
User 7641 does not improve AUC. Reverting changes.
Training on augumented user 75345 42/50 current_auc = 0.6815476190476191
User 75345 AUC after training: 0.6815476190476191
User 75345 does not improve AUC. Reverting changes.
Training on augumented user 98875 43/50 current_auc = 0.6815476190476191
User 98875 AUC after training: 0.6770833333333333
User 98875 does not improve AUC. Reverting changes.
Training on augumented user 58749 44/50 current_auc = 0.6815476190476191
User 58749 AUC after training: 0.6815476190476191
User 58749 does not improve AUC. Reverting changes.
Training on augumented user 72477 45/50 current_auc = 0.6815476190476191
User 72477 AUC after training: 0.6770833333333333
User 72477 does not improve AUC. Reverting changes.
Training on augumented user 29718 46/50 current_auc = 0.6815476190476191
User 29718 AUC after training: 0.6815476190476191
User 29718 does not improve AUC. Reverting changes.
Training on augumented user 105410 47/50 current_auc = 0.6815476190476191
User 105410 AUC after training: 0.6755952380952381
User 105410 does not improve AUC. Reverting changes.
Training on augumented user 55055 48/50 current_auc = 0.6815476190476191
User 55055 AUC after training: 0.6830357142857143
User 55055 improves AUC. Keeping the model.
Training on augumented user 61668 49/50 current_auc = 0.6830357142857143
User 61668 AUC after training: 0.6815476190476191
User 61668 does not improve AUC. Reverting changes.
[2024-12-02 19:37:29.188531] start test user 47370 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:29.642345] start test user 47370 217/568 recall augumented users by random, augumented_users = [67595, 114131, 130430, 81899, 48876, 115605, 85756, 109686, 97004, 48950, 60831, 12469, 74993, 137875, 110086, 49072, 37626, 66000, 21351, 2407, 88037, 92175, 12845, 98458, 117672, 103167, 46548, 41612, 119006, 121459, 17105, 81379, 9036, 51493, 89025, 110879, 92516, 136993, 6445, 100156, 10001, 113526, 74563, 16887, 17414, 25353, 128008, 119669, 36874, 40693]
[2024-12-02 19:37:29.657700] user = 47370 Cloud 217/568
[2024-12-02 19:37:29.668136] user = 47370 Local 217/568
[2024-12-02 19:37:29.722138] user = 47370 Local+ 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:32.129522] user = 47370 MPDA- 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5526315789473684
Training on augumented user 67595 0/50 current_auc = 0.5526315789473684
User 67595 AUC after training: 0.5502392344497608
User 67595 does not improve AUC. Reverting changes.
Training on augumented user 114131 1/50 current_auc = 0.5526315789473684
User 114131 AUC after training: 0.5526315789473684
User 114131 does not improve AUC. Reverting changes.
Training on augumented user 130430 2/50 current_auc = 0.5526315789473684
User 130430 AUC after training: 0.5454545454545454
User 130430 does not improve AUC. Reverting changes.
Training on augumented user 81899 3/50 current_auc = 0.5526315789473684
User 81899 AUC after training: 0.5550239234449761
User 81899 improves AUC. Keeping the model.
Training on augumented user 48876 4/50 current_auc = 0.5550239234449761
User 48876 AUC after training: 0.5526315789473684
User 48876 does not improve AUC. Reverting changes.
Training on augumented user 115605 5/50 current_auc = 0.5550239234449761
User 115605 AUC after training: 0.5526315789473684
User 115605 does not improve AUC. Reverting changes.
Training on augumented user 85756 6/50 current_auc = 0.5550239234449761
User 85756 AUC after training: 0.5526315789473684
User 85756 does not improve AUC. Reverting changes.
Training on augumented user 109686 7/50 current_auc = 0.5550239234449761
User 109686 AUC after training: 0.5526315789473684
User 109686 does not improve AUC. Reverting changes.
Training on augumented user 97004 8/50 current_auc = 0.5550239234449761
User 97004 AUC after training: 0.5550239234449761
User 97004 does not improve AUC. Reverting changes.
Training on augumented user 48950 9/50 current_auc = 0.5550239234449761
User 48950 AUC after training: 0.5526315789473684
User 48950 does not improve AUC. Reverting changes.
Training on augumented user 60831 10/50 current_auc = 0.5550239234449761
User 60831 AUC after training: 0.5526315789473684
User 60831 does not improve AUC. Reverting changes.
Training on augumented user 12469 11/50 current_auc = 0.5550239234449761
User 12469 AUC after training: 0.5382775119617225
User 12469 does not improve AUC. Reverting changes.
Training on augumented user 74993 12/50 current_auc = 0.5550239234449761
User 74993 AUC after training: 0.5526315789473684
User 74993 does not improve AUC. Reverting changes.
Training on augumented user 137875 13/50 current_auc = 0.5550239234449761
User 137875 AUC after training: 0.5550239234449761
User 137875 does not improve AUC. Reverting changes.
Training on augumented user 110086 14/50 current_auc = 0.5550239234449761
User 110086 AUC after training: 0.5550239234449761
User 110086 does not improve AUC. Reverting changes.
Training on augumented user 49072 15/50 current_auc = 0.5550239234449761
User 49072 AUC after training: 0.5526315789473684
User 49072 does not improve AUC. Reverting changes.
Training on augumented user 37626 16/50 current_auc = 0.5550239234449761
User 37626 AUC after training: 0.5550239234449761
User 37626 does not improve AUC. Reverting changes.
Training on augumented user 66000 17/50 current_auc = 0.5550239234449761
User 66000 AUC after training: 0.5550239234449761
User 66000 does not improve AUC. Reverting changes.
Training on augumented user 21351 18/50 current_auc = 0.5550239234449761
User 21351 AUC after training: 0.5502392344497608
User 21351 does not improve AUC. Reverting changes.
Training on augumented user 2407 19/50 current_auc = 0.5550239234449761
User 2407 AUC after training: 0.5550239234449761
User 2407 does not improve AUC. Reverting changes.
Training on augumented user 88037 20/50 current_auc = 0.5550239234449761
User 88037 AUC after training: 0.5526315789473684
User 88037 does not improve AUC. Reverting changes.
Training on augumented user 92175 21/50 current_auc = 0.5550239234449761
User 92175 AUC after training: 0.5454545454545454
User 92175 does not improve AUC. Reverting changes.
Training on augumented user 12845 22/50 current_auc = 0.5550239234449761
User 12845 AUC after training: 0.5550239234449761
User 12845 does not improve AUC. Reverting changes.
Training on augumented user 98458 23/50 current_auc = 0.5550239234449761
User 98458 AUC after training: 0.5550239234449761
User 98458 does not improve AUC. Reverting changes.
Training on augumented user 117672 24/50 current_auc = 0.5550239234449761
User 117672 AUC after training: 0.5550239234449761
User 117672 does not improve AUC. Reverting changes.
Training on augumented user 103167 25/50 current_auc = 0.5550239234449761
User 103167 AUC after training: 0.5526315789473684
User 103167 does not improve AUC. Reverting changes.
Training on augumented user 46548 26/50 current_auc = 0.5550239234449761
User 46548 AUC after training: 0.5550239234449761
User 46548 does not improve AUC. Reverting changes.
Training on augumented user 41612 27/50 current_auc = 0.5550239234449761
User 41612 AUC after training: 0.5502392344497608
User 41612 does not improve AUC. Reverting changes.
Training on augumented user 119006 28/50 current_auc = 0.5550239234449761
User 119006 AUC after training: 0.5550239234449761
User 119006 does not improve AUC. Reverting changes.
Training on augumented user 121459 29/50 current_auc = 0.5550239234449761
User 121459 AUC after training: 0.5526315789473684
User 121459 does not improve AUC. Reverting changes.
Training on augumented user 17105 30/50 current_auc = 0.5550239234449761
User 17105 AUC after training: 0.5454545454545454
User 17105 does not improve AUC. Reverting changes.
Training on augumented user 81379 31/50 current_auc = 0.5550239234449761
User 81379 AUC after training: 0.5550239234449761
User 81379 does not improve AUC. Reverting changes.
Training on augumented user 9036 32/50 current_auc = 0.5550239234449761
User 9036 AUC after training: 0.5550239234449761
User 9036 does not improve AUC. Reverting changes.
Training on augumented user 51493 33/50 current_auc = 0.5550239234449761
User 51493 AUC after training: 0.5550239234449761
User 51493 does not improve AUC. Reverting changes.
Training on augumented user 89025 34/50 current_auc = 0.5550239234449761
User 89025 AUC after training: 0.5502392344497608
User 89025 does not improve AUC. Reverting changes.
Training on augumented user 110879 35/50 current_auc = 0.5550239234449761
User 110879 AUC after training: 0.5502392344497608
User 110879 does not improve AUC. Reverting changes.
Training on augumented user 92516 36/50 current_auc = 0.5550239234449761
User 92516 AUC after training: 0.5574162679425837
User 92516 improves AUC. Keeping the model.
Training on augumented user 136993 37/50 current_auc = 0.5574162679425837
User 136993 AUC after training: 0.5574162679425837
User 136993 does not improve AUC. Reverting changes.
Training on augumented user 6445 38/50 current_auc = 0.5574162679425837
User 6445 AUC after training: 0.5574162679425838
User 6445 improves AUC. Keeping the model.
Training on augumented user 100156 39/50 current_auc = 0.5574162679425838
User 100156 AUC after training: 0.5502392344497608
User 100156 does not improve AUC. Reverting changes.
Training on augumented user 10001 40/50 current_auc = 0.5574162679425838
User 10001 AUC after training: 0.5454545454545454
User 10001 does not improve AUC. Reverting changes.
Training on augumented user 113526 41/50 current_auc = 0.5574162679425838
User 113526 AUC after training: 0.5574162679425838
User 113526 does not improve AUC. Reverting changes.
Training on augumented user 74563 42/50 current_auc = 0.5574162679425838
User 74563 AUC after training: 0.5550239234449761
User 74563 does not improve AUC. Reverting changes.
Training on augumented user 16887 43/50 current_auc = 0.5574162679425838
User 16887 AUC after training: 0.5550239234449761
User 16887 does not improve AUC. Reverting changes.
Training on augumented user 17414 44/50 current_auc = 0.5574162679425838
User 17414 AUC after training: 0.5598086124401913
User 17414 improves AUC. Keeping the model.
Training on augumented user 25353 45/50 current_auc = 0.5598086124401913
User 25353 AUC after training: 0.5598086124401913
User 25353 does not improve AUC. Reverting changes.
Training on augumented user 128008 46/50 current_auc = 0.5598086124401913
User 128008 AUC after training: 0.5574162679425837
User 128008 does not improve AUC. Reverting changes.
Training on augumented user 119669 47/50 current_auc = 0.5598086124401913
User 119669 AUC after training: 0.5574162679425837
User 119669 does not improve AUC. Reverting changes.
Training on augumented user 36874 48/50 current_auc = 0.5598086124401913
User 36874 AUC after training: 0.5526315789473684
User 36874 does not improve AUC. Reverting changes.
Training on augumented user 40693 49/50 current_auc = 0.5598086124401913
User 40693 AUC after training: 0.5574162679425837
User 40693 does not improve AUC. Reverting changes.
[2024-12-02 19:38:01.013031] start test user 47385 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:01.455834] start test user 47385 218/568 recall augumented users by random, augumented_users = [127808, 7769, 38207, 63353, 20684, 72121, 119352, 55748, 104293, 5184, 76940, 35985, 123276, 131670, 81017, 4560, 44047, 3959, 32185, 114677, 22489, 99016, 41937, 77239, 125293, 46923, 90730, 43272, 81776, 118827, 98405, 132232, 127832, 96489, 115780, 50420, 21227, 104023, 102310, 20208, 134098, 41768, 64286, 74725, 37099, 63673, 114330, 44295, 542, 50625]
[2024-12-02 19:38:01.470169] user = 47385 Cloud 218/568
[2024-12-02 19:38:01.480462] user = 47385 Local 218/568
[2024-12-02 19:38:01.500224] user = 47385 Local+ 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:03.614050] user = 47385 MPDA- 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 127808 0/50 current_auc = 0.0
User 127808 AUC after training: 0.0
User 127808 does not improve AUC. Reverting changes.
Training on augumented user 7769 1/50 current_auc = 0.0
User 7769 AUC after training: 0.0
User 7769 does not improve AUC. Reverting changes.
Training on augumented user 38207 2/50 current_auc = 0.0
User 38207 AUC after training: 0.0
User 38207 does not improve AUC. Reverting changes.
Training on augumented user 63353 3/50 current_auc = 0.0
User 63353 AUC after training: 0.0
User 63353 does not improve AUC. Reverting changes.
Training on augumented user 20684 4/50 current_auc = 0.0
User 20684 AUC after training: 0.0
User 20684 does not improve AUC. Reverting changes.
Training on augumented user 72121 5/50 current_auc = 0.0
User 72121 AUC after training: 0.0
User 72121 does not improve AUC. Reverting changes.
Training on augumented user 119352 6/50 current_auc = 0.0
User 119352 AUC after training: 0.0
User 119352 does not improve AUC. Reverting changes.
Training on augumented user 55748 7/50 current_auc = 0.0
User 55748 AUC after training: 0.0
User 55748 does not improve AUC. Reverting changes.
Training on augumented user 104293 8/50 current_auc = 0.0
User 104293 AUC after training: 0.0
User 104293 does not improve AUC. Reverting changes.
Training on augumented user 5184 9/50 current_auc = 0.0
User 5184 AUC after training: 0.0
User 5184 does not improve AUC. Reverting changes.
Training on augumented user 76940 10/50 current_auc = 0.0
User 76940 AUC after training: 0.0
User 76940 does not improve AUC. Reverting changes.
Training on augumented user 35985 11/50 current_auc = 0.0
User 35985 AUC after training: 0.0
User 35985 does not improve AUC. Reverting changes.
Training on augumented user 123276 12/50 current_auc = 0.0
User 123276 AUC after training: 0.0
User 123276 does not improve AUC. Reverting changes.
Training on augumented user 131670 13/50 current_auc = 0.0
User 131670 AUC after training: 0.0
User 131670 does not improve AUC. Reverting changes.
Training on augumented user 81017 14/50 current_auc = 0.0
User 81017 AUC after training: 0.0
User 81017 does not improve AUC. Reverting changes.
Training on augumented user 4560 15/50 current_auc = 0.0
User 4560 AUC after training: 0.0
User 4560 does not improve AUC. Reverting changes.
Training on augumented user 44047 16/50 current_auc = 0.0
User 44047 AUC after training: 0.0
User 44047 does not improve AUC. Reverting changes.
Training on augumented user 3959 17/50 current_auc = 0.0
User 3959 AUC after training: 0.0
User 3959 does not improve AUC. Reverting changes.
Training on augumented user 32185 18/50 current_auc = 0.0
User 32185 AUC after training: 0.0
User 32185 does not improve AUC. Reverting changes.
Training on augumented user 114677 19/50 current_auc = 0.0
User 114677 AUC after training: 0.0
User 114677 does not improve AUC. Reverting changes.
Training on augumented user 22489 20/50 current_auc = 0.0
User 22489 AUC after training: 0.0
User 22489 does not improve AUC. Reverting changes.
Training on augumented user 99016 21/50 current_auc = 0.0
User 99016 AUC after training: 0.0
User 99016 does not improve AUC. Reverting changes.
Training on augumented user 41937 22/50 current_auc = 0.0
User 41937 AUC after training: 0.0
User 41937 does not improve AUC. Reverting changes.
Training on augumented user 77239 23/50 current_auc = 0.0
User 77239 AUC after training: 0.0
User 77239 does not improve AUC. Reverting changes.
Training on augumented user 125293 24/50 current_auc = 0.0
User 125293 AUC after training: 0.0
User 125293 does not improve AUC. Reverting changes.
Training on augumented user 46923 25/50 current_auc = 0.0
User 46923 AUC after training: 0.0
User 46923 does not improve AUC. Reverting changes.
Training on augumented user 90730 26/50 current_auc = 0.0
User 90730 AUC after training: 0.0
User 90730 does not improve AUC. Reverting changes.
Training on augumented user 43272 27/50 current_auc = 0.0
User 43272 AUC after training: 0.0
User 43272 does not improve AUC. Reverting changes.
Training on augumented user 81776 28/50 current_auc = 0.0
User 81776 AUC after training: 0.0
User 81776 does not improve AUC. Reverting changes.
Training on augumented user 118827 29/50 current_auc = 0.0
User 118827 AUC after training: 0.0
User 118827 does not improve AUC. Reverting changes.
Training on augumented user 98405 30/50 current_auc = 0.0
User 98405 AUC after training: 0.0
User 98405 does not improve AUC. Reverting changes.
Training on augumented user 132232 31/50 current_auc = 0.0
User 132232 AUC after training: 0.0
User 132232 does not improve AUC. Reverting changes.
Training on augumented user 127832 32/50 current_auc = 0.0
User 127832 AUC after training: 0.0
User 127832 does not improve AUC. Reverting changes.
Training on augumented user 96489 33/50 current_auc = 0.0
User 96489 AUC after training: 0.0
User 96489 does not improve AUC. Reverting changes.
Training on augumented user 115780 34/50 current_auc = 0.0
User 115780 AUC after training: 0.0
User 115780 does not improve AUC. Reverting changes.
Training on augumented user 50420 35/50 current_auc = 0.0
User 50420 AUC after training: 0.0
User 50420 does not improve AUC. Reverting changes.
Training on augumented user 21227 36/50 current_auc = 0.0
User 21227 AUC after training: 0.0
User 21227 does not improve AUC. Reverting changes.
Training on augumented user 104023 37/50 current_auc = 0.0
User 104023 AUC after training: 0.0
User 104023 does not improve AUC. Reverting changes.
Training on augumented user 102310 38/50 current_auc = 0.0
User 102310 AUC after training: 0.0
User 102310 does not improve AUC. Reverting changes.
Training on augumented user 20208 39/50 current_auc = 0.0
User 20208 AUC after training: 0.0
User 20208 does not improve AUC. Reverting changes.
Training on augumented user 134098 40/50 current_auc = 0.0
User 134098 AUC after training: 0.0
User 134098 does not improve AUC. Reverting changes.
Training on augumented user 41768 41/50 current_auc = 0.0
User 41768 AUC after training: 0.0
User 41768 does not improve AUC. Reverting changes.
Training on augumented user 64286 42/50 current_auc = 0.0
User 64286 AUC after training: 0.0
User 64286 does not improve AUC. Reverting changes.
Training on augumented user 74725 43/50 current_auc = 0.0
User 74725 AUC after training: 0.0
User 74725 does not improve AUC. Reverting changes.
Training on augumented user 37099 44/50 current_auc = 0.0
User 37099 AUC after training: 0.0
User 37099 does not improve AUC. Reverting changes.
Training on augumented user 63673 45/50 current_auc = 0.0
User 63673 AUC after training: 0.0
User 63673 does not improve AUC. Reverting changes.
Training on augumented user 114330 46/50 current_auc = 0.0
User 114330 AUC after training: 0.0
User 114330 does not improve AUC. Reverting changes.
Training on augumented user 44295 47/50 current_auc = 0.0
User 44295 AUC after training: 0.0
User 44295 does not improve AUC. Reverting changes.
Training on augumented user 542 48/50 current_auc = 0.0
User 542 AUC after training: 0.0
User 542 does not improve AUC. Reverting changes.
Training on augumented user 50625 49/50 current_auc = 0.0
User 50625 AUC after training: 0.0
User 50625 does not improve AUC. Reverting changes.
[2024-12-02 19:38:27.215549] start test user 47397 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:27.494576] start test user 47397 219/568 recall augumented users by random, augumented_users = [58433, 40053, 70653, 8641, 16980, 130197, 97609, 20593, 766, 136311, 39843, 90300, 63947, 59174, 18628, 94133, 25747, 49640, 46180, 129809, 106573, 37346, 104332, 45612, 6837, 55404, 86521, 117889, 125403, 56432, 136828, 31674, 7791, 108228, 109579, 14280, 126564, 98914, 106944, 28194, 22196, 82496, 119146, 78541, 96236, 69378, 79201, 28541, 32959, 97117]
[2024-12-02 19:38:27.502076] user = 47397 Cloud 219/568
[2024-12-02 19:38:27.508082] user = 47397 Local 219/568
[2024-12-02 19:38:27.529475] user = 47397 Local+ 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:29.015832] user = 47397 MPDA- 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6931818181818182
Training on augumented user 58433 0/50 current_auc = 0.6931818181818182
User 58433 AUC after training: 0.6931818181818182
User 58433 does not improve AUC. Reverting changes.
Training on augumented user 40053 1/50 current_auc = 0.6931818181818182
User 40053 AUC after training: 0.6931818181818182
User 40053 does not improve AUC. Reverting changes.
Training on augumented user 70653 2/50 current_auc = 0.6931818181818182
User 70653 AUC after training: 0.6931818181818182
User 70653 does not improve AUC. Reverting changes.
Training on augumented user 8641 3/50 current_auc = 0.6931818181818182
User 8641 AUC after training: 0.6931818181818182
User 8641 does not improve AUC. Reverting changes.
Training on augumented user 16980 4/50 current_auc = 0.6931818181818182
User 16980 AUC after training: 0.6931818181818182
User 16980 does not improve AUC. Reverting changes.
Training on augumented user 130197 5/50 current_auc = 0.6931818181818182
User 130197 AUC after training: 0.6931818181818182
User 130197 does not improve AUC. Reverting changes.
Training on augumented user 97609 6/50 current_auc = 0.6931818181818182
User 97609 AUC after training: 0.6931818181818182
User 97609 does not improve AUC. Reverting changes.
Training on augumented user 20593 7/50 current_auc = 0.6931818181818182
User 20593 AUC after training: 0.6931818181818182
User 20593 does not improve AUC. Reverting changes.
Training on augumented user 766 8/50 current_auc = 0.6931818181818182
User 766 AUC after training: 0.6931818181818182
User 766 does not improve AUC. Reverting changes.
Training on augumented user 136311 9/50 current_auc = 0.6931818181818182
User 136311 AUC after training: 0.6931818181818182
User 136311 does not improve AUC. Reverting changes.
Training on augumented user 39843 10/50 current_auc = 0.6931818181818182
User 39843 AUC after training: 0.6931818181818182
User 39843 does not improve AUC. Reverting changes.
Training on augumented user 90300 11/50 current_auc = 0.6931818181818182
User 90300 AUC after training: 0.6931818181818182
User 90300 does not improve AUC. Reverting changes.
Training on augumented user 63947 12/50 current_auc = 0.6931818181818182
User 63947 AUC after training: 0.6931818181818182
User 63947 does not improve AUC. Reverting changes.
Training on augumented user 59174 13/50 current_auc = 0.6931818181818182
User 59174 AUC after training: 0.6931818181818182
User 59174 does not improve AUC. Reverting changes.
Training on augumented user 18628 14/50 current_auc = 0.6931818181818182
User 18628 AUC after training: 0.6874999999999999
User 18628 does not improve AUC. Reverting changes.
Training on augumented user 94133 15/50 current_auc = 0.6931818181818182
User 94133 AUC after training: 0.6931818181818182
User 94133 does not improve AUC. Reverting changes.
Training on augumented user 25747 16/50 current_auc = 0.6931818181818182
User 25747 AUC after training: 0.6931818181818182
User 25747 does not improve AUC. Reverting changes.
Training on augumented user 49640 17/50 current_auc = 0.6931818181818182
User 49640 AUC after training: 0.6931818181818182
User 49640 does not improve AUC. Reverting changes.
Training on augumented user 46180 18/50 current_auc = 0.6931818181818182
User 46180 AUC after training: 0.6931818181818182
User 46180 does not improve AUC. Reverting changes.
Training on augumented user 129809 19/50 current_auc = 0.6931818181818182
User 129809 AUC after training: 0.6931818181818182
User 129809 does not improve AUC. Reverting changes.
Training on augumented user 106573 20/50 current_auc = 0.6931818181818182
User 106573 AUC after training: 0.6931818181818182
User 106573 does not improve AUC. Reverting changes.
Training on augumented user 37346 21/50 current_auc = 0.6931818181818182
User 37346 AUC after training: 0.6931818181818182
User 37346 does not improve AUC. Reverting changes.
Training on augumented user 104332 22/50 current_auc = 0.6931818181818182
User 104332 AUC after training: 0.6931818181818182
User 104332 does not improve AUC. Reverting changes.
Training on augumented user 45612 23/50 current_auc = 0.6931818181818182
User 45612 AUC after training: 0.6931818181818182
User 45612 does not improve AUC. Reverting changes.
Training on augumented user 6837 24/50 current_auc = 0.6931818181818182
User 6837 AUC after training: 0.6931818181818182
User 6837 does not improve AUC. Reverting changes.
Training on augumented user 55404 25/50 current_auc = 0.6931818181818182
User 55404 AUC after training: 0.6931818181818182
User 55404 does not improve AUC. Reverting changes.
Training on augumented user 86521 26/50 current_auc = 0.6931818181818182
User 86521 AUC after training: 0.6931818181818182
User 86521 does not improve AUC. Reverting changes.
Training on augumented user 117889 27/50 current_auc = 0.6931818181818182
User 117889 AUC after training: 0.6931818181818182
User 117889 does not improve AUC. Reverting changes.
Training on augumented user 125403 28/50 current_auc = 0.6931818181818182
User 125403 AUC after training: 0.6931818181818182
User 125403 does not improve AUC. Reverting changes.
Training on augumented user 56432 29/50 current_auc = 0.6931818181818182
User 56432 AUC after training: 0.6931818181818182
User 56432 does not improve AUC. Reverting changes.
Training on augumented user 136828 30/50 current_auc = 0.6931818181818182
User 136828 AUC after training: 0.6875
User 136828 does not improve AUC. Reverting changes.
Training on augumented user 31674 31/50 current_auc = 0.6931818181818182
User 31674 AUC after training: 0.6931818181818182
User 31674 does not improve AUC. Reverting changes.
Training on augumented user 7791 32/50 current_auc = 0.6931818181818182
User 7791 AUC after training: 0.6931818181818182
User 7791 does not improve AUC. Reverting changes.
Training on augumented user 108228 33/50 current_auc = 0.6931818181818182
User 108228 AUC after training: 0.6931818181818182
User 108228 does not improve AUC. Reverting changes.
Training on augumented user 109579 34/50 current_auc = 0.6931818181818182
User 109579 AUC after training: 0.6931818181818182
User 109579 does not improve AUC. Reverting changes.
Training on augumented user 14280 35/50 current_auc = 0.6931818181818182
User 14280 AUC after training: 0.6931818181818182
User 14280 does not improve AUC. Reverting changes.
Training on augumented user 126564 36/50 current_auc = 0.6931818181818182
User 126564 AUC after training: 0.6931818181818182
User 126564 does not improve AUC. Reverting changes.
Training on augumented user 98914 37/50 current_auc = 0.6931818181818182
User 98914 AUC after training: 0.6931818181818182
User 98914 does not improve AUC. Reverting changes.
Training on augumented user 106944 38/50 current_auc = 0.6931818181818182
User 106944 AUC after training: 0.6931818181818182
User 106944 does not improve AUC. Reverting changes.
Training on augumented user 28194 39/50 current_auc = 0.6931818181818182
User 28194 AUC after training: 0.6931818181818182
User 28194 does not improve AUC. Reverting changes.
Training on augumented user 22196 40/50 current_auc = 0.6931818181818182
User 22196 AUC after training: 0.6931818181818182
User 22196 does not improve AUC. Reverting changes.
Training on augumented user 82496 41/50 current_auc = 0.6931818181818182
User 82496 AUC after training: 0.6931818181818182
User 82496 does not improve AUC. Reverting changes.
Training on augumented user 119146 42/50 current_auc = 0.6931818181818182
User 119146 AUC after training: 0.6931818181818182
User 119146 does not improve AUC. Reverting changes.
Training on augumented user 78541 43/50 current_auc = 0.6931818181818182
User 78541 AUC after training: 0.6931818181818182
User 78541 does not improve AUC. Reverting changes.
Training on augumented user 96236 44/50 current_auc = 0.6931818181818182
User 96236 AUC after training: 0.6931818181818182
User 96236 does not improve AUC. Reverting changes.
Training on augumented user 69378 45/50 current_auc = 0.6931818181818182
User 69378 AUC after training: 0.6931818181818182
User 69378 does not improve AUC. Reverting changes.
Training on augumented user 79201 46/50 current_auc = 0.6931818181818182
User 79201 AUC after training: 0.6931818181818182
User 79201 does not improve AUC. Reverting changes.
Training on augumented user 28541 47/50 current_auc = 0.6931818181818182
User 28541 AUC after training: 0.6931818181818182
User 28541 does not improve AUC. Reverting changes.
Training on augumented user 32959 48/50 current_auc = 0.6931818181818182
User 32959 AUC after training: 0.6931818181818182
User 32959 does not improve AUC. Reverting changes.
Training on augumented user 97117 49/50 current_auc = 0.6931818181818182
User 97117 AUC after training: 0.6931818181818182
User 97117 does not improve AUC. Reverting changes.
[2024-12-02 19:38:59.249383] start test user 47414 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:59.696524] start test user 47414 220/568 recall augumented users by random, augumented_users = [1261, 89781, 130053, 45857, 68685, 136024, 90275, 9168, 114193, 16948, 129647, 12716, 35968, 116234, 124158, 83986, 56582, 109252, 32444, 112737, 96699, 51018, 137810, 42339, 74391, 107383, 75130, 86619, 59286, 126940, 69119, 129660, 104099, 20205, 137760, 26209, 118092, 116476, 104432, 104280, 113262, 54808, 126963, 106452, 129716, 113087, 108803, 20878, 62152, 103984]
[2024-12-02 19:38:59.712537] user = 47414 Cloud 220/568
[2024-12-02 19:38:59.743017] user = 47414 Local 220/568
[2024-12-02 19:38:59.814907] user = 47414 Local+ 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:01.609506] user = 47414 MPDA- 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6566722972972974
Training on augumented user 1261 0/50 current_auc = 0.6566722972972974
User 1261 AUC after training: 0.6573057432432433
User 1261 improves AUC. Keeping the model.
Training on augumented user 89781 1/50 current_auc = 0.6573057432432433
User 89781 AUC after training: 0.6581503378378378
User 89781 improves AUC. Keeping the model.
Training on augumented user 130053 2/50 current_auc = 0.6581503378378378
User 130053 AUC after training: 0.6584084084084084
User 130053 improves AUC. Keeping the model.
Training on augumented user 45857 3/50 current_auc = 0.6584084084084084
User 45857 AUC after training: 0.6579157282282282
User 45857 does not improve AUC. Reverting changes.
Training on augumented user 68685 4/50 current_auc = 0.6584084084084084
User 68685 AUC after training: 0.6582676426426427
User 68685 does not improve AUC. Reverting changes.
Training on augumented user 136024 5/50 current_auc = 0.6584084084084084
User 136024 AUC after training: 0.6578218843843844
User 136024 does not improve AUC. Reverting changes.
Training on augumented user 90275 6/50 current_auc = 0.6584084084084084
User 90275 AUC after training: 0.6590653153153154
User 90275 improves AUC. Keeping the model.
Training on augumented user 9168 7/50 current_auc = 0.6590653153153154
User 9168 AUC after training: 0.6595345345345346
User 9168 improves AUC. Keeping the model.
Training on augumented user 114193 8/50 current_auc = 0.6595345345345346
User 114193 AUC after training: 0.6600506756756758
User 114193 improves AUC. Keeping the model.
Training on augumented user 16948 9/50 current_auc = 0.6600506756756758
User 16948 AUC after training: 0.6584787912912913
User 16948 does not improve AUC. Reverting changes.
Training on augumented user 129647 10/50 current_auc = 0.6600506756756758
User 129647 AUC after training: 0.659862987987988
User 129647 does not improve AUC. Reverting changes.
Training on augumented user 12716 11/50 current_auc = 0.6600506756756758
User 12716 AUC after training: 0.6600037537537538
User 12716 does not improve AUC. Reverting changes.
Training on augumented user 35968 12/50 current_auc = 0.6600506756756758
User 35968 AUC after training: 0.6597691441441441
User 35968 does not improve AUC. Reverting changes.
Training on augumented user 116234 13/50 current_auc = 0.6600506756756758
User 116234 AUC after training: 0.6596753003003003
User 116234 does not improve AUC. Reverting changes.
Training on augumented user 124158 14/50 current_auc = 0.6600506756756758
User 124158 AUC after training: 0.6600037537537538
User 124158 does not improve AUC. Reverting changes.
Training on augumented user 83986 15/50 current_auc = 0.6600506756756758
User 83986 AUC after training: 0.6601914414414415
User 83986 improves AUC. Keeping the model.
Training on augumented user 56582 16/50 current_auc = 0.6601914414414415
User 56582 AUC after training: 0.6602383633633634
User 56582 improves AUC. Keeping the model.
Training on augumented user 109252 17/50 current_auc = 0.6602383633633634
User 109252 AUC after training: 0.6600975975975977
User 109252 does not improve AUC. Reverting changes.
Training on augumented user 32444 18/50 current_auc = 0.6602383633633634
User 32444 AUC after training: 0.6601445195195197
User 32444 does not improve AUC. Reverting changes.
Training on augumented user 112737 19/50 current_auc = 0.6602383633633634
User 112737 AUC after training: 0.6599568318318318
User 112737 does not improve AUC. Reverting changes.
Training on augumented user 96699 20/50 current_auc = 0.6602383633633634
User 96699 AUC after training: 0.6599099099099099
User 96699 does not improve AUC. Reverting changes.
Training on augumented user 51018 21/50 current_auc = 0.6602383633633634
User 51018 AUC after training: 0.6588776276276277
User 51018 does not improve AUC. Reverting changes.
Training on augumented user 137810 22/50 current_auc = 0.6602383633633634
User 137810 AUC after training: 0.6600506756756757
User 137810 does not improve AUC. Reverting changes.
Training on augumented user 42339 23/50 current_auc = 0.6602383633633634
User 42339 AUC after training: 0.6589010885885885
User 42339 does not improve AUC. Reverting changes.
Training on augumented user 74391 24/50 current_auc = 0.6602383633633634
User 74391 AUC after training: 0.6595814564564565
User 74391 does not improve AUC. Reverting changes.
Training on augumented user 107383 25/50 current_auc = 0.6602383633633634
User 107383 AUC after training: 0.6597222222222223
User 107383 does not improve AUC. Reverting changes.
Training on augumented user 75130 26/50 current_auc = 0.6602383633633634
User 75130 AUC after training: 0.6600975975975977
User 75130 does not improve AUC. Reverting changes.
Training on augumented user 86619 27/50 current_auc = 0.6602383633633634
User 86619 AUC after training: 0.6603791291291292
User 86619 improves AUC. Keeping the model.
Training on augumented user 59286 28/50 current_auc = 0.6603791291291292
User 59286 AUC after training: 0.6600975975975976
User 59286 does not improve AUC. Reverting changes.
Training on augumented user 126940 29/50 current_auc = 0.6603791291291292
User 126940 AUC after training: 0.6599099099099099
User 126940 does not improve AUC. Reverting changes.
Training on augumented user 69119 30/50 current_auc = 0.6603791291291292
User 69119 AUC after training: 0.6601914414414415
User 69119 does not improve AUC. Reverting changes.
Training on augumented user 129660 31/50 current_auc = 0.6603791291291292
User 129660 AUC after training: 0.6602618243243242
User 129660 does not improve AUC. Reverting changes.
Training on augumented user 104099 32/50 current_auc = 0.6603791291291292
User 104099 AUC after training: 0.6597926051051052
User 104099 does not improve AUC. Reverting changes.
Training on augumented user 20205 33/50 current_auc = 0.6603791291291292
User 20205 AUC after training: 0.6597691441441441
User 20205 does not improve AUC. Reverting changes.
Training on augumented user 137760 34/50 current_auc = 0.6603791291291292
User 137760 AUC after training: 0.659862987987988
User 137760 does not improve AUC. Reverting changes.
Training on augumented user 26209 35/50 current_auc = 0.6603791291291292
User 26209 AUC after training: 0.6596283783783784
User 26209 does not improve AUC. Reverting changes.
Training on augumented user 118092 36/50 current_auc = 0.6603791291291292
User 118092 AUC after training: 0.6604260510510511
User 118092 improves AUC. Keeping the model.
Training on augumented user 116476 37/50 current_auc = 0.6604260510510511
User 116476 AUC after training: 0.6606371996996997
User 116476 improves AUC. Keeping the model.
Training on augumented user 104432 38/50 current_auc = 0.6606371996996997
User 104432 AUC after training: 0.6603791291291292
User 104432 does not improve AUC. Reverting changes.
Training on augumented user 104280 39/50 current_auc = 0.6606371996996997
User 104280 AUC after training: 0.6604964339339339
User 104280 does not improve AUC. Reverting changes.
Training on augumented user 113262 40/50 current_auc = 0.6606371996996997
User 113262 AUC after training: 0.660472972972973
User 113262 does not improve AUC. Reverting changes.
Training on augumented user 54808 41/50 current_auc = 0.6606371996996997
User 54808 AUC after training: 0.6609656531531533
User 54808 improves AUC. Keeping the model.
Training on augumented user 126963 42/50 current_auc = 0.6609656531531533
User 126963 AUC after training: 0.6607779654654655
User 126963 does not improve AUC. Reverting changes.
Training on augumented user 106452 43/50 current_auc = 0.6609656531531533
User 106452 AUC after training: 0.6611768018018018
User 106452 improves AUC. Keeping the model.
Training on augumented user 129716 44/50 current_auc = 0.6611768018018018
User 129716 AUC after training: 0.659299924924925
User 129716 does not improve AUC. Reverting changes.
Training on augumented user 113087 45/50 current_auc = 0.6611768018018018
User 113087 AUC after training: 0.6607075825825827
User 113087 does not improve AUC. Reverting changes.
Training on augumented user 108803 46/50 current_auc = 0.6611768018018018
User 108803 AUC after training: 0.6606137387387389
User 108803 does not improve AUC. Reverting changes.
Training on augumented user 20878 47/50 current_auc = 0.6611768018018018
User 20878 AUC after training: 0.6614583333333334
User 20878 improves AUC. Keeping the model.
Training on augumented user 62152 48/50 current_auc = 0.6614583333333334
User 62152 AUC after training: 0.6611298798798799
User 62152 does not improve AUC. Reverting changes.
Training on augumented user 103984 49/50 current_auc = 0.6614583333333334
User 103984 AUC after training: 0.6614583333333334
User 103984 does not improve AUC. Reverting changes.
[2024-12-02 19:39:31.400641] start test user 47421 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:31.940308] start test user 47421 221/568 recall augumented users by random, augumented_users = [135832, 50995, 14854, 97011, 72125, 74810, 35670, 116414, 138356, 115213, 24744, 19388, 71457, 11791, 22637, 62684, 86283, 91045, 48244, 71614, 4297, 79939, 25347, 25566, 107598, 74426, 60076, 23048, 42046, 102181, 128196, 66901, 92782, 26405, 79826, 54111, 114286, 98062, 42731, 115408, 111983, 17752, 93478, 134467, 101972, 36202, 24691, 100732, 131873, 105631]
[2024-12-02 19:39:31.955146] user = 47421 Cloud 221/568
[2024-12-02 19:39:31.965485] user = 47421 Local 221/568
[2024-12-02 19:39:32.014321] user = 47421 Local+ 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:33.726883] user = 47421 MPDA- 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6925925925925925
Training on augumented user 135832 0/50 current_auc = 0.6925925925925925
User 135832 AUC after training: 0.6888888888888889
User 135832 does not improve AUC. Reverting changes.
Training on augumented user 50995 1/50 current_auc = 0.6925925925925925
User 50995 AUC after training: 0.6888888888888889
User 50995 does not improve AUC. Reverting changes.
Training on augumented user 14854 2/50 current_auc = 0.6925925925925925
User 14854 AUC after training: 0.6925925925925925
User 14854 does not improve AUC. Reverting changes.
Training on augumented user 97011 3/50 current_auc = 0.6925925925925925
User 97011 AUC after training: 0.6925925925925925
User 97011 does not improve AUC. Reverting changes.
Training on augumented user 72125 4/50 current_auc = 0.6925925925925925
User 72125 AUC after training: 0.6925925925925925
User 72125 does not improve AUC. Reverting changes.
Training on augumented user 74810 5/50 current_auc = 0.6925925925925925
User 74810 AUC after training: 0.6925925925925925
User 74810 does not improve AUC. Reverting changes.
Training on augumented user 35670 6/50 current_auc = 0.6925925925925925
User 35670 AUC after training: 0.6888888888888889
User 35670 does not improve AUC. Reverting changes.
Training on augumented user 116414 7/50 current_auc = 0.6925925925925925
User 116414 AUC after training: 0.6925925925925925
User 116414 does not improve AUC. Reverting changes.
Training on augumented user 138356 8/50 current_auc = 0.6925925925925925
User 138356 AUC after training: 0.6925925925925925
User 138356 does not improve AUC. Reverting changes.
Training on augumented user 115213 9/50 current_auc = 0.6925925925925925
User 115213 AUC after training: 0.6925925925925925
User 115213 does not improve AUC. Reverting changes.
Training on augumented user 24744 10/50 current_auc = 0.6925925925925925
User 24744 AUC after training: 0.6925925925925925
User 24744 does not improve AUC. Reverting changes.
Training on augumented user 19388 11/50 current_auc = 0.6925925925925925
User 19388 AUC after training: 0.6925925925925925
User 19388 does not improve AUC. Reverting changes.
Training on augumented user 71457 12/50 current_auc = 0.6925925925925925
User 71457 AUC after training: 0.6925925925925925
User 71457 does not improve AUC. Reverting changes.
Training on augumented user 11791 13/50 current_auc = 0.6925925925925925
User 11791 AUC after training: 0.6925925925925925
User 11791 does not improve AUC. Reverting changes.
Training on augumented user 22637 14/50 current_auc = 0.6925925925925925
User 22637 AUC after training: 0.6925925925925925
User 22637 does not improve AUC. Reverting changes.
Training on augumented user 62684 15/50 current_auc = 0.6925925925925925
User 62684 AUC after training: 0.6925925925925925
User 62684 does not improve AUC. Reverting changes.
Training on augumented user 86283 16/50 current_auc = 0.6925925925925925
User 86283 AUC after training: 0.6888888888888889
User 86283 does not improve AUC. Reverting changes.
Training on augumented user 91045 17/50 current_auc = 0.6925925925925925
User 91045 AUC after training: 0.6888888888888889
User 91045 does not improve AUC. Reverting changes.
Training on augumented user 48244 18/50 current_auc = 0.6925925925925925
User 48244 AUC after training: 0.6851851851851851
User 48244 does not improve AUC. Reverting changes.
Training on augumented user 71614 19/50 current_auc = 0.6925925925925925
User 71614 AUC after training: 0.6925925925925925
User 71614 does not improve AUC. Reverting changes.
Training on augumented user 4297 20/50 current_auc = 0.6925925925925925
User 4297 AUC after training: 0.6925925925925925
User 4297 does not improve AUC. Reverting changes.
Training on augumented user 79939 21/50 current_auc = 0.6925925925925925
User 79939 AUC after training: 0.6888888888888889
User 79939 does not improve AUC. Reverting changes.
Training on augumented user 25347 22/50 current_auc = 0.6925925925925925
User 25347 AUC after training: 0.6925925925925925
User 25347 does not improve AUC. Reverting changes.
Training on augumented user 25566 23/50 current_auc = 0.6925925925925925
User 25566 AUC after training: 0.6888888888888889
User 25566 does not improve AUC. Reverting changes.
Training on augumented user 107598 24/50 current_auc = 0.6925925925925925
User 107598 AUC after training: 0.6925925925925925
User 107598 does not improve AUC. Reverting changes.
Training on augumented user 74426 25/50 current_auc = 0.6925925925925925
User 74426 AUC after training: 0.6888888888888889
User 74426 does not improve AUC. Reverting changes.
Training on augumented user 60076 26/50 current_auc = 0.6925925925925925
User 60076 AUC after training: 0.6888888888888889
User 60076 does not improve AUC. Reverting changes.
Training on augumented user 23048 27/50 current_auc = 0.6925925925925925
User 23048 AUC after training: 0.6925925925925925
User 23048 does not improve AUC. Reverting changes.
Training on augumented user 42046 28/50 current_auc = 0.6925925925925925
User 42046 AUC after training: 0.6888888888888889
User 42046 does not improve AUC. Reverting changes.
Training on augumented user 102181 29/50 current_auc = 0.6925925925925925
User 102181 AUC after training: 0.6925925925925925
User 102181 does not improve AUC. Reverting changes.
Training on augumented user 128196 30/50 current_auc = 0.6925925925925925
User 128196 AUC after training: 0.6888888888888889
User 128196 does not improve AUC. Reverting changes.
Training on augumented user 66901 31/50 current_auc = 0.6925925925925925
User 66901 AUC after training: 0.6925925925925925
User 66901 does not improve AUC. Reverting changes.
Training on augumented user 92782 32/50 current_auc = 0.6925925925925925
User 92782 AUC after training: 0.6888888888888889
User 92782 does not improve AUC. Reverting changes.
Training on augumented user 26405 33/50 current_auc = 0.6925925925925925
User 26405 AUC after training: 0.6925925925925925
User 26405 does not improve AUC. Reverting changes.
Training on augumented user 79826 34/50 current_auc = 0.6925925925925925
User 79826 AUC after training: 0.6888888888888889
User 79826 does not improve AUC. Reverting changes.
Training on augumented user 54111 35/50 current_auc = 0.6925925925925925
User 54111 AUC after training: 0.6888888888888889
User 54111 does not improve AUC. Reverting changes.
Training on augumented user 114286 36/50 current_auc = 0.6925925925925925
User 114286 AUC after training: 0.6888888888888889
User 114286 does not improve AUC. Reverting changes.
Training on augumented user 98062 37/50 current_auc = 0.6925925925925925
User 98062 AUC after training: 0.6888888888888889
User 98062 does not improve AUC. Reverting changes.
Training on augumented user 42731 38/50 current_auc = 0.6925925925925925
User 42731 AUC after training: 0.6888888888888889
User 42731 does not improve AUC. Reverting changes.
Training on augumented user 115408 39/50 current_auc = 0.6925925925925925
User 115408 AUC after training: 0.6888888888888889
User 115408 does not improve AUC. Reverting changes.
Training on augumented user 111983 40/50 current_auc = 0.6925925925925925
User 111983 AUC after training: 0.6888888888888889
User 111983 does not improve AUC. Reverting changes.
Training on augumented user 17752 41/50 current_auc = 0.6925925925925925
User 17752 AUC after training: 0.6925925925925925
User 17752 does not improve AUC. Reverting changes.
Training on augumented user 93478 42/50 current_auc = 0.6925925925925925
User 93478 AUC after training: 0.6925925925925925
User 93478 does not improve AUC. Reverting changes.
Training on augumented user 134467 43/50 current_auc = 0.6925925925925925
User 134467 AUC after training: 0.6888888888888889
User 134467 does not improve AUC. Reverting changes.
Training on augumented user 101972 44/50 current_auc = 0.6925925925925925
User 101972 AUC after training: 0.6925925925925925
User 101972 does not improve AUC. Reverting changes.
Training on augumented user 36202 45/50 current_auc = 0.6925925925925925
User 36202 AUC after training: 0.6925925925925925
User 36202 does not improve AUC. Reverting changes.
Training on augumented user 24691 46/50 current_auc = 0.6925925925925925
User 24691 AUC after training: 0.6814814814814815
User 24691 does not improve AUC. Reverting changes.
Training on augumented user 100732 47/50 current_auc = 0.6925925925925925
User 100732 AUC after training: 0.6888888888888889
User 100732 does not improve AUC. Reverting changes.
Training on augumented user 131873 48/50 current_auc = 0.6925925925925925
User 131873 AUC after training: 0.6888888888888889
User 131873 does not improve AUC. Reverting changes.
Training on augumented user 105631 49/50 current_auc = 0.6925925925925925
User 105631 AUC after training: 0.6851851851851851
User 105631 does not improve AUC. Reverting changes.
[2024-12-02 19:40:02.970617] start test user 47422 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:03.573234] start test user 47422 222/568 recall augumented users by random, augumented_users = [50831, 8871, 58986, 41007, 108501, 72945, 7956, 95683, 7556, 95911, 45195, 51784, 41984, 16439, 56205, 63254, 137283, 86972, 66015, 9183, 28478, 4803, 30319, 1741, 129743, 64442, 104084, 112906, 45625, 82457, 98733, 96305, 18485, 111124, 25200, 43937, 32903, 30398, 6427, 92781, 97938, 64382, 55856, 101619, 13327, 34174, 111789, 40838, 68892, 6341]
[2024-12-02 19:40:03.635978] user = 47422 Cloud 222/568
[2024-12-02 19:40:03.678333] user = 47422 Local 222/568
[2024-12-02 19:40:03.884009] user = 47422 Local+ 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:06.884301] user = 47422 MPDA- 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6088657105606259
Training on augumented user 50831 0/50 current_auc = 0.6088657105606259
User 50831 AUC after training: 0.6085397653194263
User 50831 does not improve AUC. Reverting changes.
Training on augumented user 8871 1/50 current_auc = 0.6088657105606259
User 8871 AUC after training: 0.6085397653194264
User 8871 does not improve AUC. Reverting changes.
Training on augumented user 58986 2/50 current_auc = 0.6088657105606259
User 58986 AUC after training: 0.6088657105606258
User 58986 does not improve AUC. Reverting changes.
Training on augumented user 41007 3/50 current_auc = 0.6088657105606259
User 41007 AUC after training: 0.6095176010430248
User 41007 improves AUC. Keeping the model.
Training on augumented user 108501 4/50 current_auc = 0.6095176010430248
User 108501 AUC after training: 0.6101694915254237
User 108501 improves AUC. Keeping the model.
Training on augumented user 72945 5/50 current_auc = 0.6101694915254237
User 72945 AUC after training: 0.6101694915254237
User 72945 does not improve AUC. Reverting changes.
Training on augumented user 7956 6/50 current_auc = 0.6101694915254237
User 7956 AUC after training: 0.6088657105606259
User 7956 does not improve AUC. Reverting changes.
Training on augumented user 95683 7/50 current_auc = 0.6101694915254237
User 95683 AUC after training: 0.6108213820078228
User 95683 improves AUC. Keeping the model.
Training on augumented user 7556 8/50 current_auc = 0.6108213820078228
User 7556 AUC after training: 0.6124511082138202
User 7556 improves AUC. Keeping the model.
Training on augumented user 95911 9/50 current_auc = 0.6124511082138202
User 95911 AUC after training: 0.6108213820078228
User 95911 does not improve AUC. Reverting changes.
Training on augumented user 45195 10/50 current_auc = 0.6124511082138202
User 45195 AUC after training: 0.6124511082138201
User 45195 does not improve AUC. Reverting changes.
Training on augumented user 51784 11/50 current_auc = 0.6124511082138202
User 51784 AUC after training: 0.6082138200782268
User 51784 does not improve AUC. Reverting changes.
Training on augumented user 41984 12/50 current_auc = 0.6124511082138202
User 41984 AUC after training: 0.6108213820078228
User 41984 does not improve AUC. Reverting changes.
Training on augumented user 16439 13/50 current_auc = 0.6124511082138202
User 16439 AUC after training: 0.6111473272490221
User 16439 does not improve AUC. Reverting changes.
Training on augumented user 56205 14/50 current_auc = 0.6124511082138202
User 56205 AUC after training: 0.6114732724902218
User 56205 does not improve AUC. Reverting changes.
Training on augumented user 63254 15/50 current_auc = 0.6124511082138202
User 63254 AUC after training: 0.6098435462842242
User 63254 does not improve AUC. Reverting changes.
Training on augumented user 137283 16/50 current_auc = 0.6124511082138202
User 137283 AUC after training: 0.6111473272490222
User 137283 does not improve AUC. Reverting changes.
Training on augumented user 86972 17/50 current_auc = 0.6124511082138202
User 86972 AUC after training: 0.6101694915254238
User 86972 does not improve AUC. Reverting changes.
Training on augumented user 66015 18/50 current_auc = 0.6124511082138202
User 66015 AUC after training: 0.6131029986962191
User 66015 improves AUC. Keeping the model.
Training on augumented user 9183 19/50 current_auc = 0.6131029986962191
User 9183 AUC after training: 0.613102998696219
User 9183 does not improve AUC. Reverting changes.
Training on augumented user 28478 20/50 current_auc = 0.6131029986962191
User 28478 AUC after training: 0.6127770534550195
User 28478 does not improve AUC. Reverting changes.
Training on augumented user 4803 21/50 current_auc = 0.6131029986962191
User 4803 AUC after training: 0.61245110821382
User 4803 does not improve AUC. Reverting changes.
Training on augumented user 30319 22/50 current_auc = 0.6131029986962191
User 30319 AUC after training: 0.6117992177314212
User 30319 does not improve AUC. Reverting changes.
Training on augumented user 1741 23/50 current_auc = 0.6131029986962191
User 1741 AUC after training: 0.6114732724902218
User 1741 does not improve AUC. Reverting changes.
Training on augumented user 129743 24/50 current_auc = 0.6131029986962191
User 129743 AUC after training: 0.6075619295958279
User 129743 does not improve AUC. Reverting changes.
Training on augumented user 64442 25/50 current_auc = 0.6131029986962191
User 64442 AUC after training: 0.6088657105606259
User 64442 does not improve AUC. Reverting changes.
Training on augumented user 104084 26/50 current_auc = 0.6131029986962191
User 104084 AUC after training: 0.6095176010430248
User 104084 does not improve AUC. Reverting changes.
Training on augumented user 112906 27/50 current_auc = 0.6131029986962191
User 112906 AUC after training: 0.6124511082138201
User 112906 does not improve AUC. Reverting changes.
Training on augumented user 45625 28/50 current_auc = 0.6131029986962191
User 45625 AUC after training: 0.6127770534550195
User 45625 does not improve AUC. Reverting changes.
Training on augumented user 82457 29/50 current_auc = 0.6131029986962191
User 82457 AUC after training: 0.6121251629726207
User 82457 does not improve AUC. Reverting changes.
Training on augumented user 98733 30/50 current_auc = 0.6131029986962191
User 98733 AUC after training: 0.6114732724902217
User 98733 does not improve AUC. Reverting changes.
Training on augumented user 96305 31/50 current_auc = 0.6131029986962191
User 96305 AUC after training: 0.6117992177314211
User 96305 does not improve AUC. Reverting changes.
Training on augumented user 18485 32/50 current_auc = 0.6131029986962191
User 18485 AUC after training: 0.6121251629726205
User 18485 does not improve AUC. Reverting changes.
Training on augumented user 111124 33/50 current_auc = 0.6131029986962191
User 111124 AUC after training: 0.6131029986962191
User 111124 does not improve AUC. Reverting changes.
Training on augumented user 25200 34/50 current_auc = 0.6131029986962191
User 25200 AUC after training: 0.6121251629726205
User 25200 does not improve AUC. Reverting changes.
Training on augumented user 43937 35/50 current_auc = 0.6131029986962191
User 43937 AUC after training: 0.6137548891786181
User 43937 improves AUC. Keeping the model.
Training on augumented user 32903 36/50 current_auc = 0.6137548891786181
User 32903 AUC after training: 0.6127770534550196
User 32903 does not improve AUC. Reverting changes.
Training on augumented user 30398 37/50 current_auc = 0.6137548891786181
User 30398 AUC after training: 0.6127770534550196
User 30398 does not improve AUC. Reverting changes.
Training on augumented user 6427 38/50 current_auc = 0.6137548891786181
User 6427 AUC after training: 0.61245110821382
User 6427 does not improve AUC. Reverting changes.
Training on augumented user 92781 39/50 current_auc = 0.6137548891786181
User 92781 AUC after training: 0.6140808344198175
User 92781 improves AUC. Keeping the model.
Training on augumented user 97938 40/50 current_auc = 0.6140808344198175
User 97938 AUC after training: 0.6085397653194263
User 97938 does not improve AUC. Reverting changes.
Training on augumented user 64382 41/50 current_auc = 0.6140808344198175
User 64382 AUC after training: 0.6134289439374185
User 64382 does not improve AUC. Reverting changes.
Training on augumented user 55856 42/50 current_auc = 0.6140808344198175
User 55856 AUC after training: 0.6121251629726207
User 55856 does not improve AUC. Reverting changes.
Training on augumented user 101619 43/50 current_auc = 0.6140808344198175
User 101619 AUC after training: 0.6124511082138201
User 101619 does not improve AUC. Reverting changes.
Training on augumented user 13327 44/50 current_auc = 0.6140808344198175
User 13327 AUC after training: 0.6134289439374185
User 13327 does not improve AUC. Reverting changes.
Training on augumented user 34174 45/50 current_auc = 0.6140808344198175
User 34174 AUC after training: 0.6131029986962191
User 34174 does not improve AUC. Reverting changes.
Training on augumented user 111789 46/50 current_auc = 0.6140808344198175
User 111789 AUC after training: 0.6121251629726207
User 111789 does not improve AUC. Reverting changes.
Training on augumented user 40838 47/50 current_auc = 0.6140808344198175
User 40838 AUC after training: 0.6134289439374186
User 40838 does not improve AUC. Reverting changes.
Training on augumented user 68892 48/50 current_auc = 0.6140808344198175
User 68892 AUC after training: 0.61245110821382
User 68892 does not improve AUC. Reverting changes.
Training on augumented user 6341 49/50 current_auc = 0.6140808344198175
User 6341 AUC after training: 0.6124511082138202
User 6341 does not improve AUC. Reverting changes.
[2024-12-02 19:40:39.111998] start test user 47476 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:39.812439] start test user 47476 223/568 recall augumented users by random, augumented_users = [63502, 68421, 22959, 50124, 41245, 56473, 8402, 95508, 29147, 125024, 92635, 57648, 67224, 45347, 33568, 93522, 133433, 111439, 97460, 130168, 77209, 126383, 71922, 106232, 102884, 69231, 76668, 130775, 55791, 85158, 123282, 119078, 28172, 94548, 102090, 84013, 126304, 91397, 104667, 78232, 14322, 62029, 22114, 21073, 43014, 132280, 123069, 95848, 114885, 34529]
[2024-12-02 19:40:39.829025] user = 47476 Cloud 223/568
[2024-12-02 19:40:39.843572] user = 47476 Local 223/568
[2024-12-02 19:40:40.064579] user = 47476 Local+ 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:42.379864] user = 47476 MPDA- 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7777777777777778
Training on augumented user 63502 0/50 current_auc = 0.7777777777777778
User 63502 AUC after training: 0.7777777777777778
User 63502 does not improve AUC. Reverting changes.
Training on augumented user 68421 1/50 current_auc = 0.7777777777777778
User 68421 AUC after training: 0.7777777777777778
User 68421 does not improve AUC. Reverting changes.
Training on augumented user 22959 2/50 current_auc = 0.7777777777777778
User 22959 AUC after training: 0.7777777777777778
User 22959 does not improve AUC. Reverting changes.
Training on augumented user 50124 3/50 current_auc = 0.7777777777777778
User 50124 AUC after training: 0.7764705882352941
User 50124 does not improve AUC. Reverting changes.
Training on augumented user 41245 4/50 current_auc = 0.7777777777777778
User 41245 AUC after training: 0.7777777777777778
User 41245 does not improve AUC. Reverting changes.
Training on augumented user 56473 5/50 current_auc = 0.7777777777777778
User 56473 AUC after training: 0.777124183006536
User 56473 does not improve AUC. Reverting changes.
Training on augumented user 8402 6/50 current_auc = 0.7777777777777778
User 8402 AUC after training: 0.7777777777777778
User 8402 does not improve AUC. Reverting changes.
Training on augumented user 95508 7/50 current_auc = 0.7777777777777778
User 95508 AUC after training: 0.7777777777777778
User 95508 does not improve AUC. Reverting changes.
Training on augumented user 29147 8/50 current_auc = 0.7777777777777778
User 29147 AUC after training: 0.7790849673202614
User 29147 improves AUC. Keeping the model.
Training on augumented user 125024 9/50 current_auc = 0.7790849673202614
User 125024 AUC after training: 0.7777777777777778
User 125024 does not improve AUC. Reverting changes.
Training on augumented user 92635 10/50 current_auc = 0.7790849673202614
User 92635 AUC after training: 0.7784313725490196
User 92635 does not improve AUC. Reverting changes.
Training on augumented user 57648 11/50 current_auc = 0.7790849673202614
User 57648 AUC after training: 0.7790849673202614
User 57648 does not improve AUC. Reverting changes.
Training on augumented user 67224 12/50 current_auc = 0.7790849673202614
User 67224 AUC after training: 0.7790849673202614
User 67224 does not improve AUC. Reverting changes.
Training on augumented user 45347 13/50 current_auc = 0.7790849673202614
User 45347 AUC after training: 0.7784313725490196
User 45347 does not improve AUC. Reverting changes.
Training on augumented user 33568 14/50 current_auc = 0.7790849673202614
User 33568 AUC after training: 0.7784313725490196
User 33568 does not improve AUC. Reverting changes.
Training on augumented user 93522 15/50 current_auc = 0.7790849673202614
User 93522 AUC after training: 0.7797385620915033
User 93522 improves AUC. Keeping the model.
Training on augumented user 133433 16/50 current_auc = 0.7797385620915033
User 133433 AUC after training: 0.7777777777777778
User 133433 does not improve AUC. Reverting changes.
Training on augumented user 111439 17/50 current_auc = 0.7797385620915033
User 111439 AUC after training: 0.7797385620915033
User 111439 does not improve AUC. Reverting changes.
Training on augumented user 97460 18/50 current_auc = 0.7797385620915033
User 97460 AUC after training: 0.7797385620915033
User 97460 does not improve AUC. Reverting changes.
Training on augumented user 130168 19/50 current_auc = 0.7797385620915033
User 130168 AUC after training: 0.7790849673202614
User 130168 does not improve AUC. Reverting changes.
Training on augumented user 77209 20/50 current_auc = 0.7797385620915033
User 77209 AUC after training: 0.7784313725490196
User 77209 does not improve AUC. Reverting changes.
Training on augumented user 126383 21/50 current_auc = 0.7797385620915033
User 126383 AUC after training: 0.7797385620915033
User 126383 does not improve AUC. Reverting changes.
Training on augumented user 71922 22/50 current_auc = 0.7797385620915033
User 71922 AUC after training: 0.7797385620915033
User 71922 does not improve AUC. Reverting changes.
Training on augumented user 106232 23/50 current_auc = 0.7797385620915033
User 106232 AUC after training: 0.7797385620915033
User 106232 does not improve AUC. Reverting changes.
Training on augumented user 102884 24/50 current_auc = 0.7797385620915033
User 102884 AUC after training: 0.7790849673202614
User 102884 does not improve AUC. Reverting changes.
Training on augumented user 69231 25/50 current_auc = 0.7797385620915033
User 69231 AUC after training: 0.7790849673202614
User 69231 does not improve AUC. Reverting changes.
Training on augumented user 76668 26/50 current_auc = 0.7797385620915033
User 76668 AUC after training: 0.7790849673202614
User 76668 does not improve AUC. Reverting changes.
Training on augumented user 130775 27/50 current_auc = 0.7797385620915033
User 130775 AUC after training: 0.7797385620915033
User 130775 does not improve AUC. Reverting changes.
Training on augumented user 55791 28/50 current_auc = 0.7797385620915033
User 55791 AUC after training: 0.7797385620915033
User 55791 does not improve AUC. Reverting changes.
Training on augumented user 85158 29/50 current_auc = 0.7797385620915033
User 85158 AUC after training: 0.7790849673202614
User 85158 does not improve AUC. Reverting changes.
Training on augumented user 123282 30/50 current_auc = 0.7797385620915033
User 123282 AUC after training: 0.7797385620915033
User 123282 does not improve AUC. Reverting changes.
Training on augumented user 119078 31/50 current_auc = 0.7797385620915033
User 119078 AUC after training: 0.7784313725490196
User 119078 does not improve AUC. Reverting changes.
Training on augumented user 28172 32/50 current_auc = 0.7797385620915033
User 28172 AUC after training: 0.7797385620915033
User 28172 does not improve AUC. Reverting changes.
Training on augumented user 94548 33/50 current_auc = 0.7797385620915033
User 94548 AUC after training: 0.7790849673202614
User 94548 does not improve AUC. Reverting changes.
Training on augumented user 102090 34/50 current_auc = 0.7797385620915033
User 102090 AUC after training: 0.7790849673202614
User 102090 does not improve AUC. Reverting changes.
Training on augumented user 84013 35/50 current_auc = 0.7797385620915033
User 84013 AUC after training: 0.7797385620915033
User 84013 does not improve AUC. Reverting changes.
Training on augumented user 126304 36/50 current_auc = 0.7797385620915033
User 126304 AUC after training: 0.7777777777777778
User 126304 does not improve AUC. Reverting changes.
Training on augumented user 91397 37/50 current_auc = 0.7797385620915033
User 91397 AUC after training: 0.7797385620915033
User 91397 does not improve AUC. Reverting changes.
Training on augumented user 104667 38/50 current_auc = 0.7797385620915033
User 104667 AUC after training: 0.7797385620915033
User 104667 does not improve AUC. Reverting changes.
Training on augumented user 78232 39/50 current_auc = 0.7797385620915033
User 78232 AUC after training: 0.7784313725490196
User 78232 does not improve AUC. Reverting changes.
Training on augumented user 14322 40/50 current_auc = 0.7797385620915033
User 14322 AUC after training: 0.7790849673202614
User 14322 does not improve AUC. Reverting changes.
Training on augumented user 62029 41/50 current_auc = 0.7797385620915033
User 62029 AUC after training: 0.7784313725490196
User 62029 does not improve AUC. Reverting changes.
Training on augumented user 22114 42/50 current_auc = 0.7797385620915033
User 22114 AUC after training: 0.7784313725490196
User 22114 does not improve AUC. Reverting changes.
Training on augumented user 21073 43/50 current_auc = 0.7797385620915033
User 21073 AUC after training: 0.7797385620915033
User 21073 does not improve AUC. Reverting changes.
Training on augumented user 43014 44/50 current_auc = 0.7797385620915033
User 43014 AUC after training: 0.7784313725490196
User 43014 does not improve AUC. Reverting changes.
Training on augumented user 132280 45/50 current_auc = 0.7797385620915033
User 132280 AUC after training: 0.7790849673202614
User 132280 does not improve AUC. Reverting changes.
Training on augumented user 123069 46/50 current_auc = 0.7797385620915033
User 123069 AUC after training: 0.7790849673202614
User 123069 does not improve AUC. Reverting changes.
Training on augumented user 95848 47/50 current_auc = 0.7797385620915033
User 95848 AUC after training: 0.7784313725490196
User 95848 does not improve AUC. Reverting changes.
Training on augumented user 114885 48/50 current_auc = 0.7797385620915033
User 114885 AUC after training: 0.7797385620915033
User 114885 does not improve AUC. Reverting changes.
Training on augumented user 34529 49/50 current_auc = 0.7797385620915033
User 34529 AUC after training: 0.7790849673202614
User 34529 does not improve AUC. Reverting changes.
[2024-12-02 19:41:15.489647] start test user 47507 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:16.086248] start test user 47507 224/568 recall augumented users by random, augumented_users = [44977, 133974, 18866, 56182, 117366, 68263, 31234, 111374, 63752, 99852, 2919, 95028, 101647, 102163, 92319, 137899, 84469, 135720, 8653, 57315, 6022, 79293, 3810, 70667, 129400, 120113, 27086, 119975, 81456, 80664, 103467, 26310, 119589, 82169, 115285, 106728, 37589, 762, 20516, 17104, 94810, 111920, 77827, 18202, 128142, 31032, 128121, 120732, 101459, 92120]
[2024-12-02 19:41:16.100983] user = 47507 Cloud 224/568
[2024-12-02 19:41:16.110563] user = 47507 Local 224/568
[2024-12-02 19:41:16.158996] user = 47507 Local+ 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:18.918841] user = 47507 MPDA- 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 44977 0/50 current_auc = 0.375
User 44977 AUC after training: 0.375
User 44977 does not improve AUC. Reverting changes.
Training on augumented user 133974 1/50 current_auc = 0.375
User 133974 AUC after training: 0.375
User 133974 does not improve AUC. Reverting changes.
Training on augumented user 18866 2/50 current_auc = 0.375
User 18866 AUC after training: 0.375
User 18866 does not improve AUC. Reverting changes.
Training on augumented user 56182 3/50 current_auc = 0.375
User 56182 AUC after training: 0.375
User 56182 does not improve AUC. Reverting changes.
Training on augumented user 117366 4/50 current_auc = 0.375
User 117366 AUC after training: 0.375
User 117366 does not improve AUC. Reverting changes.
Training on augumented user 68263 5/50 current_auc = 0.375
User 68263 AUC after training: 0.375
User 68263 does not improve AUC. Reverting changes.
Training on augumented user 31234 6/50 current_auc = 0.375
User 31234 AUC after training: 0.375
User 31234 does not improve AUC. Reverting changes.
Training on augumented user 111374 7/50 current_auc = 0.375
User 111374 AUC after training: 0.375
User 111374 does not improve AUC. Reverting changes.
Training on augumented user 63752 8/50 current_auc = 0.375
User 63752 AUC after training: 0.375
User 63752 does not improve AUC. Reverting changes.
Training on augumented user 99852 9/50 current_auc = 0.375
User 99852 AUC after training: 0.375
User 99852 does not improve AUC. Reverting changes.
Training on augumented user 2919 10/50 current_auc = 0.375
User 2919 AUC after training: 0.375
User 2919 does not improve AUC. Reverting changes.
Training on augumented user 95028 11/50 current_auc = 0.375
User 95028 AUC after training: 0.375
User 95028 does not improve AUC. Reverting changes.
Training on augumented user 101647 12/50 current_auc = 0.375
User 101647 AUC after training: 0.375
User 101647 does not improve AUC. Reverting changes.
Training on augumented user 102163 13/50 current_auc = 0.375
User 102163 AUC after training: 0.375
User 102163 does not improve AUC. Reverting changes.
Training on augumented user 92319 14/50 current_auc = 0.375
User 92319 AUC after training: 0.375
User 92319 does not improve AUC. Reverting changes.
Training on augumented user 137899 15/50 current_auc = 0.375
User 137899 AUC after training: 0.375
User 137899 does not improve AUC. Reverting changes.
Training on augumented user 84469 16/50 current_auc = 0.375
User 84469 AUC after training: 0.375
User 84469 does not improve AUC. Reverting changes.
Training on augumented user 135720 17/50 current_auc = 0.375
User 135720 AUC after training: 0.375
User 135720 does not improve AUC. Reverting changes.
Training on augumented user 8653 18/50 current_auc = 0.375
User 8653 AUC after training: 0.375
User 8653 does not improve AUC. Reverting changes.
Training on augumented user 57315 19/50 current_auc = 0.375
User 57315 AUC after training: 0.375
User 57315 does not improve AUC. Reverting changes.
Training on augumented user 6022 20/50 current_auc = 0.375
User 6022 AUC after training: 0.375
User 6022 does not improve AUC. Reverting changes.
Training on augumented user 79293 21/50 current_auc = 0.375
User 79293 AUC after training: 0.375
User 79293 does not improve AUC. Reverting changes.
Training on augumented user 3810 22/50 current_auc = 0.375
User 3810 AUC after training: 0.375
User 3810 does not improve AUC. Reverting changes.
Training on augumented user 70667 23/50 current_auc = 0.375
User 70667 AUC after training: 0.375
User 70667 does not improve AUC. Reverting changes.
Training on augumented user 129400 24/50 current_auc = 0.375
User 129400 AUC after training: 0.375
User 129400 does not improve AUC. Reverting changes.
Training on augumented user 120113 25/50 current_auc = 0.375
User 120113 AUC after training: 0.375
User 120113 does not improve AUC. Reverting changes.
Training on augumented user 27086 26/50 current_auc = 0.375
User 27086 AUC after training: 0.375
User 27086 does not improve AUC. Reverting changes.
Training on augumented user 119975 27/50 current_auc = 0.375
User 119975 AUC after training: 0.375
User 119975 does not improve AUC. Reverting changes.
Training on augumented user 81456 28/50 current_auc = 0.375
User 81456 AUC after training: 0.375
User 81456 does not improve AUC. Reverting changes.
Training on augumented user 80664 29/50 current_auc = 0.375
User 80664 AUC after training: 0.375
User 80664 does not improve AUC. Reverting changes.
Training on augumented user 103467 30/50 current_auc = 0.375
User 103467 AUC after training: 0.375
User 103467 does not improve AUC. Reverting changes.
Training on augumented user 26310 31/50 current_auc = 0.375
User 26310 AUC after training: 0.375
User 26310 does not improve AUC. Reverting changes.
Training on augumented user 119589 32/50 current_auc = 0.375
User 119589 AUC after training: 0.375
User 119589 does not improve AUC. Reverting changes.
Training on augumented user 82169 33/50 current_auc = 0.375
User 82169 AUC after training: 0.375
User 82169 does not improve AUC. Reverting changes.
Training on augumented user 115285 34/50 current_auc = 0.375
User 115285 AUC after training: 0.375
User 115285 does not improve AUC. Reverting changes.
Training on augumented user 106728 35/50 current_auc = 0.375
User 106728 AUC after training: 0.375
User 106728 does not improve AUC. Reverting changes.
Training on augumented user 37589 36/50 current_auc = 0.375
User 37589 AUC after training: 0.375
User 37589 does not improve AUC. Reverting changes.
Training on augumented user 762 37/50 current_auc = 0.375
User 762 AUC after training: 0.375
User 762 does not improve AUC. Reverting changes.
Training on augumented user 20516 38/50 current_auc = 0.375
User 20516 AUC after training: 0.375
User 20516 does not improve AUC. Reverting changes.
Training on augumented user 17104 39/50 current_auc = 0.375
User 17104 AUC after training: 0.375
User 17104 does not improve AUC. Reverting changes.
Training on augumented user 94810 40/50 current_auc = 0.375
User 94810 AUC after training: 0.375
User 94810 does not improve AUC. Reverting changes.
Training on augumented user 111920 41/50 current_auc = 0.375
User 111920 AUC after training: 0.375
User 111920 does not improve AUC. Reverting changes.
Training on augumented user 77827 42/50 current_auc = 0.375
User 77827 AUC after training: 0.375
User 77827 does not improve AUC. Reverting changes.
Training on augumented user 18202 43/50 current_auc = 0.375
User 18202 AUC after training: 0.375
User 18202 does not improve AUC. Reverting changes.
Training on augumented user 128142 44/50 current_auc = 0.375
User 128142 AUC after training: 0.375
User 128142 does not improve AUC. Reverting changes.
Training on augumented user 31032 45/50 current_auc = 0.375
User 31032 AUC after training: 0.375
User 31032 does not improve AUC. Reverting changes.
Training on augumented user 128121 46/50 current_auc = 0.375
User 128121 AUC after training: 0.375
User 128121 does not improve AUC. Reverting changes.
Training on augumented user 120732 47/50 current_auc = 0.375
User 120732 AUC after training: 0.375
User 120732 does not improve AUC. Reverting changes.
Training on augumented user 101459 48/50 current_auc = 0.375
User 101459 AUC after training: 0.375
User 101459 does not improve AUC. Reverting changes.
Training on augumented user 92120 49/50 current_auc = 0.375
User 92120 AUC after training: 0.375
User 92120 does not improve AUC. Reverting changes.
[2024-12-02 19:41:44.162704] start test user 47594 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:44.592916] start test user 47594 225/568 recall augumented users by random, augumented_users = [56222, 121380, 126305, 129205, 84299, 81488, 136389, 37203, 119722, 15874, 56948, 134153, 27057, 38451, 35431, 60825, 120829, 37907, 67604, 76923, 41111, 87019, 96189, 129512, 113623, 25163, 90597, 123790, 47099, 78240, 24897, 101043, 114465, 103279, 48547, 116664, 116976, 89070, 25287, 108541, 97826, 135225, 107221, 127485, 4832, 80238, 77873, 94487, 35590, 37142]
[2024-12-02 19:41:44.608589] user = 47594 Cloud 225/568
[2024-12-02 19:41:44.645241] user = 47594 Local 225/568
[2024-12-02 19:41:44.677451] user = 47594 Local+ 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:47.238829] user = 47594 MPDA- 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4577221742881795
Training on augumented user 56222 0/50 current_auc = 0.4577221742881795
User 56222 AUC after training: 0.4588315049919882
User 56222 improves AUC. Keeping the model.
Training on augumented user 121380 1/50 current_auc = 0.4588315049919882
User 121380 AUC after training: 0.45852335757426355
User 121380 does not improve AUC. Reverting changes.
Training on augumented user 126305 2/50 current_auc = 0.4588315049919882
User 126305 AUC after training: 0.45944779982743744
User 126305 improves AUC. Keeping the model.
Training on augumented user 129205 3/50 current_auc = 0.45944779982743744
User 129205 AUC after training: 0.45907802292616784
User 129205 does not improve AUC. Reverting changes.
Training on augumented user 84299 4/50 current_auc = 0.45944779982743744
User 84299 AUC after training: 0.4587082460248983
User 84299 does not improve AUC. Reverting changes.
Training on augumented user 81488 5/50 current_auc = 0.45944779982743744
User 81488 AUC after training: 0.4595710587945273
User 81488 improves AUC. Keeping the model.
Training on augumented user 136389 6/50 current_auc = 0.4595710587945273
User 136389 AUC after training: 0.46006409466288667
User 136389 improves AUC. Keeping the model.
Training on augumented user 37203 7/50 current_auc = 0.46006409466288667
User 37203 AUC after training: 0.4596943177616171
User 37203 does not improve AUC. Reverting changes.
Training on augumented user 119722 8/50 current_auc = 0.46006409466288667
User 119722 AUC after training: 0.4598792062122519
User 119722 does not improve AUC. Reverting changes.
Training on augumented user 15874 9/50 current_auc = 0.46006409466288667
User 15874 AUC after training: 0.46043387156415627
User 15874 improves AUC. Keeping the model.
Training on augumented user 56948 10/50 current_auc = 0.46043387156415627
User 56948 AUC after training: 0.46092690743251574
User 56948 improves AUC. Keeping the model.
Training on augumented user 134153 11/50 current_auc = 0.46092690743251574
User 134153 AUC after training: 0.45981757672870704
User 134153 does not improve AUC. Reverting changes.
Training on augumented user 27057 12/50 current_auc = 0.46092690743251574
User 27057 AUC after training: 0.4611117958831505
User 27057 improves AUC. Keeping the model.
Training on augumented user 38451 13/50 current_auc = 0.4611117958831505
User 38451 AUC after training: 0.4603722420806114
User 38451 does not improve AUC. Reverting changes.
Training on augumented user 35431 14/50 current_auc = 0.4611117958831505
User 35431 AUC after training: 0.4596943177616172
User 35431 does not improve AUC. Reverting changes.
Training on augumented user 60825 15/50 current_auc = 0.4611117958831505
User 60825 AUC after training: 0.459879206212252
User 60825 does not improve AUC. Reverting changes.
Training on augumented user 120829 16/50 current_auc = 0.4611117958831505
User 120829 AUC after training: 0.4595094293109824
User 120829 does not improve AUC. Reverting changes.
Training on augumented user 37907 17/50 current_auc = 0.4611117958831505
User 37907 AUC after training: 0.4609269074325157
User 37907 does not improve AUC. Reverting changes.
Training on augumented user 67604 18/50 current_auc = 0.4611117958831505
User 67604 AUC after training: 0.45772217428817946
User 67604 does not improve AUC. Reverting changes.
Training on augumented user 76923 19/50 current_auc = 0.4611117958831505
User 76923 AUC after training: 0.46055713053124614
User 76923 does not improve AUC. Reverting changes.
Training on augumented user 41111 20/50 current_auc = 0.4611117958831505
User 41111 AUC after training: 0.4601873536299766
User 41111 does not improve AUC. Reverting changes.
Training on augumented user 87019 21/50 current_auc = 0.4611117958831505
User 87019 AUC after training: 0.46123505485024036
User 87019 improves AUC. Keeping the model.
Training on augumented user 96189 22/50 current_auc = 0.46123505485024036
User 96189 AUC after training: 0.45932454086034763
User 96189 does not improve AUC. Reverting changes.
Training on augumented user 129512 23/50 current_auc = 0.46123505485024036
User 129512 AUC after training: 0.4588931344755331
User 129512 does not improve AUC. Reverting changes.
Training on augumented user 113623 24/50 current_auc = 0.46123505485024036
User 113623 AUC after training: 0.461543202267965
User 113623 improves AUC. Keeping the model.
Training on augumented user 25163 25/50 current_auc = 0.461543202267965
User 25163 AUC after training: 0.4617280907185998
User 25163 improves AUC. Keeping the model.
Training on augumented user 90597 26/50 current_auc = 0.4617280907185998
User 90597 AUC after training: 0.4612350548502403
User 90597 does not improve AUC. Reverting changes.
Training on augumented user 123790 27/50 current_auc = 0.4617280907185998
User 123790 AUC after training: 0.4614199433008752
User 123790 does not improve AUC. Reverting changes.
Training on augumented user 47099 28/50 current_auc = 0.4617280907185998
User 47099 AUC after training: 0.4619129791692346
User 47099 improves AUC. Keeping the model.
Training on augumented user 78240 29/50 current_auc = 0.4619129791692346
User 78240 AUC after training: 0.46160483175150996
User 78240 does not improve AUC. Reverting changes.
Training on augumented user 24897 30/50 current_auc = 0.4619129791692346
User 24897 AUC after training: 0.46148157278442004
User 24897 does not improve AUC. Reverting changes.
Training on augumented user 101043 31/50 current_auc = 0.4619129791692346
User 101043 AUC after training: 0.460680389498336
User 101043 does not improve AUC. Reverting changes.
Training on augumented user 114465 32/50 current_auc = 0.4619129791692346
User 114465 AUC after training: 0.46123505485024036
User 114465 does not improve AUC. Reverting changes.
Training on augumented user 103279 33/50 current_auc = 0.4619129791692346
User 103279 AUC after training: 0.46111179588315054
User 103279 does not improve AUC. Reverting changes.
Training on augumented user 48547 34/50 current_auc = 0.4619129791692346
User 48547 AUC after training: 0.46031061259706646
User 48547 does not improve AUC. Reverting changes.
Training on augumented user 116664 35/50 current_auc = 0.4619129791692346
User 116664 AUC after training: 0.4616664612350549
User 116664 does not improve AUC. Reverting changes.
Training on augumented user 116976 36/50 current_auc = 0.4619129791692346
User 116976 AUC after training: 0.46055713053124614
User 116976 does not improve AUC. Reverting changes.
Training on augumented user 89070 37/50 current_auc = 0.4619129791692346
User 89070 AUC after training: 0.4609885369160607
User 89070 does not improve AUC. Reverting changes.
Training on augumented user 25287 38/50 current_auc = 0.4619129791692346
User 25287 AUC after training: 0.4609885369160607
User 25287 does not improve AUC. Reverting changes.
Training on augumented user 108541 39/50 current_auc = 0.4619129791692346
User 108541 AUC after training: 0.46074201898188094
User 108541 does not improve AUC. Reverting changes.
Training on augumented user 97826 40/50 current_auc = 0.4619129791692346
User 97826 AUC after training: 0.46055713053124614
User 97826 does not improve AUC. Reverting changes.
Training on augumented user 135225 41/50 current_auc = 0.4619129791692346
User 135225 AUC after training: 0.4620978676198694
User 135225 improves AUC. Keeping the model.
Training on augumented user 107221 42/50 current_auc = 0.4620978676198694
User 107221 AUC after training: 0.46105016639960555
User 107221 does not improve AUC. Reverting changes.
Training on augumented user 127485 43/50 current_auc = 0.4620978676198694
User 127485 AUC after training: 0.46252927400468385
User 127485 improves AUC. Keeping the model.
Training on augumented user 4832 44/50 current_auc = 0.46252927400468385
User 4832 AUC after training: 0.46191297916923457
User 4832 does not improve AUC. Reverting changes.
Training on augumented user 80238 45/50 current_auc = 0.46252927400468385
User 80238 AUC after training: 0.46215949710341425
User 80238 does not improve AUC. Reverting changes.
Training on augumented user 77873 46/50 current_auc = 0.46252927400468385
User 77873 AUC after training: 0.4593861703438925
User 77873 does not improve AUC. Reverting changes.
Training on augumented user 94487 47/50 current_auc = 0.46252927400468385
User 94487 AUC after training: 0.46302230987304327
User 94487 improves AUC. Keeping the model.
Training on augumented user 35590 48/50 current_auc = 0.46302230987304327
User 35590 AUC after training: 0.46185134968568975
User 35590 does not improve AUC. Reverting changes.
Training on augumented user 37142 49/50 current_auc = 0.46302230987304327
User 37142 AUC after training: 0.46234438555404905
User 37142 does not improve AUC. Reverting changes.
[2024-12-02 19:42:20.505742] start test user 47620 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:20.975136] start test user 47620 226/568 recall augumented users by random, augumented_users = [99619, 108712, 34743, 68699, 33715, 31063, 46129, 86373, 27200, 30337, 31155, 65229, 52030, 117658, 37135, 6442, 58502, 129595, 105135, 63, 26041, 107448, 70428, 21322, 80406, 55881, 6410, 97619, 30875, 42727, 108314, 66327, 11539, 113993, 92813, 138092, 2177, 68879, 103256, 103078, 53505, 96801, 51077, 40238, 86230, 20674, 106201, 65443, 77540, 20914]
[2024-12-02 19:42:20.989904] user = 47620 Cloud 226/568
[2024-12-02 19:42:21.019384] user = 47620 Local 226/568
[2024-12-02 19:42:21.050552] user = 47620 Local+ 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:22.879563] user = 47620 MPDA- 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6413127413127414
Training on augumented user 99619 0/50 current_auc = 0.6413127413127414
User 99619 AUC after training: 0.6428571428571429
User 99619 improves AUC. Keeping the model.
Training on augumented user 108712 1/50 current_auc = 0.6428571428571429
User 108712 AUC after training: 0.6424710424710425
User 108712 does not improve AUC. Reverting changes.
Training on augumented user 34743 2/50 current_auc = 0.6428571428571429
User 34743 AUC after training: 0.6424710424710424
User 34743 does not improve AUC. Reverting changes.
Training on augumented user 68699 3/50 current_auc = 0.6428571428571429
User 68699 AUC after training: 0.6455598455598455
User 68699 improves AUC. Keeping the model.
Training on augumented user 33715 4/50 current_auc = 0.6455598455598455
User 33715 AUC after training: 0.644015444015444
User 33715 does not improve AUC. Reverting changes.
Training on augumented user 31063 5/50 current_auc = 0.6455598455598455
User 31063 AUC after training: 0.6451737451737452
User 31063 does not improve AUC. Reverting changes.
Training on augumented user 46129 6/50 current_auc = 0.6455598455598455
User 46129 AUC after training: 0.6455598455598456
User 46129 improves AUC. Keeping the model.
Training on augumented user 86373 7/50 current_auc = 0.6455598455598456
User 86373 AUC after training: 0.6451737451737452
User 86373 does not improve AUC. Reverting changes.
Training on augumented user 27200 8/50 current_auc = 0.6455598455598456
User 27200 AUC after training: 0.6444015444015444
User 27200 does not improve AUC. Reverting changes.
Training on augumented user 30337 9/50 current_auc = 0.6455598455598456
User 30337 AUC after training: 0.6463320463320464
User 30337 improves AUC. Keeping the model.
Training on augumented user 31155 10/50 current_auc = 0.6463320463320464
User 31155 AUC after training: 0.6444015444015444
User 31155 does not improve AUC. Reverting changes.
Training on augumented user 65229 11/50 current_auc = 0.6463320463320464
User 65229 AUC after training: 0.6447876447876448
User 65229 does not improve AUC. Reverting changes.
Training on augumented user 52030 12/50 current_auc = 0.6463320463320464
User 52030 AUC after training: 0.645945945945946
User 52030 does not improve AUC. Reverting changes.
Training on augumented user 117658 13/50 current_auc = 0.6463320463320464
User 117658 AUC after training: 0.6451737451737452
User 117658 does not improve AUC. Reverting changes.
Training on augumented user 37135 14/50 current_auc = 0.6463320463320464
User 37135 AUC after training: 0.6447876447876448
User 37135 does not improve AUC. Reverting changes.
Training on augumented user 6442 15/50 current_auc = 0.6463320463320464
User 6442 AUC after training: 0.6444015444015444
User 6442 does not improve AUC. Reverting changes.
Training on augumented user 58502 16/50 current_auc = 0.6463320463320464
User 58502 AUC after training: 0.6455598455598456
User 58502 does not improve AUC. Reverting changes.
Training on augumented user 129595 17/50 current_auc = 0.6463320463320464
User 129595 AUC after training: 0.6444015444015445
User 129595 does not improve AUC. Reverting changes.
Training on augumented user 105135 18/50 current_auc = 0.6463320463320464
User 105135 AUC after training: 0.644015444015444
User 105135 does not improve AUC. Reverting changes.
Training on augumented user 63 19/50 current_auc = 0.6463320463320464
User 63 AUC after training: 0.6444015444015444
User 63 does not improve AUC. Reverting changes.
Training on augumented user 26041 20/50 current_auc = 0.6463320463320464
User 26041 AUC after training: 0.644015444015444
User 26041 does not improve AUC. Reverting changes.
Training on augumented user 107448 21/50 current_auc = 0.6463320463320464
User 107448 AUC after training: 0.6455598455598457
User 107448 does not improve AUC. Reverting changes.
Training on augumented user 70428 22/50 current_auc = 0.6463320463320464
User 70428 AUC after training: 0.6432432432432432
User 70428 does not improve AUC. Reverting changes.
Training on augumented user 21322 23/50 current_auc = 0.6463320463320464
User 21322 AUC after training: 0.644015444015444
User 21322 does not improve AUC. Reverting changes.
Training on augumented user 80406 24/50 current_auc = 0.6463320463320464
User 80406 AUC after training: 0.6444015444015445
User 80406 does not improve AUC. Reverting changes.
Training on augumented user 55881 25/50 current_auc = 0.6463320463320464
User 55881 AUC after training: 0.6455598455598456
User 55881 does not improve AUC. Reverting changes.
Training on augumented user 6410 26/50 current_auc = 0.6463320463320464
User 6410 AUC after training: 0.6463320463320464
User 6410 does not improve AUC. Reverting changes.
Training on augumented user 97619 27/50 current_auc = 0.6463320463320464
User 97619 AUC after training: 0.6451737451737452
User 97619 does not improve AUC. Reverting changes.
Training on augumented user 30875 28/50 current_auc = 0.6463320463320464
User 30875 AUC after training: 0.6444015444015445
User 30875 does not improve AUC. Reverting changes.
Training on augumented user 42727 29/50 current_auc = 0.6463320463320464
User 42727 AUC after training: 0.6447876447876448
User 42727 does not improve AUC. Reverting changes.
Training on augumented user 108314 30/50 current_auc = 0.6463320463320464
User 108314 AUC after training: 0.6444015444015445
User 108314 does not improve AUC. Reverting changes.
Training on augumented user 66327 31/50 current_auc = 0.6463320463320464
User 66327 AUC after training: 0.645945945945946
User 66327 does not improve AUC. Reverting changes.
Training on augumented user 11539 32/50 current_auc = 0.6463320463320464
User 11539 AUC after training: 0.6463320463320463
User 11539 does not improve AUC. Reverting changes.
Training on augumented user 113993 33/50 current_auc = 0.6463320463320464
User 113993 AUC after training: 0.6447876447876448
User 113993 does not improve AUC. Reverting changes.
Training on augumented user 92813 34/50 current_auc = 0.6463320463320464
User 92813 AUC after training: 0.6451737451737452
User 92813 does not improve AUC. Reverting changes.
Training on augumented user 138092 35/50 current_auc = 0.6463320463320464
User 138092 AUC after training: 0.6451737451737452
User 138092 does not improve AUC. Reverting changes.
Training on augumented user 2177 36/50 current_auc = 0.6463320463320464
User 2177 AUC after training: 0.6447876447876448
User 2177 does not improve AUC. Reverting changes.
Training on augumented user 68879 37/50 current_auc = 0.6463320463320464
User 68879 AUC after training: 0.6447876447876448
User 68879 does not improve AUC. Reverting changes.
Training on augumented user 103256 38/50 current_auc = 0.6463320463320464
User 103256 AUC after training: 0.6455598455598457
User 103256 does not improve AUC. Reverting changes.
Training on augumented user 103078 39/50 current_auc = 0.6463320463320464
User 103078 AUC after training: 0.6440154440154441
User 103078 does not improve AUC. Reverting changes.
Training on augumented user 53505 40/50 current_auc = 0.6463320463320464
User 53505 AUC after training: 0.6463320463320463
User 53505 does not improve AUC. Reverting changes.
Training on augumented user 96801 41/50 current_auc = 0.6463320463320464
User 96801 AUC after training: 0.6467181467181468
User 96801 improves AUC. Keeping the model.
Training on augumented user 51077 42/50 current_auc = 0.6467181467181468
User 51077 AUC after training: 0.6455598455598456
User 51077 does not improve AUC. Reverting changes.
Training on augumented user 40238 43/50 current_auc = 0.6467181467181468
User 40238 AUC after training: 0.6447876447876448
User 40238 does not improve AUC. Reverting changes.
Training on augumented user 86230 44/50 current_auc = 0.6467181467181468
User 86230 AUC after training: 0.6455598455598456
User 86230 does not improve AUC. Reverting changes.
Training on augumented user 20674 45/50 current_auc = 0.6467181467181468
User 20674 AUC after training: 0.645945945945946
User 20674 does not improve AUC. Reverting changes.
Training on augumented user 106201 46/50 current_auc = 0.6467181467181468
User 106201 AUC after training: 0.645945945945946
User 106201 does not improve AUC. Reverting changes.
Training on augumented user 65443 47/50 current_auc = 0.6467181467181468
User 65443 AUC after training: 0.6455598455598456
User 65443 does not improve AUC. Reverting changes.
Training on augumented user 77540 48/50 current_auc = 0.6467181467181468
User 77540 AUC after training: 0.645945945945946
User 77540 does not improve AUC. Reverting changes.
Training on augumented user 20914 49/50 current_auc = 0.6467181467181468
User 20914 AUC after training: 0.6444015444015444
User 20914 does not improve AUC. Reverting changes.
[2024-12-02 19:42:51.853584] start test user 47661 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:52.887105] start test user 47661 227/568 recall augumented users by random, augumented_users = [41945, 7555, 48780, 52217, 25925, 14483, 43507, 98813, 77888, 4214, 49308, 7305, 12845, 93440, 103606, 33343, 94810, 3213, 105287, 19939, 29595, 15755, 64370, 55634, 52884, 28776, 24636, 3101, 50451, 62466, 135625, 48940, 93159, 56725, 103356, 66714, 121427, 77866, 134297, 68651, 2340, 51703, 104656, 74183, 95587, 137937, 66564, 59191, 78630, 51750]
[2024-12-02 19:42:52.929767] user = 47661 Cloud 227/568
[2024-12-02 19:42:52.958617] user = 47661 Local 227/568
[2024-12-02 19:42:53.040877] user = 47661 Local+ 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:56.335636] user = 47661 MPDA- 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6028368794326242
Training on augumented user 41945 0/50 current_auc = 0.6028368794326242
User 41945 AUC after training: 0.6024636058230683
User 41945 does not improve AUC. Reverting changes.
Training on augumented user 7555 1/50 current_auc = 0.6028368794326242
User 7555 AUC after training: 0.6050765210899589
User 7555 improves AUC. Keeping the model.
Training on augumented user 48780 2/50 current_auc = 0.6050765210899589
User 48780 AUC after training: 0.6039567002612916
User 48780 does not improve AUC. Reverting changes.
Training on augumented user 52217 3/50 current_auc = 0.6050765210899589
User 52217 AUC after training: 0.6033967898469579
User 52217 does not improve AUC. Reverting changes.
Training on augumented user 25925 4/50 current_auc = 0.6050765210899589
User 25925 AUC after training: 0.6043299738708474
User 25925 does not improve AUC. Reverting changes.
Training on augumented user 14483 5/50 current_auc = 0.6050765210899589
User 14483 AUC after training: 0.6054497946995148
User 14483 improves AUC. Keeping the model.
Training on augumented user 43507 6/50 current_auc = 0.6054497946995148
User 43507 AUC after training: 0.6058230683090705
User 43507 improves AUC. Keeping the model.
Training on augumented user 98813 7/50 current_auc = 0.6058230683090705
User 98813 AUC after training: 0.6060097051138484
User 98813 improves AUC. Keeping the model.
Training on augumented user 77888 8/50 current_auc = 0.6060097051138484
User 77888 AUC after training: 0.6039567002612916
User 77888 does not improve AUC. Reverting changes.
Training on augumented user 4214 9/50 current_auc = 0.6060097051138484
User 4214 AUC after training: 0.6052631578947368
User 4214 does not improve AUC. Reverting changes.
Training on augumented user 49308 10/50 current_auc = 0.6060097051138484
User 49308 AUC after training: 0.6048898842851811
User 49308 does not improve AUC. Reverting changes.
Training on augumented user 7305 11/50 current_auc = 0.6060097051138484
User 7305 AUC after training: 0.6063829787234043
User 7305 improves AUC. Keeping the model.
Training on augumented user 12845 12/50 current_auc = 0.6063829787234043
User 12845 AUC after training: 0.6056364315042926
User 12845 does not improve AUC. Reverting changes.
Training on augumented user 93440 13/50 current_auc = 0.6063829787234043
User 93440 AUC after training: 0.59163867114595
User 93440 does not improve AUC. Reverting changes.
Training on augumented user 103606 14/50 current_auc = 0.6063829787234043
User 103606 AUC after training: 0.6045166106756252
User 103606 does not improve AUC. Reverting changes.
Training on augumented user 33343 15/50 current_auc = 0.6063829787234043
User 33343 AUC after training: 0.6052631578947368
User 33343 does not improve AUC. Reverting changes.
Training on augumented user 94810 16/50 current_auc = 0.6063829787234043
User 94810 AUC after training: 0.6028368794326242
User 94810 does not improve AUC. Reverting changes.
Training on augumented user 3213 17/50 current_auc = 0.6063829787234043
User 3213 AUC after training: 0.6056364315042927
User 3213 does not improve AUC. Reverting changes.
Training on augumented user 105287 18/50 current_auc = 0.6063829787234043
User 105287 AUC after training: 0.5976110488988429
User 105287 does not improve AUC. Reverting changes.
Training on augumented user 19939 19/50 current_auc = 0.6063829787234043
User 19939 AUC after training: 0.6048898842851811
User 19939 does not improve AUC. Reverting changes.
Training on augumented user 29595 20/50 current_auc = 0.6063829787234043
User 29595 AUC after training: 0.6024636058230683
User 29595 does not improve AUC. Reverting changes.
Training on augumented user 15755 21/50 current_auc = 0.6063829787234043
User 15755 AUC after training: 0.6063829787234042
User 15755 does not improve AUC. Reverting changes.
Training on augumented user 64370 22/50 current_auc = 0.6063829787234043
User 64370 AUC after training: 0.6063829787234043
User 64370 does not improve AUC. Reverting changes.
Training on augumented user 55634 23/50 current_auc = 0.6063829787234043
User 55634 AUC after training: 0.6052631578947368
User 55634 does not improve AUC. Reverting changes.
Training on augumented user 52884 24/50 current_auc = 0.6063829787234043
User 52884 AUC after training: 0.6063829787234043
User 52884 does not improve AUC. Reverting changes.
Training on augumented user 28776 25/50 current_auc = 0.6063829787234043
User 28776 AUC after training: 0.6056364315042926
User 28776 does not improve AUC. Reverting changes.
Training on augumented user 24636 26/50 current_auc = 0.6063829787234043
User 24636 AUC after training: 0.5968645016797312
User 24636 does not improve AUC. Reverting changes.
Training on augumented user 3101 27/50 current_auc = 0.6063829787234043
User 3101 AUC after training: 0.6045166106756252
User 3101 does not improve AUC. Reverting changes.
Training on augumented user 50451 28/50 current_auc = 0.6063829787234043
User 50451 AUC after training: 0.6020903322135125
User 50451 does not improve AUC. Reverting changes.
Training on augumented user 62466 29/50 current_auc = 0.6063829787234043
User 62466 AUC after training: 0.6024636058230683
User 62466 does not improve AUC. Reverting changes.
Training on augumented user 135625 30/50 current_auc = 0.6063829787234043
User 135625 AUC after training: 0.6065696155281821
User 135625 improves AUC. Keeping the model.
Training on augumented user 48940 31/50 current_auc = 0.6065696155281821
User 48940 AUC after training: 0.606942889137738
User 48940 improves AUC. Keeping the model.
Training on augumented user 93159 32/50 current_auc = 0.606942889137738
User 93159 AUC after training: 0.605076521089959
User 93159 does not improve AUC. Reverting changes.
Training on augumented user 56725 33/50 current_auc = 0.606942889137738
User 56725 AUC after training: 0.6058230683090705
User 56725 does not improve AUC. Reverting changes.
Training on augumented user 103356 34/50 current_auc = 0.606942889137738
User 103356 AUC after training: 0.6005972377752893
User 103356 does not improve AUC. Reverting changes.
Training on augumented user 66714 35/50 current_auc = 0.606942889137738
User 66714 AUC after training: 0.6063829787234043
User 66714 does not improve AUC. Reverting changes.
Training on augumented user 121427 36/50 current_auc = 0.606942889137738
User 121427 AUC after training: 0.6089958939902949
User 121427 improves AUC. Keeping the model.
Training on augumented user 77866 37/50 current_auc = 0.6089958939902949
User 77866 AUC after training: 0.6082493467711833
User 77866 does not improve AUC. Reverting changes.
Training on augumented user 134297 38/50 current_auc = 0.6089958939902949
User 134297 AUC after training: 0.6056364315042927
User 134297 does not improve AUC. Reverting changes.
Training on augumented user 68651 39/50 current_auc = 0.6089958939902949
User 68651 AUC after training: 0.6086226203807391
User 68651 does not improve AUC. Reverting changes.
Training on augumented user 2340 40/50 current_auc = 0.6089958939902949
User 2340 AUC after training: 0.6075027995520716
User 2340 does not improve AUC. Reverting changes.
Training on augumented user 51703 41/50 current_auc = 0.6089958939902949
User 51703 AUC after training: 0.5834266517357223
User 51703 does not improve AUC. Reverting changes.
Training on augumented user 104656 42/50 current_auc = 0.6089958939902949
User 104656 AUC after training: 0.6076894363568496
User 104656 does not improve AUC. Reverting changes.
Training on augumented user 74183 43/50 current_auc = 0.6089958939902949
User 74183 AUC after training: 0.6056364315042926
User 74183 does not improve AUC. Reverting changes.
Training on augumented user 95587 44/50 current_auc = 0.6089958939902949
User 95587 AUC after training: 0.6043299738708473
User 95587 does not improve AUC. Reverting changes.
Training on augumented user 137937 45/50 current_auc = 0.6089958939902949
User 137937 AUC after training: 0.6080627099664053
User 137937 does not improve AUC. Reverting changes.
Training on augumented user 66564 46/50 current_auc = 0.6089958939902949
User 66564 AUC after training: 0.6084359835759612
User 66564 does not improve AUC. Reverting changes.
Training on augumented user 59191 47/50 current_auc = 0.6089958939902949
User 59191 AUC after training: 0.606942889137738
User 59191 does not improve AUC. Reverting changes.
Training on augumented user 78630 48/50 current_auc = 0.6089958939902949
User 78630 AUC after training: 0.6080627099664054
User 78630 does not improve AUC. Reverting changes.
Training on augumented user 51750 49/50 current_auc = 0.6089958939902949
User 51750 AUC after training: 0.6050765210899589
User 51750 does not improve AUC. Reverting changes.
[2024-12-02 19:43:27.468054] start test user 47762 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:27.939008] start test user 47762 228/568 recall augumented users by random, augumented_users = [74069, 54640, 123839, 51607, 112043, 116890, 119230, 65131, 72692, 62431, 47559, 56680, 2519, 60552, 27861, 104177, 76536, 43045, 21705, 35897, 96643, 92897, 85934, 122698, 93562, 122124, 57701, 87004, 116397, 83977, 19120, 115817, 77884, 12447, 88506, 52631, 35714, 121997, 95752, 93457, 114380, 53730, 3790, 35445, 4481, 88171, 77178, 85324, 49438, 18752]
[2024-12-02 19:43:27.954367] user = 47762 Cloud 228/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:27.960698] user = 47762 Local 228/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:28.059341] user = 47762 Local+ 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:30.590066] user = 47762 MPDA- 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 74069 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74069 AUC after training: 0.5
User 74069 does not improve AUC. Reverting changes.
Training on augumented user 54640 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54640 AUC after training: 0.5
User 54640 does not improve AUC. Reverting changes.
Training on augumented user 123839 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123839 AUC after training: 0.5
User 123839 does not improve AUC. Reverting changes.
Training on augumented user 51607 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51607 AUC after training: 0.5
User 51607 does not improve AUC. Reverting changes.
Training on augumented user 112043 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112043 AUC after training: 0.5
User 112043 does not improve AUC. Reverting changes.
Training on augumented user 116890 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116890 AUC after training: 0.5
User 116890 does not improve AUC. Reverting changes.
Training on augumented user 119230 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119230 AUC after training: 0.5
User 119230 does not improve AUC. Reverting changes.
Training on augumented user 65131 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65131 AUC after training: 0.5
User 65131 does not improve AUC. Reverting changes.
Training on augumented user 72692 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72692 AUC after training: 0.5
User 72692 does not improve AUC. Reverting changes.
Training on augumented user 62431 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62431 AUC after training: 0.5
User 62431 does not improve AUC. Reverting changes.
Training on augumented user 47559 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47559 AUC after training: 0.5
User 47559 does not improve AUC. Reverting changes.
Training on augumented user 56680 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56680 AUC after training: 0.5
User 56680 does not improve AUC. Reverting changes.
Training on augumented user 2519 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2519 AUC after training: 0.5
User 2519 does not improve AUC. Reverting changes.
Training on augumented user 60552 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60552 AUC after training: 0.5
User 60552 does not improve AUC. Reverting changes.
Training on augumented user 27861 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27861 AUC after training: 0.5
User 27861 does not improve AUC. Reverting changes.
Training on augumented user 104177 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104177 AUC after training: 0.5
User 104177 does not improve AUC. Reverting changes.
Training on augumented user 76536 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76536 AUC after training: 0.5
User 76536 does not improve AUC. Reverting changes.
Training on augumented user 43045 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43045 AUC after training: 0.5
User 43045 does not improve AUC. Reverting changes.
Training on augumented user 21705 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21705 AUC after training: 0.5
User 21705 does not improve AUC. Reverting changes.
Training on augumented user 35897 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35897 AUC after training: 0.5
User 35897 does not improve AUC. Reverting changes.
Training on augumented user 96643 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96643 AUC after training: 0.5
User 96643 does not improve AUC. Reverting changes.
Training on augumented user 92897 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92897 AUC after training: 0.5
User 92897 does not improve AUC. Reverting changes.
Training on augumented user 85934 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85934 AUC after training: 0.5
User 85934 does not improve AUC. Reverting changes.
Training on augumented user 122698 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122698 AUC after training: 0.5
User 122698 does not improve AUC. Reverting changes.
Training on augumented user 93562 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93562 AUC after training: 0.5
User 93562 does not improve AUC. Reverting changes.
Training on augumented user 122124 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122124 AUC after training: 0.5
User 122124 does not improve AUC. Reverting changes.
Training on augumented user 57701 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57701 AUC after training: 0.5
User 57701 does not improve AUC. Reverting changes.
Training on augumented user 87004 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87004 AUC after training: 0.5
User 87004 does not improve AUC. Reverting changes.
Training on augumented user 116397 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116397 AUC after training: 0.5
User 116397 does not improve AUC. Reverting changes.
Training on augumented user 83977 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83977 AUC after training: 0.5
User 83977 does not improve AUC. Reverting changes.
Training on augumented user 19120 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19120 AUC after training: 0.5
User 19120 does not improve AUC. Reverting changes.
Training on augumented user 115817 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115817 AUC after training: 0.5
User 115817 does not improve AUC. Reverting changes.
Training on augumented user 77884 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77884 AUC after training: 0.5
User 77884 does not improve AUC. Reverting changes.
Training on augumented user 12447 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12447 AUC after training: 0.5
User 12447 does not improve AUC. Reverting changes.
Training on augumented user 88506 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88506 AUC after training: 0.5
User 88506 does not improve AUC. Reverting changes.
Training on augumented user 52631 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52631 AUC after training: 0.5
User 52631 does not improve AUC. Reverting changes.
Training on augumented user 35714 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35714 AUC after training: 0.5
User 35714 does not improve AUC. Reverting changes.
Training on augumented user 121997 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121997 AUC after training: 0.5
User 121997 does not improve AUC. Reverting changes.
Training on augumented user 95752 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95752 AUC after training: 0.5
User 95752 does not improve AUC. Reverting changes.
Training on augumented user 93457 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93457 AUC after training: 0.5
User 93457 does not improve AUC. Reverting changes.
Training on augumented user 114380 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114380 AUC after training: 0.5
User 114380 does not improve AUC. Reverting changes.
Training on augumented user 53730 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53730 AUC after training: 0.5
User 53730 does not improve AUC. Reverting changes.
Training on augumented user 3790 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3790 AUC after training: 0.5
User 3790 does not improve AUC. Reverting changes.
Training on augumented user 35445 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35445 AUC after training: 0.5
User 35445 does not improve AUC. Reverting changes.
Training on augumented user 4481 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4481 AUC after training: 0.5
User 4481 does not improve AUC. Reverting changes.
Training on augumented user 88171 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88171 AUC after training: 0.5
User 88171 does not improve AUC. Reverting changes.
Training on augumented user 77178 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77178 AUC after training: 0.5
User 77178 does not improve AUC. Reverting changes.
Training on augumented user 85324 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85324 AUC after training: 0.5
User 85324 does not improve AUC. Reverting changes.
Training on augumented user 49438 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49438 AUC after training: 0.5
User 49438 does not improve AUC. Reverting changes.
Training on augumented user 18752 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18752 AUC after training: 0.5
User 18752 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:58.919238] start test user 47816 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:59.665911] start test user 47816 229/568 recall augumented users by random, augumented_users = [12749, 69770, 74235, 131315, 136677, 28406, 89444, 86686, 73257, 6182, 22707, 38462, 17009, 120498, 109649, 69635, 17272, 61368, 29710, 125497, 104668, 90574, 117628, 10776, 25811, 87941, 111147, 106831, 40925, 31545, 3234, 83351, 17745, 5121, 24703, 86237, 133780, 92259, 84196, 82628, 25414, 104051, 118891, 4368, 71516, 104643, 5326, 124508, 114131, 6436]
[2024-12-02 19:43:59.712536] user = 47816 Cloud 229/568
[2024-12-02 19:43:59.786809] user = 47816 Local 229/568
[2024-12-02 19:43:59.955413] user = 47816 Local+ 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:02.129949] user = 47816 MPDA- 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4883720930232558
Training on augumented user 12749 0/50 current_auc = 0.4883720930232558
User 12749 AUC after training: 0.4883720930232558
User 12749 does not improve AUC. Reverting changes.
Training on augumented user 69770 1/50 current_auc = 0.4883720930232558
User 69770 AUC after training: 0.48062015503875966
User 69770 does not improve AUC. Reverting changes.
Training on augumented user 74235 2/50 current_auc = 0.4883720930232558
User 74235 AUC after training: 0.4844961240310077
User 74235 does not improve AUC. Reverting changes.
Training on augumented user 131315 3/50 current_auc = 0.4883720930232558
User 131315 AUC after training: 0.4844961240310077
User 131315 does not improve AUC. Reverting changes.
Training on augumented user 136677 4/50 current_auc = 0.4883720930232558
User 136677 AUC after training: 0.4883720930232558
User 136677 does not improve AUC. Reverting changes.
Training on augumented user 28406 5/50 current_auc = 0.4883720930232558
User 28406 AUC after training: 0.4883720930232558
User 28406 does not improve AUC. Reverting changes.
Training on augumented user 89444 6/50 current_auc = 0.4883720930232558
User 89444 AUC after training: 0.4844961240310077
User 89444 does not improve AUC. Reverting changes.
Training on augumented user 86686 7/50 current_auc = 0.4883720930232558
User 86686 AUC after training: 0.4883720930232558
User 86686 does not improve AUC. Reverting changes.
Training on augumented user 73257 8/50 current_auc = 0.4883720930232558
User 73257 AUC after training: 0.4844961240310077
User 73257 does not improve AUC. Reverting changes.
Training on augumented user 6182 9/50 current_auc = 0.4883720930232558
User 6182 AUC after training: 0.4883720930232558
User 6182 does not improve AUC. Reverting changes.
Training on augumented user 22707 10/50 current_auc = 0.4883720930232558
User 22707 AUC after training: 0.4883720930232558
User 22707 does not improve AUC. Reverting changes.
Training on augumented user 38462 11/50 current_auc = 0.4883720930232558
User 38462 AUC after training: 0.4883720930232558
User 38462 does not improve AUC. Reverting changes.
Training on augumented user 17009 12/50 current_auc = 0.4883720930232558
User 17009 AUC after training: 0.4883720930232558
User 17009 does not improve AUC. Reverting changes.
Training on augumented user 120498 13/50 current_auc = 0.4883720930232558
User 120498 AUC after training: 0.4883720930232558
User 120498 does not improve AUC. Reverting changes.
Training on augumented user 109649 14/50 current_auc = 0.4883720930232558
User 109649 AUC after training: 0.4883720930232558
User 109649 does not improve AUC. Reverting changes.
Training on augumented user 69635 15/50 current_auc = 0.4883720930232558
User 69635 AUC after training: 0.4883720930232558
User 69635 does not improve AUC. Reverting changes.
Training on augumented user 17272 16/50 current_auc = 0.4883720930232558
User 17272 AUC after training: 0.4883720930232558
User 17272 does not improve AUC. Reverting changes.
Training on augumented user 61368 17/50 current_auc = 0.4883720930232558
User 61368 AUC after training: 0.4844961240310077
User 61368 does not improve AUC. Reverting changes.
Training on augumented user 29710 18/50 current_auc = 0.4883720930232558
User 29710 AUC after training: 0.4844961240310077
User 29710 does not improve AUC. Reverting changes.
Training on augumented user 125497 19/50 current_auc = 0.4883720930232558
User 125497 AUC after training: 0.4883720930232558
User 125497 does not improve AUC. Reverting changes.
Training on augumented user 104668 20/50 current_auc = 0.4883720930232558
User 104668 AUC after training: 0.4883720930232558
User 104668 does not improve AUC. Reverting changes.
Training on augumented user 90574 21/50 current_auc = 0.4883720930232558
User 90574 AUC after training: 0.4883720930232558
User 90574 does not improve AUC. Reverting changes.
Training on augumented user 117628 22/50 current_auc = 0.4883720930232558
User 117628 AUC after training: 0.48062015503875966
User 117628 does not improve AUC. Reverting changes.
Training on augumented user 10776 23/50 current_auc = 0.4883720930232558
User 10776 AUC after training: 0.4883720930232558
User 10776 does not improve AUC. Reverting changes.
Training on augumented user 25811 24/50 current_auc = 0.4883720930232558
User 25811 AUC after training: 0.4844961240310077
User 25811 does not improve AUC. Reverting changes.
Training on augumented user 87941 25/50 current_auc = 0.4883720930232558
User 87941 AUC after training: 0.4883720930232558
User 87941 does not improve AUC. Reverting changes.
Training on augumented user 111147 26/50 current_auc = 0.4883720930232558
User 111147 AUC after training: 0.4883720930232558
User 111147 does not improve AUC. Reverting changes.
Training on augumented user 106831 27/50 current_auc = 0.4883720930232558
User 106831 AUC after training: 0.4883720930232558
User 106831 does not improve AUC. Reverting changes.
Training on augumented user 40925 28/50 current_auc = 0.4883720930232558
User 40925 AUC after training: 0.4844961240310077
User 40925 does not improve AUC. Reverting changes.
Training on augumented user 31545 29/50 current_auc = 0.4883720930232558
User 31545 AUC after training: 0.4883720930232558
User 31545 does not improve AUC. Reverting changes.
Training on augumented user 3234 30/50 current_auc = 0.4883720930232558
User 3234 AUC after training: 0.4844961240310077
User 3234 does not improve AUC. Reverting changes.
Training on augumented user 83351 31/50 current_auc = 0.4883720930232558
User 83351 AUC after training: 0.48062015503875966
User 83351 does not improve AUC. Reverting changes.
Training on augumented user 17745 32/50 current_auc = 0.4883720930232558
User 17745 AUC after training: 0.4883720930232558
User 17745 does not improve AUC. Reverting changes.
Training on augumented user 5121 33/50 current_auc = 0.4883720930232558
User 5121 AUC after training: 0.4844961240310077
User 5121 does not improve AUC. Reverting changes.
Training on augumented user 24703 34/50 current_auc = 0.4883720930232558
User 24703 AUC after training: 0.4844961240310077
User 24703 does not improve AUC. Reverting changes.
Training on augumented user 86237 35/50 current_auc = 0.4883720930232558
User 86237 AUC after training: 0.4883720930232558
User 86237 does not improve AUC. Reverting changes.
Training on augumented user 133780 36/50 current_auc = 0.4883720930232558
User 133780 AUC after training: 0.4883720930232558
User 133780 does not improve AUC. Reverting changes.
Training on augumented user 92259 37/50 current_auc = 0.4883720930232558
User 92259 AUC after training: 0.4844961240310077
User 92259 does not improve AUC. Reverting changes.
Training on augumented user 84196 38/50 current_auc = 0.4883720930232558
User 84196 AUC after training: 0.4883720930232558
User 84196 does not improve AUC. Reverting changes.
Training on augumented user 82628 39/50 current_auc = 0.4883720930232558
User 82628 AUC after training: 0.4883720930232558
User 82628 does not improve AUC. Reverting changes.
Training on augumented user 25414 40/50 current_auc = 0.4883720930232558
User 25414 AUC after training: 0.49224806201550386
User 25414 improves AUC. Keeping the model.
Training on augumented user 104051 41/50 current_auc = 0.49224806201550386
User 104051 AUC after training: 0.48062015503875966
User 104051 does not improve AUC. Reverting changes.
Training on augumented user 118891 42/50 current_auc = 0.49224806201550386
User 118891 AUC after training: 0.49224806201550386
User 118891 does not improve AUC. Reverting changes.
Training on augumented user 4368 43/50 current_auc = 0.49224806201550386
User 4368 AUC after training: 0.4883720930232558
User 4368 does not improve AUC. Reverting changes.
Training on augumented user 71516 44/50 current_auc = 0.49224806201550386
User 71516 AUC after training: 0.49224806201550386
User 71516 does not improve AUC. Reverting changes.
Training on augumented user 104643 45/50 current_auc = 0.49224806201550386
User 104643 AUC after training: 0.4883720930232558
User 104643 does not improve AUC. Reverting changes.
Training on augumented user 5326 46/50 current_auc = 0.49224806201550386
User 5326 AUC after training: 0.4844961240310077
User 5326 does not improve AUC. Reverting changes.
Training on augumented user 124508 47/50 current_auc = 0.49224806201550386
User 124508 AUC after training: 0.49224806201550386
User 124508 does not improve AUC. Reverting changes.
Training on augumented user 114131 48/50 current_auc = 0.49224806201550386
User 114131 AUC after training: 0.4883720930232558
User 114131 does not improve AUC. Reverting changes.
Training on augumented user 6436 49/50 current_auc = 0.49224806201550386
User 6436 AUC after training: 0.4844961240310077
User 6436 does not improve AUC. Reverting changes.
[2024-12-02 19:44:34.119040] start test user 47855 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:34.931225] start test user 47855 230/568 recall augumented users by random, augumented_users = [12233, 35696, 129269, 55763, 41532, 130213, 131549, 56762, 83734, 129628, 6181, 131248, 131791, 28134, 66531, 106314, 82582, 51514, 42394, 98382, 48730, 94242, 67135, 56449, 107875, 51648, 67245, 42246, 134714, 11611, 23312, 4249, 51183, 47693, 53646, 136024, 60032, 26507, 64214, 9203, 93684, 64115, 36542, 107370, 130053, 3226, 127705, 77830, 122264, 97085]
[2024-12-02 19:44:34.953427] user = 47855 Cloud 230/568
[2024-12-02 19:44:34.969533] user = 47855 Local 230/568
[2024-12-02 19:44:35.009295] user = 47855 Local+ 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:37.051857] user = 47855 MPDA- 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5416666666666666
Training on augumented user 12233 0/50 current_auc = 0.5416666666666666
User 12233 AUC after training: 0.5416666666666666
User 12233 does not improve AUC. Reverting changes.
Training on augumented user 35696 1/50 current_auc = 0.5416666666666666
User 35696 AUC after training: 0.5416666666666666
User 35696 does not improve AUC. Reverting changes.
Training on augumented user 129269 2/50 current_auc = 0.5416666666666666
User 129269 AUC after training: 0.5416666666666666
User 129269 does not improve AUC. Reverting changes.
Training on augumented user 55763 3/50 current_auc = 0.5416666666666666
User 55763 AUC after training: 0.5416666666666666
User 55763 does not improve AUC. Reverting changes.
Training on augumented user 41532 4/50 current_auc = 0.5416666666666666
User 41532 AUC after training: 0.5416666666666666
User 41532 does not improve AUC. Reverting changes.
Training on augumented user 130213 5/50 current_auc = 0.5416666666666666
User 130213 AUC after training: 0.5416666666666666
User 130213 does not improve AUC. Reverting changes.
Training on augumented user 131549 6/50 current_auc = 0.5416666666666666
User 131549 AUC after training: 0.5416666666666666
User 131549 does not improve AUC. Reverting changes.
Training on augumented user 56762 7/50 current_auc = 0.5416666666666666
User 56762 AUC after training: 0.5416666666666666
User 56762 does not improve AUC. Reverting changes.
Training on augumented user 83734 8/50 current_auc = 0.5416666666666666
User 83734 AUC after training: 0.5416666666666666
User 83734 does not improve AUC. Reverting changes.
Training on augumented user 129628 9/50 current_auc = 0.5416666666666666
User 129628 AUC after training: 0.5416666666666666
User 129628 does not improve AUC. Reverting changes.
Training on augumented user 6181 10/50 current_auc = 0.5416666666666666
User 6181 AUC after training: 0.5416666666666666
User 6181 does not improve AUC. Reverting changes.
Training on augumented user 131248 11/50 current_auc = 0.5416666666666666
User 131248 AUC after training: 0.5416666666666666
User 131248 does not improve AUC. Reverting changes.
Training on augumented user 131791 12/50 current_auc = 0.5416666666666666
User 131791 AUC after training: 0.5416666666666666
User 131791 does not improve AUC. Reverting changes.
Training on augumented user 28134 13/50 current_auc = 0.5416666666666666
User 28134 AUC after training: 0.5416666666666666
User 28134 does not improve AUC. Reverting changes.
Training on augumented user 66531 14/50 current_auc = 0.5416666666666666
User 66531 AUC after training: 0.5416666666666666
User 66531 does not improve AUC. Reverting changes.
Training on augumented user 106314 15/50 current_auc = 0.5416666666666666
User 106314 AUC after training: 0.5416666666666666
User 106314 does not improve AUC. Reverting changes.
Training on augumented user 82582 16/50 current_auc = 0.5416666666666666
User 82582 AUC after training: 0.5416666666666666
User 82582 does not improve AUC. Reverting changes.
Training on augumented user 51514 17/50 current_auc = 0.5416666666666666
User 51514 AUC after training: 0.5416666666666666
User 51514 does not improve AUC. Reverting changes.
Training on augumented user 42394 18/50 current_auc = 0.5416666666666666
User 42394 AUC after training: 0.5416666666666666
User 42394 does not improve AUC. Reverting changes.
Training on augumented user 98382 19/50 current_auc = 0.5416666666666666
User 98382 AUC after training: 0.5416666666666666
User 98382 does not improve AUC. Reverting changes.
Training on augumented user 48730 20/50 current_auc = 0.5416666666666666
User 48730 AUC after training: 0.5416666666666666
User 48730 does not improve AUC. Reverting changes.
Training on augumented user 94242 21/50 current_auc = 0.5416666666666666
User 94242 AUC after training: 0.5416666666666666
User 94242 does not improve AUC. Reverting changes.
Training on augumented user 67135 22/50 current_auc = 0.5416666666666666
User 67135 AUC after training: 0.5416666666666666
User 67135 does not improve AUC. Reverting changes.
Training on augumented user 56449 23/50 current_auc = 0.5416666666666666
User 56449 AUC after training: 0.5416666666666666
User 56449 does not improve AUC. Reverting changes.
Training on augumented user 107875 24/50 current_auc = 0.5416666666666666
User 107875 AUC after training: 0.5416666666666666
User 107875 does not improve AUC. Reverting changes.
Training on augumented user 51648 25/50 current_auc = 0.5416666666666666
User 51648 AUC after training: 0.5416666666666666
User 51648 does not improve AUC. Reverting changes.
Training on augumented user 67245 26/50 current_auc = 0.5416666666666666
User 67245 AUC after training: 0.5416666666666666
User 67245 does not improve AUC. Reverting changes.
Training on augumented user 42246 27/50 current_auc = 0.5416666666666666
User 42246 AUC after training: 0.5416666666666666
User 42246 does not improve AUC. Reverting changes.
Training on augumented user 134714 28/50 current_auc = 0.5416666666666666
User 134714 AUC after training: 0.5416666666666666
User 134714 does not improve AUC. Reverting changes.
Training on augumented user 11611 29/50 current_auc = 0.5416666666666666
User 11611 AUC after training: 0.5416666666666666
User 11611 does not improve AUC. Reverting changes.
Training on augumented user 23312 30/50 current_auc = 0.5416666666666666
User 23312 AUC after training: 0.5416666666666666
User 23312 does not improve AUC. Reverting changes.
Training on augumented user 4249 31/50 current_auc = 0.5416666666666666
User 4249 AUC after training: 0.5416666666666666
User 4249 does not improve AUC. Reverting changes.
Training on augumented user 51183 32/50 current_auc = 0.5416666666666666
User 51183 AUC after training: 0.5416666666666666
User 51183 does not improve AUC. Reverting changes.
Training on augumented user 47693 33/50 current_auc = 0.5416666666666666
User 47693 AUC after training: 0.5416666666666666
User 47693 does not improve AUC. Reverting changes.
Training on augumented user 53646 34/50 current_auc = 0.5416666666666666
User 53646 AUC after training: 0.5416666666666666
User 53646 does not improve AUC. Reverting changes.
Training on augumented user 136024 35/50 current_auc = 0.5416666666666666
User 136024 AUC after training: 0.5416666666666666
User 136024 does not improve AUC. Reverting changes.
Training on augumented user 60032 36/50 current_auc = 0.5416666666666666
User 60032 AUC after training: 0.5416666666666666
User 60032 does not improve AUC. Reverting changes.
Training on augumented user 26507 37/50 current_auc = 0.5416666666666666
User 26507 AUC after training: 0.5416666666666666
User 26507 does not improve AUC. Reverting changes.
Training on augumented user 64214 38/50 current_auc = 0.5416666666666666
User 64214 AUC after training: 0.5416666666666666
User 64214 does not improve AUC. Reverting changes.
Training on augumented user 9203 39/50 current_auc = 0.5416666666666666
User 9203 AUC after training: 0.5416666666666666
User 9203 does not improve AUC. Reverting changes.
Training on augumented user 93684 40/50 current_auc = 0.5416666666666666
User 93684 AUC after training: 0.5416666666666666
User 93684 does not improve AUC. Reverting changes.
Training on augumented user 64115 41/50 current_auc = 0.5416666666666666
User 64115 AUC after training: 0.5416666666666666
User 64115 does not improve AUC. Reverting changes.
Training on augumented user 36542 42/50 current_auc = 0.5416666666666666
User 36542 AUC after training: 0.5416666666666666
User 36542 does not improve AUC. Reverting changes.
Training on augumented user 107370 43/50 current_auc = 0.5416666666666666
User 107370 AUC after training: 0.5416666666666666
User 107370 does not improve AUC. Reverting changes.
Training on augumented user 130053 44/50 current_auc = 0.5416666666666666
User 130053 AUC after training: 0.5416666666666666
User 130053 does not improve AUC. Reverting changes.
Training on augumented user 3226 45/50 current_auc = 0.5416666666666666
User 3226 AUC after training: 0.5416666666666666
User 3226 does not improve AUC. Reverting changes.
Training on augumented user 127705 46/50 current_auc = 0.5416666666666666
User 127705 AUC after training: 0.5416666666666666
User 127705 does not improve AUC. Reverting changes.
Training on augumented user 77830 47/50 current_auc = 0.5416666666666666
User 77830 AUC after training: 0.5416666666666666
User 77830 does not improve AUC. Reverting changes.
Training on augumented user 122264 48/50 current_auc = 0.5416666666666666
User 122264 AUC after training: 0.5416666666666666
User 122264 does not improve AUC. Reverting changes.
Training on augumented user 97085 49/50 current_auc = 0.5416666666666666
User 97085 AUC after training: 0.5416666666666666
User 97085 does not improve AUC. Reverting changes.
[2024-12-02 19:45:06.054992] start test user 47860 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:06.503722] start test user 47860 231/568 recall augumented users by random, augumented_users = [17108, 749, 102161, 94604, 53546, 102694, 34438, 113445, 100344, 49635, 18, 126294, 110494, 28998, 82220, 84823, 19414, 116857, 108215, 26684, 3250, 2906, 131466, 52110, 17721, 49590, 29330, 8604, 36653, 32826, 116690, 20583, 95048, 64833, 31596, 138445, 84744, 40376, 95216, 57309, 6566, 113675, 104321, 59667, 13356, 37394, 89063, 22829, 19250, 118398]
[2024-12-02 19:45:06.519191] user = 47860 Cloud 231/568
[2024-12-02 19:45:06.529405] user = 47860 Local 231/568
[2024-12-02 19:45:06.624754] user = 47860 Local+ 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:08.766245] user = 47860 MPDA- 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4217506631299735
Training on augumented user 17108 0/50 current_auc = 0.4217506631299735
User 17108 AUC after training: 0.4217506631299735
User 17108 does not improve AUC. Reverting changes.
Training on augumented user 749 1/50 current_auc = 0.4217506631299735
User 749 AUC after training: 0.4217506631299735
User 749 does not improve AUC. Reverting changes.
Training on augumented user 102161 2/50 current_auc = 0.4217506631299735
User 102161 AUC after training: 0.4217506631299735
User 102161 does not improve AUC. Reverting changes.
Training on augumented user 94604 3/50 current_auc = 0.4217506631299735
User 94604 AUC after training: 0.4217506631299735
User 94604 does not improve AUC. Reverting changes.
Training on augumented user 53546 4/50 current_auc = 0.4217506631299735
User 53546 AUC after training: 0.4217506631299735
User 53546 does not improve AUC. Reverting changes.
Training on augumented user 102694 5/50 current_auc = 0.4217506631299735
User 102694 AUC after training: 0.41379310344827586
User 102694 does not improve AUC. Reverting changes.
Training on augumented user 34438 6/50 current_auc = 0.4217506631299735
User 34438 AUC after training: 0.4217506631299735
User 34438 does not improve AUC. Reverting changes.
Training on augumented user 113445 7/50 current_auc = 0.4217506631299735
User 113445 AUC after training: 0.4217506631299735
User 113445 does not improve AUC. Reverting changes.
Training on augumented user 100344 8/50 current_auc = 0.4217506631299735
User 100344 AUC after training: 0.4217506631299735
User 100344 does not improve AUC. Reverting changes.
Training on augumented user 49635 9/50 current_auc = 0.4217506631299735
User 49635 AUC after training: 0.4217506631299735
User 49635 does not improve AUC. Reverting changes.
Training on augumented user 18 10/50 current_auc = 0.4217506631299735
User 18 AUC after training: 0.4217506631299735
User 18 does not improve AUC. Reverting changes.
Training on augumented user 126294 11/50 current_auc = 0.4217506631299735
User 126294 AUC after training: 0.4190981432360743
User 126294 does not improve AUC. Reverting changes.
Training on augumented user 110494 12/50 current_auc = 0.4217506631299735
User 110494 AUC after training: 0.4217506631299735
User 110494 does not improve AUC. Reverting changes.
Training on augumented user 28998 13/50 current_auc = 0.4217506631299735
User 28998 AUC after training: 0.4190981432360743
User 28998 does not improve AUC. Reverting changes.
Training on augumented user 82220 14/50 current_auc = 0.4217506631299735
User 82220 AUC after training: 0.4217506631299735
User 82220 does not improve AUC. Reverting changes.
Training on augumented user 84823 15/50 current_auc = 0.4217506631299735
User 84823 AUC after training: 0.4164456233421751
User 84823 does not improve AUC. Reverting changes.
Training on augumented user 19414 16/50 current_auc = 0.4217506631299735
User 19414 AUC after training: 0.4190981432360743
User 19414 does not improve AUC. Reverting changes.
Training on augumented user 116857 17/50 current_auc = 0.4217506631299735
User 116857 AUC after training: 0.4217506631299735
User 116857 does not improve AUC. Reverting changes.
Training on augumented user 108215 18/50 current_auc = 0.4217506631299735
User 108215 AUC after training: 0.4217506631299735
User 108215 does not improve AUC. Reverting changes.
Training on augumented user 26684 19/50 current_auc = 0.4217506631299735
User 26684 AUC after training: 0.4190981432360743
User 26684 does not improve AUC. Reverting changes.
Training on augumented user 3250 20/50 current_auc = 0.4217506631299735
User 3250 AUC after training: 0.4217506631299735
User 3250 does not improve AUC. Reverting changes.
Training on augumented user 2906 21/50 current_auc = 0.4217506631299735
User 2906 AUC after training: 0.4217506631299735
User 2906 does not improve AUC. Reverting changes.
Training on augumented user 131466 22/50 current_auc = 0.4217506631299735
User 131466 AUC after training: 0.4217506631299735
User 131466 does not improve AUC. Reverting changes.
Training on augumented user 52110 23/50 current_auc = 0.4217506631299735
User 52110 AUC after training: 0.4217506631299735
User 52110 does not improve AUC. Reverting changes.
Training on augumented user 17721 24/50 current_auc = 0.4217506631299735
User 17721 AUC after training: 0.4217506631299735
User 17721 does not improve AUC. Reverting changes.
Training on augumented user 49590 25/50 current_auc = 0.4217506631299735
User 49590 AUC after training: 0.4164456233421751
User 49590 does not improve AUC. Reverting changes.
Training on augumented user 29330 26/50 current_auc = 0.4217506631299735
User 29330 AUC after training: 0.4217506631299735
User 29330 does not improve AUC. Reverting changes.
Training on augumented user 8604 27/50 current_auc = 0.4217506631299735
User 8604 AUC after training: 0.4217506631299735
User 8604 does not improve AUC. Reverting changes.
Training on augumented user 36653 28/50 current_auc = 0.4217506631299735
User 36653 AUC after training: 0.4217506631299735
User 36653 does not improve AUC. Reverting changes.
Training on augumented user 32826 29/50 current_auc = 0.4217506631299735
User 32826 AUC after training: 0.4217506631299735
User 32826 does not improve AUC. Reverting changes.
Training on augumented user 116690 30/50 current_auc = 0.4217506631299735
User 116690 AUC after training: 0.4217506631299735
User 116690 does not improve AUC. Reverting changes.
Training on augumented user 20583 31/50 current_auc = 0.4217506631299735
User 20583 AUC after training: 0.4190981432360743
User 20583 does not improve AUC. Reverting changes.
Training on augumented user 95048 32/50 current_auc = 0.4217506631299735
User 95048 AUC after training: 0.4217506631299735
User 95048 does not improve AUC. Reverting changes.
Training on augumented user 64833 33/50 current_auc = 0.4217506631299735
User 64833 AUC after training: 0.4190981432360743
User 64833 does not improve AUC. Reverting changes.
Training on augumented user 31596 34/50 current_auc = 0.4217506631299735
User 31596 AUC after training: 0.4217506631299735
User 31596 does not improve AUC. Reverting changes.
Training on augumented user 138445 35/50 current_auc = 0.4217506631299735
User 138445 AUC after training: 0.4190981432360743
User 138445 does not improve AUC. Reverting changes.
Training on augumented user 84744 36/50 current_auc = 0.4217506631299735
User 84744 AUC after training: 0.4217506631299735
User 84744 does not improve AUC. Reverting changes.
Training on augumented user 40376 37/50 current_auc = 0.4217506631299735
User 40376 AUC after training: 0.4217506631299735
User 40376 does not improve AUC. Reverting changes.
Training on augumented user 95216 38/50 current_auc = 0.4217506631299735
User 95216 AUC after training: 0.4244031830238727
User 95216 improves AUC. Keeping the model.
Training on augumented user 57309 39/50 current_auc = 0.4244031830238727
User 57309 AUC after training: 0.4244031830238727
User 57309 does not improve AUC. Reverting changes.
Training on augumented user 6566 40/50 current_auc = 0.4244031830238727
User 6566 AUC after training: 0.4244031830238727
User 6566 does not improve AUC. Reverting changes.
Training on augumented user 113675 41/50 current_auc = 0.4244031830238727
User 113675 AUC after training: 0.4244031830238727
User 113675 does not improve AUC. Reverting changes.
Training on augumented user 104321 42/50 current_auc = 0.4244031830238727
User 104321 AUC after training: 0.4244031830238727
User 104321 does not improve AUC. Reverting changes.
Training on augumented user 59667 43/50 current_auc = 0.4244031830238727
User 59667 AUC after training: 0.4244031830238727
User 59667 does not improve AUC. Reverting changes.
Training on augumented user 13356 44/50 current_auc = 0.4244031830238727
User 13356 AUC after training: 0.4244031830238727
User 13356 does not improve AUC. Reverting changes.
Training on augumented user 37394 45/50 current_auc = 0.4244031830238727
User 37394 AUC after training: 0.4244031830238727
User 37394 does not improve AUC. Reverting changes.
Training on augumented user 89063 46/50 current_auc = 0.4244031830238727
User 89063 AUC after training: 0.4244031830238727
User 89063 does not improve AUC. Reverting changes.
Training on augumented user 22829 47/50 current_auc = 0.4244031830238727
User 22829 AUC after training: 0.4217506631299735
User 22829 does not improve AUC. Reverting changes.
Training on augumented user 19250 48/50 current_auc = 0.4244031830238727
User 19250 AUC after training: 0.4244031830238727
User 19250 does not improve AUC. Reverting changes.
Training on augumented user 118398 49/50 current_auc = 0.4244031830238727
User 118398 AUC after training: 0.4244031830238727
User 118398 does not improve AUC. Reverting changes.
[2024-12-02 19:45:43.579713] start test user 47866 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:44.348116] start test user 47866 232/568 recall augumented users by random, augumented_users = [24067, 113119, 45766, 132301, 138453, 20890, 11683, 77931, 99638, 36357, 57190, 104842, 102062, 48703, 81046, 71852, 79686, 19583, 71118, 16412, 3906, 5697, 59408, 17740, 27761, 102122, 117600, 68934, 23277, 88495, 104399, 68094, 11031, 101013, 66876, 75710, 75351, 62158, 95126, 9950, 22807, 8290, 115262, 102197, 52240, 9822, 83340, 31346, 48055, 130043]
[2024-12-02 19:45:44.383348] user = 47866 Cloud 232/568
[2024-12-02 19:45:44.418024] user = 47866 Local 232/568
[2024-12-02 19:45:44.544589] user = 47866 Local+ 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:47.389245] user = 47866 MPDA- 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6242378048780488
Training on augumented user 24067 0/50 current_auc = 0.6242378048780488
User 24067 AUC after training: 0.6244136960600375
User 24067 improves AUC. Keeping the model.
Training on augumented user 113119 1/50 current_auc = 0.6244136960600375
User 113119 AUC after training: 0.6245309568480301
User 113119 improves AUC. Keeping the model.
Training on augumented user 45766 2/50 current_auc = 0.6245309568480301
User 45766 AUC after training: 0.62453095684803
User 45766 does not improve AUC. Reverting changes.
Training on augumented user 132301 3/50 current_auc = 0.6245309568480301
User 132301 AUC after training: 0.6243843808630395
User 132301 does not improve AUC. Reverting changes.
Training on augumented user 138453 4/50 current_auc = 0.6245309568480301
User 138453 AUC after training: 0.6242378048780487
User 138453 does not improve AUC. Reverting changes.
Training on augumented user 20890 5/50 current_auc = 0.6245309568480301
User 20890 AUC after training: 0.6241205440900564
User 20890 does not improve AUC. Reverting changes.
Training on augumented user 11683 6/50 current_auc = 0.6245309568480301
User 11683 AUC after training: 0.6243550656660413
User 11683 does not improve AUC. Reverting changes.
Training on augumented user 77931 7/50 current_auc = 0.6245309568480301
User 77931 AUC after training: 0.6243550656660413
User 77931 does not improve AUC. Reverting changes.
Training on augumented user 99638 8/50 current_auc = 0.6245309568480301
User 99638 AUC after training: 0.6242378048780488
User 99638 does not improve AUC. Reverting changes.
Training on augumented user 36357 9/50 current_auc = 0.6245309568480301
User 36357 AUC after training: 0.6241791744840526
User 36357 does not improve AUC. Reverting changes.
Training on augumented user 57190 10/50 current_auc = 0.6245309568480301
User 57190 AUC after training: 0.624501641651032
User 57190 does not improve AUC. Reverting changes.
Training on augumented user 104842 11/50 current_auc = 0.6245309568480301
User 104842 AUC after training: 0.6244136960600376
User 104842 does not improve AUC. Reverting changes.
Training on augumented user 102062 12/50 current_auc = 0.6245309568480301
User 102062 AUC after training: 0.6242084896810507
User 102062 does not improve AUC. Reverting changes.
Training on augumented user 48703 13/50 current_auc = 0.6245309568480301
User 48703 AUC after training: 0.6245016416510318
User 48703 does not improve AUC. Reverting changes.
Training on augumented user 81046 14/50 current_auc = 0.6245309568480301
User 81046 AUC after training: 0.6242671200750469
User 81046 does not improve AUC. Reverting changes.
Training on augumented user 71852 15/50 current_auc = 0.6245309568480301
User 71852 AUC after training: 0.6244136960600375
User 71852 does not improve AUC. Reverting changes.
Training on augumented user 79686 16/50 current_auc = 0.6245309568480301
User 79686 AUC after training: 0.6245016416510318
User 79686 does not improve AUC. Reverting changes.
Training on augumented user 19583 17/50 current_auc = 0.6245309568480301
User 19583 AUC after training: 0.6246189024390243
User 19583 improves AUC. Keeping the model.
Training on augumented user 71118 18/50 current_auc = 0.6246189024390243
User 71118 AUC after training: 0.6242671200750469
User 71118 does not improve AUC. Reverting changes.
Training on augumented user 16412 19/50 current_auc = 0.6246189024390243
User 16412 AUC after training: 0.6245602720450282
User 16412 does not improve AUC. Reverting changes.
Training on augumented user 3906 20/50 current_auc = 0.6246189024390243
User 3906 AUC after training: 0.6245016416510318
User 3906 does not improve AUC. Reverting changes.
Training on augumented user 5697 21/50 current_auc = 0.6246189024390243
User 5697 AUC after training: 0.6242378048780488
User 5697 does not improve AUC. Reverting changes.
Training on augumented user 59408 22/50 current_auc = 0.6246189024390243
User 59408 AUC after training: 0.6242378048780488
User 59408 does not improve AUC. Reverting changes.
Training on augumented user 17740 23/50 current_auc = 0.6246189024390243
User 17740 AUC after training: 0.6250293151969981
User 17740 improves AUC. Keeping the model.
Training on augumented user 27761 24/50 current_auc = 0.6250293151969981
User 27761 AUC after training: 0.6252931519699813
User 27761 improves AUC. Keeping the model.
Training on augumented user 102122 25/50 current_auc = 0.6252931519699813
User 102122 AUC after training: 0.6255863039399625
User 102122 improves AUC. Keeping the model.
Training on augumented user 117600 26/50 current_auc = 0.6255863039399625
User 117600 AUC after training: 0.6254397279549718
User 117600 does not improve AUC. Reverting changes.
Training on augumented user 68934 27/50 current_auc = 0.6255863039399625
User 68934 AUC after training: 0.6246189024390244
User 68934 does not improve AUC. Reverting changes.
Training on augumented user 23277 28/50 current_auc = 0.6255863039399625
User 23277 AUC after training: 0.6255863039399623
User 23277 does not improve AUC. Reverting changes.
Training on augumented user 88495 29/50 current_auc = 0.6255863039399625
User 88495 AUC after training: 0.625703564727955
User 88495 improves AUC. Keeping the model.
Training on augumented user 104399 30/50 current_auc = 0.625703564727955
User 104399 AUC after training: 0.6256156191369606
User 104399 does not improve AUC. Reverting changes.
Training on augumented user 68094 31/50 current_auc = 0.625703564727955
User 68094 AUC after training: 0.6253224671669793
User 68094 does not improve AUC. Reverting changes.
Training on augumented user 11031 32/50 current_auc = 0.625703564727955
User 11031 AUC after training: 0.625029315196998
User 11031 does not improve AUC. Reverting changes.
Training on augumented user 101013 33/50 current_auc = 0.625703564727955
User 101013 AUC after training: 0.6257328799249531
User 101013 improves AUC. Keeping the model.
Training on augumented user 66876 34/50 current_auc = 0.6257328799249531
User 66876 AUC after training: 0.6253224671669793
User 66876 does not improve AUC. Reverting changes.
Training on augumented user 75710 35/50 current_auc = 0.6257328799249531
User 75710 AUC after training: 0.6258208255159475
User 75710 improves AUC. Keeping the model.
Training on augumented user 75351 36/50 current_auc = 0.6258208255159475
User 75351 AUC after training: 0.6252052063789868
User 75351 does not improve AUC. Reverting changes.
Training on augumented user 62158 37/50 current_auc = 0.6258208255159475
User 62158 AUC after training: 0.6258501407129456
User 62158 improves AUC. Keeping the model.
Training on augumented user 95126 38/50 current_auc = 0.6258501407129456
User 95126 AUC after training: 0.6250879455909943
User 95126 does not improve AUC. Reverting changes.
Training on augumented user 9950 39/50 current_auc = 0.6258501407129456
User 9950 AUC after training: 0.6255569887429644
User 9950 does not improve AUC. Reverting changes.
Training on augumented user 22807 40/50 current_auc = 0.6258501407129456
User 22807 AUC after training: 0.6254983583489682
User 22807 does not improve AUC. Reverting changes.
Training on augumented user 8290 41/50 current_auc = 0.6258501407129456
User 8290 AUC after training: 0.6255863039399625
User 8290 does not improve AUC. Reverting changes.
Training on augumented user 115262 42/50 current_auc = 0.6258501407129456
User 115262 AUC after training: 0.6256742495309568
User 115262 does not improve AUC. Reverting changes.
Training on augumented user 102197 43/50 current_auc = 0.6258501407129456
User 102197 AUC after training: 0.6248241088180113
User 102197 does not improve AUC. Reverting changes.
Training on augumented user 52240 44/50 current_auc = 0.6258501407129456
User 52240 AUC after training: 0.6259967166979362
User 52240 improves AUC. Keeping the model.
Training on augumented user 9822 45/50 current_auc = 0.6259967166979362
User 9822 AUC after training: 0.6255276735459663
User 9822 does not improve AUC. Reverting changes.
Training on augumented user 83340 46/50 current_auc = 0.6259967166979362
User 83340 AUC after training: 0.6258794559099438
User 83340 does not improve AUC. Reverting changes.
Training on augumented user 31346 47/50 current_auc = 0.6259967166979362
User 31346 AUC after training: 0.6255276735459662
User 31346 does not improve AUC. Reverting changes.
Training on augumented user 48055 48/50 current_auc = 0.6259967166979362
User 48055 AUC after training: 0.6256742495309568
User 48055 does not improve AUC. Reverting changes.
Training on augumented user 130043 49/50 current_auc = 0.6259967166979362
User 130043 AUC after training: 0.6257621951219512
User 130043 does not improve AUC. Reverting changes.
[2024-12-02 19:46:19.947444] start test user 47890 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:20.416840] start test user 47890 233/568 recall augumented users by random, augumented_users = [48894, 112324, 12515, 114392, 107135, 79386, 123189, 16467, 115237, 51437, 82861, 27881, 116374, 103255, 75868, 14803, 101509, 82993, 109248, 58785, 94427, 46592, 98623, 80643, 3042, 10102, 85489, 74423, 24975, 91008, 88454, 136703, 65019, 107948, 98641, 116614, 31617, 57146, 104637, 132416, 11197, 53491, 7923, 18337, 65264, 137319, 75748, 90055, 9874, 102569]
[2024-12-02 19:46:20.431846] user = 47890 Cloud 233/568
[2024-12-02 19:46:20.464061] user = 47890 Local 233/568
[2024-12-02 19:46:20.581013] user = 47890 Local+ 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:22.149624] user = 47890 MPDA- 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8017073170731708
Training on augumented user 48894 0/50 current_auc = 0.8017073170731708
User 48894 AUC after training: 0.8023577235772358
User 48894 improves AUC. Keeping the model.
Training on augumented user 112324 1/50 current_auc = 0.8023577235772358
User 112324 AUC after training: 0.801869918699187
User 112324 does not improve AUC. Reverting changes.
Training on augumented user 12515 2/50 current_auc = 0.8023577235772358
User 12515 AUC after training: 0.8021138211382113
User 12515 does not improve AUC. Reverting changes.
Training on augumented user 114392 3/50 current_auc = 0.8023577235772358
User 114392 AUC after training: 0.8019512195121951
User 114392 does not improve AUC. Reverting changes.
Training on augumented user 107135 4/50 current_auc = 0.8023577235772358
User 107135 AUC after training: 0.8013008130081302
User 107135 does not improve AUC. Reverting changes.
Training on augumented user 79386 5/50 current_auc = 0.8023577235772358
User 79386 AUC after training: 0.8021951219512194
User 79386 does not improve AUC. Reverting changes.
Training on augumented user 123189 6/50 current_auc = 0.8023577235772358
User 123189 AUC after training: 0.8014634146341463
User 123189 does not improve AUC. Reverting changes.
Training on augumented user 16467 7/50 current_auc = 0.8023577235772358
User 16467 AUC after training: 0.801869918699187
User 16467 does not improve AUC. Reverting changes.
Training on augumented user 115237 8/50 current_auc = 0.8023577235772358
User 115237 AUC after training: 0.8022764227642276
User 115237 does not improve AUC. Reverting changes.
Training on augumented user 51437 9/50 current_auc = 0.8023577235772358
User 51437 AUC after training: 0.80130081300813
User 51437 does not improve AUC. Reverting changes.
Training on augumented user 82861 10/50 current_auc = 0.8023577235772358
User 82861 AUC after training: 0.8017073170731708
User 82861 does not improve AUC. Reverting changes.
Training on augumented user 27881 11/50 current_auc = 0.8023577235772358
User 27881 AUC after training: 0.8024390243902438
User 27881 improves AUC. Keeping the model.
Training on augumented user 116374 12/50 current_auc = 0.8024390243902438
User 116374 AUC after training: 0.8024390243902437
User 116374 does not improve AUC. Reverting changes.
Training on augumented user 103255 13/50 current_auc = 0.8024390243902438
User 103255 AUC after training: 0.8022764227642276
User 103255 does not improve AUC. Reverting changes.
Training on augumented user 75868 14/50 current_auc = 0.8024390243902438
User 75868 AUC after training: 0.8026016260162601
User 75868 improves AUC. Keeping the model.
Training on augumented user 14803 15/50 current_auc = 0.8026016260162601
User 14803 AUC after training: 0.8020325203252031
User 14803 does not improve AUC. Reverting changes.
Training on augumented user 101509 16/50 current_auc = 0.8026016260162601
User 101509 AUC after training: 0.8024390243902438
User 101509 does not improve AUC. Reverting changes.
Training on augumented user 82993 17/50 current_auc = 0.8026016260162601
User 82993 AUC after training: 0.8023577235772358
User 82993 does not improve AUC. Reverting changes.
Training on augumented user 109248 18/50 current_auc = 0.8026016260162601
User 109248 AUC after training: 0.801869918699187
User 109248 does not improve AUC. Reverting changes.
Training on augumented user 58785 19/50 current_auc = 0.8026016260162601
User 58785 AUC after training: 0.8023577235772357
User 58785 does not improve AUC. Reverting changes.
Training on augumented user 94427 20/50 current_auc = 0.8026016260162601
User 94427 AUC after training: 0.8027642276422764
User 94427 improves AUC. Keeping the model.
Training on augumented user 46592 21/50 current_auc = 0.8027642276422764
User 46592 AUC after training: 0.8029268292682926
User 46592 improves AUC. Keeping the model.
Training on augumented user 98623 22/50 current_auc = 0.8029268292682926
User 98623 AUC after training: 0.803170731707317
User 98623 improves AUC. Keeping the model.
Training on augumented user 80643 23/50 current_auc = 0.803170731707317
User 80643 AUC after training: 0.8022764227642276
User 80643 does not improve AUC. Reverting changes.
Training on augumented user 3042 24/50 current_auc = 0.803170731707317
User 3042 AUC after training: 0.8027642276422764
User 3042 does not improve AUC. Reverting changes.
Training on augumented user 10102 25/50 current_auc = 0.803170731707317
User 10102 AUC after training: 0.8024390243902438
User 10102 does not improve AUC. Reverting changes.
Training on augumented user 85489 26/50 current_auc = 0.803170731707317
User 85489 AUC after training: 0.803089430894309
User 85489 does not improve AUC. Reverting changes.
Training on augumented user 74423 27/50 current_auc = 0.803170731707317
User 74423 AUC after training: 0.8027642276422763
User 74423 does not improve AUC. Reverting changes.
Training on augumented user 24975 28/50 current_auc = 0.803170731707317
User 24975 AUC after training: 0.8028455284552845
User 24975 does not improve AUC. Reverting changes.
Training on augumented user 91008 29/50 current_auc = 0.803170731707317
User 91008 AUC after training: 0.8024390243902438
User 91008 does not improve AUC. Reverting changes.
Training on augumented user 88454 30/50 current_auc = 0.803170731707317
User 88454 AUC after training: 0.8028455284552846
User 88454 does not improve AUC. Reverting changes.
Training on augumented user 136703 31/50 current_auc = 0.803170731707317
User 136703 AUC after training: 0.8023577235772358
User 136703 does not improve AUC. Reverting changes.
Training on augumented user 65019 32/50 current_auc = 0.803170731707317
User 65019 AUC after training: 0.8021138211382113
User 65019 does not improve AUC. Reverting changes.
Training on augumented user 107948 33/50 current_auc = 0.803170731707317
User 107948 AUC after training: 0.8025203252032521
User 107948 does not improve AUC. Reverting changes.
Training on augumented user 98641 34/50 current_auc = 0.803170731707317
User 98641 AUC after training: 0.8032520325203252
User 98641 improves AUC. Keeping the model.
Training on augumented user 116614 35/50 current_auc = 0.8032520325203252
User 116614 AUC after training: 0.8026829268292683
User 116614 does not improve AUC. Reverting changes.
Training on augumented user 31617 36/50 current_auc = 0.8032520325203252
User 31617 AUC after training: 0.802520325203252
User 31617 does not improve AUC. Reverting changes.
Training on augumented user 57146 37/50 current_auc = 0.8032520325203252
User 57146 AUC after training: 0.8036585365853659
User 57146 improves AUC. Keeping the model.
Training on augumented user 104637 38/50 current_auc = 0.8036585365853659
User 104637 AUC after training: 0.803739837398374
User 104637 improves AUC. Keeping the model.
Training on augumented user 132416 39/50 current_auc = 0.803739837398374
User 132416 AUC after training: 0.8028455284552847
User 132416 does not improve AUC. Reverting changes.
Training on augumented user 11197 40/50 current_auc = 0.803739837398374
User 11197 AUC after training: 0.8030894308943088
User 11197 does not improve AUC. Reverting changes.
Training on augumented user 53491 41/50 current_auc = 0.803739837398374
User 53491 AUC after training: 0.803089430894309
User 53491 does not improve AUC. Reverting changes.
Training on augumented user 7923 42/50 current_auc = 0.803739837398374
User 7923 AUC after training: 0.8036585365853659
User 7923 does not improve AUC. Reverting changes.
Training on augumented user 18337 43/50 current_auc = 0.803739837398374
User 18337 AUC after training: 0.8032520325203252
User 18337 does not improve AUC. Reverting changes.
Training on augumented user 65264 44/50 current_auc = 0.803739837398374
User 65264 AUC after training: 0.8032520325203252
User 65264 does not improve AUC. Reverting changes.
Training on augumented user 137319 45/50 current_auc = 0.803739837398374
User 137319 AUC after training: 0.8036585365853658
User 137319 does not improve AUC. Reverting changes.
Training on augumented user 75748 46/50 current_auc = 0.803739837398374
User 75748 AUC after training: 0.803821138211382
User 75748 improves AUC. Keeping the model.
Training on augumented user 90055 47/50 current_auc = 0.803821138211382
User 90055 AUC after training: 0.8030081300813009
User 90055 does not improve AUC. Reverting changes.
Training on augumented user 9874 48/50 current_auc = 0.803821138211382
User 9874 AUC after training: 0.803821138211382
User 9874 does not improve AUC. Reverting changes.
Training on augumented user 102569 49/50 current_auc = 0.803821138211382
User 102569 AUC after training: 0.8030894308943088
User 102569 does not improve AUC. Reverting changes.
[2024-12-02 19:46:50.327525] start test user 47901 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:51.250304] start test user 47901 234/568 recall augumented users by random, augumented_users = [118697, 108620, 58625, 58552, 52577, 84992, 19378, 8825, 86304, 116921, 136924, 99259, 86886, 13748, 107595, 19004, 8819, 47371, 70943, 65126, 135170, 118475, 64774, 76824, 362, 135767, 49198, 73538, 93150, 42608, 64710, 110755, 113426, 29653, 86711, 96125, 63690, 60080, 82591, 39718, 36414, 62178, 64991, 137138, 13181, 7049, 121481, 50507, 20623, 20229]
[2024-12-02 19:46:51.280255] user = 47901 Cloud 234/568
[2024-12-02 19:46:51.290982] user = 47901 Local 234/568
[2024-12-02 19:46:51.386806] user = 47901 Local+ 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:53.087882] user = 47901 MPDA- 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.606060606060606
Training on augumented user 118697 0/50 current_auc = 0.606060606060606
User 118697 AUC after training: 0.606060606060606
User 118697 does not improve AUC. Reverting changes.
Training on augumented user 108620 1/50 current_auc = 0.606060606060606
User 108620 AUC after training: 0.606060606060606
User 108620 does not improve AUC. Reverting changes.
Training on augumented user 58625 2/50 current_auc = 0.606060606060606
User 58625 AUC after training: 0.606060606060606
User 58625 does not improve AUC. Reverting changes.
Training on augumented user 58552 3/50 current_auc = 0.606060606060606
User 58552 AUC after training: 0.606060606060606
User 58552 does not improve AUC. Reverting changes.
Training on augumented user 52577 4/50 current_auc = 0.606060606060606
User 52577 AUC after training: 0.606060606060606
User 52577 does not improve AUC. Reverting changes.
Training on augumented user 84992 5/50 current_auc = 0.606060606060606
User 84992 AUC after training: 0.606060606060606
User 84992 does not improve AUC. Reverting changes.
Training on augumented user 19378 6/50 current_auc = 0.606060606060606
User 19378 AUC after training: 0.606060606060606
User 19378 does not improve AUC. Reverting changes.
Training on augumented user 8825 7/50 current_auc = 0.606060606060606
User 8825 AUC after training: 0.606060606060606
User 8825 does not improve AUC. Reverting changes.
Training on augumented user 86304 8/50 current_auc = 0.606060606060606
User 86304 AUC after training: 0.606060606060606
User 86304 does not improve AUC. Reverting changes.
Training on augumented user 116921 9/50 current_auc = 0.606060606060606
User 116921 AUC after training: 0.606060606060606
User 116921 does not improve AUC. Reverting changes.
Training on augumented user 136924 10/50 current_auc = 0.606060606060606
User 136924 AUC after training: 0.606060606060606
User 136924 does not improve AUC. Reverting changes.
Training on augumented user 99259 11/50 current_auc = 0.606060606060606
User 99259 AUC after training: 0.606060606060606
User 99259 does not improve AUC. Reverting changes.
Training on augumented user 86886 12/50 current_auc = 0.606060606060606
User 86886 AUC after training: 0.606060606060606
User 86886 does not improve AUC. Reverting changes.
Training on augumented user 13748 13/50 current_auc = 0.606060606060606
User 13748 AUC after training: 0.606060606060606
User 13748 does not improve AUC. Reverting changes.
Training on augumented user 107595 14/50 current_auc = 0.606060606060606
User 107595 AUC after training: 0.606060606060606
User 107595 does not improve AUC. Reverting changes.
Training on augumented user 19004 15/50 current_auc = 0.606060606060606
User 19004 AUC after training: 0.606060606060606
User 19004 does not improve AUC. Reverting changes.
Training on augumented user 8819 16/50 current_auc = 0.606060606060606
User 8819 AUC after training: 0.6161616161616161
User 8819 improves AUC. Keeping the model.
Training on augumented user 47371 17/50 current_auc = 0.6161616161616161
User 47371 AUC after training: 0.606060606060606
User 47371 does not improve AUC. Reverting changes.
Training on augumented user 70943 18/50 current_auc = 0.6161616161616161
User 70943 AUC after training: 0.606060606060606
User 70943 does not improve AUC. Reverting changes.
Training on augumented user 65126 19/50 current_auc = 0.6161616161616161
User 65126 AUC after training: 0.606060606060606
User 65126 does not improve AUC. Reverting changes.
Training on augumented user 135170 20/50 current_auc = 0.6161616161616161
User 135170 AUC after training: 0.606060606060606
User 135170 does not improve AUC. Reverting changes.
Training on augumented user 118475 21/50 current_auc = 0.6161616161616161
User 118475 AUC after training: 0.606060606060606
User 118475 does not improve AUC. Reverting changes.
Training on augumented user 64774 22/50 current_auc = 0.6161616161616161
User 64774 AUC after training: 0.6161616161616161
User 64774 does not improve AUC. Reverting changes.
Training on augumented user 76824 23/50 current_auc = 0.6161616161616161
User 76824 AUC after training: 0.606060606060606
User 76824 does not improve AUC. Reverting changes.
Training on augumented user 362 24/50 current_auc = 0.6161616161616161
User 362 AUC after training: 0.606060606060606
User 362 does not improve AUC. Reverting changes.
Training on augumented user 135767 25/50 current_auc = 0.6161616161616161
User 135767 AUC after training: 0.6111111111111112
User 135767 does not improve AUC. Reverting changes.
Training on augumented user 49198 26/50 current_auc = 0.6161616161616161
User 49198 AUC after training: 0.6161616161616161
User 49198 does not improve AUC. Reverting changes.
Training on augumented user 73538 27/50 current_auc = 0.6161616161616161
User 73538 AUC after training: 0.6161616161616161
User 73538 does not improve AUC. Reverting changes.
Training on augumented user 93150 28/50 current_auc = 0.6161616161616161
User 93150 AUC after training: 0.606060606060606
User 93150 does not improve AUC. Reverting changes.
Training on augumented user 42608 29/50 current_auc = 0.6161616161616161
User 42608 AUC after training: 0.6161616161616161
User 42608 does not improve AUC. Reverting changes.
Training on augumented user 64710 30/50 current_auc = 0.6161616161616161
User 64710 AUC after training: 0.606060606060606
User 64710 does not improve AUC. Reverting changes.
Training on augumented user 110755 31/50 current_auc = 0.6161616161616161
User 110755 AUC after training: 0.6161616161616161
User 110755 does not improve AUC. Reverting changes.
Training on augumented user 113426 32/50 current_auc = 0.6161616161616161
User 113426 AUC after training: 0.606060606060606
User 113426 does not improve AUC. Reverting changes.
Training on augumented user 29653 33/50 current_auc = 0.6161616161616161
User 29653 AUC after training: 0.606060606060606
User 29653 does not improve AUC. Reverting changes.
Training on augumented user 86711 34/50 current_auc = 0.6161616161616161
User 86711 AUC after training: 0.6111111111111112
User 86711 does not improve AUC. Reverting changes.
Training on augumented user 96125 35/50 current_auc = 0.6161616161616161
User 96125 AUC after training: 0.606060606060606
User 96125 does not improve AUC. Reverting changes.
Training on augumented user 63690 36/50 current_auc = 0.6161616161616161
User 63690 AUC after training: 0.606060606060606
User 63690 does not improve AUC. Reverting changes.
Training on augumented user 60080 37/50 current_auc = 0.6161616161616161
User 60080 AUC after training: 0.606060606060606
User 60080 does not improve AUC. Reverting changes.
Training on augumented user 82591 38/50 current_auc = 0.6161616161616161
User 82591 AUC after training: 0.6161616161616161
User 82591 does not improve AUC. Reverting changes.
Training on augumented user 39718 39/50 current_auc = 0.6161616161616161
User 39718 AUC after training: 0.606060606060606
User 39718 does not improve AUC. Reverting changes.
Training on augumented user 36414 40/50 current_auc = 0.6161616161616161
User 36414 AUC after training: 0.606060606060606
User 36414 does not improve AUC. Reverting changes.
Training on augumented user 62178 41/50 current_auc = 0.6161616161616161
User 62178 AUC after training: 0.606060606060606
User 62178 does not improve AUC. Reverting changes.
Training on augumented user 64991 42/50 current_auc = 0.6161616161616161
User 64991 AUC after training: 0.6161616161616161
User 64991 does not improve AUC. Reverting changes.
Training on augumented user 137138 43/50 current_auc = 0.6161616161616161
User 137138 AUC after training: 0.606060606060606
User 137138 does not improve AUC. Reverting changes.
Training on augumented user 13181 44/50 current_auc = 0.6161616161616161
User 13181 AUC after training: 0.6161616161616161
User 13181 does not improve AUC. Reverting changes.
Training on augumented user 7049 45/50 current_auc = 0.6161616161616161
User 7049 AUC after training: 0.606060606060606
User 7049 does not improve AUC. Reverting changes.
Training on augumented user 121481 46/50 current_auc = 0.6161616161616161
User 121481 AUC after training: 0.606060606060606
User 121481 does not improve AUC. Reverting changes.
Training on augumented user 50507 47/50 current_auc = 0.6161616161616161
User 50507 AUC after training: 0.606060606060606
User 50507 does not improve AUC. Reverting changes.
Training on augumented user 20623 48/50 current_auc = 0.6161616161616161
User 20623 AUC after training: 0.606060606060606
User 20623 does not improve AUC. Reverting changes.
Training on augumented user 20229 49/50 current_auc = 0.6161616161616161
User 20229 AUC after training: 0.606060606060606
User 20229 does not improve AUC. Reverting changes.
[2024-12-02 19:47:24.588114] start test user 47931 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:25.112896] start test user 47931 235/568 recall augumented users by random, augumented_users = [127472, 114391, 99797, 70446, 32510, 115080, 102541, 54694, 103820, 108186, 27292, 62266, 84311, 40660, 65669, 15290, 129168, 27910, 119413, 6185, 123292, 7278, 111007, 87094, 26903, 51529, 79869, 9130, 22108, 46416, 43963, 119334, 28831, 15241, 66671, 15632, 25923, 42330, 130862, 96197, 4369, 69661, 63312, 83387, 86456, 20176, 57054, 11260, 61432, 81203]
[2024-12-02 19:47:25.127991] user = 47931 Cloud 235/568
[2024-12-02 19:47:25.138346] user = 47931 Local 235/568
[2024-12-02 19:47:25.198416] user = 47931 Local+ 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:27.922091] user = 47931 MPDA- 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.40914285714285714
Training on augumented user 127472 0/50 current_auc = 0.40914285714285714
User 127472 AUC after training: 0.4125714285714286
User 127472 improves AUC. Keeping the model.
Training on augumented user 114391 1/50 current_auc = 0.4125714285714286
User 114391 AUC after training: 0.4137142857142857
User 114391 improves AUC. Keeping the model.
Training on augumented user 99797 2/50 current_auc = 0.4137142857142857
User 99797 AUC after training: 0.4114285714285714
User 99797 does not improve AUC. Reverting changes.
Training on augumented user 70446 3/50 current_auc = 0.4137142857142857
User 70446 AUC after training: 0.4068571428571428
User 70446 does not improve AUC. Reverting changes.
Training on augumented user 32510 4/50 current_auc = 0.4137142857142857
User 32510 AUC after training: 0.408
User 32510 does not improve AUC. Reverting changes.
Training on augumented user 115080 5/50 current_auc = 0.4137142857142857
User 115080 AUC after training: 0.41028571428571425
User 115080 does not improve AUC. Reverting changes.
Training on augumented user 102541 6/50 current_auc = 0.4137142857142857
User 102541 AUC after training: 0.41142857142857137
User 102541 does not improve AUC. Reverting changes.
Training on augumented user 54694 7/50 current_auc = 0.4137142857142857
User 54694 AUC after training: 0.4114285714285714
User 54694 does not improve AUC. Reverting changes.
Training on augumented user 103820 8/50 current_auc = 0.4137142857142857
User 103820 AUC after training: 0.408
User 103820 does not improve AUC. Reverting changes.
Training on augumented user 108186 9/50 current_auc = 0.4137142857142857
User 108186 AUC after training: 0.416
User 108186 improves AUC. Keeping the model.
Training on augumented user 27292 10/50 current_auc = 0.416
User 27292 AUC after training: 0.4205714285714286
User 27292 improves AUC. Keeping the model.
Training on augumented user 62266 11/50 current_auc = 0.4205714285714286
User 62266 AUC after training: 0.41942857142857143
User 62266 does not improve AUC. Reverting changes.
Training on augumented user 84311 12/50 current_auc = 0.4205714285714286
User 84311 AUC after training: 0.416
User 84311 does not improve AUC. Reverting changes.
Training on augumented user 40660 13/50 current_auc = 0.4205714285714286
User 40660 AUC after training: 0.41828571428571426
User 40660 does not improve AUC. Reverting changes.
Training on augumented user 65669 14/50 current_auc = 0.4205714285714286
User 65669 AUC after training: 0.41600000000000004
User 65669 does not improve AUC. Reverting changes.
Training on augumented user 15290 15/50 current_auc = 0.4205714285714286
User 15290 AUC after training: 0.41714285714285715
User 15290 does not improve AUC. Reverting changes.
Training on augumented user 129168 16/50 current_auc = 0.4205714285714286
User 129168 AUC after training: 0.4217142857142857
User 129168 improves AUC. Keeping the model.
Training on augumented user 27910 17/50 current_auc = 0.4217142857142857
User 27910 AUC after training: 0.41714285714285715
User 27910 does not improve AUC. Reverting changes.
Training on augumented user 119413 18/50 current_auc = 0.4217142857142857
User 119413 AUC after training: 0.41942857142857143
User 119413 does not improve AUC. Reverting changes.
Training on augumented user 6185 19/50 current_auc = 0.4217142857142857
User 6185 AUC after training: 0.4217142857142857
User 6185 does not improve AUC. Reverting changes.
Training on augumented user 123292 20/50 current_auc = 0.4217142857142857
User 123292 AUC after training: 0.41942857142857143
User 123292 does not improve AUC. Reverting changes.
Training on augumented user 7278 21/50 current_auc = 0.4217142857142857
User 7278 AUC after training: 0.41942857142857143
User 7278 does not improve AUC. Reverting changes.
Training on augumented user 111007 22/50 current_auc = 0.4217142857142857
User 111007 AUC after training: 0.41714285714285715
User 111007 does not improve AUC. Reverting changes.
Training on augumented user 87094 23/50 current_auc = 0.4217142857142857
User 87094 AUC after training: 0.424
User 87094 improves AUC. Keeping the model.
Training on augumented user 26903 24/50 current_auc = 0.424
User 26903 AUC after training: 0.4137142857142857
User 26903 does not improve AUC. Reverting changes.
Training on augumented user 51529 25/50 current_auc = 0.424
User 51529 AUC after training: 0.41714285714285715
User 51529 does not improve AUC. Reverting changes.
Training on augumented user 79869 26/50 current_auc = 0.424
User 79869 AUC after training: 0.4228571428571429
User 79869 does not improve AUC. Reverting changes.
Training on augumented user 9130 27/50 current_auc = 0.424
User 9130 AUC after training: 0.41828571428571426
User 9130 does not improve AUC. Reverting changes.
Training on augumented user 22108 28/50 current_auc = 0.424
User 22108 AUC after training: 0.41942857142857143
User 22108 does not improve AUC. Reverting changes.
Training on augumented user 46416 29/50 current_auc = 0.424
User 46416 AUC after training: 0.42742857142857144
User 46416 improves AUC. Keeping the model.
Training on augumented user 43963 30/50 current_auc = 0.42742857142857144
User 43963 AUC after training: 0.42628571428571427
User 43963 does not improve AUC. Reverting changes.
Training on augumented user 119334 31/50 current_auc = 0.42742857142857144
User 119334 AUC after training: 0.42400000000000004
User 119334 does not improve AUC. Reverting changes.
Training on augumented user 28831 32/50 current_auc = 0.42742857142857144
User 28831 AUC after training: 0.424
User 28831 does not improve AUC. Reverting changes.
Training on augumented user 15241 33/50 current_auc = 0.42742857142857144
User 15241 AUC after training: 0.4274285714285714
User 15241 does not improve AUC. Reverting changes.
Training on augumented user 66671 34/50 current_auc = 0.42742857142857144
User 66671 AUC after training: 0.4285714285714286
User 66671 improves AUC. Keeping the model.
Training on augumented user 15632 35/50 current_auc = 0.4285714285714286
User 15632 AUC after training: 0.4308571428571429
User 15632 improves AUC. Keeping the model.
Training on augumented user 25923 36/50 current_auc = 0.4308571428571429
User 25923 AUC after training: 0.4262857142857143
User 25923 does not improve AUC. Reverting changes.
Training on augumented user 42330 37/50 current_auc = 0.4308571428571429
User 42330 AUC after training: 0.4308571428571429
User 42330 does not improve AUC. Reverting changes.
Training on augumented user 130862 38/50 current_auc = 0.4308571428571429
User 130862 AUC after training: 0.42514285714285716
User 130862 does not improve AUC. Reverting changes.
Training on augumented user 96197 39/50 current_auc = 0.4308571428571429
User 96197 AUC after training: 0.42628571428571427
User 96197 does not improve AUC. Reverting changes.
Training on augumented user 4369 40/50 current_auc = 0.4308571428571429
User 4369 AUC after training: 0.42514285714285716
User 4369 does not improve AUC. Reverting changes.
Training on augumented user 69661 41/50 current_auc = 0.4308571428571429
User 69661 AUC after training: 0.42857142857142855
User 69661 does not improve AUC. Reverting changes.
Training on augumented user 63312 42/50 current_auc = 0.4308571428571429
User 63312 AUC after training: 0.42171428571428565
User 63312 does not improve AUC. Reverting changes.
Training on augumented user 83387 43/50 current_auc = 0.4308571428571429
User 83387 AUC after training: 0.42514285714285716
User 83387 does not improve AUC. Reverting changes.
Training on augumented user 86456 44/50 current_auc = 0.4308571428571429
User 86456 AUC after training: 0.43314285714285716
User 86456 improves AUC. Keeping the model.
Training on augumented user 20176 45/50 current_auc = 0.43314285714285716
User 20176 AUC after training: 0.4342857142857143
User 20176 improves AUC. Keeping the model.
Training on augumented user 57054 46/50 current_auc = 0.4342857142857143
User 57054 AUC after training: 0.432
User 57054 does not improve AUC. Reverting changes.
Training on augumented user 11260 47/50 current_auc = 0.4342857142857143
User 11260 AUC after training: 0.4342857142857143
User 11260 does not improve AUC. Reverting changes.
Training on augumented user 61432 48/50 current_auc = 0.4342857142857143
User 61432 AUC after training: 0.4342857142857143
User 61432 does not improve AUC. Reverting changes.
Training on augumented user 81203 49/50 current_auc = 0.4342857142857143
User 81203 AUC after training: 0.432
User 81203 does not improve AUC. Reverting changes.
[2024-12-02 19:47:59.448861] start test user 47938 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:00.056433] start test user 47938 236/568 recall augumented users by random, augumented_users = [25295, 14937, 2284, 29167, 134048, 125407, 110934, 103264, 39549, 84908, 108383, 13867, 45487, 89091, 121747, 122339, 39863, 62635, 5563, 55596, 80679, 68423, 85051, 47524, 100559, 115326, 21958, 92648, 99850, 71817, 93477, 55804, 10790, 99325, 12688, 55948, 77593, 67789, 91280, 38687, 51368, 110476, 71519, 91220, 135622, 74474, 52589, 43805, 11876, 1813]
[2024-12-02 19:48:00.088898] user = 47938 Cloud 236/568
[2024-12-02 19:48:00.098716] user = 47938 Local 236/568
[2024-12-02 19:48:00.119048] user = 47938 Local+ 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:02.104388] user = 47938 MPDA- 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5277777777777777
Training on augumented user 25295 0/50 current_auc = 0.5277777777777777
User 25295 AUC after training: 0.5277777777777777
User 25295 does not improve AUC. Reverting changes.
Training on augumented user 14937 1/50 current_auc = 0.5277777777777777
User 14937 AUC after training: 0.5203703703703704
User 14937 does not improve AUC. Reverting changes.
Training on augumented user 2284 2/50 current_auc = 0.5277777777777777
User 2284 AUC after training: 0.5166666666666666
User 2284 does not improve AUC. Reverting changes.
Training on augumented user 29167 3/50 current_auc = 0.5277777777777777
User 29167 AUC after training: 0.524074074074074
User 29167 does not improve AUC. Reverting changes.
Training on augumented user 134048 4/50 current_auc = 0.5277777777777777
User 134048 AUC after training: 0.524074074074074
User 134048 does not improve AUC. Reverting changes.
Training on augumented user 125407 5/50 current_auc = 0.5277777777777777
User 125407 AUC after training: 0.5277777777777777
User 125407 does not improve AUC. Reverting changes.
Training on augumented user 110934 6/50 current_auc = 0.5277777777777777
User 110934 AUC after training: 0.524074074074074
User 110934 does not improve AUC. Reverting changes.
Training on augumented user 103264 7/50 current_auc = 0.5277777777777777
User 103264 AUC after training: 0.524074074074074
User 103264 does not improve AUC. Reverting changes.
Training on augumented user 39549 8/50 current_auc = 0.5277777777777777
User 39549 AUC after training: 0.524074074074074
User 39549 does not improve AUC. Reverting changes.
Training on augumented user 84908 9/50 current_auc = 0.5277777777777777
User 84908 AUC after training: 0.5277777777777777
User 84908 does not improve AUC. Reverting changes.
Training on augumented user 108383 10/50 current_auc = 0.5277777777777777
User 108383 AUC after training: 0.5277777777777777
User 108383 does not improve AUC. Reverting changes.
Training on augumented user 13867 11/50 current_auc = 0.5277777777777777
User 13867 AUC after training: 0.5277777777777777
User 13867 does not improve AUC. Reverting changes.
Training on augumented user 45487 12/50 current_auc = 0.5277777777777777
User 45487 AUC after training: 0.5277777777777777
User 45487 does not improve AUC. Reverting changes.
Training on augumented user 89091 13/50 current_auc = 0.5277777777777777
User 89091 AUC after training: 0.5277777777777777
User 89091 does not improve AUC. Reverting changes.
Training on augumented user 121747 14/50 current_auc = 0.5277777777777777
User 121747 AUC after training: 0.524074074074074
User 121747 does not improve AUC. Reverting changes.
Training on augumented user 122339 15/50 current_auc = 0.5277777777777777
User 122339 AUC after training: 0.5166666666666666
User 122339 does not improve AUC. Reverting changes.
Training on augumented user 39863 16/50 current_auc = 0.5277777777777777
User 39863 AUC after training: 0.5277777777777777
User 39863 does not improve AUC. Reverting changes.
Training on augumented user 62635 17/50 current_auc = 0.5277777777777777
User 62635 AUC after training: 0.524074074074074
User 62635 does not improve AUC. Reverting changes.
Training on augumented user 5563 18/50 current_auc = 0.5277777777777777
User 5563 AUC after training: 0.5277777777777777
User 5563 does not improve AUC. Reverting changes.
Training on augumented user 55596 19/50 current_auc = 0.5277777777777777
User 55596 AUC after training: 0.5166666666666666
User 55596 does not improve AUC. Reverting changes.
Training on augumented user 80679 20/50 current_auc = 0.5277777777777777
User 80679 AUC after training: 0.5166666666666666
User 80679 does not improve AUC. Reverting changes.
Training on augumented user 68423 21/50 current_auc = 0.5277777777777777
User 68423 AUC after training: 0.5166666666666666
User 68423 does not improve AUC. Reverting changes.
Training on augumented user 85051 22/50 current_auc = 0.5277777777777777
User 85051 AUC after training: 0.524074074074074
User 85051 does not improve AUC. Reverting changes.
Training on augumented user 47524 23/50 current_auc = 0.5277777777777777
User 47524 AUC after training: 0.5166666666666666
User 47524 does not improve AUC. Reverting changes.
Training on augumented user 100559 24/50 current_auc = 0.5277777777777777
User 100559 AUC after training: 0.524074074074074
User 100559 does not improve AUC. Reverting changes.
Training on augumented user 115326 25/50 current_auc = 0.5277777777777777
User 115326 AUC after training: 0.5277777777777777
User 115326 does not improve AUC. Reverting changes.
Training on augumented user 21958 26/50 current_auc = 0.5277777777777777
User 21958 AUC after training: 0.5166666666666666
User 21958 does not improve AUC. Reverting changes.
Training on augumented user 92648 27/50 current_auc = 0.5277777777777777
User 92648 AUC after training: 0.5166666666666666
User 92648 does not improve AUC. Reverting changes.
Training on augumented user 99850 28/50 current_auc = 0.5277777777777777
User 99850 AUC after training: 0.5203703703703704
User 99850 does not improve AUC. Reverting changes.
Training on augumented user 71817 29/50 current_auc = 0.5277777777777777
User 71817 AUC after training: 0.524074074074074
User 71817 does not improve AUC. Reverting changes.
Training on augumented user 93477 30/50 current_auc = 0.5277777777777777
User 93477 AUC after training: 0.5277777777777777
User 93477 does not improve AUC. Reverting changes.
Training on augumented user 55804 31/50 current_auc = 0.5277777777777777
User 55804 AUC after training: 0.5203703703703704
User 55804 does not improve AUC. Reverting changes.
Training on augumented user 10790 32/50 current_auc = 0.5277777777777777
User 10790 AUC after training: 0.5277777777777777
User 10790 does not improve AUC. Reverting changes.
Training on augumented user 99325 33/50 current_auc = 0.5277777777777777
User 99325 AUC after training: 0.5277777777777777
User 99325 does not improve AUC. Reverting changes.
Training on augumented user 12688 34/50 current_auc = 0.5277777777777777
User 12688 AUC after training: 0.5166666666666666
User 12688 does not improve AUC. Reverting changes.
Training on augumented user 55948 35/50 current_auc = 0.5277777777777777
User 55948 AUC after training: 0.5277777777777777
User 55948 does not improve AUC. Reverting changes.
Training on augumented user 77593 36/50 current_auc = 0.5277777777777777
User 77593 AUC after training: 0.5277777777777777
User 77593 does not improve AUC. Reverting changes.
Training on augumented user 67789 37/50 current_auc = 0.5277777777777777
User 67789 AUC after training: 0.524074074074074
User 67789 does not improve AUC. Reverting changes.
Training on augumented user 91280 38/50 current_auc = 0.5277777777777777
User 91280 AUC after training: 0.524074074074074
User 91280 does not improve AUC. Reverting changes.
Training on augumented user 38687 39/50 current_auc = 0.5277777777777777
User 38687 AUC after training: 0.524074074074074
User 38687 does not improve AUC. Reverting changes.
Training on augumented user 51368 40/50 current_auc = 0.5277777777777777
User 51368 AUC after training: 0.5277777777777777
User 51368 does not improve AUC. Reverting changes.
Training on augumented user 110476 41/50 current_auc = 0.5277777777777777
User 110476 AUC after training: 0.5203703703703704
User 110476 does not improve AUC. Reverting changes.
Training on augumented user 71519 42/50 current_auc = 0.5277777777777777
User 71519 AUC after training: 0.524074074074074
User 71519 does not improve AUC. Reverting changes.
Training on augumented user 91220 43/50 current_auc = 0.5277777777777777
User 91220 AUC after training: 0.5277777777777777
User 91220 does not improve AUC. Reverting changes.
Training on augumented user 135622 44/50 current_auc = 0.5277777777777777
User 135622 AUC after training: 0.5277777777777777
User 135622 does not improve AUC. Reverting changes.
Training on augumented user 74474 45/50 current_auc = 0.5277777777777777
User 74474 AUC after training: 0.5203703703703704
User 74474 does not improve AUC. Reverting changes.
Training on augumented user 52589 46/50 current_auc = 0.5277777777777777
User 52589 AUC after training: 0.5166666666666666
User 52589 does not improve AUC. Reverting changes.
Training on augumented user 43805 47/50 current_auc = 0.5277777777777777
User 43805 AUC after training: 0.5166666666666666
User 43805 does not improve AUC. Reverting changes.
Training on augumented user 11876 48/50 current_auc = 0.5277777777777777
User 11876 AUC after training: 0.5166666666666666
User 11876 does not improve AUC. Reverting changes.
Training on augumented user 1813 49/50 current_auc = 0.5277777777777777
User 1813 AUC after training: 0.5203703703703704
User 1813 does not improve AUC. Reverting changes.
[2024-12-02 19:48:30.172074] start test user 47951 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:30.626708] start test user 47951 237/568 recall augumented users by random, augumented_users = [95088, 85625, 77936, 39604, 122741, 129067, 83748, 61536, 94902, 130969, 38992, 105589, 82613, 70184, 78854, 4534, 85512, 113739, 26771, 11254, 42242, 58781, 88159, 84883, 26936, 74518, 125360, 36059, 18291, 73432, 58502, 128870, 85604, 71184, 71085, 10128, 63934, 19936, 41773, 71899, 89408, 130319, 103469, 26638, 84587, 93048, 81588, 104841, 58389, 88527]
[2024-12-02 19:48:30.640698] user = 47951 Cloud 237/568
[2024-12-02 19:48:30.649309] user = 47951 Local 237/568
[2024-12-02 19:48:30.687462] user = 47951 Local+ 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:32.943743] user = 47951 MPDA- 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.44000000000000006
Training on augumented user 95088 0/50 current_auc = 0.44000000000000006
User 95088 AUC after training: 0.45333333333333337
User 95088 improves AUC. Keeping the model.
Training on augumented user 85625 1/50 current_auc = 0.45333333333333337
User 85625 AUC after training: 0.44000000000000006
User 85625 does not improve AUC. Reverting changes.
Training on augumented user 77936 2/50 current_auc = 0.45333333333333337
User 77936 AUC after training: 0.44000000000000006
User 77936 does not improve AUC. Reverting changes.
Training on augumented user 39604 3/50 current_auc = 0.45333333333333337
User 39604 AUC after training: 0.44000000000000006
User 39604 does not improve AUC. Reverting changes.
Training on augumented user 122741 4/50 current_auc = 0.45333333333333337
User 122741 AUC after training: 0.44000000000000006
User 122741 does not improve AUC. Reverting changes.
Training on augumented user 129067 5/50 current_auc = 0.45333333333333337
User 129067 AUC after training: 0.45333333333333337
User 129067 does not improve AUC. Reverting changes.
Training on augumented user 83748 6/50 current_auc = 0.45333333333333337
User 83748 AUC after training: 0.44000000000000006
User 83748 does not improve AUC. Reverting changes.
Training on augumented user 61536 7/50 current_auc = 0.45333333333333337
User 61536 AUC after training: 0.44000000000000006
User 61536 does not improve AUC. Reverting changes.
Training on augumented user 94902 8/50 current_auc = 0.45333333333333337
User 94902 AUC after training: 0.43999999999999995
User 94902 does not improve AUC. Reverting changes.
Training on augumented user 130969 9/50 current_auc = 0.45333333333333337
User 130969 AUC after training: 0.45333333333333337
User 130969 does not improve AUC. Reverting changes.
Training on augumented user 38992 10/50 current_auc = 0.45333333333333337
User 38992 AUC after training: 0.45333333333333337
User 38992 does not improve AUC. Reverting changes.
Training on augumented user 105589 11/50 current_auc = 0.45333333333333337
User 105589 AUC after training: 0.44000000000000006
User 105589 does not improve AUC. Reverting changes.
Training on augumented user 82613 12/50 current_auc = 0.45333333333333337
User 82613 AUC after training: 0.44000000000000006
User 82613 does not improve AUC. Reverting changes.
Training on augumented user 70184 13/50 current_auc = 0.45333333333333337
User 70184 AUC after training: 0.45333333333333337
User 70184 does not improve AUC. Reverting changes.
Training on augumented user 78854 14/50 current_auc = 0.45333333333333337
User 78854 AUC after training: 0.44000000000000006
User 78854 does not improve AUC. Reverting changes.
Training on augumented user 4534 15/50 current_auc = 0.45333333333333337
User 4534 AUC after training: 0.45333333333333337
User 4534 does not improve AUC. Reverting changes.
Training on augumented user 85512 16/50 current_auc = 0.45333333333333337
User 85512 AUC after training: 0.44000000000000006
User 85512 does not improve AUC. Reverting changes.
Training on augumented user 113739 17/50 current_auc = 0.45333333333333337
User 113739 AUC after training: 0.45333333333333337
User 113739 does not improve AUC. Reverting changes.
Training on augumented user 26771 18/50 current_auc = 0.45333333333333337
User 26771 AUC after training: 0.45333333333333337
User 26771 does not improve AUC. Reverting changes.
Training on augumented user 11254 19/50 current_auc = 0.45333333333333337
User 11254 AUC after training: 0.44000000000000006
User 11254 does not improve AUC. Reverting changes.
Training on augumented user 42242 20/50 current_auc = 0.45333333333333337
User 42242 AUC after training: 0.44000000000000006
User 42242 does not improve AUC. Reverting changes.
Training on augumented user 58781 21/50 current_auc = 0.45333333333333337
User 58781 AUC after training: 0.44000000000000006
User 58781 does not improve AUC. Reverting changes.
Training on augumented user 88159 22/50 current_auc = 0.45333333333333337
User 88159 AUC after training: 0.44000000000000006
User 88159 does not improve AUC. Reverting changes.
Training on augumented user 84883 23/50 current_auc = 0.45333333333333337
User 84883 AUC after training: 0.44000000000000006
User 84883 does not improve AUC. Reverting changes.
Training on augumented user 26936 24/50 current_auc = 0.45333333333333337
User 26936 AUC after training: 0.45333333333333337
User 26936 does not improve AUC. Reverting changes.
Training on augumented user 74518 25/50 current_auc = 0.45333333333333337
User 74518 AUC after training: 0.44000000000000006
User 74518 does not improve AUC. Reverting changes.
Training on augumented user 125360 26/50 current_auc = 0.45333333333333337
User 125360 AUC after training: 0.44000000000000006
User 125360 does not improve AUC. Reverting changes.
Training on augumented user 36059 27/50 current_auc = 0.45333333333333337
User 36059 AUC after training: 0.44000000000000006
User 36059 does not improve AUC. Reverting changes.
Training on augumented user 18291 28/50 current_auc = 0.45333333333333337
User 18291 AUC after training: 0.44000000000000006
User 18291 does not improve AUC. Reverting changes.
Training on augumented user 73432 29/50 current_auc = 0.45333333333333337
User 73432 AUC after training: 0.44000000000000006
User 73432 does not improve AUC. Reverting changes.
Training on augumented user 58502 30/50 current_auc = 0.45333333333333337
User 58502 AUC after training: 0.44000000000000006
User 58502 does not improve AUC. Reverting changes.
Training on augumented user 128870 31/50 current_auc = 0.45333333333333337
User 128870 AUC after training: 0.44000000000000006
User 128870 does not improve AUC. Reverting changes.
Training on augumented user 85604 32/50 current_auc = 0.45333333333333337
User 85604 AUC after training: 0.44000000000000006
User 85604 does not improve AUC. Reverting changes.
Training on augumented user 71184 33/50 current_auc = 0.45333333333333337
User 71184 AUC after training: 0.44000000000000006
User 71184 does not improve AUC. Reverting changes.
Training on augumented user 71085 34/50 current_auc = 0.45333333333333337
User 71085 AUC after training: 0.44000000000000006
User 71085 does not improve AUC. Reverting changes.
Training on augumented user 10128 35/50 current_auc = 0.45333333333333337
User 10128 AUC after training: 0.44000000000000006
User 10128 does not improve AUC. Reverting changes.
Training on augumented user 63934 36/50 current_auc = 0.45333333333333337
User 63934 AUC after training: 0.44000000000000006
User 63934 does not improve AUC. Reverting changes.
Training on augumented user 19936 37/50 current_auc = 0.45333333333333337
User 19936 AUC after training: 0.45333333333333337
User 19936 does not improve AUC. Reverting changes.
Training on augumented user 41773 38/50 current_auc = 0.45333333333333337
User 41773 AUC after training: 0.44000000000000006
User 41773 does not improve AUC. Reverting changes.
Training on augumented user 71899 39/50 current_auc = 0.45333333333333337
User 71899 AUC after training: 0.45333333333333337
User 71899 does not improve AUC. Reverting changes.
Training on augumented user 89408 40/50 current_auc = 0.45333333333333337
User 89408 AUC after training: 0.44000000000000006
User 89408 does not improve AUC. Reverting changes.
Training on augumented user 130319 41/50 current_auc = 0.45333333333333337
User 130319 AUC after training: 0.44000000000000006
User 130319 does not improve AUC. Reverting changes.
Training on augumented user 103469 42/50 current_auc = 0.45333333333333337
User 103469 AUC after training: 0.45333333333333337
User 103469 does not improve AUC. Reverting changes.
Training on augumented user 26638 43/50 current_auc = 0.45333333333333337
User 26638 AUC after training: 0.44000000000000006
User 26638 does not improve AUC. Reverting changes.
Training on augumented user 84587 44/50 current_auc = 0.45333333333333337
User 84587 AUC after training: 0.44000000000000006
User 84587 does not improve AUC. Reverting changes.
Training on augumented user 93048 45/50 current_auc = 0.45333333333333337
User 93048 AUC after training: 0.44000000000000006
User 93048 does not improve AUC. Reverting changes.
Training on augumented user 81588 46/50 current_auc = 0.45333333333333337
User 81588 AUC after training: 0.44000000000000006
User 81588 does not improve AUC. Reverting changes.
Training on augumented user 104841 47/50 current_auc = 0.45333333333333337
User 104841 AUC after training: 0.44000000000000006
User 104841 does not improve AUC. Reverting changes.
Training on augumented user 58389 48/50 current_auc = 0.45333333333333337
User 58389 AUC after training: 0.44000000000000006
User 58389 does not improve AUC. Reverting changes.
Training on augumented user 88527 49/50 current_auc = 0.45333333333333337
User 88527 AUC after training: 0.44000000000000006
User 88527 does not improve AUC. Reverting changes.
[2024-12-02 19:49:01.133442] start test user 47953 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:02.098229] start test user 47953 238/568 recall augumented users by random, augumented_users = [54386, 45047, 20349, 49749, 64875, 52483, 38035, 118801, 123680, 117679, 35071, 132348, 34848, 111274, 11430, 108800, 111651, 40003, 40060, 76044, 17584, 21634, 105770, 54869, 27857, 26504, 111415, 63159, 23217, 41833, 100841, 13796, 122829, 123070, 113952, 63083, 11519, 34492, 2330, 68402, 97713, 29441, 42435, 37270, 685, 50000, 11839, 4333, 93724, 51978]
[2024-12-02 19:49:02.131535] user = 47953 Cloud 238/568
[2024-12-02 19:49:02.238024] user = 47953 Local 238/568
[2024-12-02 19:49:02.402921] user = 47953 Local+ 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:05.655572] user = 47953 MPDA- 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.663915596018038
Training on augumented user 54386 0/50 current_auc = 0.663915596018038
User 54386 AUC after training: 0.6643410193142176
User 54386 improves AUC. Keeping the model.
Training on augumented user 45047 1/50 current_auc = 0.6643410193142176
User 45047 AUC after training: 0.6641708499957457
User 45047 does not improve AUC. Reverting changes.
Training on augumented user 20349 2/50 current_auc = 0.6643410193142176
User 20349 AUC after training: 0.6646813579511615
User 20349 improves AUC. Keeping the model.
Training on augumented user 49749 3/50 current_auc = 0.6646813579511615
User 49749 AUC after training: 0.6646813579511615
User 49749 does not improve AUC. Reverting changes.
Training on augumented user 64875 4/50 current_auc = 0.6646813579511615
User 64875 AUC after training: 0.6643410193142176
User 64875 does not improve AUC. Reverting changes.
Training on augumented user 52483 5/50 current_auc = 0.6646813579511615
User 52483 AUC after training: 0.6648515272696334
User 52483 improves AUC. Keeping the model.
Training on augumented user 38035 6/50 current_auc = 0.6648515272696334
User 38035 AUC after training: 0.665191865906577
User 38035 improves AUC. Keeping the model.
Training on augumented user 118801 7/50 current_auc = 0.665191865906577
User 118801 AUC after training: 0.665191865906577
User 118801 does not improve AUC. Reverting changes.
Training on augumented user 123680 8/50 current_auc = 0.665191865906577
User 123680 AUC after training: 0.6649366119288692
User 123680 does not improve AUC. Reverting changes.
Training on augumented user 117679 9/50 current_auc = 0.665191865906577
User 117679 AUC after training: 0.6654471198842848
User 117679 improves AUC. Keeping the model.
Training on augumented user 35071 10/50 current_auc = 0.6654471198842848
User 35071 AUC after training: 0.6647664426103973
User 35071 does not improve AUC. Reverting changes.
Training on augumented user 132348 11/50 current_auc = 0.6654471198842848
User 132348 AUC after training: 0.6650216965881052
User 132348 does not improve AUC. Reverting changes.
Training on augumented user 34848 12/50 current_auc = 0.6654471198842848
User 34848 AUC after training: 0.6649791542584872
User 34848 does not improve AUC. Reverting changes.
Training on augumented user 111274 13/50 current_auc = 0.6654471198842848
User 111274 AUC after training: 0.6654471198842848
User 111274 does not improve AUC. Reverting changes.
Training on augumented user 11430 14/50 current_auc = 0.6654471198842848
User 11430 AUC after training: 0.665191865906577
User 11430 does not improve AUC. Reverting changes.
Training on augumented user 108800 15/50 current_auc = 0.6654471198842848
User 108800 AUC after training: 0.6656172892027568
User 108800 improves AUC. Keeping the model.
Training on augumented user 111651 16/50 current_auc = 0.6656172892027568
User 111651 AUC after training: 0.6651067812473411
User 111651 does not improve AUC. Reverting changes.
Training on augumented user 40003 17/50 current_auc = 0.6656172892027568
User 40003 AUC after training: 0.6648089849400154
User 40003 does not improve AUC. Reverting changes.
Training on augumented user 40060 18/50 current_auc = 0.6656172892027568
User 40060 AUC after training: 0.6647664426103973
User 40060 does not improve AUC. Reverting changes.
Training on augumented user 76044 19/50 current_auc = 0.6656172892027568
User 76044 AUC after training: 0.6654896622139028
User 76044 does not improve AUC. Reverting changes.
Training on augumented user 17584 20/50 current_auc = 0.6656172892027568
User 17584 AUC after training: 0.6654896622139028
User 17584 does not improve AUC. Reverting changes.
Training on augumented user 21634 21/50 current_auc = 0.6656172892027568
User 21634 AUC after training: 0.6648089849400153
User 21634 does not improve AUC. Reverting changes.
Training on augumented user 105770 22/50 current_auc = 0.6656172892027568
User 105770 AUC after training: 0.6655322045435208
User 105770 does not improve AUC. Reverting changes.
Training on augumented user 54869 23/50 current_auc = 0.6656172892027568
User 54869 AUC after training: 0.6650216965881051
User 54869 does not improve AUC. Reverting changes.
Training on augumented user 27857 24/50 current_auc = 0.6656172892027568
User 27857 AUC after training: 0.6649791542584872
User 27857 does not improve AUC. Reverting changes.
Training on augumented user 26504 25/50 current_auc = 0.6656172892027568
User 26504 AUC after training: 0.6653620352250489
User 26504 does not improve AUC. Reverting changes.
Training on augumented user 111415 26/50 current_auc = 0.6656172892027568
User 111415 AUC after training: 0.6648089849400153
User 111415 does not improve AUC. Reverting changes.
Training on augumented user 63159 27/50 current_auc = 0.6656172892027568
User 63159 AUC after training: 0.6655322045435208
User 63159 does not improve AUC. Reverting changes.
Training on augumented user 23217 28/50 current_auc = 0.6656172892027568
User 23217 AUC after training: 0.6650642389177231
User 23217 does not improve AUC. Reverting changes.
Training on augumented user 41833 29/50 current_auc = 0.6656172892027568
User 41833 AUC after training: 0.6649366119288693
User 41833 does not improve AUC. Reverting changes.
Training on augumented user 100841 30/50 current_auc = 0.6656172892027568
User 100841 AUC after training: 0.6651918659065771
User 100841 does not improve AUC. Reverting changes.
Training on augumented user 13796 31/50 current_auc = 0.6656172892027568
User 13796 AUC after training: 0.6651067812473411
User 13796 does not improve AUC. Reverting changes.
Training on augumented user 122829 32/50 current_auc = 0.6656172892027568
User 122829 AUC after training: 0.6651493235769591
User 122829 does not improve AUC. Reverting changes.
Training on augumented user 123070 33/50 current_auc = 0.6656172892027568
User 123070 AUC after training: 0.665234408236195
User 123070 does not improve AUC. Reverting changes.
Training on augumented user 113952 34/50 current_auc = 0.6656172892027568
User 113952 AUC after training: 0.6644686463030716
User 113952 does not improve AUC. Reverting changes.
Training on augumented user 63083 35/50 current_auc = 0.6656172892027568
User 63083 AUC after training: 0.6647239002807794
User 63083 does not improve AUC. Reverting changes.
Training on augumented user 11519 36/50 current_auc = 0.6656172892027568
User 11519 AUC after training: 0.6650216965881051
User 11519 does not improve AUC. Reverting changes.
Training on augumented user 34492 37/50 current_auc = 0.6656172892027568
User 34492 AUC after training: 0.6657023738619927
User 34492 improves AUC. Keeping the model.
Training on augumented user 2330 38/50 current_auc = 0.6657023738619927
User 2330 AUC after training: 0.6639581383476558
User 2330 does not improve AUC. Reverting changes.
Training on augumented user 68402 39/50 current_auc = 0.6657023738619927
User 68402 AUC after training: 0.6657023738619927
User 68402 does not improve AUC. Reverting changes.
Training on augumented user 97713 40/50 current_auc = 0.6657023738619927
User 97713 AUC after training: 0.6649791542584872
User 97713 does not improve AUC. Reverting changes.
Training on augumented user 29441 41/50 current_auc = 0.6657023738619927
User 29441 AUC after training: 0.6657874585212287
User 29441 improves AUC. Keeping the model.
Training on augumented user 42435 42/50 current_auc = 0.6657874585212287
User 42435 AUC after training: 0.6657023738619927
User 42435 does not improve AUC. Reverting changes.
Training on augumented user 37270 43/50 current_auc = 0.6657874585212287
User 37270 AUC after training: 0.6653620352250489
User 37270 does not improve AUC. Reverting changes.
Training on augumented user 685 44/50 current_auc = 0.6657874585212287
User 685 AUC after training: 0.6653620352250489
User 685 does not improve AUC. Reverting changes.
Training on augumented user 50000 45/50 current_auc = 0.6657874585212287
User 50000 AUC after training: 0.665191865906577
User 50000 does not improve AUC. Reverting changes.
Training on augumented user 11839 46/50 current_auc = 0.6657874585212287
User 11839 AUC after training: 0.665191865906577
User 11839 does not improve AUC. Reverting changes.
Training on augumented user 4333 47/50 current_auc = 0.6657874585212287
User 4333 AUC after training: 0.6650216965881052
User 4333 does not improve AUC. Reverting changes.
Training on augumented user 93724 48/50 current_auc = 0.6657874585212287
User 93724 AUC after training: 0.6645111886326895
User 93724 does not improve AUC. Reverting changes.
Training on augumented user 51978 49/50 current_auc = 0.6657874585212287
User 51978 AUC after training: 0.6648515272696333
User 51978 does not improve AUC. Reverting changes.
[2024-12-02 19:49:36.261241] start test user 47986 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:36.701029] start test user 47986 239/568 recall augumented users by random, augumented_users = [124893, 94835, 61051, 22764, 56280, 3053, 37391, 84874, 100957, 89331, 76800, 59154, 43907, 60070, 30614, 16657, 26111, 120887, 89125, 102746, 115919, 42589, 16941, 123710, 91503, 7022, 15993, 133282, 65039, 92569, 26234, 3568, 77174, 126328, 85722, 95585, 102143, 18704, 119280, 52159, 135359, 137586, 67574, 45454, 40490, 67987, 54144, 52098, 34727, 76044]
[2024-12-02 19:49:36.717019] user = 47986 Cloud 239/568
[2024-12-02 19:49:36.728230] user = 47986 Local 239/568
[2024-12-02 19:49:36.853131] user = 47986 Local+ 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:40.334223] user = 47986 MPDA- 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6815384615384615
Training on augumented user 124893 0/50 current_auc = 0.6815384615384615
User 124893 AUC after training: 0.6815384615384615
User 124893 does not improve AUC. Reverting changes.
Training on augumented user 94835 1/50 current_auc = 0.6815384615384615
User 94835 AUC after training: 0.6815384615384615
User 94835 does not improve AUC. Reverting changes.
Training on augumented user 61051 2/50 current_auc = 0.6815384615384615
User 61051 AUC after training: 0.6930769230769231
User 61051 improves AUC. Keeping the model.
Training on augumented user 22764 3/50 current_auc = 0.6930769230769231
User 22764 AUC after training: 0.6861538461538461
User 22764 does not improve AUC. Reverting changes.
Training on augumented user 56280 4/50 current_auc = 0.6930769230769231
User 56280 AUC after training: 0.6861538461538461
User 56280 does not improve AUC. Reverting changes.
Training on augumented user 3053 5/50 current_auc = 0.6930769230769231
User 3053 AUC after training: 0.6846153846153846
User 3053 does not improve AUC. Reverting changes.
Training on augumented user 37391 6/50 current_auc = 0.6930769230769231
User 37391 AUC after training: 0.6930769230769231
User 37391 does not improve AUC. Reverting changes.
Training on augumented user 84874 7/50 current_auc = 0.6930769230769231
User 84874 AUC after training: 0.6846153846153846
User 84874 does not improve AUC. Reverting changes.
Training on augumented user 100957 8/50 current_auc = 0.6930769230769231
User 100957 AUC after training: 0.6930769230769231
User 100957 does not improve AUC. Reverting changes.
Training on augumented user 89331 9/50 current_auc = 0.6930769230769231
User 89331 AUC after training: 0.6815384615384615
User 89331 does not improve AUC. Reverting changes.
Training on augumented user 76800 10/50 current_auc = 0.6930769230769231
User 76800 AUC after training: 0.6915384615384615
User 76800 does not improve AUC. Reverting changes.
Training on augumented user 59154 11/50 current_auc = 0.6930769230769231
User 59154 AUC after training: 0.6830769230769231
User 59154 does not improve AUC. Reverting changes.
Training on augumented user 43907 12/50 current_auc = 0.6930769230769231
User 43907 AUC after training: 0.6892307692307693
User 43907 does not improve AUC. Reverting changes.
Training on augumented user 60070 13/50 current_auc = 0.6930769230769231
User 60070 AUC after training: 0.6892307692307693
User 60070 does not improve AUC. Reverting changes.
Training on augumented user 30614 14/50 current_auc = 0.6930769230769231
User 30614 AUC after training: 0.6861538461538461
User 30614 does not improve AUC. Reverting changes.
Training on augumented user 16657 15/50 current_auc = 0.6930769230769231
User 16657 AUC after training: 0.6930769230769231
User 16657 does not improve AUC. Reverting changes.
Training on augumented user 26111 16/50 current_auc = 0.6930769230769231
User 26111 AUC after training: 0.6892307692307693
User 26111 does not improve AUC. Reverting changes.
Training on augumented user 120887 17/50 current_auc = 0.6930769230769231
User 120887 AUC after training: 0.6861538461538461
User 120887 does not improve AUC. Reverting changes.
Training on augumented user 89125 18/50 current_auc = 0.6930769230769231
User 89125 AUC after training: 0.6892307692307693
User 89125 does not improve AUC. Reverting changes.
Training on augumented user 102746 19/50 current_auc = 0.6930769230769231
User 102746 AUC after training: 0.6892307692307693
User 102746 does not improve AUC. Reverting changes.
Training on augumented user 115919 20/50 current_auc = 0.6930769230769231
User 115919 AUC after training: 0.6930769230769231
User 115919 does not improve AUC. Reverting changes.
Training on augumented user 42589 21/50 current_auc = 0.6930769230769231
User 42589 AUC after training: 0.6892307692307693
User 42589 does not improve AUC. Reverting changes.
Training on augumented user 16941 22/50 current_auc = 0.6930769230769231
User 16941 AUC after training: 0.6930769230769231
User 16941 does not improve AUC. Reverting changes.
Training on augumented user 123710 23/50 current_auc = 0.6930769230769231
User 123710 AUC after training: 0.6884615384615385
User 123710 does not improve AUC. Reverting changes.
Training on augumented user 91503 24/50 current_auc = 0.6930769230769231
User 91503 AUC after training: 0.6892307692307693
User 91503 does not improve AUC. Reverting changes.
Training on augumented user 7022 25/50 current_auc = 0.6930769230769231
User 7022 AUC after training: 0.6892307692307693
User 7022 does not improve AUC. Reverting changes.
Training on augumented user 15993 26/50 current_auc = 0.6930769230769231
User 15993 AUC after training: 0.6861538461538461
User 15993 does not improve AUC. Reverting changes.
Training on augumented user 133282 27/50 current_auc = 0.6930769230769231
User 133282 AUC after training: 0.6884615384615385
User 133282 does not improve AUC. Reverting changes.
Training on augumented user 65039 28/50 current_auc = 0.6930769230769231
User 65039 AUC after training: 0.6907692307692308
User 65039 does not improve AUC. Reverting changes.
Training on augumented user 92569 29/50 current_auc = 0.6930769230769231
User 92569 AUC after training: 0.6892307692307693
User 92569 does not improve AUC. Reverting changes.
Training on augumented user 26234 30/50 current_auc = 0.6930769230769231
User 26234 AUC after training: 0.6892307692307693
User 26234 does not improve AUC. Reverting changes.
Training on augumented user 3568 31/50 current_auc = 0.6930769230769231
User 3568 AUC after training: 0.6892307692307693
User 3568 does not improve AUC. Reverting changes.
Training on augumented user 77174 32/50 current_auc = 0.6930769230769231
User 77174 AUC after training: 0.6930769230769231
User 77174 does not improve AUC. Reverting changes.
Training on augumented user 126328 33/50 current_auc = 0.6930769230769231
User 126328 AUC after training: 0.6892307692307693
User 126328 does not improve AUC. Reverting changes.
Training on augumented user 85722 34/50 current_auc = 0.6930769230769231
User 85722 AUC after training: 0.686923076923077
User 85722 does not improve AUC. Reverting changes.
Training on augumented user 95585 35/50 current_auc = 0.6930769230769231
User 95585 AUC after training: 0.6861538461538461
User 95585 does not improve AUC. Reverting changes.
Training on augumented user 102143 36/50 current_auc = 0.6930769230769231
User 102143 AUC after training: 0.6930769230769231
User 102143 does not improve AUC. Reverting changes.
Training on augumented user 18704 37/50 current_auc = 0.6930769230769231
User 18704 AUC after training: 0.6930769230769231
User 18704 does not improve AUC. Reverting changes.
Training on augumented user 119280 38/50 current_auc = 0.6930769230769231
User 119280 AUC after training: 0.6907692307692308
User 119280 does not improve AUC. Reverting changes.
Training on augumented user 52159 39/50 current_auc = 0.6930769230769231
User 52159 AUC after training: 0.6930769230769231
User 52159 does not improve AUC. Reverting changes.
Training on augumented user 135359 40/50 current_auc = 0.6930769230769231
User 135359 AUC after training: 0.6930769230769231
User 135359 does not improve AUC. Reverting changes.
Training on augumented user 137586 41/50 current_auc = 0.6930769230769231
User 137586 AUC after training: 0.6930769230769231
User 137586 does not improve AUC. Reverting changes.
Training on augumented user 67574 42/50 current_auc = 0.6930769230769231
User 67574 AUC after training: 0.6876923076923077
User 67574 does not improve AUC. Reverting changes.
Training on augumented user 45454 43/50 current_auc = 0.6930769230769231
User 45454 AUC after training: 0.686923076923077
User 45454 does not improve AUC. Reverting changes.
Training on augumented user 40490 44/50 current_auc = 0.6930769230769231
User 40490 AUC after training: 0.6884615384615385
User 40490 does not improve AUC. Reverting changes.
Training on augumented user 67987 45/50 current_auc = 0.6930769230769231
User 67987 AUC after training: 0.6892307692307693
User 67987 does not improve AUC. Reverting changes.
Training on augumented user 54144 46/50 current_auc = 0.6930769230769231
User 54144 AUC after training: 0.6930769230769231
User 54144 does not improve AUC. Reverting changes.
Training on augumented user 52098 47/50 current_auc = 0.6930769230769231
User 52098 AUC after training: 0.6884615384615385
User 52098 does not improve AUC. Reverting changes.
Training on augumented user 34727 48/50 current_auc = 0.6930769230769231
User 34727 AUC after training: 0.6846153846153846
User 34727 does not improve AUC. Reverting changes.
Training on augumented user 76044 49/50 current_auc = 0.6930769230769231
User 76044 AUC after training: 0.6815384615384615
User 76044 does not improve AUC. Reverting changes.
[2024-12-02 19:50:11.332723] start test user 48000 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:12.119732] start test user 48000 240/568 recall augumented users by random, augumented_users = [43979, 106679, 29841, 37030, 79243, 127310, 105465, 109503, 70440, 28876, 66725, 42479, 68700, 91837, 76948, 38759, 93739, 20367, 99471, 122632, 62861, 31515, 47083, 45255, 133694, 100794, 25216, 123422, 110915, 112952, 32444, 54701, 13421, 23151, 46304, 42837, 119801, 99768, 63251, 114694, 74488, 106933, 11194, 64579, 62922, 126345, 24988, 40064, 129381, 48409]
[2024-12-02 19:50:12.151773] user = 48000 Cloud 240/568
[2024-12-02 19:50:12.165743] user = 48000 Local 240/568
[2024-12-02 19:50:12.446577] user = 48000 Local+ 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:15.343743] user = 48000 MPDA- 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6285714285714286
Training on augumented user 43979 0/50 current_auc = 0.6285714285714286
User 43979 AUC after training: 0.6274285714285713
User 43979 does not improve AUC. Reverting changes.
Training on augumented user 106679 1/50 current_auc = 0.6285714285714286
User 106679 AUC after training: 0.6285714285714286
User 106679 does not improve AUC. Reverting changes.
Training on augumented user 29841 2/50 current_auc = 0.6285714285714286
User 29841 AUC after training: 0.6274285714285714
User 29841 does not improve AUC. Reverting changes.
Training on augumented user 37030 3/50 current_auc = 0.6285714285714286
User 37030 AUC after training: 0.6297142857142857
User 37030 improves AUC. Keeping the model.
Training on augumented user 79243 4/50 current_auc = 0.6297142857142857
User 79243 AUC after training: 0.6308571428571429
User 79243 improves AUC. Keeping the model.
Training on augumented user 127310 5/50 current_auc = 0.6308571428571429
User 127310 AUC after training: 0.6285714285714286
User 127310 does not improve AUC. Reverting changes.
Training on augumented user 105465 6/50 current_auc = 0.6308571428571429
User 105465 AUC after training: 0.6297142857142857
User 105465 does not improve AUC. Reverting changes.
Training on augumented user 109503 7/50 current_auc = 0.6308571428571429
User 109503 AUC after training: 0.6285714285714286
User 109503 does not improve AUC. Reverting changes.
Training on augumented user 70440 8/50 current_auc = 0.6308571428571429
User 70440 AUC after training: 0.6297142857142857
User 70440 does not improve AUC. Reverting changes.
Training on augumented user 28876 9/50 current_auc = 0.6308571428571429
User 28876 AUC after training: 0.6308571428571428
User 28876 does not improve AUC. Reverting changes.
Training on augumented user 66725 10/50 current_auc = 0.6308571428571429
User 66725 AUC after training: 0.6285714285714286
User 66725 does not improve AUC. Reverting changes.
Training on augumented user 42479 11/50 current_auc = 0.6308571428571429
User 42479 AUC after training: 0.6297142857142857
User 42479 does not improve AUC. Reverting changes.
Training on augumented user 68700 12/50 current_auc = 0.6308571428571429
User 68700 AUC after training: 0.6308571428571429
User 68700 does not improve AUC. Reverting changes.
Training on augumented user 91837 13/50 current_auc = 0.6308571428571429
User 91837 AUC after training: 0.6331428571428571
User 91837 improves AUC. Keeping the model.
Training on augumented user 76948 14/50 current_auc = 0.6331428571428571
User 76948 AUC after training: 0.6319999999999999
User 76948 does not improve AUC. Reverting changes.
Training on augumented user 38759 15/50 current_auc = 0.6331428571428571
User 38759 AUC after training: 0.6331428571428571
User 38759 does not improve AUC. Reverting changes.
Training on augumented user 93739 16/50 current_auc = 0.6331428571428571
User 93739 AUC after training: 0.6319999999999999
User 93739 does not improve AUC. Reverting changes.
Training on augumented user 20367 17/50 current_auc = 0.6331428571428571
User 20367 AUC after training: 0.6319999999999999
User 20367 does not improve AUC. Reverting changes.
Training on augumented user 99471 18/50 current_auc = 0.6331428571428571
User 99471 AUC after training: 0.632
User 99471 does not improve AUC. Reverting changes.
Training on augumented user 122632 19/50 current_auc = 0.6331428571428571
User 122632 AUC after training: 0.6308571428571428
User 122632 does not improve AUC. Reverting changes.
Training on augumented user 62861 20/50 current_auc = 0.6331428571428571
User 62861 AUC after training: 0.6331428571428571
User 62861 does not improve AUC. Reverting changes.
Training on augumented user 31515 21/50 current_auc = 0.6331428571428571
User 31515 AUC after training: 0.6285714285714286
User 31515 does not improve AUC. Reverting changes.
Training on augumented user 47083 22/50 current_auc = 0.6331428571428571
User 47083 AUC after training: 0.632
User 47083 does not improve AUC. Reverting changes.
Training on augumented user 45255 23/50 current_auc = 0.6331428571428571
User 45255 AUC after training: 0.6308571428571428
User 45255 does not improve AUC. Reverting changes.
Training on augumented user 133694 24/50 current_auc = 0.6331428571428571
User 133694 AUC after training: 0.6319999999999999
User 133694 does not improve AUC. Reverting changes.
Training on augumented user 100794 25/50 current_auc = 0.6331428571428571
User 100794 AUC after training: 0.6331428571428571
User 100794 does not improve AUC. Reverting changes.
Training on augumented user 25216 26/50 current_auc = 0.6331428571428571
User 25216 AUC after training: 0.6319999999999999
User 25216 does not improve AUC. Reverting changes.
Training on augumented user 123422 27/50 current_auc = 0.6331428571428571
User 123422 AUC after training: 0.6308571428571428
User 123422 does not improve AUC. Reverting changes.
Training on augumented user 110915 28/50 current_auc = 0.6331428571428571
User 110915 AUC after training: 0.6308571428571429
User 110915 does not improve AUC. Reverting changes.
Training on augumented user 112952 29/50 current_auc = 0.6331428571428571
User 112952 AUC after training: 0.6308571428571428
User 112952 does not improve AUC. Reverting changes.
Training on augumented user 32444 30/50 current_auc = 0.6331428571428571
User 32444 AUC after training: 0.6319999999999999
User 32444 does not improve AUC. Reverting changes.
Training on augumented user 54701 31/50 current_auc = 0.6331428571428571
User 54701 AUC after training: 0.6308571428571428
User 54701 does not improve AUC. Reverting changes.
Training on augumented user 13421 32/50 current_auc = 0.6331428571428571
User 13421 AUC after training: 0.6308571428571429
User 13421 does not improve AUC. Reverting changes.
Training on augumented user 23151 33/50 current_auc = 0.6331428571428571
User 23151 AUC after training: 0.6342857142857142
User 23151 improves AUC. Keeping the model.
Training on augumented user 46304 34/50 current_auc = 0.6342857142857142
User 46304 AUC after training: 0.6308571428571428
User 46304 does not improve AUC. Reverting changes.
Training on augumented user 42837 35/50 current_auc = 0.6342857142857142
User 42837 AUC after training: 0.6308571428571428
User 42837 does not improve AUC. Reverting changes.
Training on augumented user 119801 36/50 current_auc = 0.6342857142857142
User 119801 AUC after training: 0.6308571428571429
User 119801 does not improve AUC. Reverting changes.
Training on augumented user 99768 37/50 current_auc = 0.6342857142857142
User 99768 AUC after training: 0.6297142857142858
User 99768 does not improve AUC. Reverting changes.
Training on augumented user 63251 38/50 current_auc = 0.6342857142857142
User 63251 AUC after training: 0.6274285714285714
User 63251 does not improve AUC. Reverting changes.
Training on augumented user 114694 39/50 current_auc = 0.6342857142857142
User 114694 AUC after training: 0.6342857142857142
User 114694 does not improve AUC. Reverting changes.
Training on augumented user 74488 40/50 current_auc = 0.6342857142857142
User 74488 AUC after training: 0.6319999999999999
User 74488 does not improve AUC. Reverting changes.
Training on augumented user 106933 41/50 current_auc = 0.6342857142857142
User 106933 AUC after training: 0.6319999999999999
User 106933 does not improve AUC. Reverting changes.
Training on augumented user 11194 42/50 current_auc = 0.6342857142857142
User 11194 AUC after training: 0.632
User 11194 does not improve AUC. Reverting changes.
Training on augumented user 64579 43/50 current_auc = 0.6342857142857142
User 64579 AUC after training: 0.6308571428571429
User 64579 does not improve AUC. Reverting changes.
Training on augumented user 62922 44/50 current_auc = 0.6342857142857142
User 62922 AUC after training: 0.6308571428571429
User 62922 does not improve AUC. Reverting changes.
Training on augumented user 126345 45/50 current_auc = 0.6342857142857142
User 126345 AUC after training: 0.6331428571428571
User 126345 does not improve AUC. Reverting changes.
Training on augumented user 24988 46/50 current_auc = 0.6342857142857142
User 24988 AUC after training: 0.6331428571428571
User 24988 does not improve AUC. Reverting changes.
Training on augumented user 40064 47/50 current_auc = 0.6342857142857142
User 40064 AUC after training: 0.6342857142857142
User 40064 does not improve AUC. Reverting changes.
Training on augumented user 129381 48/50 current_auc = 0.6342857142857142
User 129381 AUC after training: 0.6331428571428571
User 129381 does not improve AUC. Reverting changes.
Training on augumented user 48409 49/50 current_auc = 0.6342857142857142
User 48409 AUC after training: 0.6319999999999999
User 48409 does not improve AUC. Reverting changes.
[2024-12-02 19:50:44.811281] start test user 48033 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:45.506936] start test user 48033 241/568 recall augumented users by random, augumented_users = [97508, 74235, 47526, 121162, 111147, 88795, 115788, 99400, 122246, 86558, 95387, 91469, 65248, 3211, 132351, 112471, 1187, 31955, 130312, 526, 109047, 111479, 96548, 38713, 122834, 95944, 20294, 108136, 137484, 10716, 8803, 121948, 53700, 123226, 63874, 86577, 17708, 585, 137303, 2907, 115397, 128325, 49824, 81623, 31933, 5776, 87050, 4078, 103981, 99706]
[2024-12-02 19:50:45.543289] user = 48033 Cloud 241/568
[2024-12-02 19:50:45.572627] user = 48033 Local 241/568
[2024-12-02 19:50:45.729326] user = 48033 Local+ 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:47.837875] user = 48033 MPDA- 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6922196796338673
Training on augumented user 97508 0/50 current_auc = 0.6922196796338673
User 97508 AUC after training: 0.6922196796338673
User 97508 does not improve AUC. Reverting changes.
Training on augumented user 74235 1/50 current_auc = 0.6922196796338673
User 74235 AUC after training: 0.691075514874142
User 74235 does not improve AUC. Reverting changes.
Training on augumented user 47526 2/50 current_auc = 0.6922196796338673
User 47526 AUC after training: 0.6922196796338673
User 47526 does not improve AUC. Reverting changes.
Training on augumented user 121162 3/50 current_auc = 0.6922196796338673
User 121162 AUC after training: 0.6922196796338673
User 121162 does not improve AUC. Reverting changes.
Training on augumented user 111147 4/50 current_auc = 0.6922196796338673
User 111147 AUC after training: 0.6929824561403509
User 111147 improves AUC. Keeping the model.
Training on augumented user 88795 5/50 current_auc = 0.6929824561403509
User 88795 AUC after training: 0.6910755148741419
User 88795 does not improve AUC. Reverting changes.
Training on augumented user 115788 6/50 current_auc = 0.6929824561403509
User 115788 AUC after training: 0.6910755148741419
User 115788 does not improve AUC. Reverting changes.
Training on augumented user 99400 7/50 current_auc = 0.6929824561403509
User 99400 AUC after training: 0.6929824561403509
User 99400 does not improve AUC. Reverting changes.
Training on augumented user 122246 8/50 current_auc = 0.6929824561403509
User 122246 AUC after training: 0.6929824561403509
User 122246 does not improve AUC. Reverting changes.
Training on augumented user 86558 9/50 current_auc = 0.6929824561403509
User 86558 AUC after training: 0.6926010678871091
User 86558 does not improve AUC. Reverting changes.
Training on augumented user 95387 10/50 current_auc = 0.6929824561403509
User 95387 AUC after training: 0.6918382913806255
User 95387 does not improve AUC. Reverting changes.
Training on augumented user 91469 11/50 current_auc = 0.6929824561403509
User 91469 AUC after training: 0.691075514874142
User 91469 does not improve AUC. Reverting changes.
Training on augumented user 65248 12/50 current_auc = 0.6929824561403509
User 65248 AUC after training: 0.6929824561403509
User 65248 does not improve AUC. Reverting changes.
Training on augumented user 3211 13/50 current_auc = 0.6929824561403509
User 3211 AUC after training: 0.6929824561403509
User 3211 does not improve AUC. Reverting changes.
Training on augumented user 132351 14/50 current_auc = 0.6929824561403509
User 132351 AUC after training: 0.6929824561403509
User 132351 does not improve AUC. Reverting changes.
Training on augumented user 112471 15/50 current_auc = 0.6929824561403509
User 112471 AUC after training: 0.6922196796338672
User 112471 does not improve AUC. Reverting changes.
Training on augumented user 1187 16/50 current_auc = 0.6929824561403509
User 1187 AUC after training: 0.6926010678871091
User 1187 does not improve AUC. Reverting changes.
Training on augumented user 31955 17/50 current_auc = 0.6929824561403509
User 31955 AUC after training: 0.6948893974065599
User 31955 improves AUC. Keeping the model.
Training on augumented user 130312 18/50 current_auc = 0.6948893974065599
User 130312 AUC after training: 0.6941266209000764
User 130312 does not improve AUC. Reverting changes.
Training on augumented user 526 19/50 current_auc = 0.6948893974065599
User 526 AUC after training: 0.6922196796338672
User 526 does not improve AUC. Reverting changes.
Training on augumented user 109047 20/50 current_auc = 0.6948893974065599
User 109047 AUC after training: 0.6948893974065599
User 109047 does not improve AUC. Reverting changes.
Training on augumented user 111479 21/50 current_auc = 0.6948893974065599
User 111479 AUC after training: 0.6937452326468345
User 111479 does not improve AUC. Reverting changes.
Training on augumented user 96548 22/50 current_auc = 0.6948893974065599
User 96548 AUC after training: 0.6941266209000763
User 96548 does not improve AUC. Reverting changes.
Training on augumented user 38713 23/50 current_auc = 0.6948893974065599
User 38713 AUC after training: 0.6941266209000763
User 38713 does not improve AUC. Reverting changes.
Training on augumented user 122834 24/50 current_auc = 0.6948893974065599
User 122834 AUC after training: 0.6933638443935927
User 122834 does not improve AUC. Reverting changes.
Training on augumented user 95944 25/50 current_auc = 0.6948893974065599
User 95944 AUC after training: 0.6937452326468344
User 95944 does not improve AUC. Reverting changes.
Training on augumented user 20294 26/50 current_auc = 0.6948893974065599
User 20294 AUC after training: 0.6910755148741419
User 20294 does not improve AUC. Reverting changes.
Training on augumented user 108136 27/50 current_auc = 0.6948893974065599
User 108136 AUC after training: 0.6933638443935927
User 108136 does not improve AUC. Reverting changes.
Training on augumented user 137484 28/50 current_auc = 0.6948893974065599
User 137484 AUC after training: 0.6941266209000763
User 137484 does not improve AUC. Reverting changes.
Training on augumented user 10716 29/50 current_auc = 0.6948893974065599
User 10716 AUC after training: 0.6926010678871092
User 10716 does not improve AUC. Reverting changes.
Training on augumented user 8803 30/50 current_auc = 0.6948893974065599
User 8803 AUC after training: 0.6933638443935927
User 8803 does not improve AUC. Reverting changes.
Training on augumented user 121948 31/50 current_auc = 0.6948893974065599
User 121948 AUC after training: 0.6929824561403509
User 121948 does not improve AUC. Reverting changes.
Training on augumented user 53700 32/50 current_auc = 0.6948893974065599
User 53700 AUC after training: 0.6933638443935927
User 53700 does not improve AUC. Reverting changes.
Training on augumented user 123226 33/50 current_auc = 0.6948893974065599
User 123226 AUC after training: 0.6937452326468345
User 123226 does not improve AUC. Reverting changes.
Training on augumented user 63874 34/50 current_auc = 0.6948893974065599
User 63874 AUC after training: 0.6948893974065599
User 63874 does not improve AUC. Reverting changes.
Training on augumented user 86577 35/50 current_auc = 0.6948893974065599
User 86577 AUC after training: 0.6941266209000764
User 86577 does not improve AUC. Reverting changes.
Training on augumented user 17708 36/50 current_auc = 0.6948893974065599
User 17708 AUC after training: 0.6903127383676583
User 17708 does not improve AUC. Reverting changes.
Training on augumented user 585 37/50 current_auc = 0.6948893974065599
User 585 AUC after training: 0.6945080091533181
User 585 does not improve AUC. Reverting changes.
Training on augumented user 137303 38/50 current_auc = 0.6948893974065599
User 137303 AUC after training: 0.6945080091533181
User 137303 does not improve AUC. Reverting changes.
Training on augumented user 2907 39/50 current_auc = 0.6948893974065599
User 2907 AUC after training: 0.6948893974065599
User 2907 does not improve AUC. Reverting changes.
Training on augumented user 115397 40/50 current_auc = 0.6948893974065599
User 115397 AUC after training: 0.6929824561403509
User 115397 does not improve AUC. Reverting changes.
Training on augumented user 128325 41/50 current_auc = 0.6948893974065599
User 128325 AUC after training: 0.6933638443935927
User 128325 does not improve AUC. Reverting changes.
Training on augumented user 49824 42/50 current_auc = 0.6948893974065599
User 49824 AUC after training: 0.6926010678871091
User 49824 does not improve AUC. Reverting changes.
Training on augumented user 81623 43/50 current_auc = 0.6948893974065599
User 81623 AUC after training: 0.6945080091533181
User 81623 does not improve AUC. Reverting changes.
Training on augumented user 31933 44/50 current_auc = 0.6948893974065599
User 31933 AUC after training: 0.6948893974065599
User 31933 does not improve AUC. Reverting changes.
Training on augumented user 5776 45/50 current_auc = 0.6948893974065599
User 5776 AUC after training: 0.6945080091533181
User 5776 does not improve AUC. Reverting changes.
Training on augumented user 87050 46/50 current_auc = 0.6948893974065599
User 87050 AUC after training: 0.6941266209000764
User 87050 does not improve AUC. Reverting changes.
Training on augumented user 4078 47/50 current_auc = 0.6948893974065599
User 4078 AUC after training: 0.6929824561403509
User 4078 does not improve AUC. Reverting changes.
Training on augumented user 103981 48/50 current_auc = 0.6948893974065599
User 103981 AUC after training: 0.6941266209000763
User 103981 does not improve AUC. Reverting changes.
Training on augumented user 99706 49/50 current_auc = 0.6948893974065599
User 99706 AUC after training: 0.6922196796338673
User 99706 does not improve AUC. Reverting changes.
[2024-12-02 19:51:16.216855] start test user 48045 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:16.700714] start test user 48045 242/568 recall augumented users by random, augumented_users = [104151, 123205, 129934, 62151, 20865, 124542, 118891, 11913, 94862, 122654, 118668, 31559, 10450, 1876, 106557, 74936, 37652, 103238, 103694, 28948, 96512, 92040, 45108, 75103, 56456, 15837, 90901, 129961, 31797, 63255, 46669, 75432, 1577, 34639, 24611, 68407, 26684, 34901, 23565, 104894, 134571, 107741, 123805, 110912, 126745, 53527, 122485, 62012, 134897, 109751]
[2024-12-02 19:51:16.715317] user = 48045 Cloud 242/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:51:16.732268] user = 48045 Local 242/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:51:16.749503] user = 48045 Local+ 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:51:19.184399] user = 48045 MPDA- 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 104151 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104151 AUC after training: 0.5
User 104151 does not improve AUC. Reverting changes.
Training on augumented user 123205 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123205 AUC after training: 0.5
User 123205 does not improve AUC. Reverting changes.
Training on augumented user 129934 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129934 AUC after training: 0.5
User 129934 does not improve AUC. Reverting changes.
Training on augumented user 62151 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62151 AUC after training: 0.5
User 62151 does not improve AUC. Reverting changes.
Training on augumented user 20865 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20865 AUC after training: 0.5
User 20865 does not improve AUC. Reverting changes.
Training on augumented user 124542 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124542 AUC after training: 0.5
User 124542 does not improve AUC. Reverting changes.
Training on augumented user 118891 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118891 AUC after training: 0.5
User 118891 does not improve AUC. Reverting changes.
Training on augumented user 11913 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11913 AUC after training: 0.5
User 11913 does not improve AUC. Reverting changes.
Training on augumented user 94862 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94862 AUC after training: 0.5
User 94862 does not improve AUC. Reverting changes.
Training on augumented user 122654 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122654 AUC after training: 0.5
User 122654 does not improve AUC. Reverting changes.
Training on augumented user 118668 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118668 AUC after training: 0.5
User 118668 does not improve AUC. Reverting changes.
Training on augumented user 31559 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31559 AUC after training: 0.5
User 31559 does not improve AUC. Reverting changes.
Training on augumented user 10450 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10450 AUC after training: 0.5
User 10450 does not improve AUC. Reverting changes.
Training on augumented user 1876 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1876 AUC after training: 0.5
User 1876 does not improve AUC. Reverting changes.
Training on augumented user 106557 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106557 AUC after training: 0.5
User 106557 does not improve AUC. Reverting changes.
Training on augumented user 74936 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74936 AUC after training: 0.5
User 74936 does not improve AUC. Reverting changes.
Training on augumented user 37652 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37652 AUC after training: 0.5
User 37652 does not improve AUC. Reverting changes.
Training on augumented user 103238 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103238 AUC after training: 0.5
User 103238 does not improve AUC. Reverting changes.
Training on augumented user 103694 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103694 AUC after training: 0.5
User 103694 does not improve AUC. Reverting changes.
Training on augumented user 28948 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28948 AUC after training: 0.5
User 28948 does not improve AUC. Reverting changes.
Training on augumented user 96512 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96512 AUC after training: 0.5
User 96512 does not improve AUC. Reverting changes.
Training on augumented user 92040 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92040 AUC after training: 0.5
User 92040 does not improve AUC. Reverting changes.
Training on augumented user 45108 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45108 AUC after training: 0.5
User 45108 does not improve AUC. Reverting changes.
Training on augumented user 75103 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75103 AUC after training: 0.5
User 75103 does not improve AUC. Reverting changes.
Training on augumented user 56456 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56456 AUC after training: 0.5
User 56456 does not improve AUC. Reverting changes.
Training on augumented user 15837 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15837 AUC after training: 0.5
User 15837 does not improve AUC. Reverting changes.
Training on augumented user 90901 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90901 AUC after training: 0.5
User 90901 does not improve AUC. Reverting changes.
Training on augumented user 129961 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129961 AUC after training: 0.5
User 129961 does not improve AUC. Reverting changes.
Training on augumented user 31797 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31797 AUC after training: 0.5
User 31797 does not improve AUC. Reverting changes.
Training on augumented user 63255 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63255 AUC after training: 0.5
User 63255 does not improve AUC. Reverting changes.
Training on augumented user 46669 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46669 AUC after training: 0.5
User 46669 does not improve AUC. Reverting changes.
Training on augumented user 75432 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75432 AUC after training: 0.5
User 75432 does not improve AUC. Reverting changes.
Training on augumented user 1577 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1577 AUC after training: 0.5
User 1577 does not improve AUC. Reverting changes.
Training on augumented user 34639 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34639 AUC after training: 0.5
User 34639 does not improve AUC. Reverting changes.
Training on augumented user 24611 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24611 AUC after training: 0.5
User 24611 does not improve AUC. Reverting changes.
Training on augumented user 68407 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68407 AUC after training: 0.5
User 68407 does not improve AUC. Reverting changes.
Training on augumented user 26684 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26684 AUC after training: 0.5
User 26684 does not improve AUC. Reverting changes.
Training on augumented user 34901 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34901 AUC after training: 0.5
User 34901 does not improve AUC. Reverting changes.
Training on augumented user 23565 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23565 AUC after training: 0.5
User 23565 does not improve AUC. Reverting changes.
Training on augumented user 104894 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104894 AUC after training: 0.5
User 104894 does not improve AUC. Reverting changes.
Training on augumented user 134571 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134571 AUC after training: 0.5
User 134571 does not improve AUC. Reverting changes.
Training on augumented user 107741 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107741 AUC after training: 0.5
User 107741 does not improve AUC. Reverting changes.
Training on augumented user 123805 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123805 AUC after training: 0.5
User 123805 does not improve AUC. Reverting changes.
Training on augumented user 110912 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110912 AUC after training: 0.5
User 110912 does not improve AUC. Reverting changes.
Training on augumented user 126745 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126745 AUC after training: 0.5
User 126745 does not improve AUC. Reverting changes.
Training on augumented user 53527 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53527 AUC after training: 0.5
User 53527 does not improve AUC. Reverting changes.
Training on augumented user 122485 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122485 AUC after training: 0.5
User 122485 does not improve AUC. Reverting changes.
Training on augumented user 62012 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62012 AUC after training: 0.5
User 62012 does not improve AUC. Reverting changes.
Training on augumented user 134897 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134897 AUC after training: 0.5
User 134897 does not improve AUC. Reverting changes.
Training on augumented user 109751 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109751 AUC after training: 0.5
User 109751 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:51:47.710486] start test user 48071 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:48.134245] start test user 48071 243/568 recall augumented users by random, augumented_users = [109128, 6872, 45574, 131789, 67971, 119129, 63414, 138163, 105000, 44895, 61132, 127740, 78386, 112781, 11979, 6409, 100017, 97610, 106021, 100651, 41548, 102556, 115766, 57294, 130093, 35994, 5557, 1688, 118413, 126711, 75388, 113486, 5812, 104262, 88757, 2266, 32138, 12987, 25658, 48175, 5555, 68383, 129111, 116306, 111745, 72058, 109321, 43492, 93195, 102180]
[2024-12-02 19:51:48.149147] user = 48071 Cloud 243/568
[2024-12-02 19:51:48.165557] user = 48071 Local 243/568
[2024-12-02 19:51:48.221424] user = 48071 Local+ 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:50.127717] user = 48071 MPDA- 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.536144578313253
Training on augumented user 109128 0/50 current_auc = 0.536144578313253
User 109128 AUC after training: 0.5421686746987951
User 109128 improves AUC. Keeping the model.
Training on augumented user 6872 1/50 current_auc = 0.5421686746987951
User 6872 AUC after training: 0.5401606425702811
User 6872 does not improve AUC. Reverting changes.
Training on augumented user 45574 2/50 current_auc = 0.5421686746987951
User 45574 AUC after training: 0.5401606425702812
User 45574 does not improve AUC. Reverting changes.
Training on augumented user 131789 3/50 current_auc = 0.5421686746987951
User 131789 AUC after training: 0.536144578313253
User 131789 does not improve AUC. Reverting changes.
Training on augumented user 67971 4/50 current_auc = 0.5421686746987951
User 67971 AUC after training: 0.536144578313253
User 67971 does not improve AUC. Reverting changes.
Training on augumented user 119129 5/50 current_auc = 0.5421686746987951
User 119129 AUC after training: 0.5401606425702812
User 119129 does not improve AUC. Reverting changes.
Training on augumented user 63414 6/50 current_auc = 0.5421686746987951
User 63414 AUC after training: 0.5381526104417671
User 63414 does not improve AUC. Reverting changes.
Training on augumented user 138163 7/50 current_auc = 0.5421686746987951
User 138163 AUC after training: 0.5401606425702812
User 138163 does not improve AUC. Reverting changes.
Training on augumented user 105000 8/50 current_auc = 0.5421686746987951
User 105000 AUC after training: 0.5401606425702812
User 105000 does not improve AUC. Reverting changes.
Training on augumented user 44895 9/50 current_auc = 0.5421686746987951
User 44895 AUC after training: 0.5401606425702811
User 44895 does not improve AUC. Reverting changes.
Training on augumented user 61132 10/50 current_auc = 0.5421686746987951
User 61132 AUC after training: 0.5401606425702811
User 61132 does not improve AUC. Reverting changes.
Training on augumented user 127740 11/50 current_auc = 0.5421686746987951
User 127740 AUC after training: 0.5381526104417671
User 127740 does not improve AUC. Reverting changes.
Training on augumented user 78386 12/50 current_auc = 0.5421686746987951
User 78386 AUC after training: 0.536144578313253
User 78386 does not improve AUC. Reverting changes.
Training on augumented user 112781 13/50 current_auc = 0.5421686746987951
User 112781 AUC after training: 0.5381526104417671
User 112781 does not improve AUC. Reverting changes.
Training on augumented user 11979 14/50 current_auc = 0.5421686746987951
User 11979 AUC after training: 0.5421686746987951
User 11979 does not improve AUC. Reverting changes.
Training on augumented user 6409 15/50 current_auc = 0.5421686746987951
User 6409 AUC after training: 0.536144578313253
User 6409 does not improve AUC. Reverting changes.
Training on augumented user 100017 16/50 current_auc = 0.5421686746987951
User 100017 AUC after training: 0.5381526104417671
User 100017 does not improve AUC. Reverting changes.
Training on augumented user 97610 17/50 current_auc = 0.5421686746987951
User 97610 AUC after training: 0.5421686746987951
User 97610 does not improve AUC. Reverting changes.
Training on augumented user 106021 18/50 current_auc = 0.5421686746987951
User 106021 AUC after training: 0.5381526104417671
User 106021 does not improve AUC. Reverting changes.
Training on augumented user 100651 19/50 current_auc = 0.5421686746987951
User 100651 AUC after training: 0.5381526104417671
User 100651 does not improve AUC. Reverting changes.
Training on augumented user 41548 20/50 current_auc = 0.5421686746987951
User 41548 AUC after training: 0.5381526104417671
User 41548 does not improve AUC. Reverting changes.
Training on augumented user 102556 21/50 current_auc = 0.5421686746987951
User 102556 AUC after training: 0.5421686746987951
User 102556 does not improve AUC. Reverting changes.
Training on augumented user 115766 22/50 current_auc = 0.5421686746987951
User 115766 AUC after training: 0.5381526104417671
User 115766 does not improve AUC. Reverting changes.
Training on augumented user 57294 23/50 current_auc = 0.5421686746987951
User 57294 AUC after training: 0.5401606425702812
User 57294 does not improve AUC. Reverting changes.
Training on augumented user 130093 24/50 current_auc = 0.5421686746987951
User 130093 AUC after training: 0.536144578313253
User 130093 does not improve AUC. Reverting changes.
Training on augumented user 35994 25/50 current_auc = 0.5421686746987951
User 35994 AUC after training: 0.5381526104417671
User 35994 does not improve AUC. Reverting changes.
Training on augumented user 5557 26/50 current_auc = 0.5421686746987951
User 5557 AUC after training: 0.5401606425702811
User 5557 does not improve AUC. Reverting changes.
Training on augumented user 1688 27/50 current_auc = 0.5421686746987951
User 1688 AUC after training: 0.5381526104417671
User 1688 does not improve AUC. Reverting changes.
Training on augumented user 118413 28/50 current_auc = 0.5421686746987951
User 118413 AUC after training: 0.5441767068273092
User 118413 improves AUC. Keeping the model.
Training on augumented user 126711 29/50 current_auc = 0.5441767068273092
User 126711 AUC after training: 0.5401606425702811
User 126711 does not improve AUC. Reverting changes.
Training on augumented user 75388 30/50 current_auc = 0.5441767068273092
User 75388 AUC after training: 0.5401606425702812
User 75388 does not improve AUC. Reverting changes.
Training on augumented user 113486 31/50 current_auc = 0.5441767068273092
User 113486 AUC after training: 0.5401606425702812
User 113486 does not improve AUC. Reverting changes.
Training on augumented user 5812 32/50 current_auc = 0.5441767068273092
User 5812 AUC after training: 0.5441767068273092
User 5812 does not improve AUC. Reverting changes.
Training on augumented user 104262 33/50 current_auc = 0.5441767068273092
User 104262 AUC after training: 0.5421686746987951
User 104262 does not improve AUC. Reverting changes.
Training on augumented user 88757 34/50 current_auc = 0.5441767068273092
User 88757 AUC after training: 0.5381526104417671
User 88757 does not improve AUC. Reverting changes.
Training on augumented user 2266 35/50 current_auc = 0.5441767068273092
User 2266 AUC after training: 0.536144578313253
User 2266 does not improve AUC. Reverting changes.
Training on augumented user 32138 36/50 current_auc = 0.5441767068273092
User 32138 AUC after training: 0.5441767068273092
User 32138 does not improve AUC. Reverting changes.
Training on augumented user 12987 37/50 current_auc = 0.5441767068273092
User 12987 AUC after training: 0.5401606425702811
User 12987 does not improve AUC. Reverting changes.
Training on augumented user 25658 38/50 current_auc = 0.5441767068273092
User 25658 AUC after training: 0.5381526104417671
User 25658 does not improve AUC. Reverting changes.
Training on augumented user 48175 39/50 current_auc = 0.5441767068273092
User 48175 AUC after training: 0.5421686746987951
User 48175 does not improve AUC. Reverting changes.
Training on augumented user 5555 40/50 current_auc = 0.5441767068273092
User 5555 AUC after training: 0.5421686746987951
User 5555 does not improve AUC. Reverting changes.
Training on augumented user 68383 41/50 current_auc = 0.5441767068273092
User 68383 AUC after training: 0.5421686746987951
User 68383 does not improve AUC. Reverting changes.
Training on augumented user 129111 42/50 current_auc = 0.5441767068273092
User 129111 AUC after training: 0.5401606425702812
User 129111 does not improve AUC. Reverting changes.
Training on augumented user 116306 43/50 current_auc = 0.5441767068273092
User 116306 AUC after training: 0.5421686746987951
User 116306 does not improve AUC. Reverting changes.
Training on augumented user 111745 44/50 current_auc = 0.5441767068273092
User 111745 AUC after training: 0.5421686746987951
User 111745 does not improve AUC. Reverting changes.
Training on augumented user 72058 45/50 current_auc = 0.5441767068273092
User 72058 AUC after training: 0.536144578313253
User 72058 does not improve AUC. Reverting changes.
Training on augumented user 109321 46/50 current_auc = 0.5441767068273092
User 109321 AUC after training: 0.5421686746987951
User 109321 does not improve AUC. Reverting changes.
Training on augumented user 43492 47/50 current_auc = 0.5441767068273092
User 43492 AUC after training: 0.5401606425702812
User 43492 does not improve AUC. Reverting changes.
Training on augumented user 93195 48/50 current_auc = 0.5441767068273092
User 93195 AUC after training: 0.5441767068273092
User 93195 does not improve AUC. Reverting changes.
Training on augumented user 102180 49/50 current_auc = 0.5441767068273092
User 102180 AUC after training: 0.5421686746987951
User 102180 does not improve AUC. Reverting changes.
[2024-12-02 19:52:17.419907] start test user 48099 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:17.826955] start test user 48099 244/568 recall augumented users by random, augumented_users = [36695, 18030, 12890, 19470, 14134, 120069, 117157, 127299, 125244, 116338, 120233, 128526, 33948, 13139, 72539, 125019, 130016, 79958, 87995, 35959, 133382, 124244, 22189, 92668, 37919, 21796, 46460, 107181, 120394, 95845, 91364, 111441, 24350, 30853, 75775, 70681, 22975, 46882, 26102, 97496, 118723, 90368, 94894, 75625, 78404, 88029, 87780, 65152, 49595, 104514]
[2024-12-02 19:52:17.839970] user = 48099 Cloud 244/568
[2024-12-02 19:52:17.862263] user = 48099 Local 244/568
[2024-12-02 19:52:17.903707] user = 48099 Local+ 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:19.804757] user = 48099 MPDA- 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.513255567338282
Training on augumented user 36695 0/50 current_auc = 0.513255567338282
User 36695 AUC after training: 0.5143160127253446
User 36695 improves AUC. Keeping the model.
Training on augumented user 18030 1/50 current_auc = 0.5143160127253446
User 18030 AUC after training: 0.5164369034994698
User 18030 improves AUC. Keeping the model.
Training on augumented user 12890 2/50 current_auc = 0.5164369034994698
User 12890 AUC after training: 0.5137857900318133
User 12890 does not improve AUC. Reverting changes.
Training on augumented user 19470 3/50 current_auc = 0.5164369034994698
User 19470 AUC after training: 0.5159066808059385
User 19470 does not improve AUC. Reverting changes.
Training on augumented user 14134 4/50 current_auc = 0.5164369034994698
User 14134 AUC after training: 0.5143160127253446
User 14134 does not improve AUC. Reverting changes.
Training on augumented user 120069 5/50 current_auc = 0.5164369034994698
User 120069 AUC after training: 0.5137857900318133
User 120069 does not improve AUC. Reverting changes.
Training on augumented user 117157 6/50 current_auc = 0.5164369034994698
User 117157 AUC after training: 0.5180275715800636
User 117157 improves AUC. Keeping the model.
Training on augumented user 127299 7/50 current_auc = 0.5180275715800636
User 127299 AUC after training: 0.5159066808059385
User 127299 does not improve AUC. Reverting changes.
Training on augumented user 125244 8/50 current_auc = 0.5180275715800636
User 125244 AUC after training: 0.5174973488865323
User 125244 does not improve AUC. Reverting changes.
Training on augumented user 116338 9/50 current_auc = 0.5180275715800636
User 116338 AUC after training: 0.5180275715800636
User 116338 does not improve AUC. Reverting changes.
Training on augumented user 120233 10/50 current_auc = 0.5180275715800636
User 120233 AUC after training: 0.5159066808059385
User 120233 does not improve AUC. Reverting changes.
Training on augumented user 128526 11/50 current_auc = 0.5180275715800636
User 128526 AUC after training: 0.514846235418876
User 128526 does not improve AUC. Reverting changes.
Training on augumented user 33948 12/50 current_auc = 0.5180275715800636
User 33948 AUC after training: 0.5148462354188759
User 33948 does not improve AUC. Reverting changes.
Training on augumented user 13139 13/50 current_auc = 0.5180275715800636
User 13139 AUC after training: 0.5164369034994698
User 13139 does not improve AUC. Reverting changes.
Training on augumented user 72539 14/50 current_auc = 0.5180275715800636
User 72539 AUC after training: 0.514846235418876
User 72539 does not improve AUC. Reverting changes.
Training on augumented user 125019 15/50 current_auc = 0.5180275715800636
User 125019 AUC after training: 0.5174973488865323
User 125019 does not improve AUC. Reverting changes.
Training on augumented user 130016 16/50 current_auc = 0.5180275715800636
User 130016 AUC after training: 0.5137857900318132
User 130016 does not improve AUC. Reverting changes.
Training on augumented user 79958 17/50 current_auc = 0.5180275715800636
User 79958 AUC after training: 0.5148462354188759
User 79958 does not improve AUC. Reverting changes.
Training on augumented user 87995 18/50 current_auc = 0.5180275715800636
User 87995 AUC after training: 0.5159066808059385
User 87995 does not improve AUC. Reverting changes.
Training on augumented user 35959 19/50 current_auc = 0.5180275715800636
User 35959 AUC after training: 0.5180275715800635
User 35959 does not improve AUC. Reverting changes.
Training on augumented user 133382 20/50 current_auc = 0.5180275715800636
User 133382 AUC after training: 0.516967126193001
User 133382 does not improve AUC. Reverting changes.
Training on augumented user 124244 21/50 current_auc = 0.5180275715800636
User 124244 AUC after training: 0.5180275715800636
User 124244 does not improve AUC. Reverting changes.
Training on augumented user 22189 22/50 current_auc = 0.5180275715800636
User 22189 AUC after training: 0.5137857900318135
User 22189 does not improve AUC. Reverting changes.
Training on augumented user 92668 23/50 current_auc = 0.5180275715800636
User 92668 AUC after training: 0.5148462354188759
User 92668 does not improve AUC. Reverting changes.
Training on augumented user 37919 24/50 current_auc = 0.5180275715800636
User 37919 AUC after training: 0.5174973488865323
User 37919 does not improve AUC. Reverting changes.
Training on augumented user 21796 25/50 current_auc = 0.5180275715800636
User 21796 AUC after training: 0.5143160127253446
User 21796 does not improve AUC. Reverting changes.
Training on augumented user 46460 26/50 current_auc = 0.5180275715800636
User 46460 AUC after training: 0.5143160127253446
User 46460 does not improve AUC. Reverting changes.
Training on augumented user 107181 27/50 current_auc = 0.5180275715800636
User 107181 AUC after training: 0.5127253446447508
User 107181 does not improve AUC. Reverting changes.
Training on augumented user 120394 28/50 current_auc = 0.5180275715800636
User 120394 AUC after training: 0.516967126193001
User 120394 does not improve AUC. Reverting changes.
Training on augumented user 95845 29/50 current_auc = 0.5180275715800636
User 95845 AUC after training: 0.5137857900318133
User 95845 does not improve AUC. Reverting changes.
Training on augumented user 91364 30/50 current_auc = 0.5180275715800636
User 91364 AUC after training: 0.516967126193001
User 91364 does not improve AUC. Reverting changes.
Training on augumented user 111441 31/50 current_auc = 0.5180275715800636
User 111441 AUC after training: 0.5137857900318135
User 111441 does not improve AUC. Reverting changes.
Training on augumented user 24350 32/50 current_auc = 0.5180275715800636
User 24350 AUC after training: 0.5164369034994698
User 24350 does not improve AUC. Reverting changes.
Training on augumented user 30853 33/50 current_auc = 0.5180275715800636
User 30853 AUC after training: 0.513255567338282
User 30853 does not improve AUC. Reverting changes.
Training on augumented user 75775 34/50 current_auc = 0.5180275715800636
User 75775 AUC after training: 0.5143160127253447
User 75775 does not improve AUC. Reverting changes.
Training on augumented user 70681 35/50 current_auc = 0.5180275715800636
User 70681 AUC after training: 0.5180275715800636
User 70681 does not improve AUC. Reverting changes.
Training on augumented user 22975 36/50 current_auc = 0.5180275715800636
User 22975 AUC after training: 0.5180275715800636
User 22975 does not improve AUC. Reverting changes.
Training on augumented user 46882 37/50 current_auc = 0.5180275715800636
User 46882 AUC after training: 0.5174973488865323
User 46882 does not improve AUC. Reverting changes.
Training on augumented user 26102 38/50 current_auc = 0.5180275715800636
User 26102 AUC after training: 0.5137857900318133
User 26102 does not improve AUC. Reverting changes.
Training on augumented user 97496 39/50 current_auc = 0.5180275715800636
User 97496 AUC after training: 0.5153764581124072
User 97496 does not improve AUC. Reverting changes.
Training on augumented user 118723 40/50 current_auc = 0.5180275715800636
User 118723 AUC after training: 0.5151113467656415
User 118723 does not improve AUC. Reverting changes.
Training on augumented user 90368 41/50 current_auc = 0.5180275715800636
User 90368 AUC after training: 0.5143160127253447
User 90368 does not improve AUC. Reverting changes.
Training on augumented user 94894 42/50 current_auc = 0.5180275715800636
User 94894 AUC after training: 0.5116648992576882
User 94894 does not improve AUC. Reverting changes.
Training on augumented user 75625 43/50 current_auc = 0.5180275715800636
User 75625 AUC after training: 0.5153764581124072
User 75625 does not improve AUC. Reverting changes.
Training on augumented user 78404 44/50 current_auc = 0.5180275715800636
User 78404 AUC after training: 0.514846235418876
User 78404 does not improve AUC. Reverting changes.
Training on augumented user 88029 45/50 current_auc = 0.5180275715800636
User 88029 AUC after training: 0.5164369034994697
User 88029 does not improve AUC. Reverting changes.
Training on augumented user 87780 46/50 current_auc = 0.5180275715800636
User 87780 AUC after training: 0.5143160127253446
User 87780 does not improve AUC. Reverting changes.
Training on augumented user 65152 47/50 current_auc = 0.5180275715800636
User 65152 AUC after training: 0.5148462354188759
User 65152 does not improve AUC. Reverting changes.
Training on augumented user 49595 48/50 current_auc = 0.5180275715800636
User 49595 AUC after training: 0.5164369034994698
User 49595 does not improve AUC. Reverting changes.
Training on augumented user 104514 49/50 current_auc = 0.5180275715800636
User 104514 AUC after training: 0.5148462354188759
User 104514 does not improve AUC. Reverting changes.
[2024-12-02 19:52:47.151257] start test user 48134 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:47.585564] start test user 48134 245/568 recall augumented users by random, augumented_users = [46046, 119611, 119610, 110691, 52131, 44498, 44451, 108758, 19769, 70785, 129233, 44099, 59428, 69018, 27513, 84896, 137449, 65222, 133505, 120324, 69308, 70068, 73620, 68813, 114840, 3835, 32429, 20448, 99017, 59226, 129587, 118433, 43392, 19127, 22033, 119193, 65152, 79949, 21073, 116558, 53483, 126365, 26510, 119943, 68693, 95139, 27685, 100088, 46980, 86894]
[2024-12-02 19:52:47.600969] user = 48134 Cloud 245/568
[2024-12-02 19:52:47.622024] user = 48134 Local 245/568
[2024-12-02 19:52:47.680333] user = 48134 Local+ 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:49.886691] user = 48134 MPDA- 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6610936955764541
Training on augumented user 46046 0/50 current_auc = 0.6610936955764541
User 46046 AUC after training: 0.6610936955764543
User 46046 improves AUC. Keeping the model.
Training on augumented user 119611 1/50 current_auc = 0.6610936955764543
User 119611 AUC after training: 0.6610066179031696
User 119611 does not improve AUC. Reverting changes.
Training on augumented user 119610 2/50 current_auc = 0.6610936955764543
User 119610 AUC after training: 0.6616161616161617
User 119610 improves AUC. Keeping the model.
Training on augumented user 110691 3/50 current_auc = 0.6616161616161617
User 110691 AUC after training: 0.662748171368861
User 110691 improves AUC. Keeping the model.
Training on augumented user 52131 4/50 current_auc = 0.662748171368861
User 52131 AUC after training: 0.662748171368861
User 52131 does not improve AUC. Reverting changes.
Training on augumented user 44498 5/50 current_auc = 0.662748171368861
User 44498 AUC after training: 0.6628352490421456
User 44498 improves AUC. Keeping the model.
Training on augumented user 44451 6/50 current_auc = 0.6628352490421456
User 44451 AUC after training: 0.6623127830024381
User 44451 does not improve AUC. Reverting changes.
Training on augumented user 108758 7/50 current_auc = 0.6628352490421456
User 108758 AUC after training: 0.6614420062695925
User 108758 does not improve AUC. Reverting changes.
Training on augumented user 19769 8/50 current_auc = 0.6628352490421456
User 19769 AUC after training: 0.6625740160222918
User 19769 does not improve AUC. Reverting changes.
Training on augumented user 70785 9/50 current_auc = 0.6628352490421456
User 70785 AUC after training: 0.6629223267154302
User 70785 improves AUC. Keeping the model.
Training on augumented user 129233 10/50 current_auc = 0.6629223267154302
User 129233 AUC after training: 0.6623127830024381
User 129233 does not improve AUC. Reverting changes.
Training on augumented user 44099 11/50 current_auc = 0.6629223267154302
User 44099 AUC after training: 0.6624869383490072
User 44099 does not improve AUC. Reverting changes.
Training on augumented user 59428 12/50 current_auc = 0.6629223267154302
User 59428 AUC after training: 0.6626610936955764
User 59428 does not improve AUC. Reverting changes.
Training on augumented user 69018 13/50 current_auc = 0.6629223267154302
User 69018 AUC after training: 0.6626610936955765
User 69018 does not improve AUC. Reverting changes.
Training on augumented user 27513 14/50 current_auc = 0.6629223267154302
User 27513 AUC after training: 0.6630964820619993
User 27513 improves AUC. Keeping the model.
Training on augumented user 84896 15/50 current_auc = 0.6630964820619993
User 84896 AUC after training: 0.6624869383490073
User 84896 does not improve AUC. Reverting changes.
Training on augumented user 137449 16/50 current_auc = 0.6630964820619993
User 137449 AUC after training: 0.6630094043887148
User 137449 does not improve AUC. Reverting changes.
Training on augumented user 65222 17/50 current_auc = 0.6630964820619993
User 65222 AUC after training: 0.6630094043887147
User 65222 does not improve AUC. Reverting changes.
Training on augumented user 133505 18/50 current_auc = 0.6630964820619993
User 133505 AUC after training: 0.6630094043887147
User 133505 does not improve AUC. Reverting changes.
Training on augumented user 120324 19/50 current_auc = 0.6630964820619993
User 120324 AUC after training: 0.662748171368861
User 120324 does not improve AUC. Reverting changes.
Training on augumented user 69308 20/50 current_auc = 0.6630964820619993
User 69308 AUC after training: 0.6630964820619992
User 69308 does not improve AUC. Reverting changes.
Training on augumented user 70068 21/50 current_auc = 0.6630964820619993
User 70068 AUC after training: 0.663357715081853
User 70068 improves AUC. Keeping the model.
Training on augumented user 73620 22/50 current_auc = 0.663357715081853
User 73620 AUC after training: 0.6630964820619993
User 73620 does not improve AUC. Reverting changes.
Training on augumented user 68813 23/50 current_auc = 0.663357715081853
User 68813 AUC after training: 0.6632706374085684
User 68813 does not improve AUC. Reverting changes.
Training on augumented user 114840 24/50 current_auc = 0.663357715081853
User 114840 AUC after training: 0.6630094043887147
User 114840 does not improve AUC. Reverting changes.
Training on augumented user 3835 25/50 current_auc = 0.663357715081853
User 3835 AUC after training: 0.6631400208986415
User 3835 does not improve AUC. Reverting changes.
Training on augumented user 32429 26/50 current_auc = 0.663357715081853
User 32429 AUC after training: 0.6631835597352839
User 32429 does not improve AUC. Reverting changes.
Training on augumented user 20448 27/50 current_auc = 0.663357715081853
User 20448 AUC after training: 0.6636189481017067
User 20448 improves AUC. Keeping the model.
Training on augumented user 99017 28/50 current_auc = 0.6636189481017067
User 99017 AUC after training: 0.6634447927551376
User 99017 does not improve AUC. Reverting changes.
Training on augumented user 59226 29/50 current_auc = 0.6636189481017067
User 59226 AUC after training: 0.663836642284918
User 59226 improves AUC. Keeping the model.
Training on augumented user 129587 30/50 current_auc = 0.663836642284918
User 129587 AUC after training: 0.665186346220829
User 129587 improves AUC. Keeping the model.
Training on augumented user 118433 31/50 current_auc = 0.665186346220829
User 118433 AUC after training: 0.6655346569139674
User 118433 improves AUC. Keeping the model.
Training on augumented user 43392 32/50 current_auc = 0.6655346569139674
User 43392 AUC after training: 0.6657088122605364
User 43392 improves AUC. Keeping the model.
Training on augumented user 19127 33/50 current_auc = 0.6657088122605364
User 19127 AUC after training: 0.6653605015673982
User 19127 does not improve AUC. Reverting changes.
Training on augumented user 22033 34/50 current_auc = 0.6657088122605364
User 22033 AUC after training: 0.6662312783002439
User 22033 improves AUC. Keeping the model.
Training on augumented user 119193 35/50 current_auc = 0.6662312783002439
User 119193 AUC after training: 0.6658829676071056
User 119193 does not improve AUC. Reverting changes.
Training on augumented user 65152 36/50 current_auc = 0.6662312783002439
User 65152 AUC after training: 0.6666666666666666
User 65152 improves AUC. Keeping the model.
Training on augumented user 79949 37/50 current_auc = 0.6666666666666666
User 79949 AUC after training: 0.6666666666666666
User 79949 does not improve AUC. Reverting changes.
Training on augumented user 21073 38/50 current_auc = 0.6666666666666666
User 21073 AUC after training: 0.6664925113200976
User 21073 does not improve AUC. Reverting changes.
Training on augumented user 116558 39/50 current_auc = 0.6666666666666666
User 116558 AUC after training: 0.666405433646813
User 116558 does not improve AUC. Reverting changes.
Training on augumented user 53483 40/50 current_auc = 0.6666666666666666
User 53483 AUC after training: 0.6663183559735284
User 53483 does not improve AUC. Reverting changes.
Training on augumented user 126365 41/50 current_auc = 0.6666666666666666
User 126365 AUC after training: 0.6674503657262278
User 126365 improves AUC. Keeping the model.
Training on augumented user 26510 42/50 current_auc = 0.6674503657262278
User 26510 AUC after training: 0.666405433646813
User 26510 does not improve AUC. Reverting changes.
Training on augumented user 119943 43/50 current_auc = 0.6674503657262278
User 119943 AUC after training: 0.6673632880529433
User 119943 does not improve AUC. Reverting changes.
Training on augumented user 68693 44/50 current_auc = 0.6674503657262278
User 68693 AUC after training: 0.6658829676071055
User 68693 does not improve AUC. Reverting changes.
Training on augumented user 95139 45/50 current_auc = 0.6674503657262278
User 95139 AUC after training: 0.6685823754789273
User 95139 improves AUC. Keeping the model.
Training on augumented user 27685 46/50 current_auc = 0.6685823754789273
User 27685 AUC after training: 0.6689306861720655
User 27685 improves AUC. Keeping the model.
Training on augumented user 100088 47/50 current_auc = 0.6689306861720655
User 100088 AUC after training: 0.6684952978056427
User 100088 does not improve AUC. Reverting changes.
Training on augumented user 46980 48/50 current_auc = 0.6689306861720655
User 46980 AUC after training: 0.6683211424590735
User 46980 does not improve AUC. Reverting changes.
Training on augumented user 86894 49/50 current_auc = 0.6689306861720655
User 86894 AUC after training: 0.6682776036224312
User 86894 does not improve AUC. Reverting changes.
[2024-12-02 19:53:21.901777] start test user 48255 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:22.705308] start test user 48255 246/568 recall augumented users by random, augumented_users = [97783, 52718, 63861, 58881, 10965, 116187, 1507, 43646, 94402, 92629, 87336, 20962, 40188, 106170, 46942, 70138, 44160, 73320, 103513, 70003, 38719, 115596, 121649, 81508, 60484, 94323, 1859, 70408, 130422, 76213, 107336, 95919, 105280, 23319, 77177, 117563, 115687, 64226, 30458, 34201, 37394, 112432, 10224, 58092, 8774, 3616, 11984, 24929, 48514, 125995]
[2024-12-02 19:53:22.720487] user = 48255 Cloud 246/568
[2024-12-02 19:53:22.731856] user = 48255 Local 246/568
[2024-12-02 19:53:22.772919] user = 48255 Local+ 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:24.980752] user = 48255 MPDA- 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5727272727272728
Training on augumented user 97783 0/50 current_auc = 0.5727272727272728
User 97783 AUC after training: 0.5704545454545454
User 97783 does not improve AUC. Reverting changes.
Training on augumented user 52718 1/50 current_auc = 0.5727272727272728
User 52718 AUC after training: 0.5727272727272728
User 52718 does not improve AUC. Reverting changes.
Training on augumented user 63861 2/50 current_auc = 0.5727272727272728
User 63861 AUC after training: 0.5704545454545454
User 63861 does not improve AUC. Reverting changes.
Training on augumented user 58881 3/50 current_auc = 0.5727272727272728
User 58881 AUC after training: 0.5704545454545454
User 58881 does not improve AUC. Reverting changes.
Training on augumented user 10965 4/50 current_auc = 0.5727272727272728
User 10965 AUC after training: 0.5727272727272728
User 10965 does not improve AUC. Reverting changes.
Training on augumented user 116187 5/50 current_auc = 0.5727272727272728
User 116187 AUC after training: 0.5704545454545454
User 116187 does not improve AUC. Reverting changes.
Training on augumented user 1507 6/50 current_auc = 0.5727272727272728
User 1507 AUC after training: 0.5636363636363636
User 1507 does not improve AUC. Reverting changes.
Training on augumented user 43646 7/50 current_auc = 0.5727272727272728
User 43646 AUC after training: 0.5704545454545454
User 43646 does not improve AUC. Reverting changes.
Training on augumented user 94402 8/50 current_auc = 0.5727272727272728
User 94402 AUC after training: 0.5704545454545454
User 94402 does not improve AUC. Reverting changes.
Training on augumented user 92629 9/50 current_auc = 0.5727272727272728
User 92629 AUC after training: 0.5727272727272728
User 92629 does not improve AUC. Reverting changes.
Training on augumented user 87336 10/50 current_auc = 0.5727272727272728
User 87336 AUC after training: 0.5727272727272728
User 87336 does not improve AUC. Reverting changes.
Training on augumented user 20962 11/50 current_auc = 0.5727272727272728
User 20962 AUC after training: 0.5704545454545454
User 20962 does not improve AUC. Reverting changes.
Training on augumented user 40188 12/50 current_auc = 0.5727272727272728
User 40188 AUC after training: 0.5727272727272728
User 40188 does not improve AUC. Reverting changes.
Training on augumented user 106170 13/50 current_auc = 0.5727272727272728
User 106170 AUC after training: 0.5704545454545454
User 106170 does not improve AUC. Reverting changes.
Training on augumented user 46942 14/50 current_auc = 0.5727272727272728
User 46942 AUC after training: 0.5704545454545454
User 46942 does not improve AUC. Reverting changes.
Training on augumented user 70138 15/50 current_auc = 0.5727272727272728
User 70138 AUC after training: 0.5727272727272728
User 70138 does not improve AUC. Reverting changes.
Training on augumented user 44160 16/50 current_auc = 0.5727272727272728
User 44160 AUC after training: 0.5704545454545454
User 44160 does not improve AUC. Reverting changes.
Training on augumented user 73320 17/50 current_auc = 0.5727272727272728
User 73320 AUC after training: 0.5704545454545454
User 73320 does not improve AUC. Reverting changes.
Training on augumented user 103513 18/50 current_auc = 0.5727272727272728
User 103513 AUC after training: 0.5727272727272728
User 103513 does not improve AUC. Reverting changes.
Training on augumented user 70003 19/50 current_auc = 0.5727272727272728
User 70003 AUC after training: 0.5704545454545454
User 70003 does not improve AUC. Reverting changes.
Training on augumented user 38719 20/50 current_auc = 0.5727272727272728
User 38719 AUC after training: 0.5704545454545454
User 38719 does not improve AUC. Reverting changes.
Training on augumented user 115596 21/50 current_auc = 0.5727272727272728
User 115596 AUC after training: 0.5727272727272728
User 115596 does not improve AUC. Reverting changes.
Training on augumented user 121649 22/50 current_auc = 0.5727272727272728
User 121649 AUC after training: 0.5704545454545454
User 121649 does not improve AUC. Reverting changes.
Training on augumented user 81508 23/50 current_auc = 0.5727272727272728
User 81508 AUC after training: 0.5704545454545454
User 81508 does not improve AUC. Reverting changes.
Training on augumented user 60484 24/50 current_auc = 0.5727272727272728
User 60484 AUC after training: 0.5727272727272728
User 60484 does not improve AUC. Reverting changes.
Training on augumented user 94323 25/50 current_auc = 0.5727272727272728
User 94323 AUC after training: 0.5704545454545454
User 94323 does not improve AUC. Reverting changes.
Training on augumented user 1859 26/50 current_auc = 0.5727272727272728
User 1859 AUC after training: 0.5727272727272728
User 1859 does not improve AUC. Reverting changes.
Training on augumented user 70408 27/50 current_auc = 0.5727272727272728
User 70408 AUC after training: 0.5727272727272728
User 70408 does not improve AUC. Reverting changes.
Training on augumented user 130422 28/50 current_auc = 0.5727272727272728
User 130422 AUC after training: 0.5727272727272728
User 130422 does not improve AUC. Reverting changes.
Training on augumented user 76213 29/50 current_auc = 0.5727272727272728
User 76213 AUC after training: 0.5681818181818181
User 76213 does not improve AUC. Reverting changes.
Training on augumented user 107336 30/50 current_auc = 0.5727272727272728
User 107336 AUC after training: 0.5704545454545454
User 107336 does not improve AUC. Reverting changes.
Training on augumented user 95919 31/50 current_auc = 0.5727272727272728
User 95919 AUC after training: 0.5704545454545454
User 95919 does not improve AUC. Reverting changes.
Training on augumented user 105280 32/50 current_auc = 0.5727272727272728
User 105280 AUC after training: 0.5681818181818181
User 105280 does not improve AUC. Reverting changes.
Training on augumented user 23319 33/50 current_auc = 0.5727272727272728
User 23319 AUC after training: 0.5704545454545454
User 23319 does not improve AUC. Reverting changes.
Training on augumented user 77177 34/50 current_auc = 0.5727272727272728
User 77177 AUC after training: 0.5727272727272728
User 77177 does not improve AUC. Reverting changes.
Training on augumented user 117563 35/50 current_auc = 0.5727272727272728
User 117563 AUC after training: 0.5704545454545454
User 117563 does not improve AUC. Reverting changes.
Training on augumented user 115687 36/50 current_auc = 0.5727272727272728
User 115687 AUC after training: 0.5727272727272728
User 115687 does not improve AUC. Reverting changes.
Training on augumented user 64226 37/50 current_auc = 0.5727272727272728
User 64226 AUC after training: 0.5704545454545454
User 64226 does not improve AUC. Reverting changes.
Training on augumented user 30458 38/50 current_auc = 0.5727272727272728
User 30458 AUC after training: 0.5727272727272728
User 30458 does not improve AUC. Reverting changes.
Training on augumented user 34201 39/50 current_auc = 0.5727272727272728
User 34201 AUC after training: 0.5704545454545454
User 34201 does not improve AUC. Reverting changes.
Training on augumented user 37394 40/50 current_auc = 0.5727272727272728
User 37394 AUC after training: 0.5727272727272728
User 37394 does not improve AUC. Reverting changes.
Training on augumented user 112432 41/50 current_auc = 0.5727272727272728
User 112432 AUC after training: 0.5659090909090909
User 112432 does not improve AUC. Reverting changes.
Training on augumented user 10224 42/50 current_auc = 0.5727272727272728
User 10224 AUC after training: 0.5681818181818181
User 10224 does not improve AUC. Reverting changes.
Training on augumented user 58092 43/50 current_auc = 0.5727272727272728
User 58092 AUC after training: 0.5727272727272728
User 58092 does not improve AUC. Reverting changes.
Training on augumented user 8774 44/50 current_auc = 0.5727272727272728
User 8774 AUC after training: 0.5704545454545454
User 8774 does not improve AUC. Reverting changes.
Training on augumented user 3616 45/50 current_auc = 0.5727272727272728
User 3616 AUC after training: 0.5727272727272728
User 3616 does not improve AUC. Reverting changes.
Training on augumented user 11984 46/50 current_auc = 0.5727272727272728
User 11984 AUC after training: 0.5704545454545454
User 11984 does not improve AUC. Reverting changes.
Training on augumented user 24929 47/50 current_auc = 0.5727272727272728
User 24929 AUC after training: 0.5704545454545454
User 24929 does not improve AUC. Reverting changes.
Training on augumented user 48514 48/50 current_auc = 0.5727272727272728
User 48514 AUC after training: 0.5727272727272728
User 48514 does not improve AUC. Reverting changes.
Training on augumented user 125995 49/50 current_auc = 0.5727272727272728
User 125995 AUC after training: 0.5727272727272728
User 125995 does not improve AUC. Reverting changes.
[2024-12-02 19:53:56.592572] start test user 48256 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:57.284307] start test user 48256 247/568 recall augumented users by random, augumented_users = [13333, 45454, 114673, 56173, 56091, 7461, 12363, 48769, 92094, 82262, 87027, 82034, 70619, 132305, 9576, 50495, 22797, 112956, 3690, 22175, 1454, 84910, 132663, 35939, 28800, 80693, 1652, 49869, 102529, 107306, 60146, 76789, 29055, 96241, 48781, 113106, 110530, 27769, 64111, 46621, 11183, 8738, 136823, 124935, 29912, 28411, 43786, 109875, 101446, 69734]
[2024-12-02 19:53:57.312363] user = 48256 Cloud 247/568
[2024-12-02 19:53:57.344708] user = 48256 Local 247/568
[2024-12-02 19:53:57.382015] user = 48256 Local+ 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:59.960595] user = 48256 MPDA- 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.575
Training on augumented user 13333 0/50 current_auc = 0.575
User 13333 AUC after training: 0.5682926829268293
User 13333 does not improve AUC. Reverting changes.
Training on augumented user 45454 1/50 current_auc = 0.575
User 45454 AUC after training: 0.575
User 45454 does not improve AUC. Reverting changes.
Training on augumented user 114673 2/50 current_auc = 0.575
User 114673 AUC after training: 0.573780487804878
User 114673 does not improve AUC. Reverting changes.
Training on augumented user 56173 3/50 current_auc = 0.575
User 56173 AUC after training: 0.5786585365853658
User 56173 improves AUC. Keeping the model.
Training on augumented user 56091 4/50 current_auc = 0.5786585365853658
User 56091 AUC after training: 0.5823170731707317
User 56091 improves AUC. Keeping the model.
Training on augumented user 7461 5/50 current_auc = 0.5823170731707317
User 7461 AUC after training: 0.5823170731707317
User 7461 does not improve AUC. Reverting changes.
Training on augumented user 12363 6/50 current_auc = 0.5823170731707317
User 12363 AUC after training: 0.5676829268292682
User 12363 does not improve AUC. Reverting changes.
Training on augumented user 48769 7/50 current_auc = 0.5823170731707317
User 48769 AUC after training: 0.5829268292682926
User 48769 improves AUC. Keeping the model.
Training on augumented user 92094 8/50 current_auc = 0.5829268292682926
User 92094 AUC after training: 0.5847560975609756
User 92094 improves AUC. Keeping the model.
Training on augumented user 82262 9/50 current_auc = 0.5847560975609756
User 82262 AUC after training: 0.5859756097560975
User 82262 improves AUC. Keeping the model.
Training on augumented user 87027 10/50 current_auc = 0.5859756097560975
User 87027 AUC after training: 0.5841463414634146
User 87027 does not improve AUC. Reverting changes.
Training on augumented user 82034 11/50 current_auc = 0.5859756097560975
User 82034 AUC after training: 0.5884146341463414
User 82034 improves AUC. Keeping the model.
Training on augumented user 70619 12/50 current_auc = 0.5884146341463414
User 70619 AUC after training: 0.5890243902439024
User 70619 improves AUC. Keeping the model.
Training on augumented user 132305 13/50 current_auc = 0.5890243902439024
User 132305 AUC after training: 0.5884146341463414
User 132305 does not improve AUC. Reverting changes.
Training on augumented user 9576 14/50 current_auc = 0.5890243902439024
User 9576 AUC after training: 0.5878048780487805
User 9576 does not improve AUC. Reverting changes.
Training on augumented user 50495 15/50 current_auc = 0.5890243902439024
User 50495 AUC after training: 0.5865853658536586
User 50495 does not improve AUC. Reverting changes.
Training on augumented user 22797 16/50 current_auc = 0.5890243902439024
User 22797 AUC after training: 0.5865853658536585
User 22797 does not improve AUC. Reverting changes.
Training on augumented user 112956 17/50 current_auc = 0.5890243902439024
User 112956 AUC after training: 0.5865853658536585
User 112956 does not improve AUC. Reverting changes.
Training on augumented user 3690 18/50 current_auc = 0.5890243902439024
User 3690 AUC after training: 0.5896341463414634
User 3690 improves AUC. Keeping the model.
Training on augumented user 22175 19/50 current_auc = 0.5896341463414634
User 22175 AUC after training: 0.5890243902439025
User 22175 does not improve AUC. Reverting changes.
Training on augumented user 1454 20/50 current_auc = 0.5896341463414634
User 1454 AUC after training: 0.5878048780487805
User 1454 does not improve AUC. Reverting changes.
Training on augumented user 84910 21/50 current_auc = 0.5896341463414634
User 84910 AUC after training: 0.5902439024390244
User 84910 improves AUC. Keeping the model.
Training on augumented user 132663 22/50 current_auc = 0.5902439024390244
User 132663 AUC after training: 0.5871951219512195
User 132663 does not improve AUC. Reverting changes.
Training on augumented user 35939 23/50 current_auc = 0.5902439024390244
User 35939 AUC after training: 0.5896341463414634
User 35939 does not improve AUC. Reverting changes.
Training on augumented user 28800 24/50 current_auc = 0.5902439024390244
User 28800 AUC after training: 0.5908536585365853
User 28800 improves AUC. Keeping the model.
Training on augumented user 80693 25/50 current_auc = 0.5908536585365853
User 80693 AUC after training: 0.5871951219512195
User 80693 does not improve AUC. Reverting changes.
Training on augumented user 1652 26/50 current_auc = 0.5908536585365853
User 1652 AUC after training: 0.5914634146341463
User 1652 improves AUC. Keeping the model.
Training on augumented user 49869 27/50 current_auc = 0.5914634146341463
User 49869 AUC after training: 0.5902439024390245
User 49869 does not improve AUC. Reverting changes.
Training on augumented user 102529 28/50 current_auc = 0.5914634146341463
User 102529 AUC after training: 0.5884146341463414
User 102529 does not improve AUC. Reverting changes.
Training on augumented user 107306 29/50 current_auc = 0.5914634146341463
User 107306 AUC after training: 0.5896341463414634
User 107306 does not improve AUC. Reverting changes.
Training on augumented user 60146 30/50 current_auc = 0.5914634146341463
User 60146 AUC after training: 0.5878048780487805
User 60146 does not improve AUC. Reverting changes.
Training on augumented user 76789 31/50 current_auc = 0.5914634146341463
User 76789 AUC after training: 0.5817073170731708
User 76789 does not improve AUC. Reverting changes.
Training on augumented user 29055 32/50 current_auc = 0.5914634146341463
User 29055 AUC after training: 0.5902439024390244
User 29055 does not improve AUC. Reverting changes.
Training on augumented user 96241 33/50 current_auc = 0.5914634146341463
User 96241 AUC after training: 0.5914634146341463
User 96241 does not improve AUC. Reverting changes.
Training on augumented user 48781 34/50 current_auc = 0.5914634146341463
User 48781 AUC after training: 0.5902439024390245
User 48781 does not improve AUC. Reverting changes.
Training on augumented user 113106 35/50 current_auc = 0.5914634146341463
User 113106 AUC after training: 0.5908536585365853
User 113106 does not improve AUC. Reverting changes.
Training on augumented user 110530 36/50 current_auc = 0.5914634146341463
User 110530 AUC after training: 0.5865853658536586
User 110530 does not improve AUC. Reverting changes.
Training on augumented user 27769 37/50 current_auc = 0.5914634146341463
User 27769 AUC after training: 0.5884146341463414
User 27769 does not improve AUC. Reverting changes.
Training on augumented user 64111 38/50 current_auc = 0.5914634146341463
User 64111 AUC after training: 0.5884146341463414
User 64111 does not improve AUC. Reverting changes.
Training on augumented user 46621 39/50 current_auc = 0.5914634146341463
User 46621 AUC after training: 0.5871951219512195
User 46621 does not improve AUC. Reverting changes.
Training on augumented user 11183 40/50 current_auc = 0.5914634146341463
User 11183 AUC after training: 0.5896341463414634
User 11183 does not improve AUC. Reverting changes.
Training on augumented user 8738 41/50 current_auc = 0.5914634146341463
User 8738 AUC after training: 0.5859756097560975
User 8738 does not improve AUC. Reverting changes.
Training on augumented user 136823 42/50 current_auc = 0.5914634146341463
User 136823 AUC after training: 0.5896341463414634
User 136823 does not improve AUC. Reverting changes.
Training on augumented user 124935 43/50 current_auc = 0.5914634146341463
User 124935 AUC after training: 0.5865853658536585
User 124935 does not improve AUC. Reverting changes.
Training on augumented user 29912 44/50 current_auc = 0.5914634146341463
User 29912 AUC after training: 0.5884146341463414
User 29912 does not improve AUC. Reverting changes.
Training on augumented user 28411 45/50 current_auc = 0.5914634146341463
User 28411 AUC after training: 0.5859756097560975
User 28411 does not improve AUC. Reverting changes.
Training on augumented user 43786 46/50 current_auc = 0.5914634146341463
User 43786 AUC after training: 0.5896341463414634
User 43786 does not improve AUC. Reverting changes.
Training on augumented user 109875 47/50 current_auc = 0.5914634146341463
User 109875 AUC after training: 0.5841463414634147
User 109875 does not improve AUC. Reverting changes.
Training on augumented user 101446 48/50 current_auc = 0.5914634146341463
User 101446 AUC after training: 0.5926829268292683
User 101446 improves AUC. Keeping the model.
Training on augumented user 69734 49/50 current_auc = 0.5926829268292683
User 69734 AUC after training: 0.5914634146341463
User 69734 does not improve AUC. Reverting changes.
[2024-12-02 19:54:27.506378] start test user 48305 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:27.994794] start test user 48305 248/568 recall augumented users by random, augumented_users = [80312, 103406, 73577, 119800, 59813, 3820, 127937, 41452, 59583, 94177, 38882, 114880, 85896, 89534, 17432, 15527, 116413, 109078, 97662, 86956, 134834, 40487, 133478, 126375, 53215, 7203, 7916, 7594, 85286, 28104, 70787, 91493, 22489, 13933, 1233, 56562, 125979, 23655, 129481, 30967, 4381, 20358, 127546, 121341, 111727, 105498, 129473, 92112, 25888, 3225]
[2024-12-02 19:54:28.009740] user = 48305 Cloud 248/568
[2024-12-02 19:54:28.022559] user = 48305 Local 248/568
[2024-12-02 19:54:28.085906] user = 48305 Local+ 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:30.776864] user = 48305 MPDA- 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7254901960784312
Training on augumented user 80312 0/50 current_auc = 0.7254901960784312
User 80312 AUC after training: 0.7303921568627451
User 80312 improves AUC. Keeping the model.
Training on augumented user 103406 1/50 current_auc = 0.7303921568627451
User 103406 AUC after training: 0.7303921568627451
User 103406 does not improve AUC. Reverting changes.
Training on augumented user 73577 2/50 current_auc = 0.7303921568627451
User 73577 AUC after training: 0.7303921568627451
User 73577 does not improve AUC. Reverting changes.
Training on augumented user 119800 3/50 current_auc = 0.7303921568627451
User 119800 AUC after training: 0.7450980392156863
User 119800 improves AUC. Keeping the model.
Training on augumented user 59813 4/50 current_auc = 0.7450980392156863
User 59813 AUC after training: 0.7450980392156863
User 59813 does not improve AUC. Reverting changes.
Training on augumented user 3820 5/50 current_auc = 0.7450980392156863
User 3820 AUC after training: 0.7450980392156863
User 3820 does not improve AUC. Reverting changes.
Training on augumented user 127937 6/50 current_auc = 0.7450980392156863
User 127937 AUC after training: 0.7450980392156863
User 127937 does not improve AUC. Reverting changes.
Training on augumented user 41452 7/50 current_auc = 0.7450980392156863
User 41452 AUC after training: 0.7450980392156863
User 41452 does not improve AUC. Reverting changes.
Training on augumented user 59583 8/50 current_auc = 0.7450980392156863
User 59583 AUC after training: 0.7352941176470589
User 59583 does not improve AUC. Reverting changes.
Training on augumented user 94177 9/50 current_auc = 0.7450980392156863
User 94177 AUC after training: 0.7450980392156863
User 94177 does not improve AUC. Reverting changes.
Training on augumented user 38882 10/50 current_auc = 0.7450980392156863
User 38882 AUC after training: 0.7450980392156863
User 38882 does not improve AUC. Reverting changes.
Training on augumented user 114880 11/50 current_auc = 0.7450980392156863
User 114880 AUC after training: 0.7450980392156863
User 114880 does not improve AUC. Reverting changes.
Training on augumented user 85896 12/50 current_auc = 0.7450980392156863
User 85896 AUC after training: 0.7450980392156863
User 85896 does not improve AUC. Reverting changes.
Training on augumented user 89534 13/50 current_auc = 0.7450980392156863
User 89534 AUC after training: 0.7450980392156863
User 89534 does not improve AUC. Reverting changes.
Training on augumented user 17432 14/50 current_auc = 0.7450980392156863
User 17432 AUC after training: 0.7450980392156863
User 17432 does not improve AUC. Reverting changes.
Training on augumented user 15527 15/50 current_auc = 0.7450980392156863
User 15527 AUC after training: 0.7450980392156863
User 15527 does not improve AUC. Reverting changes.
Training on augumented user 116413 16/50 current_auc = 0.7450980392156863
User 116413 AUC after training: 0.7450980392156863
User 116413 does not improve AUC. Reverting changes.
Training on augumented user 109078 17/50 current_auc = 0.7450980392156863
User 109078 AUC after training: 0.7450980392156863
User 109078 does not improve AUC. Reverting changes.
Training on augumented user 97662 18/50 current_auc = 0.7450980392156863
User 97662 AUC after training: 0.7450980392156863
User 97662 does not improve AUC. Reverting changes.
Training on augumented user 86956 19/50 current_auc = 0.7450980392156863
User 86956 AUC after training: 0.7450980392156863
User 86956 does not improve AUC. Reverting changes.
Training on augumented user 134834 20/50 current_auc = 0.7450980392156863
User 134834 AUC after training: 0.7450980392156863
User 134834 does not improve AUC. Reverting changes.
Training on augumented user 40487 21/50 current_auc = 0.7450980392156863
User 40487 AUC after training: 0.7450980392156863
User 40487 does not improve AUC. Reverting changes.
Training on augumented user 133478 22/50 current_auc = 0.7450980392156863
User 133478 AUC after training: 0.7450980392156863
User 133478 does not improve AUC. Reverting changes.
Training on augumented user 126375 23/50 current_auc = 0.7450980392156863
User 126375 AUC after training: 0.7450980392156863
User 126375 does not improve AUC. Reverting changes.
Training on augumented user 53215 24/50 current_auc = 0.7450980392156863
User 53215 AUC after training: 0.7450980392156863
User 53215 does not improve AUC. Reverting changes.
Training on augumented user 7203 25/50 current_auc = 0.7450980392156863
User 7203 AUC after training: 0.7450980392156863
User 7203 does not improve AUC. Reverting changes.
Training on augumented user 7916 26/50 current_auc = 0.7450980392156863
User 7916 AUC after training: 0.7450980392156863
User 7916 does not improve AUC. Reverting changes.
Training on augumented user 7594 27/50 current_auc = 0.7450980392156863
User 7594 AUC after training: 0.7450980392156863
User 7594 does not improve AUC. Reverting changes.
Training on augumented user 85286 28/50 current_auc = 0.7450980392156863
User 85286 AUC after training: 0.7450980392156863
User 85286 does not improve AUC. Reverting changes.
Training on augumented user 28104 29/50 current_auc = 0.7450980392156863
User 28104 AUC after training: 0.7401960784313726
User 28104 does not improve AUC. Reverting changes.
Training on augumented user 70787 30/50 current_auc = 0.7450980392156863
User 70787 AUC after training: 0.7401960784313726
User 70787 does not improve AUC. Reverting changes.
Training on augumented user 91493 31/50 current_auc = 0.7450980392156863
User 91493 AUC after training: 0.7450980392156863
User 91493 does not improve AUC. Reverting changes.
Training on augumented user 22489 32/50 current_auc = 0.7450980392156863
User 22489 AUC after training: 0.7450980392156863
User 22489 does not improve AUC. Reverting changes.
Training on augumented user 13933 33/50 current_auc = 0.7450980392156863
User 13933 AUC after training: 0.7450980392156863
User 13933 does not improve AUC. Reverting changes.
Training on augumented user 1233 34/50 current_auc = 0.7450980392156863
User 1233 AUC after training: 0.7450980392156863
User 1233 does not improve AUC. Reverting changes.
Training on augumented user 56562 35/50 current_auc = 0.7450980392156863
User 56562 AUC after training: 0.7450980392156863
User 56562 does not improve AUC. Reverting changes.
Training on augumented user 125979 36/50 current_auc = 0.7450980392156863
User 125979 AUC after training: 0.7450980392156863
User 125979 does not improve AUC. Reverting changes.
Training on augumented user 23655 37/50 current_auc = 0.7450980392156863
User 23655 AUC after training: 0.7450980392156863
User 23655 does not improve AUC. Reverting changes.
Training on augumented user 129481 38/50 current_auc = 0.7450980392156863
User 129481 AUC after training: 0.7450980392156863
User 129481 does not improve AUC. Reverting changes.
Training on augumented user 30967 39/50 current_auc = 0.7450980392156863
User 30967 AUC after training: 0.7401960784313726
User 30967 does not improve AUC. Reverting changes.
Training on augumented user 4381 40/50 current_auc = 0.7450980392156863
User 4381 AUC after training: 0.7450980392156863
User 4381 does not improve AUC. Reverting changes.
Training on augumented user 20358 41/50 current_auc = 0.7450980392156863
User 20358 AUC after training: 0.7450980392156863
User 20358 does not improve AUC. Reverting changes.
Training on augumented user 127546 42/50 current_auc = 0.7450980392156863
User 127546 AUC after training: 0.7450980392156863
User 127546 does not improve AUC. Reverting changes.
Training on augumented user 121341 43/50 current_auc = 0.7450980392156863
User 121341 AUC after training: 0.7401960784313726
User 121341 does not improve AUC. Reverting changes.
Training on augumented user 111727 44/50 current_auc = 0.7450980392156863
User 111727 AUC after training: 0.7450980392156863
User 111727 does not improve AUC. Reverting changes.
Training on augumented user 105498 45/50 current_auc = 0.7450980392156863
User 105498 AUC after training: 0.7401960784313726
User 105498 does not improve AUC. Reverting changes.
Training on augumented user 129473 46/50 current_auc = 0.7450980392156863
User 129473 AUC after training: 0.7450980392156863
User 129473 does not improve AUC. Reverting changes.
Training on augumented user 92112 47/50 current_auc = 0.7450980392156863
User 92112 AUC after training: 0.7450980392156863
User 92112 does not improve AUC. Reverting changes.
Training on augumented user 25888 48/50 current_auc = 0.7450980392156863
User 25888 AUC after training: 0.7450980392156863
User 25888 does not improve AUC. Reverting changes.
Training on augumented user 3225 49/50 current_auc = 0.7450980392156863
User 3225 AUC after training: 0.7401960784313726
User 3225 does not improve AUC. Reverting changes.
[2024-12-02 19:55:00.158686] start test user 48325 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:00.888956] start test user 48325 249/568 recall augumented users by random, augumented_users = [30581, 94578, 94947, 80702, 128177, 63634, 33020, 14899, 107808, 8057, 132577, 122572, 32170, 19793, 85832, 116210, 107658, 37349, 99547, 89867, 42058, 9853, 124740, 118028, 135357, 71156, 8375, 15634, 19448, 64583, 66698, 118198, 17718, 15953, 80984, 45363, 137215, 68466, 111941, 48136, 18517, 15152, 29567, 82406, 44165, 62215, 83476, 57315, 71705, 37230]
[2024-12-02 19:55:00.910056] user = 48325 Cloud 249/568
[2024-12-02 19:55:00.928142] user = 48325 Local 249/568
[2024-12-02 19:55:01.061858] user = 48325 Local+ 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:03.195550] user = 48325 MPDA- 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5383022774327122
Training on augumented user 30581 0/50 current_auc = 0.5383022774327122
User 30581 AUC after training: 0.5424430641821946
User 30581 improves AUC. Keeping the model.
Training on augumented user 94578 1/50 current_auc = 0.5424430641821946
User 94578 AUC after training: 0.5424430641821946
User 94578 does not improve AUC. Reverting changes.
Training on augumented user 94947 2/50 current_auc = 0.5424430641821946
User 94947 AUC after training: 0.5424430641821946
User 94947 does not improve AUC. Reverting changes.
Training on augumented user 80702 3/50 current_auc = 0.5424430641821946
User 80702 AUC after training: 0.5424430641821946
User 80702 does not improve AUC. Reverting changes.
Training on augumented user 128177 4/50 current_auc = 0.5424430641821946
User 128177 AUC after training: 0.5383022774327122
User 128177 does not improve AUC. Reverting changes.
Training on augumented user 63634 5/50 current_auc = 0.5424430641821946
User 63634 AUC after training: 0.5403726708074534
User 63634 does not improve AUC. Reverting changes.
Training on augumented user 33020 6/50 current_auc = 0.5424430641821946
User 33020 AUC after training: 0.5424430641821946
User 33020 does not improve AUC. Reverting changes.
Training on augumented user 14899 7/50 current_auc = 0.5424430641821946
User 14899 AUC after training: 0.5424430641821946
User 14899 does not improve AUC. Reverting changes.
Training on augumented user 107808 8/50 current_auc = 0.5424430641821946
User 107808 AUC after training: 0.5403726708074534
User 107808 does not improve AUC. Reverting changes.
Training on augumented user 8057 9/50 current_auc = 0.5424430641821946
User 8057 AUC after training: 0.5403726708074534
User 8057 does not improve AUC. Reverting changes.
Training on augumented user 132577 10/50 current_auc = 0.5424430641821946
User 132577 AUC after training: 0.5424430641821946
User 132577 does not improve AUC. Reverting changes.
Training on augumented user 122572 11/50 current_auc = 0.5424430641821946
User 122572 AUC after training: 0.5383022774327122
User 122572 does not improve AUC. Reverting changes.
Training on augumented user 32170 12/50 current_auc = 0.5424430641821946
User 32170 AUC after training: 0.5424430641821946
User 32170 does not improve AUC. Reverting changes.
Training on augumented user 19793 13/50 current_auc = 0.5424430641821946
User 19793 AUC after training: 0.5424430641821946
User 19793 does not improve AUC. Reverting changes.
Training on augumented user 85832 14/50 current_auc = 0.5424430641821946
User 85832 AUC after training: 0.5383022774327122
User 85832 does not improve AUC. Reverting changes.
Training on augumented user 116210 15/50 current_auc = 0.5424430641821946
User 116210 AUC after training: 0.5403726708074534
User 116210 does not improve AUC. Reverting changes.
Training on augumented user 107658 16/50 current_auc = 0.5424430641821946
User 107658 AUC after training: 0.5403726708074534
User 107658 does not improve AUC. Reverting changes.
Training on augumented user 37349 17/50 current_auc = 0.5424430641821946
User 37349 AUC after training: 0.5424430641821946
User 37349 does not improve AUC. Reverting changes.
Training on augumented user 99547 18/50 current_auc = 0.5424430641821946
User 99547 AUC after training: 0.5424430641821946
User 99547 does not improve AUC. Reverting changes.
Training on augumented user 89867 19/50 current_auc = 0.5424430641821946
User 89867 AUC after training: 0.5424430641821946
User 89867 does not improve AUC. Reverting changes.
Training on augumented user 42058 20/50 current_auc = 0.5424430641821946
User 42058 AUC after training: 0.5445134575569358
User 42058 improves AUC. Keeping the model.
Training on augumented user 9853 21/50 current_auc = 0.5445134575569358
User 9853 AUC after training: 0.5445134575569358
User 9853 does not improve AUC. Reverting changes.
Training on augumented user 124740 22/50 current_auc = 0.5445134575569358
User 124740 AUC after training: 0.5445134575569358
User 124740 does not improve AUC. Reverting changes.
Training on augumented user 118028 23/50 current_auc = 0.5445134575569358
User 118028 AUC after training: 0.5445134575569358
User 118028 does not improve AUC. Reverting changes.
Training on augumented user 135357 24/50 current_auc = 0.5445134575569358
User 135357 AUC after training: 0.5424430641821946
User 135357 does not improve AUC. Reverting changes.
Training on augumented user 71156 25/50 current_auc = 0.5445134575569358
User 71156 AUC after training: 0.5424430641821946
User 71156 does not improve AUC. Reverting changes.
Training on augumented user 8375 26/50 current_auc = 0.5445134575569358
User 8375 AUC after training: 0.5445134575569358
User 8375 does not improve AUC. Reverting changes.
Training on augumented user 15634 27/50 current_auc = 0.5445134575569358
User 15634 AUC after training: 0.5445134575569358
User 15634 does not improve AUC. Reverting changes.
Training on augumented user 19448 28/50 current_auc = 0.5445134575569358
User 19448 AUC after training: 0.5445134575569358
User 19448 does not improve AUC. Reverting changes.
Training on augumented user 64583 29/50 current_auc = 0.5445134575569358
User 64583 AUC after training: 0.5445134575569358
User 64583 does not improve AUC. Reverting changes.
Training on augumented user 66698 30/50 current_auc = 0.5445134575569358
User 66698 AUC after training: 0.5445134575569358
User 66698 does not improve AUC. Reverting changes.
Training on augumented user 118198 31/50 current_auc = 0.5445134575569358
User 118198 AUC after training: 0.5445134575569358
User 118198 does not improve AUC. Reverting changes.
Training on augumented user 17718 32/50 current_auc = 0.5445134575569358
User 17718 AUC after training: 0.5445134575569358
User 17718 does not improve AUC. Reverting changes.
Training on augumented user 15953 33/50 current_auc = 0.5445134575569358
User 15953 AUC after training: 0.5445134575569358
User 15953 does not improve AUC. Reverting changes.
Training on augumented user 80984 34/50 current_auc = 0.5445134575569358
User 80984 AUC after training: 0.5445134575569358
User 80984 does not improve AUC. Reverting changes.
Training on augumented user 45363 35/50 current_auc = 0.5445134575569358
User 45363 AUC after training: 0.5424430641821946
User 45363 does not improve AUC. Reverting changes.
Training on augumented user 137215 36/50 current_auc = 0.5445134575569358
User 137215 AUC after training: 0.5424430641821946
User 137215 does not improve AUC. Reverting changes.
Training on augumented user 68466 37/50 current_auc = 0.5445134575569358
User 68466 AUC after training: 0.5383022774327122
User 68466 does not improve AUC. Reverting changes.
Training on augumented user 111941 38/50 current_auc = 0.5445134575569358
User 111941 AUC after training: 0.5424430641821947
User 111941 does not improve AUC. Reverting changes.
Training on augumented user 48136 39/50 current_auc = 0.5445134575569358
User 48136 AUC after training: 0.5403726708074534
User 48136 does not improve AUC. Reverting changes.
Training on augumented user 18517 40/50 current_auc = 0.5445134575569358
User 18517 AUC after training: 0.5445134575569358
User 18517 does not improve AUC. Reverting changes.
Training on augumented user 15152 41/50 current_auc = 0.5445134575569358
User 15152 AUC after training: 0.5424430641821946
User 15152 does not improve AUC. Reverting changes.
Training on augumented user 29567 42/50 current_auc = 0.5445134575569358
User 29567 AUC after training: 0.5445134575569358
User 29567 does not improve AUC. Reverting changes.
Training on augumented user 82406 43/50 current_auc = 0.5445134575569358
User 82406 AUC after training: 0.5445134575569358
User 82406 does not improve AUC. Reverting changes.
Training on augumented user 44165 44/50 current_auc = 0.5445134575569358
User 44165 AUC after training: 0.5445134575569358
User 44165 does not improve AUC. Reverting changes.
Training on augumented user 62215 45/50 current_auc = 0.5445134575569358
User 62215 AUC after training: 0.5445134575569358
User 62215 does not improve AUC. Reverting changes.
Training on augumented user 83476 46/50 current_auc = 0.5445134575569358
User 83476 AUC after training: 0.5424430641821946
User 83476 does not improve AUC. Reverting changes.
Training on augumented user 57315 47/50 current_auc = 0.5445134575569358
User 57315 AUC after training: 0.5445134575569358
User 57315 does not improve AUC. Reverting changes.
Training on augumented user 71705 48/50 current_auc = 0.5445134575569358
User 71705 AUC after training: 0.5445134575569358
User 71705 does not improve AUC. Reverting changes.
Training on augumented user 37230 49/50 current_auc = 0.5445134575569358
User 37230 AUC after training: 0.5445134575569358
User 37230 does not improve AUC. Reverting changes.
[2024-12-02 19:55:35.126472] start test user 48335 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:35.608690] start test user 48335 250/568 recall augumented users by random, augumented_users = [97974, 123237, 73988, 8679, 137194, 90082, 91764, 92202, 65788, 82914, 107581, 97717, 38054, 43876, 44322, 104266, 43332, 59753, 15333, 7136, 111903, 33096, 5916, 134001, 61171, 56432, 130333, 53896, 111630, 63568, 41910, 22554, 76947, 124481, 91443, 69925, 134012, 127180, 17393, 132262, 1070, 12078, 45040, 38130, 20764, 44682, 137932, 119261, 29893, 45036]
[2024-12-02 19:55:35.624326] user = 48335 Cloud 250/568
[2024-12-02 19:55:35.634265] user = 48335 Local 250/568
[2024-12-02 19:55:35.699106] user = 48335 Local+ 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:38.203503] user = 48335 MPDA- 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7444444444444445
Training on augumented user 97974 0/50 current_auc = 0.7444444444444445
User 97974 AUC after training: 0.7444444444444445
User 97974 does not improve AUC. Reverting changes.
Training on augumented user 123237 1/50 current_auc = 0.7444444444444445
User 123237 AUC after training: 0.7444444444444445
User 123237 does not improve AUC. Reverting changes.
Training on augumented user 73988 2/50 current_auc = 0.7444444444444445
User 73988 AUC after training: 0.7444444444444445
User 73988 does not improve AUC. Reverting changes.
Training on augumented user 8679 3/50 current_auc = 0.7444444444444445
User 8679 AUC after training: 0.7444444444444445
User 8679 does not improve AUC. Reverting changes.
Training on augumented user 137194 4/50 current_auc = 0.7444444444444445
User 137194 AUC after training: 0.7444444444444445
User 137194 does not improve AUC. Reverting changes.
Training on augumented user 90082 5/50 current_auc = 0.7444444444444445
User 90082 AUC after training: 0.7444444444444445
User 90082 does not improve AUC. Reverting changes.
Training on augumented user 91764 6/50 current_auc = 0.7444444444444445
User 91764 AUC after training: 0.7444444444444445
User 91764 does not improve AUC. Reverting changes.
Training on augumented user 92202 7/50 current_auc = 0.7444444444444445
User 92202 AUC after training: 0.7444444444444445
User 92202 does not improve AUC. Reverting changes.
Training on augumented user 65788 8/50 current_auc = 0.7444444444444445
User 65788 AUC after training: 0.7444444444444445
User 65788 does not improve AUC. Reverting changes.
Training on augumented user 82914 9/50 current_auc = 0.7444444444444445
User 82914 AUC after training: 0.7444444444444445
User 82914 does not improve AUC. Reverting changes.
Training on augumented user 107581 10/50 current_auc = 0.7444444444444445
User 107581 AUC after training: 0.7444444444444445
User 107581 does not improve AUC. Reverting changes.
Training on augumented user 97717 11/50 current_auc = 0.7444444444444445
User 97717 AUC after training: 0.7444444444444445
User 97717 does not improve AUC. Reverting changes.
Training on augumented user 38054 12/50 current_auc = 0.7444444444444445
User 38054 AUC after training: 0.7444444444444445
User 38054 does not improve AUC. Reverting changes.
Training on augumented user 43876 13/50 current_auc = 0.7444444444444445
User 43876 AUC after training: 0.7444444444444445
User 43876 does not improve AUC. Reverting changes.
Training on augumented user 44322 14/50 current_auc = 0.7444444444444445
User 44322 AUC after training: 0.7444444444444445
User 44322 does not improve AUC. Reverting changes.
Training on augumented user 104266 15/50 current_auc = 0.7444444444444445
User 104266 AUC after training: 0.7444444444444445
User 104266 does not improve AUC. Reverting changes.
Training on augumented user 43332 16/50 current_auc = 0.7444444444444445
User 43332 AUC after training: 0.7444444444444445
User 43332 does not improve AUC. Reverting changes.
Training on augumented user 59753 17/50 current_auc = 0.7444444444444445
User 59753 AUC after training: 0.7444444444444445
User 59753 does not improve AUC. Reverting changes.
Training on augumented user 15333 18/50 current_auc = 0.7444444444444445
User 15333 AUC after training: 0.7444444444444445
User 15333 does not improve AUC. Reverting changes.
Training on augumented user 7136 19/50 current_auc = 0.7444444444444445
User 7136 AUC after training: 0.7444444444444445
User 7136 does not improve AUC. Reverting changes.
Training on augumented user 111903 20/50 current_auc = 0.7444444444444445
User 111903 AUC after training: 0.7444444444444445
User 111903 does not improve AUC. Reverting changes.
Training on augumented user 33096 21/50 current_auc = 0.7444444444444445
User 33096 AUC after training: 0.7444444444444445
User 33096 does not improve AUC. Reverting changes.
Training on augumented user 5916 22/50 current_auc = 0.7444444444444445
User 5916 AUC after training: 0.7444444444444445
User 5916 does not improve AUC. Reverting changes.
Training on augumented user 134001 23/50 current_auc = 0.7444444444444445
User 134001 AUC after training: 0.7444444444444445
User 134001 does not improve AUC. Reverting changes.
Training on augumented user 61171 24/50 current_auc = 0.7444444444444445
User 61171 AUC after training: 0.7444444444444445
User 61171 does not improve AUC. Reverting changes.
Training on augumented user 56432 25/50 current_auc = 0.7444444444444445
User 56432 AUC after training: 0.7444444444444445
User 56432 does not improve AUC. Reverting changes.
Training on augumented user 130333 26/50 current_auc = 0.7444444444444445
User 130333 AUC after training: 0.7444444444444445
User 130333 does not improve AUC. Reverting changes.
Training on augumented user 53896 27/50 current_auc = 0.7444444444444445
User 53896 AUC after training: 0.7444444444444445
User 53896 does not improve AUC. Reverting changes.
Training on augumented user 111630 28/50 current_auc = 0.7444444444444445
User 111630 AUC after training: 0.7444444444444445
User 111630 does not improve AUC. Reverting changes.
Training on augumented user 63568 29/50 current_auc = 0.7444444444444445
User 63568 AUC after training: 0.7444444444444445
User 63568 does not improve AUC. Reverting changes.
Training on augumented user 41910 30/50 current_auc = 0.7444444444444445
User 41910 AUC after training: 0.7444444444444445
User 41910 does not improve AUC. Reverting changes.
Training on augumented user 22554 31/50 current_auc = 0.7444444444444445
User 22554 AUC after training: 0.7444444444444445
User 22554 does not improve AUC. Reverting changes.
Training on augumented user 76947 32/50 current_auc = 0.7444444444444445
User 76947 AUC after training: 0.7444444444444445
User 76947 does not improve AUC. Reverting changes.
Training on augumented user 124481 33/50 current_auc = 0.7444444444444445
User 124481 AUC after training: 0.7444444444444445
User 124481 does not improve AUC. Reverting changes.
Training on augumented user 91443 34/50 current_auc = 0.7444444444444445
User 91443 AUC after training: 0.7444444444444445
User 91443 does not improve AUC. Reverting changes.
Training on augumented user 69925 35/50 current_auc = 0.7444444444444445
User 69925 AUC after training: 0.7444444444444445
User 69925 does not improve AUC. Reverting changes.
Training on augumented user 134012 36/50 current_auc = 0.7444444444444445
User 134012 AUC after training: 0.7444444444444445
User 134012 does not improve AUC. Reverting changes.
Training on augumented user 127180 37/50 current_auc = 0.7444444444444445
User 127180 AUC after training: 0.7444444444444445
User 127180 does not improve AUC. Reverting changes.
Training on augumented user 17393 38/50 current_auc = 0.7444444444444445
User 17393 AUC after training: 0.7444444444444445
User 17393 does not improve AUC. Reverting changes.
Training on augumented user 132262 39/50 current_auc = 0.7444444444444445
User 132262 AUC after training: 0.7444444444444445
User 132262 does not improve AUC. Reverting changes.
Training on augumented user 1070 40/50 current_auc = 0.7444444444444445
User 1070 AUC after training: 0.7444444444444445
User 1070 does not improve AUC. Reverting changes.
Training on augumented user 12078 41/50 current_auc = 0.7444444444444445
User 12078 AUC after training: 0.7444444444444445
User 12078 does not improve AUC. Reverting changes.
Training on augumented user 45040 42/50 current_auc = 0.7444444444444445
User 45040 AUC after training: 0.7444444444444445
User 45040 does not improve AUC. Reverting changes.
Training on augumented user 38130 43/50 current_auc = 0.7444444444444445
User 38130 AUC after training: 0.7444444444444445
User 38130 does not improve AUC. Reverting changes.
Training on augumented user 20764 44/50 current_auc = 0.7444444444444445
User 20764 AUC after training: 0.7444444444444445
User 20764 does not improve AUC. Reverting changes.
Training on augumented user 44682 45/50 current_auc = 0.7444444444444445
User 44682 AUC after training: 0.7444444444444445
User 44682 does not improve AUC. Reverting changes.
Training on augumented user 137932 46/50 current_auc = 0.7444444444444445
User 137932 AUC after training: 0.7444444444444445
User 137932 does not improve AUC. Reverting changes.
Training on augumented user 119261 47/50 current_auc = 0.7444444444444445
User 119261 AUC after training: 0.7444444444444445
User 119261 does not improve AUC. Reverting changes.
Training on augumented user 29893 48/50 current_auc = 0.7444444444444445
User 29893 AUC after training: 0.7444444444444445
User 29893 does not improve AUC. Reverting changes.
Training on augumented user 45036 49/50 current_auc = 0.7444444444444445
User 45036 AUC after training: 0.7444444444444445
User 45036 does not improve AUC. Reverting changes.
[2024-12-02 19:56:06.177853] start test user 48344 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:06.832609] start test user 48344 251/568 recall augumented users by random, augumented_users = [3128, 107790, 25283, 74074, 87326, 66028, 137242, 42271, 52772, 51821, 63483, 85963, 66579, 10811, 58936, 84187, 100759, 28547, 63531, 48045, 20963, 124856, 135824, 85364, 90225, 67131, 46660, 13329, 126166, 16498, 84611, 98996, 91340, 54981, 70121, 15239, 290, 125347, 114111, 121713, 134676, 21178, 100659, 50606, 85753, 1071, 87589, 21951, 10218, 31706]
[2024-12-02 19:56:06.922022] user = 48344 Cloud 251/568
[2024-12-02 19:56:06.940964] user = 48344 Local 251/568
[2024-12-02 19:56:07.130702] user = 48344 Local+ 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:10.046682] user = 48344 MPDA- 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.614889705882353
Training on augumented user 3128 0/50 current_auc = 0.614889705882353
User 3128 AUC after training: 0.6213235294117647
User 3128 improves AUC. Keeping the model.
Training on augumented user 107790 1/50 current_auc = 0.6213235294117647
User 107790 AUC after training: 0.6194852941176471
User 107790 does not improve AUC. Reverting changes.
Training on augumented user 25283 2/50 current_auc = 0.6213235294117647
User 25283 AUC after training: 0.6158088235294118
User 25283 does not improve AUC. Reverting changes.
Training on augumented user 74074 3/50 current_auc = 0.6213235294117647
User 74074 AUC after training: 0.6176470588235294
User 74074 does not improve AUC. Reverting changes.
Training on augumented user 87326 4/50 current_auc = 0.6213235294117647
User 87326 AUC after training: 0.6139705882352942
User 87326 does not improve AUC. Reverting changes.
Training on augumented user 66028 5/50 current_auc = 0.6213235294117647
User 66028 AUC after training: 0.6231617647058824
User 66028 improves AUC. Keeping the model.
Training on augumented user 137242 6/50 current_auc = 0.6231617647058824
User 137242 AUC after training: 0.6231617647058824
User 137242 does not improve AUC. Reverting changes.
Training on augumented user 42271 7/50 current_auc = 0.6231617647058824
User 42271 AUC after training: 0.6176470588235294
User 42271 does not improve AUC. Reverting changes.
Training on augumented user 52772 8/50 current_auc = 0.6231617647058824
User 52772 AUC after training: 0.6158088235294118
User 52772 does not improve AUC. Reverting changes.
Training on augumented user 51821 9/50 current_auc = 0.6231617647058824
User 51821 AUC after training: 0.6231617647058824
User 51821 does not improve AUC. Reverting changes.
Training on augumented user 63483 10/50 current_auc = 0.6231617647058824
User 63483 AUC after training: 0.625
User 63483 improves AUC. Keeping the model.
Training on augumented user 85963 11/50 current_auc = 0.625
User 85963 AUC after training: 0.6213235294117647
User 85963 does not improve AUC. Reverting changes.
Training on augumented user 66579 12/50 current_auc = 0.625
User 66579 AUC after training: 0.6213235294117647
User 66579 does not improve AUC. Reverting changes.
Training on augumented user 10811 13/50 current_auc = 0.625
User 10811 AUC after training: 0.6213235294117647
User 10811 does not improve AUC. Reverting changes.
Training on augumented user 58936 14/50 current_auc = 0.625
User 58936 AUC after training: 0.625
User 58936 does not improve AUC. Reverting changes.
Training on augumented user 84187 15/50 current_auc = 0.625
User 84187 AUC after training: 0.6231617647058824
User 84187 does not improve AUC. Reverting changes.
Training on augumented user 100759 16/50 current_auc = 0.625
User 100759 AUC after training: 0.6167279411764706
User 100759 does not improve AUC. Reverting changes.
Training on augumented user 28547 17/50 current_auc = 0.625
User 28547 AUC after training: 0.6231617647058824
User 28547 does not improve AUC. Reverting changes.
Training on augumented user 63531 18/50 current_auc = 0.625
User 63531 AUC after training: 0.6213235294117647
User 63531 does not improve AUC. Reverting changes.
Training on augumented user 48045 19/50 current_auc = 0.625
User 48045 AUC after training: 0.6231617647058824
User 48045 does not improve AUC. Reverting changes.
Training on augumented user 20963 20/50 current_auc = 0.625
User 20963 AUC after training: 0.6231617647058824
User 20963 does not improve AUC. Reverting changes.
Training on augumented user 124856 21/50 current_auc = 0.625
User 124856 AUC after training: 0.6194852941176471
User 124856 does not improve AUC. Reverting changes.
Training on augumented user 135824 22/50 current_auc = 0.625
User 135824 AUC after training: 0.6213235294117647
User 135824 does not improve AUC. Reverting changes.
Training on augumented user 85364 23/50 current_auc = 0.625
User 85364 AUC after training: 0.6268382352941176
User 85364 improves AUC. Keeping the model.
Training on augumented user 90225 24/50 current_auc = 0.6268382352941176
User 90225 AUC after training: 0.6185661764705883
User 90225 does not improve AUC. Reverting changes.
Training on augumented user 67131 25/50 current_auc = 0.6268382352941176
User 67131 AUC after training: 0.6213235294117647
User 67131 does not improve AUC. Reverting changes.
Training on augumented user 46660 26/50 current_auc = 0.6268382352941176
User 46660 AUC after training: 0.6213235294117647
User 46660 does not improve AUC. Reverting changes.
Training on augumented user 13329 27/50 current_auc = 0.6268382352941176
User 13329 AUC after training: 0.625
User 13329 does not improve AUC. Reverting changes.
Training on augumented user 126166 28/50 current_auc = 0.6268382352941176
User 126166 AUC after training: 0.6268382352941178
User 126166 improves AUC. Keeping the model.
Training on augumented user 16498 29/50 current_auc = 0.6268382352941178
User 16498 AUC after training: 0.6231617647058824
User 16498 does not improve AUC. Reverting changes.
Training on augumented user 84611 30/50 current_auc = 0.6268382352941178
User 84611 AUC after training: 0.620404411764706
User 84611 does not improve AUC. Reverting changes.
Training on augumented user 98996 31/50 current_auc = 0.6268382352941178
User 98996 AUC after training: 0.6286764705882353
User 98996 improves AUC. Keeping the model.
Training on augumented user 91340 32/50 current_auc = 0.6286764705882353
User 91340 AUC after training: 0.625
User 91340 does not improve AUC. Reverting changes.
Training on augumented user 54981 33/50 current_auc = 0.6286764705882353
User 54981 AUC after training: 0.6286764705882353
User 54981 does not improve AUC. Reverting changes.
Training on augumented user 70121 34/50 current_auc = 0.6286764705882353
User 70121 AUC after training: 0.6240808823529412
User 70121 does not improve AUC. Reverting changes.
Training on augumented user 15239 35/50 current_auc = 0.6286764705882353
User 15239 AUC after training: 0.6286764705882353
User 15239 does not improve AUC. Reverting changes.
Training on augumented user 290 36/50 current_auc = 0.6286764705882353
User 290 AUC after training: 0.625
User 290 does not improve AUC. Reverting changes.
Training on augumented user 125347 37/50 current_auc = 0.6286764705882353
User 125347 AUC after training: 0.6268382352941176
User 125347 does not improve AUC. Reverting changes.
Training on augumented user 114111 38/50 current_auc = 0.6286764705882353
User 114111 AUC after training: 0.6231617647058824
User 114111 does not improve AUC. Reverting changes.
Training on augumented user 121713 39/50 current_auc = 0.6286764705882353
User 121713 AUC after training: 0.6213235294117647
User 121713 does not improve AUC. Reverting changes.
Training on augumented user 134676 40/50 current_auc = 0.6286764705882353
User 134676 AUC after training: 0.6213235294117647
User 134676 does not improve AUC. Reverting changes.
Training on augumented user 21178 41/50 current_auc = 0.6286764705882353
User 21178 AUC after training: 0.6222426470588236
User 21178 does not improve AUC. Reverting changes.
Training on augumented user 100659 42/50 current_auc = 0.6286764705882353
User 100659 AUC after training: 0.6231617647058824
User 100659 does not improve AUC. Reverting changes.
Training on augumented user 50606 43/50 current_auc = 0.6286764705882353
User 50606 AUC after training: 0.6213235294117647
User 50606 does not improve AUC. Reverting changes.
Training on augumented user 85753 44/50 current_auc = 0.6286764705882353
User 85753 AUC after training: 0.6286764705882353
User 85753 does not improve AUC. Reverting changes.
Training on augumented user 1071 45/50 current_auc = 0.6286764705882353
User 1071 AUC after training: 0.6268382352941176
User 1071 does not improve AUC. Reverting changes.
Training on augumented user 87589 46/50 current_auc = 0.6286764705882353
User 87589 AUC after training: 0.6204044117647058
User 87589 does not improve AUC. Reverting changes.
Training on augumented user 21951 47/50 current_auc = 0.6286764705882353
User 21951 AUC after training: 0.6286764705882353
User 21951 does not improve AUC. Reverting changes.
Training on augumented user 10218 48/50 current_auc = 0.6286764705882353
User 10218 AUC after training: 0.625
User 10218 does not improve AUC. Reverting changes.
Training on augumented user 31706 49/50 current_auc = 0.6286764705882353
User 31706 AUC after training: 0.6231617647058824
User 31706 does not improve AUC. Reverting changes.
[2024-12-02 19:56:42.900647] start test user 48355 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:43.435207] start test user 48355 252/568 recall augumented users by random, augumented_users = [92064, 4272, 114973, 44201, 116860, 118424, 23948, 121564, 41155, 42275, 23599, 40094, 30438, 4530, 92481, 45818, 53761, 7479, 25598, 41070, 6785, 28555, 42795, 105173, 77398, 42683, 33851, 57305, 12851, 77946, 93607, 23790, 29824, 109205, 32122, 83405, 47742, 42693, 37696, 13414, 116091, 34175, 72764, 18596, 80566, 127521, 127601, 20355, 15478, 117068]
[2024-12-02 19:56:43.470900] user = 48355 Cloud 252/568
[2024-12-02 19:56:43.485204] user = 48355 Local 252/568
[2024-12-02 19:56:43.624044] user = 48355 Local+ 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:46.478222] user = 48355 MPDA- 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6083333333333334
Training on augumented user 92064 0/50 current_auc = 0.6083333333333334
User 92064 AUC after training: 0.6083333333333334
User 92064 does not improve AUC. Reverting changes.
Training on augumented user 4272 1/50 current_auc = 0.6083333333333334
User 4272 AUC after training: 0.6041666666666667
User 4272 does not improve AUC. Reverting changes.
Training on augumented user 114973 2/50 current_auc = 0.6083333333333334
User 114973 AUC after training: 0.6083333333333334
User 114973 does not improve AUC. Reverting changes.
Training on augumented user 44201 3/50 current_auc = 0.6083333333333334
User 44201 AUC after training: 0.6083333333333334
User 44201 does not improve AUC. Reverting changes.
Training on augumented user 116860 4/50 current_auc = 0.6083333333333334
User 116860 AUC after training: 0.6083333333333334
User 116860 does not improve AUC. Reverting changes.
Training on augumented user 118424 5/50 current_auc = 0.6083333333333334
User 118424 AUC after training: 0.6083333333333334
User 118424 does not improve AUC. Reverting changes.
Training on augumented user 23948 6/50 current_auc = 0.6083333333333334
User 23948 AUC after training: 0.6083333333333334
User 23948 does not improve AUC. Reverting changes.
Training on augumented user 121564 7/50 current_auc = 0.6083333333333334
User 121564 AUC after training: 0.6125
User 121564 improves AUC. Keeping the model.
Training on augumented user 41155 8/50 current_auc = 0.6125
User 41155 AUC after training: 0.6083333333333334
User 41155 does not improve AUC. Reverting changes.
Training on augumented user 42275 9/50 current_auc = 0.6125
User 42275 AUC after training: 0.6125
User 42275 does not improve AUC. Reverting changes.
Training on augumented user 23599 10/50 current_auc = 0.6125
User 23599 AUC after training: 0.6083333333333334
User 23599 does not improve AUC. Reverting changes.
Training on augumented user 40094 11/50 current_auc = 0.6125
User 40094 AUC after training: 0.6125
User 40094 does not improve AUC. Reverting changes.
Training on augumented user 30438 12/50 current_auc = 0.6125
User 30438 AUC after training: 0.6083333333333334
User 30438 does not improve AUC. Reverting changes.
Training on augumented user 4530 13/50 current_auc = 0.6125
User 4530 AUC after training: 0.6125
User 4530 does not improve AUC. Reverting changes.
Training on augumented user 92481 14/50 current_auc = 0.6125
User 92481 AUC after training: 0.6125
User 92481 does not improve AUC. Reverting changes.
Training on augumented user 45818 15/50 current_auc = 0.6125
User 45818 AUC after training: 0.6083333333333334
User 45818 does not improve AUC. Reverting changes.
Training on augumented user 53761 16/50 current_auc = 0.6125
User 53761 AUC after training: 0.6125
User 53761 does not improve AUC. Reverting changes.
Training on augumented user 7479 17/50 current_auc = 0.6125
User 7479 AUC after training: 0.6125
User 7479 does not improve AUC. Reverting changes.
Training on augumented user 25598 18/50 current_auc = 0.6125
User 25598 AUC after training: 0.6125
User 25598 does not improve AUC. Reverting changes.
Training on augumented user 41070 19/50 current_auc = 0.6125
User 41070 AUC after training: 0.6083333333333334
User 41070 does not improve AUC. Reverting changes.
Training on augumented user 6785 20/50 current_auc = 0.6125
User 6785 AUC after training: 0.6083333333333334
User 6785 does not improve AUC. Reverting changes.
Training on augumented user 28555 21/50 current_auc = 0.6125
User 28555 AUC after training: 0.6083333333333334
User 28555 does not improve AUC. Reverting changes.
Training on augumented user 42795 22/50 current_auc = 0.6125
User 42795 AUC after training: 0.6041666666666667
User 42795 does not improve AUC. Reverting changes.
Training on augumented user 105173 23/50 current_auc = 0.6125
User 105173 AUC after training: 0.6125
User 105173 does not improve AUC. Reverting changes.
Training on augumented user 77398 24/50 current_auc = 0.6125
User 77398 AUC after training: 0.6125
User 77398 does not improve AUC. Reverting changes.
Training on augumented user 42683 25/50 current_auc = 0.6125
User 42683 AUC after training: 0.6125
User 42683 does not improve AUC. Reverting changes.
Training on augumented user 33851 26/50 current_auc = 0.6125
User 33851 AUC after training: 0.6125
User 33851 does not improve AUC. Reverting changes.
Training on augumented user 57305 27/50 current_auc = 0.6125
User 57305 AUC after training: 0.6083333333333334
User 57305 does not improve AUC. Reverting changes.
Training on augumented user 12851 28/50 current_auc = 0.6125
User 12851 AUC after training: 0.6125
User 12851 does not improve AUC. Reverting changes.
Training on augumented user 77946 29/50 current_auc = 0.6125
User 77946 AUC after training: 0.6125
User 77946 does not improve AUC. Reverting changes.
Training on augumented user 93607 30/50 current_auc = 0.6125
User 93607 AUC after training: 0.6125
User 93607 does not improve AUC. Reverting changes.
Training on augumented user 23790 31/50 current_auc = 0.6125
User 23790 AUC after training: 0.6041666666666667
User 23790 does not improve AUC. Reverting changes.
Training on augumented user 29824 32/50 current_auc = 0.6125
User 29824 AUC after training: 0.6041666666666667
User 29824 does not improve AUC. Reverting changes.
Training on augumented user 109205 33/50 current_auc = 0.6125
User 109205 AUC after training: 0.6125
User 109205 does not improve AUC. Reverting changes.
Training on augumented user 32122 34/50 current_auc = 0.6125
User 32122 AUC after training: 0.6125
User 32122 does not improve AUC. Reverting changes.
Training on augumented user 83405 35/50 current_auc = 0.6125
User 83405 AUC after training: 0.6125
User 83405 does not improve AUC. Reverting changes.
Training on augumented user 47742 36/50 current_auc = 0.6125
User 47742 AUC after training: 0.6125
User 47742 does not improve AUC. Reverting changes.
Training on augumented user 42693 37/50 current_auc = 0.6125
User 42693 AUC after training: 0.6083333333333334
User 42693 does not improve AUC. Reverting changes.
Training on augumented user 37696 38/50 current_auc = 0.6125
User 37696 AUC after training: 0.6125
User 37696 does not improve AUC. Reverting changes.
Training on augumented user 13414 39/50 current_auc = 0.6125
User 13414 AUC after training: 0.6125
User 13414 does not improve AUC. Reverting changes.
Training on augumented user 116091 40/50 current_auc = 0.6125
User 116091 AUC after training: 0.6125
User 116091 does not improve AUC. Reverting changes.
Training on augumented user 34175 41/50 current_auc = 0.6125
User 34175 AUC after training: 0.6083333333333334
User 34175 does not improve AUC. Reverting changes.
Training on augumented user 72764 42/50 current_auc = 0.6125
User 72764 AUC after training: 0.6125
User 72764 does not improve AUC. Reverting changes.
Training on augumented user 18596 43/50 current_auc = 0.6125
User 18596 AUC after training: 0.6125
User 18596 does not improve AUC. Reverting changes.
Training on augumented user 80566 44/50 current_auc = 0.6125
User 80566 AUC after training: 0.6083333333333334
User 80566 does not improve AUC. Reverting changes.
Training on augumented user 127521 45/50 current_auc = 0.6125
User 127521 AUC after training: 0.6125
User 127521 does not improve AUC. Reverting changes.
Training on augumented user 127601 46/50 current_auc = 0.6125
User 127601 AUC after training: 0.6083333333333334
User 127601 does not improve AUC. Reverting changes.
Training on augumented user 20355 47/50 current_auc = 0.6125
User 20355 AUC after training: 0.6125
User 20355 does not improve AUC. Reverting changes.
Training on augumented user 15478 48/50 current_auc = 0.6125
User 15478 AUC after training: 0.6083333333333334
User 15478 does not improve AUC. Reverting changes.
Training on augumented user 117068 49/50 current_auc = 0.6125
User 117068 AUC after training: 0.6125
User 117068 does not improve AUC. Reverting changes.
[2024-12-02 19:57:14.935222] start test user 48382 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:15.369574] start test user 48382 253/568 recall augumented users by random, augumented_users = [445, 33428, 107525, 39932, 138046, 32278, 78150, 60108, 21218, 16492, 45258, 7069, 2819, 43698, 24944, 65542, 22782, 127348, 25599, 124362, 43478, 90356, 3101, 10381, 48686, 25312, 14926, 37154, 102754, 83333, 18986, 136981, 30772, 53935, 136779, 111337, 33864, 105986, 58183, 85353, 72862, 107940, 100000, 73135, 83410, 130954, 15709, 23662, 49176, 106887]
[2024-12-02 19:57:15.385834] user = 48382 Cloud 253/568
[2024-12-02 19:57:15.396351] user = 48382 Local 253/568
[2024-12-02 19:57:15.495372] user = 48382 Local+ 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:17.513993] user = 48382 MPDA- 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5608695652173913
Training on augumented user 445 0/50 current_auc = 0.5608695652173913
User 445 AUC after training: 0.5652173913043478
User 445 improves AUC. Keeping the model.
Training on augumented user 33428 1/50 current_auc = 0.5652173913043478
User 33428 AUC after training: 0.5608695652173913
User 33428 does not improve AUC. Reverting changes.
Training on augumented user 107525 2/50 current_auc = 0.5652173913043478
User 107525 AUC after training: 0.5826086956521739
User 107525 improves AUC. Keeping the model.
Training on augumented user 39932 3/50 current_auc = 0.5826086956521739
User 39932 AUC after training: 0.5739130434782609
User 39932 does not improve AUC. Reverting changes.
Training on augumented user 138046 4/50 current_auc = 0.5826086956521739
User 138046 AUC after training: 0.5739130434782609
User 138046 does not improve AUC. Reverting changes.
Training on augumented user 32278 5/50 current_auc = 0.5826086956521739
User 32278 AUC after training: 0.5739130434782609
User 32278 does not improve AUC. Reverting changes.
Training on augumented user 78150 6/50 current_auc = 0.5826086956521739
User 78150 AUC after training: 0.5782608695652174
User 78150 does not improve AUC. Reverting changes.
Training on augumented user 60108 7/50 current_auc = 0.5826086956521739
User 60108 AUC after training: 0.5826086956521739
User 60108 does not improve AUC. Reverting changes.
Training on augumented user 21218 8/50 current_auc = 0.5826086956521739
User 21218 AUC after training: 0.5782608695652174
User 21218 does not improve AUC. Reverting changes.
Training on augumented user 16492 9/50 current_auc = 0.5826086956521739
User 16492 AUC after training: 0.5826086956521739
User 16492 does not improve AUC. Reverting changes.
Training on augumented user 45258 10/50 current_auc = 0.5826086956521739
User 45258 AUC after training: 0.5826086956521739
User 45258 does not improve AUC. Reverting changes.
Training on augumented user 7069 11/50 current_auc = 0.5826086956521739
User 7069 AUC after training: 0.5826086956521739
User 7069 does not improve AUC. Reverting changes.
Training on augumented user 2819 12/50 current_auc = 0.5826086956521739
User 2819 AUC after training: 0.5826086956521739
User 2819 does not improve AUC. Reverting changes.
Training on augumented user 43698 13/50 current_auc = 0.5826086956521739
User 43698 AUC after training: 0.5826086956521739
User 43698 does not improve AUC. Reverting changes.
Training on augumented user 24944 14/50 current_auc = 0.5826086956521739
User 24944 AUC after training: 0.5782608695652174
User 24944 does not improve AUC. Reverting changes.
Training on augumented user 65542 15/50 current_auc = 0.5826086956521739
User 65542 AUC after training: 0.5521739130434782
User 65542 does not improve AUC. Reverting changes.
Training on augumented user 22782 16/50 current_auc = 0.5826086956521739
User 22782 AUC after training: 0.5782608695652174
User 22782 does not improve AUC. Reverting changes.
Training on augumented user 127348 17/50 current_auc = 0.5826086956521739
User 127348 AUC after training: 0.5739130434782609
User 127348 does not improve AUC. Reverting changes.
Training on augumented user 25599 18/50 current_auc = 0.5826086956521739
User 25599 AUC after training: 0.5869565217391304
User 25599 improves AUC. Keeping the model.
Training on augumented user 124362 19/50 current_auc = 0.5869565217391304
User 124362 AUC after training: 0.5869565217391304
User 124362 does not improve AUC. Reverting changes.
Training on augumented user 43478 20/50 current_auc = 0.5869565217391304
User 43478 AUC after training: 0.5782608695652174
User 43478 does not improve AUC. Reverting changes.
Training on augumented user 90356 21/50 current_auc = 0.5869565217391304
User 90356 AUC after training: 0.5869565217391304
User 90356 does not improve AUC. Reverting changes.
Training on augumented user 3101 22/50 current_auc = 0.5869565217391304
User 3101 AUC after training: 0.5782608695652174
User 3101 does not improve AUC. Reverting changes.
Training on augumented user 10381 23/50 current_auc = 0.5869565217391304
User 10381 AUC after training: 0.5956521739130435
User 10381 improves AUC. Keeping the model.
Training on augumented user 48686 24/50 current_auc = 0.5956521739130435
User 48686 AUC after training: 0.5869565217391304
User 48686 does not improve AUC. Reverting changes.
Training on augumented user 25312 25/50 current_auc = 0.5956521739130435
User 25312 AUC after training: 0.5956521739130435
User 25312 does not improve AUC. Reverting changes.
Training on augumented user 14926 26/50 current_auc = 0.5956521739130435
User 14926 AUC after training: 0.5956521739130435
User 14926 does not improve AUC. Reverting changes.
Training on augumented user 37154 27/50 current_auc = 0.5956521739130435
User 37154 AUC after training: 0.5956521739130435
User 37154 does not improve AUC. Reverting changes.
Training on augumented user 102754 28/50 current_auc = 0.5956521739130435
User 102754 AUC after training: 0.5956521739130435
User 102754 does not improve AUC. Reverting changes.
Training on augumented user 83333 29/50 current_auc = 0.5956521739130435
User 83333 AUC after training: 0.5826086956521739
User 83333 does not improve AUC. Reverting changes.
Training on augumented user 18986 30/50 current_auc = 0.5956521739130435
User 18986 AUC after training: 0.5956521739130435
User 18986 does not improve AUC. Reverting changes.
Training on augumented user 136981 31/50 current_auc = 0.5956521739130435
User 136981 AUC after training: 0.5956521739130435
User 136981 does not improve AUC. Reverting changes.
Training on augumented user 30772 32/50 current_auc = 0.5956521739130435
User 30772 AUC after training: 0.5956521739130435
User 30772 does not improve AUC. Reverting changes.
Training on augumented user 53935 33/50 current_auc = 0.5956521739130435
User 53935 AUC after training: 0.5956521739130435
User 53935 does not improve AUC. Reverting changes.
Training on augumented user 136779 34/50 current_auc = 0.5956521739130435
User 136779 AUC after training: 0.5956521739130435
User 136779 does not improve AUC. Reverting changes.
Training on augumented user 111337 35/50 current_auc = 0.5956521739130435
User 111337 AUC after training: 0.5956521739130435
User 111337 does not improve AUC. Reverting changes.
Training on augumented user 33864 36/50 current_auc = 0.5956521739130435
User 33864 AUC after training: 0.5956521739130435
User 33864 does not improve AUC. Reverting changes.
Training on augumented user 105986 37/50 current_auc = 0.5956521739130435
User 105986 AUC after training: 0.5956521739130435
User 105986 does not improve AUC. Reverting changes.
Training on augumented user 58183 38/50 current_auc = 0.5956521739130435
User 58183 AUC after training: 0.5956521739130435
User 58183 does not improve AUC. Reverting changes.
Training on augumented user 85353 39/50 current_auc = 0.5956521739130435
User 85353 AUC after training: 0.5956521739130435
User 85353 does not improve AUC. Reverting changes.
Training on augumented user 72862 40/50 current_auc = 0.5956521739130435
User 72862 AUC after training: 0.5956521739130435
User 72862 does not improve AUC. Reverting changes.
Training on augumented user 107940 41/50 current_auc = 0.5956521739130435
User 107940 AUC after training: 0.5956521739130435
User 107940 does not improve AUC. Reverting changes.
Training on augumented user 100000 42/50 current_auc = 0.5956521739130435
User 100000 AUC after training: 0.591304347826087
User 100000 does not improve AUC. Reverting changes.
Training on augumented user 73135 43/50 current_auc = 0.5956521739130435
User 73135 AUC after training: 0.591304347826087
User 73135 does not improve AUC. Reverting changes.
Training on augumented user 83410 44/50 current_auc = 0.5956521739130435
User 83410 AUC after training: 0.5956521739130435
User 83410 does not improve AUC. Reverting changes.
Training on augumented user 130954 45/50 current_auc = 0.5956521739130435
User 130954 AUC after training: 0.5956521739130435
User 130954 does not improve AUC. Reverting changes.
Training on augumented user 15709 46/50 current_auc = 0.5956521739130435
User 15709 AUC after training: 0.5782608695652174
User 15709 does not improve AUC. Reverting changes.
Training on augumented user 23662 47/50 current_auc = 0.5956521739130435
User 23662 AUC after training: 0.5956521739130435
User 23662 does not improve AUC. Reverting changes.
Training on augumented user 49176 48/50 current_auc = 0.5956521739130435
User 49176 AUC after training: 0.5956521739130435
User 49176 does not improve AUC. Reverting changes.
Training on augumented user 106887 49/50 current_auc = 0.5956521739130435
User 106887 AUC after training: 0.5956521739130435
User 106887 does not improve AUC. Reverting changes.
[2024-12-02 19:57:47.440756] start test user 48392 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:47.982193] start test user 48392 254/568 recall augumented users by random, augumented_users = [89034, 27033, 2483, 31687, 80146, 99630, 11630, 126302, 1435, 81866, 59463, 125960, 129343, 91329, 73655, 99712, 31544, 21416, 109249, 117331, 61006, 72363, 29612, 29053, 108433, 7833, 90052, 75875, 2050, 47586, 21443, 33873, 102430, 123726, 64707, 91561, 89532, 57380, 22620, 42375, 35235, 82775, 96457, 59610, 106491, 41543, 22184, 100131, 110199, 134797]
[2024-12-02 19:57:47.998933] user = 48392 Cloud 254/568
[2024-12-02 19:57:48.009061] user = 48392 Local 254/568
[2024-12-02 19:57:48.216765] user = 48392 Local+ 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:51.248167] user = 48392 MPDA- 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8571428571428571
Training on augumented user 89034 0/50 current_auc = 0.8571428571428571
User 89034 AUC after training: 0.8571428571428571
User 89034 does not improve AUC. Reverting changes.
Training on augumented user 27033 1/50 current_auc = 0.8571428571428571
User 27033 AUC after training: 0.8571428571428571
User 27033 does not improve AUC. Reverting changes.
Training on augumented user 2483 2/50 current_auc = 0.8571428571428571
User 2483 AUC after training: 0.8571428571428571
User 2483 does not improve AUC. Reverting changes.
Training on augumented user 31687 3/50 current_auc = 0.8571428571428571
User 31687 AUC after training: 0.8571428571428571
User 31687 does not improve AUC. Reverting changes.
Training on augumented user 80146 4/50 current_auc = 0.8571428571428571
User 80146 AUC after training: 0.8571428571428571
User 80146 does not improve AUC. Reverting changes.
Training on augumented user 99630 5/50 current_auc = 0.8571428571428571
User 99630 AUC after training: 0.8571428571428571
User 99630 does not improve AUC. Reverting changes.
Training on augumented user 11630 6/50 current_auc = 0.8571428571428571
User 11630 AUC after training: 0.8571428571428571
User 11630 does not improve AUC. Reverting changes.
Training on augumented user 126302 7/50 current_auc = 0.8571428571428571
User 126302 AUC after training: 0.8571428571428571
User 126302 does not improve AUC. Reverting changes.
Training on augumented user 1435 8/50 current_auc = 0.8571428571428571
User 1435 AUC after training: 0.8571428571428571
User 1435 does not improve AUC. Reverting changes.
Training on augumented user 81866 9/50 current_auc = 0.8571428571428571
User 81866 AUC after training: 0.8571428571428571
User 81866 does not improve AUC. Reverting changes.
Training on augumented user 59463 10/50 current_auc = 0.8571428571428571
User 59463 AUC after training: 0.8571428571428571
User 59463 does not improve AUC. Reverting changes.
Training on augumented user 125960 11/50 current_auc = 0.8571428571428571
User 125960 AUC after training: 0.8571428571428571
User 125960 does not improve AUC. Reverting changes.
Training on augumented user 129343 12/50 current_auc = 0.8571428571428571
User 129343 AUC after training: 0.8571428571428571
User 129343 does not improve AUC. Reverting changes.
Training on augumented user 91329 13/50 current_auc = 0.8571428571428571
User 91329 AUC after training: 0.8511904761904762
User 91329 does not improve AUC. Reverting changes.
Training on augumented user 73655 14/50 current_auc = 0.8571428571428571
User 73655 AUC after training: 0.8571428571428571
User 73655 does not improve AUC. Reverting changes.
Training on augumented user 99712 15/50 current_auc = 0.8571428571428571
User 99712 AUC after training: 0.8571428571428571
User 99712 does not improve AUC. Reverting changes.
Training on augumented user 31544 16/50 current_auc = 0.8571428571428571
User 31544 AUC after training: 0.8571428571428571
User 31544 does not improve AUC. Reverting changes.
Training on augumented user 21416 17/50 current_auc = 0.8571428571428571
User 21416 AUC after training: 0.8571428571428571
User 21416 does not improve AUC. Reverting changes.
Training on augumented user 109249 18/50 current_auc = 0.8571428571428571
User 109249 AUC after training: 0.8571428571428571
User 109249 does not improve AUC. Reverting changes.
Training on augumented user 117331 19/50 current_auc = 0.8571428571428571
User 117331 AUC after training: 0.8571428571428571
User 117331 does not improve AUC. Reverting changes.
Training on augumented user 61006 20/50 current_auc = 0.8571428571428571
User 61006 AUC after training: 0.8571428571428571
User 61006 does not improve AUC. Reverting changes.
Training on augumented user 72363 21/50 current_auc = 0.8571428571428571
User 72363 AUC after training: 0.8571428571428571
User 72363 does not improve AUC. Reverting changes.
Training on augumented user 29612 22/50 current_auc = 0.8571428571428571
User 29612 AUC after training: 0.8511904761904763
User 29612 does not improve AUC. Reverting changes.
Training on augumented user 29053 23/50 current_auc = 0.8571428571428571
User 29053 AUC after training: 0.8571428571428571
User 29053 does not improve AUC. Reverting changes.
Training on augumented user 108433 24/50 current_auc = 0.8571428571428571
User 108433 AUC after training: 0.8571428571428571
User 108433 does not improve AUC. Reverting changes.
Training on augumented user 7833 25/50 current_auc = 0.8571428571428571
User 7833 AUC after training: 0.8571428571428571
User 7833 does not improve AUC. Reverting changes.
Training on augumented user 90052 26/50 current_auc = 0.8571428571428571
User 90052 AUC after training: 0.8511904761904762
User 90052 does not improve AUC. Reverting changes.
Training on augumented user 75875 27/50 current_auc = 0.8571428571428571
User 75875 AUC after training: 0.8571428571428571
User 75875 does not improve AUC. Reverting changes.
Training on augumented user 2050 28/50 current_auc = 0.8571428571428571
User 2050 AUC after training: 0.8571428571428571
User 2050 does not improve AUC. Reverting changes.
Training on augumented user 47586 29/50 current_auc = 0.8571428571428571
User 47586 AUC after training: 0.8571428571428571
User 47586 does not improve AUC. Reverting changes.
Training on augumented user 21443 30/50 current_auc = 0.8571428571428571
User 21443 AUC after training: 0.8571428571428571
User 21443 does not improve AUC. Reverting changes.
Training on augumented user 33873 31/50 current_auc = 0.8571428571428571
User 33873 AUC after training: 0.8571428571428571
User 33873 does not improve AUC. Reverting changes.
Training on augumented user 102430 32/50 current_auc = 0.8571428571428571
User 102430 AUC after training: 0.8571428571428571
User 102430 does not improve AUC. Reverting changes.
Training on augumented user 123726 33/50 current_auc = 0.8571428571428571
User 123726 AUC after training: 0.8571428571428571
User 123726 does not improve AUC. Reverting changes.
Training on augumented user 64707 34/50 current_auc = 0.8571428571428571
User 64707 AUC after training: 0.8392857142857142
User 64707 does not improve AUC. Reverting changes.
Training on augumented user 91561 35/50 current_auc = 0.8571428571428571
User 91561 AUC after training: 0.8571428571428571
User 91561 does not improve AUC. Reverting changes.
Training on augumented user 89532 36/50 current_auc = 0.8571428571428571
User 89532 AUC after training: 0.8571428571428571
User 89532 does not improve AUC. Reverting changes.
Training on augumented user 57380 37/50 current_auc = 0.8571428571428571
User 57380 AUC after training: 0.8511904761904762
User 57380 does not improve AUC. Reverting changes.
Training on augumented user 22620 38/50 current_auc = 0.8571428571428571
User 22620 AUC after training: 0.8571428571428571
User 22620 does not improve AUC. Reverting changes.
Training on augumented user 42375 39/50 current_auc = 0.8571428571428571
User 42375 AUC after training: 0.8571428571428571
User 42375 does not improve AUC. Reverting changes.
Training on augumented user 35235 40/50 current_auc = 0.8571428571428571
User 35235 AUC after training: 0.8571428571428571
User 35235 does not improve AUC. Reverting changes.
Training on augumented user 82775 41/50 current_auc = 0.8571428571428571
User 82775 AUC after training: 0.8571428571428571
User 82775 does not improve AUC. Reverting changes.
Training on augumented user 96457 42/50 current_auc = 0.8571428571428571
User 96457 AUC after training: 0.8571428571428571
User 96457 does not improve AUC. Reverting changes.
Training on augumented user 59610 43/50 current_auc = 0.8571428571428571
User 59610 AUC after training: 0.8571428571428571
User 59610 does not improve AUC. Reverting changes.
Training on augumented user 106491 44/50 current_auc = 0.8571428571428571
User 106491 AUC after training: 0.8571428571428571
User 106491 does not improve AUC. Reverting changes.
Training on augumented user 41543 45/50 current_auc = 0.8571428571428571
User 41543 AUC after training: 0.8571428571428571
User 41543 does not improve AUC. Reverting changes.
Training on augumented user 22184 46/50 current_auc = 0.8571428571428571
User 22184 AUC after training: 0.8571428571428571
User 22184 does not improve AUC. Reverting changes.
Training on augumented user 100131 47/50 current_auc = 0.8571428571428571
User 100131 AUC after training: 0.8571428571428571
User 100131 does not improve AUC. Reverting changes.
Training on augumented user 110199 48/50 current_auc = 0.8571428571428571
User 110199 AUC after training: 0.8571428571428571
User 110199 does not improve AUC. Reverting changes.
Training on augumented user 134797 49/50 current_auc = 0.8571428571428571
User 134797 AUC after training: 0.8511904761904762
User 134797 does not improve AUC. Reverting changes.
[2024-12-02 19:58:18.239771] start test user 48405 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:19.019719] start test user 48405 255/568 recall augumented users by random, augumented_users = [34920, 111778, 54952, 90307, 16563, 81916, 20999, 18966, 12832, 87930, 22512, 68073, 43575, 114938, 44641, 26124, 11993, 106352, 82645, 4599, 120415, 59790, 118436, 26343, 105404, 64405, 51636, 136807, 83823, 107923, 131362, 35435, 137995, 128880, 127403, 78892, 40058, 26253, 46347, 2821, 29970, 103818, 52262, 36851, 1889, 75818, 108361, 22696, 10580, 134317]
[2024-12-02 19:58:19.060408] user = 48405 Cloud 255/568
[2024-12-02 19:58:19.114354] user = 48405 Local 255/568
[2024-12-02 19:58:19.413665] user = 48405 Local+ 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:22.282448] user = 48405 MPDA- 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8581521739130435
Training on augumented user 34920 0/50 current_auc = 0.8581521739130435
User 34920 AUC after training: 0.8581521739130435
User 34920 does not improve AUC. Reverting changes.
Training on augumented user 111778 1/50 current_auc = 0.8581521739130435
User 111778 AUC after training: 0.8581521739130435
User 111778 does not improve AUC. Reverting changes.
Training on augumented user 54952 2/50 current_auc = 0.8581521739130435
User 54952 AUC after training: 0.8581521739130435
User 54952 does not improve AUC. Reverting changes.
Training on augumented user 90307 3/50 current_auc = 0.8581521739130435
User 90307 AUC after training: 0.8581521739130435
User 90307 does not improve AUC. Reverting changes.
Training on augumented user 16563 4/50 current_auc = 0.8581521739130435
User 16563 AUC after training: 0.8581521739130435
User 16563 does not improve AUC. Reverting changes.
Training on augumented user 81916 5/50 current_auc = 0.8581521739130435
User 81916 AUC after training: 0.8581521739130435
User 81916 does not improve AUC. Reverting changes.
Training on augumented user 20999 6/50 current_auc = 0.8581521739130435
User 20999 AUC after training: 0.858695652173913
User 20999 improves AUC. Keeping the model.
Training on augumented user 18966 7/50 current_auc = 0.858695652173913
User 18966 AUC after training: 0.858695652173913
User 18966 does not improve AUC. Reverting changes.
Training on augumented user 12832 8/50 current_auc = 0.858695652173913
User 12832 AUC after training: 0.858695652173913
User 12832 does not improve AUC. Reverting changes.
Training on augumented user 87930 9/50 current_auc = 0.858695652173913
User 87930 AUC after training: 0.8581521739130434
User 87930 does not improve AUC. Reverting changes.
Training on augumented user 22512 10/50 current_auc = 0.858695652173913
User 22512 AUC after training: 0.8581521739130434
User 22512 does not improve AUC. Reverting changes.
Training on augumented user 68073 11/50 current_auc = 0.858695652173913
User 68073 AUC after training: 0.858695652173913
User 68073 does not improve AUC. Reverting changes.
Training on augumented user 43575 12/50 current_auc = 0.858695652173913
User 43575 AUC after training: 0.858695652173913
User 43575 does not improve AUC. Reverting changes.
Training on augumented user 114938 13/50 current_auc = 0.858695652173913
User 114938 AUC after training: 0.858695652173913
User 114938 does not improve AUC. Reverting changes.
Training on augumented user 44641 14/50 current_auc = 0.858695652173913
User 44641 AUC after training: 0.858695652173913
User 44641 does not improve AUC. Reverting changes.
Training on augumented user 26124 15/50 current_auc = 0.858695652173913
User 26124 AUC after training: 0.858695652173913
User 26124 does not improve AUC. Reverting changes.
Training on augumented user 11993 16/50 current_auc = 0.858695652173913
User 11993 AUC after training: 0.858695652173913
User 11993 does not improve AUC. Reverting changes.
Training on augumented user 106352 17/50 current_auc = 0.858695652173913
User 106352 AUC after training: 0.8581521739130434
User 106352 does not improve AUC. Reverting changes.
Training on augumented user 82645 18/50 current_auc = 0.858695652173913
User 82645 AUC after training: 0.858695652173913
User 82645 does not improve AUC. Reverting changes.
Training on augumented user 4599 19/50 current_auc = 0.858695652173913
User 4599 AUC after training: 0.858695652173913
User 4599 does not improve AUC. Reverting changes.
Training on augumented user 120415 20/50 current_auc = 0.858695652173913
User 120415 AUC after training: 0.858695652173913
User 120415 does not improve AUC. Reverting changes.
Training on augumented user 59790 21/50 current_auc = 0.858695652173913
User 59790 AUC after training: 0.858695652173913
User 59790 does not improve AUC. Reverting changes.
Training on augumented user 118436 22/50 current_auc = 0.858695652173913
User 118436 AUC after training: 0.8603260869565217
User 118436 improves AUC. Keeping the model.
Training on augumented user 26343 23/50 current_auc = 0.8603260869565217
User 26343 AUC after training: 0.8603260869565217
User 26343 does not improve AUC. Reverting changes.
Training on augumented user 105404 24/50 current_auc = 0.8603260869565217
User 105404 AUC after training: 0.8603260869565217
User 105404 does not improve AUC. Reverting changes.
Training on augumented user 64405 25/50 current_auc = 0.8603260869565217
User 64405 AUC after training: 0.8603260869565217
User 64405 does not improve AUC. Reverting changes.
Training on augumented user 51636 26/50 current_auc = 0.8603260869565217
User 51636 AUC after training: 0.8603260869565217
User 51636 does not improve AUC. Reverting changes.
Training on augumented user 136807 27/50 current_auc = 0.8603260869565217
User 136807 AUC after training: 0.8603260869565217
User 136807 does not improve AUC. Reverting changes.
Training on augumented user 83823 28/50 current_auc = 0.8603260869565217
User 83823 AUC after training: 0.8581521739130434
User 83823 does not improve AUC. Reverting changes.
Training on augumented user 107923 29/50 current_auc = 0.8603260869565217
User 107923 AUC after training: 0.8603260869565217
User 107923 does not improve AUC. Reverting changes.
Training on augumented user 131362 30/50 current_auc = 0.8603260869565217
User 131362 AUC after training: 0.8603260869565217
User 131362 does not improve AUC. Reverting changes.
Training on augumented user 35435 31/50 current_auc = 0.8603260869565217
User 35435 AUC after training: 0.8603260869565217
User 35435 does not improve AUC. Reverting changes.
Training on augumented user 137995 32/50 current_auc = 0.8603260869565217
User 137995 AUC after training: 0.8603260869565217
User 137995 does not improve AUC. Reverting changes.
Training on augumented user 128880 33/50 current_auc = 0.8603260869565217
User 128880 AUC after training: 0.8592391304347826
User 128880 does not improve AUC. Reverting changes.
Training on augumented user 127403 34/50 current_auc = 0.8603260869565217
User 127403 AUC after training: 0.8603260869565217
User 127403 does not improve AUC. Reverting changes.
Training on augumented user 78892 35/50 current_auc = 0.8603260869565217
User 78892 AUC after training: 0.8603260869565217
User 78892 does not improve AUC. Reverting changes.
Training on augumented user 40058 36/50 current_auc = 0.8603260869565217
User 40058 AUC after training: 0.8608695652173912
User 40058 improves AUC. Keeping the model.
Training on augumented user 26253 37/50 current_auc = 0.8608695652173912
User 26253 AUC after training: 0.8608695652173912
User 26253 does not improve AUC. Reverting changes.
Training on augumented user 46347 38/50 current_auc = 0.8608695652173912
User 46347 AUC after training: 0.8608695652173912
User 46347 does not improve AUC. Reverting changes.
Training on augumented user 2821 39/50 current_auc = 0.8608695652173912
User 2821 AUC after training: 0.8608695652173912
User 2821 does not improve AUC. Reverting changes.
Training on augumented user 29970 40/50 current_auc = 0.8608695652173912
User 29970 AUC after training: 0.8603260869565217
User 29970 does not improve AUC. Reverting changes.
Training on augumented user 103818 41/50 current_auc = 0.8608695652173912
User 103818 AUC after training: 0.8608695652173912
User 103818 does not improve AUC. Reverting changes.
Training on augumented user 52262 42/50 current_auc = 0.8608695652173912
User 52262 AUC after training: 0.8614130434782608
User 52262 improves AUC. Keeping the model.
Training on augumented user 36851 43/50 current_auc = 0.8614130434782608
User 36851 AUC after training: 0.8608695652173912
User 36851 does not improve AUC. Reverting changes.
Training on augumented user 1889 44/50 current_auc = 0.8614130434782608
User 1889 AUC after training: 0.8608695652173912
User 1889 does not improve AUC. Reverting changes.
Training on augumented user 75818 45/50 current_auc = 0.8614130434782608
User 75818 AUC after training: 0.8608695652173912
User 75818 does not improve AUC. Reverting changes.
Training on augumented user 108361 46/50 current_auc = 0.8614130434782608
User 108361 AUC after training: 0.8608695652173912
User 108361 does not improve AUC. Reverting changes.
Training on augumented user 22696 47/50 current_auc = 0.8614130434782608
User 22696 AUC after training: 0.8608695652173912
User 22696 does not improve AUC. Reverting changes.
Training on augumented user 10580 48/50 current_auc = 0.8614130434782608
User 10580 AUC after training: 0.8614130434782608
User 10580 does not improve AUC. Reverting changes.
Training on augumented user 134317 49/50 current_auc = 0.8614130434782608
User 134317 AUC after training: 0.8614130434782608
User 134317 does not improve AUC. Reverting changes.
[2024-12-02 19:58:54.470003] start test user 48452 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:55.140331] start test user 48452 256/568 recall augumented users by random, augumented_users = [88511, 8991, 6261, 59435, 36004, 94885, 103115, 84787, 129784, 122134, 21055, 102297, 92690, 76110, 59107, 108735, 69261, 78998, 10965, 19653, 29591, 117631, 59772, 24176, 6142, 59654, 127351, 97929, 117202, 53991, 44918, 117081, 92450, 107179, 66227, 58794, 39352, 121585, 778, 136839, 103534, 11029, 11230, 98638, 137012, 35901, 34268, 40295, 64269, 1972]
[2024-12-02 19:58:55.156293] user = 48452 Cloud 256/568
[2024-12-02 19:58:55.166659] user = 48452 Local 256/568
[2024-12-02 19:58:55.246373] user = 48452 Local+ 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:58.035122] user = 48452 MPDA- 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7380952380952381
Training on augumented user 88511 0/50 current_auc = 0.7380952380952381
User 88511 AUC after training: 0.7380952380952381
User 88511 does not improve AUC. Reverting changes.
Training on augumented user 8991 1/50 current_auc = 0.7380952380952381
User 8991 AUC after training: 0.7380952380952381
User 8991 does not improve AUC. Reverting changes.
Training on augumented user 6261 2/50 current_auc = 0.7380952380952381
User 6261 AUC after training: 0.7380952380952381
User 6261 does not improve AUC. Reverting changes.
Training on augumented user 59435 3/50 current_auc = 0.7380952380952381
User 59435 AUC after training: 0.7380952380952381
User 59435 does not improve AUC. Reverting changes.
Training on augumented user 36004 4/50 current_auc = 0.7380952380952381
User 36004 AUC after training: 0.7380952380952381
User 36004 does not improve AUC. Reverting changes.
Training on augumented user 94885 5/50 current_auc = 0.7380952380952381
User 94885 AUC after training: 0.7380952380952381
User 94885 does not improve AUC. Reverting changes.
Training on augumented user 103115 6/50 current_auc = 0.7380952380952381
User 103115 AUC after training: 0.7380952380952381
User 103115 does not improve AUC. Reverting changes.
Training on augumented user 84787 7/50 current_auc = 0.7380952380952381
User 84787 AUC after training: 0.7380952380952381
User 84787 does not improve AUC. Reverting changes.
Training on augumented user 129784 8/50 current_auc = 0.7380952380952381
User 129784 AUC after training: 0.7380952380952381
User 129784 does not improve AUC. Reverting changes.
Training on augumented user 122134 9/50 current_auc = 0.7380952380952381
User 122134 AUC after training: 0.7380952380952381
User 122134 does not improve AUC. Reverting changes.
Training on augumented user 21055 10/50 current_auc = 0.7380952380952381
User 21055 AUC after training: 0.7857142857142858
User 21055 improves AUC. Keeping the model.
Training on augumented user 102297 11/50 current_auc = 0.7857142857142858
User 102297 AUC after training: 0.7857142857142858
User 102297 does not improve AUC. Reverting changes.
Training on augumented user 92690 12/50 current_auc = 0.7857142857142858
User 92690 AUC after training: 0.7857142857142858
User 92690 does not improve AUC. Reverting changes.
Training on augumented user 76110 13/50 current_auc = 0.7857142857142858
User 76110 AUC after training: 0.761904761904762
User 76110 does not improve AUC. Reverting changes.
Training on augumented user 59107 14/50 current_auc = 0.7857142857142858
User 59107 AUC after training: 0.7857142857142858
User 59107 does not improve AUC. Reverting changes.
Training on augumented user 108735 15/50 current_auc = 0.7857142857142858
User 108735 AUC after training: 0.761904761904762
User 108735 does not improve AUC. Reverting changes.
Training on augumented user 69261 16/50 current_auc = 0.7857142857142858
User 69261 AUC after training: 0.7857142857142858
User 69261 does not improve AUC. Reverting changes.
Training on augumented user 78998 17/50 current_auc = 0.7857142857142858
User 78998 AUC after training: 0.761904761904762
User 78998 does not improve AUC. Reverting changes.
Training on augumented user 10965 18/50 current_auc = 0.7857142857142858
User 10965 AUC after training: 0.7857142857142858
User 10965 does not improve AUC. Reverting changes.
Training on augumented user 19653 19/50 current_auc = 0.7857142857142858
User 19653 AUC after training: 0.7857142857142858
User 19653 does not improve AUC. Reverting changes.
Training on augumented user 29591 20/50 current_auc = 0.7857142857142858
User 29591 AUC after training: 0.7857142857142858
User 29591 does not improve AUC. Reverting changes.
Training on augumented user 117631 21/50 current_auc = 0.7857142857142858
User 117631 AUC after training: 0.7857142857142858
User 117631 does not improve AUC. Reverting changes.
Training on augumented user 59772 22/50 current_auc = 0.7857142857142858
User 59772 AUC after training: 0.761904761904762
User 59772 does not improve AUC. Reverting changes.
Training on augumented user 24176 23/50 current_auc = 0.7857142857142858
User 24176 AUC after training: 0.761904761904762
User 24176 does not improve AUC. Reverting changes.
Training on augumented user 6142 24/50 current_auc = 0.7857142857142858
User 6142 AUC after training: 0.761904761904762
User 6142 does not improve AUC. Reverting changes.
Training on augumented user 59654 25/50 current_auc = 0.7857142857142858
User 59654 AUC after training: 0.7857142857142858
User 59654 does not improve AUC. Reverting changes.
Training on augumented user 127351 26/50 current_auc = 0.7857142857142858
User 127351 AUC after training: 0.761904761904762
User 127351 does not improve AUC. Reverting changes.
Training on augumented user 97929 27/50 current_auc = 0.7857142857142858
User 97929 AUC after training: 0.7857142857142858
User 97929 does not improve AUC. Reverting changes.
Training on augumented user 117202 28/50 current_auc = 0.7857142857142858
User 117202 AUC after training: 0.761904761904762
User 117202 does not improve AUC. Reverting changes.
Training on augumented user 53991 29/50 current_auc = 0.7857142857142858
User 53991 AUC after training: 0.7857142857142858
User 53991 does not improve AUC. Reverting changes.
Training on augumented user 44918 30/50 current_auc = 0.7857142857142858
User 44918 AUC after training: 0.7857142857142858
User 44918 does not improve AUC. Reverting changes.
Training on augumented user 117081 31/50 current_auc = 0.7857142857142858
User 117081 AUC after training: 0.761904761904762
User 117081 does not improve AUC. Reverting changes.
Training on augumented user 92450 32/50 current_auc = 0.7857142857142858
User 92450 AUC after training: 0.7857142857142858
User 92450 does not improve AUC. Reverting changes.
Training on augumented user 107179 33/50 current_auc = 0.7857142857142858
User 107179 AUC after training: 0.7857142857142858
User 107179 does not improve AUC. Reverting changes.
Training on augumented user 66227 34/50 current_auc = 0.7857142857142858
User 66227 AUC after training: 0.7857142857142858
User 66227 does not improve AUC. Reverting changes.
Training on augumented user 58794 35/50 current_auc = 0.7857142857142858
User 58794 AUC after training: 0.7857142857142858
User 58794 does not improve AUC. Reverting changes.
Training on augumented user 39352 36/50 current_auc = 0.7857142857142858
User 39352 AUC after training: 0.761904761904762
User 39352 does not improve AUC. Reverting changes.
Training on augumented user 121585 37/50 current_auc = 0.7857142857142858
User 121585 AUC after training: 0.7857142857142858
User 121585 does not improve AUC. Reverting changes.
Training on augumented user 778 38/50 current_auc = 0.7857142857142858
User 778 AUC after training: 0.7857142857142858
User 778 does not improve AUC. Reverting changes.
Training on augumented user 136839 39/50 current_auc = 0.7857142857142858
User 136839 AUC after training: 0.7380952380952381
User 136839 does not improve AUC. Reverting changes.
Training on augumented user 103534 40/50 current_auc = 0.7857142857142858
User 103534 AUC after training: 0.761904761904762
User 103534 does not improve AUC. Reverting changes.
Training on augumented user 11029 41/50 current_auc = 0.7857142857142858
User 11029 AUC after training: 0.761904761904762
User 11029 does not improve AUC. Reverting changes.
Training on augumented user 11230 42/50 current_auc = 0.7857142857142858
User 11230 AUC after training: 0.7142857142857143
User 11230 does not improve AUC. Reverting changes.
Training on augumented user 98638 43/50 current_auc = 0.7857142857142858
User 98638 AUC after training: 0.7857142857142858
User 98638 does not improve AUC. Reverting changes.
Training on augumented user 137012 44/50 current_auc = 0.7857142857142858
User 137012 AUC after training: 0.7857142857142858
User 137012 does not improve AUC. Reverting changes.
Training on augumented user 35901 45/50 current_auc = 0.7857142857142858
User 35901 AUC after training: 0.7380952380952381
User 35901 does not improve AUC. Reverting changes.
Training on augumented user 34268 46/50 current_auc = 0.7857142857142858
User 34268 AUC after training: 0.7857142857142858
User 34268 does not improve AUC. Reverting changes.
Training on augumented user 40295 47/50 current_auc = 0.7857142857142858
User 40295 AUC after training: 0.761904761904762
User 40295 does not improve AUC. Reverting changes.
Training on augumented user 64269 48/50 current_auc = 0.7857142857142858
User 64269 AUC after training: 0.761904761904762
User 64269 does not improve AUC. Reverting changes.
Training on augumented user 1972 49/50 current_auc = 0.7857142857142858
User 1972 AUC after training: 0.7857142857142858
User 1972 does not improve AUC. Reverting changes.
[2024-12-02 19:59:27.397259] start test user 48485 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:28.020540] start test user 48485 257/568 recall augumented users by random, augumented_users = [99011, 128257, 18200, 8351, 111371, 37936, 80386, 58803, 69456, 37202, 125225, 36283, 11193, 88379, 12698, 25771, 59911, 69547, 53449, 45641, 72078, 10585, 6618, 65531, 24563, 70467, 23455, 61225, 126275, 8554, 60983, 60164, 13483, 55726, 121663, 70069, 65348, 67060, 58804, 20065, 15049, 44260, 56711, 128736, 100909, 98988, 110814, 112643, 73377, 126160]
[2024-12-02 19:59:28.037959] user = 48485 Cloud 257/568
[2024-12-02 19:59:28.048958] user = 48485 Local 257/568
[2024-12-02 19:59:28.084470] user = 48485 Local+ 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:30.352240] user = 48485 MPDA- 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 99011 0/50 current_auc = 0.0
User 99011 AUC after training: 0.0
User 99011 does not improve AUC. Reverting changes.
Training on augumented user 128257 1/50 current_auc = 0.0
User 128257 AUC after training: 0.0
User 128257 does not improve AUC. Reverting changes.
Training on augumented user 18200 2/50 current_auc = 0.0
User 18200 AUC after training: 0.0
User 18200 does not improve AUC. Reverting changes.
Training on augumented user 8351 3/50 current_auc = 0.0
User 8351 AUC after training: 0.0
User 8351 does not improve AUC. Reverting changes.
Training on augumented user 111371 4/50 current_auc = 0.0
User 111371 AUC after training: 0.0
User 111371 does not improve AUC. Reverting changes.
Training on augumented user 37936 5/50 current_auc = 0.0
User 37936 AUC after training: 0.0
User 37936 does not improve AUC. Reverting changes.
Training on augumented user 80386 6/50 current_auc = 0.0
User 80386 AUC after training: 0.0
User 80386 does not improve AUC. Reverting changes.
Training on augumented user 58803 7/50 current_auc = 0.0
User 58803 AUC after training: 0.0
User 58803 does not improve AUC. Reverting changes.
Training on augumented user 69456 8/50 current_auc = 0.0
User 69456 AUC after training: 0.0
User 69456 does not improve AUC. Reverting changes.
Training on augumented user 37202 9/50 current_auc = 0.0
User 37202 AUC after training: 0.0
User 37202 does not improve AUC. Reverting changes.
Training on augumented user 125225 10/50 current_auc = 0.0
User 125225 AUC after training: 0.0
User 125225 does not improve AUC. Reverting changes.
Training on augumented user 36283 11/50 current_auc = 0.0
User 36283 AUC after training: 0.0
User 36283 does not improve AUC. Reverting changes.
Training on augumented user 11193 12/50 current_auc = 0.0
User 11193 AUC after training: 0.0
User 11193 does not improve AUC. Reverting changes.
Training on augumented user 88379 13/50 current_auc = 0.0
User 88379 AUC after training: 0.0
User 88379 does not improve AUC. Reverting changes.
Training on augumented user 12698 14/50 current_auc = 0.0
User 12698 AUC after training: 0.0
User 12698 does not improve AUC. Reverting changes.
Training on augumented user 25771 15/50 current_auc = 0.0
User 25771 AUC after training: 0.0
User 25771 does not improve AUC. Reverting changes.
Training on augumented user 59911 16/50 current_auc = 0.0
User 59911 AUC after training: 0.0
User 59911 does not improve AUC. Reverting changes.
Training on augumented user 69547 17/50 current_auc = 0.0
User 69547 AUC after training: 0.0
User 69547 does not improve AUC. Reverting changes.
Training on augumented user 53449 18/50 current_auc = 0.0
User 53449 AUC after training: 0.0
User 53449 does not improve AUC. Reverting changes.
Training on augumented user 45641 19/50 current_auc = 0.0
User 45641 AUC after training: 0.0
User 45641 does not improve AUC. Reverting changes.
Training on augumented user 72078 20/50 current_auc = 0.0
User 72078 AUC after training: 0.0
User 72078 does not improve AUC. Reverting changes.
Training on augumented user 10585 21/50 current_auc = 0.0
User 10585 AUC after training: 0.0
User 10585 does not improve AUC. Reverting changes.
Training on augumented user 6618 22/50 current_auc = 0.0
User 6618 AUC after training: 0.0
User 6618 does not improve AUC. Reverting changes.
Training on augumented user 65531 23/50 current_auc = 0.0
User 65531 AUC after training: 0.0
User 65531 does not improve AUC. Reverting changes.
Training on augumented user 24563 24/50 current_auc = 0.0
User 24563 AUC after training: 0.0
User 24563 does not improve AUC. Reverting changes.
Training on augumented user 70467 25/50 current_auc = 0.0
User 70467 AUC after training: 0.0
User 70467 does not improve AUC. Reverting changes.
Training on augumented user 23455 26/50 current_auc = 0.0
User 23455 AUC after training: 0.0
User 23455 does not improve AUC. Reverting changes.
Training on augumented user 61225 27/50 current_auc = 0.0
User 61225 AUC after training: 0.0
User 61225 does not improve AUC. Reverting changes.
Training on augumented user 126275 28/50 current_auc = 0.0
User 126275 AUC after training: 0.0
User 126275 does not improve AUC. Reverting changes.
Training on augumented user 8554 29/50 current_auc = 0.0
User 8554 AUC after training: 0.0
User 8554 does not improve AUC. Reverting changes.
Training on augumented user 60983 30/50 current_auc = 0.0
User 60983 AUC after training: 0.0
User 60983 does not improve AUC. Reverting changes.
Training on augumented user 60164 31/50 current_auc = 0.0
User 60164 AUC after training: 0.0
User 60164 does not improve AUC. Reverting changes.
Training on augumented user 13483 32/50 current_auc = 0.0
User 13483 AUC after training: 0.0
User 13483 does not improve AUC. Reverting changes.
Training on augumented user 55726 33/50 current_auc = 0.0
User 55726 AUC after training: 0.0
User 55726 does not improve AUC. Reverting changes.
Training on augumented user 121663 34/50 current_auc = 0.0
User 121663 AUC after training: 0.0
User 121663 does not improve AUC. Reverting changes.
Training on augumented user 70069 35/50 current_auc = 0.0
User 70069 AUC after training: 0.0
User 70069 does not improve AUC. Reverting changes.
Training on augumented user 65348 36/50 current_auc = 0.0
User 65348 AUC after training: 0.0
User 65348 does not improve AUC. Reverting changes.
Training on augumented user 67060 37/50 current_auc = 0.0
User 67060 AUC after training: 0.0
User 67060 does not improve AUC. Reverting changes.
Training on augumented user 58804 38/50 current_auc = 0.0
User 58804 AUC after training: 0.0
User 58804 does not improve AUC. Reverting changes.
Training on augumented user 20065 39/50 current_auc = 0.0
User 20065 AUC after training: 0.0
User 20065 does not improve AUC. Reverting changes.
Training on augumented user 15049 40/50 current_auc = 0.0
User 15049 AUC after training: 0.0
User 15049 does not improve AUC. Reverting changes.
Training on augumented user 44260 41/50 current_auc = 0.0
User 44260 AUC after training: 0.0
User 44260 does not improve AUC. Reverting changes.
Training on augumented user 56711 42/50 current_auc = 0.0
User 56711 AUC after training: 0.0
User 56711 does not improve AUC. Reverting changes.
Training on augumented user 128736 43/50 current_auc = 0.0
User 128736 AUC after training: 0.0
User 128736 does not improve AUC. Reverting changes.
Training on augumented user 100909 44/50 current_auc = 0.0
User 100909 AUC after training: 0.0
User 100909 does not improve AUC. Reverting changes.
Training on augumented user 98988 45/50 current_auc = 0.0
User 98988 AUC after training: 0.0
User 98988 does not improve AUC. Reverting changes.
Training on augumented user 110814 46/50 current_auc = 0.0
User 110814 AUC after training: 0.0
User 110814 does not improve AUC. Reverting changes.
Training on augumented user 112643 47/50 current_auc = 0.0
User 112643 AUC after training: 0.0
User 112643 does not improve AUC. Reverting changes.
Training on augumented user 73377 48/50 current_auc = 0.0
User 73377 AUC after training: 0.0
User 73377 does not improve AUC. Reverting changes.
Training on augumented user 126160 49/50 current_auc = 0.0
User 126160 AUC after training: 0.0
User 126160 does not improve AUC. Reverting changes.
[2024-12-02 20:00:01.035542] start test user 48509 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:01.801914] start test user 48509 258/568 recall augumented users by random, augumented_users = [55363, 28230, 73750, 97887, 136347, 15640, 70857, 1639, 128881, 106623, 105103, 74044, 72438, 118501, 95149, 16947, 130626, 94269, 127185, 111116, 102589, 29229, 37270, 2691, 92999, 73423, 92142, 80667, 33460, 14990, 61628, 27921, 106076, 8326, 52677, 63275, 134896, 61290, 104261, 108644, 121683, 31019, 42327, 83273, 41440, 124483, 51888, 48067, 975, 119477]
[2024-12-02 20:00:01.826687] user = 48509 Cloud 258/568
[2024-12-02 20:00:01.851472] user = 48509 Local 258/568
[2024-12-02 20:00:01.882554] user = 48509 Local+ 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:04.220215] user = 48509 MPDA- 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7768493150684932
Training on augumented user 55363 0/50 current_auc = 0.7768493150684932
User 55363 AUC after training: 0.7741095890410958
User 55363 does not improve AUC. Reverting changes.
Training on augumented user 28230 1/50 current_auc = 0.7768493150684932
User 28230 AUC after training: 0.7765753424657534
User 28230 does not improve AUC. Reverting changes.
Training on augumented user 73750 2/50 current_auc = 0.7768493150684932
User 73750 AUC after training: 0.776986301369863
User 73750 improves AUC. Keeping the model.
Training on augumented user 97887 3/50 current_auc = 0.776986301369863
User 97887 AUC after training: 0.776986301369863
User 97887 does not improve AUC. Reverting changes.
Training on augumented user 136347 4/50 current_auc = 0.776986301369863
User 136347 AUC after training: 0.7778082191780822
User 136347 improves AUC. Keeping the model.
Training on augumented user 15640 5/50 current_auc = 0.7778082191780822
User 15640 AUC after training: 0.7780821917808218
User 15640 improves AUC. Keeping the model.
Training on augumented user 70857 6/50 current_auc = 0.7780821917808218
User 70857 AUC after training: 0.7775342465753425
User 70857 does not improve AUC. Reverting changes.
Training on augumented user 1639 7/50 current_auc = 0.7780821917808218
User 1639 AUC after training: 0.7786301369863015
User 1639 improves AUC. Keeping the model.
Training on augumented user 128881 8/50 current_auc = 0.7786301369863015
User 128881 AUC after training: 0.7791780821917809
User 128881 improves AUC. Keeping the model.
Training on augumented user 106623 9/50 current_auc = 0.7791780821917809
User 106623 AUC after training: 0.7778082191780822
User 106623 does not improve AUC. Reverting changes.
Training on augumented user 105103 10/50 current_auc = 0.7791780821917809
User 105103 AUC after training: 0.7791780821917809
User 105103 does not improve AUC. Reverting changes.
Training on augumented user 74044 11/50 current_auc = 0.7791780821917809
User 74044 AUC after training: 0.7789041095890411
User 74044 does not improve AUC. Reverting changes.
Training on augumented user 72438 12/50 current_auc = 0.7791780821917809
User 72438 AUC after training: 0.7794520547945205
User 72438 improves AUC. Keeping the model.
Training on augumented user 118501 13/50 current_auc = 0.7794520547945205
User 118501 AUC after training: 0.7789041095890411
User 118501 does not improve AUC. Reverting changes.
Training on augumented user 95149 14/50 current_auc = 0.7794520547945205
User 95149 AUC after training: 0.7816438356164384
User 95149 improves AUC. Keeping the model.
Training on augumented user 16947 15/50 current_auc = 0.7816438356164384
User 16947 AUC after training: 0.7821917808219179
User 16947 improves AUC. Keeping the model.
Training on augumented user 130626 16/50 current_auc = 0.7821917808219179
User 130626 AUC after training: 0.7816438356164384
User 130626 does not improve AUC. Reverting changes.
Training on augumented user 94269 17/50 current_auc = 0.7821917808219179
User 94269 AUC after training: 0.7797260273972603
User 94269 does not improve AUC. Reverting changes.
Training on augumented user 127185 18/50 current_auc = 0.7821917808219179
User 127185 AUC after training: 0.7819178082191781
User 127185 does not improve AUC. Reverting changes.
Training on augumented user 111116 19/50 current_auc = 0.7821917808219179
User 111116 AUC after training: 0.7819178082191781
User 111116 does not improve AUC. Reverting changes.
Training on augumented user 102589 20/50 current_auc = 0.7821917808219179
User 102589 AUC after training: 0.781917808219178
User 102589 does not improve AUC. Reverting changes.
Training on augumented user 29229 21/50 current_auc = 0.7821917808219179
User 29229 AUC after training: 0.7819178082191781
User 29229 does not improve AUC. Reverting changes.
Training on augumented user 37270 22/50 current_auc = 0.7821917808219179
User 37270 AUC after training: 0.7824657534246575
User 37270 improves AUC. Keeping the model.
Training on augumented user 2691 23/50 current_auc = 0.7824657534246575
User 2691 AUC after training: 0.7835616438356164
User 2691 improves AUC. Keeping the model.
Training on augumented user 92999 24/50 current_auc = 0.7835616438356164
User 92999 AUC after training: 0.7827397260273973
User 92999 does not improve AUC. Reverting changes.
Training on augumented user 73423 25/50 current_auc = 0.7835616438356164
User 73423 AUC after training: 0.7843835616438356
User 73423 improves AUC. Keeping the model.
Training on augumented user 92142 26/50 current_auc = 0.7843835616438356
User 92142 AUC after training: 0.7832876712328767
User 92142 does not improve AUC. Reverting changes.
Training on augumented user 80667 27/50 current_auc = 0.7843835616438356
User 80667 AUC after training: 0.7821917808219178
User 80667 does not improve AUC. Reverting changes.
Training on augumented user 33460 28/50 current_auc = 0.7843835616438356
User 33460 AUC after training: 0.7841095890410958
User 33460 does not improve AUC. Reverting changes.
Training on augumented user 14990 29/50 current_auc = 0.7843835616438356
User 14990 AUC after training: 0.7841095890410958
User 14990 does not improve AUC. Reverting changes.
Training on augumented user 61628 30/50 current_auc = 0.7843835616438356
User 61628 AUC after training: 0.7832876712328767
User 61628 does not improve AUC. Reverting changes.
Training on augumented user 27921 31/50 current_auc = 0.7843835616438356
User 27921 AUC after training: 0.7821917808219179
User 27921 does not improve AUC. Reverting changes.
Training on augumented user 106076 32/50 current_auc = 0.7843835616438356
User 106076 AUC after training: 0.7846575342465754
User 106076 improves AUC. Keeping the model.
Training on augumented user 8326 33/50 current_auc = 0.7846575342465754
User 8326 AUC after training: 0.7824657534246575
User 8326 does not improve AUC. Reverting changes.
Training on augumented user 52677 34/50 current_auc = 0.7846575342465754
User 52677 AUC after training: 0.7832876712328767
User 52677 does not improve AUC. Reverting changes.
Training on augumented user 63275 35/50 current_auc = 0.7846575342465754
User 63275 AUC after training: 0.7821917808219179
User 63275 does not improve AUC. Reverting changes.
Training on augumented user 134896 36/50 current_auc = 0.7846575342465754
User 134896 AUC after training: 0.7821917808219178
User 134896 does not improve AUC. Reverting changes.
Training on augumented user 61290 37/50 current_auc = 0.7846575342465754
User 61290 AUC after training: 0.7838356164383562
User 61290 does not improve AUC. Reverting changes.
Training on augumented user 104261 38/50 current_auc = 0.7846575342465754
User 104261 AUC after training: 0.7838356164383562
User 104261 does not improve AUC. Reverting changes.
Training on augumented user 108644 39/50 current_auc = 0.7846575342465754
User 108644 AUC after training: 0.7832876712328767
User 108644 does not improve AUC. Reverting changes.
Training on augumented user 121683 40/50 current_auc = 0.7846575342465754
User 121683 AUC after training: 0.7827397260273973
User 121683 does not improve AUC. Reverting changes.
Training on augumented user 31019 41/50 current_auc = 0.7846575342465754
User 31019 AUC after training: 0.7832876712328767
User 31019 does not improve AUC. Reverting changes.
Training on augumented user 42327 42/50 current_auc = 0.7846575342465754
User 42327 AUC after training: 0.7843835616438356
User 42327 does not improve AUC. Reverting changes.
Training on augumented user 83273 43/50 current_auc = 0.7846575342465754
User 83273 AUC after training: 0.7816438356164384
User 83273 does not improve AUC. Reverting changes.
Training on augumented user 41440 44/50 current_auc = 0.7846575342465754
User 41440 AUC after training: 0.7835616438356164
User 41440 does not improve AUC. Reverting changes.
Training on augumented user 124483 45/50 current_auc = 0.7846575342465754
User 124483 AUC after training: 0.7841095890410958
User 124483 does not improve AUC. Reverting changes.
Training on augumented user 51888 46/50 current_auc = 0.7846575342465754
User 51888 AUC after training: 0.7832876712328767
User 51888 does not improve AUC. Reverting changes.
Training on augumented user 48067 47/50 current_auc = 0.7846575342465754
User 48067 AUC after training: 0.7838356164383562
User 48067 does not improve AUC. Reverting changes.
Training on augumented user 975 48/50 current_auc = 0.7846575342465754
User 975 AUC after training: 0.7843835616438356
User 975 does not improve AUC. Reverting changes.
Training on augumented user 119477 49/50 current_auc = 0.7846575342465754
User 119477 AUC after training: 0.7843835616438356
User 119477 does not improve AUC. Reverting changes.
[2024-12-02 20:00:30.424439] start test user 48512 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:31.246967] start test user 48512 259/568 recall augumented users by random, augumented_users = [129344, 12474, 109753, 21076, 108221, 27534, 104422, 31719, 134490, 2557, 76227, 50415, 99825, 41528, 27928, 124965, 61356, 104917, 75644, 76551, 88723, 115828, 58250, 110831, 126201, 41793, 136879, 6720, 131526, 113530, 67865, 25737, 63931, 91, 3207, 50628, 31337, 88374, 127361, 120105, 41370, 10187, 2296, 86611, 73220, 135542, 73836, 49631, 123460, 85306]
[2024-12-02 20:00:31.280973] user = 48512 Cloud 259/568
[2024-12-02 20:00:31.415048] user = 48512 Local 259/568
[2024-12-02 20:00:31.496155] user = 48512 Local+ 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:34.600532] user = 48512 MPDA- 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6691056910569105
Training on augumented user 129344 0/50 current_auc = 0.6691056910569105
User 129344 AUC after training: 0.667479674796748
User 129344 does not improve AUC. Reverting changes.
Training on augumented user 12474 1/50 current_auc = 0.6691056910569105
User 12474 AUC after training: 0.6682926829268293
User 12474 does not improve AUC. Reverting changes.
Training on augumented user 109753 2/50 current_auc = 0.6691056910569105
User 109753 AUC after training: 0.6691056910569105
User 109753 does not improve AUC. Reverting changes.
Training on augumented user 21076 3/50 current_auc = 0.6691056910569105
User 21076 AUC after training: 0.667479674796748
User 21076 does not improve AUC. Reverting changes.
Training on augumented user 108221 4/50 current_auc = 0.6691056910569105
User 108221 AUC after training: 0.6682926829268293
User 108221 does not improve AUC. Reverting changes.
Training on augumented user 27534 5/50 current_auc = 0.6691056910569105
User 27534 AUC after training: 0.6691056910569105
User 27534 does not improve AUC. Reverting changes.
Training on augumented user 104422 6/50 current_auc = 0.6691056910569105
User 104422 AUC after training: 0.6691056910569105
User 104422 does not improve AUC. Reverting changes.
Training on augumented user 31719 7/50 current_auc = 0.6691056910569105
User 31719 AUC after training: 0.6691056910569105
User 31719 does not improve AUC. Reverting changes.
Training on augumented user 134490 8/50 current_auc = 0.6691056910569105
User 134490 AUC after training: 0.6691056910569105
User 134490 does not improve AUC. Reverting changes.
Training on augumented user 2557 9/50 current_auc = 0.6691056910569105
User 2557 AUC after training: 0.6691056910569105
User 2557 does not improve AUC. Reverting changes.
Training on augumented user 76227 10/50 current_auc = 0.6691056910569105
User 76227 AUC after training: 0.6691056910569105
User 76227 does not improve AUC. Reverting changes.
Training on augumented user 50415 11/50 current_auc = 0.6691056910569105
User 50415 AUC after training: 0.6691056910569105
User 50415 does not improve AUC. Reverting changes.
Training on augumented user 99825 12/50 current_auc = 0.6691056910569105
User 99825 AUC after training: 0.6666666666666666
User 99825 does not improve AUC. Reverting changes.
Training on augumented user 41528 13/50 current_auc = 0.6691056910569105
User 41528 AUC after training: 0.6691056910569105
User 41528 does not improve AUC. Reverting changes.
Training on augumented user 27928 14/50 current_auc = 0.6691056910569105
User 27928 AUC after training: 0.6691056910569105
User 27928 does not improve AUC. Reverting changes.
Training on augumented user 124965 15/50 current_auc = 0.6691056910569105
User 124965 AUC after training: 0.6691056910569105
User 124965 does not improve AUC. Reverting changes.
Training on augumented user 61356 16/50 current_auc = 0.6691056910569105
User 61356 AUC after training: 0.6666666666666666
User 61356 does not improve AUC. Reverting changes.
Training on augumented user 104917 17/50 current_auc = 0.6691056910569105
User 104917 AUC after training: 0.6691056910569105
User 104917 does not improve AUC. Reverting changes.
Training on augumented user 75644 18/50 current_auc = 0.6691056910569105
User 75644 AUC after training: 0.667479674796748
User 75644 does not improve AUC. Reverting changes.
Training on augumented user 76551 19/50 current_auc = 0.6691056910569105
User 76551 AUC after training: 0.6666666666666667
User 76551 does not improve AUC. Reverting changes.
Training on augumented user 88723 20/50 current_auc = 0.6691056910569105
User 88723 AUC after training: 0.6682926829268292
User 88723 does not improve AUC. Reverting changes.
Training on augumented user 115828 21/50 current_auc = 0.6691056910569105
User 115828 AUC after training: 0.6682926829268293
User 115828 does not improve AUC. Reverting changes.
Training on augumented user 58250 22/50 current_auc = 0.6691056910569105
User 58250 AUC after training: 0.6666666666666666
User 58250 does not improve AUC. Reverting changes.
Training on augumented user 110831 23/50 current_auc = 0.6691056910569105
User 110831 AUC after training: 0.6691056910569105
User 110831 does not improve AUC. Reverting changes.
Training on augumented user 126201 24/50 current_auc = 0.6691056910569105
User 126201 AUC after training: 0.6682926829268293
User 126201 does not improve AUC. Reverting changes.
Training on augumented user 41793 25/50 current_auc = 0.6691056910569105
User 41793 AUC after training: 0.667479674796748
User 41793 does not improve AUC. Reverting changes.
Training on augumented user 136879 26/50 current_auc = 0.6691056910569105
User 136879 AUC after training: 0.667479674796748
User 136879 does not improve AUC. Reverting changes.
Training on augumented user 6720 27/50 current_auc = 0.6691056910569105
User 6720 AUC after training: 0.6658536585365853
User 6720 does not improve AUC. Reverting changes.
Training on augumented user 131526 28/50 current_auc = 0.6691056910569105
User 131526 AUC after training: 0.6682926829268293
User 131526 does not improve AUC. Reverting changes.
Training on augumented user 113530 29/50 current_auc = 0.6691056910569105
User 113530 AUC after training: 0.667479674796748
User 113530 does not improve AUC. Reverting changes.
Training on augumented user 67865 30/50 current_auc = 0.6691056910569105
User 67865 AUC after training: 0.6682926829268292
User 67865 does not improve AUC. Reverting changes.
Training on augumented user 25737 31/50 current_auc = 0.6691056910569105
User 25737 AUC after training: 0.6642276422764227
User 25737 does not improve AUC. Reverting changes.
Training on augumented user 63931 32/50 current_auc = 0.6691056910569105
User 63931 AUC after training: 0.6682926829268293
User 63931 does not improve AUC. Reverting changes.
Training on augumented user 91 33/50 current_auc = 0.6691056910569105
User 91 AUC after training: 0.6650406504065041
User 91 does not improve AUC. Reverting changes.
Training on augumented user 3207 34/50 current_auc = 0.6691056910569105
User 3207 AUC after training: 0.6650406504065041
User 3207 does not improve AUC. Reverting changes.
Training on augumented user 50628 35/50 current_auc = 0.6691056910569105
User 50628 AUC after training: 0.6691056910569105
User 50628 does not improve AUC. Reverting changes.
Training on augumented user 31337 36/50 current_auc = 0.6691056910569105
User 31337 AUC after training: 0.667479674796748
User 31337 does not improve AUC. Reverting changes.
Training on augumented user 88374 37/50 current_auc = 0.6691056910569105
User 88374 AUC after training: 0.6658536585365853
User 88374 does not improve AUC. Reverting changes.
Training on augumented user 127361 38/50 current_auc = 0.6691056910569105
User 127361 AUC after training: 0.667479674796748
User 127361 does not improve AUC. Reverting changes.
Training on augumented user 120105 39/50 current_auc = 0.6691056910569105
User 120105 AUC after training: 0.6682926829268292
User 120105 does not improve AUC. Reverting changes.
Training on augumented user 41370 40/50 current_auc = 0.6691056910569105
User 41370 AUC after training: 0.6691056910569105
User 41370 does not improve AUC. Reverting changes.
Training on augumented user 10187 41/50 current_auc = 0.6691056910569105
User 10187 AUC after training: 0.6682926829268292
User 10187 does not improve AUC. Reverting changes.
Training on augumented user 2296 42/50 current_auc = 0.6691056910569105
User 2296 AUC after training: 0.6682926829268292
User 2296 does not improve AUC. Reverting changes.
Training on augumented user 86611 43/50 current_auc = 0.6691056910569105
User 86611 AUC after training: 0.6682926829268293
User 86611 does not improve AUC. Reverting changes.
Training on augumented user 73220 44/50 current_auc = 0.6691056910569105
User 73220 AUC after training: 0.6715447154471544
User 73220 improves AUC. Keeping the model.
Training on augumented user 135542 45/50 current_auc = 0.6715447154471544
User 135542 AUC after training: 0.6699186991869919
User 135542 does not improve AUC. Reverting changes.
Training on augumented user 73836 46/50 current_auc = 0.6715447154471544
User 73836 AUC after training: 0.6723577235772358
User 73836 improves AUC. Keeping the model.
Training on augumented user 49631 47/50 current_auc = 0.6723577235772358
User 49631 AUC after training: 0.673170731707317
User 49631 improves AUC. Keeping the model.
Training on augumented user 123460 48/50 current_auc = 0.673170731707317
User 123460 AUC after training: 0.6739837398373983
User 123460 improves AUC. Keeping the model.
Training on augumented user 85306 49/50 current_auc = 0.6739837398373983
User 85306 AUC after training: 0.6723577235772358
User 85306 does not improve AUC. Reverting changes.
[2024-12-02 20:01:04.649557] start test user 48527 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:05.088305] start test user 48527 260/568 recall augumented users by random, augumented_users = [94545, 5993, 129132, 35178, 135672, 108434, 19040, 6217, 10337, 120442, 88128, 121896, 50340, 122506, 2875, 134650, 74694, 102671, 23583, 14016, 62360, 134516, 91688, 124419, 130144, 74853, 51652, 3761, 9487, 121725, 33055, 95391, 119902, 135029, 4641, 112004, 78240, 111495, 62699, 2419, 78966, 34834, 3660, 3341, 74879, 29618, 93707, 85902, 107083, 130884]
[2024-12-02 20:01:05.105118] user = 48527 Cloud 260/568
[2024-12-02 20:01:05.198449] user = 48527 Local 260/568
[2024-12-02 20:01:05.325041] user = 48527 Local+ 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:07.959444] user = 48527 MPDA- 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5709541582926596
Training on augumented user 94545 0/50 current_auc = 0.5709541582926596
User 94545 AUC after training: 0.5707531821226911
User 94545 does not improve AUC. Reverting changes.
Training on augumented user 5993 1/50 current_auc = 0.5709541582926596
User 5993 AUC after training: 0.5710115800555078
User 5993 improves AUC. Keeping the model.
Training on augumented user 129132 2/50 current_auc = 0.5710115800555078
User 129132 AUC after training: 0.5709445879988516
User 129132 does not improve AUC. Reverting changes.
Training on augumented user 35178 3/50 current_auc = 0.5710115800555078
User 35178 AUC after training: 0.5711838453440521
User 35178 improves AUC. Keeping the model.
Training on augumented user 135672 4/50 current_auc = 0.5711838453440521
User 135672 AUC after training: 0.5710067949086037
User 135672 does not improve AUC. Reverting changes.
Training on augumented user 108434 5/50 current_auc = 0.5711838453440521
User 108434 AUC after training: 0.5713896066609245
User 108434 improves AUC. Keeping the model.
Training on augumented user 19040 6/50 current_auc = 0.5713896066609245
User 19040 AUC after training: 0.5715188056273327
User 19040 improves AUC. Keeping the model.
Training on augumented user 6217 7/50 current_auc = 0.5715188056273327
User 6217 AUC after training: 0.5713752512202125
User 6217 does not improve AUC. Reverting changes.
Training on augumented user 10337 8/50 current_auc = 0.5715188056273327
User 10337 AUC after training: 0.5715188056273328
User 10337 improves AUC. Keeping the model.
Training on augumented user 120442 9/50 current_auc = 0.5715188056273328
User 120442 AUC after training: 0.5715427313618529
User 120442 improves AUC. Keeping the model.
Training on augumented user 88128 10/50 current_auc = 0.5715427313618529
User 88128 AUC after training: 0.5717628481194372
User 88128 improves AUC. Keeping the model.
Training on augumented user 121896 11/50 current_auc = 0.5717628481194372
User 121896 AUC after training: 0.5717245669442051
User 121896 does not improve AUC. Reverting changes.
Training on augumented user 50340 12/50 current_auc = 0.5717628481194372
User 50340 AUC after training: 0.5718346253229973
User 50340 improves AUC. Keeping the model.
Training on augumented user 122506 13/50 current_auc = 0.5718346253229973
User 122506 AUC after training: 0.5717341372380131
User 122506 does not improve AUC. Reverting changes.
Training on augumented user 2875 14/50 current_auc = 0.5718346253229973
User 2875 AUC after training: 0.5716910709158771
User 2875 does not improve AUC. Reverting changes.
Training on augumented user 134650 15/50 current_auc = 0.5718346253229973
User 134650 AUC after training: 0.5717341372380131
User 134650 does not improve AUC. Reverting changes.
Training on augumented user 74694 16/50 current_auc = 0.5718346253229973
User 74694 AUC after training: 0.5717676332663413
User 74694 does not improve AUC. Reverting changes.
Training on augumented user 102671 17/50 current_auc = 0.5718346253229973
User 102671 AUC after training: 0.5714470284237727
User 102671 does not improve AUC. Reverting changes.
Training on augumented user 23583 18/50 current_auc = 0.5718346253229973
User 23583 AUC after training: 0.5714757393051967
User 23583 does not improve AUC. Reverting changes.
Training on augumented user 14016 19/50 current_auc = 0.5718346253229973
User 14016 AUC after training: 0.5715666570963729
User 14016 does not improve AUC. Reverting changes.
Training on augumented user 62360 20/50 current_auc = 0.5718346253229973
User 62360 AUC after training: 0.5718968322327496
User 62360 improves AUC. Keeping the model.
Training on augumented user 134516 21/50 current_auc = 0.5718968322327496
User 134516 AUC after training: 0.5718394104699014
User 134516 does not improve AUC. Reverting changes.
Training on augumented user 91688 22/50 current_auc = 0.5718968322327496
User 91688 AUC after training: 0.571614508565413
User 91688 does not improve AUC. Reverting changes.
Training on augumented user 124419 23/50 current_auc = 0.5718968322327496
User 124419 AUC after training: 0.5717819887070533
User 124419 does not improve AUC. Reverting changes.
Training on augumented user 130144 24/50 current_auc = 0.5718968322327496
User 130144 AUC after training: 0.5718489807637095
User 130144 does not improve AUC. Reverting changes.
Training on augumented user 74853 25/50 current_auc = 0.5718968322327496
User 74853 AUC after training: 0.5715714422432769
User 74853 does not improve AUC. Reverting changes.
Training on augumented user 51652 26/50 current_auc = 0.5718968322327496
User 51652 AUC after training: 0.5717628481194372
User 51652 does not improve AUC. Reverting changes.
Training on augumented user 3761 27/50 current_auc = 0.5718968322327496
User 3761 AUC after training: 0.5713417551918843
User 3761 does not improve AUC. Reverting changes.
Training on augumented user 9487 28/50 current_auc = 0.5718968322327496
User 9487 AUC after training: 0.5718824767920375
User 9487 does not improve AUC. Reverting changes.
Training on augumented user 121725 29/50 current_auc = 0.5718968322327496
User 121725 AUC after training: 0.5719040099531055
User 121725 improves AUC. Keeping the model.
Training on augumented user 33055 30/50 current_auc = 0.5719040099531055
User 33055 AUC after training: 0.5719159728203655
User 33055 improves AUC. Keeping the model.
Training on augumented user 95391 31/50 current_auc = 0.5719159728203655
User 95391 AUC after training: 0.5715857976839889
User 95391 does not improve AUC. Reverting changes.
Training on augumented user 119902 32/50 current_auc = 0.5719159728203655
User 119902 AUC after training: 0.571643219446837
User 119902 does not improve AUC. Reverting changes.
Training on augumented user 135029 33/50 current_auc = 0.5719159728203655
User 135029 AUC after training: 0.5722652885443583
User 135029 improves AUC. Keeping the model.
Training on augumented user 4641 34/50 current_auc = 0.5722652885443583
User 4641 AUC after training: 0.5710498612307398
User 4641 does not improve AUC. Reverting changes.
Training on augumented user 112004 35/50 current_auc = 0.5722652885443583
User 112004 AUC after training: 0.57208823810891
User 112004 does not improve AUC. Reverting changes.
Training on augumented user 78240 36/50 current_auc = 0.5722652885443583
User 78240 AUC after training: 0.572126519284142
User 78240 does not improve AUC. Reverting changes.
Training on augumented user 111495 37/50 current_auc = 0.5722652885443583
User 111495 AUC after training: 0.5721959039142501
User 111495 does not improve AUC. Reverting changes.
Training on augumented user 62699 38/50 current_auc = 0.5722652885443583
User 62699 AUC after training: 0.5718441956168054
User 62699 does not improve AUC. Reverting changes.
Training on augumented user 2419 39/50 current_auc = 0.5722652885443583
User 2419 AUC after training: 0.5724806201550388
User 2419 improves AUC. Keeping the model.
Training on augumented user 78966 40/50 current_auc = 0.5724806201550388
User 78966 AUC after training: 0.5722030816346062
User 78966 does not improve AUC. Reverting changes.
Training on augumented user 34834 41/50 current_auc = 0.5724806201550388
User 34834 AUC after training: 0.5727150923533353
User 34834 improves AUC. Keeping the model.
Training on augumented user 3660 42/50 current_auc = 0.5727150923533353
User 3660 AUC after training: 0.5714900947459087
User 3660 does not improve AUC. Reverting changes.
Training on augumented user 3341 43/50 current_auc = 0.5727150923533353
User 3341 AUC after training: 0.5723418508948225
User 3341 does not improve AUC. Reverting changes.
Training on augumented user 74879 44/50 current_auc = 0.5727150923533353
User 74879 AUC after training: 0.5709876543209876
User 74879 does not improve AUC. Reverting changes.
Training on augumented user 29618 45/50 current_auc = 0.5727150923533353
User 29618 AUC after training: 0.5727581586754713
User 29618 improves AUC. Keeping the model.
Training on augumented user 93707 46/50 current_auc = 0.5727581586754713
User 93707 AUC after training: 0.5727055220595272
User 93707 does not improve AUC. Reverting changes.
Training on augumented user 85902 47/50 current_auc = 0.5727581586754713
User 85902 AUC after training: 0.5722796439850704
User 85902 does not improve AUC. Reverting changes.
Training on augumented user 107083 48/50 current_auc = 0.5727581586754713
User 107083 AUC after training: 0.5726146042683511
User 107083 does not improve AUC. Reverting changes.
Training on augumented user 130884 49/50 current_auc = 0.5727581586754713
User 130884 AUC after training: 0.5725811082400231
User 130884 does not improve AUC. Reverting changes.
[2024-12-02 20:01:46.412211] start test user 48554 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:46.873229] start test user 48554 261/568 recall augumented users by random, augumented_users = [48851, 92537, 80141, 113460, 29189, 8192, 133571, 61171, 2407, 24915, 63651, 14784, 5258, 19619, 58631, 8639, 72242, 22731, 13366, 63566, 55457, 79461, 69557, 47404, 34960, 57064, 5232, 35308, 50433, 35967, 110903, 88032, 3737, 44378, 14977, 81168, 78596, 22941, 67350, 111070, 115553, 100515, 35291, 102950, 108612, 16488, 81803, 72249, 75912, 37618]
[2024-12-02 20:01:46.889163] user = 48554 Cloud 261/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:01:46.896754] user = 48554 Local 261/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:01:46.959027] user = 48554 Local+ 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:01:50.079058] user = 48554 MPDA- 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 48851 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48851 AUC after training: 0.5
User 48851 does not improve AUC. Reverting changes.
Training on augumented user 92537 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92537 AUC after training: 0.5
User 92537 does not improve AUC. Reverting changes.
Training on augumented user 80141 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80141 AUC after training: 0.5
User 80141 does not improve AUC. Reverting changes.
Training on augumented user 113460 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113460 AUC after training: 0.5
User 113460 does not improve AUC. Reverting changes.
Training on augumented user 29189 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29189 AUC after training: 0.5
User 29189 does not improve AUC. Reverting changes.
Training on augumented user 8192 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8192 AUC after training: 0.5
User 8192 does not improve AUC. Reverting changes.
Training on augumented user 133571 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133571 AUC after training: 0.5
User 133571 does not improve AUC. Reverting changes.
Training on augumented user 61171 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61171 AUC after training: 0.5
User 61171 does not improve AUC. Reverting changes.
Training on augumented user 2407 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2407 AUC after training: 0.5
User 2407 does not improve AUC. Reverting changes.
Training on augumented user 24915 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24915 AUC after training: 0.5
User 24915 does not improve AUC. Reverting changes.
Training on augumented user 63651 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63651 AUC after training: 0.5
User 63651 does not improve AUC. Reverting changes.
Training on augumented user 14784 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14784 AUC after training: 0.5
User 14784 does not improve AUC. Reverting changes.
Training on augumented user 5258 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5258 AUC after training: 0.5
User 5258 does not improve AUC. Reverting changes.
Training on augumented user 19619 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19619 AUC after training: 0.5
User 19619 does not improve AUC. Reverting changes.
Training on augumented user 58631 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58631 AUC after training: 0.5
User 58631 does not improve AUC. Reverting changes.
Training on augumented user 8639 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8639 AUC after training: 0.5
User 8639 does not improve AUC. Reverting changes.
Training on augumented user 72242 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72242 AUC after training: 0.5
User 72242 does not improve AUC. Reverting changes.
Training on augumented user 22731 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22731 AUC after training: 0.5
User 22731 does not improve AUC. Reverting changes.
Training on augumented user 13366 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13366 AUC after training: 0.5
User 13366 does not improve AUC. Reverting changes.
Training on augumented user 63566 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63566 AUC after training: 0.5
User 63566 does not improve AUC. Reverting changes.
Training on augumented user 55457 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55457 AUC after training: 0.5
User 55457 does not improve AUC. Reverting changes.
Training on augumented user 79461 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79461 AUC after training: 0.5
User 79461 does not improve AUC. Reverting changes.
Training on augumented user 69557 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69557 AUC after training: 0.5
User 69557 does not improve AUC. Reverting changes.
Training on augumented user 47404 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47404 AUC after training: 0.5
User 47404 does not improve AUC. Reverting changes.
Training on augumented user 34960 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34960 AUC after training: 0.5
User 34960 does not improve AUC. Reverting changes.
Training on augumented user 57064 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57064 AUC after training: 0.5
User 57064 does not improve AUC. Reverting changes.
Training on augumented user 5232 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5232 AUC after training: 0.5
User 5232 does not improve AUC. Reverting changes.
Training on augumented user 35308 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35308 AUC after training: 0.5
User 35308 does not improve AUC. Reverting changes.
Training on augumented user 50433 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50433 AUC after training: 0.5
User 50433 does not improve AUC. Reverting changes.
Training on augumented user 35967 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35967 AUC after training: 0.5
User 35967 does not improve AUC. Reverting changes.
Training on augumented user 110903 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110903 AUC after training: 0.5
User 110903 does not improve AUC. Reverting changes.
Training on augumented user 88032 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88032 AUC after training: 0.5
User 88032 does not improve AUC. Reverting changes.
Training on augumented user 3737 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3737 AUC after training: 0.5
User 3737 does not improve AUC. Reverting changes.
Training on augumented user 44378 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44378 AUC after training: 0.5
User 44378 does not improve AUC. Reverting changes.
Training on augumented user 14977 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14977 AUC after training: 0.5
User 14977 does not improve AUC. Reverting changes.
Training on augumented user 81168 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81168 AUC after training: 0.5
User 81168 does not improve AUC. Reverting changes.
Training on augumented user 78596 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78596 AUC after training: 0.5
User 78596 does not improve AUC. Reverting changes.
Training on augumented user 22941 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22941 AUC after training: 0.5
User 22941 does not improve AUC. Reverting changes.
Training on augumented user 67350 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67350 AUC after training: 0.5
User 67350 does not improve AUC. Reverting changes.
Training on augumented user 111070 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111070 AUC after training: 0.5
User 111070 does not improve AUC. Reverting changes.
Training on augumented user 115553 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115553 AUC after training: 0.5
User 115553 does not improve AUC. Reverting changes.
Training on augumented user 100515 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100515 AUC after training: 0.5
User 100515 does not improve AUC. Reverting changes.
Training on augumented user 35291 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35291 AUC after training: 0.5
User 35291 does not improve AUC. Reverting changes.
Training on augumented user 102950 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102950 AUC after training: 0.5
User 102950 does not improve AUC. Reverting changes.
Training on augumented user 108612 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108612 AUC after training: 0.5
User 108612 does not improve AUC. Reverting changes.
Training on augumented user 16488 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16488 AUC after training: 0.5
User 16488 does not improve AUC. Reverting changes.
Training on augumented user 81803 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81803 AUC after training: 0.5
User 81803 does not improve AUC. Reverting changes.
Training on augumented user 72249 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72249 AUC after training: 0.5
User 72249 does not improve AUC. Reverting changes.
Training on augumented user 75912 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75912 AUC after training: 0.5
User 75912 does not improve AUC. Reverting changes.
Training on augumented user 37618 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37618 AUC after training: 0.5
User 37618 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:19.640528] start test user 48564 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:20.070694] start test user 48564 262/568 recall augumented users by random, augumented_users = [68959, 6922, 9509, 38937, 11053, 79742, 15179, 51635, 23664, 113996, 65268, 122246, 25968, 97695, 81947, 17297, 109655, 97434, 122579, 57875, 22308, 113022, 53266, 77183, 104626, 32178, 113488, 56182, 12499, 29871, 57095, 78230, 115751, 85855, 13187, 81736, 120322, 100980, 69007, 115839, 80233, 83838, 35289, 54064, 69002, 134572, 100061, 129374, 88388, 55466]
[2024-12-02 20:02:20.084518] user = 48564 Cloud 262/568
[2024-12-02 20:02:20.098775] user = 48564 Local 262/568
[2024-12-02 20:02:20.121346] user = 48564 Local+ 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:22.241423] user = 48564 MPDA- 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6246261216350947
Training on augumented user 68959 0/50 current_auc = 0.6246261216350947
User 68959 AUC after training: 0.6248753738783649
User 68959 improves AUC. Keeping the model.
Training on augumented user 6922 1/50 current_auc = 0.6248753738783649
User 6922 AUC after training: 0.6253738783649053
User 6922 improves AUC. Keeping the model.
Training on augumented user 9509 2/50 current_auc = 0.6253738783649053
User 9509 AUC after training: 0.6246261216350947
User 9509 does not improve AUC. Reverting changes.
Training on augumented user 38937 3/50 current_auc = 0.6253738783649053
User 38937 AUC after training: 0.6253738783649052
User 38937 does not improve AUC. Reverting changes.
Training on augumented user 11053 4/50 current_auc = 0.6253738783649053
User 11053 AUC after training: 0.6243768693918245
User 11053 does not improve AUC. Reverting changes.
Training on augumented user 79742 5/50 current_auc = 0.6253738783649053
User 79742 AUC after training: 0.6248753738783649
User 79742 does not improve AUC. Reverting changes.
Training on augumented user 15179 6/50 current_auc = 0.6253738783649053
User 15179 AUC after training: 0.6246261216350947
User 15179 does not improve AUC. Reverting changes.
Training on augumented user 51635 7/50 current_auc = 0.6253738783649053
User 51635 AUC after training: 0.6243768693918245
User 51635 does not improve AUC. Reverting changes.
Training on augumented user 23664 8/50 current_auc = 0.6253738783649053
User 23664 AUC after training: 0.625124626121635
User 23664 does not improve AUC. Reverting changes.
Training on augumented user 113996 9/50 current_auc = 0.6253738783649053
User 113996 AUC after training: 0.6253738783649052
User 113996 does not improve AUC. Reverting changes.
Training on augumented user 65268 10/50 current_auc = 0.6253738783649053
User 65268 AUC after training: 0.6253738783649053
User 65268 does not improve AUC. Reverting changes.
Training on augumented user 122246 11/50 current_auc = 0.6253738783649053
User 122246 AUC after training: 0.6243768693918245
User 122246 does not improve AUC. Reverting changes.
Training on augumented user 25968 12/50 current_auc = 0.6253738783649053
User 25968 AUC after training: 0.6251246261216351
User 25968 does not improve AUC. Reverting changes.
Training on augumented user 97695 13/50 current_auc = 0.6253738783649053
User 97695 AUC after training: 0.6253738783649052
User 97695 does not improve AUC. Reverting changes.
Training on augumented user 81947 14/50 current_auc = 0.6253738783649053
User 81947 AUC after training: 0.6248753738783649
User 81947 does not improve AUC. Reverting changes.
Training on augumented user 17297 15/50 current_auc = 0.6253738783649053
User 17297 AUC after training: 0.6253738783649053
User 17297 does not improve AUC. Reverting changes.
Training on augumented user 109655 16/50 current_auc = 0.6253738783649053
User 109655 AUC after training: 0.6248753738783649
User 109655 does not improve AUC. Reverting changes.
Training on augumented user 97434 17/50 current_auc = 0.6253738783649053
User 97434 AUC after training: 0.6246261216350947
User 97434 does not improve AUC. Reverting changes.
Training on augumented user 122579 18/50 current_auc = 0.6253738783649053
User 122579 AUC after training: 0.6253738783649053
User 122579 does not improve AUC. Reverting changes.
Training on augumented user 57875 19/50 current_auc = 0.6253738783649053
User 57875 AUC after training: 0.6246261216350947
User 57875 does not improve AUC. Reverting changes.
Training on augumented user 22308 20/50 current_auc = 0.6253738783649053
User 22308 AUC after training: 0.6241276171485542
User 22308 does not improve AUC. Reverting changes.
Training on augumented user 113022 21/50 current_auc = 0.6253738783649053
User 113022 AUC after training: 0.6261216350947159
User 113022 improves AUC. Keeping the model.
Training on augumented user 53266 22/50 current_auc = 0.6261216350947159
User 53266 AUC after training: 0.6261216350947157
User 53266 does not improve AUC. Reverting changes.
Training on augumented user 77183 23/50 current_auc = 0.6261216350947159
User 77183 AUC after training: 0.6246261216350947
User 77183 does not improve AUC. Reverting changes.
Training on augumented user 104626 24/50 current_auc = 0.6261216350947159
User 104626 AUC after training: 0.625124626121635
User 104626 does not improve AUC. Reverting changes.
Training on augumented user 32178 25/50 current_auc = 0.6261216350947159
User 32178 AUC after training: 0.6253738783649052
User 32178 does not improve AUC. Reverting changes.
Training on augumented user 113488 26/50 current_auc = 0.6261216350947159
User 113488 AUC after training: 0.6246261216350947
User 113488 does not improve AUC. Reverting changes.
Training on augumented user 56182 27/50 current_auc = 0.6261216350947159
User 56182 AUC after training: 0.6256231306081754
User 56182 does not improve AUC. Reverting changes.
Training on augumented user 12499 28/50 current_auc = 0.6261216350947159
User 12499 AUC after training: 0.6256231306081754
User 12499 does not improve AUC. Reverting changes.
Training on augumented user 29871 29/50 current_auc = 0.6261216350947159
User 29871 AUC after training: 0.6258723828514456
User 29871 does not improve AUC. Reverting changes.
Training on augumented user 57095 30/50 current_auc = 0.6261216350947159
User 57095 AUC after training: 0.6236291126620139
User 57095 does not improve AUC. Reverting changes.
Training on augumented user 78230 31/50 current_auc = 0.6261216350947159
User 78230 AUC after training: 0.6248753738783649
User 78230 does not improve AUC. Reverting changes.
Training on augumented user 115751 32/50 current_auc = 0.6261216350947159
User 115751 AUC after training: 0.6251246261216351
User 115751 does not improve AUC. Reverting changes.
Training on augumented user 85855 33/50 current_auc = 0.6261216350947159
User 85855 AUC after training: 0.6248753738783649
User 85855 does not improve AUC. Reverting changes.
Training on augumented user 13187 34/50 current_auc = 0.6261216350947159
User 13187 AUC after training: 0.6246261216350947
User 13187 does not improve AUC. Reverting changes.
Training on augumented user 81736 35/50 current_auc = 0.6261216350947159
User 81736 AUC after training: 0.6253738783649052
User 81736 does not improve AUC. Reverting changes.
Training on augumented user 120322 36/50 current_auc = 0.6261216350947159
User 120322 AUC after training: 0.6261216350947157
User 120322 does not improve AUC. Reverting changes.
Training on augumented user 100980 37/50 current_auc = 0.6261216350947159
User 100980 AUC after training: 0.6213858424725822
User 100980 does not improve AUC. Reverting changes.
Training on augumented user 69007 38/50 current_auc = 0.6261216350947159
User 69007 AUC after training: 0.6256231306081754
User 69007 does not improve AUC. Reverting changes.
Training on augumented user 115839 39/50 current_auc = 0.6261216350947159
User 115839 AUC after training: 0.625124626121635
User 115839 does not improve AUC. Reverting changes.
Training on augumented user 80233 40/50 current_auc = 0.6261216350947159
User 80233 AUC after training: 0.625
User 80233 does not improve AUC. Reverting changes.
Training on augumented user 83838 41/50 current_auc = 0.6261216350947159
User 83838 AUC after training: 0.6256231306081755
User 83838 does not improve AUC. Reverting changes.
Training on augumented user 35289 42/50 current_auc = 0.6261216350947159
User 35289 AUC after training: 0.6263708873379861
User 35289 improves AUC. Keeping the model.
Training on augumented user 54064 43/50 current_auc = 0.6263708873379861
User 54064 AUC after training: 0.6248753738783649
User 54064 does not improve AUC. Reverting changes.
Training on augumented user 69002 44/50 current_auc = 0.6263708873379861
User 69002 AUC after training: 0.6261216350947159
User 69002 does not improve AUC. Reverting changes.
Training on augumented user 134572 45/50 current_auc = 0.6263708873379861
User 134572 AUC after training: 0.6258723828514455
User 134572 does not improve AUC. Reverting changes.
Training on augumented user 100061 46/50 current_auc = 0.6263708873379861
User 100061 AUC after training: 0.6263708873379861
User 100061 does not improve AUC. Reverting changes.
Training on augumented user 129374 47/50 current_auc = 0.6263708873379861
User 129374 AUC after training: 0.6251246261216351
User 129374 does not improve AUC. Reverting changes.
Training on augumented user 88388 48/50 current_auc = 0.6263708873379861
User 88388 AUC after training: 0.6276171485543369
User 88388 improves AUC. Keeping the model.
Training on augumented user 55466 49/50 current_auc = 0.6276171485543369
User 55466 AUC after training: 0.6246261216350947
User 55466 does not improve AUC. Reverting changes.
[2024-12-02 20:02:51.708971] start test user 48568 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:52.440169] start test user 48568 263/568 recall augumented users by random, augumented_users = [115599, 121118, 27640, 80811, 8309, 49310, 69053, 22018, 74275, 85645, 29085, 107493, 118581, 90860, 12850, 23165, 121853, 127688, 134755, 32439, 128834, 65952, 66540, 92957, 95161, 124038, 138391, 59563, 109120, 71947, 88977, 47921, 136569, 61948, 63104, 111395, 116405, 2254, 36168, 137937, 69695, 30189, 57441, 116012, 25569, 3022, 23924, 137373, 89760, 53756]
[2024-12-02 20:02:52.479488] user = 48568 Cloud 263/568
[2024-12-02 20:02:52.580061] user = 48568 Local 263/568
[2024-12-02 20:02:52.816109] user = 48568 Local+ 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:54.575166] user = 48568 MPDA- 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5467424271509196
Training on augumented user 115599 0/50 current_auc = 0.5467424271509196
User 115599 AUC after training: 0.5464736821898875
User 115599 does not improve AUC. Reverting changes.
Training on augumented user 121118 1/50 current_auc = 0.5467424271509196
User 121118 AUC after training: 0.5461665450915654
User 121118 does not improve AUC. Reverting changes.
Training on augumented user 27640 2/50 current_auc = 0.5467424271509196
User 27640 AUC after training: 0.5476638384458863
User 27640 improves AUC. Keeping the model.
Training on augumented user 80811 3/50 current_auc = 0.5476638384458863
User 80811 AUC after training: 0.5484700733289822
User 80811 improves AUC. Keeping the model.
Training on augumented user 8309 4/50 current_auc = 0.5484700733289822
User 8309 AUC after training: 0.5484700733289822
User 8309 does not improve AUC. Reverting changes.
Training on augumented user 49310 5/50 current_auc = 0.5484700733289822
User 49310 AUC after training: 0.5478174069950474
User 49310 does not improve AUC. Reverting changes.
Training on augumented user 69053 6/50 current_auc = 0.5484700733289822
User 69053 AUC after training: 0.5490075632510462
User 69053 improves AUC. Keeping the model.
Training on augumented user 22018 7/50 current_auc = 0.5490075632510462
User 22018 AUC after training: 0.5479709755442086
User 22018 does not improve AUC. Reverting changes.
Training on augumented user 74275 8/50 current_auc = 0.5490075632510462
User 74275 AUC after training: 0.5490075632510463
User 74275 improves AUC. Keeping the model.
Training on augumented user 85645 9/50 current_auc = 0.5490075632510463
User 85645 AUC after training: 0.5494298767612393
User 85645 improves AUC. Keeping the model.
Training on augumented user 29085 10/50 current_auc = 0.5494298767612393
User 29085 AUC after training: 0.5493147003493685
User 29085 does not improve AUC. Reverting changes.
Training on augumented user 107493 11/50 current_auc = 0.5494298767612393
User 107493 AUC after training: 0.5484700733289823
User 107493 does not improve AUC. Reverting changes.
Training on augumented user 118581 12/50 current_auc = 0.5494298767612393
User 118581 AUC after training: 0.5500825430951741
User 118581 improves AUC. Keeping the model.
Training on augumented user 90860 13/50 current_auc = 0.5500825430951741
User 90860 AUC after training: 0.5503896801934963
User 90860 improves AUC. Keeping the model.
Training on augumented user 12850 14/50 current_auc = 0.5503896801934963
User 12850 AUC after training: 0.5489691711137559
User 12850 does not improve AUC. Reverting changes.
Training on augumented user 23165 15/50 current_auc = 0.5503896801934963
User 23165 AUC after training: 0.5517717971359466
User 23165 improves AUC. Keeping the model.
Training on augumented user 121853 16/50 current_auc = 0.5517717971359466
User 121853 AUC after training: 0.5471647406611126
User 121853 does not improve AUC. Reverting changes.
Training on augumented user 127688 17/50 current_auc = 0.5517717971359466
User 127688 AUC after training: 0.5513110914884632
User 127688 does not improve AUC. Reverting changes.
Training on augumented user 134755 18/50 current_auc = 0.5517717971359466
User 134755 AUC after training: 0.5528083848427843
User 134755 improves AUC. Keeping the model.
Training on augumented user 32439 19/50 current_auc = 0.5528083848427843
User 32439 AUC after training: 0.5517717971359466
User 32439 does not improve AUC. Reverting changes.
Training on augumented user 128834 20/50 current_auc = 0.5528083848427843
User 128834 AUC after training: 0.551426267900334
User 128834 does not improve AUC. Reverting changes.
Training on augumented user 65952 21/50 current_auc = 0.5528083848427843
User 65952 AUC after training: 0.5524628556071716
User 65952 does not improve AUC. Reverting changes.
Training on augumented user 66540 22/50 current_auc = 0.5528083848427843
User 66540 AUC after training: 0.553844972549622
User 66540 improves AUC. Keeping the model.
Training on augumented user 92957 23/50 current_auc = 0.553844972549622
User 92957 AUC after training: 0.5525396398817523
User 92957 does not improve AUC. Reverting changes.
Training on augumented user 95161 24/50 current_auc = 0.553844972549622
User 95161 AUC after training: 0.5535378354512995
User 95161 does not improve AUC. Reverting changes.
Training on augumented user 124038 25/50 current_auc = 0.553844972549622
User 124038 AUC after training: 0.552501247744462
User 124038 does not improve AUC. Reverting changes.
Training on augumented user 138391 26/50 current_auc = 0.553844972549622
User 138391 AUC after training: 0.5530387376665259
User 138391 does not improve AUC. Reverting changes.
Training on augumented user 59563 27/50 current_auc = 0.553844972549622
User 59563 AUC after training: 0.5547279917072984
User 59563 improves AUC. Keeping the model.
Training on augumented user 109120 28/50 current_auc = 0.5547279917072984
User 109120 AUC after training: 0.5547663838445887
User 109120 improves AUC. Keeping the model.
Training on augumented user 71947 29/50 current_auc = 0.5547663838445887
User 71947 AUC after training: 0.5562636771989096
User 71947 improves AUC. Keeping the model.
Training on augumented user 88977 30/50 current_auc = 0.5562636771989096
User 88977 AUC after training: 0.5544592467462665
User 88977 does not improve AUC. Reverting changes.
Training on augumented user 47921 31/50 current_auc = 0.5562636771989096
User 47921 AUC after training: 0.5527316005682037
User 47921 does not improve AUC. Reverting changes.
Training on augumented user 136569 32/50 current_auc = 0.5562636771989096
User 136569 AUC after training: 0.5560717165124582
User 136569 does not improve AUC. Reverting changes.
Training on augumented user 61948 33/50 current_auc = 0.5562636771989096
User 61948 AUC after training: 0.5566859907091029
User 61948 improves AUC. Keeping the model.
Training on augumented user 63104 34/50 current_auc = 0.5566859907091029
User 63104 AUC after training: 0.5584136368871656
User 63104 improves AUC. Keeping the model.
Training on augumented user 111395 35/50 current_auc = 0.5584136368871656
User 111395 AUC after training: 0.5567627749836833
User 111395 does not improve AUC. Reverting changes.
Training on augumented user 116405 36/50 current_auc = 0.5584136368871656
User 116405 AUC after training: 0.5581448919261335
User 116405 does not improve AUC. Reverting changes.
Training on augumented user 2254 37/50 current_auc = 0.5584136368871656
User 2254 AUC after training: 0.5582600683380043
User 2254 does not improve AUC. Reverting changes.
Training on augumented user 36168 38/50 current_auc = 0.5584136368871656
User 36168 AUC after training: 0.5575690098667794
User 36168 does not improve AUC. Reverting changes.
Training on augumented user 137937 39/50 current_auc = 0.5584136368871656
User 137937 AUC after training: 0.5566475985718126
User 137937 does not improve AUC. Reverting changes.
Training on augumented user 69695 40/50 current_auc = 0.5584136368871656
User 69695 AUC after training: 0.5597573616923256
User 69695 improves AUC. Keeping the model.
Training on augumented user 30189 41/50 current_auc = 0.5597573616923256
User 30189 AUC after training: 0.5581064997888433
User 30189 does not improve AUC. Reverting changes.
Training on augumented user 57441 42/50 current_auc = 0.5597573616923256
User 57441 AUC after training: 0.5611010864974854
User 57441 improves AUC. Keeping the model.
Training on augumented user 116012 43/50 current_auc = 0.5611010864974854
User 116012 AUC after training: 0.5612162629093561
User 116012 improves AUC. Keeping the model.
Training on augumented user 25569 44/50 current_auc = 0.5612162629093561
User 25569 AUC after training: 0.5598725381041963
User 25569 does not improve AUC. Reverting changes.
Training on augumented user 3022 45/50 current_auc = 0.5612162629093561
User 3022 AUC after training: 0.5605252044381311
User 3022 does not improve AUC. Reverting changes.
Training on augumented user 23924 46/50 current_auc = 0.5612162629093561
User 23924 AUC after training: 0.5580297155142626
User 23924 does not improve AUC. Reverting changes.
Training on augumented user 137373 47/50 current_auc = 0.5612162629093561
User 137373 AUC after training: 0.5611778707720659
User 137373 does not improve AUC. Reverting changes.
Training on augumented user 89760 48/50 current_auc = 0.5612162629093561
User 89760 AUC after training: 0.5605635965754214
User 89760 does not improve AUC. Reverting changes.
Training on augumented user 53756 49/50 current_auc = 0.5612162629093561
User 53756 AUC after training: 0.5592582639075517
User 53756 does not improve AUC. Reverting changes.
[2024-12-02 20:03:23.455500] start test user 48571 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:23.903963] start test user 48571 264/568 recall augumented users by random, augumented_users = [25578, 34593, 22836, 112105, 25078, 38706, 17587, 129513, 19697, 73076, 121943, 9158, 128736, 86183, 46544, 126781, 29964, 58341, 37006, 79379, 4254, 15825, 10831, 134577, 55397, 135809, 117267, 79618, 35669, 82198, 117783, 4232, 42613, 71259, 120372, 126108, 34050, 11871, 7146, 74304, 29913, 83828, 9416, 62848, 69582, 55681, 54875, 38813, 83605, 9856]
[2024-12-02 20:03:23.918167] user = 48571 Cloud 264/568
[2024-12-02 20:03:23.927924] user = 48571 Local 264/568
[2024-12-02 20:03:23.957733] user = 48571 Local+ 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:26.138005] user = 48571 MPDA- 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 25578 0/50 current_auc = 1.0
User 25578 AUC after training: 1.0
User 25578 does not improve AUC. Reverting changes.
Training on augumented user 34593 1/50 current_auc = 1.0
User 34593 AUC after training: 1.0
User 34593 does not improve AUC. Reverting changes.
Training on augumented user 22836 2/50 current_auc = 1.0
User 22836 AUC after training: 1.0
User 22836 does not improve AUC. Reverting changes.
Training on augumented user 112105 3/50 current_auc = 1.0
User 112105 AUC after training: 1.0
User 112105 does not improve AUC. Reverting changes.
Training on augumented user 25078 4/50 current_auc = 1.0
User 25078 AUC after training: 1.0
User 25078 does not improve AUC. Reverting changes.
Training on augumented user 38706 5/50 current_auc = 1.0
User 38706 AUC after training: 1.0
User 38706 does not improve AUC. Reverting changes.
Training on augumented user 17587 6/50 current_auc = 1.0
User 17587 AUC after training: 1.0
User 17587 does not improve AUC. Reverting changes.
Training on augumented user 129513 7/50 current_auc = 1.0
User 129513 AUC after training: 1.0
User 129513 does not improve AUC. Reverting changes.
Training on augumented user 19697 8/50 current_auc = 1.0
User 19697 AUC after training: 1.0
User 19697 does not improve AUC. Reverting changes.
Training on augumented user 73076 9/50 current_auc = 1.0
User 73076 AUC after training: 1.0
User 73076 does not improve AUC. Reverting changes.
Training on augumented user 121943 10/50 current_auc = 1.0
User 121943 AUC after training: 1.0
User 121943 does not improve AUC. Reverting changes.
Training on augumented user 9158 11/50 current_auc = 1.0
User 9158 AUC after training: 1.0
User 9158 does not improve AUC. Reverting changes.
Training on augumented user 128736 12/50 current_auc = 1.0
User 128736 AUC after training: 1.0
User 128736 does not improve AUC. Reverting changes.
Training on augumented user 86183 13/50 current_auc = 1.0
User 86183 AUC after training: 1.0
User 86183 does not improve AUC. Reverting changes.
Training on augumented user 46544 14/50 current_auc = 1.0
User 46544 AUC after training: 1.0
User 46544 does not improve AUC. Reverting changes.
Training on augumented user 126781 15/50 current_auc = 1.0
User 126781 AUC after training: 1.0
User 126781 does not improve AUC. Reverting changes.
Training on augumented user 29964 16/50 current_auc = 1.0
User 29964 AUC after training: 1.0
User 29964 does not improve AUC. Reverting changes.
Training on augumented user 58341 17/50 current_auc = 1.0
User 58341 AUC after training: 1.0
User 58341 does not improve AUC. Reverting changes.
Training on augumented user 37006 18/50 current_auc = 1.0
User 37006 AUC after training: 1.0
User 37006 does not improve AUC. Reverting changes.
Training on augumented user 79379 19/50 current_auc = 1.0
User 79379 AUC after training: 1.0
User 79379 does not improve AUC. Reverting changes.
Training on augumented user 4254 20/50 current_auc = 1.0
User 4254 AUC after training: 1.0
User 4254 does not improve AUC. Reverting changes.
Training on augumented user 15825 21/50 current_auc = 1.0
User 15825 AUC after training: 1.0
User 15825 does not improve AUC. Reverting changes.
Training on augumented user 10831 22/50 current_auc = 1.0
User 10831 AUC after training: 1.0
User 10831 does not improve AUC. Reverting changes.
Training on augumented user 134577 23/50 current_auc = 1.0
User 134577 AUC after training: 1.0
User 134577 does not improve AUC. Reverting changes.
Training on augumented user 55397 24/50 current_auc = 1.0
User 55397 AUC after training: 1.0
User 55397 does not improve AUC. Reverting changes.
Training on augumented user 135809 25/50 current_auc = 1.0
User 135809 AUC after training: 1.0
User 135809 does not improve AUC. Reverting changes.
Training on augumented user 117267 26/50 current_auc = 1.0
User 117267 AUC after training: 1.0
User 117267 does not improve AUC. Reverting changes.
Training on augumented user 79618 27/50 current_auc = 1.0
User 79618 AUC after training: 1.0
User 79618 does not improve AUC. Reverting changes.
Training on augumented user 35669 28/50 current_auc = 1.0
User 35669 AUC after training: 1.0
User 35669 does not improve AUC. Reverting changes.
Training on augumented user 82198 29/50 current_auc = 1.0
User 82198 AUC after training: 1.0
User 82198 does not improve AUC. Reverting changes.
Training on augumented user 117783 30/50 current_auc = 1.0
User 117783 AUC after training: 1.0
User 117783 does not improve AUC. Reverting changes.
Training on augumented user 4232 31/50 current_auc = 1.0
User 4232 AUC after training: 1.0
User 4232 does not improve AUC. Reverting changes.
Training on augumented user 42613 32/50 current_auc = 1.0
User 42613 AUC after training: 1.0
User 42613 does not improve AUC. Reverting changes.
Training on augumented user 71259 33/50 current_auc = 1.0
User 71259 AUC after training: 1.0
User 71259 does not improve AUC. Reverting changes.
Training on augumented user 120372 34/50 current_auc = 1.0
User 120372 AUC after training: 1.0
User 120372 does not improve AUC. Reverting changes.
Training on augumented user 126108 35/50 current_auc = 1.0
User 126108 AUC after training: 1.0
User 126108 does not improve AUC. Reverting changes.
Training on augumented user 34050 36/50 current_auc = 1.0
User 34050 AUC after training: 1.0
User 34050 does not improve AUC. Reverting changes.
Training on augumented user 11871 37/50 current_auc = 1.0
User 11871 AUC after training: 1.0
User 11871 does not improve AUC. Reverting changes.
Training on augumented user 7146 38/50 current_auc = 1.0
User 7146 AUC after training: 1.0
User 7146 does not improve AUC. Reverting changes.
Training on augumented user 74304 39/50 current_auc = 1.0
User 74304 AUC after training: 1.0
User 74304 does not improve AUC. Reverting changes.
Training on augumented user 29913 40/50 current_auc = 1.0
User 29913 AUC after training: 1.0
User 29913 does not improve AUC. Reverting changes.
Training on augumented user 83828 41/50 current_auc = 1.0
User 83828 AUC after training: 1.0
User 83828 does not improve AUC. Reverting changes.
Training on augumented user 9416 42/50 current_auc = 1.0
User 9416 AUC after training: 1.0
User 9416 does not improve AUC. Reverting changes.
Training on augumented user 62848 43/50 current_auc = 1.0
User 62848 AUC after training: 1.0
User 62848 does not improve AUC. Reverting changes.
Training on augumented user 69582 44/50 current_auc = 1.0
User 69582 AUC after training: 1.0
User 69582 does not improve AUC. Reverting changes.
Training on augumented user 55681 45/50 current_auc = 1.0
User 55681 AUC after training: 1.0
User 55681 does not improve AUC. Reverting changes.
Training on augumented user 54875 46/50 current_auc = 1.0
User 54875 AUC after training: 1.0
User 54875 does not improve AUC. Reverting changes.
Training on augumented user 38813 47/50 current_auc = 1.0
User 38813 AUC after training: 1.0
User 38813 does not improve AUC. Reverting changes.
Training on augumented user 83605 48/50 current_auc = 1.0
User 83605 AUC after training: 1.0
User 83605 does not improve AUC. Reverting changes.
Training on augumented user 9856 49/50 current_auc = 1.0
User 9856 AUC after training: 1.0
User 9856 does not improve AUC. Reverting changes.
[2024-12-02 20:03:55.716552] start test user 48579 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:56.259973] start test user 48579 265/568 recall augumented users by random, augumented_users = [117876, 21754, 35004, 55363, 117100, 21129, 50768, 59280, 88839, 18134, 131031, 31936, 92969, 27075, 72022, 974, 54672, 70155, 61754, 25012, 114795, 105417, 44110, 87241, 501, 122063, 67147, 88931, 86025, 39929, 7900, 101262, 41391, 103557, 470, 5593, 76821, 72878, 77811, 5455, 123693, 12692, 54326, 118692, 27360, 77200, 75645, 23109, 101619, 132286]
[2024-12-02 20:03:56.274829] user = 48579 Cloud 265/568
[2024-12-02 20:03:56.284266] user = 48579 Local 265/568
[2024-12-02 20:03:56.356417] user = 48579 Local+ 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:59.359863] user = 48579 MPDA- 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 117876 0/50 current_auc = 0.375
User 117876 AUC after training: 0.375
User 117876 does not improve AUC. Reverting changes.
Training on augumented user 21754 1/50 current_auc = 0.375
User 21754 AUC after training: 0.375
User 21754 does not improve AUC. Reverting changes.
Training on augumented user 35004 2/50 current_auc = 0.375
User 35004 AUC after training: 0.375
User 35004 does not improve AUC. Reverting changes.
Training on augumented user 55363 3/50 current_auc = 0.375
User 55363 AUC after training: 0.375
User 55363 does not improve AUC. Reverting changes.
Training on augumented user 117100 4/50 current_auc = 0.375
User 117100 AUC after training: 0.375
User 117100 does not improve AUC. Reverting changes.
Training on augumented user 21129 5/50 current_auc = 0.375
User 21129 AUC after training: 0.375
User 21129 does not improve AUC. Reverting changes.
Training on augumented user 50768 6/50 current_auc = 0.375
User 50768 AUC after training: 0.375
User 50768 does not improve AUC. Reverting changes.
Training on augumented user 59280 7/50 current_auc = 0.375
User 59280 AUC after training: 0.375
User 59280 does not improve AUC. Reverting changes.
Training on augumented user 88839 8/50 current_auc = 0.375
User 88839 AUC after training: 0.375
User 88839 does not improve AUC. Reverting changes.
Training on augumented user 18134 9/50 current_auc = 0.375
User 18134 AUC after training: 0.375
User 18134 does not improve AUC. Reverting changes.
Training on augumented user 131031 10/50 current_auc = 0.375
User 131031 AUC after training: 0.375
User 131031 does not improve AUC. Reverting changes.
Training on augumented user 31936 11/50 current_auc = 0.375
User 31936 AUC after training: 0.375
User 31936 does not improve AUC. Reverting changes.
Training on augumented user 92969 12/50 current_auc = 0.375
User 92969 AUC after training: 0.375
User 92969 does not improve AUC. Reverting changes.
Training on augumented user 27075 13/50 current_auc = 0.375
User 27075 AUC after training: 0.375
User 27075 does not improve AUC. Reverting changes.
Training on augumented user 72022 14/50 current_auc = 0.375
User 72022 AUC after training: 0.375
User 72022 does not improve AUC. Reverting changes.
Training on augumented user 974 15/50 current_auc = 0.375
User 974 AUC after training: 0.375
User 974 does not improve AUC. Reverting changes.
Training on augumented user 54672 16/50 current_auc = 0.375
User 54672 AUC after training: 0.375
User 54672 does not improve AUC. Reverting changes.
Training on augumented user 70155 17/50 current_auc = 0.375
User 70155 AUC after training: 0.375
User 70155 does not improve AUC. Reverting changes.
Training on augumented user 61754 18/50 current_auc = 0.375
User 61754 AUC after training: 0.375
User 61754 does not improve AUC. Reverting changes.
Training on augumented user 25012 19/50 current_auc = 0.375
User 25012 AUC after training: 0.375
User 25012 does not improve AUC. Reverting changes.
Training on augumented user 114795 20/50 current_auc = 0.375
User 114795 AUC after training: 0.375
User 114795 does not improve AUC. Reverting changes.
Training on augumented user 105417 21/50 current_auc = 0.375
User 105417 AUC after training: 0.375
User 105417 does not improve AUC. Reverting changes.
Training on augumented user 44110 22/50 current_auc = 0.375
User 44110 AUC after training: 0.375
User 44110 does not improve AUC. Reverting changes.
Training on augumented user 87241 23/50 current_auc = 0.375
User 87241 AUC after training: 0.375
User 87241 does not improve AUC. Reverting changes.
Training on augumented user 501 24/50 current_auc = 0.375
User 501 AUC after training: 0.375
User 501 does not improve AUC. Reverting changes.
Training on augumented user 122063 25/50 current_auc = 0.375
User 122063 AUC after training: 0.375
User 122063 does not improve AUC. Reverting changes.
Training on augumented user 67147 26/50 current_auc = 0.375
User 67147 AUC after training: 0.375
User 67147 does not improve AUC. Reverting changes.
Training on augumented user 88931 27/50 current_auc = 0.375
User 88931 AUC after training: 0.375
User 88931 does not improve AUC. Reverting changes.
Training on augumented user 86025 28/50 current_auc = 0.375
User 86025 AUC after training: 0.375
User 86025 does not improve AUC. Reverting changes.
Training on augumented user 39929 29/50 current_auc = 0.375
User 39929 AUC after training: 0.375
User 39929 does not improve AUC. Reverting changes.
Training on augumented user 7900 30/50 current_auc = 0.375
User 7900 AUC after training: 0.375
User 7900 does not improve AUC. Reverting changes.
Training on augumented user 101262 31/50 current_auc = 0.375
User 101262 AUC after training: 0.375
User 101262 does not improve AUC. Reverting changes.
Training on augumented user 41391 32/50 current_auc = 0.375
User 41391 AUC after training: 0.375
User 41391 does not improve AUC. Reverting changes.
Training on augumented user 103557 33/50 current_auc = 0.375
User 103557 AUC after training: 0.375
User 103557 does not improve AUC. Reverting changes.
Training on augumented user 470 34/50 current_auc = 0.375
User 470 AUC after training: 0.375
User 470 does not improve AUC. Reverting changes.
Training on augumented user 5593 35/50 current_auc = 0.375
User 5593 AUC after training: 0.375
User 5593 does not improve AUC. Reverting changes.
Training on augumented user 76821 36/50 current_auc = 0.375
User 76821 AUC after training: 0.375
User 76821 does not improve AUC. Reverting changes.
Training on augumented user 72878 37/50 current_auc = 0.375
User 72878 AUC after training: 0.375
User 72878 does not improve AUC. Reverting changes.
Training on augumented user 77811 38/50 current_auc = 0.375
User 77811 AUC after training: 0.375
User 77811 does not improve AUC. Reverting changes.
Training on augumented user 5455 39/50 current_auc = 0.375
User 5455 AUC after training: 0.375
User 5455 does not improve AUC. Reverting changes.
Training on augumented user 123693 40/50 current_auc = 0.375
User 123693 AUC after training: 0.375
User 123693 does not improve AUC. Reverting changes.
Training on augumented user 12692 41/50 current_auc = 0.375
User 12692 AUC after training: 0.375
User 12692 does not improve AUC. Reverting changes.
Training on augumented user 54326 42/50 current_auc = 0.375
User 54326 AUC after training: 0.375
User 54326 does not improve AUC. Reverting changes.
Training on augumented user 118692 43/50 current_auc = 0.375
User 118692 AUC after training: 0.375
User 118692 does not improve AUC. Reverting changes.
Training on augumented user 27360 44/50 current_auc = 0.375
User 27360 AUC after training: 0.375
User 27360 does not improve AUC. Reverting changes.
Training on augumented user 77200 45/50 current_auc = 0.375
User 77200 AUC after training: 0.375
User 77200 does not improve AUC. Reverting changes.
Training on augumented user 75645 46/50 current_auc = 0.375
User 75645 AUC after training: 0.375
User 75645 does not improve AUC. Reverting changes.
Training on augumented user 23109 47/50 current_auc = 0.375
User 23109 AUC after training: 0.375
User 23109 does not improve AUC. Reverting changes.
Training on augumented user 101619 48/50 current_auc = 0.375
User 101619 AUC after training: 0.375
User 101619 does not improve AUC. Reverting changes.
Training on augumented user 132286 49/50 current_auc = 0.375
User 132286 AUC after training: 0.375
User 132286 does not improve AUC. Reverting changes.
[2024-12-02 20:04:24.051213] start test user 48591 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:24.508461] start test user 48591 266/568 recall augumented users by random, augumented_users = [98929, 15482, 88169, 86595, 26593, 11175, 6936, 70445, 76151, 43760, 68897, 111937, 112424, 24279, 3436, 107127, 53423, 6671, 55264, 59891, 58577, 138194, 77150, 51701, 89712, 120429, 131179, 127124, 48310, 90660, 63553, 39494, 53700, 135566, 112076, 105215, 118174, 46968, 24012, 30565, 38768, 43245, 10089, 22838, 44452, 61784, 129883, 5269, 11140, 130614]
[2024-12-02 20:04:24.523149] user = 48591 Cloud 266/568
[2024-12-02 20:04:24.535625] user = 48591 Local 266/568
[2024-12-02 20:04:24.584020] user = 48591 Local+ 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:26.863788] user = 48591 MPDA- 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5907407407407408
Training on augumented user 98929 0/50 current_auc = 0.5907407407407408
User 98929 AUC after training: 0.5851851851851851
User 98929 does not improve AUC. Reverting changes.
Training on augumented user 15482 1/50 current_auc = 0.5907407407407408
User 15482 AUC after training: 0.5888888888888889
User 15482 does not improve AUC. Reverting changes.
Training on augumented user 88169 2/50 current_auc = 0.5907407407407408
User 88169 AUC after training: 0.5833333333333334
User 88169 does not improve AUC. Reverting changes.
Training on augumented user 86595 3/50 current_auc = 0.5907407407407408
User 86595 AUC after training: 0.5935185185185186
User 86595 improves AUC. Keeping the model.
Training on augumented user 26593 4/50 current_auc = 0.5935185185185186
User 26593 AUC after training: 0.5879629629629629
User 26593 does not improve AUC. Reverting changes.
Training on augumented user 11175 5/50 current_auc = 0.5935185185185186
User 11175 AUC after training: 0.5898148148148148
User 11175 does not improve AUC. Reverting changes.
Training on augumented user 6936 6/50 current_auc = 0.5935185185185186
User 6936 AUC after training: 0.5898148148148148
User 6936 does not improve AUC. Reverting changes.
Training on augumented user 70445 7/50 current_auc = 0.5935185185185186
User 70445 AUC after training: 0.5907407407407408
User 70445 does not improve AUC. Reverting changes.
Training on augumented user 76151 8/50 current_auc = 0.5935185185185186
User 76151 AUC after training: 0.5907407407407408
User 76151 does not improve AUC. Reverting changes.
Training on augumented user 43760 9/50 current_auc = 0.5935185185185186
User 43760 AUC after training: 0.5916666666666667
User 43760 does not improve AUC. Reverting changes.
Training on augumented user 68897 10/50 current_auc = 0.5935185185185186
User 68897 AUC after training: 0.5907407407407408
User 68897 does not improve AUC. Reverting changes.
Training on augumented user 111937 11/50 current_auc = 0.5935185185185186
User 111937 AUC after training: 0.5935185185185186
User 111937 does not improve AUC. Reverting changes.
Training on augumented user 112424 12/50 current_auc = 0.5935185185185186
User 112424 AUC after training: 0.5898148148148148
User 112424 does not improve AUC. Reverting changes.
Training on augumented user 24279 13/50 current_auc = 0.5935185185185186
User 24279 AUC after training: 0.5962962962962963
User 24279 improves AUC. Keeping the model.
Training on augumented user 3436 14/50 current_auc = 0.5962962962962963
User 3436 AUC after training: 0.5953703703703703
User 3436 does not improve AUC. Reverting changes.
Training on augumented user 107127 15/50 current_auc = 0.5962962962962963
User 107127 AUC after training: 0.5981481481481481
User 107127 improves AUC. Keeping the model.
Training on augumented user 53423 16/50 current_auc = 0.5981481481481481
User 53423 AUC after training: 0.5972222222222222
User 53423 does not improve AUC. Reverting changes.
Training on augumented user 6671 17/50 current_auc = 0.5981481481481481
User 6671 AUC after training: 0.5972222222222223
User 6671 does not improve AUC. Reverting changes.
Training on augumented user 55264 18/50 current_auc = 0.5981481481481481
User 55264 AUC after training: 0.5935185185185186
User 55264 does not improve AUC. Reverting changes.
Training on augumented user 59891 19/50 current_auc = 0.5981481481481481
User 59891 AUC after training: 0.5944444444444444
User 59891 does not improve AUC. Reverting changes.
Training on augumented user 58577 20/50 current_auc = 0.5981481481481481
User 58577 AUC after training: 0.5962962962962963
User 58577 does not improve AUC. Reverting changes.
Training on augumented user 138194 21/50 current_auc = 0.5981481481481481
User 138194 AUC after training: 0.5981481481481481
User 138194 does not improve AUC. Reverting changes.
Training on augumented user 77150 22/50 current_auc = 0.5981481481481481
User 77150 AUC after training: 0.5990740740740741
User 77150 improves AUC. Keeping the model.
Training on augumented user 51701 23/50 current_auc = 0.5990740740740741
User 51701 AUC after training: 0.5990740740740741
User 51701 does not improve AUC. Reverting changes.
Training on augumented user 89712 24/50 current_auc = 0.5990740740740741
User 89712 AUC after training: 0.5990740740740741
User 89712 does not improve AUC. Reverting changes.
Training on augumented user 120429 25/50 current_auc = 0.5990740740740741
User 120429 AUC after training: 0.6
User 120429 improves AUC. Keeping the model.
Training on augumented user 131179 26/50 current_auc = 0.6
User 131179 AUC after training: 0.5981481481481482
User 131179 does not improve AUC. Reverting changes.
Training on augumented user 127124 27/50 current_auc = 0.6
User 127124 AUC after training: 0.5944444444444444
User 127124 does not improve AUC. Reverting changes.
Training on augumented user 48310 28/50 current_auc = 0.6
User 48310 AUC after training: 0.600925925925926
User 48310 improves AUC. Keeping the model.
Training on augumented user 90660 29/50 current_auc = 0.600925925925926
User 90660 AUC after training: 0.5981481481481481
User 90660 does not improve AUC. Reverting changes.
Training on augumented user 63553 30/50 current_auc = 0.600925925925926
User 63553 AUC after training: 0.5981481481481481
User 63553 does not improve AUC. Reverting changes.
Training on augumented user 39494 31/50 current_auc = 0.600925925925926
User 39494 AUC after training: 0.5972222222222223
User 39494 does not improve AUC. Reverting changes.
Training on augumented user 53700 32/50 current_auc = 0.600925925925926
User 53700 AUC after training: 0.6009259259259259
User 53700 does not improve AUC. Reverting changes.
Training on augumented user 135566 33/50 current_auc = 0.600925925925926
User 135566 AUC after training: 0.600925925925926
User 135566 does not improve AUC. Reverting changes.
Training on augumented user 112076 34/50 current_auc = 0.600925925925926
User 112076 AUC after training: 0.6
User 112076 does not improve AUC. Reverting changes.
Training on augumented user 105215 35/50 current_auc = 0.600925925925926
User 105215 AUC after training: 0.5981481481481482
User 105215 does not improve AUC. Reverting changes.
Training on augumented user 118174 36/50 current_auc = 0.600925925925926
User 118174 AUC after training: 0.5888888888888889
User 118174 does not improve AUC. Reverting changes.
Training on augumented user 46968 37/50 current_auc = 0.600925925925926
User 46968 AUC after training: 0.5990740740740741
User 46968 does not improve AUC. Reverting changes.
Training on augumented user 24012 38/50 current_auc = 0.600925925925926
User 24012 AUC after training: 0.5972222222222223
User 24012 does not improve AUC. Reverting changes.
Training on augumented user 30565 39/50 current_auc = 0.600925925925926
User 30565 AUC after training: 0.6
User 30565 does not improve AUC. Reverting changes.
Training on augumented user 38768 40/50 current_auc = 0.600925925925926
User 38768 AUC after training: 0.6
User 38768 does not improve AUC. Reverting changes.
Training on augumented user 43245 41/50 current_auc = 0.600925925925926
User 43245 AUC after training: 0.600925925925926
User 43245 does not improve AUC. Reverting changes.
Training on augumented user 10089 42/50 current_auc = 0.600925925925926
User 10089 AUC after training: 0.6000000000000001
User 10089 does not improve AUC. Reverting changes.
Training on augumented user 22838 43/50 current_auc = 0.600925925925926
User 22838 AUC after training: 0.6
User 22838 does not improve AUC. Reverting changes.
Training on augumented user 44452 44/50 current_auc = 0.600925925925926
User 44452 AUC after training: 0.5972222222222222
User 44452 does not improve AUC. Reverting changes.
Training on augumented user 61784 45/50 current_auc = 0.600925925925926
User 61784 AUC after training: 0.6009259259259259
User 61784 does not improve AUC. Reverting changes.
Training on augumented user 129883 46/50 current_auc = 0.600925925925926
User 129883 AUC after training: 0.5981481481481481
User 129883 does not improve AUC. Reverting changes.
Training on augumented user 5269 47/50 current_auc = 0.600925925925926
User 5269 AUC after training: 0.6
User 5269 does not improve AUC. Reverting changes.
Training on augumented user 11140 48/50 current_auc = 0.600925925925926
User 11140 AUC after training: 0.5981481481481482
User 11140 does not improve AUC. Reverting changes.
Training on augumented user 130614 49/50 current_auc = 0.600925925925926
User 130614 AUC after training: 0.6009259259259259
User 130614 does not improve AUC. Reverting changes.
[2024-12-02 20:04:59.744562] start test user 48596 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:00.216267] start test user 48596 267/568 recall augumented users by random, augumented_users = [131062, 2416, 106952, 87555, 99466, 12385, 76557, 94082, 28563, 39369, 102180, 66960, 130228, 85183, 25739, 49569, 30052, 44611, 134369, 108925, 44985, 120625, 134494, 62235, 106491, 25922, 100877, 52454, 52318, 106786, 33697, 27889, 61462, 35415, 134667, 88690, 21724, 48999, 105168, 58149, 59721, 83596, 7766, 33266, 107920, 7672, 26984, 64064, 63506, 20066]
[2024-12-02 20:05:00.231932] user = 48596 Cloud 267/568
[2024-12-02 20:05:00.242659] user = 48596 Local 267/568
[2024-12-02 20:05:00.377488] user = 48596 Local+ 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:02.627617] user = 48596 MPDA- 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6554878048780488
Training on augumented user 131062 0/50 current_auc = 0.6554878048780488
User 131062 AUC after training: 0.6554878048780488
User 131062 does not improve AUC. Reverting changes.
Training on augumented user 2416 1/50 current_auc = 0.6554878048780488
User 2416 AUC after training: 0.6554878048780488
User 2416 does not improve AUC. Reverting changes.
Training on augumented user 106952 2/50 current_auc = 0.6554878048780488
User 106952 AUC after training: 0.6554878048780488
User 106952 does not improve AUC. Reverting changes.
Training on augumented user 87555 3/50 current_auc = 0.6554878048780488
User 87555 AUC after training: 0.6554878048780488
User 87555 does not improve AUC. Reverting changes.
Training on augumented user 99466 4/50 current_auc = 0.6554878048780488
User 99466 AUC after training: 0.6524390243902439
User 99466 does not improve AUC. Reverting changes.
Training on augumented user 12385 5/50 current_auc = 0.6554878048780488
User 12385 AUC after training: 0.6524390243902439
User 12385 does not improve AUC. Reverting changes.
Training on augumented user 76557 6/50 current_auc = 0.6554878048780488
User 76557 AUC after training: 0.6615853658536586
User 76557 improves AUC. Keeping the model.
Training on augumented user 94082 7/50 current_auc = 0.6615853658536586
User 94082 AUC after training: 0.6615853658536586
User 94082 does not improve AUC. Reverting changes.
Training on augumented user 28563 8/50 current_auc = 0.6615853658536586
User 28563 AUC after training: 0.6646341463414633
User 28563 improves AUC. Keeping the model.
Training on augumented user 39369 9/50 current_auc = 0.6646341463414633
User 39369 AUC after training: 0.6585365853658537
User 39369 does not improve AUC. Reverting changes.
Training on augumented user 102180 10/50 current_auc = 0.6646341463414633
User 102180 AUC after training: 0.6615853658536586
User 102180 does not improve AUC. Reverting changes.
Training on augumented user 66960 11/50 current_auc = 0.6646341463414633
User 66960 AUC after training: 0.6646341463414633
User 66960 does not improve AUC. Reverting changes.
Training on augumented user 130228 12/50 current_auc = 0.6646341463414633
User 130228 AUC after training: 0.6646341463414633
User 130228 does not improve AUC. Reverting changes.
Training on augumented user 85183 13/50 current_auc = 0.6646341463414633
User 85183 AUC after training: 0.6646341463414633
User 85183 does not improve AUC. Reverting changes.
Training on augumented user 25739 14/50 current_auc = 0.6646341463414633
User 25739 AUC after training: 0.6615853658536586
User 25739 does not improve AUC. Reverting changes.
Training on augumented user 49569 15/50 current_auc = 0.6646341463414633
User 49569 AUC after training: 0.6615853658536586
User 49569 does not improve AUC. Reverting changes.
Training on augumented user 30052 16/50 current_auc = 0.6646341463414633
User 30052 AUC after training: 0.6646341463414633
User 30052 does not improve AUC. Reverting changes.
Training on augumented user 44611 17/50 current_auc = 0.6646341463414633
User 44611 AUC after training: 0.6646341463414633
User 44611 does not improve AUC. Reverting changes.
Training on augumented user 134369 18/50 current_auc = 0.6646341463414633
User 134369 AUC after training: 0.6615853658536586
User 134369 does not improve AUC. Reverting changes.
Training on augumented user 108925 19/50 current_auc = 0.6646341463414633
User 108925 AUC after training: 0.6615853658536586
User 108925 does not improve AUC. Reverting changes.
Training on augumented user 44985 20/50 current_auc = 0.6646341463414633
User 44985 AUC after training: 0.6646341463414633
User 44985 does not improve AUC. Reverting changes.
Training on augumented user 120625 21/50 current_auc = 0.6646341463414633
User 120625 AUC after training: 0.6615853658536586
User 120625 does not improve AUC. Reverting changes.
Training on augumented user 134494 22/50 current_auc = 0.6646341463414633
User 134494 AUC after training: 0.6615853658536586
User 134494 does not improve AUC. Reverting changes.
Training on augumented user 62235 23/50 current_auc = 0.6646341463414633
User 62235 AUC after training: 0.6646341463414633
User 62235 does not improve AUC. Reverting changes.
Training on augumented user 106491 24/50 current_auc = 0.6646341463414633
User 106491 AUC after training: 0.6646341463414633
User 106491 does not improve AUC. Reverting changes.
Training on augumented user 25922 25/50 current_auc = 0.6646341463414633
User 25922 AUC after training: 0.6646341463414633
User 25922 does not improve AUC. Reverting changes.
Training on augumented user 100877 26/50 current_auc = 0.6646341463414633
User 100877 AUC after training: 0.6646341463414633
User 100877 does not improve AUC. Reverting changes.
Training on augumented user 52454 27/50 current_auc = 0.6646341463414633
User 52454 AUC after training: 0.6646341463414633
User 52454 does not improve AUC. Reverting changes.
Training on augumented user 52318 28/50 current_auc = 0.6646341463414633
User 52318 AUC after training: 0.6646341463414633
User 52318 does not improve AUC. Reverting changes.
Training on augumented user 106786 29/50 current_auc = 0.6646341463414633
User 106786 AUC after training: 0.6646341463414633
User 106786 does not improve AUC. Reverting changes.
Training on augumented user 33697 30/50 current_auc = 0.6646341463414633
User 33697 AUC after training: 0.6585365853658537
User 33697 does not improve AUC. Reverting changes.
Training on augumented user 27889 31/50 current_auc = 0.6646341463414633
User 27889 AUC after training: 0.6646341463414633
User 27889 does not improve AUC. Reverting changes.
Training on augumented user 61462 32/50 current_auc = 0.6646341463414633
User 61462 AUC after training: 0.6615853658536586
User 61462 does not improve AUC. Reverting changes.
Training on augumented user 35415 33/50 current_auc = 0.6646341463414633
User 35415 AUC after training: 0.6646341463414633
User 35415 does not improve AUC. Reverting changes.
Training on augumented user 134667 34/50 current_auc = 0.6646341463414633
User 134667 AUC after training: 0.6707317073170731
User 134667 improves AUC. Keeping the model.
Training on augumented user 88690 35/50 current_auc = 0.6707317073170731
User 88690 AUC after training: 0.6707317073170731
User 88690 does not improve AUC. Reverting changes.
Training on augumented user 21724 36/50 current_auc = 0.6707317073170731
User 21724 AUC after training: 0.6707317073170731
User 21724 does not improve AUC. Reverting changes.
Training on augumented user 48999 37/50 current_auc = 0.6707317073170731
User 48999 AUC after training: 0.6676829268292683
User 48999 does not improve AUC. Reverting changes.
Training on augumented user 105168 38/50 current_auc = 0.6707317073170731
User 105168 AUC after training: 0.6676829268292683
User 105168 does not improve AUC. Reverting changes.
Training on augumented user 58149 39/50 current_auc = 0.6707317073170731
User 58149 AUC after training: 0.6707317073170731
User 58149 does not improve AUC. Reverting changes.
Training on augumented user 59721 40/50 current_auc = 0.6707317073170731
User 59721 AUC after training: 0.6707317073170731
User 59721 does not improve AUC. Reverting changes.
Training on augumented user 83596 41/50 current_auc = 0.6707317073170731
User 83596 AUC after training: 0.6676829268292683
User 83596 does not improve AUC. Reverting changes.
Training on augumented user 7766 42/50 current_auc = 0.6707317073170731
User 7766 AUC after training: 0.6676829268292683
User 7766 does not improve AUC. Reverting changes.
Training on augumented user 33266 43/50 current_auc = 0.6707317073170731
User 33266 AUC after training: 0.6646341463414633
User 33266 does not improve AUC. Reverting changes.
Training on augumented user 107920 44/50 current_auc = 0.6707317073170731
User 107920 AUC after training: 0.6707317073170731
User 107920 does not improve AUC. Reverting changes.
Training on augumented user 7672 45/50 current_auc = 0.6707317073170731
User 7672 AUC after training: 0.6676829268292683
User 7672 does not improve AUC. Reverting changes.
Training on augumented user 26984 46/50 current_auc = 0.6707317073170731
User 26984 AUC after training: 0.6707317073170731
User 26984 does not improve AUC. Reverting changes.
Training on augumented user 64064 47/50 current_auc = 0.6707317073170731
User 64064 AUC after training: 0.6676829268292683
User 64064 does not improve AUC. Reverting changes.
Training on augumented user 63506 48/50 current_auc = 0.6707317073170731
User 63506 AUC after training: 0.6707317073170731
User 63506 does not improve AUC. Reverting changes.
Training on augumented user 20066 49/50 current_auc = 0.6707317073170731
User 20066 AUC after training: 0.6585365853658537
User 20066 does not improve AUC. Reverting changes.
[2024-12-02 20:05:31.561736] start test user 48627 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:31.976096] start test user 48627 268/568 recall augumented users by random, augumented_users = [126479, 121119, 35618, 63349, 26795, 83286, 136778, 76636, 113456, 118928, 115581, 80758, 7858, 51421, 84789, 82206, 33707, 43045, 39734, 116720, 11671, 106027, 60585, 114369, 100618, 76918, 96062, 46472, 7197, 21645, 23048, 119920, 97359, 119160, 22816, 60973, 47286, 134951, 57491, 116130, 116565, 85934, 118106, 32512, 59996, 63804, 88761, 77558, 56225, 84999]
[2024-12-02 20:05:31.990596] user = 48627 Cloud 268/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:05:31.996603] user = 48627 Local 268/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:05:32.031633] user = 48627 Local+ 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:05:34.499971] user = 48627 MPDA- 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 126479 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126479 AUC after training: 0.5
User 126479 does not improve AUC. Reverting changes.
Training on augumented user 121119 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121119 AUC after training: 0.5
User 121119 does not improve AUC. Reverting changes.
Training on augumented user 35618 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35618 AUC after training: 0.5
User 35618 does not improve AUC. Reverting changes.
Training on augumented user 63349 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63349 AUC after training: 0.5
User 63349 does not improve AUC. Reverting changes.
Training on augumented user 26795 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26795 AUC after training: 0.5
User 26795 does not improve AUC. Reverting changes.
Training on augumented user 83286 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83286 AUC after training: 0.5
User 83286 does not improve AUC. Reverting changes.
Training on augumented user 136778 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136778 AUC after training: 0.5
User 136778 does not improve AUC. Reverting changes.
Training on augumented user 76636 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76636 AUC after training: 0.5
User 76636 does not improve AUC. Reverting changes.
Training on augumented user 113456 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113456 AUC after training: 0.5
User 113456 does not improve AUC. Reverting changes.
Training on augumented user 118928 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118928 AUC after training: 0.5
User 118928 does not improve AUC. Reverting changes.
Training on augumented user 115581 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115581 AUC after training: 0.5
User 115581 does not improve AUC. Reverting changes.
Training on augumented user 80758 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80758 AUC after training: 0.5
User 80758 does not improve AUC. Reverting changes.
Training on augumented user 7858 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7858 AUC after training: 0.5
User 7858 does not improve AUC. Reverting changes.
Training on augumented user 51421 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51421 AUC after training: 0.5
User 51421 does not improve AUC. Reverting changes.
Training on augumented user 84789 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84789 AUC after training: 0.5
User 84789 does not improve AUC. Reverting changes.
Training on augumented user 82206 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82206 AUC after training: 0.5
User 82206 does not improve AUC. Reverting changes.
Training on augumented user 33707 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33707 AUC after training: 0.5
User 33707 does not improve AUC. Reverting changes.
Training on augumented user 43045 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43045 AUC after training: 0.5
User 43045 does not improve AUC. Reverting changes.
Training on augumented user 39734 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39734 AUC after training: 0.5
User 39734 does not improve AUC. Reverting changes.
Training on augumented user 116720 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116720 AUC after training: 0.5
User 116720 does not improve AUC. Reverting changes.
Training on augumented user 11671 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11671 AUC after training: 0.5
User 11671 does not improve AUC. Reverting changes.
Training on augumented user 106027 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106027 AUC after training: 0.5
User 106027 does not improve AUC. Reverting changes.
Training on augumented user 60585 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60585 AUC after training: 0.5
User 60585 does not improve AUC. Reverting changes.
Training on augumented user 114369 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114369 AUC after training: 0.5
User 114369 does not improve AUC. Reverting changes.
Training on augumented user 100618 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100618 AUC after training: 0.5
User 100618 does not improve AUC. Reverting changes.
Training on augumented user 76918 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76918 AUC after training: 0.5
User 76918 does not improve AUC. Reverting changes.
Training on augumented user 96062 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96062 AUC after training: 0.5
User 96062 does not improve AUC. Reverting changes.
Training on augumented user 46472 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46472 AUC after training: 0.5
User 46472 does not improve AUC. Reverting changes.
Training on augumented user 7197 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7197 AUC after training: 0.5
User 7197 does not improve AUC. Reverting changes.
Training on augumented user 21645 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21645 AUC after training: 0.5
User 21645 does not improve AUC. Reverting changes.
Training on augumented user 23048 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23048 AUC after training: 0.5
User 23048 does not improve AUC. Reverting changes.
Training on augumented user 119920 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119920 AUC after training: 0.5
User 119920 does not improve AUC. Reverting changes.
Training on augumented user 97359 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97359 AUC after training: 0.5
User 97359 does not improve AUC. Reverting changes.
Training on augumented user 119160 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119160 AUC after training: 0.5
User 119160 does not improve AUC. Reverting changes.
Training on augumented user 22816 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22816 AUC after training: 0.5
User 22816 does not improve AUC. Reverting changes.
Training on augumented user 60973 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60973 AUC after training: 0.5
User 60973 does not improve AUC. Reverting changes.
Training on augumented user 47286 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47286 AUC after training: 0.5
User 47286 does not improve AUC. Reverting changes.
Training on augumented user 134951 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134951 AUC after training: 0.5
User 134951 does not improve AUC. Reverting changes.
Training on augumented user 57491 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57491 AUC after training: 0.5
User 57491 does not improve AUC. Reverting changes.
Training on augumented user 116130 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116130 AUC after training: 0.5
User 116130 does not improve AUC. Reverting changes.
Training on augumented user 116565 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116565 AUC after training: 0.5
User 116565 does not improve AUC. Reverting changes.
Training on augumented user 85934 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85934 AUC after training: 0.5
User 85934 does not improve AUC. Reverting changes.
Training on augumented user 118106 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118106 AUC after training: 0.5
User 118106 does not improve AUC. Reverting changes.
Training on augumented user 32512 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32512 AUC after training: 0.5
User 32512 does not improve AUC. Reverting changes.
Training on augumented user 59996 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59996 AUC after training: 0.5
User 59996 does not improve AUC. Reverting changes.
Training on augumented user 63804 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63804 AUC after training: 0.5
User 63804 does not improve AUC. Reverting changes.
Training on augumented user 88761 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88761 AUC after training: 0.5
User 88761 does not improve AUC. Reverting changes.
Training on augumented user 77558 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77558 AUC after training: 0.5
User 77558 does not improve AUC. Reverting changes.
Training on augumented user 56225 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56225 AUC after training: 0.5
User 56225 does not improve AUC. Reverting changes.
Training on augumented user 84999 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84999 AUC after training: 0.5
User 84999 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:05.535752] start test user 48641 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:06.134569] start test user 48641 269/568 recall augumented users by random, augumented_users = [67317, 76136, 110628, 105204, 113122, 38247, 137981, 55283, 114340, 66030, 39852, 128026, 66108, 130076, 116833, 131810, 120498, 118146, 37327, 104673, 16128, 91118, 51691, 62959, 42351, 8280, 86961, 34395, 77560, 127670, 46876, 33615, 108712, 131827, 42176, 86374, 98143, 52807, 14116, 75578, 51391, 93935, 37571, 126095, 100569, 5310, 88783, 82838, 121600, 91857]
[2024-12-02 20:06:06.150908] user = 48641 Cloud 269/568
[2024-12-02 20:06:06.163208] user = 48641 Local 269/568
[2024-12-02 20:06:06.197486] user = 48641 Local+ 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:08.723287] user = 48641 MPDA- 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6748251748251748
Training on augumented user 67317 0/50 current_auc = 0.6748251748251748
User 67317 AUC after training: 0.6818181818181818
User 67317 improves AUC. Keeping the model.
Training on augumented user 76136 1/50 current_auc = 0.6818181818181818
User 76136 AUC after training: 0.6818181818181818
User 76136 does not improve AUC. Reverting changes.
Training on augumented user 110628 2/50 current_auc = 0.6818181818181818
User 110628 AUC after training: 0.6818181818181818
User 110628 does not improve AUC. Reverting changes.
Training on augumented user 105204 3/50 current_auc = 0.6818181818181818
User 105204 AUC after training: 0.6748251748251748
User 105204 does not improve AUC. Reverting changes.
Training on augumented user 113122 4/50 current_auc = 0.6818181818181818
User 113122 AUC after training: 0.6818181818181818
User 113122 does not improve AUC. Reverting changes.
Training on augumented user 38247 5/50 current_auc = 0.6818181818181818
User 38247 AUC after training: 0.6818181818181818
User 38247 does not improve AUC. Reverting changes.
Training on augumented user 137981 6/50 current_auc = 0.6818181818181818
User 137981 AUC after training: 0.6748251748251748
User 137981 does not improve AUC. Reverting changes.
Training on augumented user 55283 7/50 current_auc = 0.6818181818181818
User 55283 AUC after training: 0.6818181818181818
User 55283 does not improve AUC. Reverting changes.
Training on augumented user 114340 8/50 current_auc = 0.6818181818181818
User 114340 AUC after training: 0.6783216783216783
User 114340 does not improve AUC. Reverting changes.
Training on augumented user 66030 9/50 current_auc = 0.6818181818181818
User 66030 AUC after training: 0.6818181818181818
User 66030 does not improve AUC. Reverting changes.
Training on augumented user 39852 10/50 current_auc = 0.6818181818181818
User 39852 AUC after training: 0.6818181818181818
User 39852 does not improve AUC. Reverting changes.
Training on augumented user 128026 11/50 current_auc = 0.6818181818181818
User 128026 AUC after training: 0.6818181818181818
User 128026 does not improve AUC. Reverting changes.
Training on augumented user 66108 12/50 current_auc = 0.6818181818181818
User 66108 AUC after training: 0.6783216783216783
User 66108 does not improve AUC. Reverting changes.
Training on augumented user 130076 13/50 current_auc = 0.6818181818181818
User 130076 AUC after training: 0.6783216783216783
User 130076 does not improve AUC. Reverting changes.
Training on augumented user 116833 14/50 current_auc = 0.6818181818181818
User 116833 AUC after training: 0.6818181818181818
User 116833 does not improve AUC. Reverting changes.
Training on augumented user 131810 15/50 current_auc = 0.6818181818181818
User 131810 AUC after training: 0.6818181818181818
User 131810 does not improve AUC. Reverting changes.
Training on augumented user 120498 16/50 current_auc = 0.6818181818181818
User 120498 AUC after training: 0.6818181818181818
User 120498 does not improve AUC. Reverting changes.
Training on augumented user 118146 17/50 current_auc = 0.6818181818181818
User 118146 AUC after training: 0.6783216783216783
User 118146 does not improve AUC. Reverting changes.
Training on augumented user 37327 18/50 current_auc = 0.6818181818181818
User 37327 AUC after training: 0.6748251748251748
User 37327 does not improve AUC. Reverting changes.
Training on augumented user 104673 19/50 current_auc = 0.6818181818181818
User 104673 AUC after training: 0.6818181818181818
User 104673 does not improve AUC. Reverting changes.
Training on augumented user 16128 20/50 current_auc = 0.6818181818181818
User 16128 AUC after training: 0.6818181818181818
User 16128 does not improve AUC. Reverting changes.
Training on augumented user 91118 21/50 current_auc = 0.6818181818181818
User 91118 AUC after training: 0.6818181818181818
User 91118 does not improve AUC. Reverting changes.
Training on augumented user 51691 22/50 current_auc = 0.6818181818181818
User 51691 AUC after training: 0.6818181818181818
User 51691 does not improve AUC. Reverting changes.
Training on augumented user 62959 23/50 current_auc = 0.6818181818181818
User 62959 AUC after training: 0.6818181818181818
User 62959 does not improve AUC. Reverting changes.
Training on augumented user 42351 24/50 current_auc = 0.6818181818181818
User 42351 AUC after training: 0.6818181818181818
User 42351 does not improve AUC. Reverting changes.
Training on augumented user 8280 25/50 current_auc = 0.6818181818181818
User 8280 AUC after training: 0.6818181818181818
User 8280 does not improve AUC. Reverting changes.
Training on augumented user 86961 26/50 current_auc = 0.6818181818181818
User 86961 AUC after training: 0.6783216783216783
User 86961 does not improve AUC. Reverting changes.
Training on augumented user 34395 27/50 current_auc = 0.6818181818181818
User 34395 AUC after training: 0.6748251748251748
User 34395 does not improve AUC. Reverting changes.
Training on augumented user 77560 28/50 current_auc = 0.6818181818181818
User 77560 AUC after training: 0.6818181818181819
User 77560 improves AUC. Keeping the model.
Training on augumented user 127670 29/50 current_auc = 0.6818181818181819
User 127670 AUC after training: 0.6818181818181819
User 127670 does not improve AUC. Reverting changes.
Training on augumented user 46876 30/50 current_auc = 0.6818181818181819
User 46876 AUC after training: 0.6818181818181819
User 46876 does not improve AUC. Reverting changes.
Training on augumented user 33615 31/50 current_auc = 0.6818181818181819
User 33615 AUC after training: 0.6818181818181819
User 33615 does not improve AUC. Reverting changes.
Training on augumented user 108712 32/50 current_auc = 0.6818181818181819
User 108712 AUC after training: 0.6853146853146853
User 108712 improves AUC. Keeping the model.
Training on augumented user 131827 33/50 current_auc = 0.6853146853146853
User 131827 AUC after training: 0.6818181818181819
User 131827 does not improve AUC. Reverting changes.
Training on augumented user 42176 34/50 current_auc = 0.6853146853146853
User 42176 AUC after training: 0.6783216783216783
User 42176 does not improve AUC. Reverting changes.
Training on augumented user 86374 35/50 current_auc = 0.6853146853146853
User 86374 AUC after training: 0.6818181818181818
User 86374 does not improve AUC. Reverting changes.
Training on augumented user 98143 36/50 current_auc = 0.6853146853146853
User 98143 AUC after training: 0.6818181818181819
User 98143 does not improve AUC. Reverting changes.
Training on augumented user 52807 37/50 current_auc = 0.6853146853146853
User 52807 AUC after training: 0.6818181818181819
User 52807 does not improve AUC. Reverting changes.
Training on augumented user 14116 38/50 current_auc = 0.6853146853146853
User 14116 AUC after training: 0.6783216783216783
User 14116 does not improve AUC. Reverting changes.
Training on augumented user 75578 39/50 current_auc = 0.6853146853146853
User 75578 AUC after training: 0.6818181818181818
User 75578 does not improve AUC. Reverting changes.
Training on augumented user 51391 40/50 current_auc = 0.6853146853146853
User 51391 AUC after training: 0.6783216783216783
User 51391 does not improve AUC. Reverting changes.
Training on augumented user 93935 41/50 current_auc = 0.6853146853146853
User 93935 AUC after training: 0.6783216783216783
User 93935 does not improve AUC. Reverting changes.
Training on augumented user 37571 42/50 current_auc = 0.6853146853146853
User 37571 AUC after training: 0.6888111888111887
User 37571 improves AUC. Keeping the model.
Training on augumented user 126095 43/50 current_auc = 0.6888111888111887
User 126095 AUC after training: 0.6748251748251748
User 126095 does not improve AUC. Reverting changes.
Training on augumented user 100569 44/50 current_auc = 0.6888111888111887
User 100569 AUC after training: 0.6818181818181819
User 100569 does not improve AUC. Reverting changes.
Training on augumented user 5310 45/50 current_auc = 0.6888111888111887
User 5310 AUC after training: 0.6783216783216783
User 5310 does not improve AUC. Reverting changes.
Training on augumented user 88783 46/50 current_auc = 0.6888111888111887
User 88783 AUC after training: 0.6853146853146853
User 88783 does not improve AUC. Reverting changes.
Training on augumented user 82838 47/50 current_auc = 0.6888111888111887
User 82838 AUC after training: 0.6713286713286714
User 82838 does not improve AUC. Reverting changes.
Training on augumented user 121600 48/50 current_auc = 0.6888111888111887
User 121600 AUC after training: 0.6783216783216783
User 121600 does not improve AUC. Reverting changes.
Training on augumented user 91857 49/50 current_auc = 0.6888111888111887
User 91857 AUC after training: 0.6853146853146853
User 91857 does not improve AUC. Reverting changes.
[2024-12-02 20:06:38.222973] start test user 48677 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:38.877636] start test user 48677 270/568 recall augumented users by random, augumented_users = [33007, 52914, 64492, 18214, 20385, 136476, 64143, 20939, 20266, 78988, 99655, 80942, 101422, 79550, 45934, 30136, 35514, 69834, 124296, 129372, 15851, 113247, 102915, 114819, 69750, 73846, 53262, 111343, 126835, 71672, 22036, 117044, 112727, 105154, 48505, 44270, 65199, 91463, 20154, 93675, 114518, 47550, 106329, 119807, 29278, 73137, 22621, 51036, 80970, 91567]
[2024-12-02 20:06:38.894717] user = 48677 Cloud 270/568
[2024-12-02 20:06:38.918540] user = 48677 Local 270/568
[2024-12-02 20:06:39.358262] user = 48677 Local+ 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:41.717122] user = 48677 MPDA- 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6467961165048544
Training on augumented user 33007 0/50 current_auc = 0.6467961165048544
User 33007 AUC after training: 0.6462135922330097
User 33007 does not improve AUC. Reverting changes.
Training on augumented user 52914 1/50 current_auc = 0.6467961165048544
User 52914 AUC after training: 0.6462135922330097
User 52914 does not improve AUC. Reverting changes.
Training on augumented user 64492 2/50 current_auc = 0.6467961165048544
User 64492 AUC after training: 0.6466019417475728
User 64492 does not improve AUC. Reverting changes.
Training on augumented user 18214 3/50 current_auc = 0.6467961165048544
User 18214 AUC after training: 0.6458252427184467
User 18214 does not improve AUC. Reverting changes.
Training on augumented user 20385 4/50 current_auc = 0.6467961165048544
User 20385 AUC after training: 0.6464077669902912
User 20385 does not improve AUC. Reverting changes.
Training on augumented user 136476 5/50 current_auc = 0.6467961165048544
User 136476 AUC after training: 0.6462135922330097
User 136476 does not improve AUC. Reverting changes.
Training on augumented user 64143 6/50 current_auc = 0.6467961165048544
User 64143 AUC after training: 0.6471844660194175
User 64143 improves AUC. Keeping the model.
Training on augumented user 20939 7/50 current_auc = 0.6471844660194175
User 20939 AUC after training: 0.6467961165048544
User 20939 does not improve AUC. Reverting changes.
Training on augumented user 20266 8/50 current_auc = 0.6471844660194175
User 20266 AUC after training: 0.6462135922330097
User 20266 does not improve AUC. Reverting changes.
Training on augumented user 78988 9/50 current_auc = 0.6471844660194175
User 78988 AUC after training: 0.6466019417475728
User 78988 does not improve AUC. Reverting changes.
Training on augumented user 99655 10/50 current_auc = 0.6471844660194175
User 99655 AUC after training: 0.6467961165048544
User 99655 does not improve AUC. Reverting changes.
Training on augumented user 80942 11/50 current_auc = 0.6471844660194175
User 80942 AUC after training: 0.6464077669902912
User 80942 does not improve AUC. Reverting changes.
Training on augumented user 101422 12/50 current_auc = 0.6471844660194175
User 101422 AUC after training: 0.6471844660194175
User 101422 does not improve AUC. Reverting changes.
Training on augumented user 79550 13/50 current_auc = 0.6471844660194175
User 79550 AUC after training: 0.6467961165048544
User 79550 does not improve AUC. Reverting changes.
Training on augumented user 45934 14/50 current_auc = 0.6471844660194175
User 45934 AUC after training: 0.6467961165048544
User 45934 does not improve AUC. Reverting changes.
Training on augumented user 30136 15/50 current_auc = 0.6471844660194175
User 30136 AUC after training: 0.6438834951456311
User 30136 does not improve AUC. Reverting changes.
Training on augumented user 35514 16/50 current_auc = 0.6471844660194175
User 35514 AUC after training: 0.645631067961165
User 35514 does not improve AUC. Reverting changes.
Training on augumented user 69834 17/50 current_auc = 0.6471844660194175
User 69834 AUC after training: 0.6464077669902912
User 69834 does not improve AUC. Reverting changes.
Training on augumented user 124296 18/50 current_auc = 0.6471844660194175
User 124296 AUC after training: 0.6479611650485437
User 124296 improves AUC. Keeping the model.
Training on augumented user 129372 19/50 current_auc = 0.6479611650485437
User 129372 AUC after training: 0.6475728155339806
User 129372 does not improve AUC. Reverting changes.
Training on augumented user 15851 20/50 current_auc = 0.6479611650485437
User 15851 AUC after training: 0.6479611650485437
User 15851 does not improve AUC. Reverting changes.
Training on augumented user 113247 21/50 current_auc = 0.6479611650485437
User 113247 AUC after training: 0.6477669902912622
User 113247 does not improve AUC. Reverting changes.
Training on augumented user 102915 22/50 current_auc = 0.6479611650485437
User 102915 AUC after training: 0.6475728155339806
User 102915 does not improve AUC. Reverting changes.
Training on augumented user 114819 23/50 current_auc = 0.6479611650485437
User 114819 AUC after training: 0.6477669902912622
User 114819 does not improve AUC. Reverting changes.
Training on augumented user 69750 24/50 current_auc = 0.6479611650485437
User 69750 AUC after training: 0.6475728155339806
User 69750 does not improve AUC. Reverting changes.
Training on augumented user 73846 25/50 current_auc = 0.6479611650485437
User 73846 AUC after training: 0.647378640776699
User 73846 does not improve AUC. Reverting changes.
Training on augumented user 53262 26/50 current_auc = 0.6479611650485437
User 53262 AUC after training: 0.6481553398058253
User 53262 improves AUC. Keeping the model.
Training on augumented user 111343 27/50 current_auc = 0.6481553398058253
User 111343 AUC after training: 0.6477669902912622
User 111343 does not improve AUC. Reverting changes.
Training on augumented user 126835 28/50 current_auc = 0.6481553398058253
User 126835 AUC after training: 0.6477669902912622
User 126835 does not improve AUC. Reverting changes.
Training on augumented user 71672 29/50 current_auc = 0.6481553398058253
User 71672 AUC after training: 0.6481553398058253
User 71672 does not improve AUC. Reverting changes.
Training on augumented user 22036 30/50 current_auc = 0.6481553398058253
User 22036 AUC after training: 0.6477669902912622
User 22036 does not improve AUC. Reverting changes.
Training on augumented user 117044 31/50 current_auc = 0.6481553398058253
User 117044 AUC after training: 0.6467961165048544
User 117044 does not improve AUC. Reverting changes.
Training on augumented user 112727 32/50 current_auc = 0.6481553398058253
User 112727 AUC after training: 0.6481553398058253
User 112727 does not improve AUC. Reverting changes.
Training on augumented user 105154 33/50 current_auc = 0.6481553398058253
User 105154 AUC after training: 0.6479611650485437
User 105154 does not improve AUC. Reverting changes.
Training on augumented user 48505 34/50 current_auc = 0.6481553398058253
User 48505 AUC after training: 0.6475728155339806
User 48505 does not improve AUC. Reverting changes.
Training on augumented user 44270 35/50 current_auc = 0.6481553398058253
User 44270 AUC after training: 0.6469902912621359
User 44270 does not improve AUC. Reverting changes.
Training on augumented user 65199 36/50 current_auc = 0.6481553398058253
User 65199 AUC after training: 0.6481553398058253
User 65199 does not improve AUC. Reverting changes.
Training on augumented user 91463 37/50 current_auc = 0.6481553398058253
User 91463 AUC after training: 0.6475728155339806
User 91463 does not improve AUC. Reverting changes.
Training on augumented user 20154 38/50 current_auc = 0.6481553398058253
User 20154 AUC after training: 0.6479611650485437
User 20154 does not improve AUC. Reverting changes.
Training on augumented user 93675 39/50 current_auc = 0.6481553398058253
User 93675 AUC after training: 0.6481553398058253
User 93675 does not improve AUC. Reverting changes.
Training on augumented user 114518 40/50 current_auc = 0.6481553398058253
User 114518 AUC after training: 0.6452427184466019
User 114518 does not improve AUC. Reverting changes.
Training on augumented user 47550 41/50 current_auc = 0.6481553398058253
User 47550 AUC after training: 0.647378640776699
User 47550 does not improve AUC. Reverting changes.
Training on augumented user 106329 42/50 current_auc = 0.6481553398058253
User 106329 AUC after training: 0.647378640776699
User 106329 does not improve AUC. Reverting changes.
Training on augumented user 119807 43/50 current_auc = 0.6481553398058253
User 119807 AUC after training: 0.6475728155339806
User 119807 does not improve AUC. Reverting changes.
Training on augumented user 29278 44/50 current_auc = 0.6481553398058253
User 29278 AUC after training: 0.6477669902912622
User 29278 does not improve AUC. Reverting changes.
Training on augumented user 73137 45/50 current_auc = 0.6481553398058253
User 73137 AUC after training: 0.647378640776699
User 73137 does not improve AUC. Reverting changes.
Training on augumented user 22621 46/50 current_auc = 0.6481553398058253
User 22621 AUC after training: 0.6477669902912622
User 22621 does not improve AUC. Reverting changes.
Training on augumented user 51036 47/50 current_auc = 0.6481553398058253
User 51036 AUC after training: 0.6471844660194175
User 51036 does not improve AUC. Reverting changes.
Training on augumented user 80970 48/50 current_auc = 0.6481553398058253
User 80970 AUC after training: 0.6485436893203883
User 80970 improves AUC. Keeping the model.
Training on augumented user 91567 49/50 current_auc = 0.6485436893203883
User 91567 AUC after training: 0.649126213592233
User 91567 improves AUC. Keeping the model.
[2024-12-02 20:07:11.188313] start test user 48684 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:11.635431] start test user 48684 271/568 recall augumented users by random, augumented_users = [50901, 109416, 80740, 58313, 79002, 73283, 126620, 41418, 76400, 32231, 114634, 27372, 27554, 86866, 19987, 29863, 21698, 9214, 134917, 94935, 106382, 86408, 16925, 59645, 123561, 18522, 90988, 35047, 49002, 10384, 116640, 129298, 30854, 40219, 34154, 44567, 69860, 133987, 109007, 98057, 62852, 96224, 124873, 11391, 21564, 49212, 100039, 87923, 13126, 5658]
[2024-12-02 20:07:11.650562] user = 48684 Cloud 271/568
[2024-12-02 20:07:11.665061] user = 48684 Local 271/568
[2024-12-02 20:07:11.708018] user = 48684 Local+ 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:13.475086] user = 48684 MPDA- 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.47015250544662307
Training on augumented user 50901 0/50 current_auc = 0.47015250544662307
User 50901 AUC after training: 0.4705882352941177
User 50901 improves AUC. Keeping the model.
Training on augumented user 109416 1/50 current_auc = 0.4705882352941177
User 109416 AUC after training: 0.47233115468409587
User 109416 improves AUC. Keeping the model.
Training on augumented user 80740 2/50 current_auc = 0.47233115468409587
User 80740 AUC after training: 0.4736383442265795
User 80740 improves AUC. Keeping the model.
Training on augumented user 58313 3/50 current_auc = 0.4736383442265795
User 58313 AUC after training: 0.47167755991285404
User 58313 does not improve AUC. Reverting changes.
Training on augumented user 79002 4/50 current_auc = 0.4736383442265795
User 79002 AUC after training: 0.47494553376906323
User 79002 improves AUC. Keeping the model.
Training on augumented user 73283 5/50 current_auc = 0.47494553376906323
User 73283 AUC after training: 0.47363834422657947
User 73283 does not improve AUC. Reverting changes.
Training on augumented user 126620 6/50 current_auc = 0.47494553376906323
User 126620 AUC after training: 0.4727668845315904
User 126620 does not improve AUC. Reverting changes.
Training on augumented user 41418 7/50 current_auc = 0.47494553376906323
User 41418 AUC after training: 0.473202614379085
User 41418 does not improve AUC. Reverting changes.
Training on augumented user 76400 8/50 current_auc = 0.47494553376906323
User 76400 AUC after training: 0.4718954248366013
User 76400 does not improve AUC. Reverting changes.
Training on augumented user 32231 9/50 current_auc = 0.47494553376906323
User 32231 AUC after training: 0.4736383442265795
User 32231 does not improve AUC. Reverting changes.
Training on augumented user 114634 10/50 current_auc = 0.47494553376906323
User 114634 AUC after training: 0.47450980392156866
User 114634 does not improve AUC. Reverting changes.
Training on augumented user 27372 11/50 current_auc = 0.47494553376906323
User 27372 AUC after training: 0.47407407407407404
User 27372 does not improve AUC. Reverting changes.
Training on augumented user 27554 12/50 current_auc = 0.47494553376906323
User 27554 AUC after training: 0.473202614379085
User 27554 does not improve AUC. Reverting changes.
Training on augumented user 86866 13/50 current_auc = 0.47494553376906323
User 86866 AUC after training: 0.4727668845315904
User 86866 does not improve AUC. Reverting changes.
Training on augumented user 19987 14/50 current_auc = 0.47494553376906323
User 19987 AUC after training: 0.473202614379085
User 19987 does not improve AUC. Reverting changes.
Training on augumented user 29863 15/50 current_auc = 0.47494553376906323
User 29863 AUC after training: 0.47407407407407404
User 29863 does not improve AUC. Reverting changes.
Training on augumented user 21698 16/50 current_auc = 0.47494553376906323
User 21698 AUC after training: 0.4740740740740741
User 21698 does not improve AUC. Reverting changes.
Training on augumented user 9214 17/50 current_auc = 0.47494553376906323
User 9214 AUC after training: 0.47407407407407404
User 9214 does not improve AUC. Reverting changes.
Training on augumented user 134917 18/50 current_auc = 0.47494553376906323
User 134917 AUC after training: 0.4710239651416122
User 134917 does not improve AUC. Reverting changes.
Training on augumented user 94935 19/50 current_auc = 0.47494553376906323
User 94935 AUC after training: 0.4718954248366013
User 94935 does not improve AUC. Reverting changes.
Training on augumented user 106382 20/50 current_auc = 0.47494553376906323
User 106382 AUC after training: 0.4732026143790849
User 106382 does not improve AUC. Reverting changes.
Training on augumented user 86408 21/50 current_auc = 0.47494553376906323
User 86408 AUC after training: 0.47320261437908495
User 86408 does not improve AUC. Reverting changes.
Training on augumented user 16925 22/50 current_auc = 0.47494553376906323
User 16925 AUC after training: 0.4727668845315904
User 16925 does not improve AUC. Reverting changes.
Training on augumented user 59645 23/50 current_auc = 0.47494553376906323
User 59645 AUC after training: 0.4740740740740741
User 59645 does not improve AUC. Reverting changes.
Training on augumented user 123561 24/50 current_auc = 0.47494553376906323
User 123561 AUC after training: 0.4758169934640522
User 123561 improves AUC. Keeping the model.
Training on augumented user 18522 25/50 current_auc = 0.4758169934640522
User 18522 AUC after training: 0.47233115468409587
User 18522 does not improve AUC. Reverting changes.
Training on augumented user 90988 26/50 current_auc = 0.4758169934640522
User 90988 AUC after training: 0.4740740740740741
User 90988 does not improve AUC. Reverting changes.
Training on augumented user 35047 27/50 current_auc = 0.4758169934640522
User 35047 AUC after training: 0.47233115468409587
User 35047 does not improve AUC. Reverting changes.
Training on augumented user 49002 28/50 current_auc = 0.4758169934640522
User 49002 AUC after training: 0.47494553376906323
User 49002 does not improve AUC. Reverting changes.
Training on augumented user 10384 29/50 current_auc = 0.4758169934640522
User 10384 AUC after training: 0.4740740740740741
User 10384 does not improve AUC. Reverting changes.
Training on augumented user 116640 30/50 current_auc = 0.4758169934640522
User 116640 AUC after training: 0.4736383442265795
User 116640 does not improve AUC. Reverting changes.
Training on augumented user 129298 31/50 current_auc = 0.4758169934640522
User 129298 AUC after training: 0.4736383442265795
User 129298 does not improve AUC. Reverting changes.
Training on augumented user 30854 32/50 current_auc = 0.4758169934640522
User 30854 AUC after training: 0.4749455337690632
User 30854 does not improve AUC. Reverting changes.
Training on augumented user 40219 33/50 current_auc = 0.4758169934640522
User 40219 AUC after training: 0.47450980392156866
User 40219 does not improve AUC. Reverting changes.
Training on augumented user 34154 34/50 current_auc = 0.4758169934640522
User 34154 AUC after training: 0.4740740740740741
User 34154 does not improve AUC. Reverting changes.
Training on augumented user 44567 35/50 current_auc = 0.4758169934640522
User 44567 AUC after training: 0.4729847494553377
User 44567 does not improve AUC. Reverting changes.
Training on augumented user 69860 36/50 current_auc = 0.4758169934640522
User 69860 AUC after training: 0.4749455337690632
User 69860 does not improve AUC. Reverting changes.
Training on augumented user 133987 37/50 current_auc = 0.4758169934640522
User 133987 AUC after training: 0.47233115468409587
User 133987 does not improve AUC. Reverting changes.
Training on augumented user 109007 38/50 current_auc = 0.4758169934640522
User 109007 AUC after training: 0.47494553376906323
User 109007 does not improve AUC. Reverting changes.
Training on augumented user 98057 39/50 current_auc = 0.4758169934640522
User 98057 AUC after training: 0.47407407407407415
User 98057 does not improve AUC. Reverting changes.
Training on augumented user 62852 40/50 current_auc = 0.4758169934640522
User 62852 AUC after training: 0.4736383442265795
User 62852 does not improve AUC. Reverting changes.
Training on augumented user 96224 41/50 current_auc = 0.4758169934640522
User 96224 AUC after training: 0.47189542483660135
User 96224 does not improve AUC. Reverting changes.
Training on augumented user 124873 42/50 current_auc = 0.4758169934640522
User 124873 AUC after training: 0.47494553376906323
User 124873 does not improve AUC. Reverting changes.
Training on augumented user 11391 43/50 current_auc = 0.4758169934640522
User 11391 AUC after training: 0.4749455337690632
User 11391 does not improve AUC. Reverting changes.
Training on augumented user 21564 44/50 current_auc = 0.4758169934640522
User 21564 AUC after training: 0.47494553376906323
User 21564 does not improve AUC. Reverting changes.
Training on augumented user 49212 45/50 current_auc = 0.4758169934640522
User 49212 AUC after training: 0.47145969498910684
User 49212 does not improve AUC. Reverting changes.
Training on augumented user 100039 46/50 current_auc = 0.4758169934640522
User 100039 AUC after training: 0.47494553376906323
User 100039 does not improve AUC. Reverting changes.
Training on augumented user 87923 47/50 current_auc = 0.4758169934640522
User 87923 AUC after training: 0.4745098039215686
User 87923 does not improve AUC. Reverting changes.
Training on augumented user 13126 48/50 current_auc = 0.4758169934640522
User 13126 AUC after training: 0.47450980392156866
User 13126 does not improve AUC. Reverting changes.
Training on augumented user 5658 49/50 current_auc = 0.4758169934640522
User 5658 AUC after training: 0.4753812636165577
User 5658 does not improve AUC. Reverting changes.
[2024-12-02 20:07:42.702489] start test user 48712 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:43.443806] start test user 48712 272/568 recall augumented users by random, augumented_users = [84817, 52317, 117314, 104823, 12695, 110526, 123031, 59648, 5835, 93143, 116850, 62360, 127710, 69906, 30986, 97589, 46762, 45710, 135140, 119792, 134224, 15357, 28185, 112623, 44743, 35544, 106292, 48113, 76772, 75612, 20599, 121334, 95932, 85812, 59925, 18291, 35914, 95235, 37418, 39620, 69761, 103166, 80613, 40064, 137771, 76513, 68346, 113008, 2142, 132968]
[2024-12-02 20:07:43.460407] user = 48712 Cloud 272/568
[2024-12-02 20:07:43.523059] user = 48712 Local 272/568
[2024-12-02 20:07:43.673572] user = 48712 Local+ 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:46.038256] user = 48712 MPDA- 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6214932126696833
Training on augumented user 84817 0/50 current_auc = 0.6214932126696833
User 84817 AUC after training: 0.6214932126696833
User 84817 does not improve AUC. Reverting changes.
Training on augumented user 52317 1/50 current_auc = 0.6214932126696833
User 52317 AUC after training: 0.6230769230769231
User 52317 improves AUC. Keeping the model.
Training on augumented user 117314 2/50 current_auc = 0.6230769230769231
User 117314 AUC after training: 0.6234162895927602
User 117314 improves AUC. Keeping the model.
Training on augumented user 104823 3/50 current_auc = 0.6234162895927602
User 104823 AUC after training: 0.6248868778280543
User 104823 improves AUC. Keeping the model.
Training on augumented user 12695 4/50 current_auc = 0.6248868778280543
User 12695 AUC after training: 0.6253393665158371
User 12695 improves AUC. Keeping the model.
Training on augumented user 110526 5/50 current_auc = 0.6253393665158371
User 110526 AUC after training: 0.6211538461538462
User 110526 does not improve AUC. Reverting changes.
Training on augumented user 123031 6/50 current_auc = 0.6253393665158371
User 123031 AUC after training: 0.6260180995475113
User 123031 improves AUC. Keeping the model.
Training on augumented user 59648 7/50 current_auc = 0.6260180995475113
User 59648 AUC after training: 0.6219457013574661
User 59648 does not improve AUC. Reverting changes.
Training on augumented user 5835 8/50 current_auc = 0.6260180995475113
User 5835 AUC after training: 0.6246606334841629
User 5835 does not improve AUC. Reverting changes.
Training on augumented user 93143 9/50 current_auc = 0.6260180995475113
User 93143 AUC after training: 0.6255656108597285
User 93143 does not improve AUC. Reverting changes.
Training on augumented user 116850 10/50 current_auc = 0.6260180995475113
User 116850 AUC after training: 0.6253393665158371
User 116850 does not improve AUC. Reverting changes.
Training on augumented user 62360 11/50 current_auc = 0.6260180995475113
User 62360 AUC after training: 0.629185520361991
User 62360 improves AUC. Keeping the model.
Training on augumented user 127710 12/50 current_auc = 0.629185520361991
User 127710 AUC after training: 0.6288461538461538
User 127710 does not improve AUC. Reverting changes.
Training on augumented user 69906 13/50 current_auc = 0.629185520361991
User 69906 AUC after training: 0.6282805429864253
User 69906 does not improve AUC. Reverting changes.
Training on augumented user 30986 14/50 current_auc = 0.629185520361991
User 30986 AUC after training: 0.6287330316742081
User 30986 does not improve AUC. Reverting changes.
Training on augumented user 97589 15/50 current_auc = 0.629185520361991
User 97589 AUC after training: 0.6279411764705882
User 97589 does not improve AUC. Reverting changes.
Training on augumented user 46762 16/50 current_auc = 0.629185520361991
User 46762 AUC after training: 0.6277149321266968
User 46762 does not improve AUC. Reverting changes.
Training on augumented user 45710 17/50 current_auc = 0.629185520361991
User 45710 AUC after training: 0.6280542986425339
User 45710 does not improve AUC. Reverting changes.
Training on augumented user 135140 18/50 current_auc = 0.629185520361991
User 135140 AUC after training: 0.627262443438914
User 135140 does not improve AUC. Reverting changes.
Training on augumented user 119792 19/50 current_auc = 0.629185520361991
User 119792 AUC after training: 0.627262443438914
User 119792 does not improve AUC. Reverting changes.
Training on augumented user 134224 20/50 current_auc = 0.629185520361991
User 134224 AUC after training: 0.6287330316742081
User 134224 does not improve AUC. Reverting changes.
Training on augumented user 15357 21/50 current_auc = 0.629185520361991
User 15357 AUC after training: 0.6277149321266968
User 15357 does not improve AUC. Reverting changes.
Training on augumented user 28185 22/50 current_auc = 0.629185520361991
User 28185 AUC after training: 0.6288461538461538
User 28185 does not improve AUC. Reverting changes.
Training on augumented user 112623 23/50 current_auc = 0.629185520361991
User 112623 AUC after training: 0.6291855203619909
User 112623 does not improve AUC. Reverting changes.
Training on augumented user 44743 24/50 current_auc = 0.629185520361991
User 44743 AUC after training: 0.6269230769230769
User 44743 does not improve AUC. Reverting changes.
Training on augumented user 35544 25/50 current_auc = 0.629185520361991
User 35544 AUC after training: 0.6276018099547511
User 35544 does not improve AUC. Reverting changes.
Training on augumented user 106292 26/50 current_auc = 0.629185520361991
User 106292 AUC after training: 0.6287330316742081
User 106292 does not improve AUC. Reverting changes.
Training on augumented user 48113 27/50 current_auc = 0.629185520361991
User 48113 AUC after training: 0.6250000000000001
User 48113 does not improve AUC. Reverting changes.
Training on augumented user 76772 28/50 current_auc = 0.629185520361991
User 76772 AUC after training: 0.6287330316742081
User 76772 does not improve AUC. Reverting changes.
Training on augumented user 75612 29/50 current_auc = 0.629185520361991
User 75612 AUC after training: 0.628393665158371
User 75612 does not improve AUC. Reverting changes.
Training on augumented user 20599 30/50 current_auc = 0.629185520361991
User 20599 AUC after training: 0.627262443438914
User 20599 does not improve AUC. Reverting changes.
Training on augumented user 121334 31/50 current_auc = 0.629185520361991
User 121334 AUC after training: 0.6248868778280543
User 121334 does not improve AUC. Reverting changes.
Training on augumented user 95932 32/50 current_auc = 0.629185520361991
User 95932 AUC after training: 0.6297511312217194
User 95932 improves AUC. Keeping the model.
Training on augumented user 85812 33/50 current_auc = 0.6297511312217194
User 85812 AUC after training: 0.628393665158371
User 85812 does not improve AUC. Reverting changes.
Training on augumented user 59925 34/50 current_auc = 0.6297511312217194
User 59925 AUC after training: 0.6309954751131222
User 59925 improves AUC. Keeping the model.
Training on augumented user 18291 35/50 current_auc = 0.6309954751131222
User 18291 AUC after training: 0.6304298642533938
User 18291 does not improve AUC. Reverting changes.
Training on augumented user 35914 36/50 current_auc = 0.6309954751131222
User 35914 AUC after training: 0.6315610859728507
User 35914 improves AUC. Keeping the model.
Training on augumented user 95235 37/50 current_auc = 0.6315610859728507
User 95235 AUC after training: 0.6324660633484163
User 95235 improves AUC. Keeping the model.
Training on augumented user 37418 38/50 current_auc = 0.6324660633484163
User 37418 AUC after training: 0.6335972850678734
User 37418 improves AUC. Keeping the model.
Training on augumented user 39620 39/50 current_auc = 0.6335972850678734
User 39620 AUC after training: 0.6331447963800905
User 39620 does not improve AUC. Reverting changes.
Training on augumented user 69761 40/50 current_auc = 0.6335972850678734
User 69761 AUC after training: 0.633710407239819
User 69761 improves AUC. Keeping the model.
Training on augumented user 103166 41/50 current_auc = 0.633710407239819
User 103166 AUC after training: 0.6312217194570137
User 103166 does not improve AUC. Reverting changes.
Training on augumented user 80613 42/50 current_auc = 0.633710407239819
User 80613 AUC after training: 0.6339366515837104
User 80613 improves AUC. Keeping the model.
Training on augumented user 40064 43/50 current_auc = 0.6339366515837104
User 40064 AUC after training: 0.6346153846153846
User 40064 improves AUC. Keeping the model.
Training on augumented user 137771 44/50 current_auc = 0.6346153846153846
User 137771 AUC after training: 0.6334841628959276
User 137771 does not improve AUC. Reverting changes.
Training on augumented user 76513 45/50 current_auc = 0.6346153846153846
User 76513 AUC after training: 0.6351809954751132
User 76513 improves AUC. Keeping the model.
Training on augumented user 68346 46/50 current_auc = 0.6351809954751132
User 68346 AUC after training: 0.6346153846153846
User 68346 does not improve AUC. Reverting changes.
Training on augumented user 113008 47/50 current_auc = 0.6351809954751132
User 113008 AUC after training: 0.6351809954751131
User 113008 does not improve AUC. Reverting changes.
Training on augumented user 2142 48/50 current_auc = 0.6351809954751132
User 2142 AUC after training: 0.6356334841628959
User 2142 improves AUC. Keeping the model.
Training on augumented user 132968 49/50 current_auc = 0.6356334841628959
User 132968 AUC after training: 0.6347285067873303
User 132968 does not improve AUC. Reverting changes.
[2024-12-02 20:08:12.908828] start test user 48821 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:13.325194] start test user 48821 273/568 recall augumented users by random, augumented_users = [102992, 126734, 50366, 38852, 95715, 99600, 130104, 57850, 36887, 27200, 71190, 57497, 83039, 7080, 45535, 80004, 45228, 715, 99419, 89557, 18570, 3073, 112910, 3947, 127493, 109716, 131012, 20580, 1218, 95846, 125683, 6749, 74818, 44252, 18374, 35156, 31237, 64338, 8842, 29697, 66339, 73752, 20949, 135795, 120461, 118047, 72218, 124916, 116443, 92574]
[2024-12-02 20:08:13.341506] user = 48821 Cloud 273/568
[2024-12-02 20:08:13.382655] user = 48821 Local 273/568
[2024-12-02 20:08:13.490353] user = 48821 Local+ 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:15.890918] user = 48821 MPDA- 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7011967681185833
Training on augumented user 102992 0/50 current_auc = 0.7011967681185833
User 102992 AUC after training: 0.7013182674199623
User 102992 improves AUC. Keeping the model.
Training on augumented user 126734 1/50 current_auc = 0.7013182674199623
User 126734 AUC after training: 0.701354717210376
User 126734 improves AUC. Keeping the model.
Training on augumented user 50366 2/50 current_auc = 0.701354717210376
User 50366 AUC after training: 0.7012332179089971
User 50366 does not improve AUC. Reverting changes.
Training on augumented user 38852 3/50 current_auc = 0.701354717210376
User 38852 AUC after training: 0.7015977158131341
User 38852 improves AUC. Keeping the model.
Training on augumented user 95715 4/50 current_auc = 0.7015977158131341
User 95715 AUC after training: 0.7014762165117552
User 95715 does not improve AUC. Reverting changes.
Training on augumented user 99600 5/50 current_auc = 0.7015977158131341
User 99600 AUC after training: 0.7014154668610655
User 99600 does not improve AUC. Reverting changes.
Training on augumented user 130104 6/50 current_auc = 0.7015977158131341
User 130104 AUC after training: 0.7016341656035477
User 130104 improves AUC. Keeping the model.
Training on augumented user 57850 7/50 current_auc = 0.7016341656035477
User 57850 AUC after training: 0.7015005163720308
User 57850 does not improve AUC. Reverting changes.
Training on augumented user 36887 8/50 current_auc = 0.7016341656035477
User 36887 AUC after training: 0.7013182674199623
User 36887 does not improve AUC. Reverting changes.
Training on augumented user 27200 9/50 current_auc = 0.7016341656035477
User 27200 AUC after training: 0.7014519166514792
User 27200 does not improve AUC. Reverting changes.
Training on augumented user 71190 10/50 current_auc = 0.7016341656035477
User 71190 AUC after training: 0.7016584654638236
User 71190 improves AUC. Keeping the model.
Training on augumented user 57497 11/50 current_auc = 0.7016584654638236
User 57497 AUC after training: 0.701731365044651
User 57497 improves AUC. Keeping the model.
Training on augumented user 83039 12/50 current_auc = 0.701731365044651
User 83039 AUC after training: 0.701865014276168
User 83039 improves AUC. Keeping the model.
Training on augumented user 7080 13/50 current_auc = 0.701865014276168
User 7080 AUC after training: 0.7020472632282364
User 7080 improves AUC. Keeping the model.
Training on augumented user 45535 14/50 current_auc = 0.7020472632282364
User 45535 AUC after training: 0.7018771642063059
User 45535 does not improve AUC. Reverting changes.
Training on augumented user 80004 15/50 current_auc = 0.7020472632282364
User 80004 AUC after training: 0.7019136139967195
User 80004 does not improve AUC. Reverting changes.
Training on augumented user 45228 16/50 current_auc = 0.7020472632282364
User 45228 AUC after training: 0.7016584654638236
User 45228 does not improve AUC. Reverting changes.
Training on augumented user 715 17/50 current_auc = 0.7020472632282364
User 715 AUC after training: 0.7020229633679607
User 715 does not improve AUC. Reverting changes.
Training on augumented user 99419 18/50 current_auc = 0.7020472632282364
User 99419 AUC after training: 0.7019379138569954
User 99419 does not improve AUC. Reverting changes.
Training on augumented user 89557 19/50 current_auc = 0.7020472632282364
User 89557 AUC after training: 0.7018893141364437
User 89557 does not improve AUC. Reverting changes.
Training on augumented user 18570 20/50 current_auc = 0.7020472632282364
User 18570 AUC after training: 0.7018650142761679
User 18570 does not improve AUC. Reverting changes.
Training on augumented user 3073 21/50 current_auc = 0.7020472632282364
User 3073 AUC after training: 0.7020108134378228
User 3073 does not improve AUC. Reverting changes.
Training on augumented user 112910 22/50 current_auc = 0.7020472632282364
User 112910 AUC after training: 0.7019500637871332
User 112910 does not improve AUC. Reverting changes.
Training on augumented user 3947 23/50 current_auc = 0.7020472632282364
User 3947 AUC after training: 0.70185286434603
User 3947 does not improve AUC. Reverting changes.
Training on augumented user 127493 24/50 current_auc = 0.7020472632282364
User 127493 AUC after training: 0.70185286434603
User 127493 does not improve AUC. Reverting changes.
Training on augumented user 109716 25/50 current_auc = 0.7020472632282364
User 109716 AUC after training: 0.70185286434603
User 109716 does not improve AUC. Reverting changes.
Training on augumented user 131012 26/50 current_auc = 0.7020472632282364
User 131012 AUC after training: 0.7018285644857543
User 131012 does not improve AUC. Reverting changes.
Training on augumented user 20580 27/50 current_auc = 0.7020472632282364
User 20580 AUC after training: 0.7020108134378227
User 20580 does not improve AUC. Reverting changes.
Training on augumented user 1218 28/50 current_auc = 0.7020472632282364
User 1218 AUC after training: 0.7019257639268575
User 1218 does not improve AUC. Reverting changes.
Training on augumented user 95846 29/50 current_auc = 0.7020472632282364
User 95846 AUC after training: 0.7018285644857543
User 95846 does not improve AUC. Reverting changes.
Training on augumented user 125683 30/50 current_auc = 0.7020472632282364
User 125683 AUC after training: 0.7016463155336856
User 125683 does not improve AUC. Reverting changes.
Training on augumented user 6749 31/50 current_auc = 0.7020472632282364
User 6749 AUC after training: 0.702095862948788
User 6749 improves AUC. Keeping the model.
Training on augumented user 74818 32/50 current_auc = 0.702095862948788
User 74818 AUC after training: 0.7020351132980985
User 74818 does not improve AUC. Reverting changes.
Training on augumented user 44252 33/50 current_auc = 0.702095862948788
User 44252 AUC after training: 0.7015612660227203
User 44252 does not improve AUC. Reverting changes.
Training on augumented user 18374 34/50 current_auc = 0.702095862948788
User 18374 AUC after training: 0.7019865135775469
User 18374 does not improve AUC. Reverting changes.
Training on augumented user 35156 35/50 current_auc = 0.702095862948788
User 35156 AUC after training: 0.7020229633679607
User 35156 does not improve AUC. Reverting changes.
Training on augumented user 31237 36/50 current_auc = 0.702095862948788
User 31237 AUC after training: 0.7018042646254783
User 31237 does not improve AUC. Reverting changes.
Training on augumented user 64338 37/50 current_auc = 0.702095862948788
User 64338 AUC after training: 0.7019379138569953
User 64338 does not improve AUC. Reverting changes.
Training on augumented user 8842 38/50 current_auc = 0.702095862948788
User 8842 AUC after training: 0.7022781119008565
User 8842 improves AUC. Keeping the model.
Training on augumented user 29697 39/50 current_auc = 0.7022781119008565
User 29697 AUC after training: 0.702229512180305
User 29697 does not improve AUC. Reverting changes.
Training on augumented user 66339 40/50 current_auc = 0.7022781119008565
User 66339 AUC after training: 0.7022538120405808
User 66339 does not improve AUC. Reverting changes.
Training on augumented user 73752 41/50 current_auc = 0.7022781119008565
User 73752 AUC after training: 0.7023145616912703
User 73752 improves AUC. Keeping the model.
Training on augumented user 20949 42/50 current_auc = 0.7023145616912703
User 20949 AUC after training: 0.7023388615515461
User 20949 improves AUC. Keeping the model.
Training on augumented user 135795 43/50 current_auc = 0.7023388615515461
User 135795 AUC after training: 0.702970657918717
User 135795 improves AUC. Keeping the model.
Training on augumented user 120461 44/50 current_auc = 0.702970657918717
User 120461 AUC after training: 0.7031043071502339
User 120461 improves AUC. Keeping the model.
Training on augumented user 118047 45/50 current_auc = 0.7031043071502339
User 118047 AUC after training: 0.7025940100844421
User 118047 does not improve AUC. Reverting changes.
Training on augumented user 72218 46/50 current_auc = 0.7031043071502339
User 72218 AUC after training: 0.7029099082680275
User 72218 does not improve AUC. Reverting changes.
Training on augumented user 124916 47/50 current_auc = 0.7031043071502339
User 124916 AUC after training: 0.7029342081283033
User 124916 does not improve AUC. Reverting changes.
Training on augumented user 116443 48/50 current_auc = 0.7031043071502339
User 116443 AUC after training: 0.7030192576392686
User 116443 does not improve AUC. Reverting changes.
Training on augumented user 92574 49/50 current_auc = 0.7031043071502339
User 92574 AUC after training: 0.7028613085474759
User 92574 does not improve AUC. Reverting changes.
[2024-12-02 20:08:46.271692] start test user 48876 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:46.754475] start test user 48876 274/568 recall augumented users by random, augumented_users = [136863, 105785, 58687, 17600, 123569, 98864, 14508, 114055, 20576, 16884, 46897, 69101, 82250, 109986, 87659, 38662, 90006, 40299, 32188, 110294, 26263, 34531, 129616, 46663, 130766, 101365, 96180, 43213, 74101, 96509, 111318, 72965, 32186, 102624, 94705, 119785, 16976, 112226, 43561, 132095, 90051, 8522, 69484, 134634, 70678, 98126, 99404, 32233, 66167, 46629]
[2024-12-02 20:08:46.769826] user = 48876 Cloud 274/568
[2024-12-02 20:08:46.788920] user = 48876 Local 274/568
[2024-12-02 20:08:46.826052] user = 48876 Local+ 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:49.858079] user = 48876 MPDA- 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49076923076923074
Training on augumented user 136863 0/50 current_auc = 0.49076923076923074
User 136863 AUC after training: 0.49153846153846154
User 136863 improves AUC. Keeping the model.
Training on augumented user 105785 1/50 current_auc = 0.49153846153846154
User 105785 AUC after training: 0.4911538461538461
User 105785 does not improve AUC. Reverting changes.
Training on augumented user 58687 2/50 current_auc = 0.49153846153846154
User 58687 AUC after training: 0.4938461538461538
User 58687 improves AUC. Keeping the model.
Training on augumented user 17600 3/50 current_auc = 0.4938461538461538
User 17600 AUC after training: 0.4930769230769231
User 17600 does not improve AUC. Reverting changes.
Training on augumented user 123569 4/50 current_auc = 0.4938461538461538
User 123569 AUC after training: 0.4938461538461538
User 123569 does not improve AUC. Reverting changes.
Training on augumented user 98864 5/50 current_auc = 0.4938461538461538
User 98864 AUC after training: 0.49615384615384617
User 98864 improves AUC. Keeping the model.
Training on augumented user 14508 6/50 current_auc = 0.49615384615384617
User 14508 AUC after training: 0.49615384615384617
User 14508 does not improve AUC. Reverting changes.
Training on augumented user 114055 7/50 current_auc = 0.49615384615384617
User 114055 AUC after training: 0.4938461538461539
User 114055 does not improve AUC. Reverting changes.
Training on augumented user 20576 8/50 current_auc = 0.49615384615384617
User 20576 AUC after training: 0.4938461538461539
User 20576 does not improve AUC. Reverting changes.
Training on augumented user 16884 9/50 current_auc = 0.49615384615384617
User 16884 AUC after training: 0.49461538461538457
User 16884 does not improve AUC. Reverting changes.
Training on augumented user 46897 10/50 current_auc = 0.49615384615384617
User 46897 AUC after training: 0.49615384615384617
User 46897 does not improve AUC. Reverting changes.
Training on augumented user 69101 11/50 current_auc = 0.49615384615384617
User 69101 AUC after training: 0.4953846153846154
User 69101 does not improve AUC. Reverting changes.
Training on augumented user 82250 12/50 current_auc = 0.49615384615384617
User 82250 AUC after training: 0.49461538461538457
User 82250 does not improve AUC. Reverting changes.
Training on augumented user 109986 13/50 current_auc = 0.49615384615384617
User 109986 AUC after training: 0.4946153846153846
User 109986 does not improve AUC. Reverting changes.
Training on augumented user 87659 14/50 current_auc = 0.49615384615384617
User 87659 AUC after training: 0.4946153846153846
User 87659 does not improve AUC. Reverting changes.
Training on augumented user 38662 15/50 current_auc = 0.49615384615384617
User 38662 AUC after training: 0.4961538461538461
User 38662 does not improve AUC. Reverting changes.
Training on augumented user 90006 16/50 current_auc = 0.49615384615384617
User 90006 AUC after training: 0.4946153846153846
User 90006 does not improve AUC. Reverting changes.
Training on augumented user 40299 17/50 current_auc = 0.49615384615384617
User 40299 AUC after training: 0.4953846153846154
User 40299 does not improve AUC. Reverting changes.
Training on augumented user 32188 18/50 current_auc = 0.49615384615384617
User 32188 AUC after training: 0.4953846153846154
User 32188 does not improve AUC. Reverting changes.
Training on augumented user 110294 19/50 current_auc = 0.49615384615384617
User 110294 AUC after training: 0.4946153846153846
User 110294 does not improve AUC. Reverting changes.
Training on augumented user 26263 20/50 current_auc = 0.49615384615384617
User 26263 AUC after training: 0.4946153846153846
User 26263 does not improve AUC. Reverting changes.
Training on augumented user 34531 21/50 current_auc = 0.49615384615384617
User 34531 AUC after training: 0.49461538461538457
User 34531 does not improve AUC. Reverting changes.
Training on augumented user 129616 22/50 current_auc = 0.49615384615384617
User 129616 AUC after training: 0.4946153846153845
User 129616 does not improve AUC. Reverting changes.
Training on augumented user 46663 23/50 current_auc = 0.49615384615384617
User 46663 AUC after training: 0.49230769230769234
User 46663 does not improve AUC. Reverting changes.
Training on augumented user 130766 24/50 current_auc = 0.49615384615384617
User 130766 AUC after training: 0.4946153846153846
User 130766 does not improve AUC. Reverting changes.
Training on augumented user 101365 25/50 current_auc = 0.49615384615384617
User 101365 AUC after training: 0.49615384615384606
User 101365 does not improve AUC. Reverting changes.
Training on augumented user 96180 26/50 current_auc = 0.49615384615384617
User 96180 AUC after training: 0.4969230769230769
User 96180 improves AUC. Keeping the model.
Training on augumented user 43213 27/50 current_auc = 0.4969230769230769
User 43213 AUC after training: 0.49538461538461537
User 43213 does not improve AUC. Reverting changes.
Training on augumented user 74101 28/50 current_auc = 0.4969230769230769
User 74101 AUC after training: 0.49692307692307686
User 74101 does not improve AUC. Reverting changes.
Training on augumented user 96509 29/50 current_auc = 0.4969230769230769
User 96509 AUC after training: 0.4946153846153846
User 96509 does not improve AUC. Reverting changes.
Training on augumented user 111318 30/50 current_auc = 0.4969230769230769
User 111318 AUC after training: 0.49769230769230766
User 111318 improves AUC. Keeping the model.
Training on augumented user 72965 31/50 current_auc = 0.49769230769230766
User 72965 AUC after training: 0.4976923076923077
User 72965 improves AUC. Keeping the model.
Training on augumented user 32186 32/50 current_auc = 0.4976923076923077
User 32186 AUC after training: 0.49769230769230766
User 32186 does not improve AUC. Reverting changes.
Training on augumented user 102624 33/50 current_auc = 0.4976923076923077
User 102624 AUC after training: 0.49692307692307686
User 102624 does not improve AUC. Reverting changes.
Training on augumented user 94705 34/50 current_auc = 0.4976923076923077
User 94705 AUC after training: 0.4969230769230769
User 94705 does not improve AUC. Reverting changes.
Training on augumented user 119785 35/50 current_auc = 0.4976923076923077
User 119785 AUC after training: 0.4946153846153846
User 119785 does not improve AUC. Reverting changes.
Training on augumented user 16976 36/50 current_auc = 0.4976923076923077
User 16976 AUC after training: 0.49692307692307686
User 16976 does not improve AUC. Reverting changes.
Training on augumented user 112226 37/50 current_auc = 0.4976923076923077
User 112226 AUC after training: 0.4976923076923077
User 112226 does not improve AUC. Reverting changes.
Training on augumented user 43561 38/50 current_auc = 0.4976923076923077
User 43561 AUC after training: 0.49846153846153846
User 43561 improves AUC. Keeping the model.
Training on augumented user 132095 39/50 current_auc = 0.49846153846153846
User 132095 AUC after training: 0.49538461538461537
User 132095 does not improve AUC. Reverting changes.
Training on augumented user 90051 40/50 current_auc = 0.49846153846153846
User 90051 AUC after training: 0.49538461538461537
User 90051 does not improve AUC. Reverting changes.
Training on augumented user 8522 41/50 current_auc = 0.49846153846153846
User 8522 AUC after training: 0.49769230769230766
User 8522 does not improve AUC. Reverting changes.
Training on augumented user 69484 42/50 current_auc = 0.49846153846153846
User 69484 AUC after training: 0.4953846153846153
User 69484 does not improve AUC. Reverting changes.
Training on augumented user 134634 43/50 current_auc = 0.49846153846153846
User 134634 AUC after training: 0.4961538461538461
User 134634 does not improve AUC. Reverting changes.
Training on augumented user 70678 44/50 current_auc = 0.49846153846153846
User 70678 AUC after training: 0.49615384615384617
User 70678 does not improve AUC. Reverting changes.
Training on augumented user 98126 45/50 current_auc = 0.49846153846153846
User 98126 AUC after training: 0.4976923076923077
User 98126 does not improve AUC. Reverting changes.
Training on augumented user 99404 46/50 current_auc = 0.49846153846153846
User 99404 AUC after training: 0.4961538461538461
User 99404 does not improve AUC. Reverting changes.
Training on augumented user 32233 47/50 current_auc = 0.49846153846153846
User 32233 AUC after training: 0.49769230769230766
User 32233 does not improve AUC. Reverting changes.
Training on augumented user 66167 48/50 current_auc = 0.49846153846153846
User 66167 AUC after training: 0.49769230769230766
User 66167 does not improve AUC. Reverting changes.
Training on augumented user 46629 49/50 current_auc = 0.49846153846153846
User 46629 AUC after training: 0.49846153846153846
User 46629 does not improve AUC. Reverting changes.
[2024-12-02 20:09:22.558319] start test user 48904 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:23.332384] start test user 48904 275/568 recall augumented users by random, augumented_users = [64250, 32274, 64796, 66325, 17711, 46694, 77370, 89936, 42468, 39461, 94186, 54413, 44633, 81043, 44096, 112620, 13011, 109248, 8295, 69446, 24409, 11734, 129970, 40027, 128038, 95737, 120198, 33685, 21842, 113304, 57960, 132821, 135613, 90078, 40565, 99972, 79365, 21239, 45650, 58430, 119273, 49888, 127193, 136806, 101264, 136865, 88643, 11785, 68039, 69453]
[2024-12-02 20:09:23.349004] user = 48904 Cloud 275/568
[2024-12-02 20:09:23.441583] user = 48904 Local 275/568
[2024-12-02 20:09:23.711367] user = 48904 Local+ 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:27.115908] user = 48904 MPDA- 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8198872785829308
Training on augumented user 64250 0/50 current_auc = 0.8198872785829308
User 64250 AUC after training: 0.8199677938808373
User 64250 improves AUC. Keeping the model.
Training on augumented user 32274 1/50 current_auc = 0.8199677938808373
User 32274 AUC after training: 0.8206119162640902
User 32274 improves AUC. Keeping the model.
Training on augumented user 64796 2/50 current_auc = 0.8206119162640902
User 64796 AUC after training: 0.8206119162640902
User 64796 does not improve AUC. Reverting changes.
Training on augumented user 66325 3/50 current_auc = 0.8206119162640902
User 66325 AUC after training: 0.8219001610305958
User 66325 improves AUC. Keeping the model.
Training on augumented user 17711 4/50 current_auc = 0.8219001610305958
User 17711 AUC after training: 0.821658615136876
User 17711 does not improve AUC. Reverting changes.
Training on augumented user 46694 5/50 current_auc = 0.8219001610305958
User 46694 AUC after training: 0.8219001610305958
User 46694 does not improve AUC. Reverting changes.
Training on augumented user 77370 6/50 current_auc = 0.8219001610305958
User 77370 AUC after training: 0.8215780998389695
User 77370 does not improve AUC. Reverting changes.
Training on augumented user 89936 7/50 current_auc = 0.8219001610305958
User 89936 AUC after training: 0.8219001610305958
User 89936 does not improve AUC. Reverting changes.
Training on augumented user 42468 8/50 current_auc = 0.8219001610305958
User 42468 AUC after training: 0.8227858293075685
User 42468 improves AUC. Keeping the model.
Training on augumented user 39461 9/50 current_auc = 0.8227858293075685
User 39461 AUC after training: 0.822463768115942
User 39461 does not improve AUC. Reverting changes.
Training on augumented user 94186 10/50 current_auc = 0.8227858293075685
User 94186 AUC after training: 0.8219806763285024
User 94186 does not improve AUC. Reverting changes.
Training on augumented user 54413 11/50 current_auc = 0.8227858293075685
User 54413 AUC after training: 0.8227053140096618
User 54413 does not improve AUC. Reverting changes.
Training on augumented user 44633 12/50 current_auc = 0.8227858293075685
User 44633 AUC after training: 0.8231884057971015
User 44633 improves AUC. Keeping the model.
Training on augumented user 81043 13/50 current_auc = 0.8231884057971015
User 81043 AUC after training: 0.8231884057971014
User 81043 does not improve AUC. Reverting changes.
Training on augumented user 44096 14/50 current_auc = 0.8231884057971015
User 44096 AUC after training: 0.8226247987117553
User 44096 does not improve AUC. Reverting changes.
Training on augumented user 112620 15/50 current_auc = 0.8231884057971015
User 112620 AUC after training: 0.8230273752012882
User 112620 does not improve AUC. Reverting changes.
Training on augumented user 13011 16/50 current_auc = 0.8231884057971015
User 13011 AUC after training: 0.8225442834138487
User 13011 does not improve AUC. Reverting changes.
Training on augumented user 109248 17/50 current_auc = 0.8231884057971015
User 109248 AUC after training: 0.8227053140096618
User 109248 does not improve AUC. Reverting changes.
Training on augumented user 8295 18/50 current_auc = 0.8231884057971015
User 8295 AUC after training: 0.8225442834138486
User 8295 does not improve AUC. Reverting changes.
Training on augumented user 69446 19/50 current_auc = 0.8231884057971015
User 69446 AUC after training: 0.822866344605475
User 69446 does not improve AUC. Reverting changes.
Training on augumented user 24409 20/50 current_auc = 0.8231884057971015
User 24409 AUC after training: 0.8233494363929147
User 24409 improves AUC. Keeping the model.
Training on augumented user 11734 21/50 current_auc = 0.8233494363929147
User 11734 AUC after training: 0.8230273752012882
User 11734 does not improve AUC. Reverting changes.
Training on augumented user 129970 22/50 current_auc = 0.8233494363929147
User 129970 AUC after training: 0.8230273752012882
User 129970 does not improve AUC. Reverting changes.
Training on augumented user 40027 23/50 current_auc = 0.8233494363929147
User 40027 AUC after training: 0.8225442834138486
User 40027 does not improve AUC. Reverting changes.
Training on augumented user 128038 24/50 current_auc = 0.8233494363929147
User 128038 AUC after training: 0.8227053140096618
User 128038 does not improve AUC. Reverting changes.
Training on augumented user 95737 25/50 current_auc = 0.8233494363929147
User 95737 AUC after training: 0.8222222222222222
User 95737 does not improve AUC. Reverting changes.
Training on augumented user 120198 26/50 current_auc = 0.8233494363929147
User 120198 AUC after training: 0.8231884057971014
User 120198 does not improve AUC. Reverting changes.
Training on augumented user 33685 27/50 current_auc = 0.8233494363929147
User 33685 AUC after training: 0.8228663446054749
User 33685 does not improve AUC. Reverting changes.
Training on augumented user 21842 28/50 current_auc = 0.8233494363929147
User 21842 AUC after training: 0.8219806763285024
User 21842 does not improve AUC. Reverting changes.
Training on augumented user 113304 29/50 current_auc = 0.8233494363929147
User 113304 AUC after training: 0.8231078904991949
User 113304 does not improve AUC. Reverting changes.
Training on augumented user 57960 30/50 current_auc = 0.8233494363929147
User 57960 AUC after training: 0.8229468599033816
User 57960 does not improve AUC. Reverting changes.
Training on augumented user 132821 31/50 current_auc = 0.8233494363929147
User 132821 AUC after training: 0.8231884057971015
User 132821 does not improve AUC. Reverting changes.
Training on augumented user 135613 32/50 current_auc = 0.8233494363929147
User 135613 AUC after training: 0.8231884057971014
User 135613 does not improve AUC. Reverting changes.
Training on augumented user 90078 33/50 current_auc = 0.8233494363929147
User 90078 AUC after training: 0.8242351046698873
User 90078 improves AUC. Keeping the model.
Training on augumented user 40565 34/50 current_auc = 0.8242351046698873
User 40565 AUC after training: 0.8242351046698874
User 40565 improves AUC. Keeping the model.
Training on augumented user 99972 35/50 current_auc = 0.8242351046698874
User 99972 AUC after training: 0.8242351046698873
User 99972 does not improve AUC. Reverting changes.
Training on augumented user 79365 36/50 current_auc = 0.8242351046698874
User 79365 AUC after training: 0.8242351046698874
User 79365 does not improve AUC. Reverting changes.
Training on augumented user 21239 37/50 current_auc = 0.8242351046698874
User 21239 AUC after training: 0.8242351046698873
User 21239 does not improve AUC. Reverting changes.
Training on augumented user 45650 38/50 current_auc = 0.8242351046698874
User 45650 AUC after training: 0.8231078904991949
User 45650 does not improve AUC. Reverting changes.
Training on augumented user 58430 39/50 current_auc = 0.8242351046698874
User 58430 AUC after training: 0.8245571658615137
User 58430 improves AUC. Keeping the model.
Training on augumented user 119273 40/50 current_auc = 0.8245571658615137
User 119273 AUC after training: 0.8247181964573269
User 119273 improves AUC. Keeping the model.
Training on augumented user 49888 41/50 current_auc = 0.8247181964573269
User 49888 AUC after training: 0.8242351046698873
User 49888 does not improve AUC. Reverting changes.
Training on augumented user 127193 42/50 current_auc = 0.8247181964573269
User 127193 AUC after training: 0.8247181964573269
User 127193 does not improve AUC. Reverting changes.
Training on augumented user 136806 43/50 current_auc = 0.8247181964573269
User 136806 AUC after training: 0.8210950080515298
User 136806 does not improve AUC. Reverting changes.
Training on augumented user 101264 44/50 current_auc = 0.8247181964573269
User 101264 AUC after training: 0.8248792270531401
User 101264 improves AUC. Keeping the model.
Training on augumented user 136865 45/50 current_auc = 0.8248792270531401
User 136865 AUC after training: 0.8250402576489533
User 136865 improves AUC. Keeping the model.
Training on augumented user 88643 46/50 current_auc = 0.8250402576489533
User 88643 AUC after training: 0.8252012882447666
User 88643 improves AUC. Keeping the model.
Training on augumented user 11785 47/50 current_auc = 0.8252012882447666
User 11785 AUC after training: 0.8255233494363929
User 11785 improves AUC. Keeping the model.
Training on augumented user 68039 48/50 current_auc = 0.8255233494363929
User 68039 AUC after training: 0.8252012882447665
User 68039 does not improve AUC. Reverting changes.
Training on augumented user 69453 49/50 current_auc = 0.8255233494363929
User 69453 AUC after training: 0.8255233494363929
User 69453 does not improve AUC. Reverting changes.
[2024-12-02 20:09:57.165825] start test user 48929 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:57.594264] start test user 48929 276/568 recall augumented users by random, augumented_users = [28829, 9028, 19160, 42493, 37889, 114286, 59084, 71690, 41242, 120873, 46483, 33148, 31770, 40538, 55510, 128334, 9902, 38507, 125748, 37156, 105367, 115911, 66005, 123478, 130114, 26068, 57662, 97573, 20733, 87869, 123429, 66342, 94349, 119066, 1153, 26998, 59298, 5538, 137309, 127045, 83079, 129410, 5934, 6520, 73784, 89518, 69608, 32030, 133764, 115062]
[2024-12-02 20:09:57.610331] user = 48929 Cloud 276/568
[2024-12-02 20:09:57.619604] user = 48929 Local 276/568
[2024-12-02 20:09:57.877982] user = 48929 Local+ 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:00.204810] user = 48929 MPDA- 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5384615384615384
Training on augumented user 28829 0/50 current_auc = 0.5384615384615384
User 28829 AUC after training: 0.5384615384615384
User 28829 does not improve AUC. Reverting changes.
Training on augumented user 9028 1/50 current_auc = 0.5384615384615384
User 9028 AUC after training: 0.5384615384615384
User 9028 does not improve AUC. Reverting changes.
Training on augumented user 19160 2/50 current_auc = 0.5384615384615384
User 19160 AUC after training: 0.5384615384615384
User 19160 does not improve AUC. Reverting changes.
Training on augumented user 42493 3/50 current_auc = 0.5384615384615384
User 42493 AUC after training: 0.5384615384615384
User 42493 does not improve AUC. Reverting changes.
Training on augumented user 37889 4/50 current_auc = 0.5384615384615384
User 37889 AUC after training: 0.5384615384615384
User 37889 does not improve AUC. Reverting changes.
Training on augumented user 114286 5/50 current_auc = 0.5384615384615384
User 114286 AUC after training: 0.5384615384615384
User 114286 does not improve AUC. Reverting changes.
Training on augumented user 59084 6/50 current_auc = 0.5384615384615384
User 59084 AUC after training: 0.5384615384615384
User 59084 does not improve AUC. Reverting changes.
Training on augumented user 71690 7/50 current_auc = 0.5384615384615384
User 71690 AUC after training: 0.5384615384615384
User 71690 does not improve AUC. Reverting changes.
Training on augumented user 41242 8/50 current_auc = 0.5384615384615384
User 41242 AUC after training: 0.5384615384615384
User 41242 does not improve AUC. Reverting changes.
Training on augumented user 120873 9/50 current_auc = 0.5384615384615384
User 120873 AUC after training: 0.5384615384615384
User 120873 does not improve AUC. Reverting changes.
Training on augumented user 46483 10/50 current_auc = 0.5384615384615384
User 46483 AUC after training: 0.5384615384615384
User 46483 does not improve AUC. Reverting changes.
Training on augumented user 33148 11/50 current_auc = 0.5384615384615384
User 33148 AUC after training: 0.5384615384615384
User 33148 does not improve AUC. Reverting changes.
Training on augumented user 31770 12/50 current_auc = 0.5384615384615384
User 31770 AUC after training: 0.5384615384615384
User 31770 does not improve AUC. Reverting changes.
Training on augumented user 40538 13/50 current_auc = 0.5384615384615384
User 40538 AUC after training: 0.5384615384615384
User 40538 does not improve AUC. Reverting changes.
Training on augumented user 55510 14/50 current_auc = 0.5384615384615384
User 55510 AUC after training: 0.5384615384615384
User 55510 does not improve AUC. Reverting changes.
Training on augumented user 128334 15/50 current_auc = 0.5384615384615384
User 128334 AUC after training: 0.5384615384615384
User 128334 does not improve AUC. Reverting changes.
Training on augumented user 9902 16/50 current_auc = 0.5384615384615384
User 9902 AUC after training: 0.5384615384615384
User 9902 does not improve AUC. Reverting changes.
Training on augumented user 38507 17/50 current_auc = 0.5384615384615384
User 38507 AUC after training: 0.5384615384615384
User 38507 does not improve AUC. Reverting changes.
Training on augumented user 125748 18/50 current_auc = 0.5384615384615384
User 125748 AUC after training: 0.5384615384615384
User 125748 does not improve AUC. Reverting changes.
Training on augumented user 37156 19/50 current_auc = 0.5384615384615384
User 37156 AUC after training: 0.5384615384615384
User 37156 does not improve AUC. Reverting changes.
Training on augumented user 105367 20/50 current_auc = 0.5384615384615384
User 105367 AUC after training: 0.5384615384615384
User 105367 does not improve AUC. Reverting changes.
Training on augumented user 115911 21/50 current_auc = 0.5384615384615384
User 115911 AUC after training: 0.5384615384615384
User 115911 does not improve AUC. Reverting changes.
Training on augumented user 66005 22/50 current_auc = 0.5384615384615384
User 66005 AUC after training: 0.5384615384615384
User 66005 does not improve AUC. Reverting changes.
Training on augumented user 123478 23/50 current_auc = 0.5384615384615384
User 123478 AUC after training: 0.5384615384615384
User 123478 does not improve AUC. Reverting changes.
Training on augumented user 130114 24/50 current_auc = 0.5384615384615384
User 130114 AUC after training: 0.5384615384615384
User 130114 does not improve AUC. Reverting changes.
Training on augumented user 26068 25/50 current_auc = 0.5384615384615384
User 26068 AUC after training: 0.5384615384615384
User 26068 does not improve AUC. Reverting changes.
Training on augumented user 57662 26/50 current_auc = 0.5384615384615384
User 57662 AUC after training: 0.5384615384615384
User 57662 does not improve AUC. Reverting changes.
Training on augumented user 97573 27/50 current_auc = 0.5384615384615384
User 97573 AUC after training: 0.5384615384615384
User 97573 does not improve AUC. Reverting changes.
Training on augumented user 20733 28/50 current_auc = 0.5384615384615384
User 20733 AUC after training: 0.5384615384615384
User 20733 does not improve AUC. Reverting changes.
Training on augumented user 87869 29/50 current_auc = 0.5384615384615384
User 87869 AUC after training: 0.5384615384615384
User 87869 does not improve AUC. Reverting changes.
Training on augumented user 123429 30/50 current_auc = 0.5384615384615384
User 123429 AUC after training: 0.5384615384615384
User 123429 does not improve AUC. Reverting changes.
Training on augumented user 66342 31/50 current_auc = 0.5384615384615384
User 66342 AUC after training: 0.5384615384615384
User 66342 does not improve AUC. Reverting changes.
Training on augumented user 94349 32/50 current_auc = 0.5384615384615384
User 94349 AUC after training: 0.5384615384615384
User 94349 does not improve AUC. Reverting changes.
Training on augumented user 119066 33/50 current_auc = 0.5384615384615384
User 119066 AUC after training: 0.5384615384615384
User 119066 does not improve AUC. Reverting changes.
Training on augumented user 1153 34/50 current_auc = 0.5384615384615384
User 1153 AUC after training: 0.5384615384615384
User 1153 does not improve AUC. Reverting changes.
Training on augumented user 26998 35/50 current_auc = 0.5384615384615384
User 26998 AUC after training: 0.5384615384615384
User 26998 does not improve AUC. Reverting changes.
Training on augumented user 59298 36/50 current_auc = 0.5384615384615384
User 59298 AUC after training: 0.5384615384615384
User 59298 does not improve AUC. Reverting changes.
Training on augumented user 5538 37/50 current_auc = 0.5384615384615384
User 5538 AUC after training: 0.5384615384615384
User 5538 does not improve AUC. Reverting changes.
Training on augumented user 137309 38/50 current_auc = 0.5384615384615384
User 137309 AUC after training: 0.5384615384615384
User 137309 does not improve AUC. Reverting changes.
Training on augumented user 127045 39/50 current_auc = 0.5384615384615384
User 127045 AUC after training: 0.5384615384615384
User 127045 does not improve AUC. Reverting changes.
Training on augumented user 83079 40/50 current_auc = 0.5384615384615384
User 83079 AUC after training: 0.5384615384615384
User 83079 does not improve AUC. Reverting changes.
Training on augumented user 129410 41/50 current_auc = 0.5384615384615384
User 129410 AUC after training: 0.5384615384615384
User 129410 does not improve AUC. Reverting changes.
Training on augumented user 5934 42/50 current_auc = 0.5384615384615384
User 5934 AUC after training: 0.5384615384615384
User 5934 does not improve AUC. Reverting changes.
Training on augumented user 6520 43/50 current_auc = 0.5384615384615384
User 6520 AUC after training: 0.5384615384615384
User 6520 does not improve AUC. Reverting changes.
Training on augumented user 73784 44/50 current_auc = 0.5384615384615384
User 73784 AUC after training: 0.5384615384615384
User 73784 does not improve AUC. Reverting changes.
Training on augumented user 89518 45/50 current_auc = 0.5384615384615384
User 89518 AUC after training: 0.5384615384615384
User 89518 does not improve AUC. Reverting changes.
Training on augumented user 69608 46/50 current_auc = 0.5384615384615384
User 69608 AUC after training: 0.5384615384615384
User 69608 does not improve AUC. Reverting changes.
Training on augumented user 32030 47/50 current_auc = 0.5384615384615384
User 32030 AUC after training: 0.5384615384615384
User 32030 does not improve AUC. Reverting changes.
Training on augumented user 133764 48/50 current_auc = 0.5384615384615384
User 133764 AUC after training: 0.5384615384615384
User 133764 does not improve AUC. Reverting changes.
Training on augumented user 115062 49/50 current_auc = 0.5384615384615384
User 115062 AUC after training: 0.5384615384615384
User 115062 does not improve AUC. Reverting changes.
[2024-12-02 20:10:29.276200] start test user 48937 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:29.714228] start test user 48937 277/568 recall augumented users by random, augumented_users = [90192, 110035, 88556, 56502, 89419, 4312, 5353, 2312, 109469, 122228, 107091, 76997, 34899, 138461, 80965, 18263, 33380, 84845, 130292, 28369, 64518, 11029, 137950, 75393, 85094, 8367, 565, 64582, 42394, 78922, 62511, 71225, 38988, 100625, 13044, 27588, 3398, 113977, 116344, 105749, 43261, 113764, 16508, 68237, 58328, 86922, 45475, 57487, 69677, 104375]
[2024-12-02 20:10:29.729544] user = 48937 Cloud 277/568
[2024-12-02 20:10:29.747788] user = 48937 Local 277/568
[2024-12-02 20:10:29.810873] user = 48937 Local+ 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:31.954583] user = 48937 MPDA- 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7016806722689075
Training on augumented user 90192 0/50 current_auc = 0.7016806722689075
User 90192 AUC after training: 0.7022058823529411
User 90192 improves AUC. Keeping the model.
Training on augumented user 110035 1/50 current_auc = 0.7022058823529411
User 110035 AUC after training: 0.7069327731092437
User 110035 improves AUC. Keeping the model.
Training on augumented user 88556 2/50 current_auc = 0.7069327731092437
User 88556 AUC after training: 0.7074579831932774
User 88556 improves AUC. Keeping the model.
Training on augumented user 56502 3/50 current_auc = 0.7074579831932774
User 56502 AUC after training: 0.7069327731092437
User 56502 does not improve AUC. Reverting changes.
Training on augumented user 89419 4/50 current_auc = 0.7074579831932774
User 89419 AUC after training: 0.7069327731092437
User 89419 does not improve AUC. Reverting changes.
Training on augumented user 4312 5/50 current_auc = 0.7074579831932774
User 4312 AUC after training: 0.7069327731092437
User 4312 does not improve AUC. Reverting changes.
Training on augumented user 5353 6/50 current_auc = 0.7074579831932774
User 5353 AUC after training: 0.7064075630252101
User 5353 does not improve AUC. Reverting changes.
Training on augumented user 2312 7/50 current_auc = 0.7074579831932774
User 2312 AUC after training: 0.7069327731092436
User 2312 does not improve AUC. Reverting changes.
Training on augumented user 109469 8/50 current_auc = 0.7074579831932774
User 109469 AUC after training: 0.7053571428571429
User 109469 does not improve AUC. Reverting changes.
Training on augumented user 122228 9/50 current_auc = 0.7074579831932774
User 122228 AUC after training: 0.7079831932773109
User 122228 improves AUC. Keeping the model.
Training on augumented user 107091 10/50 current_auc = 0.7079831932773109
User 107091 AUC after training: 0.70640756302521
User 107091 does not improve AUC. Reverting changes.
Training on augumented user 76997 11/50 current_auc = 0.7079831932773109
User 76997 AUC after training: 0.703781512605042
User 76997 does not improve AUC. Reverting changes.
Training on augumented user 34899 12/50 current_auc = 0.7079831932773109
User 34899 AUC after training: 0.7027310924369748
User 34899 does not improve AUC. Reverting changes.
Training on augumented user 138461 13/50 current_auc = 0.7079831932773109
User 138461 AUC after training: 0.7064075630252101
User 138461 does not improve AUC. Reverting changes.
Training on augumented user 80965 14/50 current_auc = 0.7079831932773109
User 80965 AUC after training: 0.7074579831932774
User 80965 does not improve AUC. Reverting changes.
Training on augumented user 18263 15/50 current_auc = 0.7079831932773109
User 18263 AUC after training: 0.7074579831932774
User 18263 does not improve AUC. Reverting changes.
Training on augumented user 33380 16/50 current_auc = 0.7079831932773109
User 33380 AUC after training: 0.7069327731092437
User 33380 does not improve AUC. Reverting changes.
Training on augumented user 84845 17/50 current_auc = 0.7079831932773109
User 84845 AUC after training: 0.7074579831932774
User 84845 does not improve AUC. Reverting changes.
Training on augumented user 130292 18/50 current_auc = 0.7079831932773109
User 130292 AUC after training: 0.7058823529411764
User 130292 does not improve AUC. Reverting changes.
Training on augumented user 28369 19/50 current_auc = 0.7079831932773109
User 28369 AUC after training: 0.7074579831932774
User 28369 does not improve AUC. Reverting changes.
Training on augumented user 64518 20/50 current_auc = 0.7079831932773109
User 64518 AUC after training: 0.7074579831932774
User 64518 does not improve AUC. Reverting changes.
Training on augumented user 11029 21/50 current_auc = 0.7079831932773109
User 11029 AUC after training: 0.7069327731092437
User 11029 does not improve AUC. Reverting changes.
Training on augumented user 137950 22/50 current_auc = 0.7079831932773109
User 137950 AUC after training: 0.7069327731092437
User 137950 does not improve AUC. Reverting changes.
Training on augumented user 75393 23/50 current_auc = 0.7079831932773109
User 75393 AUC after training: 0.7064075630252101
User 75393 does not improve AUC. Reverting changes.
Training on augumented user 85094 24/50 current_auc = 0.7079831932773109
User 85094 AUC after training: 0.7074579831932772
User 85094 does not improve AUC. Reverting changes.
Training on augumented user 8367 25/50 current_auc = 0.7079831932773109
User 8367 AUC after training: 0.7069327731092437
User 8367 does not improve AUC. Reverting changes.
Training on augumented user 565 26/50 current_auc = 0.7079831932773109
User 565 AUC after training: 0.7074579831932774
User 565 does not improve AUC. Reverting changes.
Training on augumented user 64582 27/50 current_auc = 0.7079831932773109
User 64582 AUC after training: 0.7058823529411765
User 64582 does not improve AUC. Reverting changes.
Training on augumented user 42394 28/50 current_auc = 0.7079831932773109
User 42394 AUC after training: 0.7074579831932772
User 42394 does not improve AUC. Reverting changes.
Training on augumented user 78922 29/50 current_auc = 0.7079831932773109
User 78922 AUC after training: 0.7074579831932774
User 78922 does not improve AUC. Reverting changes.
Training on augumented user 62511 30/50 current_auc = 0.7079831932773109
User 62511 AUC after training: 0.7069327731092437
User 62511 does not improve AUC. Reverting changes.
Training on augumented user 71225 31/50 current_auc = 0.7079831932773109
User 71225 AUC after training: 0.7069327731092437
User 71225 does not improve AUC. Reverting changes.
Training on augumented user 38988 32/50 current_auc = 0.7079831932773109
User 38988 AUC after training: 0.703781512605042
User 38988 does not improve AUC. Reverting changes.
Training on augumented user 100625 33/50 current_auc = 0.7079831932773109
User 100625 AUC after training: 0.7079831932773109
User 100625 does not improve AUC. Reverting changes.
Training on augumented user 13044 34/50 current_auc = 0.7079831932773109
User 13044 AUC after training: 0.7069327731092437
User 13044 does not improve AUC. Reverting changes.
Training on augumented user 27588 35/50 current_auc = 0.7079831932773109
User 27588 AUC after training: 0.7074579831932772
User 27588 does not improve AUC. Reverting changes.
Training on augumented user 3398 36/50 current_auc = 0.7079831932773109
User 3398 AUC after training: 0.7053571428571429
User 3398 does not improve AUC. Reverting changes.
Training on augumented user 113977 37/50 current_auc = 0.7079831932773109
User 113977 AUC after training: 0.7079831932773109
User 113977 does not improve AUC. Reverting changes.
Training on augumented user 116344 38/50 current_auc = 0.7079831932773109
User 116344 AUC after training: 0.7074579831932774
User 116344 does not improve AUC. Reverting changes.
Training on augumented user 105749 39/50 current_auc = 0.7079831932773109
User 105749 AUC after training: 0.70640756302521
User 105749 does not improve AUC. Reverting changes.
Training on augumented user 43261 40/50 current_auc = 0.7079831932773109
User 43261 AUC after training: 0.7074579831932772
User 43261 does not improve AUC. Reverting changes.
Training on augumented user 113764 41/50 current_auc = 0.7079831932773109
User 113764 AUC after training: 0.7079831932773109
User 113764 does not improve AUC. Reverting changes.
Training on augumented user 16508 42/50 current_auc = 0.7079831932773109
User 16508 AUC after training: 0.7074579831932774
User 16508 does not improve AUC. Reverting changes.
Training on augumented user 68237 43/50 current_auc = 0.7079831932773109
User 68237 AUC after training: 0.7074579831932774
User 68237 does not improve AUC. Reverting changes.
Training on augumented user 58328 44/50 current_auc = 0.7079831932773109
User 58328 AUC after training: 0.7069327731092436
User 58328 does not improve AUC. Reverting changes.
Training on augumented user 86922 45/50 current_auc = 0.7079831932773109
User 86922 AUC after training: 0.7069327731092437
User 86922 does not improve AUC. Reverting changes.
Training on augumented user 45475 46/50 current_auc = 0.7079831932773109
User 45475 AUC after training: 0.7074579831932774
User 45475 does not improve AUC. Reverting changes.
Training on augumented user 57487 47/50 current_auc = 0.7079831932773109
User 57487 AUC after training: 0.7064075630252101
User 57487 does not improve AUC. Reverting changes.
Training on augumented user 69677 48/50 current_auc = 0.7079831932773109
User 69677 AUC after training: 0.7069327731092437
User 69677 does not improve AUC. Reverting changes.
Training on augumented user 104375 49/50 current_auc = 0.7079831932773109
User 104375 AUC after training: 0.7074579831932774
User 104375 does not improve AUC. Reverting changes.
[2024-12-02 20:11:01.255968] start test user 49056 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:01.701880] start test user 49056 278/568 recall augumented users by random, augumented_users = [119202, 56323, 64264, 62508, 45018, 22239, 95899, 59415, 18853, 61047, 27671, 71016, 28238, 38450, 12741, 117868, 6410, 26257, 104864, 107916, 131239, 54902, 34163, 55604, 58076, 123818, 7535, 102563, 77230, 133473, 109169, 119499, 74990, 107800, 101256, 127787, 67319, 28925, 30729, 62756, 129470, 120221, 16376, 136612, 134407, 35096, 126711, 33214, 14301, 130747]
[2024-12-02 20:11:01.716138] user = 49056 Cloud 278/568
[2024-12-02 20:11:01.731022] user = 49056 Local 278/568
[2024-12-02 20:11:01.769508] user = 49056 Local+ 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:04.243190] user = 49056 MPDA- 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9
Training on augumented user 119202 0/50 current_auc = 0.9
User 119202 AUC after training: 0.9
User 119202 does not improve AUC. Reverting changes.
Training on augumented user 56323 1/50 current_auc = 0.9
User 56323 AUC after training: 0.9
User 56323 does not improve AUC. Reverting changes.
Training on augumented user 64264 2/50 current_auc = 0.9
User 64264 AUC after training: 0.9
User 64264 does not improve AUC. Reverting changes.
Training on augumented user 62508 3/50 current_auc = 0.9
User 62508 AUC after training: 0.9
User 62508 does not improve AUC. Reverting changes.
Training on augumented user 45018 4/50 current_auc = 0.9
User 45018 AUC after training: 0.9
User 45018 does not improve AUC. Reverting changes.
Training on augumented user 22239 5/50 current_auc = 0.9
User 22239 AUC after training: 0.9
User 22239 does not improve AUC. Reverting changes.
Training on augumented user 95899 6/50 current_auc = 0.9
User 95899 AUC after training: 0.9
User 95899 does not improve AUC. Reverting changes.
Training on augumented user 59415 7/50 current_auc = 0.9
User 59415 AUC after training: 0.9
User 59415 does not improve AUC. Reverting changes.
Training on augumented user 18853 8/50 current_auc = 0.9
User 18853 AUC after training: 0.9
User 18853 does not improve AUC. Reverting changes.
Training on augumented user 61047 9/50 current_auc = 0.9
User 61047 AUC after training: 0.9
User 61047 does not improve AUC. Reverting changes.
Training on augumented user 27671 10/50 current_auc = 0.9
User 27671 AUC after training: 0.9
User 27671 does not improve AUC. Reverting changes.
Training on augumented user 71016 11/50 current_auc = 0.9
User 71016 AUC after training: 0.9
User 71016 does not improve AUC. Reverting changes.
Training on augumented user 28238 12/50 current_auc = 0.9
User 28238 AUC after training: 0.9
User 28238 does not improve AUC. Reverting changes.
Training on augumented user 38450 13/50 current_auc = 0.9
User 38450 AUC after training: 0.9
User 38450 does not improve AUC. Reverting changes.
Training on augumented user 12741 14/50 current_auc = 0.9
User 12741 AUC after training: 0.9
User 12741 does not improve AUC. Reverting changes.
Training on augumented user 117868 15/50 current_auc = 0.9
User 117868 AUC after training: 0.9
User 117868 does not improve AUC. Reverting changes.
Training on augumented user 6410 16/50 current_auc = 0.9
User 6410 AUC after training: 0.9
User 6410 does not improve AUC. Reverting changes.
Training on augumented user 26257 17/50 current_auc = 0.9
User 26257 AUC after training: 0.9
User 26257 does not improve AUC. Reverting changes.
Training on augumented user 104864 18/50 current_auc = 0.9
User 104864 AUC after training: 0.9
User 104864 does not improve AUC. Reverting changes.
Training on augumented user 107916 19/50 current_auc = 0.9
User 107916 AUC after training: 0.9
User 107916 does not improve AUC. Reverting changes.
Training on augumented user 131239 20/50 current_auc = 0.9
User 131239 AUC after training: 0.9
User 131239 does not improve AUC. Reverting changes.
Training on augumented user 54902 21/50 current_auc = 0.9
User 54902 AUC after training: 0.9
User 54902 does not improve AUC. Reverting changes.
Training on augumented user 34163 22/50 current_auc = 0.9
User 34163 AUC after training: 0.9
User 34163 does not improve AUC. Reverting changes.
Training on augumented user 55604 23/50 current_auc = 0.9
User 55604 AUC after training: 0.9
User 55604 does not improve AUC. Reverting changes.
Training on augumented user 58076 24/50 current_auc = 0.9
User 58076 AUC after training: 0.9
User 58076 does not improve AUC. Reverting changes.
Training on augumented user 123818 25/50 current_auc = 0.9
User 123818 AUC after training: 0.9
User 123818 does not improve AUC. Reverting changes.
Training on augumented user 7535 26/50 current_auc = 0.9
User 7535 AUC after training: 0.9
User 7535 does not improve AUC. Reverting changes.
Training on augumented user 102563 27/50 current_auc = 0.9
User 102563 AUC after training: 0.9
User 102563 does not improve AUC. Reverting changes.
Training on augumented user 77230 28/50 current_auc = 0.9
User 77230 AUC after training: 0.9
User 77230 does not improve AUC. Reverting changes.
Training on augumented user 133473 29/50 current_auc = 0.9
User 133473 AUC after training: 0.9
User 133473 does not improve AUC. Reverting changes.
Training on augumented user 109169 30/50 current_auc = 0.9
User 109169 AUC after training: 0.9
User 109169 does not improve AUC. Reverting changes.
Training on augumented user 119499 31/50 current_auc = 0.9
User 119499 AUC after training: 0.9
User 119499 does not improve AUC. Reverting changes.
Training on augumented user 74990 32/50 current_auc = 0.9
User 74990 AUC after training: 0.9
User 74990 does not improve AUC. Reverting changes.
Training on augumented user 107800 33/50 current_auc = 0.9
User 107800 AUC after training: 0.9
User 107800 does not improve AUC. Reverting changes.
Training on augumented user 101256 34/50 current_auc = 0.9
User 101256 AUC after training: 0.9
User 101256 does not improve AUC. Reverting changes.
Training on augumented user 127787 35/50 current_auc = 0.9
User 127787 AUC after training: 0.9
User 127787 does not improve AUC. Reverting changes.
Training on augumented user 67319 36/50 current_auc = 0.9
User 67319 AUC after training: 0.9
User 67319 does not improve AUC. Reverting changes.
Training on augumented user 28925 37/50 current_auc = 0.9
User 28925 AUC after training: 0.9
User 28925 does not improve AUC. Reverting changes.
Training on augumented user 30729 38/50 current_auc = 0.9
User 30729 AUC after training: 0.9
User 30729 does not improve AUC. Reverting changes.
Training on augumented user 62756 39/50 current_auc = 0.9
User 62756 AUC after training: 0.9
User 62756 does not improve AUC. Reverting changes.
Training on augumented user 129470 40/50 current_auc = 0.9
User 129470 AUC after training: 0.9
User 129470 does not improve AUC. Reverting changes.
Training on augumented user 120221 41/50 current_auc = 0.9
User 120221 AUC after training: 0.9
User 120221 does not improve AUC. Reverting changes.
Training on augumented user 16376 42/50 current_auc = 0.9
User 16376 AUC after training: 0.9
User 16376 does not improve AUC. Reverting changes.
Training on augumented user 136612 43/50 current_auc = 0.9
User 136612 AUC after training: 0.9
User 136612 does not improve AUC. Reverting changes.
Training on augumented user 134407 44/50 current_auc = 0.9
User 134407 AUC after training: 0.9
User 134407 does not improve AUC. Reverting changes.
Training on augumented user 35096 45/50 current_auc = 0.9
User 35096 AUC after training: 0.9
User 35096 does not improve AUC. Reverting changes.
Training on augumented user 126711 46/50 current_auc = 0.9
User 126711 AUC after training: 0.9
User 126711 does not improve AUC. Reverting changes.
Training on augumented user 33214 47/50 current_auc = 0.9
User 33214 AUC after training: 0.9
User 33214 does not improve AUC. Reverting changes.
Training on augumented user 14301 48/50 current_auc = 0.9
User 14301 AUC after training: 0.9
User 14301 does not improve AUC. Reverting changes.
Training on augumented user 130747 49/50 current_auc = 0.9
User 130747 AUC after training: 0.9
User 130747 does not improve AUC. Reverting changes.
[2024-12-02 20:11:31.480468] start test user 49065 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:32.154869] start test user 49065 279/568 recall augumented users by random, augumented_users = [67269, 125924, 43315, 41123, 91288, 72610, 26659, 121595, 96982, 71683, 138268, 12155, 119722, 6978, 126092, 103464, 128347, 72759, 85364, 3451, 45264, 22243, 44828, 102104, 98962, 13622, 129537, 73764, 41708, 117159, 84311, 23275, 82035, 33308, 1406, 72831, 3644, 21909, 45250, 35161, 126865, 85345, 54327, 68259, 30315, 129808, 63212, 133960, 67475, 63788]
[2024-12-02 20:11:32.170783] user = 49065 Cloud 279/568
[2024-12-02 20:11:32.179980] user = 49065 Local 279/568
[2024-12-02 20:11:32.245506] user = 49065 Local+ 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:34.840352] user = 49065 MPDA- 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.590625
Training on augumented user 67269 0/50 current_auc = 0.590625
User 67269 AUC after training: 0.590625
User 67269 does not improve AUC. Reverting changes.
Training on augumented user 125924 1/50 current_auc = 0.590625
User 125924 AUC after training: 0.5875
User 125924 does not improve AUC. Reverting changes.
Training on augumented user 43315 2/50 current_auc = 0.590625
User 43315 AUC after training: 0.590625
User 43315 does not improve AUC. Reverting changes.
Training on augumented user 41123 3/50 current_auc = 0.590625
User 41123 AUC after training: 0.596875
User 41123 improves AUC. Keeping the model.
Training on augumented user 91288 4/50 current_auc = 0.596875
User 91288 AUC after training: 0.596875
User 91288 does not improve AUC. Reverting changes.
Training on augumented user 72610 5/50 current_auc = 0.596875
User 72610 AUC after training: 0.590625
User 72610 does not improve AUC. Reverting changes.
Training on augumented user 26659 6/50 current_auc = 0.596875
User 26659 AUC after training: 0.590625
User 26659 does not improve AUC. Reverting changes.
Training on augumented user 121595 7/50 current_auc = 0.596875
User 121595 AUC after training: 0.596875
User 121595 does not improve AUC. Reverting changes.
Training on augumented user 96982 8/50 current_auc = 0.596875
User 96982 AUC after training: 0.596875
User 96982 does not improve AUC. Reverting changes.
Training on augumented user 71683 9/50 current_auc = 0.596875
User 71683 AUC after training: 0.596875
User 71683 does not improve AUC. Reverting changes.
Training on augumented user 138268 10/50 current_auc = 0.596875
User 138268 AUC after training: 0.590625
User 138268 does not improve AUC. Reverting changes.
Training on augumented user 12155 11/50 current_auc = 0.596875
User 12155 AUC after training: 0.596875
User 12155 does not improve AUC. Reverting changes.
Training on augumented user 119722 12/50 current_auc = 0.596875
User 119722 AUC after training: 0.590625
User 119722 does not improve AUC. Reverting changes.
Training on augumented user 6978 13/50 current_auc = 0.596875
User 6978 AUC after training: 0.59375
User 6978 does not improve AUC. Reverting changes.
Training on augumented user 126092 14/50 current_auc = 0.596875
User 126092 AUC after training: 0.596875
User 126092 does not improve AUC. Reverting changes.
Training on augumented user 103464 15/50 current_auc = 0.596875
User 103464 AUC after training: 0.596875
User 103464 does not improve AUC. Reverting changes.
Training on augumented user 128347 16/50 current_auc = 0.596875
User 128347 AUC after training: 0.596875
User 128347 does not improve AUC. Reverting changes.
Training on augumented user 72759 17/50 current_auc = 0.596875
User 72759 AUC after training: 0.596875
User 72759 does not improve AUC. Reverting changes.
Training on augumented user 85364 18/50 current_auc = 0.596875
User 85364 AUC after training: 0.596875
User 85364 does not improve AUC. Reverting changes.
Training on augumented user 3451 19/50 current_auc = 0.596875
User 3451 AUC after training: 0.596875
User 3451 does not improve AUC. Reverting changes.
Training on augumented user 45264 20/50 current_auc = 0.596875
User 45264 AUC after training: 0.596875
User 45264 does not improve AUC. Reverting changes.
Training on augumented user 22243 21/50 current_auc = 0.596875
User 22243 AUC after training: 0.596875
User 22243 does not improve AUC. Reverting changes.
Training on augumented user 44828 22/50 current_auc = 0.596875
User 44828 AUC after training: 0.596875
User 44828 does not improve AUC. Reverting changes.
Training on augumented user 102104 23/50 current_auc = 0.596875
User 102104 AUC after training: 0.596875
User 102104 does not improve AUC. Reverting changes.
Training on augumented user 98962 24/50 current_auc = 0.596875
User 98962 AUC after training: 0.596875
User 98962 does not improve AUC. Reverting changes.
Training on augumented user 13622 25/50 current_auc = 0.596875
User 13622 AUC after training: 0.59375
User 13622 does not improve AUC. Reverting changes.
Training on augumented user 129537 26/50 current_auc = 0.596875
User 129537 AUC after training: 0.596875
User 129537 does not improve AUC. Reverting changes.
Training on augumented user 73764 27/50 current_auc = 0.596875
User 73764 AUC after training: 0.596875
User 73764 does not improve AUC. Reverting changes.
Training on augumented user 41708 28/50 current_auc = 0.596875
User 41708 AUC after training: 0.596875
User 41708 does not improve AUC. Reverting changes.
Training on augumented user 117159 29/50 current_auc = 0.596875
User 117159 AUC after training: 0.6
User 117159 improves AUC. Keeping the model.
Training on augumented user 84311 30/50 current_auc = 0.6
User 84311 AUC after training: 0.6
User 84311 does not improve AUC. Reverting changes.
Training on augumented user 23275 31/50 current_auc = 0.6
User 23275 AUC after training: 0.6
User 23275 does not improve AUC. Reverting changes.
Training on augumented user 82035 32/50 current_auc = 0.6
User 82035 AUC after training: 0.59375
User 82035 does not improve AUC. Reverting changes.
Training on augumented user 33308 33/50 current_auc = 0.6
User 33308 AUC after training: 0.5875
User 33308 does not improve AUC. Reverting changes.
Training on augumented user 1406 34/50 current_auc = 0.6
User 1406 AUC after training: 0.596875
User 1406 does not improve AUC. Reverting changes.
Training on augumented user 72831 35/50 current_auc = 0.6
User 72831 AUC after training: 0.6
User 72831 does not improve AUC. Reverting changes.
Training on augumented user 3644 36/50 current_auc = 0.6
User 3644 AUC after training: 0.6
User 3644 does not improve AUC. Reverting changes.
Training on augumented user 21909 37/50 current_auc = 0.6
User 21909 AUC after training: 0.59375
User 21909 does not improve AUC. Reverting changes.
Training on augumented user 45250 38/50 current_auc = 0.6
User 45250 AUC after training: 0.6
User 45250 does not improve AUC. Reverting changes.
Training on augumented user 35161 39/50 current_auc = 0.6
User 35161 AUC after training: 0.6
User 35161 does not improve AUC. Reverting changes.
Training on augumented user 126865 40/50 current_auc = 0.6
User 126865 AUC after training: 0.59375
User 126865 does not improve AUC. Reverting changes.
Training on augumented user 85345 41/50 current_auc = 0.6
User 85345 AUC after training: 0.6
User 85345 does not improve AUC. Reverting changes.
Training on augumented user 54327 42/50 current_auc = 0.6
User 54327 AUC after training: 0.6
User 54327 does not improve AUC. Reverting changes.
Training on augumented user 68259 43/50 current_auc = 0.6
User 68259 AUC after training: 0.59375
User 68259 does not improve AUC. Reverting changes.
Training on augumented user 30315 44/50 current_auc = 0.6
User 30315 AUC after training: 0.6
User 30315 does not improve AUC. Reverting changes.
Training on augumented user 129808 45/50 current_auc = 0.6
User 129808 AUC after training: 0.6
User 129808 does not improve AUC. Reverting changes.
Training on augumented user 63212 46/50 current_auc = 0.6
User 63212 AUC after training: 0.6
User 63212 does not improve AUC. Reverting changes.
Training on augumented user 133960 47/50 current_auc = 0.6
User 133960 AUC after training: 0.6
User 133960 does not improve AUC. Reverting changes.
Training on augumented user 67475 48/50 current_auc = 0.6
User 67475 AUC after training: 0.6
User 67475 does not improve AUC. Reverting changes.
Training on augumented user 63788 49/50 current_auc = 0.6
User 63788 AUC after training: 0.59375
User 63788 does not improve AUC. Reverting changes.
[2024-12-02 20:12:02.249528] start test user 49067 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:02.659638] start test user 49067 280/568 recall augumented users by random, augumented_users = [6442, 24282, 116621, 91100, 98510, 55869, 20486, 29834, 15088, 99712, 78315, 103963, 71468, 61467, 100795, 28399, 78376, 70940, 6195, 102970, 10280, 21986, 47591, 117248, 99482, 87083, 58637, 128820, 11184, 62063, 25747, 89377, 20597, 122608, 57530, 128395, 60540, 26547, 45071, 124862, 138431, 60630, 119516, 127054, 23127, 58496, 53699, 22024, 52057, 119779]
[2024-12-02 20:12:02.674802] user = 49067 Cloud 280/568
[2024-12-02 20:12:02.684889] user = 49067 Local 280/568
[2024-12-02 20:12:02.749870] user = 49067 Local+ 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:04.784818] user = 49067 MPDA- 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6041666666666666
Training on augumented user 6442 0/50 current_auc = 0.6041666666666666
User 6442 AUC after training: 0.6041666666666666
User 6442 does not improve AUC. Reverting changes.
Training on augumented user 24282 1/50 current_auc = 0.6041666666666666
User 24282 AUC after training: 0.6041666666666666
User 24282 does not improve AUC. Reverting changes.
Training on augumented user 116621 2/50 current_auc = 0.6041666666666666
User 116621 AUC after training: 0.6041666666666666
User 116621 does not improve AUC. Reverting changes.
Training on augumented user 91100 3/50 current_auc = 0.6041666666666666
User 91100 AUC after training: 0.6041666666666666
User 91100 does not improve AUC. Reverting changes.
Training on augumented user 98510 4/50 current_auc = 0.6041666666666666
User 98510 AUC after training: 0.6041666666666666
User 98510 does not improve AUC. Reverting changes.
Training on augumented user 55869 5/50 current_auc = 0.6041666666666666
User 55869 AUC after training: 0.6041666666666666
User 55869 does not improve AUC. Reverting changes.
Training on augumented user 20486 6/50 current_auc = 0.6041666666666666
User 20486 AUC after training: 0.6041666666666666
User 20486 does not improve AUC. Reverting changes.
Training on augumented user 29834 7/50 current_auc = 0.6041666666666666
User 29834 AUC after training: 0.6041666666666666
User 29834 does not improve AUC. Reverting changes.
Training on augumented user 15088 8/50 current_auc = 0.6041666666666666
User 15088 AUC after training: 0.6041666666666666
User 15088 does not improve AUC. Reverting changes.
Training on augumented user 99712 9/50 current_auc = 0.6041666666666666
User 99712 AUC after training: 0.625
User 99712 improves AUC. Keeping the model.
Training on augumented user 78315 10/50 current_auc = 0.625
User 78315 AUC after training: 0.625
User 78315 does not improve AUC. Reverting changes.
Training on augumented user 103963 11/50 current_auc = 0.625
User 103963 AUC after training: 0.625
User 103963 does not improve AUC. Reverting changes.
Training on augumented user 71468 12/50 current_auc = 0.625
User 71468 AUC after training: 0.625
User 71468 does not improve AUC. Reverting changes.
Training on augumented user 61467 13/50 current_auc = 0.625
User 61467 AUC after training: 0.625
User 61467 does not improve AUC. Reverting changes.
Training on augumented user 100795 14/50 current_auc = 0.625
User 100795 AUC after training: 0.625
User 100795 does not improve AUC. Reverting changes.
Training on augumented user 28399 15/50 current_auc = 0.625
User 28399 AUC after training: 0.625
User 28399 does not improve AUC. Reverting changes.
Training on augumented user 78376 16/50 current_auc = 0.625
User 78376 AUC after training: 0.625
User 78376 does not improve AUC. Reverting changes.
Training on augumented user 70940 17/50 current_auc = 0.625
User 70940 AUC after training: 0.625
User 70940 does not improve AUC. Reverting changes.
Training on augumented user 6195 18/50 current_auc = 0.625
User 6195 AUC after training: 0.625
User 6195 does not improve AUC. Reverting changes.
Training on augumented user 102970 19/50 current_auc = 0.625
User 102970 AUC after training: 0.625
User 102970 does not improve AUC. Reverting changes.
Training on augumented user 10280 20/50 current_auc = 0.625
User 10280 AUC after training: 0.6041666666666666
User 10280 does not improve AUC. Reverting changes.
Training on augumented user 21986 21/50 current_auc = 0.625
User 21986 AUC after training: 0.625
User 21986 does not improve AUC. Reverting changes.
Training on augumented user 47591 22/50 current_auc = 0.625
User 47591 AUC after training: 0.625
User 47591 does not improve AUC. Reverting changes.
Training on augumented user 117248 23/50 current_auc = 0.625
User 117248 AUC after training: 0.625
User 117248 does not improve AUC. Reverting changes.
Training on augumented user 99482 24/50 current_auc = 0.625
User 99482 AUC after training: 0.625
User 99482 does not improve AUC. Reverting changes.
Training on augumented user 87083 25/50 current_auc = 0.625
User 87083 AUC after training: 0.625
User 87083 does not improve AUC. Reverting changes.
Training on augumented user 58637 26/50 current_auc = 0.625
User 58637 AUC after training: 0.625
User 58637 does not improve AUC. Reverting changes.
Training on augumented user 128820 27/50 current_auc = 0.625
User 128820 AUC after training: 0.625
User 128820 does not improve AUC. Reverting changes.
Training on augumented user 11184 28/50 current_auc = 0.625
User 11184 AUC after training: 0.625
User 11184 does not improve AUC. Reverting changes.
Training on augumented user 62063 29/50 current_auc = 0.625
User 62063 AUC after training: 0.625
User 62063 does not improve AUC. Reverting changes.
Training on augumented user 25747 30/50 current_auc = 0.625
User 25747 AUC after training: 0.625
User 25747 does not improve AUC. Reverting changes.
Training on augumented user 89377 31/50 current_auc = 0.625
User 89377 AUC after training: 0.625
User 89377 does not improve AUC. Reverting changes.
Training on augumented user 20597 32/50 current_auc = 0.625
User 20597 AUC after training: 0.625
User 20597 does not improve AUC. Reverting changes.
Training on augumented user 122608 33/50 current_auc = 0.625
User 122608 AUC after training: 0.6041666666666666
User 122608 does not improve AUC. Reverting changes.
Training on augumented user 57530 34/50 current_auc = 0.625
User 57530 AUC after training: 0.625
User 57530 does not improve AUC. Reverting changes.
Training on augumented user 128395 35/50 current_auc = 0.625
User 128395 AUC after training: 0.625
User 128395 does not improve AUC. Reverting changes.
Training on augumented user 60540 36/50 current_auc = 0.625
User 60540 AUC after training: 0.625
User 60540 does not improve AUC. Reverting changes.
Training on augumented user 26547 37/50 current_auc = 0.625
User 26547 AUC after training: 0.625
User 26547 does not improve AUC. Reverting changes.
Training on augumented user 45071 38/50 current_auc = 0.625
User 45071 AUC after training: 0.625
User 45071 does not improve AUC. Reverting changes.
Training on augumented user 124862 39/50 current_auc = 0.625
User 124862 AUC after training: 0.625
User 124862 does not improve AUC. Reverting changes.
Training on augumented user 138431 40/50 current_auc = 0.625
User 138431 AUC after training: 0.625
User 138431 does not improve AUC. Reverting changes.
Training on augumented user 60630 41/50 current_auc = 0.625
User 60630 AUC after training: 0.625
User 60630 does not improve AUC. Reverting changes.
Training on augumented user 119516 42/50 current_auc = 0.625
User 119516 AUC after training: 0.625
User 119516 does not improve AUC. Reverting changes.
Training on augumented user 127054 43/50 current_auc = 0.625
User 127054 AUC after training: 0.625
User 127054 does not improve AUC. Reverting changes.
Training on augumented user 23127 44/50 current_auc = 0.625
User 23127 AUC after training: 0.625
User 23127 does not improve AUC. Reverting changes.
Training on augumented user 58496 45/50 current_auc = 0.625
User 58496 AUC after training: 0.625
User 58496 does not improve AUC. Reverting changes.
Training on augumented user 53699 46/50 current_auc = 0.625
User 53699 AUC after training: 0.625
User 53699 does not improve AUC. Reverting changes.
Training on augumented user 22024 47/50 current_auc = 0.625
User 22024 AUC after training: 0.625
User 22024 does not improve AUC. Reverting changes.
Training on augumented user 52057 48/50 current_auc = 0.625
User 52057 AUC after training: 0.6041666666666666
User 52057 does not improve AUC. Reverting changes.
Training on augumented user 119779 49/50 current_auc = 0.625
User 119779 AUC after training: 0.625
User 119779 does not improve AUC. Reverting changes.
[2024-12-02 20:12:32.651599] start test user 49086 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:33.299673] start test user 49086 281/568 recall augumented users by random, augumented_users = [34129, 65735, 109571, 38866, 128317, 89056, 60449, 87594, 101620, 49554, 77278, 83751, 123726, 84980, 103763, 6589, 33877, 106346, 68923, 123006, 119036, 123152, 58683, 99563, 26540, 38298, 4229, 112420, 79522, 52704, 3347, 22310, 6316, 106501, 62799, 35376, 10347, 30523, 90438, 65662, 122216, 90499, 30769, 95367, 4349, 40317, 126135, 55156, 72026, 102025]
[2024-12-02 20:12:33.314795] user = 49086 Cloud 281/568
[2024-12-02 20:12:33.337928] user = 49086 Local 281/568
[2024-12-02 20:12:33.391592] user = 49086 Local+ 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:35.810144] user = 49086 MPDA- 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.65625
Training on augumented user 34129 0/50 current_auc = 0.65625
User 34129 AUC after training: 0.65625
User 34129 does not improve AUC. Reverting changes.
Training on augumented user 65735 1/50 current_auc = 0.65625
User 65735 AUC after training: 0.65625
User 65735 does not improve AUC. Reverting changes.
Training on augumented user 109571 2/50 current_auc = 0.65625
User 109571 AUC after training: 0.65625
User 109571 does not improve AUC. Reverting changes.
Training on augumented user 38866 3/50 current_auc = 0.65625
User 38866 AUC after training: 0.65625
User 38866 does not improve AUC. Reverting changes.
Training on augumented user 128317 4/50 current_auc = 0.65625
User 128317 AUC after training: 0.65625
User 128317 does not improve AUC. Reverting changes.
Training on augumented user 89056 5/50 current_auc = 0.65625
User 89056 AUC after training: 0.65625
User 89056 does not improve AUC. Reverting changes.
Training on augumented user 60449 6/50 current_auc = 0.65625
User 60449 AUC after training: 0.65625
User 60449 does not improve AUC. Reverting changes.
Training on augumented user 87594 7/50 current_auc = 0.65625
User 87594 AUC after training: 0.65625
User 87594 does not improve AUC. Reverting changes.
Training on augumented user 101620 8/50 current_auc = 0.65625
User 101620 AUC after training: 0.65625
User 101620 does not improve AUC. Reverting changes.
Training on augumented user 49554 9/50 current_auc = 0.65625
User 49554 AUC after training: 0.625
User 49554 does not improve AUC. Reverting changes.
Training on augumented user 77278 10/50 current_auc = 0.65625
User 77278 AUC after training: 0.65625
User 77278 does not improve AUC. Reverting changes.
Training on augumented user 83751 11/50 current_auc = 0.65625
User 83751 AUC after training: 0.65625
User 83751 does not improve AUC. Reverting changes.
Training on augumented user 123726 12/50 current_auc = 0.65625
User 123726 AUC after training: 0.65625
User 123726 does not improve AUC. Reverting changes.
Training on augumented user 84980 13/50 current_auc = 0.65625
User 84980 AUC after training: 0.65625
User 84980 does not improve AUC. Reverting changes.
Training on augumented user 103763 14/50 current_auc = 0.65625
User 103763 AUC after training: 0.65625
User 103763 does not improve AUC. Reverting changes.
Training on augumented user 6589 15/50 current_auc = 0.65625
User 6589 AUC after training: 0.65625
User 6589 does not improve AUC. Reverting changes.
Training on augumented user 33877 16/50 current_auc = 0.65625
User 33877 AUC after training: 0.625
User 33877 does not improve AUC. Reverting changes.
Training on augumented user 106346 17/50 current_auc = 0.65625
User 106346 AUC after training: 0.65625
User 106346 does not improve AUC. Reverting changes.
Training on augumented user 68923 18/50 current_auc = 0.65625
User 68923 AUC after training: 0.625
User 68923 does not improve AUC. Reverting changes.
Training on augumented user 123006 19/50 current_auc = 0.65625
User 123006 AUC after training: 0.65625
User 123006 does not improve AUC. Reverting changes.
Training on augumented user 119036 20/50 current_auc = 0.65625
User 119036 AUC after training: 0.65625
User 119036 does not improve AUC. Reverting changes.
Training on augumented user 123152 21/50 current_auc = 0.65625
User 123152 AUC after training: 0.65625
User 123152 does not improve AUC. Reverting changes.
Training on augumented user 58683 22/50 current_auc = 0.65625
User 58683 AUC after training: 0.65625
User 58683 does not improve AUC. Reverting changes.
Training on augumented user 99563 23/50 current_auc = 0.65625
User 99563 AUC after training: 0.65625
User 99563 does not improve AUC. Reverting changes.
Training on augumented user 26540 24/50 current_auc = 0.65625
User 26540 AUC after training: 0.65625
User 26540 does not improve AUC. Reverting changes.
Training on augumented user 38298 25/50 current_auc = 0.65625
User 38298 AUC after training: 0.65625
User 38298 does not improve AUC. Reverting changes.
Training on augumented user 4229 26/50 current_auc = 0.65625
User 4229 AUC after training: 0.65625
User 4229 does not improve AUC. Reverting changes.
Training on augumented user 112420 27/50 current_auc = 0.65625
User 112420 AUC after training: 0.65625
User 112420 does not improve AUC. Reverting changes.
Training on augumented user 79522 28/50 current_auc = 0.65625
User 79522 AUC after training: 0.65625
User 79522 does not improve AUC. Reverting changes.
Training on augumented user 52704 29/50 current_auc = 0.65625
User 52704 AUC after training: 0.65625
User 52704 does not improve AUC. Reverting changes.
Training on augumented user 3347 30/50 current_auc = 0.65625
User 3347 AUC after training: 0.65625
User 3347 does not improve AUC. Reverting changes.
Training on augumented user 22310 31/50 current_auc = 0.65625
User 22310 AUC after training: 0.65625
User 22310 does not improve AUC. Reverting changes.
Training on augumented user 6316 32/50 current_auc = 0.65625
User 6316 AUC after training: 0.65625
User 6316 does not improve AUC. Reverting changes.
Training on augumented user 106501 33/50 current_auc = 0.65625
User 106501 AUC after training: 0.625
User 106501 does not improve AUC. Reverting changes.
Training on augumented user 62799 34/50 current_auc = 0.65625
User 62799 AUC after training: 0.65625
User 62799 does not improve AUC. Reverting changes.
Training on augumented user 35376 35/50 current_auc = 0.65625
User 35376 AUC after training: 0.65625
User 35376 does not improve AUC. Reverting changes.
Training on augumented user 10347 36/50 current_auc = 0.65625
User 10347 AUC after training: 0.65625
User 10347 does not improve AUC. Reverting changes.
Training on augumented user 30523 37/50 current_auc = 0.65625
User 30523 AUC after training: 0.65625
User 30523 does not improve AUC. Reverting changes.
Training on augumented user 90438 38/50 current_auc = 0.65625
User 90438 AUC after training: 0.65625
User 90438 does not improve AUC. Reverting changes.
Training on augumented user 65662 39/50 current_auc = 0.65625
User 65662 AUC after training: 0.65625
User 65662 does not improve AUC. Reverting changes.
Training on augumented user 122216 40/50 current_auc = 0.65625
User 122216 AUC after training: 0.65625
User 122216 does not improve AUC. Reverting changes.
Training on augumented user 90499 41/50 current_auc = 0.65625
User 90499 AUC after training: 0.65625
User 90499 does not improve AUC. Reverting changes.
Training on augumented user 30769 42/50 current_auc = 0.65625
User 30769 AUC after training: 0.65625
User 30769 does not improve AUC. Reverting changes.
Training on augumented user 95367 43/50 current_auc = 0.65625
User 95367 AUC after training: 0.6875
User 95367 improves AUC. Keeping the model.
Training on augumented user 4349 44/50 current_auc = 0.6875
User 4349 AUC after training: 0.6875
User 4349 does not improve AUC. Reverting changes.
Training on augumented user 40317 45/50 current_auc = 0.6875
User 40317 AUC after training: 0.65625
User 40317 does not improve AUC. Reverting changes.
Training on augumented user 126135 46/50 current_auc = 0.6875
User 126135 AUC after training: 0.6875
User 126135 does not improve AUC. Reverting changes.
Training on augumented user 55156 47/50 current_auc = 0.6875
User 55156 AUC after training: 0.6875
User 55156 does not improve AUC. Reverting changes.
Training on augumented user 72026 48/50 current_auc = 0.6875
User 72026 AUC after training: 0.6875
User 72026 does not improve AUC. Reverting changes.
Training on augumented user 102025 49/50 current_auc = 0.6875
User 102025 AUC after training: 0.65625
User 102025 does not improve AUC. Reverting changes.
[2024-12-02 20:13:07.335119] start test user 49091 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:08.148226] start test user 49091 282/568 recall augumented users by random, augumented_users = [132441, 77705, 3275, 78855, 113942, 126030, 129647, 71156, 107537, 27501, 77566, 48725, 50481, 137127, 85329, 120610, 96250, 20585, 89915, 94516, 105220, 138266, 29733, 60370, 17509, 31766, 45376, 18784, 130661, 88580, 137713, 79455, 78748, 38669, 19872, 14113, 127162, 7799, 48132, 40993, 45976, 116559, 16363, 55261, 57234, 30633, 34241, 72922, 102673, 53112]
[2024-12-02 20:13:08.186619] user = 49091 Cloud 282/568
[2024-12-02 20:13:08.211758] user = 49091 Local 282/568
[2024-12-02 20:13:08.265858] user = 49091 Local+ 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:10.362300] user = 49091 MPDA- 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6155818540433925
Training on augumented user 132441 0/50 current_auc = 0.6155818540433925
User 132441 AUC after training: 0.6157790927021696
User 132441 improves AUC. Keeping the model.
Training on augumented user 77705 1/50 current_auc = 0.6157790927021696
User 77705 AUC after training: 0.6157790927021697
User 77705 improves AUC. Keeping the model.
Training on augumented user 3275 2/50 current_auc = 0.6157790927021697
User 3275 AUC after training: 0.6143984220907297
User 3275 does not improve AUC. Reverting changes.
Training on augumented user 78855 3/50 current_auc = 0.6157790927021697
User 78855 AUC after training: 0.6157790927021697
User 78855 does not improve AUC. Reverting changes.
Training on augumented user 113942 4/50 current_auc = 0.6157790927021697
User 113942 AUC after training: 0.6157790927021697
User 113942 does not improve AUC. Reverting changes.
Training on augumented user 126030 5/50 current_auc = 0.6157790927021697
User 126030 AUC after training: 0.6149901380670612
User 126030 does not improve AUC. Reverting changes.
Training on augumented user 129647 6/50 current_auc = 0.6157790927021697
User 129647 AUC after training: 0.6142011834319526
User 129647 does not improve AUC. Reverting changes.
Training on augumented user 71156 7/50 current_auc = 0.6157790927021697
User 71156 AUC after training: 0.6149901380670612
User 71156 does not improve AUC. Reverting changes.
Training on augumented user 107537 8/50 current_auc = 0.6157790927021697
User 107537 AUC after training: 0.6138067061143984
User 107537 does not improve AUC. Reverting changes.
Training on augumented user 27501 9/50 current_auc = 0.6157790927021697
User 27501 AUC after training: 0.6142011834319527
User 27501 does not improve AUC. Reverting changes.
Training on augumented user 77566 10/50 current_auc = 0.6157790927021697
User 77566 AUC after training: 0.6151873767258382
User 77566 does not improve AUC. Reverting changes.
Training on augumented user 48725 11/50 current_auc = 0.6157790927021697
User 48725 AUC after training: 0.6145956607495069
User 48725 does not improve AUC. Reverting changes.
Training on augumented user 50481 12/50 current_auc = 0.6157790927021697
User 50481 AUC after training: 0.6159763313609468
User 50481 improves AUC. Keeping the model.
Training on augumented user 137127 13/50 current_auc = 0.6159763313609468
User 137127 AUC after training: 0.6151873767258382
User 137127 does not improve AUC. Reverting changes.
Training on augumented user 85329 14/50 current_auc = 0.6159763313609468
User 85329 AUC after training: 0.6163708086785009
User 85329 improves AUC. Keeping the model.
Training on augumented user 120610 15/50 current_auc = 0.6163708086785009
User 120610 AUC after training: 0.6147928994082841
User 120610 does not improve AUC. Reverting changes.
Training on augumented user 96250 16/50 current_auc = 0.6163708086785009
User 96250 AUC after training: 0.6189349112426035
User 96250 improves AUC. Keeping the model.
Training on augumented user 20585 17/50 current_auc = 0.6189349112426035
User 20585 AUC after training: 0.6187376725838264
User 20585 does not improve AUC. Reverting changes.
Training on augumented user 89915 18/50 current_auc = 0.6189349112426035
User 89915 AUC after training: 0.618145956607495
User 89915 does not improve AUC. Reverting changes.
Training on augumented user 94516 19/50 current_auc = 0.6189349112426035
User 94516 AUC after training: 0.6140039447731755
User 94516 does not improve AUC. Reverting changes.
Training on augumented user 105220 20/50 current_auc = 0.6189349112426035
User 105220 AUC after training: 0.6165680473372782
User 105220 does not improve AUC. Reverting changes.
Training on augumented user 138266 21/50 current_auc = 0.6189349112426035
User 138266 AUC after training: 0.6175542406311637
User 138266 does not improve AUC. Reverting changes.
Training on augumented user 29733 22/50 current_auc = 0.6189349112426035
User 29733 AUC after training: 0.6189349112426036
User 29733 improves AUC. Keeping the model.
Training on augumented user 60370 23/50 current_auc = 0.6189349112426036
User 60370 AUC after training: 0.6183431952662722
User 60370 does not improve AUC. Reverting changes.
Training on augumented user 17509 24/50 current_auc = 0.6189349112426036
User 17509 AUC after training: 0.6173570019723866
User 17509 does not improve AUC. Reverting changes.
Training on augumented user 31766 25/50 current_auc = 0.6189349112426036
User 31766 AUC after training: 0.6189349112426036
User 31766 does not improve AUC. Reverting changes.
Training on augumented user 45376 26/50 current_auc = 0.6189349112426036
User 45376 AUC after training: 0.6185404339250493
User 45376 does not improve AUC. Reverting changes.
Training on augumented user 18784 27/50 current_auc = 0.6189349112426036
User 18784 AUC after training: 0.618145956607495
User 18784 does not improve AUC. Reverting changes.
Training on augumented user 130661 28/50 current_auc = 0.6189349112426036
User 130661 AUC after training: 0.6175542406311637
User 130661 does not improve AUC. Reverting changes.
Training on augumented user 88580 29/50 current_auc = 0.6189349112426036
User 88580 AUC after training: 0.6189349112426036
User 88580 does not improve AUC. Reverting changes.
Training on augumented user 137713 30/50 current_auc = 0.6189349112426036
User 137713 AUC after training: 0.6157790927021697
User 137713 does not improve AUC. Reverting changes.
Training on augumented user 79455 31/50 current_auc = 0.6189349112426036
User 79455 AUC after training: 0.6197238658777121
User 79455 improves AUC. Keeping the model.
Training on augumented user 78748 32/50 current_auc = 0.6197238658777121
User 78748 AUC after training: 0.6189349112426036
User 78748 does not improve AUC. Reverting changes.
Training on augumented user 38669 33/50 current_auc = 0.6197238658777121
User 38669 AUC after training: 0.6157790927021697
User 38669 does not improve AUC. Reverting changes.
Training on augumented user 19872 34/50 current_auc = 0.6197238658777121
User 19872 AUC after training: 0.619723865877712
User 19872 does not improve AUC. Reverting changes.
Training on augumented user 14113 35/50 current_auc = 0.6197238658777121
User 14113 AUC after training: 0.619723865877712
User 14113 does not improve AUC. Reverting changes.
Training on augumented user 127162 36/50 current_auc = 0.6197238658777121
User 127162 AUC after training: 0.6201183431952662
User 127162 improves AUC. Keeping the model.
Training on augumented user 7799 37/50 current_auc = 0.6201183431952662
User 7799 AUC after training: 0.6187376725838264
User 7799 does not improve AUC. Reverting changes.
Training on augumented user 48132 38/50 current_auc = 0.6201183431952662
User 48132 AUC after training: 0.6193293885601578
User 48132 does not improve AUC. Reverting changes.
Training on augumented user 40993 39/50 current_auc = 0.6201183431952662
User 40993 AUC after training: 0.6177514792899408
User 40993 does not improve AUC. Reverting changes.
Training on augumented user 45976 40/50 current_auc = 0.6201183431952662
User 45976 AUC after training: 0.6171597633136094
User 45976 does not improve AUC. Reverting changes.
Training on augumented user 116559 41/50 current_auc = 0.6201183431952662
User 116559 AUC after training: 0.6197238658777121
User 116559 does not improve AUC. Reverting changes.
Training on augumented user 16363 42/50 current_auc = 0.6201183431952662
User 16363 AUC after training: 0.6209072978303747
User 16363 improves AUC. Keeping the model.
Training on augumented user 55261 43/50 current_auc = 0.6209072978303747
User 55261 AUC after training: 0.6189349112426035
User 55261 does not improve AUC. Reverting changes.
Training on augumented user 57234 44/50 current_auc = 0.6209072978303747
User 57234 AUC after training: 0.6201183431952664
User 57234 does not improve AUC. Reverting changes.
Training on augumented user 30633 45/50 current_auc = 0.6209072978303747
User 30633 AUC after training: 0.619723865877712
User 30633 does not improve AUC. Reverting changes.
Training on augumented user 34241 46/50 current_auc = 0.6209072978303747
User 34241 AUC after training: 0.6205128205128204
User 34241 does not improve AUC. Reverting changes.
Training on augumented user 72922 47/50 current_auc = 0.6209072978303747
User 72922 AUC after training: 0.6211045364891519
User 72922 improves AUC. Keeping the model.
Training on augumented user 102673 48/50 current_auc = 0.6211045364891519
User 102673 AUC after training: 0.6191321499013807
User 102673 does not improve AUC. Reverting changes.
Training on augumented user 53112 49/50 current_auc = 0.6211045364891519
User 53112 AUC after training: 0.6197238658777121
User 53112 does not improve AUC. Reverting changes.
[2024-12-02 20:13:39.267324] start test user 49096 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:39.683088] start test user 49096 283/568 recall augumented users by random, augumented_users = [37368, 83854, 106110, 23719, 132319, 1012, 59193, 59552, 85651, 26559, 117417, 98653, 9998, 32278, 65124, 66739, 54344, 103609, 126683, 2737, 21766, 69468, 35879, 19399, 99679, 79875, 127094, 79635, 70519, 93264, 29212, 79010, 32122, 83005, 60477, 70652, 24688, 65209, 102227, 72124, 107300, 97012, 4058, 86111, 40419, 57303, 4329, 128778, 42276, 88267]
[2024-12-02 20:13:39.697381] user = 49096 Cloud 283/568
[2024-12-02 20:13:39.706402] user = 49096 Local 283/568
[2024-12-02 20:13:39.725568] user = 49096 Local+ 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:41.948707] user = 49096 MPDA- 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33333333333333337
Training on augumented user 37368 0/50 current_auc = 0.33333333333333337
User 37368 AUC after training: 0.33333333333333337
User 37368 does not improve AUC. Reverting changes.
Training on augumented user 83854 1/50 current_auc = 0.33333333333333337
User 83854 AUC after training: 0.33333333333333337
User 83854 does not improve AUC. Reverting changes.
Training on augumented user 106110 2/50 current_auc = 0.33333333333333337
User 106110 AUC after training: 0.33333333333333337
User 106110 does not improve AUC. Reverting changes.
Training on augumented user 23719 3/50 current_auc = 0.33333333333333337
User 23719 AUC after training: 0.33333333333333337
User 23719 does not improve AUC. Reverting changes.
Training on augumented user 132319 4/50 current_auc = 0.33333333333333337
User 132319 AUC after training: 0.33333333333333337
User 132319 does not improve AUC. Reverting changes.
Training on augumented user 1012 5/50 current_auc = 0.33333333333333337
User 1012 AUC after training: 0.33333333333333337
User 1012 does not improve AUC. Reverting changes.
Training on augumented user 59193 6/50 current_auc = 0.33333333333333337
User 59193 AUC after training: 0.33333333333333337
User 59193 does not improve AUC. Reverting changes.
Training on augumented user 59552 7/50 current_auc = 0.33333333333333337
User 59552 AUC after training: 0.33333333333333337
User 59552 does not improve AUC. Reverting changes.
Training on augumented user 85651 8/50 current_auc = 0.33333333333333337
User 85651 AUC after training: 0.33333333333333337
User 85651 does not improve AUC. Reverting changes.
Training on augumented user 26559 9/50 current_auc = 0.33333333333333337
User 26559 AUC after training: 0.33333333333333337
User 26559 does not improve AUC. Reverting changes.
Training on augumented user 117417 10/50 current_auc = 0.33333333333333337
User 117417 AUC after training: 0.33333333333333337
User 117417 does not improve AUC. Reverting changes.
Training on augumented user 98653 11/50 current_auc = 0.33333333333333337
User 98653 AUC after training: 0.33333333333333337
User 98653 does not improve AUC. Reverting changes.
Training on augumented user 9998 12/50 current_auc = 0.33333333333333337
User 9998 AUC after training: 0.33333333333333337
User 9998 does not improve AUC. Reverting changes.
Training on augumented user 32278 13/50 current_auc = 0.33333333333333337
User 32278 AUC after training: 0.33333333333333337
User 32278 does not improve AUC. Reverting changes.
Training on augumented user 65124 14/50 current_auc = 0.33333333333333337
User 65124 AUC after training: 0.33333333333333337
User 65124 does not improve AUC. Reverting changes.
Training on augumented user 66739 15/50 current_auc = 0.33333333333333337
User 66739 AUC after training: 0.33333333333333337
User 66739 does not improve AUC. Reverting changes.
Training on augumented user 54344 16/50 current_auc = 0.33333333333333337
User 54344 AUC after training: 0.33333333333333337
User 54344 does not improve AUC. Reverting changes.
Training on augumented user 103609 17/50 current_auc = 0.33333333333333337
User 103609 AUC after training: 0.33333333333333337
User 103609 does not improve AUC. Reverting changes.
Training on augumented user 126683 18/50 current_auc = 0.33333333333333337
User 126683 AUC after training: 0.33333333333333337
User 126683 does not improve AUC. Reverting changes.
Training on augumented user 2737 19/50 current_auc = 0.33333333333333337
User 2737 AUC after training: 0.33333333333333337
User 2737 does not improve AUC. Reverting changes.
Training on augumented user 21766 20/50 current_auc = 0.33333333333333337
User 21766 AUC after training: 0.33333333333333337
User 21766 does not improve AUC. Reverting changes.
Training on augumented user 69468 21/50 current_auc = 0.33333333333333337
User 69468 AUC after training: 0.33333333333333337
User 69468 does not improve AUC. Reverting changes.
Training on augumented user 35879 22/50 current_auc = 0.33333333333333337
User 35879 AUC after training: 0.33333333333333337
User 35879 does not improve AUC. Reverting changes.
Training on augumented user 19399 23/50 current_auc = 0.33333333333333337
User 19399 AUC after training: 0.33333333333333337
User 19399 does not improve AUC. Reverting changes.
Training on augumented user 99679 24/50 current_auc = 0.33333333333333337
User 99679 AUC after training: 0.33333333333333337
User 99679 does not improve AUC. Reverting changes.
Training on augumented user 79875 25/50 current_auc = 0.33333333333333337
User 79875 AUC after training: 0.33333333333333337
User 79875 does not improve AUC. Reverting changes.
Training on augumented user 127094 26/50 current_auc = 0.33333333333333337
User 127094 AUC after training: 0.41666666666666663
User 127094 improves AUC. Keeping the model.
Training on augumented user 79635 27/50 current_auc = 0.41666666666666663
User 79635 AUC after training: 0.41666666666666663
User 79635 does not improve AUC. Reverting changes.
Training on augumented user 70519 28/50 current_auc = 0.41666666666666663
User 70519 AUC after training: 0.41666666666666663
User 70519 does not improve AUC. Reverting changes.
Training on augumented user 93264 29/50 current_auc = 0.41666666666666663
User 93264 AUC after training: 0.41666666666666663
User 93264 does not improve AUC. Reverting changes.
Training on augumented user 29212 30/50 current_auc = 0.41666666666666663
User 29212 AUC after training: 0.41666666666666663
User 29212 does not improve AUC. Reverting changes.
Training on augumented user 79010 31/50 current_auc = 0.41666666666666663
User 79010 AUC after training: 0.41666666666666663
User 79010 does not improve AUC. Reverting changes.
Training on augumented user 32122 32/50 current_auc = 0.41666666666666663
User 32122 AUC after training: 0.41666666666666663
User 32122 does not improve AUC. Reverting changes.
Training on augumented user 83005 33/50 current_auc = 0.41666666666666663
User 83005 AUC after training: 0.41666666666666663
User 83005 does not improve AUC. Reverting changes.
Training on augumented user 60477 34/50 current_auc = 0.41666666666666663
User 60477 AUC after training: 0.41666666666666663
User 60477 does not improve AUC. Reverting changes.
Training on augumented user 70652 35/50 current_auc = 0.41666666666666663
User 70652 AUC after training: 0.41666666666666663
User 70652 does not improve AUC. Reverting changes.
Training on augumented user 24688 36/50 current_auc = 0.41666666666666663
User 24688 AUC after training: 0.33333333333333337
User 24688 does not improve AUC. Reverting changes.
Training on augumented user 65209 37/50 current_auc = 0.41666666666666663
User 65209 AUC after training: 0.41666666666666663
User 65209 does not improve AUC. Reverting changes.
Training on augumented user 102227 38/50 current_auc = 0.41666666666666663
User 102227 AUC after training: 0.41666666666666663
User 102227 does not improve AUC. Reverting changes.
Training on augumented user 72124 39/50 current_auc = 0.41666666666666663
User 72124 AUC after training: 0.41666666666666663
User 72124 does not improve AUC. Reverting changes.
Training on augumented user 107300 40/50 current_auc = 0.41666666666666663
User 107300 AUC after training: 0.41666666666666663
User 107300 does not improve AUC. Reverting changes.
Training on augumented user 97012 41/50 current_auc = 0.41666666666666663
User 97012 AUC after training: 0.41666666666666663
User 97012 does not improve AUC. Reverting changes.
Training on augumented user 4058 42/50 current_auc = 0.41666666666666663
User 4058 AUC after training: 0.41666666666666663
User 4058 does not improve AUC. Reverting changes.
Training on augumented user 86111 43/50 current_auc = 0.41666666666666663
User 86111 AUC after training: 0.41666666666666663
User 86111 does not improve AUC. Reverting changes.
Training on augumented user 40419 44/50 current_auc = 0.41666666666666663
User 40419 AUC after training: 0.33333333333333337
User 40419 does not improve AUC. Reverting changes.
Training on augumented user 57303 45/50 current_auc = 0.41666666666666663
User 57303 AUC after training: 0.41666666666666663
User 57303 does not improve AUC. Reverting changes.
Training on augumented user 4329 46/50 current_auc = 0.41666666666666663
User 4329 AUC after training: 0.41666666666666663
User 4329 does not improve AUC. Reverting changes.
Training on augumented user 128778 47/50 current_auc = 0.41666666666666663
User 128778 AUC after training: 0.41666666666666663
User 128778 does not improve AUC. Reverting changes.
Training on augumented user 42276 48/50 current_auc = 0.41666666666666663
User 42276 AUC after training: 0.41666666666666663
User 42276 does not improve AUC. Reverting changes.
Training on augumented user 88267 49/50 current_auc = 0.41666666666666663
User 88267 AUC after training: 0.33333333333333337
User 88267 does not improve AUC. Reverting changes.
[2024-12-02 20:14:11.464679] start test user 49138 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:11.966375] start test user 49138 284/568 recall augumented users by random, augumented_users = [44720, 82188, 12134, 40513, 120688, 98630, 5594, 82043, 21585, 5858, 117224, 133709, 37754, 65962, 22556, 110582, 44554, 28683, 33941, 41315, 127688, 47618, 106501, 97449, 109165, 9351, 62197, 103555, 14373, 120044, 130253, 42755, 67991, 130432, 20828, 50407, 10947, 31561, 39172, 25227, 72035, 63747, 95522, 13737, 25417, 121131, 35954, 97443, 53950, 52092]
[2024-12-02 20:14:11.982304] user = 49138 Cloud 284/568
[2024-12-02 20:14:12.005916] user = 49138 Local 284/568
[2024-12-02 20:14:12.073766] user = 49138 Local+ 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:13.914049] user = 49138 MPDA- 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5915004622903183
Training on augumented user 44720 0/50 current_auc = 0.5915004622903183
User 44720 AUC after training: 0.5919627526086382
User 44720 improves AUC. Keeping the model.
Training on augumented user 82188 1/50 current_auc = 0.5919627526086382
User 82188 AUC after training: 0.5918967111345925
User 82188 does not improve AUC. Reverting changes.
Training on augumented user 12134 2/50 current_auc = 0.5919627526086382
User 12134 AUC after training: 0.5903777572315414
User 12134 does not improve AUC. Reverting changes.
Training on augumented user 40513 3/50 current_auc = 0.5919627526086382
User 40513 AUC after training: 0.591566503764364
User 40513 does not improve AUC. Reverting changes.
Training on augumented user 120688 4/50 current_auc = 0.5919627526086382
User 120688 AUC after training: 0.5911702549200898
User 120688 does not improve AUC. Reverting changes.
Training on augumented user 98630 5/50 current_auc = 0.5919627526086382
User 98630 AUC after training: 0.5912362963941356
User 98630 does not improve AUC. Reverting changes.
Training on augumented user 5594 6/50 current_auc = 0.5919627526086382
User 5594 AUC after training: 0.5920287940826839
User 5594 improves AUC. Keeping the model.
Training on augumented user 82043 7/50 current_auc = 0.5920287940826839
User 82043 AUC after training: 0.5922929599788667
User 82043 improves AUC. Keeping the model.
Training on augumented user 21585 8/50 current_auc = 0.5922929599788667
User 21585 AUC after training: 0.5921608770307754
User 21585 does not improve AUC. Reverting changes.
Training on augumented user 5858 9/50 current_auc = 0.5922929599788667
User 5858 AUC after training: 0.5917646281865011
User 5858 does not improve AUC. Reverting changes.
Training on augumented user 117224 10/50 current_auc = 0.5922929599788667
User 117224 AUC after training: 0.5918967111345925
User 117224 does not improve AUC. Reverting changes.
Training on augumented user 133709 11/50 current_auc = 0.5922929599788667
User 133709 AUC after training: 0.591566503764364
User 133709 does not improve AUC. Reverting changes.
Training on augumented user 37754 12/50 current_auc = 0.5922929599788667
User 37754 AUC after training: 0.5917646281865011
User 37754 does not improve AUC. Reverting changes.
Training on augumented user 65962 13/50 current_auc = 0.5922929599788667
User 65962 AUC after training: 0.590906089023907
User 65962 does not improve AUC. Reverting changes.
Training on augumented user 22556 14/50 current_auc = 0.5922929599788667
User 22556 AUC after training: 0.5922929599788668
User 22556 improves AUC. Keeping the model.
Training on augumented user 110582 15/50 current_auc = 0.5922929599788668
User 110582 AUC after training: 0.592226918504821
User 110582 does not improve AUC. Reverting changes.
Training on augumented user 44554 16/50 current_auc = 0.5922929599788668
User 44554 AUC after training: 0.592226918504821
User 44554 does not improve AUC. Reverting changes.
Training on augumented user 28683 17/50 current_auc = 0.5922929599788668
User 28683 AUC after training: 0.5920948355567296
User 28683 does not improve AUC. Reverting changes.
Training on augumented user 33941 18/50 current_auc = 0.5922929599788668
User 33941 AUC after training: 0.5918306696605469
User 33941 does not improve AUC. Reverting changes.
Training on augumented user 41315 19/50 current_auc = 0.5922929599788668
User 41315 AUC after training: 0.5920287940826839
User 41315 does not improve AUC. Reverting changes.
Training on augumented user 127688 20/50 current_auc = 0.5922929599788668
User 127688 AUC after training: 0.5920287940826839
User 127688 does not improve AUC. Reverting changes.
Training on augumented user 47618 21/50 current_auc = 0.5922929599788668
User 47618 AUC after training: 0.5916325452384097
User 47618 does not improve AUC. Reverting changes.
Training on augumented user 106501 22/50 current_auc = 0.5922929599788668
User 106501 AUC after training: 0.5917646281865011
User 106501 does not improve AUC. Reverting changes.
Training on augumented user 97449 23/50 current_auc = 0.5922929599788668
User 97449 AUC after training: 0.5918306696605468
User 97449 does not improve AUC. Reverting changes.
Training on augumented user 109165 24/50 current_auc = 0.5922929599788668
User 109165 AUC after training: 0.5920948355567296
User 109165 does not improve AUC. Reverting changes.
Training on augumented user 9351 25/50 current_auc = 0.5922929599788668
User 9351 AUC after training: 0.5917646281865011
User 9351 does not improve AUC. Reverting changes.
Training on augumented user 62197 26/50 current_auc = 0.5922929599788668
User 62197 AUC after training: 0.592226918504821
User 62197 does not improve AUC. Reverting changes.
Training on augumented user 103555 27/50 current_auc = 0.5922929599788668
User 103555 AUC after training: 0.5912362963941356
User 103555 does not improve AUC. Reverting changes.
Training on augumented user 14373 28/50 current_auc = 0.5922929599788668
User 14373 AUC after training: 0.5921608770307754
User 14373 does not improve AUC. Reverting changes.
Training on augumented user 120044 29/50 current_auc = 0.5922929599788668
User 120044 AUC after training: 0.5909721304979526
User 120044 does not improve AUC. Reverting changes.
Training on augumented user 130253 30/50 current_auc = 0.5922929599788668
User 130253 AUC after training: 0.5917646281865011
User 130253 does not improve AUC. Reverting changes.
Training on augumented user 42755 31/50 current_auc = 0.5922929599788668
User 42755 AUC after training: 0.5916985867124553
User 42755 does not improve AUC. Reverting changes.
Training on augumented user 67991 32/50 current_auc = 0.5922929599788668
User 67991 AUC after training: 0.5920287940826839
User 67991 does not improve AUC. Reverting changes.
Training on augumented user 130432 33/50 current_auc = 0.5922929599788668
User 130432 AUC after training: 0.5915004622903183
User 130432 does not improve AUC. Reverting changes.
Training on augumented user 20828 34/50 current_auc = 0.5922929599788668
User 20828 AUC after training: 0.5924250429269582
User 20828 improves AUC. Keeping the model.
Training on augumented user 50407 35/50 current_auc = 0.5924250429269582
User 50407 AUC after training: 0.5916325452384098
User 50407 does not improve AUC. Reverting changes.
Training on augumented user 10947 36/50 current_auc = 0.5924250429269582
User 10947 AUC after training: 0.5920287940826839
User 10947 does not improve AUC. Reverting changes.
Training on augumented user 31561 37/50 current_auc = 0.5924250429269582
User 31561 AUC after training: 0.5922929599788668
User 31561 does not improve AUC. Reverting changes.
Training on augumented user 39172 38/50 current_auc = 0.5924250429269582
User 39172 AUC after training: 0.5918306696605469
User 39172 does not improve AUC. Reverting changes.
Training on augumented user 25227 39/50 current_auc = 0.5924250429269582
User 25227 AUC after training: 0.592226918504821
User 25227 does not improve AUC. Reverting changes.
Training on augumented user 72035 40/50 current_auc = 0.5924250429269582
User 72035 AUC after training: 0.5926892088231409
User 72035 improves AUC. Keeping the model.
Training on augumented user 63747 41/50 current_auc = 0.5926892088231409
User 63747 AUC after training: 0.5922929599788667
User 63747 does not improve AUC. Reverting changes.
Training on augumented user 95522 42/50 current_auc = 0.5926892088231409
User 95522 AUC after training: 0.5924250429269582
User 95522 does not improve AUC. Reverting changes.
Training on augumented user 13737 43/50 current_auc = 0.5926892088231409
User 13737 AUC after training: 0.5922929599788668
User 13737 does not improve AUC. Reverting changes.
Training on augumented user 25417 44/50 current_auc = 0.5926892088231409
User 25417 AUC after training: 0.5916325452384097
User 25417 does not improve AUC. Reverting changes.
Training on augumented user 121131 45/50 current_auc = 0.5926892088231409
User 121131 AUC after training: 0.5918967111345925
User 121131 does not improve AUC. Reverting changes.
Training on augumented user 35954 46/50 current_auc = 0.5926892088231409
User 35954 AUC after training: 0.5923590014529124
User 35954 does not improve AUC. Reverting changes.
Training on augumented user 97443 47/50 current_auc = 0.5926892088231409
User 97443 AUC after training: 0.5920948355567296
User 97443 does not improve AUC. Reverting changes.
Training on augumented user 53950 48/50 current_auc = 0.5926892088231409
User 53950 AUC after training: 0.592259939241844
User 53950 does not improve AUC. Reverting changes.
Training on augumented user 52092 49/50 current_auc = 0.5926892088231409
User 52092 AUC after training: 0.5913023378681812
User 52092 does not improve AUC. Reverting changes.
[2024-12-02 20:14:43.881098] start test user 49194 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:44.549757] start test user 49194 285/568 recall augumented users by random, augumented_users = [81127, 73176, 104785, 130223, 77043, 47678, 7520, 35430, 91217, 64268, 95604, 97141, 114061, 62774, 84264, 93755, 33190, 46877, 39148, 90957, 3194, 44146, 68165, 67761, 135088, 136761, 84364, 12931, 12535, 31930, 100005, 49205, 5285, 83583, 78739, 45289, 111086, 88829, 80160, 103898, 2297, 60973, 72615, 131778, 63819, 39129, 82119, 67796, 5672, 32050]
[2024-12-02 20:14:44.564568] user = 49194 Cloud 285/568
[2024-12-02 20:14:44.579230] user = 49194 Local 285/568
[2024-12-02 20:14:44.619760] user = 49194 Local+ 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:48.305812] user = 49194 MPDA- 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5615384615384615
Training on augumented user 81127 0/50 current_auc = 0.5615384615384615
User 81127 AUC after training: 0.5619047619047619
User 81127 improves AUC. Keeping the model.
Training on augumented user 73176 1/50 current_auc = 0.5619047619047619
User 73176 AUC after training: 0.5608058608058608
User 73176 does not improve AUC. Reverting changes.
Training on augumented user 104785 2/50 current_auc = 0.5619047619047619
User 104785 AUC after training: 0.5615384615384615
User 104785 does not improve AUC. Reverting changes.
Training on augumented user 130223 3/50 current_auc = 0.5619047619047619
User 130223 AUC after training: 0.5615384615384615
User 130223 does not improve AUC. Reverting changes.
Training on augumented user 77043 4/50 current_auc = 0.5619047619047619
User 77043 AUC after training: 0.5615384615384615
User 77043 does not improve AUC. Reverting changes.
Training on augumented user 47678 5/50 current_auc = 0.5619047619047619
User 47678 AUC after training: 0.5619047619047619
User 47678 does not improve AUC. Reverting changes.
Training on augumented user 7520 6/50 current_auc = 0.5619047619047619
User 7520 AUC after training: 0.5611721611721612
User 7520 does not improve AUC. Reverting changes.
Training on augumented user 35430 7/50 current_auc = 0.5619047619047619
User 35430 AUC after training: 0.5615384615384615
User 35430 does not improve AUC. Reverting changes.
Training on augumented user 91217 8/50 current_auc = 0.5619047619047619
User 91217 AUC after training: 0.5622710622710623
User 91217 improves AUC. Keeping the model.
Training on augumented user 64268 9/50 current_auc = 0.5622710622710623
User 64268 AUC after training: 0.5622710622710623
User 64268 does not improve AUC. Reverting changes.
Training on augumented user 95604 10/50 current_auc = 0.5622710622710623
User 95604 AUC after training: 0.5619047619047619
User 95604 does not improve AUC. Reverting changes.
Training on augumented user 97141 11/50 current_auc = 0.5622710622710623
User 97141 AUC after training: 0.5611721611721612
User 97141 does not improve AUC. Reverting changes.
Training on augumented user 114061 12/50 current_auc = 0.5622710622710623
User 114061 AUC after training: 0.5622710622710623
User 114061 does not improve AUC. Reverting changes.
Training on augumented user 62774 13/50 current_auc = 0.5622710622710623
User 62774 AUC after training: 0.5622710622710623
User 62774 does not improve AUC. Reverting changes.
Training on augumented user 84264 14/50 current_auc = 0.5622710622710623
User 84264 AUC after training: 0.5622710622710623
User 84264 does not improve AUC. Reverting changes.
Training on augumented user 93755 15/50 current_auc = 0.5622710622710623
User 93755 AUC after training: 0.5619047619047619
User 93755 does not improve AUC. Reverting changes.
Training on augumented user 33190 16/50 current_auc = 0.5622710622710623
User 33190 AUC after training: 0.5611721611721612
User 33190 does not improve AUC. Reverting changes.
Training on augumented user 46877 17/50 current_auc = 0.5622710622710623
User 46877 AUC after training: 0.5615384615384615
User 46877 does not improve AUC. Reverting changes.
Training on augumented user 39148 18/50 current_auc = 0.5622710622710623
User 39148 AUC after training: 0.5619047619047619
User 39148 does not improve AUC. Reverting changes.
Training on augumented user 90957 19/50 current_auc = 0.5622710622710623
User 90957 AUC after training: 0.5626373626373626
User 90957 improves AUC. Keeping the model.
Training on augumented user 3194 20/50 current_auc = 0.5626373626373626
User 3194 AUC after training: 0.5615384615384615
User 3194 does not improve AUC. Reverting changes.
Training on augumented user 44146 21/50 current_auc = 0.5626373626373626
User 44146 AUC after training: 0.5615384615384615
User 44146 does not improve AUC. Reverting changes.
Training on augumented user 68165 22/50 current_auc = 0.5626373626373626
User 68165 AUC after training: 0.5626373626373626
User 68165 does not improve AUC. Reverting changes.
Training on augumented user 67761 23/50 current_auc = 0.5626373626373626
User 67761 AUC after training: 0.5626373626373626
User 67761 does not improve AUC. Reverting changes.
Training on augumented user 135088 24/50 current_auc = 0.5626373626373626
User 135088 AUC after training: 0.5633699633699634
User 135088 improves AUC. Keeping the model.
Training on augumented user 136761 25/50 current_auc = 0.5633699633699634
User 136761 AUC after training: 0.5622710622710622
User 136761 does not improve AUC. Reverting changes.
Training on augumented user 84364 26/50 current_auc = 0.5633699633699634
User 84364 AUC after training: 0.5633699633699634
User 84364 does not improve AUC. Reverting changes.
Training on augumented user 12931 27/50 current_auc = 0.5633699633699634
User 12931 AUC after training: 0.5633699633699634
User 12931 does not improve AUC. Reverting changes.
Training on augumented user 12535 28/50 current_auc = 0.5633699633699634
User 12535 AUC after training: 0.5637362637362637
User 12535 improves AUC. Keeping the model.
Training on augumented user 31930 29/50 current_auc = 0.5637362637362637
User 31930 AUC after training: 0.5637362637362637
User 31930 does not improve AUC. Reverting changes.
Training on augumented user 100005 30/50 current_auc = 0.5637362637362637
User 100005 AUC after training: 0.5637362637362637
User 100005 does not improve AUC. Reverting changes.
Training on augumented user 49205 31/50 current_auc = 0.5637362637362637
User 49205 AUC after training: 0.5626373626373626
User 49205 does not improve AUC. Reverting changes.
Training on augumented user 5285 32/50 current_auc = 0.5637362637362637
User 5285 AUC after training: 0.5641025641025641
User 5285 improves AUC. Keeping the model.
Training on augumented user 83583 33/50 current_auc = 0.5641025641025641
User 83583 AUC after training: 0.5633699633699634
User 83583 does not improve AUC. Reverting changes.
Training on augumented user 78739 34/50 current_auc = 0.5641025641025641
User 78739 AUC after training: 0.5641025641025641
User 78739 does not improve AUC. Reverting changes.
Training on augumented user 45289 35/50 current_auc = 0.5641025641025641
User 45289 AUC after training: 0.5641025641025641
User 45289 does not improve AUC. Reverting changes.
Training on augumented user 111086 36/50 current_auc = 0.5641025641025641
User 111086 AUC after training: 0.5641025641025641
User 111086 does not improve AUC. Reverting changes.
Training on augumented user 88829 37/50 current_auc = 0.5641025641025641
User 88829 AUC after training: 0.563003663003663
User 88829 does not improve AUC. Reverting changes.
Training on augumented user 80160 38/50 current_auc = 0.5641025641025641
User 80160 AUC after training: 0.5641025641025641
User 80160 does not improve AUC. Reverting changes.
Training on augumented user 103898 39/50 current_auc = 0.5641025641025641
User 103898 AUC after training: 0.5644688644688645
User 103898 improves AUC. Keeping the model.
Training on augumented user 2297 40/50 current_auc = 0.5644688644688645
User 2297 AUC after training: 0.5648351648351648
User 2297 improves AUC. Keeping the model.
Training on augumented user 60973 41/50 current_auc = 0.5648351648351648
User 60973 AUC after training: 0.5652014652014652
User 60973 improves AUC. Keeping the model.
Training on augumented user 72615 42/50 current_auc = 0.5652014652014652
User 72615 AUC after training: 0.5646520146520146
User 72615 does not improve AUC. Reverting changes.
Training on augumented user 131778 43/50 current_auc = 0.5652014652014652
User 131778 AUC after training: 0.5652014652014652
User 131778 does not improve AUC. Reverting changes.
Training on augumented user 63819 44/50 current_auc = 0.5652014652014652
User 63819 AUC after training: 0.5653846153846154
User 63819 improves AUC. Keeping the model.
Training on augumented user 39129 45/50 current_auc = 0.5653846153846154
User 39129 AUC after training: 0.5644688644688645
User 39129 does not improve AUC. Reverting changes.
Training on augumented user 82119 46/50 current_auc = 0.5653846153846154
User 82119 AUC after training: 0.5653846153846154
User 82119 does not improve AUC. Reverting changes.
Training on augumented user 67796 47/50 current_auc = 0.5653846153846154
User 67796 AUC after training: 0.5646520146520146
User 67796 does not improve AUC. Reverting changes.
Training on augumented user 5672 48/50 current_auc = 0.5653846153846154
User 5672 AUC after training: 0.5648351648351648
User 5672 does not improve AUC. Reverting changes.
Training on augumented user 32050 49/50 current_auc = 0.5653846153846154
User 32050 AUC after training: 0.5648351648351648
User 32050 does not improve AUC. Reverting changes.
[2024-12-02 20:15:16.057598] start test user 49199 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:16.618053] start test user 49199 286/568 recall augumented users by random, augumented_users = [130566, 37379, 130250, 54007, 8064, 72537, 49132, 106961, 962, 43640, 116729, 94589, 32946, 82659, 131161, 112776, 42872, 37001, 3889, 43268, 25636, 91189, 10361, 137070, 8829, 21616, 120438, 29776, 101968, 65964, 27814, 113221, 47292, 101369, 35410, 94630, 115094, 53960, 130139, 126431, 116992, 25210, 121214, 129843, 25132, 133359, 68988, 113712, 46136, 24151]
[2024-12-02 20:15:16.638779] user = 49199 Cloud 286/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:16.645425] user = 49199 Local 286/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:16.674902] user = 49199 Local+ 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:19.401838] user = 49199 MPDA- 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 130566 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130566 AUC after training: 0.5
User 130566 does not improve AUC. Reverting changes.
Training on augumented user 37379 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37379 AUC after training: 0.5
User 37379 does not improve AUC. Reverting changes.
Training on augumented user 130250 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130250 AUC after training: 0.5
User 130250 does not improve AUC. Reverting changes.
Training on augumented user 54007 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54007 AUC after training: 0.5
User 54007 does not improve AUC. Reverting changes.
Training on augumented user 8064 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8064 AUC after training: 0.5
User 8064 does not improve AUC. Reverting changes.
Training on augumented user 72537 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72537 AUC after training: 0.5
User 72537 does not improve AUC. Reverting changes.
Training on augumented user 49132 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49132 AUC after training: 0.5
User 49132 does not improve AUC. Reverting changes.
Training on augumented user 106961 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106961 AUC after training: 0.5
User 106961 does not improve AUC. Reverting changes.
Training on augumented user 962 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 962 AUC after training: 0.5
User 962 does not improve AUC. Reverting changes.
Training on augumented user 43640 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43640 AUC after training: 0.5
User 43640 does not improve AUC. Reverting changes.
Training on augumented user 116729 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116729 AUC after training: 0.5
User 116729 does not improve AUC. Reverting changes.
Training on augumented user 94589 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94589 AUC after training: 0.5
User 94589 does not improve AUC. Reverting changes.
Training on augumented user 32946 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32946 AUC after training: 0.5
User 32946 does not improve AUC. Reverting changes.
Training on augumented user 82659 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82659 AUC after training: 0.5
User 82659 does not improve AUC. Reverting changes.
Training on augumented user 131161 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131161 AUC after training: 0.5
User 131161 does not improve AUC. Reverting changes.
Training on augumented user 112776 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112776 AUC after training: 0.5
User 112776 does not improve AUC. Reverting changes.
Training on augumented user 42872 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42872 AUC after training: 0.5
User 42872 does not improve AUC. Reverting changes.
Training on augumented user 37001 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37001 AUC after training: 0.5
User 37001 does not improve AUC. Reverting changes.
Training on augumented user 3889 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3889 AUC after training: 0.5
User 3889 does not improve AUC. Reverting changes.
Training on augumented user 43268 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43268 AUC after training: 0.5
User 43268 does not improve AUC. Reverting changes.
Training on augumented user 25636 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25636 AUC after training: 0.5
User 25636 does not improve AUC. Reverting changes.
Training on augumented user 91189 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91189 AUC after training: 0.5
User 91189 does not improve AUC. Reverting changes.
Training on augumented user 10361 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10361 AUC after training: 0.5
User 10361 does not improve AUC. Reverting changes.
Training on augumented user 137070 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137070 AUC after training: 0.5
User 137070 does not improve AUC. Reverting changes.
Training on augumented user 8829 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8829 AUC after training: 0.5
User 8829 does not improve AUC. Reverting changes.
Training on augumented user 21616 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21616 AUC after training: 0.5
User 21616 does not improve AUC. Reverting changes.
Training on augumented user 120438 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120438 AUC after training: 0.5
User 120438 does not improve AUC. Reverting changes.
Training on augumented user 29776 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29776 AUC after training: 0.5
User 29776 does not improve AUC. Reverting changes.
Training on augumented user 101968 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101968 AUC after training: 0.5
User 101968 does not improve AUC. Reverting changes.
Training on augumented user 65964 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65964 AUC after training: 0.5
User 65964 does not improve AUC. Reverting changes.
Training on augumented user 27814 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27814 AUC after training: 0.5
User 27814 does not improve AUC. Reverting changes.
Training on augumented user 113221 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113221 AUC after training: 0.5
User 113221 does not improve AUC. Reverting changes.
Training on augumented user 47292 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47292 AUC after training: 0.5
User 47292 does not improve AUC. Reverting changes.
Training on augumented user 101369 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101369 AUC after training: 0.5
User 101369 does not improve AUC. Reverting changes.
Training on augumented user 35410 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35410 AUC after training: 0.5
User 35410 does not improve AUC. Reverting changes.
Training on augumented user 94630 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94630 AUC after training: 0.5
User 94630 does not improve AUC. Reverting changes.
Training on augumented user 115094 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115094 AUC after training: 0.5
User 115094 does not improve AUC. Reverting changes.
Training on augumented user 53960 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53960 AUC after training: 0.5
User 53960 does not improve AUC. Reverting changes.
Training on augumented user 130139 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130139 AUC after training: 0.5
User 130139 does not improve AUC. Reverting changes.
Training on augumented user 126431 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126431 AUC after training: 0.5
User 126431 does not improve AUC. Reverting changes.
Training on augumented user 116992 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116992 AUC after training: 0.5
User 116992 does not improve AUC. Reverting changes.
Training on augumented user 25210 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25210 AUC after training: 0.5
User 25210 does not improve AUC. Reverting changes.
Training on augumented user 121214 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121214 AUC after training: 0.5
User 121214 does not improve AUC. Reverting changes.
Training on augumented user 129843 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129843 AUC after training: 0.5
User 129843 does not improve AUC. Reverting changes.
Training on augumented user 25132 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25132 AUC after training: 0.5
User 25132 does not improve AUC. Reverting changes.
Training on augumented user 133359 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133359 AUC after training: 0.5
User 133359 does not improve AUC. Reverting changes.
Training on augumented user 68988 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68988 AUC after training: 0.5
User 68988 does not improve AUC. Reverting changes.
Training on augumented user 113712 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113712 AUC after training: 0.5
User 113712 does not improve AUC. Reverting changes.
Training on augumented user 46136 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46136 AUC after training: 0.5
User 46136 does not improve AUC. Reverting changes.
Training on augumented user 24151 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24151 AUC after training: 0.5
User 24151 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:49.689141] start test user 49205 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:50.113980] start test user 49205 287/568 recall augumented users by random, augumented_users = [104009, 71953, 129955, 77541, 71662, 14568, 99830, 92317, 113506, 95988, 23558, 134310, 22208, 13937, 28385, 39763, 49765, 25039, 100179, 7477, 47975, 92436, 111337, 115176, 87585, 9825, 122600, 93278, 57626, 100352, 35320, 53448, 133574, 113809, 3604, 47574, 89929, 56222, 137109, 79576, 87399, 2035, 106079, 82870, 48940, 80857, 34623, 9238, 60096, 136898]
[2024-12-02 20:15:50.130070] user = 49205 Cloud 287/568
[2024-12-02 20:15:50.162777] user = 49205 Local 287/568
[2024-12-02 20:15:50.433428] user = 49205 Local+ 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:53.011582] user = 49205 MPDA- 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5568893347632061
Training on augumented user 104009 0/50 current_auc = 0.5568893347632061
User 104009 AUC after training: 0.5566990694295499
User 104009 does not improve AUC. Reverting changes.
Training on augumented user 71953 1/50 current_auc = 0.5568893347632061
User 71953 AUC after training: 0.5571833811879475
User 71953 improves AUC. Keeping the model.
Training on augumented user 129955 2/50 current_auc = 0.5571833811879475
User 129955 AUC after training: 0.5578060677344587
User 129955 improves AUC. Keeping the model.
Training on augumented user 77541 3/50 current_auc = 0.5578060677344587
User 77541 AUC after training: 0.5578925519770298
User 77541 improves AUC. Keeping the model.
Training on augumented user 71662 4/50 current_auc = 0.5578925519770298
User 71662 AUC after training: 0.5575466150067458
User 71662 does not improve AUC. Reverting changes.
Training on augumented user 14568 5/50 current_auc = 0.5578925519770298
User 14568 AUC after training: 0.558082817310686
User 14568 improves AUC. Keeping the model.
Training on augumented user 99830 6/50 current_auc = 0.558082817310686
User 99830 AUC after training: 0.5580482236136576
User 99830 does not improve AUC. Reverting changes.
Training on augumented user 92317 7/50 current_auc = 0.558082817310686
User 92317 AUC after training: 0.5580136299166292
User 92317 does not improve AUC. Reverting changes.
Training on augumented user 113506 8/50 current_auc = 0.558082817310686
User 113506 AUC after training: 0.5577541771889162
User 113506 does not improve AUC. Reverting changes.
Training on augumented user 95988 9/50 current_auc = 0.558082817310686
User 95988 AUC after training: 0.5576849897948594
User 95988 does not improve AUC. Reverting changes.
Training on augumented user 23558 10/50 current_auc = 0.558082817310686
User 23558 AUC after training: 0.5578406614314873
User 23558 does not improve AUC. Reverting changes.
Training on augumented user 134310 11/50 current_auc = 0.558082817310686
User 134310 AUC after training: 0.5583941605839416
User 134310 improves AUC. Keeping the model.
Training on augumented user 22208 12/50 current_auc = 0.5583941605839416
User 22208 AUC after training: 0.5577714740374303
User 22208 does not improve AUC. Reverting changes.
Training on augumented user 13937 13/50 current_auc = 0.5583941605839416
User 13937 AUC after training: 0.5581520047047428
User 13937 does not improve AUC. Reverting changes.
Training on augumented user 28385 14/50 current_auc = 0.5583941605839416
User 28385 AUC after training: 0.5584633479779983
User 28385 improves AUC. Keeping the model.
Training on augumented user 39763 15/50 current_auc = 0.5584633479779983
User 39763 AUC after training: 0.5582903794928563
User 39763 does not improve AUC. Reverting changes.
Training on augumented user 49765 16/50 current_auc = 0.5584633479779983
User 49765 AUC after training: 0.5581520047047428
User 49765 does not improve AUC. Reverting changes.
Training on augumented user 25039 17/50 current_auc = 0.5584633479779983
User 25039 AUC after training: 0.55842875428097
User 25039 does not improve AUC. Reverting changes.
Training on augumented user 100179 18/50 current_auc = 0.5584633479779983
User 100179 AUC after training: 0.5584979416750268
User 100179 improves AUC. Keeping the model.
Training on augumented user 7477 19/50 current_auc = 0.5584979416750268
User 7477 AUC after training: 0.558601722766112
User 7477 improves AUC. Keeping the model.
Training on augumented user 47975 20/50 current_auc = 0.558601722766112
User 47975 AUC after training: 0.5581174110077144
User 47975 does not improve AUC. Reverting changes.
Training on augumented user 92436 21/50 current_auc = 0.558601722766112
User 92436 AUC after training: 0.5588438786453108
User 92436 improves AUC. Keeping the model.
Training on augumented user 111337 22/50 current_auc = 0.5588438786453108
User 111337 AUC after training: 0.5590514408274813
User 111337 improves AUC. Keeping the model.
Training on augumented user 115176 23/50 current_auc = 0.5590514408274813
User 115176 AUC after training: 0.5603487044660462
User 115176 improves AUC. Keeping the model.
Training on augumented user 87585 24/50 current_auc = 0.5603487044660462
User 87585 AUC after training: 0.5604524855571315
User 87585 improves AUC. Keeping the model.
Training on augumented user 9825 25/50 current_auc = 0.5604524855571315
User 9825 AUC after training: 0.5601411422838759
User 9825 does not improve AUC. Reverting changes.
Training on augumented user 122600 26/50 current_auc = 0.5604524855571315
User 122600 AUC after training: 0.5606600477393019
User 122600 improves AUC. Keeping the model.
Training on augumented user 93278 27/50 current_auc = 0.5606600477393019
User 93278 AUC after training: 0.5604697824056457
User 93278 does not improve AUC. Reverting changes.
Training on augumented user 57626 28/50 current_auc = 0.5606600477393019
User 57626 AUC after training: 0.5620610924689522
User 57626 improves AUC. Keeping the model.
Training on augumented user 100352 29/50 current_auc = 0.5620610924689522
User 100352 AUC after training: 0.5624416231362644
User 100352 improves AUC. Keeping the model.
Training on augumented user 35320 30/50 current_auc = 0.5624416231362644
User 35320 AUC after training: 0.5619400145293528
User 35320 does not improve AUC. Reverting changes.
Training on augumented user 53448 31/50 current_auc = 0.5624416231362644
User 53448 AUC after training: 0.5614729996194694
User 53448 does not improve AUC. Reverting changes.
Training on augumented user 133574 32/50 current_auc = 0.5624416231362644
User 133574 AUC after training: 0.5623724357422079
User 133574 does not improve AUC. Reverting changes.
Training on augumented user 113809 33/50 current_auc = 0.5624416231362644
User 113809 AUC after training: 0.5623032483481509
User 113809 does not improve AUC. Reverting changes.
Training on augumented user 3604 34/50 current_auc = 0.5624416231362644
User 3604 AUC after training: 0.5620610924689522
User 3604 does not improve AUC. Reverting changes.
Training on augumented user 47574 35/50 current_auc = 0.5624416231362644
User 47574 AUC after training: 0.5626145916214066
User 47574 improves AUC. Keeping the model.
Training on augumented user 89929 36/50 current_auc = 0.5626145916214066
User 89929 AUC after training: 0.5619746082263811
User 89929 does not improve AUC. Reverting changes.
Training on augumented user 56222 37/50 current_auc = 0.5626145916214066
User 56222 AUC after training: 0.562476216833293
User 56222 does not improve AUC. Reverting changes.
Training on augumented user 137109 38/50 current_auc = 0.5626145916214066
User 137109 AUC after training: 0.5621648735600373
User 137109 does not improve AUC. Reverting changes.
Training on augumented user 79576 39/50 current_auc = 0.5626145916214066
User 79576 AUC after training: 0.5621302798630089
User 79576 does not improve AUC. Reverting changes.
Training on augumented user 87399 40/50 current_auc = 0.5626145916214066
User 87399 AUC after training: 0.5620264987719238
User 87399 does not improve AUC. Reverting changes.
Training on augumented user 2035 41/50 current_auc = 0.5626145916214066
User 2035 AUC after training: 0.5623724357422077
User 2035 does not improve AUC. Reverting changes.
Training on augumented user 106079 42/50 current_auc = 0.5626145916214066
User 106079 AUC after training: 0.5615075933164977
User 106079 does not improve AUC. Reverting changes.
Training on augumented user 82870 43/50 current_auc = 0.5626145916214066
User 82870 AUC after training: 0.5622686546511226
User 82870 does not improve AUC. Reverting changes.
Training on augumented user 48940 44/50 current_auc = 0.5626145916214066
User 48940 AUC after training: 0.5618535302867818
User 48940 does not improve AUC. Reverting changes.
Training on augumented user 80857 45/50 current_auc = 0.5626145916214066
User 80857 AUC after training: 0.5623205451966651
User 80857 does not improve AUC. Reverting changes.
Training on augumented user 34623 46/50 current_auc = 0.5626145916214066
User 34623 AUC after training: 0.5618189365897533
User 34623 does not improve AUC. Reverting changes.
Training on augumented user 9238 47/50 current_auc = 0.5626145916214066
User 9238 AUC after training: 0.5622340609540941
User 9238 does not improve AUC. Reverting changes.
Training on augumented user 60096 48/50 current_auc = 0.5626145916214066
User 60096 AUC after training: 0.5625281073788355
User 60096 does not improve AUC. Reverting changes.
Training on augumented user 136898 49/50 current_auc = 0.5626145916214066
User 136898 AUC after training: 0.5617497491956965
User 136898 does not improve AUC. Reverting changes.
[2024-12-02 20:16:18.438047] start test user 49229 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:18.917283] start test user 49229 288/568 recall augumented users by random, augumented_users = [110070, 5030, 87108, 53509, 114455, 106505, 69080, 11915, 138296, 41299, 70879, 84303, 135098, 73940, 133453, 37779, 23663, 103072, 107437, 47665, 118417, 41315, 78194, 34227, 125481, 60850, 116452, 71375, 99020, 67280, 59297, 97873, 134145, 87511, 81880, 104323, 38738, 80232, 93767, 51853, 32083, 16194, 51868, 100753, 115256, 34274, 45216, 118069, 77745, 115596]
[2024-12-02 20:16:18.933940] user = 49229 Cloud 288/568
[2024-12-02 20:16:18.973170] user = 49229 Local 288/568
[2024-12-02 20:16:19.276805] user = 49229 Local+ 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:21.413804] user = 49229 MPDA- 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4950336049485517
Training on augumented user 110070 0/50 current_auc = 0.4950336049485517
User 110070 AUC after training: 0.49503360494855175
User 110070 improves AUC. Keeping the model.
Training on augumented user 5030 1/50 current_auc = 0.49503360494855175
User 5030 AUC after training: 0.4953309938737882
User 5030 improves AUC. Keeping the model.
Training on augumented user 87108 2/50 current_auc = 0.4953309938737882
User 87108 AUC after training: 0.4953309938737882
User 87108 does not improve AUC. Reverting changes.
Training on augumented user 53509 3/50 current_auc = 0.4953309938737882
User 53509 AUC after training: 0.4954499494438827
User 53509 improves AUC. Keeping the model.
Training on augumented user 114455 4/50 current_auc = 0.4954499494438827
User 114455 AUC after training: 0.49539047165883543
User 114455 does not improve AUC. Reverting changes.
Training on augumented user 106505 5/50 current_auc = 0.4954499494438827
User 106505 AUC after training: 0.49527151608874087
User 106505 does not improve AUC. Reverting changes.
Training on augumented user 69080 6/50 current_auc = 0.4954499494438827
User 69080 AUC after training: 0.49408196038779517
User 69080 does not improve AUC. Reverting changes.
Training on augumented user 11915 7/50 current_auc = 0.4954499494438827
User 11915 AUC after training: 0.4953309938737882
User 11915 does not improve AUC. Reverting changes.
Training on augumented user 138296 8/50 current_auc = 0.4954499494438827
User 138296 AUC after training: 0.49503360494855164
User 138296 does not improve AUC. Reverting changes.
Training on augumented user 41299 9/50 current_auc = 0.4954499494438827
User 41299 AUC after training: 0.4950336049485517
User 41299 does not improve AUC. Reverting changes.
Training on augumented user 70879 10/50 current_auc = 0.4954499494438827
User 70879 AUC after training: 0.49491464937845714
User 70879 does not improve AUC. Reverting changes.
Training on augumented user 84303 11/50 current_auc = 0.4954499494438827
User 84303 AUC after training: 0.495925771724261
User 84303 improves AUC. Keeping the model.
Training on augumented user 135098 12/50 current_auc = 0.495925771724261
User 135098 AUC after training: 0.4961042050794029
User 135098 improves AUC. Keeping the model.
Training on augumented user 73940 13/50 current_auc = 0.4961042050794029
User 73940 AUC after training: 0.49604472729435556
User 73940 does not improve AUC. Reverting changes.
Training on augumented user 133453 14/50 current_auc = 0.4961042050794029
User 133453 AUC after training: 0.49544994944388265
User 133453 does not improve AUC. Reverting changes.
Training on augumented user 37779 15/50 current_auc = 0.4961042050794029
User 37779 AUC after training: 0.4958662939392138
User 37779 does not improve AUC. Reverting changes.
Training on augumented user 23663 16/50 current_auc = 0.4961042050794029
User 23663 AUC after training: 0.49562838279902455
User 23663 does not improve AUC. Reverting changes.
Training on augumented user 103072 17/50 current_auc = 0.4961042050794029
User 103072 AUC after training: 0.495925771724261
User 103072 does not improve AUC. Reverting changes.
Training on augumented user 107437 18/50 current_auc = 0.4961042050794029
User 107437 AUC after training: 0.4958662939392138
User 107437 does not improve AUC. Reverting changes.
Training on augumented user 47665 19/50 current_auc = 0.4961042050794029
User 47665 AUC after training: 0.4960447272943556
User 47665 does not improve AUC. Reverting changes.
Training on augumented user 118417 20/50 current_auc = 0.4961042050794029
User 118417 AUC after training: 0.49580681615416644
User 118417 does not improve AUC. Reverting changes.
Training on augumented user 41315 21/50 current_auc = 0.4961042050794029
User 41315 AUC after training: 0.4961042050794029
User 41315 does not improve AUC. Reverting changes.
Training on augumented user 78194 22/50 current_auc = 0.4961042050794029
User 78194 AUC after training: 0.4961636828644501
User 78194 improves AUC. Keeping the model.
Training on augumented user 34227 23/50 current_auc = 0.4961636828644501
User 34227 AUC after training: 0.4961636828644501
User 34227 does not improve AUC. Reverting changes.
Training on augumented user 125481 24/50 current_auc = 0.4961636828644501
User 125481 AUC after training: 0.49604472729435556
User 125481 does not improve AUC. Reverting changes.
Training on augumented user 60850 25/50 current_auc = 0.4961636828644501
User 60850 AUC after training: 0.49646107178968657
User 60850 improves AUC. Keeping the model.
Training on augumented user 116452 26/50 current_auc = 0.49646107178968657
User 116452 AUC after training: 0.4965205495747339
User 116452 improves AUC. Keeping the model.
Training on augumented user 71375 27/50 current_auc = 0.4965205495747339
User 71375 AUC after training: 0.49640159400463935
User 71375 does not improve AUC. Reverting changes.
Training on augumented user 99020 28/50 current_auc = 0.4965205495747339
User 99020 AUC after training: 0.4961636828644501
User 99020 does not improve AUC. Reverting changes.
Training on augumented user 67280 29/50 current_auc = 0.4965205495747339
User 67280 AUC after training: 0.4961042050794028
User 67280 does not improve AUC. Reverting changes.
Training on augumented user 59297 30/50 current_auc = 0.4965205495747339
User 59297 AUC after training: 0.49646107178968657
User 59297 does not improve AUC. Reverting changes.
Training on augumented user 97873 31/50 current_auc = 0.4965205495747339
User 97873 AUC after training: 0.49782906084577416
User 97873 improves AUC. Keeping the model.
Training on augumented user 134145 32/50 current_auc = 0.49782906084577416
User 134145 AUC after training: 0.4975316719205377
User 134145 does not improve AUC. Reverting changes.
Training on augumented user 87511 33/50 current_auc = 0.49782906084577416
User 87511 AUC after training: 0.49818592755605784
User 87511 improves AUC. Keeping the model.
Training on augumented user 81880 34/50 current_auc = 0.49818592755605784
User 81880 AUC after training: 0.4983643609111996
User 81880 improves AUC. Keeping the model.
Training on augumented user 104323 35/50 current_auc = 0.4983643609111996
User 104323 AUC after training: 0.4982454053411051
User 104323 does not improve AUC. Reverting changes.
Training on augumented user 38738 36/50 current_auc = 0.4983643609111996
User 38738 AUC after training: 0.4998513055373819
User 38738 improves AUC. Keeping the model.
Training on augumented user 80232 37/50 current_auc = 0.4998513055373819
User 80232 AUC after training: 0.5012787723785166
User 80232 improves AUC. Keeping the model.
Training on augumented user 93767 38/50 current_auc = 0.5012787723785166
User 93767 AUC after training: 0.5018140724439422
User 93767 improves AUC. Keeping the model.
Training on augumented user 51853 39/50 current_auc = 0.5018140724439422
User 51853 AUC after training: 0.5018735502289895
User 51853 improves AUC. Keeping the model.
Training on augumented user 32083 40/50 current_auc = 0.5018735502289895
User 32083 AUC after training: 0.5018735502289895
User 32083 does not improve AUC. Reverting changes.
Training on augumented user 16194 41/50 current_auc = 0.5018735502289895
User 16194 AUC after training: 0.502170939154226
User 16194 improves AUC. Keeping the model.
Training on augumented user 51868 42/50 current_auc = 0.502170939154226
User 51868 AUC after training: 0.5020519835841313
User 51868 does not improve AUC. Reverting changes.
Training on augumented user 100753 43/50 current_auc = 0.502170939154226
User 100753 AUC after training: 0.5016356390888004
User 100753 does not improve AUC. Reverting changes.
Training on augumented user 115256 44/50 current_auc = 0.502170939154226
User 115256 AUC after training: 0.5018735502289895
User 115256 does not improve AUC. Reverting changes.
Training on augumented user 34274 45/50 current_auc = 0.502170939154226
User 34274 AUC after training: 0.5021709391542258
User 34274 does not improve AUC. Reverting changes.
Training on augumented user 45216 46/50 current_auc = 0.502170939154226
User 45216 AUC after training: 0.5016356390888004
User 45216 does not improve AUC. Reverting changes.
Training on augumented user 118069 47/50 current_auc = 0.502170939154226
User 118069 AUC after training: 0.5008029500981384
User 118069 does not improve AUC. Reverting changes.
Training on augumented user 77745 48/50 current_auc = 0.502170939154226
User 77745 AUC after training: 0.5022304169392733
User 77745 improves AUC. Keeping the model.
Training on augumented user 115596 49/50 current_auc = 0.5022304169392733
User 115596 AUC after training: 0.5024088502944151
User 115596 improves AUC. Keeping the model.
[2024-12-02 20:16:47.749816] start test user 49239 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:48.155507] start test user 49239 289/568 recall augumented users by random, augumented_users = [43384, 94714, 106598, 73966, 32306, 2249, 103274, 17953, 35366, 15231, 47434, 56521, 1284, 36511, 108634, 19216, 131415, 82737, 37552, 96141, 86309, 14595, 45041, 82389, 112855, 22502, 26396, 63022, 85800, 90455, 46841, 94614, 65693, 101600, 16909, 29733, 16970, 71526, 47770, 26956, 86089, 67873, 118997, 16636, 10216, 27169, 67449, 81728, 80950, 43211]
[2024-12-02 20:16:48.170075] user = 49239 Cloud 289/568
[2024-12-02 20:16:48.194410] user = 49239 Local 289/568
[2024-12-02 20:16:48.247018] user = 49239 Local+ 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:50.527169] user = 49239 MPDA- 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6233739837398374
Training on augumented user 43384 0/50 current_auc = 0.6233739837398374
User 43384 AUC after training: 0.6245934959349593
User 43384 improves AUC. Keeping the model.
Training on augumented user 94714 1/50 current_auc = 0.6245934959349593
User 94714 AUC after training: 0.6247628726287262
User 94714 improves AUC. Keeping the model.
Training on augumented user 106598 2/50 current_auc = 0.6247628726287262
User 106598 AUC after training: 0.6248306233062331
User 106598 improves AUC. Keeping the model.
Training on augumented user 73966 3/50 current_auc = 0.6248306233062331
User 73966 AUC after training: 0.6244918699186992
User 73966 does not improve AUC. Reverting changes.
Training on augumented user 32306 4/50 current_auc = 0.6248306233062331
User 32306 AUC after training: 0.6249322493224931
User 32306 improves AUC. Keeping the model.
Training on augumented user 2249 5/50 current_auc = 0.6249322493224931
User 2249 AUC after training: 0.6252032520325204
User 2249 improves AUC. Keeping the model.
Training on augumented user 103274 6/50 current_auc = 0.6252032520325204
User 103274 AUC after training: 0.6254742547425474
User 103274 improves AUC. Keeping the model.
Training on augumented user 17953 7/50 current_auc = 0.6254742547425474
User 17953 AUC after training: 0.6243224932249323
User 17953 does not improve AUC. Reverting changes.
Training on augumented user 35366 8/50 current_auc = 0.6254742547425474
User 35366 AUC after training: 0.6246273712737127
User 35366 does not improve AUC. Reverting changes.
Training on augumented user 15231 9/50 current_auc = 0.6254742547425474
User 15231 AUC after training: 0.6252710027100271
User 15231 does not improve AUC. Reverting changes.
Training on augumented user 47434 10/50 current_auc = 0.6254742547425474
User 47434 AUC after training: 0.6247967479674797
User 47434 does not improve AUC. Reverting changes.
Training on augumented user 56521 11/50 current_auc = 0.6254742547425474
User 56521 AUC after training: 0.6232384823848238
User 56521 does not improve AUC. Reverting changes.
Training on augumented user 1284 12/50 current_auc = 0.6254742547425474
User 1284 AUC after training: 0.6252032520325204
User 1284 does not improve AUC. Reverting changes.
Training on augumented user 36511 13/50 current_auc = 0.6254742547425474
User 36511 AUC after training: 0.6252710027100271
User 36511 does not improve AUC. Reverting changes.
Training on augumented user 108634 14/50 current_auc = 0.6254742547425474
User 108634 AUC after training: 0.6247967479674796
User 108634 does not improve AUC. Reverting changes.
Training on augumented user 19216 15/50 current_auc = 0.6254742547425474
User 19216 AUC after training: 0.625
User 19216 does not improve AUC. Reverting changes.
Training on augumented user 131415 16/50 current_auc = 0.6254742547425474
User 131415 AUC after training: 0.6252032520325203
User 131415 does not improve AUC. Reverting changes.
Training on augumented user 82737 17/50 current_auc = 0.6254742547425474
User 82737 AUC after training: 0.6253387533875339
User 82737 does not improve AUC. Reverting changes.
Training on augumented user 37552 18/50 current_auc = 0.6254742547425474
User 37552 AUC after training: 0.6252371273712738
User 37552 does not improve AUC. Reverting changes.
Training on augumented user 96141 19/50 current_auc = 0.6254742547425474
User 96141 AUC after training: 0.6254065040650406
User 96141 does not improve AUC. Reverting changes.
Training on augumented user 86309 20/50 current_auc = 0.6254742547425474
User 86309 AUC after training: 0.6255420054200542
User 86309 improves AUC. Keeping the model.
Training on augumented user 14595 21/50 current_auc = 0.6255420054200542
User 14595 AUC after training: 0.6248983739837399
User 14595 does not improve AUC. Reverting changes.
Training on augumented user 45041 22/50 current_auc = 0.6255420054200542
User 45041 AUC after training: 0.6250338753387534
User 45041 does not improve AUC. Reverting changes.
Training on augumented user 82389 23/50 current_auc = 0.6255420054200542
User 82389 AUC after training: 0.6255081300813008
User 82389 does not improve AUC. Reverting changes.
Training on augumented user 112855 24/50 current_auc = 0.6255420054200542
User 112855 AUC after training: 0.6254742547425475
User 112855 does not improve AUC. Reverting changes.
Training on augumented user 22502 25/50 current_auc = 0.6255420054200542
User 22502 AUC after training: 0.6252710027100271
User 22502 does not improve AUC. Reverting changes.
Training on augumented user 26396 26/50 current_auc = 0.6255420054200542
User 26396 AUC after training: 0.6251355013550136
User 26396 does not improve AUC. Reverting changes.
Training on augumented user 63022 27/50 current_auc = 0.6255420054200542
User 63022 AUC after training: 0.626219512195122
User 63022 improves AUC. Keeping the model.
Training on augumented user 85800 28/50 current_auc = 0.626219512195122
User 85800 AUC after training: 0.6262872628726287
User 85800 improves AUC. Keeping the model.
Training on augumented user 90455 29/50 current_auc = 0.6262872628726287
User 90455 AUC after training: 0.6261517615176151
User 90455 does not improve AUC. Reverting changes.
Training on augumented user 46841 30/50 current_auc = 0.6262872628726287
User 46841 AUC after training: 0.6255420054200542
User 46841 does not improve AUC. Reverting changes.
Training on augumented user 94614 31/50 current_auc = 0.6262872628726287
User 94614 AUC after training: 0.6253387533875339
User 94614 does not improve AUC. Reverting changes.
Training on augumented user 65693 32/50 current_auc = 0.6262872628726287
User 65693 AUC after training: 0.6258807588075881
User 65693 does not improve AUC. Reverting changes.
Training on augumented user 101600 33/50 current_auc = 0.6262872628726287
User 101600 AUC after training: 0.6261517615176152
User 101600 does not improve AUC. Reverting changes.
Training on augumented user 16909 34/50 current_auc = 0.6262872628726287
User 16909 AUC after training: 0.6257452574525745
User 16909 does not improve AUC. Reverting changes.
Training on augumented user 29733 35/50 current_auc = 0.6262872628726287
User 29733 AUC after training: 0.6258130081300813
User 29733 does not improve AUC. Reverting changes.
Training on augumented user 16970 36/50 current_auc = 0.6262872628726287
User 16970 AUC after training: 0.6261517615176152
User 16970 does not improve AUC. Reverting changes.
Training on augumented user 71526 37/50 current_auc = 0.6262872628726287
User 71526 AUC after training: 0.624390243902439
User 71526 does not improve AUC. Reverting changes.
Training on augumented user 47770 38/50 current_auc = 0.6262872628726287
User 47770 AUC after training: 0.6262872628726288
User 47770 improves AUC. Keeping the model.
Training on augumented user 26956 39/50 current_auc = 0.6262872628726288
User 26956 AUC after training: 0.6254065040650406
User 26956 does not improve AUC. Reverting changes.
Training on augumented user 86089 40/50 current_auc = 0.6262872628726288
User 86089 AUC after training: 0.6255420054200542
User 86089 does not improve AUC. Reverting changes.
Training on augumented user 67873 41/50 current_auc = 0.6262872628726288
User 67873 AUC after training: 0.6256775067750677
User 67873 does not improve AUC. Reverting changes.
Training on augumented user 118997 42/50 current_auc = 0.6262872628726288
User 118997 AUC after training: 0.6264227642276423
User 118997 improves AUC. Keeping the model.
Training on augumented user 16636 43/50 current_auc = 0.6264227642276423
User 16636 AUC after training: 0.626219512195122
User 16636 does not improve AUC. Reverting changes.
Training on augumented user 10216 44/50 current_auc = 0.6264227642276423
User 10216 AUC after training: 0.6260840108401085
User 10216 does not improve AUC. Reverting changes.
Training on augumented user 27169 45/50 current_auc = 0.6264227642276423
User 27169 AUC after training: 0.6260162601626016
User 27169 does not improve AUC. Reverting changes.
Training on augumented user 67449 46/50 current_auc = 0.6264227642276423
User 67449 AUC after training: 0.625609756097561
User 67449 does not improve AUC. Reverting changes.
Training on augumented user 81728 47/50 current_auc = 0.6264227642276423
User 81728 AUC after training: 0.625609756097561
User 81728 does not improve AUC. Reverting changes.
Training on augumented user 80950 48/50 current_auc = 0.6264227642276423
User 80950 AUC after training: 0.6254403794037939
User 80950 does not improve AUC. Reverting changes.
Training on augumented user 43211 49/50 current_auc = 0.6264227642276423
User 43211 AUC after training: 0.6260162601626016
User 43211 does not improve AUC. Reverting changes.
[2024-12-02 20:17:21.898017] start test user 49276 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:22.472854] start test user 49276 290/568 recall augumented users by random, augumented_users = [114581, 63174, 52283, 93927, 26195, 11672, 56243, 125730, 68360, 133071, 37828, 55854, 129307, 16551, 120257, 115720, 53856, 1547, 19988, 96578, 14787, 44702, 11410, 73693, 101878, 133138, 62822, 21471, 35251, 98145, 15074, 49384, 80030, 32765, 36882, 93172, 137993, 14568, 19628, 137986, 36388, 114071, 7461, 16787, 9839, 5695, 124217, 11075, 91306, 4151]
[2024-12-02 20:17:22.487995] user = 49276 Cloud 290/568
[2024-12-02 20:17:22.505796] user = 49276 Local 290/568
[2024-12-02 20:17:22.566313] user = 49276 Local+ 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:24.831126] user = 49276 MPDA- 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5854816824966079
Training on augumented user 114581 0/50 current_auc = 0.5854816824966079
User 114581 AUC after training: 0.5853968792401628
User 114581 does not improve AUC. Reverting changes.
Training on augumented user 63174 1/50 current_auc = 0.5854816824966079
User 63174 AUC after training: 0.587432157394844
User 63174 improves AUC. Keeping the model.
Training on augumented user 52283 2/50 current_auc = 0.587432157394844
User 52283 AUC after training: 0.5852272727272727
User 52283 does not improve AUC. Reverting changes.
Training on augumented user 93927 3/50 current_auc = 0.587432157394844
User 93927 AUC after training: 0.5863297150610584
User 93927 does not improve AUC. Reverting changes.
Training on augumented user 26195 4/50 current_auc = 0.587432157394844
User 26195 AUC after training: 0.5880257801899593
User 26195 improves AUC. Keeping the model.
Training on augumented user 11672 5/50 current_auc = 0.5880257801899593
User 11672 AUC after training: 0.5880257801899593
User 11672 does not improve AUC. Reverting changes.
Training on augumented user 56243 6/50 current_auc = 0.5880257801899593
User 56243 AUC after training: 0.5878561736770691
User 56243 does not improve AUC. Reverting changes.
Training on augumented user 125730 7/50 current_auc = 0.5880257801899593
User 125730 AUC after training: 0.587516960651289
User 125730 does not improve AUC. Reverting changes.
Training on augumented user 68360 8/50 current_auc = 0.5880257801899593
User 68360 AUC after training: 0.5876865671641791
User 68360 does not improve AUC. Reverting changes.
Training on augumented user 133071 9/50 current_auc = 0.5880257801899593
User 133071 AUC after training: 0.5881953867028493
User 133071 improves AUC. Keeping the model.
Training on augumented user 37828 10/50 current_auc = 0.5881953867028493
User 37828 AUC after training: 0.5887042062415198
User 37828 improves AUC. Keeping the model.
Training on augumented user 55854 11/50 current_auc = 0.5887042062415198
User 55854 AUC after training: 0.5884497964721845
User 55854 does not improve AUC. Reverting changes.
Training on augumented user 129307 12/50 current_auc = 0.5887042062415198
User 129307 AUC after training: 0.5862449118046134
User 129307 does not improve AUC. Reverting changes.
Training on augumented user 16551 13/50 current_auc = 0.5887042062415198
User 16551 AUC after training: 0.5878561736770693
User 16551 does not improve AUC. Reverting changes.
Training on augumented user 120257 14/50 current_auc = 0.5887042062415198
User 120257 AUC after training: 0.5875169606512891
User 120257 does not improve AUC. Reverting changes.
Training on augumented user 115720 15/50 current_auc = 0.5887042062415198
User 115720 AUC after training: 0.587516960651289
User 115720 does not improve AUC. Reverting changes.
Training on augumented user 53856 16/50 current_auc = 0.5887042062415198
User 53856 AUC after training: 0.5881953867028493
User 53856 does not improve AUC. Reverting changes.
Training on augumented user 1547 17/50 current_auc = 0.5887042062415198
User 1547 AUC after training: 0.5878561736770692
User 1547 does not improve AUC. Reverting changes.
Training on augumented user 19988 18/50 current_auc = 0.5887042062415198
User 19988 AUC after training: 0.5878561736770692
User 19988 does not improve AUC. Reverting changes.
Training on augumented user 96578 19/50 current_auc = 0.5887042062415198
User 96578 AUC after training: 0.5873473541383989
User 96578 does not improve AUC. Reverting changes.
Training on augumented user 14787 20/50 current_auc = 0.5887042062415198
User 14787 AUC after training: 0.5883649932157395
User 14787 does not improve AUC. Reverting changes.
Training on augumented user 44702 21/50 current_auc = 0.5887042062415198
User 44702 AUC after training: 0.5888738127544098
User 44702 improves AUC. Keeping the model.
Training on augumented user 11410 22/50 current_auc = 0.5888738127544098
User 11410 AUC after training: 0.5890434192672999
User 11410 improves AUC. Keeping the model.
Training on augumented user 73693 23/50 current_auc = 0.5890434192672999
User 73693 AUC after training: 0.58938263229308
User 73693 improves AUC. Keeping the model.
Training on augumented user 101878 24/50 current_auc = 0.58938263229308
User 101878 AUC after training: 0.5886194029850746
User 101878 does not improve AUC. Reverting changes.
Training on augumented user 133138 25/50 current_auc = 0.58938263229308
User 133138 AUC after training: 0.5862449118046134
User 133138 does not improve AUC. Reverting changes.
Training on augumented user 62822 26/50 current_auc = 0.58938263229308
User 62822 AUC after training: 0.58938263229308
User 62822 does not improve AUC. Reverting changes.
Training on augumented user 21471 27/50 current_auc = 0.58938263229308
User 21471 AUC after training: 0.5893826322930801
User 21471 improves AUC. Keeping the model.
Training on augumented user 35251 28/50 current_auc = 0.5893826322930801
User 35251 AUC after training: 0.5841248303934872
User 35251 does not improve AUC. Reverting changes.
Training on augumented user 98145 29/50 current_auc = 0.5893826322930801
User 98145 AUC after training: 0.5890434192672999
User 98145 does not improve AUC. Reverting changes.
Training on augumented user 15074 30/50 current_auc = 0.5893826322930801
User 15074 AUC after training: 0.58921302578019
User 15074 does not improve AUC. Reverting changes.
Training on augumented user 49384 31/50 current_auc = 0.5893826322930801
User 49384 AUC after training: 0.5888738127544098
User 49384 does not improve AUC. Reverting changes.
Training on augumented user 80030 32/50 current_auc = 0.5893826322930801
User 80030 AUC after training: 0.58921302578019
User 80030 does not improve AUC. Reverting changes.
Training on augumented user 32765 33/50 current_auc = 0.5893826322930801
User 32765 AUC after training: 0.5885345997286295
User 32765 does not improve AUC. Reverting changes.
Training on augumented user 36882 34/50 current_auc = 0.5893826322930801
User 36882 AUC after training: 0.5882801899592944
User 36882 does not improve AUC. Reverting changes.
Training on augumented user 93172 35/50 current_auc = 0.5893826322930801
User 93172 AUC after training: 0.5888738127544098
User 93172 does not improve AUC. Reverting changes.
Training on augumented user 137993 36/50 current_auc = 0.5893826322930801
User 137993 AUC after training: 0.5849728629579376
User 137993 does not improve AUC. Reverting changes.
Training on augumented user 14568 37/50 current_auc = 0.5893826322930801
User 14568 AUC after training: 0.58921302578019
User 14568 does not improve AUC. Reverting changes.
Training on augumented user 19628 38/50 current_auc = 0.5893826322930801
User 19628 AUC after training: 0.58921302578019
User 19628 does not improve AUC. Reverting changes.
Training on augumented user 137986 39/50 current_auc = 0.5893826322930801
User 137986 AUC after training: 0.58921302578019
User 137986 does not improve AUC. Reverting changes.
Training on augumented user 36388 40/50 current_auc = 0.5893826322930801
User 36388 AUC after training: 0.5888738127544098
User 36388 does not improve AUC. Reverting changes.
Training on augumented user 114071 41/50 current_auc = 0.5893826322930801
User 114071 AUC after training: 0.5890434192672999
User 114071 does not improve AUC. Reverting changes.
Training on augumented user 7461 42/50 current_auc = 0.5893826322930801
User 7461 AUC after training: 0.5888738127544098
User 7461 does not improve AUC. Reverting changes.
Training on augumented user 16787 43/50 current_auc = 0.5893826322930801
User 16787 AUC after training: 0.5887042062415198
User 16787 does not improve AUC. Reverting changes.
Training on augumented user 9839 44/50 current_auc = 0.5893826322930801
User 9839 AUC after training: 0.5882801899592944
User 9839 does not improve AUC. Reverting changes.
Training on augumented user 5695 45/50 current_auc = 0.5893826322930801
User 5695 AUC after training: 0.5900610583446404
User 5695 improves AUC. Keeping the model.
Training on augumented user 124217 46/50 current_auc = 0.5900610583446404
User 124217 AUC after training: 0.58938263229308
User 124217 does not improve AUC. Reverting changes.
Training on augumented user 11075 47/50 current_auc = 0.5900610583446404
User 11075 AUC after training: 0.5895522388059702
User 11075 does not improve AUC. Reverting changes.
Training on augumented user 91306 48/50 current_auc = 0.5900610583446404
User 91306 AUC after training: 0.5900610583446404
User 91306 does not improve AUC. Reverting changes.
Training on augumented user 4151 49/50 current_auc = 0.5900610583446404
User 4151 AUC after training: 0.5897218453188602
User 4151 does not improve AUC. Reverting changes.
[2024-12-02 20:17:55.216811] start test user 49307 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:55.893471] start test user 49307 291/568 recall augumented users by random, augumented_users = [136852, 85815, 50392, 85396, 68691, 135251, 37247, 53549, 51406, 100784, 49459, 79769, 63795, 35747, 88424, 4442, 68157, 115766, 104723, 19574, 55286, 56230, 133218, 20114, 60649, 95760, 7639, 66736, 23192, 30065, 52295, 55171, 78037, 63948, 46876, 127417, 82950, 111942, 41637, 130469, 93804, 16544, 120537, 134808, 82607, 7779, 55708, 93937, 127292, 111343]
[2024-12-02 20:17:55.921680] user = 49307 Cloud 291/568
[2024-12-02 20:17:55.941521] user = 49307 Local 291/568
[2024-12-02 20:17:56.010575] user = 49307 Local+ 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:58.939597] user = 49307 MPDA- 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6804757998359311
Training on augumented user 136852 0/50 current_auc = 0.6804757998359311
User 136852 AUC after training: 0.6801681706316652
User 136852 does not improve AUC. Reverting changes.
Training on augumented user 85815 1/50 current_auc = 0.6804757998359311
User 85815 AUC after training: 0.6821164889253486
User 85815 improves AUC. Keeping the model.
Training on augumented user 50392 2/50 current_auc = 0.6821164889253486
User 50392 AUC after training: 0.6828342904019687
User 50392 improves AUC. Keeping the model.
Training on augumented user 85396 3/50 current_auc = 0.6828342904019687
User 85396 AUC after training: 0.6831419196062346
User 85396 improves AUC. Keeping the model.
Training on augumented user 68691 4/50 current_auc = 0.6831419196062346
User 68691 AUC after training: 0.6832444626743231
User 68691 improves AUC. Keeping the model.
Training on augumented user 135251 5/50 current_auc = 0.6832444626743231
User 135251 AUC after training: 0.6819114027891714
User 135251 does not improve AUC. Reverting changes.
Training on augumented user 37247 6/50 current_auc = 0.6832444626743231
User 37247 AUC after training: 0.6828342904019687
User 37247 does not improve AUC. Reverting changes.
Training on augumented user 53549 7/50 current_auc = 0.6832444626743231
User 53549 AUC after training: 0.6827317473338802
User 53549 does not improve AUC. Reverting changes.
Training on augumented user 51406 8/50 current_auc = 0.6832444626743231
User 51406 AUC after training: 0.6828342904019687
User 51406 does not improve AUC. Reverting changes.
Training on augumented user 100784 9/50 current_auc = 0.6832444626743231
User 100784 AUC after training: 0.6827830188679246
User 100784 does not improve AUC. Reverting changes.
Training on augumented user 49459 10/50 current_auc = 0.6832444626743231
User 49459 AUC after training: 0.6826804757998359
User 49459 does not improve AUC. Reverting changes.
Training on augumented user 79769 11/50 current_auc = 0.6832444626743231
User 79769 AUC after training: 0.681142329778507
User 79769 does not improve AUC. Reverting changes.
Training on augumented user 63795 12/50 current_auc = 0.6832444626743231
User 63795 AUC after training: 0.6830393765381461
User 63795 does not improve AUC. Reverting changes.
Training on augumented user 35747 13/50 current_auc = 0.6832444626743231
User 35747 AUC after training: 0.6824753896636587
User 35747 does not improve AUC. Reverting changes.
Training on augumented user 88424 14/50 current_auc = 0.6832444626743231
User 88424 AUC after training: 0.68201394585726
User 88424 does not improve AUC. Reverting changes.
Training on augumented user 4442 15/50 current_auc = 0.6832444626743231
User 4442 AUC after training: 0.6811936013125514
User 4442 does not improve AUC. Reverting changes.
Training on augumented user 68157 16/50 current_auc = 0.6832444626743231
User 68157 AUC after training: 0.6828342904019689
User 68157 does not improve AUC. Reverting changes.
Training on augumented user 115766 17/50 current_auc = 0.6832444626743231
User 115766 AUC after training: 0.6827317473338802
User 115766 does not improve AUC. Reverting changes.
Training on augumented user 104723 18/50 current_auc = 0.6832444626743231
User 104723 AUC after training: 0.6821164889253487
User 104723 does not improve AUC. Reverting changes.
Training on augumented user 19574 19/50 current_auc = 0.6832444626743231
User 19574 AUC after training: 0.68201394585726
User 19574 does not improve AUC. Reverting changes.
Training on augumented user 55286 20/50 current_auc = 0.6832444626743231
User 55286 AUC after training: 0.6832444626743233
User 55286 improves AUC. Keeping the model.
Training on augumented user 56230 21/50 current_auc = 0.6832444626743233
User 56230 AUC after training: 0.6834495488105005
User 56230 improves AUC. Keeping the model.
Training on augumented user 133218 22/50 current_auc = 0.6834495488105005
User 133218 AUC after training: 0.6832444626743231
User 133218 does not improve AUC. Reverting changes.
Training on augumented user 20114 23/50 current_auc = 0.6834495488105005
User 20114 AUC after training: 0.682526661197703
User 20114 does not improve AUC. Reverting changes.
Training on augumented user 60649 24/50 current_auc = 0.6834495488105005
User 60649 AUC after training: 0.6834495488105005
User 60649 does not improve AUC. Reverting changes.
Training on augumented user 95760 25/50 current_auc = 0.6834495488105005
User 95760 AUC after training: 0.6837571780147662
User 95760 improves AUC. Keeping the model.
Training on augumented user 7639 26/50 current_auc = 0.6837571780147662
User 7639 AUC after training: 0.6831419196062346
User 7639 does not improve AUC. Reverting changes.
Training on augumented user 66736 27/50 current_auc = 0.6837571780147662
User 66736 AUC after training: 0.683193191140279
User 66736 does not improve AUC. Reverting changes.
Training on augumented user 23192 28/50 current_auc = 0.6837571780147662
User 23192 AUC after training: 0.6829368334700574
User 23192 does not improve AUC. Reverting changes.
Training on augumented user 30065 29/50 current_auc = 0.6837571780147662
User 30065 AUC after training: 0.683552091878589
User 30065 does not improve AUC. Reverting changes.
Training on augumented user 52295 30/50 current_auc = 0.6837571780147662
User 52295 AUC after training: 0.6839622641509434
User 52295 improves AUC. Keeping the model.
Training on augumented user 55171 31/50 current_auc = 0.6839622641509434
User 55171 AUC after training: 0.6836546349466776
User 55171 does not improve AUC. Reverting changes.
Training on augumented user 78037 32/50 current_auc = 0.6839622641509434
User 78037 AUC after training: 0.6830393765381461
User 78037 does not improve AUC. Reverting changes.
Training on augumented user 63948 33/50 current_auc = 0.6839622641509434
User 63948 AUC after training: 0.6834495488105005
User 63948 does not improve AUC. Reverting changes.
Training on augumented user 46876 34/50 current_auc = 0.6839622641509434
User 46876 AUC after training: 0.6841673502871205
User 46876 improves AUC. Keeping the model.
Training on augumented user 127417 35/50 current_auc = 0.6841673502871205
User 127417 AUC after training: 0.6838597210828549
User 127417 does not improve AUC. Reverting changes.
Training on augumented user 82950 36/50 current_auc = 0.6841673502871205
User 82950 AUC after training: 0.683552091878589
User 82950 does not improve AUC. Reverting changes.
Training on augumented user 111942 37/50 current_auc = 0.6841673502871205
User 111942 AUC after training: 0.6837059064807219
User 111942 does not improve AUC. Reverting changes.
Training on augumented user 41637 38/50 current_auc = 0.6841673502871205
User 41637 AUC after training: 0.6832444626743231
User 41637 does not improve AUC. Reverting changes.
Training on augumented user 130469 39/50 current_auc = 0.6841673502871205
User 130469 AUC after training: 0.6838597210828549
User 130469 does not improve AUC. Reverting changes.
Training on augumented user 93804 40/50 current_auc = 0.6841673502871205
User 93804 AUC after training: 0.6838084495488105
User 93804 does not improve AUC. Reverting changes.
Training on augumented user 16544 41/50 current_auc = 0.6841673502871205
User 16544 AUC after training: 0.6833982772764561
User 16544 does not improve AUC. Reverting changes.
Training on augumented user 120537 42/50 current_auc = 0.6841673502871205
User 120537 AUC after training: 0.6833470057424118
User 120537 does not improve AUC. Reverting changes.
Training on augumented user 134808 43/50 current_auc = 0.6841673502871205
User 134808 AUC after training: 0.6843211648892534
User 134808 improves AUC. Keeping the model.
Training on augumented user 82607 44/50 current_auc = 0.6843211648892534
User 82607 AUC after training: 0.6832444626743233
User 82607 does not improve AUC. Reverting changes.
Training on augumented user 7779 45/50 current_auc = 0.6843211648892534
User 7779 AUC after training: 0.6837571780147663
User 7779 does not improve AUC. Reverting changes.
Training on augumented user 55708 46/50 current_auc = 0.6843211648892534
User 55708 AUC after training: 0.683552091878589
User 55708 does not improve AUC. Reverting changes.
Training on augumented user 93937 47/50 current_auc = 0.6843211648892534
User 93937 AUC after training: 0.6832444626743231
User 93937 does not improve AUC. Reverting changes.
Training on augumented user 127292 48/50 current_auc = 0.6843211648892534
User 127292 AUC after training: 0.6837571780147662
User 127292 does not improve AUC. Reverting changes.
Training on augumented user 111343 49/50 current_auc = 0.6843211648892534
User 111343 AUC after training: 0.6829368334700575
User 111343 does not improve AUC. Reverting changes.
[2024-12-02 20:18:30.030847] start test user 49363 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:30.486053] start test user 49363 292/568 recall augumented users by random, augumented_users = [115228, 86884, 90296, 20446, 70845, 33308, 94460, 124309, 35887, 66935, 111432, 18004, 321, 22383, 128627, 71535, 15918, 68321, 15711, 22014, 127315, 132676, 25912, 54812, 77909, 90621, 127604, 39990, 98453, 13451, 17099, 99244, 41066, 99778, 106414, 116932, 88138, 54629, 18314, 119293, 52384, 37240, 27673, 137634, 93937, 4621, 62460, 3768, 23956, 84759]
[2024-12-02 20:18:30.500970] user = 49363 Cloud 292/568
[2024-12-02 20:18:30.519622] user = 49363 Local 292/568
[2024-12-02 20:18:30.553820] user = 49363 Local+ 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:33.150045] user = 49363 MPDA- 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6756892230576441
Training on augumented user 115228 0/50 current_auc = 0.6756892230576441
User 115228 AUC after training: 0.6758145363408522
User 115228 improves AUC. Keeping the model.
Training on augumented user 86884 1/50 current_auc = 0.6758145363408522
User 86884 AUC after training: 0.6776942355889725
User 86884 improves AUC. Keeping the model.
Training on augumented user 90296 2/50 current_auc = 0.6776942355889725
User 90296 AUC after training: 0.6770676691729324
User 90296 does not improve AUC. Reverting changes.
Training on augumented user 20446 3/50 current_auc = 0.6776942355889725
User 20446 AUC after training: 0.6770676691729324
User 20446 does not improve AUC. Reverting changes.
Training on augumented user 70845 4/50 current_auc = 0.6776942355889725
User 70845 AUC after training: 0.6773182957393483
User 70845 does not improve AUC. Reverting changes.
Training on augumented user 33308 5/50 current_auc = 0.6776942355889725
User 33308 AUC after training: 0.6783208020050124
User 33308 improves AUC. Keeping the model.
Training on augumented user 94460 6/50 current_auc = 0.6783208020050124
User 94460 AUC after training: 0.6783208020050125
User 94460 improves AUC. Keeping the model.
Training on augumented user 124309 7/50 current_auc = 0.6783208020050125
User 124309 AUC after training: 0.6790726817042607
User 124309 improves AUC. Keeping the model.
Training on augumented user 35887 8/50 current_auc = 0.6790726817042607
User 35887 AUC after training: 0.6780701754385965
User 35887 does not improve AUC. Reverting changes.
Training on augumented user 66935 9/50 current_auc = 0.6790726817042607
User 66935 AUC after training: 0.6784461152882205
User 66935 does not improve AUC. Reverting changes.
Training on augumented user 111432 10/50 current_auc = 0.6790726817042607
User 111432 AUC after training: 0.6802005012531328
User 111432 improves AUC. Keeping the model.
Training on augumented user 18004 11/50 current_auc = 0.6802005012531328
User 18004 AUC after training: 0.6803258145363408
User 18004 improves AUC. Keeping the model.
Training on augumented user 321 12/50 current_auc = 0.6803258145363408
User 321 AUC after training: 0.6793233082706767
User 321 does not improve AUC. Reverting changes.
Training on augumented user 22383 13/50 current_auc = 0.6803258145363408
User 22383 AUC after training: 0.680576441102757
User 22383 improves AUC. Keeping the model.
Training on augumented user 128627 14/50 current_auc = 0.680576441102757
User 128627 AUC after training: 0.6814536340852131
User 128627 improves AUC. Keeping the model.
Training on augumented user 71535 15/50 current_auc = 0.6814536340852131
User 71535 AUC after training: 0.6805764411027571
User 71535 does not improve AUC. Reverting changes.
Training on augumented user 15918 16/50 current_auc = 0.6814536340852131
User 15918 AUC after training: 0.6815789473684211
User 15918 improves AUC. Keeping the model.
Training on augumented user 68321 17/50 current_auc = 0.6815789473684211
User 68321 AUC after training: 0.6815789473684212
User 68321 improves AUC. Keeping the model.
Training on augumented user 15711 18/50 current_auc = 0.6815789473684212
User 15711 AUC after training: 0.6843358395989975
User 15711 improves AUC. Keeping the model.
Training on augumented user 22014 19/50 current_auc = 0.6843358395989975
User 22014 AUC after training: 0.6849624060150377
User 22014 improves AUC. Keeping the model.
Training on augumented user 127315 20/50 current_auc = 0.6849624060150377
User 127315 AUC after training: 0.6858395989974938
User 127315 improves AUC. Keeping the model.
Training on augumented user 132676 21/50 current_auc = 0.6858395989974938
User 132676 AUC after training: 0.6858395989974938
User 132676 does not improve AUC. Reverting changes.
Training on augumented user 25912 22/50 current_auc = 0.6858395989974938
User 25912 AUC after training: 0.6852130325814537
User 25912 does not improve AUC. Reverting changes.
Training on augumented user 54812 23/50 current_auc = 0.6858395989974938
User 54812 AUC after training: 0.6853383458646617
User 54812 does not improve AUC. Reverting changes.
Training on augumented user 77909 24/50 current_auc = 0.6858395989974938
User 77909 AUC after training: 0.6862155388471178
User 77909 improves AUC. Keeping the model.
Training on augumented user 90621 25/50 current_auc = 0.6862155388471178
User 90621 AUC after training: 0.6860902255639098
User 90621 does not improve AUC. Reverting changes.
Training on augumented user 127604 26/50 current_auc = 0.6862155388471178
User 127604 AUC after training: 0.686591478696742
User 127604 improves AUC. Keeping the model.
Training on augumented user 39990 27/50 current_auc = 0.686591478696742
User 39990 AUC after training: 0.6864661654135338
User 39990 does not improve AUC. Reverting changes.
Training on augumented user 98453 28/50 current_auc = 0.686591478696742
User 98453 AUC after training: 0.687218045112782
User 98453 improves AUC. Keeping the model.
Training on augumented user 13451 29/50 current_auc = 0.687218045112782
User 13451 AUC after training: 0.6863408521303258
User 13451 does not improve AUC. Reverting changes.
Training on augumented user 17099 30/50 current_auc = 0.687218045112782
User 17099 AUC after training: 0.687593984962406
User 17099 improves AUC. Keeping the model.
Training on augumented user 99244 31/50 current_auc = 0.687593984962406
User 99244 AUC after training: 0.6887218045112782
User 99244 improves AUC. Keeping the model.
Training on augumented user 41066 32/50 current_auc = 0.6887218045112782
User 41066 AUC after training: 0.68671679197995
User 41066 does not improve AUC. Reverting changes.
Training on augumented user 99778 33/50 current_auc = 0.6887218045112782
User 99778 AUC after training: 0.687468671679198
User 99778 does not improve AUC. Reverting changes.
Training on augumented user 106414 34/50 current_auc = 0.6887218045112782
User 106414 AUC after training: 0.6858395989974938
User 106414 does not improve AUC. Reverting changes.
Training on augumented user 116932 35/50 current_auc = 0.6887218045112782
User 116932 AUC after training: 0.6888471177944862
User 116932 improves AUC. Keeping the model.
Training on augumented user 88138 36/50 current_auc = 0.6888471177944862
User 88138 AUC after training: 0.6890977443609022
User 88138 improves AUC. Keeping the model.
Training on augumented user 54629 37/50 current_auc = 0.6890977443609022
User 54629 AUC after training: 0.6893483709273183
User 54629 improves AUC. Keeping the model.
Training on augumented user 18314 38/50 current_auc = 0.6893483709273183
User 18314 AUC after training: 0.6890977443609022
User 18314 does not improve AUC. Reverting changes.
Training on augumented user 119293 39/50 current_auc = 0.6893483709273183
User 119293 AUC after training: 0.6892230576441104
User 119293 does not improve AUC. Reverting changes.
Training on augumented user 52384 40/50 current_auc = 0.6893483709273183
User 52384 AUC after training: 0.6893483709273183
User 52384 does not improve AUC. Reverting changes.
Training on augumented user 37240 41/50 current_auc = 0.6893483709273183
User 37240 AUC after training: 0.6884711779448622
User 37240 does not improve AUC. Reverting changes.
Training on augumented user 27673 42/50 current_auc = 0.6893483709273183
User 27673 AUC after training: 0.6897243107769423
User 27673 improves AUC. Keeping the model.
Training on augumented user 137634 43/50 current_auc = 0.6897243107769423
User 137634 AUC after training: 0.6895989974937343
User 137634 does not improve AUC. Reverting changes.
Training on augumented user 93937 44/50 current_auc = 0.6897243107769423
User 93937 AUC after training: 0.6909774436090226
User 93937 improves AUC. Keeping the model.
Training on augumented user 4621 45/50 current_auc = 0.6909774436090226
User 4621 AUC after training: 0.6917293233082706
User 4621 improves AUC. Keeping the model.
Training on augumented user 62460 46/50 current_auc = 0.6917293233082706
User 62460 AUC after training: 0.6899749373433584
User 62460 does not improve AUC. Reverting changes.
Training on augumented user 3768 47/50 current_auc = 0.6917293233082706
User 3768 AUC after training: 0.6911027568922307
User 3768 does not improve AUC. Reverting changes.
Training on augumented user 23956 48/50 current_auc = 0.6917293233082706
User 23956 AUC after training: 0.6907268170426064
User 23956 does not improve AUC. Reverting changes.
Training on augumented user 84759 49/50 current_auc = 0.6917293233082706
User 84759 AUC after training: 0.6911027568922306
User 84759 does not improve AUC. Reverting changes.
[2024-12-02 20:19:06.534118] start test user 49381 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:06.951791] start test user 49381 293/568 recall augumented users by random, augumented_users = [7104, 10947, 120521, 47972, 28348, 9700, 135225, 63805, 74668, 114645, 2612, 21580, 66301, 84519, 94089, 61897, 77316, 126523, 3504, 55314, 54454, 128713, 16925, 88482, 10628, 57458, 4648, 41055, 85400, 88430, 127004, 123733, 47683, 64613, 29013, 89871, 65591, 69451, 108083, 33995, 71699, 36287, 59410, 24057, 43993, 103807, 41739, 73629, 87631, 125569]
[2024-12-02 20:19:06.965411] user = 49381 Cloud 293/568
[2024-12-02 20:19:06.983932] user = 49381 Local 293/568
[2024-12-02 20:19:07.009310] user = 49381 Local+ 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:08.673701] user = 49381 MPDA- 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6071428571428572
Training on augumented user 7104 0/50 current_auc = 0.6071428571428572
User 7104 AUC after training: 0.6071428571428572
User 7104 does not improve AUC. Reverting changes.
Training on augumented user 10947 1/50 current_auc = 0.6071428571428572
User 10947 AUC after training: 0.6071428571428572
User 10947 does not improve AUC. Reverting changes.
Training on augumented user 120521 2/50 current_auc = 0.6071428571428572
User 120521 AUC after training: 0.6071428571428572
User 120521 does not improve AUC. Reverting changes.
Training on augumented user 47972 3/50 current_auc = 0.6071428571428572
User 47972 AUC after training: 0.6071428571428572
User 47972 does not improve AUC. Reverting changes.
Training on augumented user 28348 4/50 current_auc = 0.6071428571428572
User 28348 AUC after training: 0.6071428571428572
User 28348 does not improve AUC. Reverting changes.
Training on augumented user 9700 5/50 current_auc = 0.6071428571428572
User 9700 AUC after training: 0.6071428571428572
User 9700 does not improve AUC. Reverting changes.
Training on augumented user 135225 6/50 current_auc = 0.6071428571428572
User 135225 AUC after training: 0.6071428571428572
User 135225 does not improve AUC. Reverting changes.
Training on augumented user 63805 7/50 current_auc = 0.6071428571428572
User 63805 AUC after training: 0.6071428571428572
User 63805 does not improve AUC. Reverting changes.
Training on augumented user 74668 8/50 current_auc = 0.6071428571428572
User 74668 AUC after training: 0.6071428571428572
User 74668 does not improve AUC. Reverting changes.
Training on augumented user 114645 9/50 current_auc = 0.6071428571428572
User 114645 AUC after training: 0.6071428571428572
User 114645 does not improve AUC. Reverting changes.
Training on augumented user 2612 10/50 current_auc = 0.6071428571428572
User 2612 AUC after training: 0.6071428571428572
User 2612 does not improve AUC. Reverting changes.
Training on augumented user 21580 11/50 current_auc = 0.6071428571428572
User 21580 AUC after training: 0.6071428571428572
User 21580 does not improve AUC. Reverting changes.
Training on augumented user 66301 12/50 current_auc = 0.6071428571428572
User 66301 AUC after training: 0.6071428571428572
User 66301 does not improve AUC. Reverting changes.
Training on augumented user 84519 13/50 current_auc = 0.6071428571428572
User 84519 AUC after training: 0.6071428571428572
User 84519 does not improve AUC. Reverting changes.
Training on augumented user 94089 14/50 current_auc = 0.6071428571428572
User 94089 AUC after training: 0.6071428571428572
User 94089 does not improve AUC. Reverting changes.
Training on augumented user 61897 15/50 current_auc = 0.6071428571428572
User 61897 AUC after training: 0.6071428571428572
User 61897 does not improve AUC. Reverting changes.
Training on augumented user 77316 16/50 current_auc = 0.6071428571428572
User 77316 AUC after training: 0.6071428571428572
User 77316 does not improve AUC. Reverting changes.
Training on augumented user 126523 17/50 current_auc = 0.6071428571428572
User 126523 AUC after training: 0.6071428571428572
User 126523 does not improve AUC. Reverting changes.
Training on augumented user 3504 18/50 current_auc = 0.6071428571428572
User 3504 AUC after training: 0.6071428571428572
User 3504 does not improve AUC. Reverting changes.
Training on augumented user 55314 19/50 current_auc = 0.6071428571428572
User 55314 AUC after training: 0.6071428571428572
User 55314 does not improve AUC. Reverting changes.
Training on augumented user 54454 20/50 current_auc = 0.6071428571428572
User 54454 AUC after training: 0.6071428571428572
User 54454 does not improve AUC. Reverting changes.
Training on augumented user 128713 21/50 current_auc = 0.6071428571428572
User 128713 AUC after training: 0.6071428571428572
User 128713 does not improve AUC. Reverting changes.
Training on augumented user 16925 22/50 current_auc = 0.6071428571428572
User 16925 AUC after training: 0.6071428571428572
User 16925 does not improve AUC. Reverting changes.
Training on augumented user 88482 23/50 current_auc = 0.6071428571428572
User 88482 AUC after training: 0.6071428571428572
User 88482 does not improve AUC. Reverting changes.
Training on augumented user 10628 24/50 current_auc = 0.6071428571428572
User 10628 AUC after training: 0.6071428571428572
User 10628 does not improve AUC. Reverting changes.
Training on augumented user 57458 25/50 current_auc = 0.6071428571428572
User 57458 AUC after training: 0.6071428571428572
User 57458 does not improve AUC. Reverting changes.
Training on augumented user 4648 26/50 current_auc = 0.6071428571428572
User 4648 AUC after training: 0.6071428571428572
User 4648 does not improve AUC. Reverting changes.
Training on augumented user 41055 27/50 current_auc = 0.6071428571428572
User 41055 AUC after training: 0.6071428571428572
User 41055 does not improve AUC. Reverting changes.
Training on augumented user 85400 28/50 current_auc = 0.6071428571428572
User 85400 AUC after training: 0.6071428571428572
User 85400 does not improve AUC. Reverting changes.
Training on augumented user 88430 29/50 current_auc = 0.6071428571428572
User 88430 AUC after training: 0.6071428571428572
User 88430 does not improve AUC. Reverting changes.
Training on augumented user 127004 30/50 current_auc = 0.6071428571428572
User 127004 AUC after training: 0.6071428571428572
User 127004 does not improve AUC. Reverting changes.
Training on augumented user 123733 31/50 current_auc = 0.6071428571428572
User 123733 AUC after training: 0.6071428571428572
User 123733 does not improve AUC. Reverting changes.
Training on augumented user 47683 32/50 current_auc = 0.6071428571428572
User 47683 AUC after training: 0.6071428571428572
User 47683 does not improve AUC. Reverting changes.
Training on augumented user 64613 33/50 current_auc = 0.6071428571428572
User 64613 AUC after training: 0.6071428571428572
User 64613 does not improve AUC. Reverting changes.
Training on augumented user 29013 34/50 current_auc = 0.6071428571428572
User 29013 AUC after training: 0.6071428571428572
User 29013 does not improve AUC. Reverting changes.
Training on augumented user 89871 35/50 current_auc = 0.6071428571428572
User 89871 AUC after training: 0.6071428571428572
User 89871 does not improve AUC. Reverting changes.
Training on augumented user 65591 36/50 current_auc = 0.6071428571428572
User 65591 AUC after training: 0.6071428571428572
User 65591 does not improve AUC. Reverting changes.
Training on augumented user 69451 37/50 current_auc = 0.6071428571428572
User 69451 AUC after training: 0.6071428571428572
User 69451 does not improve AUC. Reverting changes.
Training on augumented user 108083 38/50 current_auc = 0.6071428571428572
User 108083 AUC after training: 0.6071428571428572
User 108083 does not improve AUC. Reverting changes.
Training on augumented user 33995 39/50 current_auc = 0.6071428571428572
User 33995 AUC after training: 0.6071428571428572
User 33995 does not improve AUC. Reverting changes.
Training on augumented user 71699 40/50 current_auc = 0.6071428571428572
User 71699 AUC after training: 0.6071428571428572
User 71699 does not improve AUC. Reverting changes.
Training on augumented user 36287 41/50 current_auc = 0.6071428571428572
User 36287 AUC after training: 0.6071428571428572
User 36287 does not improve AUC. Reverting changes.
Training on augumented user 59410 42/50 current_auc = 0.6071428571428572
User 59410 AUC after training: 0.6071428571428572
User 59410 does not improve AUC. Reverting changes.
Training on augumented user 24057 43/50 current_auc = 0.6071428571428572
User 24057 AUC after training: 0.6071428571428572
User 24057 does not improve AUC. Reverting changes.
Training on augumented user 43993 44/50 current_auc = 0.6071428571428572
User 43993 AUC after training: 0.6071428571428572
User 43993 does not improve AUC. Reverting changes.
Training on augumented user 103807 45/50 current_auc = 0.6071428571428572
User 103807 AUC after training: 0.6071428571428572
User 103807 does not improve AUC. Reverting changes.
Training on augumented user 41739 46/50 current_auc = 0.6071428571428572
User 41739 AUC after training: 0.6071428571428572
User 41739 does not improve AUC. Reverting changes.
Training on augumented user 73629 47/50 current_auc = 0.6071428571428572
User 73629 AUC after training: 0.6071428571428572
User 73629 does not improve AUC. Reverting changes.
Training on augumented user 87631 48/50 current_auc = 0.6071428571428572
User 87631 AUC after training: 0.6071428571428572
User 87631 does not improve AUC. Reverting changes.
Training on augumented user 125569 49/50 current_auc = 0.6071428571428572
User 125569 AUC after training: 0.6071428571428572
User 125569 does not improve AUC. Reverting changes.
[2024-12-02 20:19:39.813825] start test user 49417 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:40.531235] start test user 49417 294/568 recall augumented users by random, augumented_users = [78778, 109487, 18876, 2005, 99797, 78726, 35484, 18303, 130254, 30528, 90305, 81176, 110787, 47418, 60863, 124016, 47969, 47029, 118231, 43540, 55213, 27517, 94854, 52378, 76889, 123375, 52566, 81913, 74969, 96047, 122540, 105325, 71285, 24713, 93071, 132285, 100556, 72400, 117867, 135080, 57998, 35046, 136703, 130282, 134505, 21585, 103785, 138085, 81859, 67633]
[2024-12-02 20:19:40.548707] user = 49417 Cloud 294/568
[2024-12-02 20:19:40.570415] user = 49417 Local 294/568
[2024-12-02 20:19:40.609464] user = 49417 Local+ 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:42.772908] user = 49417 MPDA- 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7812293456708526
Training on augumented user 78778 0/50 current_auc = 0.7812293456708526
User 78778 AUC after training: 0.7816920026437542
User 78778 improves AUC. Keeping the model.
Training on augumented user 109487 1/50 current_auc = 0.7816920026437542
User 109487 AUC after training: 0.7815598149372108
User 109487 does not improve AUC. Reverting changes.
Training on augumented user 18876 2/50 current_auc = 0.7816920026437542
User 18876 AUC after training: 0.7819563780568407
User 18876 improves AUC. Keeping the model.
Training on augumented user 2005 3/50 current_auc = 0.7819563780568407
User 2005 AUC after training: 0.7814937210839392
User 2005 does not improve AUC. Reverting changes.
Training on augumented user 99797 4/50 current_auc = 0.7819563780568407
User 99797 AUC after training: 0.7818241903502974
User 99797 does not improve AUC. Reverting changes.
Training on augumented user 78726 5/50 current_auc = 0.7819563780568407
User 78726 AUC after training: 0.7814937210839392
User 78726 does not improve AUC. Reverting changes.
Training on augumented user 35484 6/50 current_auc = 0.7819563780568407
User 35484 AUC after training: 0.7818902842035691
User 35484 does not improve AUC. Reverting changes.
Training on augumented user 18303 7/50 current_auc = 0.7819563780568407
User 18303 AUC after training: 0.7814937210839392
User 18303 does not improve AUC. Reverting changes.
Training on augumented user 130254 8/50 current_auc = 0.7819563780568407
User 130254 AUC after training: 0.782286847323199
User 130254 improves AUC. Keeping the model.
Training on augumented user 30528 9/50 current_auc = 0.782286847323199
User 30528 AUC after training: 0.7825512227362855
User 30528 improves AUC. Keeping the model.
Training on augumented user 90305 10/50 current_auc = 0.7825512227362855
User 90305 AUC after training: 0.7830799735624586
User 90305 improves AUC. Keeping the model.
Training on augumented user 81176 11/50 current_auc = 0.7830799735624586
User 81176 AUC after training: 0.7825512227362855
User 81176 does not improve AUC. Reverting changes.
Training on augumented user 110787 12/50 current_auc = 0.7830799735624586
User 110787 AUC after training: 0.783212161269002
User 110787 improves AUC. Keeping the model.
Training on augumented user 47418 13/50 current_auc = 0.783212161269002
User 47418 AUC after training: 0.7825512227362854
User 47418 does not improve AUC. Reverting changes.
Training on augumented user 60863 14/50 current_auc = 0.783212161269002
User 60863 AUC after training: 0.7833443489755452
User 60863 improves AUC. Keeping the model.
Training on augumented user 124016 15/50 current_auc = 0.7833443489755452
User 124016 AUC after training: 0.7822868473231989
User 124016 does not improve AUC. Reverting changes.
Training on augumented user 47969 16/50 current_auc = 0.7833443489755452
User 47969 AUC after training: 0.7832782551222736
User 47969 does not improve AUC. Reverting changes.
Training on augumented user 47029 17/50 current_auc = 0.7833443489755452
User 47029 AUC after training: 0.7834765366820886
User 47029 improves AUC. Keeping the model.
Training on augumented user 118231 18/50 current_auc = 0.7834765366820886
User 118231 AUC after training: 0.7830799735624587
User 118231 does not improve AUC. Reverting changes.
Training on augumented user 43540 19/50 current_auc = 0.7834765366820886
User 43540 AUC after training: 0.7829477858559154
User 43540 does not improve AUC. Reverting changes.
Training on augumented user 55213 20/50 current_auc = 0.7834765366820886
User 55213 AUC after training: 0.7830138797091871
User 55213 does not improve AUC. Reverting changes.
Training on augumented user 27517 21/50 current_auc = 0.7834765366820886
User 27517 AUC after training: 0.783212161269002
User 27517 does not improve AUC. Reverting changes.
Training on augumented user 94854 22/50 current_auc = 0.7834765366820886
User 94854 AUC after training: 0.7834765366820886
User 94854 does not improve AUC. Reverting changes.
Training on augumented user 52378 23/50 current_auc = 0.7834765366820886
User 52378 AUC after training: 0.7836087243886319
User 52378 improves AUC. Keeping the model.
Training on augumented user 76889 24/50 current_auc = 0.7836087243886319
User 76889 AUC after training: 0.7836748182419035
User 76889 improves AUC. Keeping the model.
Training on augumented user 123375 25/50 current_auc = 0.7836748182419035
User 123375 AUC after training: 0.7834765366820886
User 123375 does not improve AUC. Reverting changes.
Training on augumented user 52566 26/50 current_auc = 0.7836748182419035
User 52566 AUC after training: 0.7846662260409781
User 52566 improves AUC. Keeping the model.
Training on augumented user 81913 27/50 current_auc = 0.7846662260409781
User 81913 AUC after training: 0.7845340383344349
User 81913 does not improve AUC. Reverting changes.
Training on augumented user 74969 28/50 current_auc = 0.7846662260409781
User 74969 AUC after training: 0.7847984137475215
User 74969 improves AUC. Keeping the model.
Training on augumented user 96047 29/50 current_auc = 0.7847984137475215
User 96047 AUC after training: 0.7844018506278916
User 96047 does not improve AUC. Reverting changes.
Training on augumented user 122540 30/50 current_auc = 0.7847984137475215
User 122540 AUC after training: 0.7851949768671513
User 122540 improves AUC. Keeping the model.
Training on augumented user 105325 31/50 current_auc = 0.7851949768671513
User 105325 AUC after training: 0.7849966953073364
User 105325 does not improve AUC. Reverting changes.
Training on augumented user 71285 32/50 current_auc = 0.7851949768671513
User 71285 AUC after training: 0.7857237276933245
User 71285 improves AUC. Keeping the model.
Training on augumented user 24713 33/50 current_auc = 0.7857237276933245
User 24713 AUC after training: 0.7853271645736947
User 24713 does not improve AUC. Reverting changes.
Training on augumented user 93071 34/50 current_auc = 0.7857237276933245
User 93071 AUC after training: 0.7857237276933245
User 93071 does not improve AUC. Reverting changes.
Training on augumented user 132285 35/50 current_auc = 0.7857237276933245
User 132285 AUC after training: 0.7857237276933245
User 132285 does not improve AUC. Reverting changes.
Training on augumented user 100556 36/50 current_auc = 0.7857237276933245
User 100556 AUC after training: 0.7804362194315928
User 100556 does not improve AUC. Reverting changes.
Training on augumented user 72400 37/50 current_auc = 0.7857237276933245
User 72400 AUC after training: 0.7846001321877065
User 72400 does not improve AUC. Reverting changes.
Training on augumented user 117867 38/50 current_auc = 0.7857237276933245
User 117867 AUC after training: 0.7849306014540648
User 117867 does not improve AUC. Reverting changes.
Training on augumented user 135080 39/50 current_auc = 0.7857237276933245
User 135080 AUC after training: 0.7857237276933245
User 135080 does not improve AUC. Reverting changes.
Training on augumented user 57998 40/50 current_auc = 0.7857237276933245
User 57998 AUC after training: 0.7852610707204231
User 57998 does not improve AUC. Reverting changes.
Training on augumented user 35046 41/50 current_auc = 0.7857237276933245
User 35046 AUC after training: 0.7849966953073364
User 35046 does not improve AUC. Reverting changes.
Training on augumented user 136703 42/50 current_auc = 0.7857237276933245
User 136703 AUC after training: 0.7854593522802379
User 136703 does not improve AUC. Reverting changes.
Training on augumented user 130282 43/50 current_auc = 0.7857237276933245
User 130282 AUC after training: 0.7849306014540648
User 130282 does not improve AUC. Reverting changes.
Training on augumented user 134505 44/50 current_auc = 0.7857237276933245
User 134505 AUC after training: 0.7849306014540648
User 134505 does not improve AUC. Reverting changes.
Training on augumented user 21585 45/50 current_auc = 0.7857237276933245
User 21585 AUC after training: 0.7845340383344349
User 21585 does not improve AUC. Reverting changes.
Training on augumented user 103785 46/50 current_auc = 0.7857237276933245
User 103785 AUC after training: 0.7843357567746201
User 103785 does not improve AUC. Reverting changes.
Training on augumented user 138085 47/50 current_auc = 0.7857237276933245
User 138085 AUC after training: 0.7831460674157303
User 138085 does not improve AUC. Reverting changes.
Training on augumented user 81859 48/50 current_auc = 0.7857237276933245
User 81859 AUC after training: 0.7836087243886318
User 81859 does not improve AUC. Reverting changes.
Training on augumented user 67633 49/50 current_auc = 0.7857237276933245
User 67633 AUC after training: 0.7855915399867813
User 67633 does not improve AUC. Reverting changes.
[2024-12-02 20:20:14.437195] start test user 49443 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:15.070217] start test user 49443 295/568 recall augumented users by random, augumented_users = [13976, 49557, 9328, 82048, 84537, 119949, 138196, 134733, 105526, 4973, 47324, 115027, 26830, 76795, 120001, 29898, 75460, 19666, 84555, 129350, 27044, 125640, 79466, 64088, 48473, 30709, 15870, 134766, 110837, 114295, 101078, 36511, 41017, 68225, 80683, 54512, 129761, 127559, 132111, 121710, 53123, 19639, 116042, 82340, 24423, 121646, 31227, 52879, 114212, 22754]
[2024-12-02 20:20:15.084935] user = 49443 Cloud 295/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:15.091510] user = 49443 Local 295/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:15.108152] user = 49443 Local+ 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:17.094624] user = 49443 MPDA- 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 13976 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13976 AUC after training: 0.5
User 13976 does not improve AUC. Reverting changes.
Training on augumented user 49557 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49557 AUC after training: 0.5
User 49557 does not improve AUC. Reverting changes.
Training on augumented user 9328 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9328 AUC after training: 0.5
User 9328 does not improve AUC. Reverting changes.
Training on augumented user 82048 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82048 AUC after training: 0.5
User 82048 does not improve AUC. Reverting changes.
Training on augumented user 84537 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84537 AUC after training: 0.5
User 84537 does not improve AUC. Reverting changes.
Training on augumented user 119949 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119949 AUC after training: 0.5
User 119949 does not improve AUC. Reverting changes.
Training on augumented user 138196 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138196 AUC after training: 0.5
User 138196 does not improve AUC. Reverting changes.
Training on augumented user 134733 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134733 AUC after training: 0.5
User 134733 does not improve AUC. Reverting changes.
Training on augumented user 105526 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105526 AUC after training: 0.5
User 105526 does not improve AUC. Reverting changes.
Training on augumented user 4973 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4973 AUC after training: 0.5
User 4973 does not improve AUC. Reverting changes.
Training on augumented user 47324 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47324 AUC after training: 0.5
User 47324 does not improve AUC. Reverting changes.
Training on augumented user 115027 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115027 AUC after training: 0.5
User 115027 does not improve AUC. Reverting changes.
Training on augumented user 26830 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26830 AUC after training: 0.5
User 26830 does not improve AUC. Reverting changes.
Training on augumented user 76795 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76795 AUC after training: 0.5
User 76795 does not improve AUC. Reverting changes.
Training on augumented user 120001 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120001 AUC after training: 0.5
User 120001 does not improve AUC. Reverting changes.
Training on augumented user 29898 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29898 AUC after training: 0.5
User 29898 does not improve AUC. Reverting changes.
Training on augumented user 75460 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75460 AUC after training: 0.5
User 75460 does not improve AUC. Reverting changes.
Training on augumented user 19666 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19666 AUC after training: 0.5
User 19666 does not improve AUC. Reverting changes.
Training on augumented user 84555 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84555 AUC after training: 0.5
User 84555 does not improve AUC. Reverting changes.
Training on augumented user 129350 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129350 AUC after training: 0.5
User 129350 does not improve AUC. Reverting changes.
Training on augumented user 27044 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27044 AUC after training: 0.5
User 27044 does not improve AUC. Reverting changes.
Training on augumented user 125640 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125640 AUC after training: 0.5
User 125640 does not improve AUC. Reverting changes.
Training on augumented user 79466 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79466 AUC after training: 0.5
User 79466 does not improve AUC. Reverting changes.
Training on augumented user 64088 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64088 AUC after training: 0.5
User 64088 does not improve AUC. Reverting changes.
Training on augumented user 48473 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48473 AUC after training: 0.5
User 48473 does not improve AUC. Reverting changes.
Training on augumented user 30709 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30709 AUC after training: 0.5
User 30709 does not improve AUC. Reverting changes.
Training on augumented user 15870 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15870 AUC after training: 0.5
User 15870 does not improve AUC. Reverting changes.
Training on augumented user 134766 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134766 AUC after training: 0.5
User 134766 does not improve AUC. Reverting changes.
Training on augumented user 110837 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110837 AUC after training: 0.5
User 110837 does not improve AUC. Reverting changes.
Training on augumented user 114295 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114295 AUC after training: 0.5
User 114295 does not improve AUC. Reverting changes.
Training on augumented user 101078 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101078 AUC after training: 0.5
User 101078 does not improve AUC. Reverting changes.
Training on augumented user 36511 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36511 AUC after training: 0.5
User 36511 does not improve AUC. Reverting changes.
Training on augumented user 41017 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41017 AUC after training: 0.5
User 41017 does not improve AUC. Reverting changes.
Training on augumented user 68225 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68225 AUC after training: 0.5
User 68225 does not improve AUC. Reverting changes.
Training on augumented user 80683 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80683 AUC after training: 0.5
User 80683 does not improve AUC. Reverting changes.
Training on augumented user 54512 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54512 AUC after training: 0.5
User 54512 does not improve AUC. Reverting changes.
Training on augumented user 129761 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129761 AUC after training: 0.5
User 129761 does not improve AUC. Reverting changes.
Training on augumented user 127559 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127559 AUC after training: 0.5
User 127559 does not improve AUC. Reverting changes.
Training on augumented user 132111 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132111 AUC after training: 0.5
User 132111 does not improve AUC. Reverting changes.
Training on augumented user 121710 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121710 AUC after training: 0.5
User 121710 does not improve AUC. Reverting changes.
Training on augumented user 53123 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53123 AUC after training: 0.5
User 53123 does not improve AUC. Reverting changes.
Training on augumented user 19639 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19639 AUC after training: 0.5
User 19639 does not improve AUC. Reverting changes.
Training on augumented user 116042 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116042 AUC after training: 0.5
User 116042 does not improve AUC. Reverting changes.
Training on augumented user 82340 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82340 AUC after training: 0.5
User 82340 does not improve AUC. Reverting changes.
Training on augumented user 24423 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24423 AUC after training: 0.5
User 24423 does not improve AUC. Reverting changes.
Training on augumented user 121646 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121646 AUC after training: 0.5
User 121646 does not improve AUC. Reverting changes.
Training on augumented user 31227 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31227 AUC after training: 0.5
User 31227 does not improve AUC. Reverting changes.
Training on augumented user 52879 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52879 AUC after training: 0.5
User 52879 does not improve AUC. Reverting changes.
Training on augumented user 114212 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114212 AUC after training: 0.5
User 114212 does not improve AUC. Reverting changes.
Training on augumented user 22754 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22754 AUC after training: 0.5
User 22754 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:46.180253] start test user 49479 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:46.713271] start test user 49479 296/568 recall augumented users by random, augumented_users = [1448, 119370, 120419, 1633, 46314, 115217, 6614, 52805, 67326, 1605, 114840, 61803, 132754, 78150, 72877, 7081, 85855, 70633, 29153, 35824, 8226, 14993, 105650, 117809, 10629, 41693, 113502, 84991, 110715, 59495, 20782, 75783, 36907, 107304, 127927, 43176, 73231, 71411, 97331, 1260, 35428, 124087, 69748, 43288, 47219, 48727, 122703, 10674, 94899, 108890]
[2024-12-02 20:20:46.730921] user = 49479 Cloud 296/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:46.738779] user = 49479 Local 296/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:46.775924] user = 49479 Local+ 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:49.231082] user = 49479 MPDA- 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 1448 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1448 AUC after training: 0.5
User 1448 does not improve AUC. Reverting changes.
Training on augumented user 119370 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119370 AUC after training: 0.5
User 119370 does not improve AUC. Reverting changes.
Training on augumented user 120419 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120419 AUC after training: 0.5
User 120419 does not improve AUC. Reverting changes.
Training on augumented user 1633 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1633 AUC after training: 0.5
User 1633 does not improve AUC. Reverting changes.
Training on augumented user 46314 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46314 AUC after training: 0.5
User 46314 does not improve AUC. Reverting changes.
Training on augumented user 115217 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115217 AUC after training: 0.5
User 115217 does not improve AUC. Reverting changes.
Training on augumented user 6614 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6614 AUC after training: 0.5
User 6614 does not improve AUC. Reverting changes.
Training on augumented user 52805 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52805 AUC after training: 0.5
User 52805 does not improve AUC. Reverting changes.
Training on augumented user 67326 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67326 AUC after training: 0.5
User 67326 does not improve AUC. Reverting changes.
Training on augumented user 1605 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1605 AUC after training: 0.5
User 1605 does not improve AUC. Reverting changes.
Training on augumented user 114840 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114840 AUC after training: 0.5
User 114840 does not improve AUC. Reverting changes.
Training on augumented user 61803 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61803 AUC after training: 0.5
User 61803 does not improve AUC. Reverting changes.
Training on augumented user 132754 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132754 AUC after training: 0.5
User 132754 does not improve AUC. Reverting changes.
Training on augumented user 78150 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78150 AUC after training: 0.5
User 78150 does not improve AUC. Reverting changes.
Training on augumented user 72877 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72877 AUC after training: 0.5
User 72877 does not improve AUC. Reverting changes.
Training on augumented user 7081 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7081 AUC after training: 0.5
User 7081 does not improve AUC. Reverting changes.
Training on augumented user 85855 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85855 AUC after training: 0.5
User 85855 does not improve AUC. Reverting changes.
Training on augumented user 70633 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70633 AUC after training: 0.5
User 70633 does not improve AUC. Reverting changes.
Training on augumented user 29153 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29153 AUC after training: 0.5
User 29153 does not improve AUC. Reverting changes.
Training on augumented user 35824 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35824 AUC after training: 0.5
User 35824 does not improve AUC. Reverting changes.
Training on augumented user 8226 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8226 AUC after training: 0.5
User 8226 does not improve AUC. Reverting changes.
Training on augumented user 14993 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14993 AUC after training: 0.5
User 14993 does not improve AUC. Reverting changes.
Training on augumented user 105650 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105650 AUC after training: 0.5
User 105650 does not improve AUC. Reverting changes.
Training on augumented user 117809 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117809 AUC after training: 0.5
User 117809 does not improve AUC. Reverting changes.
Training on augumented user 10629 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10629 AUC after training: 0.5
User 10629 does not improve AUC. Reverting changes.
Training on augumented user 41693 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41693 AUC after training: 0.5
User 41693 does not improve AUC. Reverting changes.
Training on augumented user 113502 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113502 AUC after training: 0.5
User 113502 does not improve AUC. Reverting changes.
Training on augumented user 84991 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84991 AUC after training: 0.5
User 84991 does not improve AUC. Reverting changes.
Training on augumented user 110715 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110715 AUC after training: 0.5
User 110715 does not improve AUC. Reverting changes.
Training on augumented user 59495 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59495 AUC after training: 0.5
User 59495 does not improve AUC. Reverting changes.
Training on augumented user 20782 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20782 AUC after training: 0.5
User 20782 does not improve AUC. Reverting changes.
Training on augumented user 75783 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75783 AUC after training: 0.5
User 75783 does not improve AUC. Reverting changes.
Training on augumented user 36907 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36907 AUC after training: 0.5
User 36907 does not improve AUC. Reverting changes.
Training on augumented user 107304 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107304 AUC after training: 0.5
User 107304 does not improve AUC. Reverting changes.
Training on augumented user 127927 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127927 AUC after training: 0.5
User 127927 does not improve AUC. Reverting changes.
Training on augumented user 43176 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43176 AUC after training: 0.5
User 43176 does not improve AUC. Reverting changes.
Training on augumented user 73231 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73231 AUC after training: 0.5
User 73231 does not improve AUC. Reverting changes.
Training on augumented user 71411 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71411 AUC after training: 0.5
User 71411 does not improve AUC. Reverting changes.
Training on augumented user 97331 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97331 AUC after training: 0.5
User 97331 does not improve AUC. Reverting changes.
Training on augumented user 1260 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1260 AUC after training: 0.5
User 1260 does not improve AUC. Reverting changes.
Training on augumented user 35428 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35428 AUC after training: 0.5
User 35428 does not improve AUC. Reverting changes.
Training on augumented user 124087 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124087 AUC after training: 0.5
User 124087 does not improve AUC. Reverting changes.
Training on augumented user 69748 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69748 AUC after training: 0.5
User 69748 does not improve AUC. Reverting changes.
Training on augumented user 43288 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43288 AUC after training: 0.5
User 43288 does not improve AUC. Reverting changes.
Training on augumented user 47219 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47219 AUC after training: 0.5
User 47219 does not improve AUC. Reverting changes.
Training on augumented user 48727 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48727 AUC after training: 0.5
User 48727 does not improve AUC. Reverting changes.
Training on augumented user 122703 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122703 AUC after training: 0.5
User 122703 does not improve AUC. Reverting changes.
Training on augumented user 10674 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10674 AUC after training: 0.5
User 10674 does not improve AUC. Reverting changes.
Training on augumented user 94899 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94899 AUC after training: 0.5
User 94899 does not improve AUC. Reverting changes.
Training on augumented user 108890 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108890 AUC after training: 0.5
User 108890 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:13.537832] start test user 49486 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:14.327815] start test user 49486 297/568 recall augumented users by random, augumented_users = [34326, 51879, 26476, 53271, 65410, 226, 56559, 4798, 101844, 55953, 66002, 11555, 55550, 65623, 130798, 61854, 104807, 114463, 94788, 138482, 112014, 119676, 41670, 81505, 120958, 54859, 92386, 54151, 133538, 50001, 77962, 37738, 113553, 79516, 54856, 41054, 127921, 49550, 78432, 46296, 106506, 15471, 15985, 132141, 98253, 26110, 31665, 129053, 62684, 25222]
[2024-12-02 20:21:14.345459] user = 49486 Cloud 297/568
[2024-12-02 20:21:14.366822] user = 49486 Local 297/568
[2024-12-02 20:21:14.439243] user = 49486 Local+ 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:16.721789] user = 49486 MPDA- 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5358861267040897
Training on augumented user 34326 0/50 current_auc = 0.5358861267040897
User 34326 AUC after training: 0.5360866078588613
User 34326 improves AUC. Keeping the model.
Training on augumented user 51879 1/50 current_auc = 0.5360866078588613
User 51879 AUC after training: 0.5354851643945469
User 51879 does not improve AUC. Reverting changes.
Training on augumented user 26476 2/50 current_auc = 0.5360866078588613
User 26476 AUC after training: 0.5370890136327184
User 26476 improves AUC. Keeping the model.
Training on augumented user 53271 3/50 current_auc = 0.5370890136327184
User 53271 AUC after training: 0.5362870890136328
User 53271 does not improve AUC. Reverting changes.
Training on augumented user 65410 4/50 current_auc = 0.5370890136327184
User 65410 AUC after training: 0.535485164394547
User 65410 does not improve AUC. Reverting changes.
Training on augumented user 226 5/50 current_auc = 0.5370890136327184
User 226 AUC after training: 0.5364875701684042
User 226 does not improve AUC. Reverting changes.
Training on augumented user 56559 6/50 current_auc = 0.5370890136327184
User 56559 AUC after training: 0.5362870890136326
User 56559 does not improve AUC. Reverting changes.
Training on augumented user 4798 7/50 current_auc = 0.5370890136327184
User 4798 AUC after training: 0.5362870890136326
User 4798 does not improve AUC. Reverting changes.
Training on augumented user 101844 8/50 current_auc = 0.5370890136327184
User 101844 AUC after training: 0.5366880513231755
User 101844 does not improve AUC. Reverting changes.
Training on augumented user 55953 9/50 current_auc = 0.5370890136327184
User 55953 AUC after training: 0.5358861267040897
User 55953 does not improve AUC. Reverting changes.
Training on augumented user 66002 10/50 current_auc = 0.5370890136327184
User 66002 AUC after training: 0.5360866078588613
User 66002 does not improve AUC. Reverting changes.
Training on augumented user 11555 11/50 current_auc = 0.5370890136327184
User 11555 AUC after training: 0.5370890136327185
User 11555 improves AUC. Keeping the model.
Training on augumented user 55550 12/50 current_auc = 0.5370890136327185
User 55550 AUC after training: 0.5370890136327185
User 55550 does not improve AUC. Reverting changes.
Training on augumented user 65623 13/50 current_auc = 0.5370890136327185
User 65623 AUC after training: 0.5366880513231757
User 65623 does not improve AUC. Reverting changes.
Training on augumented user 130798 14/50 current_auc = 0.5370890136327185
User 130798 AUC after training: 0.535485164394547
User 130798 does not improve AUC. Reverting changes.
Training on augumented user 61854 15/50 current_auc = 0.5370890136327185
User 61854 AUC after training: 0.5364875701684042
User 61854 does not improve AUC. Reverting changes.
Training on augumented user 104807 16/50 current_auc = 0.5370890136327185
User 104807 AUC after training: 0.5366880513231755
User 104807 does not improve AUC. Reverting changes.
Training on augumented user 114463 17/50 current_auc = 0.5370890136327185
User 114463 AUC after training: 0.5366880513231757
User 114463 does not improve AUC. Reverting changes.
Training on augumented user 94788 18/50 current_auc = 0.5370890136327185
User 94788 AUC after training: 0.5368885324779471
User 94788 does not improve AUC. Reverting changes.
Training on augumented user 138482 19/50 current_auc = 0.5370890136327185
User 138482 AUC after training: 0.53728949478749
User 138482 improves AUC. Keeping the model.
Training on augumented user 112014 20/50 current_auc = 0.53728949478749
User 112014 AUC after training: 0.5366880513231757
User 112014 does not improve AUC. Reverting changes.
Training on augumented user 119676 21/50 current_auc = 0.53728949478749
User 119676 AUC after training: 0.5364875701684042
User 119676 does not improve AUC. Reverting changes.
Training on augumented user 41670 22/50 current_auc = 0.53728949478749
User 41670 AUC after training: 0.5362870890136326
User 41670 does not improve AUC. Reverting changes.
Training on augumented user 81505 23/50 current_auc = 0.53728949478749
User 81505 AUC after training: 0.5358861267040897
User 81505 does not improve AUC. Reverting changes.
Training on augumented user 120958 24/50 current_auc = 0.53728949478749
User 120958 AUC after training: 0.5368885324779471
User 120958 does not improve AUC. Reverting changes.
Training on augumented user 54859 25/50 current_auc = 0.53728949478749
User 54859 AUC after training: 0.5374899759422614
User 54859 improves AUC. Keeping the model.
Training on augumented user 92386 26/50 current_auc = 0.5374899759422614
User 92386 AUC after training: 0.5364875701684042
User 92386 does not improve AUC. Reverting changes.
Training on augumented user 54151 27/50 current_auc = 0.5374899759422614
User 54151 AUC after training: 0.5370890136327185
User 54151 does not improve AUC. Reverting changes.
Training on augumented user 133538 28/50 current_auc = 0.5374899759422614
User 133538 AUC after training: 0.5370890136327185
User 133538 does not improve AUC. Reverting changes.
Training on augumented user 50001 29/50 current_auc = 0.5374899759422614
User 50001 AUC after training: 0.5378909382518043
User 50001 improves AUC. Keeping the model.
Training on augumented user 77962 30/50 current_auc = 0.5378909382518043
User 77962 AUC after training: 0.5378909382518043
User 77962 does not improve AUC. Reverting changes.
Training on augumented user 37738 31/50 current_auc = 0.5378909382518043
User 37738 AUC after training: 0.5362870890136326
User 37738 does not improve AUC. Reverting changes.
Training on augumented user 113553 32/50 current_auc = 0.5378909382518043
User 113553 AUC after training: 0.5362870890136326
User 113553 does not improve AUC. Reverting changes.
Training on augumented user 79516 33/50 current_auc = 0.5378909382518043
User 79516 AUC after training: 0.5348837209302326
User 79516 does not improve AUC. Reverting changes.
Training on augumented user 54856 34/50 current_auc = 0.5378909382518043
User 54856 AUC after training: 0.5358861267040899
User 54856 does not improve AUC. Reverting changes.
Training on augumented user 41054 35/50 current_auc = 0.5378909382518043
User 41054 AUC after training: 0.5368885324779471
User 41054 does not improve AUC. Reverting changes.
Training on augumented user 127921 36/50 current_auc = 0.5378909382518043
User 127921 AUC after training: 0.5362870890136328
User 127921 does not improve AUC. Reverting changes.
Training on augumented user 49550 37/50 current_auc = 0.5378909382518043
User 49550 AUC after training: 0.5368885324779471
User 49550 does not improve AUC. Reverting changes.
Training on augumented user 78432 38/50 current_auc = 0.5378909382518043
User 78432 AUC after training: 0.5370890136327185
User 78432 does not improve AUC. Reverting changes.
Training on augumented user 46296 39/50 current_auc = 0.5378909382518043
User 46296 AUC after training: 0.53728949478749
User 46296 does not improve AUC. Reverting changes.
Training on augumented user 106506 40/50 current_auc = 0.5378909382518043
User 106506 AUC after training: 0.5374899759422616
User 106506 does not improve AUC. Reverting changes.
Training on augumented user 15471 41/50 current_auc = 0.5378909382518043
User 15471 AUC after training: 0.5366880513231757
User 15471 does not improve AUC. Reverting changes.
Training on augumented user 15985 42/50 current_auc = 0.5378909382518043
User 15985 AUC after training: 0.53728949478749
User 15985 does not improve AUC. Reverting changes.
Training on augumented user 132141 43/50 current_auc = 0.5378909382518043
User 132141 AUC after training: 0.53728949478749
User 132141 does not improve AUC. Reverting changes.
Training on augumented user 98253 44/50 current_auc = 0.5378909382518043
User 98253 AUC after training: 0.5370890136327185
User 98253 does not improve AUC. Reverting changes.
Training on augumented user 26110 45/50 current_auc = 0.5378909382518043
User 26110 AUC after training: 0.5366880513231755
User 26110 does not improve AUC. Reverting changes.
Training on augumented user 31665 46/50 current_auc = 0.5378909382518043
User 31665 AUC after training: 0.5370890136327185
User 31665 does not improve AUC. Reverting changes.
Training on augumented user 129053 47/50 current_auc = 0.5378909382518043
User 129053 AUC after training: 0.5366880513231757
User 129053 does not improve AUC. Reverting changes.
Training on augumented user 62684 48/50 current_auc = 0.5378909382518043
User 62684 AUC after training: 0.5366880513231755
User 62684 does not improve AUC. Reverting changes.
Training on augumented user 25222 49/50 current_auc = 0.5378909382518043
User 25222 AUC after training: 0.5370890136327185
User 25222 does not improve AUC. Reverting changes.
[2024-12-02 20:21:45.196739] start test user 49510 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:45.623273] start test user 49510 298/568 recall augumented users by random, augumented_users = [111994, 33334, 97714, 125509, 5790, 8484, 45062, 128673, 101610, 88822, 22997, 62997, 57549, 92973, 105048, 13533, 110850, 54623, 5460, 131124, 83219, 53864, 67929, 113855, 56995, 20127, 73932, 119332, 49657, 117073, 13872, 92286, 12417, 12668, 128961, 59031, 78013, 37419, 125504, 61131, 55184, 57443, 46519, 81690, 87095, 26457, 73752, 20272, 47998, 5513]
[2024-12-02 20:21:45.637354] user = 49510 Cloud 298/568
[2024-12-02 20:21:45.647052] user = 49510 Local 298/568
[2024-12-02 20:21:45.701675] user = 49510 Local+ 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:47.916955] user = 49510 MPDA- 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7142857142857143
Training on augumented user 111994 0/50 current_auc = 0.7142857142857143
User 111994 AUC after training: 0.7142857142857143
User 111994 does not improve AUC. Reverting changes.
Training on augumented user 33334 1/50 current_auc = 0.7142857142857143
User 33334 AUC after training: 0.7142857142857143
User 33334 does not improve AUC. Reverting changes.
Training on augumented user 97714 2/50 current_auc = 0.7142857142857143
User 97714 AUC after training: 0.7142857142857143
User 97714 does not improve AUC. Reverting changes.
Training on augumented user 125509 3/50 current_auc = 0.7142857142857143
User 125509 AUC after training: 0.7142857142857143
User 125509 does not improve AUC. Reverting changes.
Training on augumented user 5790 4/50 current_auc = 0.7142857142857143
User 5790 AUC after training: 0.7142857142857143
User 5790 does not improve AUC. Reverting changes.
Training on augumented user 8484 5/50 current_auc = 0.7142857142857143
User 8484 AUC after training: 0.7142857142857143
User 8484 does not improve AUC. Reverting changes.
Training on augumented user 45062 6/50 current_auc = 0.7142857142857143
User 45062 AUC after training: 0.7142857142857143
User 45062 does not improve AUC. Reverting changes.
Training on augumented user 128673 7/50 current_auc = 0.7142857142857143
User 128673 AUC after training: 0.7142857142857143
User 128673 does not improve AUC. Reverting changes.
Training on augumented user 101610 8/50 current_auc = 0.7142857142857143
User 101610 AUC after training: 0.7142857142857143
User 101610 does not improve AUC. Reverting changes.
Training on augumented user 88822 9/50 current_auc = 0.7142857142857143
User 88822 AUC after training: 0.7142857142857143
User 88822 does not improve AUC. Reverting changes.
Training on augumented user 22997 10/50 current_auc = 0.7142857142857143
User 22997 AUC after training: 0.7142857142857143
User 22997 does not improve AUC. Reverting changes.
Training on augumented user 62997 11/50 current_auc = 0.7142857142857143
User 62997 AUC after training: 0.7142857142857143
User 62997 does not improve AUC. Reverting changes.
Training on augumented user 57549 12/50 current_auc = 0.7142857142857143
User 57549 AUC after training: 0.7142857142857143
User 57549 does not improve AUC. Reverting changes.
Training on augumented user 92973 13/50 current_auc = 0.7142857142857143
User 92973 AUC after training: 0.7142857142857143
User 92973 does not improve AUC. Reverting changes.
Training on augumented user 105048 14/50 current_auc = 0.7142857142857143
User 105048 AUC after training: 0.7142857142857143
User 105048 does not improve AUC. Reverting changes.
Training on augumented user 13533 15/50 current_auc = 0.7142857142857143
User 13533 AUC after training: 0.7142857142857143
User 13533 does not improve AUC. Reverting changes.
Training on augumented user 110850 16/50 current_auc = 0.7142857142857143
User 110850 AUC after training: 0.7142857142857143
User 110850 does not improve AUC. Reverting changes.
Training on augumented user 54623 17/50 current_auc = 0.7142857142857143
User 54623 AUC after training: 0.7142857142857143
User 54623 does not improve AUC. Reverting changes.
Training on augumented user 5460 18/50 current_auc = 0.7142857142857143
User 5460 AUC after training: 0.7142857142857143
User 5460 does not improve AUC. Reverting changes.
Training on augumented user 131124 19/50 current_auc = 0.7142857142857143
User 131124 AUC after training: 0.7142857142857143
User 131124 does not improve AUC. Reverting changes.
Training on augumented user 83219 20/50 current_auc = 0.7142857142857143
User 83219 AUC after training: 0.7142857142857143
User 83219 does not improve AUC. Reverting changes.
Training on augumented user 53864 21/50 current_auc = 0.7142857142857143
User 53864 AUC after training: 0.7142857142857143
User 53864 does not improve AUC. Reverting changes.
Training on augumented user 67929 22/50 current_auc = 0.7142857142857143
User 67929 AUC after training: 0.7142857142857143
User 67929 does not improve AUC. Reverting changes.
Training on augumented user 113855 23/50 current_auc = 0.7142857142857143
User 113855 AUC after training: 0.7142857142857143
User 113855 does not improve AUC. Reverting changes.
Training on augumented user 56995 24/50 current_auc = 0.7142857142857143
User 56995 AUC after training: 0.7142857142857143
User 56995 does not improve AUC. Reverting changes.
Training on augumented user 20127 25/50 current_auc = 0.7142857142857143
User 20127 AUC after training: 0.7207792207792207
User 20127 improves AUC. Keeping the model.
Training on augumented user 73932 26/50 current_auc = 0.7207792207792207
User 73932 AUC after training: 0.7207792207792207
User 73932 does not improve AUC. Reverting changes.
Training on augumented user 119332 27/50 current_auc = 0.7207792207792207
User 119332 AUC after training: 0.7207792207792207
User 119332 does not improve AUC. Reverting changes.
Training on augumented user 49657 28/50 current_auc = 0.7207792207792207
User 49657 AUC after training: 0.7207792207792207
User 49657 does not improve AUC. Reverting changes.
Training on augumented user 117073 29/50 current_auc = 0.7207792207792207
User 117073 AUC after training: 0.7207792207792207
User 117073 does not improve AUC. Reverting changes.
Training on augumented user 13872 30/50 current_auc = 0.7207792207792207
User 13872 AUC after training: 0.7207792207792207
User 13872 does not improve AUC. Reverting changes.
Training on augumented user 92286 31/50 current_auc = 0.7207792207792207
User 92286 AUC after training: 0.7207792207792207
User 92286 does not improve AUC. Reverting changes.
Training on augumented user 12417 32/50 current_auc = 0.7207792207792207
User 12417 AUC after training: 0.7207792207792207
User 12417 does not improve AUC. Reverting changes.
Training on augumented user 12668 33/50 current_auc = 0.7207792207792207
User 12668 AUC after training: 0.7207792207792207
User 12668 does not improve AUC. Reverting changes.
Training on augumented user 128961 34/50 current_auc = 0.7207792207792207
User 128961 AUC after training: 0.7207792207792207
User 128961 does not improve AUC. Reverting changes.
Training on augumented user 59031 35/50 current_auc = 0.7207792207792207
User 59031 AUC after training: 0.7207792207792207
User 59031 does not improve AUC. Reverting changes.
Training on augumented user 78013 36/50 current_auc = 0.7207792207792207
User 78013 AUC after training: 0.7207792207792207
User 78013 does not improve AUC. Reverting changes.
Training on augumented user 37419 37/50 current_auc = 0.7207792207792207
User 37419 AUC after training: 0.7207792207792207
User 37419 does not improve AUC. Reverting changes.
Training on augumented user 125504 38/50 current_auc = 0.7207792207792207
User 125504 AUC after training: 0.7207792207792207
User 125504 does not improve AUC. Reverting changes.
Training on augumented user 61131 39/50 current_auc = 0.7207792207792207
User 61131 AUC after training: 0.7207792207792207
User 61131 does not improve AUC. Reverting changes.
Training on augumented user 55184 40/50 current_auc = 0.7207792207792207
User 55184 AUC after training: 0.7207792207792207
User 55184 does not improve AUC. Reverting changes.
Training on augumented user 57443 41/50 current_auc = 0.7207792207792207
User 57443 AUC after training: 0.7207792207792207
User 57443 does not improve AUC. Reverting changes.
Training on augumented user 46519 42/50 current_auc = 0.7207792207792207
User 46519 AUC after training: 0.7207792207792207
User 46519 does not improve AUC. Reverting changes.
Training on augumented user 81690 43/50 current_auc = 0.7207792207792207
User 81690 AUC after training: 0.7207792207792207
User 81690 does not improve AUC. Reverting changes.
Training on augumented user 87095 44/50 current_auc = 0.7207792207792207
User 87095 AUC after training: 0.7207792207792207
User 87095 does not improve AUC. Reverting changes.
Training on augumented user 26457 45/50 current_auc = 0.7207792207792207
User 26457 AUC after training: 0.7207792207792207
User 26457 does not improve AUC. Reverting changes.
Training on augumented user 73752 46/50 current_auc = 0.7207792207792207
User 73752 AUC after training: 0.7207792207792207
User 73752 does not improve AUC. Reverting changes.
Training on augumented user 20272 47/50 current_auc = 0.7207792207792207
User 20272 AUC after training: 0.7207792207792207
User 20272 does not improve AUC. Reverting changes.
Training on augumented user 47998 48/50 current_auc = 0.7207792207792207
User 47998 AUC after training: 0.7207792207792207
User 47998 does not improve AUC. Reverting changes.
Training on augumented user 5513 49/50 current_auc = 0.7207792207792207
User 5513 AUC after training: 0.7207792207792207
User 5513 does not improve AUC. Reverting changes.
[2024-12-02 20:22:14.941353] start test user 49520 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:15.563686] start test user 49520 299/568 recall augumented users by random, augumented_users = [93172, 19077, 102150, 24367, 81723, 103426, 78392, 7535, 76791, 101356, 57229, 131010, 116315, 88158, 56412, 118356, 2102, 108765, 81459, 75585, 10510, 62333, 119488, 106188, 48265, 54610, 78616, 24792, 61718, 130229, 109517, 73999, 74231, 31737, 51777, 106418, 29888, 133539, 83877, 128373, 99995, 87582, 61901, 120224, 131688, 58443, 2190, 21226, 4427, 74669]
[2024-12-02 20:22:15.584437] user = 49520 Cloud 299/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:15.591433] user = 49520 Local 299/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:15.607508] user = 49520 Local+ 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:17.952680] user = 49520 MPDA- 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 93172 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93172 AUC after training: 0.5
User 93172 does not improve AUC. Reverting changes.
Training on augumented user 19077 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19077 AUC after training: 0.5
User 19077 does not improve AUC. Reverting changes.
Training on augumented user 102150 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102150 AUC after training: 0.5
User 102150 does not improve AUC. Reverting changes.
Training on augumented user 24367 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24367 AUC after training: 0.5
User 24367 does not improve AUC. Reverting changes.
Training on augumented user 81723 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81723 AUC after training: 0.5
User 81723 does not improve AUC. Reverting changes.
Training on augumented user 103426 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103426 AUC after training: 0.5
User 103426 does not improve AUC. Reverting changes.
Training on augumented user 78392 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78392 AUC after training: 0.5
User 78392 does not improve AUC. Reverting changes.
Training on augumented user 7535 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7535 AUC after training: 0.5
User 7535 does not improve AUC. Reverting changes.
Training on augumented user 76791 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76791 AUC after training: 0.5
User 76791 does not improve AUC. Reverting changes.
Training on augumented user 101356 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101356 AUC after training: 0.5
User 101356 does not improve AUC. Reverting changes.
Training on augumented user 57229 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57229 AUC after training: 0.5
User 57229 does not improve AUC. Reverting changes.
Training on augumented user 131010 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131010 AUC after training: 0.5
User 131010 does not improve AUC. Reverting changes.
Training on augumented user 116315 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116315 AUC after training: 0.5
User 116315 does not improve AUC. Reverting changes.
Training on augumented user 88158 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88158 AUC after training: 0.5
User 88158 does not improve AUC. Reverting changes.
Training on augumented user 56412 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56412 AUC after training: 0.5
User 56412 does not improve AUC. Reverting changes.
Training on augumented user 118356 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118356 AUC after training: 0.5
User 118356 does not improve AUC. Reverting changes.
Training on augumented user 2102 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2102 AUC after training: 0.5
User 2102 does not improve AUC. Reverting changes.
Training on augumented user 108765 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108765 AUC after training: 0.5
User 108765 does not improve AUC. Reverting changes.
Training on augumented user 81459 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81459 AUC after training: 0.5
User 81459 does not improve AUC. Reverting changes.
Training on augumented user 75585 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75585 AUC after training: 0.5
User 75585 does not improve AUC. Reverting changes.
Training on augumented user 10510 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10510 AUC after training: 0.5
User 10510 does not improve AUC. Reverting changes.
Training on augumented user 62333 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62333 AUC after training: 0.5
User 62333 does not improve AUC. Reverting changes.
Training on augumented user 119488 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119488 AUC after training: 0.5
User 119488 does not improve AUC. Reverting changes.
Training on augumented user 106188 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106188 AUC after training: 0.5
User 106188 does not improve AUC. Reverting changes.
Training on augumented user 48265 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48265 AUC after training: 0.5
User 48265 does not improve AUC. Reverting changes.
Training on augumented user 54610 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54610 AUC after training: 0.5
User 54610 does not improve AUC. Reverting changes.
Training on augumented user 78616 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78616 AUC after training: 0.5
User 78616 does not improve AUC. Reverting changes.
Training on augumented user 24792 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24792 AUC after training: 0.5
User 24792 does not improve AUC. Reverting changes.
Training on augumented user 61718 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61718 AUC after training: 0.5
User 61718 does not improve AUC. Reverting changes.
Training on augumented user 130229 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130229 AUC after training: 0.5
User 130229 does not improve AUC. Reverting changes.
Training on augumented user 109517 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109517 AUC after training: 0.5
User 109517 does not improve AUC. Reverting changes.
Training on augumented user 73999 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73999 AUC after training: 0.5
User 73999 does not improve AUC. Reverting changes.
Training on augumented user 74231 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74231 AUC after training: 0.5
User 74231 does not improve AUC. Reverting changes.
Training on augumented user 31737 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31737 AUC after training: 0.5
User 31737 does not improve AUC. Reverting changes.
Training on augumented user 51777 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51777 AUC after training: 0.5
User 51777 does not improve AUC. Reverting changes.
Training on augumented user 106418 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106418 AUC after training: 0.5
User 106418 does not improve AUC. Reverting changes.
Training on augumented user 29888 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29888 AUC after training: 0.5
User 29888 does not improve AUC. Reverting changes.
Training on augumented user 133539 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133539 AUC after training: 0.5
User 133539 does not improve AUC. Reverting changes.
Training on augumented user 83877 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83877 AUC after training: 0.5
User 83877 does not improve AUC. Reverting changes.
Training on augumented user 128373 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128373 AUC after training: 0.5
User 128373 does not improve AUC. Reverting changes.
Training on augumented user 99995 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99995 AUC after training: 0.5
User 99995 does not improve AUC. Reverting changes.
Training on augumented user 87582 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87582 AUC after training: 0.5
User 87582 does not improve AUC. Reverting changes.
Training on augumented user 61901 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61901 AUC after training: 0.5
User 61901 does not improve AUC. Reverting changes.
Training on augumented user 120224 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120224 AUC after training: 0.5
User 120224 does not improve AUC. Reverting changes.
Training on augumented user 131688 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131688 AUC after training: 0.5
User 131688 does not improve AUC. Reverting changes.
Training on augumented user 58443 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58443 AUC after training: 0.5
User 58443 does not improve AUC. Reverting changes.
Training on augumented user 2190 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2190 AUC after training: 0.5
User 2190 does not improve AUC. Reverting changes.
Training on augumented user 21226 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21226 AUC after training: 0.5
User 21226 does not improve AUC. Reverting changes.
Training on augumented user 4427 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4427 AUC after training: 0.5
User 4427 does not improve AUC. Reverting changes.
Training on augumented user 74669 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74669 AUC after training: 0.5
User 74669 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:46.266695] start test user 49529 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:46.680578] start test user 49529 300/568 recall augumented users by random, augumented_users = [55779, 51969, 92426, 124781, 40474, 64784, 136123, 109276, 71849, 20976, 32122, 20703, 8604, 109253, 26007, 130527, 41921, 114453, 137918, 84353, 109539, 1014, 59892, 45012, 85477, 34816, 5590, 13215, 21796, 37982, 103555, 99413, 73399, 82136, 108419, 29826, 67257, 119511, 40481, 17345, 27807, 53624, 24451, 44754, 96903, 2881, 90834, 124483, 56497, 25835]
[2024-12-02 20:22:46.695172] user = 49529 Cloud 300/568
[2024-12-02 20:22:46.711990] user = 49529 Local 300/568
[2024-12-02 20:22:46.769437] user = 49529 Local+ 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:49.166282] user = 49529 MPDA- 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4275096525096525
Training on augumented user 55779 0/50 current_auc = 0.4275096525096525
User 55779 AUC after training: 0.42886100386100384
User 55779 improves AUC. Keeping the model.
Training on augumented user 51969 1/50 current_auc = 0.42886100386100384
User 51969 AUC after training: 0.4277027027027027
User 51969 does not improve AUC. Reverting changes.
Training on augumented user 92426 2/50 current_auc = 0.42886100386100384
User 92426 AUC after training: 0.42847490347490347
User 92426 does not improve AUC. Reverting changes.
Training on augumented user 124781 3/50 current_auc = 0.42886100386100384
User 124781 AUC after training: 0.42847490347490347
User 124781 does not improve AUC. Reverting changes.
Training on augumented user 40474 4/50 current_auc = 0.42886100386100384
User 40474 AUC after training: 0.4282818532818533
User 40474 does not improve AUC. Reverting changes.
Training on augumented user 64784 5/50 current_auc = 0.42886100386100384
User 64784 AUC after training: 0.4286679536679536
User 64784 does not improve AUC. Reverting changes.
Training on augumented user 136123 6/50 current_auc = 0.42886100386100384
User 136123 AUC after training: 0.42924710424710427
User 136123 improves AUC. Keeping the model.
Training on augumented user 109276 7/50 current_auc = 0.42924710424710427
User 109276 AUC after training: 0.4288610038610039
User 109276 does not improve AUC. Reverting changes.
Training on augumented user 71849 8/50 current_auc = 0.42924710424710427
User 71849 AUC after training: 0.42828185328185325
User 71849 does not improve AUC. Reverting changes.
Training on augumented user 20976 9/50 current_auc = 0.42924710424710427
User 20976 AUC after training: 0.42886100386100384
User 20976 does not improve AUC. Reverting changes.
Training on augumented user 32122 10/50 current_auc = 0.42924710424710427
User 32122 AUC after training: 0.42886100386100384
User 32122 does not improve AUC. Reverting changes.
Training on augumented user 20703 11/50 current_auc = 0.42924710424710427
User 20703 AUC after training: 0.430019305019305
User 20703 improves AUC. Keeping the model.
Training on augumented user 8604 12/50 current_auc = 0.430019305019305
User 8604 AUC after training: 0.42963320463320465
User 8604 does not improve AUC. Reverting changes.
Training on augumented user 109253 13/50 current_auc = 0.430019305019305
User 109253 AUC after training: 0.4282818532818533
User 109253 does not improve AUC. Reverting changes.
Training on augumented user 26007 14/50 current_auc = 0.430019305019305
User 26007 AUC after training: 0.42924710424710427
User 26007 does not improve AUC. Reverting changes.
Training on augumented user 130527 15/50 current_auc = 0.430019305019305
User 130527 AUC after training: 0.42963320463320465
User 130527 does not improve AUC. Reverting changes.
Training on augumented user 41921 16/50 current_auc = 0.430019305019305
User 41921 AUC after training: 0.42924710424710427
User 41921 does not improve AUC. Reverting changes.
Training on augumented user 114453 17/50 current_auc = 0.430019305019305
User 114453 AUC after training: 0.430019305019305
User 114453 does not improve AUC. Reverting changes.
Training on augumented user 137918 18/50 current_auc = 0.430019305019305
User 137918 AUC after training: 0.4284749034749035
User 137918 does not improve AUC. Reverting changes.
Training on augumented user 84353 19/50 current_auc = 0.430019305019305
User 84353 AUC after training: 0.42963320463320465
User 84353 does not improve AUC. Reverting changes.
Training on augumented user 109539 20/50 current_auc = 0.430019305019305
User 109539 AUC after training: 0.42982625482625486
User 109539 does not improve AUC. Reverting changes.
Training on augumented user 1014 21/50 current_auc = 0.430019305019305
User 1014 AUC after training: 0.42924710424710427
User 1014 does not improve AUC. Reverting changes.
Training on augumented user 59892 22/50 current_auc = 0.430019305019305
User 59892 AUC after training: 0.42963320463320465
User 59892 does not improve AUC. Reverting changes.
Training on augumented user 45012 23/50 current_auc = 0.430019305019305
User 45012 AUC after training: 0.42924710424710427
User 45012 does not improve AUC. Reverting changes.
Training on augumented user 85477 24/50 current_auc = 0.430019305019305
User 85477 AUC after training: 0.4290540540540541
User 85477 does not improve AUC. Reverting changes.
Training on augumented user 34816 25/50 current_auc = 0.430019305019305
User 34816 AUC after training: 0.42963320463320465
User 34816 does not improve AUC. Reverting changes.
Training on augumented user 5590 26/50 current_auc = 0.430019305019305
User 5590 AUC after training: 0.42963320463320465
User 5590 does not improve AUC. Reverting changes.
Training on augumented user 13215 27/50 current_auc = 0.430019305019305
User 13215 AUC after training: 0.4278957528957529
User 13215 does not improve AUC. Reverting changes.
Training on augumented user 21796 28/50 current_auc = 0.430019305019305
User 21796 AUC after training: 0.4298262548262549
User 21796 does not improve AUC. Reverting changes.
Training on augumented user 37982 29/50 current_auc = 0.430019305019305
User 37982 AUC after training: 0.42944015444015443
User 37982 does not improve AUC. Reverting changes.
Training on augumented user 103555 30/50 current_auc = 0.430019305019305
User 103555 AUC after training: 0.4294401544401545
User 103555 does not improve AUC. Reverting changes.
Training on augumented user 99413 31/50 current_auc = 0.430019305019305
User 99413 AUC after training: 0.4298262548262548
User 99413 does not improve AUC. Reverting changes.
Training on augumented user 73399 32/50 current_auc = 0.430019305019305
User 73399 AUC after training: 0.42963320463320465
User 73399 does not improve AUC. Reverting changes.
Training on augumented user 82136 33/50 current_auc = 0.430019305019305
User 82136 AUC after training: 0.42982625482625486
User 82136 does not improve AUC. Reverting changes.
Training on augumented user 108419 34/50 current_auc = 0.430019305019305
User 108419 AUC after training: 0.4290540540540541
User 108419 does not improve AUC. Reverting changes.
Training on augumented user 29826 35/50 current_auc = 0.430019305019305
User 29826 AUC after training: 0.4294401544401545
User 29826 does not improve AUC. Reverting changes.
Training on augumented user 67257 36/50 current_auc = 0.430019305019305
User 67257 AUC after training: 0.430019305019305
User 67257 does not improve AUC. Reverting changes.
Training on augumented user 119511 37/50 current_auc = 0.430019305019305
User 119511 AUC after training: 0.4296332046332047
User 119511 does not improve AUC. Reverting changes.
Training on augumented user 40481 38/50 current_auc = 0.430019305019305
User 40481 AUC after training: 0.42905405405405406
User 40481 does not improve AUC. Reverting changes.
Training on augumented user 17345 39/50 current_auc = 0.430019305019305
User 17345 AUC after training: 0.42963320463320465
User 17345 does not improve AUC. Reverting changes.
Training on augumented user 27807 40/50 current_auc = 0.430019305019305
User 27807 AUC after training: 0.42963320463320465
User 27807 does not improve AUC. Reverting changes.
Training on augumented user 53624 41/50 current_auc = 0.430019305019305
User 53624 AUC after training: 0.4296332046332047
User 53624 does not improve AUC. Reverting changes.
Training on augumented user 24451 42/50 current_auc = 0.430019305019305
User 24451 AUC after training: 0.4288610038610039
User 24451 does not improve AUC. Reverting changes.
Training on augumented user 44754 43/50 current_auc = 0.430019305019305
User 44754 AUC after training: 0.4292471042471043
User 44754 does not improve AUC. Reverting changes.
Training on augumented user 96903 44/50 current_auc = 0.430019305019305
User 96903 AUC after training: 0.42693050193050197
User 96903 does not improve AUC. Reverting changes.
Training on augumented user 2881 45/50 current_auc = 0.430019305019305
User 2881 AUC after training: 0.4284749034749035
User 2881 does not improve AUC. Reverting changes.
Training on augumented user 90834 46/50 current_auc = 0.430019305019305
User 90834 AUC after training: 0.4294401544401545
User 90834 does not improve AUC. Reverting changes.
Training on augumented user 124483 47/50 current_auc = 0.430019305019305
User 124483 AUC after training: 0.42944015444015443
User 124483 does not improve AUC. Reverting changes.
Training on augumented user 56497 48/50 current_auc = 0.430019305019305
User 56497 AUC after training: 0.42693050193050197
User 56497 does not improve AUC. Reverting changes.
Training on augumented user 25835 49/50 current_auc = 0.430019305019305
User 25835 AUC after training: 0.4288610038610039
User 25835 does not improve AUC. Reverting changes.
[2024-12-02 20:23:16.527716] start test user 49554 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:16.944051] start test user 49554 301/568 recall augumented users by random, augumented_users = [77871, 7185, 76807, 36120, 31293, 87509, 99797, 77699, 8106, 138111, 13084, 111163, 135227, 127396, 79254, 71642, 118279, 90330, 18093, 2653, 127000, 80974, 79512, 96333, 103412, 48355, 110521, 51289, 49632, 12418, 5306, 124367, 4486, 738, 3308, 83477, 39276, 4858, 109575, 68362, 78036, 133288, 27762, 107572, 107007, 54274, 113943, 106659, 79742, 107142]
[2024-12-02 20:23:16.962604] user = 49554 Cloud 301/568
[2024-12-02 20:23:17.012369] user = 49554 Local 301/568
[2024-12-02 20:23:17.426602] user = 49554 Local+ 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:19.448291] user = 49554 MPDA- 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6862059567841152
Training on augumented user 77871 0/50 current_auc = 0.6862059567841152
User 77871 AUC after training: 0.6863850496398676
User 77871 improves AUC. Keeping the model.
Training on augumented user 7185 1/50 current_auc = 0.6863850496398676
User 7185 AUC after training: 0.6862838232431381
User 7185 does not improve AUC. Reverting changes.
Training on augumented user 76807 2/50 current_auc = 0.6863850496398676
User 76807 AUC after training: 0.6863694763480632
User 76807 does not improve AUC. Reverting changes.
Training on augumented user 36120 3/50 current_auc = 0.6863850496398676
User 36120 AUC after training: 0.6867198754136655
User 36120 improves AUC. Keeping the model.
Training on augumented user 31293 4/50 current_auc = 0.6867198754136655
User 31293 AUC after training: 0.6873038738563364
User 31293 improves AUC. Keeping the model.
Training on augumented user 87509 5/50 current_auc = 0.6873038738563364
User 87509 AUC after training: 0.6874751800661865
User 87509 improves AUC. Keeping the model.
Training on augumented user 99797 6/50 current_auc = 0.6874751800661865
User 99797 AUC after training: 0.6876231263383297
User 99797 improves AUC. Keeping the model.
Training on augumented user 77699 7/50 current_auc = 0.6876231263383297
User 77699 AUC after training: 0.6872883005645318
User 77699 does not improve AUC. Reverting changes.
Training on augumented user 8106 8/50 current_auc = 0.6876231263383297
User 8106 AUC after training: 0.6875608331711116
User 8106 does not improve AUC. Reverting changes.
Training on augumented user 138111 9/50 current_auc = 0.6876231263383297
User 138111 AUC after training: 0.6874829667120887
User 138111 does not improve AUC. Reverting changes.
Training on augumented user 13084 10/50 current_auc = 0.6876231263383297
User 13084 AUC after training: 0.6880241386022969
User 13084 improves AUC. Keeping the model.
Training on augumented user 111163 11/50 current_auc = 0.6880241386022969
User 111163 AUC after training: 0.6876776328596459
User 111163 does not improve AUC. Reverting changes.
Training on augumented user 135227 12/50 current_auc = 0.6880241386022969
User 135227 AUC after training: 0.6875063266497956
User 135227 does not improve AUC. Reverting changes.
Training on augumented user 127396 13/50 current_auc = 0.6880241386022969
User 127396 AUC after training: 0.6880903250924664
User 127396 improves AUC. Keeping the model.
Training on augumented user 79254 14/50 current_auc = 0.6880903250924664
User 79254 AUC after training: 0.6883083511777301
User 79254 improves AUC. Keeping the model.
Training on augumented user 71642 15/50 current_auc = 0.6883083511777301
User 71642 AUC after training: 0.6884485108039713
User 71642 improves AUC. Keeping the model.
Training on augumented user 118279 16/50 current_auc = 0.6884485108039713
User 118279 AUC after training: 0.6879034455908117
User 118279 does not improve AUC. Reverting changes.
Training on augumented user 90330 17/50 current_auc = 0.6884485108039713
User 90330 AUC after training: 0.6885847771072611
User 90330 improves AUC. Keeping the model.
Training on augumented user 18093 18/50 current_auc = 0.6885847771072611
User 18093 AUC after training: 0.6886237103367724
User 18093 improves AUC. Keeping the model.
Training on augumented user 2653 19/50 current_auc = 0.6886237103367724
User 2653 AUC after training: 0.6881642982285381
User 2653 does not improve AUC. Reverting changes.
Training on augumented user 127000 20/50 current_auc = 0.6886237103367724
User 127000 AUC after training: 0.688693790149893
User 127000 improves AUC. Keeping the model.
Training on augumented user 80974 21/50 current_auc = 0.688693790149893
User 80974 AUC after training: 0.6887716566089157
User 80974 improves AUC. Keeping the model.
Training on augumented user 79512 22/50 current_auc = 0.6887716566089157
User 79512 AUC after training: 0.6887327233794043
User 79512 does not improve AUC. Reverting changes.
Training on augumented user 96333 23/50 current_auc = 0.6887716566089157
User 96333 AUC after training: 0.6882927778859257
User 96333 does not improve AUC. Reverting changes.
Training on augumented user 103412 24/50 current_auc = 0.6887716566089157
User 103412 AUC after training: 0.6884446174810201
User 103412 does not improve AUC. Reverting changes.
Training on augumented user 48355 25/50 current_auc = 0.6887716566089157
User 48355 AUC after training: 0.6876503795989877
User 48355 does not improve AUC. Reverting changes.
Training on augumented user 110521 26/50 current_auc = 0.6887716566089157
User 110521 AUC after training: 0.6884212575433133
User 110521 does not improve AUC. Reverting changes.
Training on augumented user 51289 27/50 current_auc = 0.6887716566089157
User 51289 AUC after training: 0.6885185906170916
User 51289 does not improve AUC. Reverting changes.
Training on augumented user 49632 28/50 current_auc = 0.6887716566089157
User 49632 AUC after training: 0.6887872299007203
User 49632 improves AUC. Keeping the model.
Training on augumented user 12418 29/50 current_auc = 0.6887872299007203
User 12418 AUC after training: 0.6887599766400624
User 12418 does not improve AUC. Reverting changes.
Training on augumented user 5306 30/50 current_auc = 0.6887872299007203
User 5306 AUC after training: 0.6886314969826747
User 5306 does not improve AUC. Reverting changes.
Training on augumented user 124367 31/50 current_auc = 0.6887872299007203
User 124367 AUC after training: 0.6885847771072611
User 124367 does not improve AUC. Reverting changes.
Training on augumented user 4486 32/50 current_auc = 0.6887872299007203
User 4486 AUC after training: 0.6878333657776912
User 4486 does not improve AUC. Reverting changes.
Training on augumented user 738 33/50 current_auc = 0.6887872299007203
User 738 AUC after training: 0.6884757640646291
User 738 does not improve AUC. Reverting changes.
Training on augumented user 3308 34/50 current_auc = 0.6887872299007203
User 3308 AUC after training: 0.6886548569203814
User 3308 does not improve AUC. Reverting changes.
Training on augumented user 83477 35/50 current_auc = 0.6887872299007203
User 83477 AUC after training: 0.6883122445006813
User 83477 does not improve AUC. Reverting changes.
Training on augumented user 39276 36/50 current_auc = 0.6887872299007203
User 39276 AUC after training: 0.6886276036597236
User 39276 does not improve AUC. Reverting changes.
Training on augumented user 4858 37/50 current_auc = 0.6887872299007203
User 4858 AUC after training: 0.6887989098695736
User 4858 improves AUC. Keeping the model.
Training on augumented user 109575 38/50 current_auc = 0.6887989098695736
User 109575 AUC after training: 0.6880007786645901
User 109575 does not improve AUC. Reverting changes.
Training on augumented user 68362 39/50 current_auc = 0.6887989098695736
User 68362 AUC after training: 0.6886860035039906
User 68362 does not improve AUC. Reverting changes.
Training on augumented user 78036 40/50 current_auc = 0.6887989098695736
User 78036 AUC after training: 0.6887794432548179
User 78036 does not improve AUC. Reverting changes.
Training on augumented user 133288 41/50 current_auc = 0.6887989098695736
User 133288 AUC after training: 0.6881642982285381
User 133288 does not improve AUC. Reverting changes.
Training on augumented user 27762 42/50 current_auc = 0.6887989098695736
User 27762 AUC after training: 0.6883706443449485
User 27762 does not improve AUC. Reverting changes.
Training on augumented user 107572 43/50 current_auc = 0.6887989098695736
User 107572 AUC after training: 0.6880747518006619
User 107572 does not improve AUC. Reverting changes.
Training on augumented user 107007 44/50 current_auc = 0.6887989098695736
User 107007 AUC after training: 0.6887288300564531
User 107007 does not improve AUC. Reverting changes.
Training on augumented user 54274 45/50 current_auc = 0.6887989098695736
User 54274 AUC after training: 0.68875218999416
User 54274 does not improve AUC. Reverting changes.
Training on augumented user 113943 46/50 current_auc = 0.6887989098695736
User 113943 AUC after training: 0.6886587502433327
User 113943 does not improve AUC. Reverting changes.
Training on augumented user 106659 47/50 current_auc = 0.6887989098695736
User 106659 AUC after training: 0.6883706443449484
User 106659 does not improve AUC. Reverting changes.
Training on augumented user 79742 48/50 current_auc = 0.6887989098695736
User 79742 AUC after training: 0.6886587502433327
User 79742 does not improve AUC. Reverting changes.
Training on augumented user 107142 49/50 current_auc = 0.6887989098695736
User 107142 AUC after training: 0.6888728830056454
User 107142 improves AUC. Keeping the model.
[2024-12-02 20:23:49.515858] start test user 49574 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:50.264947] start test user 49574 302/568 recall augumented users by random, augumented_users = [89646, 59957, 83753, 112452, 129381, 62849, 50078, 40445, 24173, 110929, 136948, 2094, 129951, 125476, 13472, 102335, 64144, 14984, 75575, 54866, 32652, 22341, 17980, 117904, 44380, 135762, 11756, 123013, 3726, 17448, 130494, 39037, 91469, 83122, 109275, 60499, 60472, 59409, 136319, 83801, 38243, 15462, 131385, 100347, 21366, 66830, 5760, 63761, 115745, 127843]
[2024-12-02 20:23:50.279886] user = 49574 Cloud 302/568
[2024-12-02 20:23:50.293463] user = 49574 Local 302/568
[2024-12-02 20:23:50.322000] user = 49574 Local+ 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:52.170686] user = 49574 MPDA- 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6739837398373983
Training on augumented user 89646 0/50 current_auc = 0.6739837398373983
User 89646 AUC after training: 0.6739837398373985
User 89646 improves AUC. Keeping the model.
Training on augumented user 59957 1/50 current_auc = 0.6739837398373985
User 59957 AUC after training: 0.6739837398373985
User 59957 does not improve AUC. Reverting changes.
Training on augumented user 83753 2/50 current_auc = 0.6739837398373985
User 83753 AUC after training: 0.6731707317073171
User 83753 does not improve AUC. Reverting changes.
Training on augumented user 112452 3/50 current_auc = 0.6739837398373985
User 112452 AUC after training: 0.6739837398373985
User 112452 does not improve AUC. Reverting changes.
Training on augumented user 129381 4/50 current_auc = 0.6739837398373985
User 129381 AUC after training: 0.6731707317073171
User 129381 does not improve AUC. Reverting changes.
Training on augumented user 62849 5/50 current_auc = 0.6739837398373985
User 62849 AUC after training: 0.6747967479674797
User 62849 improves AUC. Keeping the model.
Training on augumented user 50078 6/50 current_auc = 0.6747967479674797
User 50078 AUC after training: 0.6739837398373983
User 50078 does not improve AUC. Reverting changes.
Training on augumented user 40445 7/50 current_auc = 0.6747967479674797
User 40445 AUC after training: 0.6739837398373985
User 40445 does not improve AUC. Reverting changes.
Training on augumented user 24173 8/50 current_auc = 0.6747967479674797
User 24173 AUC after training: 0.6747967479674797
User 24173 does not improve AUC. Reverting changes.
Training on augumented user 110929 9/50 current_auc = 0.6747967479674797
User 110929 AUC after training: 0.6747967479674797
User 110929 does not improve AUC. Reverting changes.
Training on augumented user 136948 10/50 current_auc = 0.6747967479674797
User 136948 AUC after training: 0.6747967479674797
User 136948 does not improve AUC. Reverting changes.
Training on augumented user 2094 11/50 current_auc = 0.6747967479674797
