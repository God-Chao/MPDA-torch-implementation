[2024-12-02 17:37:35.970861] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 5, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 568
test users = ['69702' '69731' '69800' '69808' '69829' '69883' '69895' '69910' '69916'
 '69923' '69957' '69969' '70021' '70026' '70068' '70108' '70141' '70157'
 '70201' '70217' '70243' '70274' '70279' '70282' '70303' '70342' '70346'
 '70386' '70396' '70408' '70410' '70412' '70453' '70543' '70546' '70568'
 '70570' '70593' '70606' '70629' '70663' '70683' '70704' '70706' '70721'
 '70736' '70770' '70790' '70816' '70854' '70874' '70875' '70877' '70883'
 '70887' '70889' '70895' '70918' '70926' '70932' '70936' '70940' '70945'
 '71026' '71036' '71055' '71056' '71083' '71105' '71121' '71138' '71169'
 '71170' '71180' '71245' '71258' '71264' '71325' '71326' '71328' '71333'
 '71374' '71413' '71421' '71432' '71442' '71444' '71467' '71474' '71487'
 '71521' '71535' '71563' '71581' '71631' '71650' '71651' '71671' '71680'
 '71689' '71720' '71721' '71747' '71764' '71768' '71798' '71799' '71825'
 '71826' '71841' '71884' '71900' '71926' '71928' '71970' '71975' '71992'
 '72008' '72024' '72059' '72078' '72167' '72190' '72229' '72232' '72237'
 '72269' '72276' '72280' '72309' '72343' '72364' '72375' '72381' '72401'
 '72464' '72504' '72508' '72515' '72519' '72527' '72549' '72562' '72573'
 '72604' '72614' '72615' '72629' '72643' '72657' '72659' '72667' '72679'
 '72715' '72754' '72766' '72778' '72834' '72838' '72839' '72840' '72922'
 '72971' '72978' '72988' '73015' '73026' '73100' '73138' '73168' '73258'
 '73295' '73344' '73355' '73425' '73445' '73478' '73489' '73542' '73550'
 '73565' '73577' '73589' '73607' '73611' '73639' '73680' '73722' '73810'
 '73948' '73992' '74048' '74060' '74061' '74076' '74102' '74105' '74119'
 '74122' '74142' '74164' '74175' '74196' '74201' '74204' '74208' '74238'
 '74260' '74289' '74303' '74326' '74336' '74345' '74371' '74421' '74427'
 '74466' '74473' '74475' '74492' '74498' '74539' '74549' '74566' '74586'
 '74628' '74630' '74633' '74697' '74705' '74756' '74805' '74907' '74918'
 '74937' '74980' '75012' '75029' '75081' '75094' '75105' '75220' '75239'
 '75268' '75275' '75332' '75361' '75362' '75372' '75397' '75413' '75434'
 '75447' '75455' '75463' '75486' '75506' '75572' '75580' '75618' '75654'
 '75677' '75689' '75731' '75775' '75842' '75856' '75867' '75948' '75972'
 '75986' '76008' '76079' '76085' '76104' '76138' '76155' '76164' '76213'
 '76245' '76263' '76292' '76307' '76353' '76368' '76433' '76464' '76487'
 '76514' '76536' '76595' '76625' '76684' '76688' '76691' '76722' '76726'
 '76728' '76741' '76751' '76758' '76789' '76842' '76843' '76854' '76869'
 '76882' '76906' '76911' '76927' '76972' '76986' '77003' '77006' '77011'
 '77054' '77060' '77077' '77090' '77094' '77190' '77206' '77243' '77247'
 '77287' '77305' '77347' '77359' '77440' '77458' '77503' '77508' '77512'
 '77514' '77525' '77569' '77583' '77597' '77626' '77630' '77657' '77673'
 '77676' '77696' '77753' '77754' '77758' '77787' '77791' '77813' '77871'
 '77886' '77893' '77936' '77966' '77996' '77999' '78057' '78070' '78085'
 '78106' '78119' '78189' '78235' '78239' '78253' '78259' '78305' '78308'
 '78356' '78359' '78362' '78372' '78386' '78392' '78424' '78463' '78473'
 '78530' '78542' '78578' '78579' '78615' '78632' '78643' '78681' '78695'
 '78696' '78740' '78781' '78829' '78866' '78879' '78890' '78906' '78939'
 '78954' '78956' '78957' '79028' '79040' '79122' '79159' '79175' '79186'
 '79244' '79258' '79366' '79375' '79388' '79393' '79397' '79414' '79428'
 '79451' '79454' '79455' '79461' '79497' '79531' '79542' '79555' '79601'
 '79627' '79647' '79666' '79689' '79713' '79734' '79745' '79751' '79777'
 '79783' '79794' '79828' '79833' '79872' '79921' '79942' '79964' '79998'
 '80006' '80021' '80063' '80088' '80099' '80127' '80141' '80169' '80172'
 '80185' '80260' '80278' '80285' '80337' '80378' '80391' '80400' '80417'
 '80430' '80449' '80459' '80485' '80494' '80528' '80542' '80576' '80609'
 '80620' '80632' '80646' '80649' '80668' '80769' '80771' '80838' '80864'
 '80919' '80920' '80946' '80949' '80970' '80987' '80989' '81000' '81038'
 '81118' '81130' '81150' '81161' '81182' '81197' '81212' '81228' '81229'
 '81248' '81259' '81262' '81267' '81300' '81304' '81314' '81341' '81362'
 '81376' '81380' '81381' '81386' '81413' '81458' '81487' '81509' '81551'
 '81564' '81583' '81630' '81637' '81648' '81652' '81656' '81699' '81706'
 '81725' '81740' '81746' '81765' '81773' '81776' '81783' '81811' '81833'
 '81843' '81894' '81946' '81959' '81961' '81970' '82104' '82134' '82141'
 '82148' '82202' '82211' '82265' '82301' '82314' '82418' '82421' '82459'
 '82497' '82502' '82532' '82599' '82603' '82627' '82635' '82642' '82644'
 '82658' '82668' '82711' '82712' '82719' '82720' '82778' '82788' '82789'
 '82803']
[2024-12-02 17:37:36.010670] start test on test users
[2024-12-02 17:37:36.010718] start test user 69702 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:38.207327] start test user 69702 0/568 recall augumented users by random, augumented_users = [134001, 39620, 4859, 95827, 22601, 110459, 32314, 53031, 31485, 88718, 8362, 122857, 88201, 29298, 90046, 76554, 50443, 8462, 38171, 41596, 57343, 114353, 54649, 55863, 62717, 70653, 88197, 135611, 8484, 134515, 81956, 80107, 49562, 60439, 1920, 72021, 68300, 131304, 24797, 1014, 81469, 125677, 79912, 12073, 124576, 59005, 27066, 49417, 18837, 33182]
[2024-12-02 17:37:38.238680] user = 69702 Cloud 0/568
[2024-12-02 17:37:42.037298] user = 69702 Local 0/568
[2024-12-02 17:37:42.667083] user = 69702 Local+ 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:44.675476] user = 69702 MPDA- 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5700000000000001
Training on augumented user 134001 0/50 current_auc = 0.5700000000000001
User 134001 AUC after training: 0.5666666666666667
User 134001 does not improve AUC. Reverting changes.
Training on augumented user 39620 1/50 current_auc = 0.5700000000000001
User 39620 AUC after training: 0.5672222222222222
User 39620 does not improve AUC. Reverting changes.
Training on augumented user 4859 2/50 current_auc = 0.5700000000000001
User 4859 AUC after training: 0.5683333333333332
User 4859 does not improve AUC. Reverting changes.
Training on augumented user 95827 3/50 current_auc = 0.5700000000000001
User 95827 AUC after training: 0.5722222222222222
User 95827 improves AUC. Keeping the model.
Training on augumented user 22601 4/50 current_auc = 0.5722222222222222
User 22601 AUC after training: 0.5711111111111111
User 22601 does not improve AUC. Reverting changes.
Training on augumented user 110459 5/50 current_auc = 0.5722222222222222
User 110459 AUC after training: 0.5716666666666667
User 110459 does not improve AUC. Reverting changes.
Training on augumented user 32314 6/50 current_auc = 0.5722222222222222
User 32314 AUC after training: 0.5677777777777778
User 32314 does not improve AUC. Reverting changes.
Training on augumented user 53031 7/50 current_auc = 0.5722222222222222
User 53031 AUC after training: 0.5705555555555556
User 53031 does not improve AUC. Reverting changes.
Training on augumented user 31485 8/50 current_auc = 0.5722222222222222
User 31485 AUC after training: 0.5716666666666667
User 31485 does not improve AUC. Reverting changes.
Training on augumented user 88718 9/50 current_auc = 0.5722222222222222
User 88718 AUC after training: 0.57
User 88718 does not improve AUC. Reverting changes.
Training on augumented user 8362 10/50 current_auc = 0.5722222222222222
User 8362 AUC after training: 0.5716666666666667
User 8362 does not improve AUC. Reverting changes.
Training on augumented user 122857 11/50 current_auc = 0.5722222222222222
User 122857 AUC after training: 0.5716666666666667
User 122857 does not improve AUC. Reverting changes.
Training on augumented user 88201 12/50 current_auc = 0.5722222222222222
User 88201 AUC after training: 0.5711111111111111
User 88201 does not improve AUC. Reverting changes.
Training on augumented user 29298 13/50 current_auc = 0.5722222222222222
User 29298 AUC after training: 0.5716666666666667
User 29298 does not improve AUC. Reverting changes.
Training on augumented user 90046 14/50 current_auc = 0.5722222222222222
User 90046 AUC after training: 0.5716666666666667
User 90046 does not improve AUC. Reverting changes.
Training on augumented user 76554 15/50 current_auc = 0.5722222222222222
User 76554 AUC after training: 0.57
User 76554 does not improve AUC. Reverting changes.
Training on augumented user 50443 16/50 current_auc = 0.5722222222222222
User 50443 AUC after training: 0.5705555555555556
User 50443 does not improve AUC. Reverting changes.
Training on augumented user 8462 17/50 current_auc = 0.5722222222222222
User 8462 AUC after training: 0.57
User 8462 does not improve AUC. Reverting changes.
Training on augumented user 38171 18/50 current_auc = 0.5722222222222222
User 38171 AUC after training: 0.5677777777777777
User 38171 does not improve AUC. Reverting changes.
Training on augumented user 41596 19/50 current_auc = 0.5722222222222222
User 41596 AUC after training: 0.5711111111111111
User 41596 does not improve AUC. Reverting changes.
Training on augumented user 57343 20/50 current_auc = 0.5722222222222222
User 57343 AUC after training: 0.5716666666666667
User 57343 does not improve AUC. Reverting changes.
Training on augumented user 114353 21/50 current_auc = 0.5722222222222222
User 114353 AUC after training: 0.5711111111111111
User 114353 does not improve AUC. Reverting changes.
Training on augumented user 54649 22/50 current_auc = 0.5722222222222222
User 54649 AUC after training: 0.5722222222222222
User 54649 does not improve AUC. Reverting changes.
Training on augumented user 55863 23/50 current_auc = 0.5722222222222222
User 55863 AUC after training: 0.5694444444444444
User 55863 does not improve AUC. Reverting changes.
Training on augumented user 62717 24/50 current_auc = 0.5722222222222222
User 62717 AUC after training: 0.5711111111111111
User 62717 does not improve AUC. Reverting changes.
Training on augumented user 70653 25/50 current_auc = 0.5722222222222222
User 70653 AUC after training: 0.5711111111111111
User 70653 does not improve AUC. Reverting changes.
Training on augumented user 88197 26/50 current_auc = 0.5722222222222222
User 88197 AUC after training: 0.5700000000000001
User 88197 does not improve AUC. Reverting changes.
Training on augumented user 135611 27/50 current_auc = 0.5722222222222222
User 135611 AUC after training: 0.5694444444444444
User 135611 does not improve AUC. Reverting changes.
Training on augumented user 8484 28/50 current_auc = 0.5722222222222222
User 8484 AUC after training: 0.5694444444444444
User 8484 does not improve AUC. Reverting changes.
Training on augumented user 134515 29/50 current_auc = 0.5722222222222222
User 134515 AUC after training: 0.5711111111111111
User 134515 does not improve AUC. Reverting changes.
Training on augumented user 81956 30/50 current_auc = 0.5722222222222222
User 81956 AUC after training: 0.5694444444444444
User 81956 does not improve AUC. Reverting changes.
Training on augumented user 80107 31/50 current_auc = 0.5722222222222222
User 80107 AUC after training: 0.5694444444444444
User 80107 does not improve AUC. Reverting changes.
Training on augumented user 49562 32/50 current_auc = 0.5722222222222222
User 49562 AUC after training: 0.5711111111111111
User 49562 does not improve AUC. Reverting changes.
Training on augumented user 60439 33/50 current_auc = 0.5722222222222222
User 60439 AUC after training: 0.5688888888888889
User 60439 does not improve AUC. Reverting changes.
Training on augumented user 1920 34/50 current_auc = 0.5722222222222222
User 1920 AUC after training: 0.5716666666666667
User 1920 does not improve AUC. Reverting changes.
Training on augumented user 72021 35/50 current_auc = 0.5722222222222222
User 72021 AUC after training: 0.5716666666666667
User 72021 does not improve AUC. Reverting changes.
Training on augumented user 68300 36/50 current_auc = 0.5722222222222222
User 68300 AUC after training: 0.5722222222222223
User 68300 improves AUC. Keeping the model.
Training on augumented user 131304 37/50 current_auc = 0.5722222222222223
User 131304 AUC after training: 0.5700000000000001
User 131304 does not improve AUC. Reverting changes.
Training on augumented user 24797 38/50 current_auc = 0.5722222222222223
User 24797 AUC after training: 0.5722222222222222
User 24797 does not improve AUC. Reverting changes.
Training on augumented user 1014 39/50 current_auc = 0.5722222222222223
User 1014 AUC after training: 0.5694444444444444
User 1014 does not improve AUC. Reverting changes.
Training on augumented user 81469 40/50 current_auc = 0.5722222222222223
User 81469 AUC after training: 0.5705555555555556
User 81469 does not improve AUC. Reverting changes.
Training on augumented user 125677 41/50 current_auc = 0.5722222222222223
User 125677 AUC after training: 0.5716666666666668
User 125677 does not improve AUC. Reverting changes.
Training on augumented user 79912 42/50 current_auc = 0.5722222222222223
User 79912 AUC after training: 0.571111111111111
User 79912 does not improve AUC. Reverting changes.
Training on augumented user 12073 43/50 current_auc = 0.5722222222222223
User 12073 AUC after training: 0.5694444444444444
User 12073 does not improve AUC. Reverting changes.
Training on augumented user 124576 44/50 current_auc = 0.5722222222222223
User 124576 AUC after training: 0.5694444444444444
User 124576 does not improve AUC. Reverting changes.
Training on augumented user 59005 45/50 current_auc = 0.5722222222222223
User 59005 AUC after training: 0.5722222222222222
User 59005 does not improve AUC. Reverting changes.
Training on augumented user 27066 46/50 current_auc = 0.5722222222222223
User 27066 AUC after training: 0.5711111111111111
User 27066 does not improve AUC. Reverting changes.
Training on augumented user 49417 47/50 current_auc = 0.5722222222222223
User 49417 AUC after training: 0.5688888888888889
User 49417 does not improve AUC. Reverting changes.
Training on augumented user 18837 48/50 current_auc = 0.5722222222222223
User 18837 AUC after training: 0.5716666666666667
User 18837 does not improve AUC. Reverting changes.
Training on augumented user 33182 49/50 current_auc = 0.5722222222222223
User 33182 AUC after training: 0.5705555555555555
User 33182 does not improve AUC. Reverting changes.
[2024-12-02 17:38:08.099422] start test user 69731 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:08.546748] start test user 69731 1/568 recall augumented users by random, augumented_users = [103553, 123410, 85483, 108850, 72718, 98649, 21834, 9267, 74739, 121643, 116766, 85136, 34814, 16303, 101829, 41082, 91798, 128241, 80457, 5396, 50452, 10887, 51614, 79794, 118281, 133570, 30129, 25356, 13662, 9710, 77951, 127456, 13733, 135598, 8189, 96130, 8948, 85017, 120271, 29489, 10607, 53524, 82373, 128880, 35089, 66249, 25959, 55276, 76947, 138359]
[2024-12-02 17:38:08.562739] user = 69731 Cloud 1/568
[2024-12-02 17:38:08.576988] user = 69731 Local 1/568
[2024-12-02 17:38:08.645619] user = 69731 Local+ 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:11.251892] user = 69731 MPDA- 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6782027929568913
Training on augumented user 103553 0/50 current_auc = 0.6782027929568913
User 103553 AUC after training: 0.6769884638737097
User 103553 does not improve AUC. Reverting changes.
Training on augumented user 123410 1/50 current_auc = 0.6782027929568913
User 123410 AUC after training: 0.6769884638737098
User 123410 does not improve AUC. Reverting changes.
Training on augumented user 85483 2/50 current_auc = 0.6782027929568913
User 85483 AUC after training: 0.6782027929568913
User 85483 does not improve AUC. Reverting changes.
Training on augumented user 108850 3/50 current_auc = 0.6782027929568913
User 108850 AUC after training: 0.6775956284153005
User 108850 does not improve AUC. Reverting changes.
Training on augumented user 72718 4/50 current_auc = 0.6782027929568913
User 72718 AUC after training: 0.6788099574984822
User 72718 improves AUC. Keeping the model.
Training on augumented user 98649 5/50 current_auc = 0.6788099574984822
User 98649 AUC after training: 0.6782027929568913
User 98649 does not improve AUC. Reverting changes.
Training on augumented user 21834 6/50 current_auc = 0.6788099574984822
User 21834 AUC after training: 0.6775956284153005
User 21834 does not improve AUC. Reverting changes.
Training on augumented user 9267 7/50 current_auc = 0.6788099574984822
User 9267 AUC after training: 0.6727383120825743
User 9267 does not improve AUC. Reverting changes.
Training on augumented user 74739 8/50 current_auc = 0.6788099574984822
User 74739 AUC after training: 0.6782027929568913
User 74739 does not improve AUC. Reverting changes.
Training on augumented user 121643 9/50 current_auc = 0.6788099574984822
User 121643 AUC after training: 0.6775956284153006
User 121643 does not improve AUC. Reverting changes.
Training on augumented user 116766 10/50 current_auc = 0.6788099574984822
User 116766 AUC after training: 0.678809957498482
User 116766 does not improve AUC. Reverting changes.
Training on augumented user 85136 11/50 current_auc = 0.6788099574984822
User 85136 AUC after training: 0.6769884638737097
User 85136 does not improve AUC. Reverting changes.
Training on augumented user 34814 12/50 current_auc = 0.6788099574984822
User 34814 AUC after training: 0.6782027929568913
User 34814 does not improve AUC. Reverting changes.
Training on augumented user 16303 13/50 current_auc = 0.6788099574984822
User 16303 AUC after training: 0.6794171220400729
User 16303 improves AUC. Keeping the model.
Training on augumented user 101829 14/50 current_auc = 0.6794171220400729
User 101829 AUC after training: 0.6775956284153005
User 101829 does not improve AUC. Reverting changes.
Training on augumented user 41082 15/50 current_auc = 0.6794171220400729
User 41082 AUC after training: 0.6757741347905282
User 41082 does not improve AUC. Reverting changes.
Training on augumented user 91798 16/50 current_auc = 0.6794171220400729
User 91798 AUC after training: 0.680327868852459
User 91798 improves AUC. Keeping the model.
Training on augumented user 128241 17/50 current_auc = 0.680327868852459
User 128241 AUC after training: 0.680327868852459
User 128241 does not improve AUC. Reverting changes.
Training on augumented user 80457 18/50 current_auc = 0.680327868852459
User 80457 AUC after training: 0.680327868852459
User 80457 does not improve AUC. Reverting changes.
Training on augumented user 5396 19/50 current_auc = 0.680327868852459
User 5396 AUC after training: 0.6778992106860959
User 5396 does not improve AUC. Reverting changes.
Training on augumented user 50452 20/50 current_auc = 0.680327868852459
User 50452 AUC after training: 0.680327868852459
User 50452 does not improve AUC. Reverting changes.
Training on augumented user 10887 21/50 current_auc = 0.680327868852459
User 10887 AUC after training: 0.6806314511232544
User 10887 improves AUC. Keeping the model.
Training on augumented user 51614 22/50 current_auc = 0.6806314511232544
User 51614 AUC after training: 0.6788099574984822
User 51614 does not improve AUC. Reverting changes.
Training on augumented user 79794 23/50 current_auc = 0.6806314511232544
User 79794 AUC after training: 0.6794171220400729
User 79794 does not improve AUC. Reverting changes.
Training on augumented user 118281 24/50 current_auc = 0.6806314511232544
User 118281 AUC after training: 0.681845780206436
User 118281 improves AUC. Keeping the model.
Training on augumented user 133570 25/50 current_auc = 0.681845780206436
User 133570 AUC after training: 0.6812386156648452
User 133570 does not improve AUC. Reverting changes.
Training on augumented user 30129 26/50 current_auc = 0.681845780206436
User 30129 AUC after training: 0.6812386156648451
User 30129 does not improve AUC. Reverting changes.
Training on augumented user 25356 27/50 current_auc = 0.681845780206436
User 25356 AUC after training: 0.6824529447480268
User 25356 improves AUC. Keeping the model.
Training on augumented user 13662 28/50 current_auc = 0.6824529447480268
User 13662 AUC after training: 0.6806314511232544
User 13662 does not improve AUC. Reverting changes.
Training on augumented user 9710 29/50 current_auc = 0.6824529447480268
User 9710 AUC after training: 0.6806314511232544
User 9710 does not improve AUC. Reverting changes.
Training on augumented user 77951 30/50 current_auc = 0.6824529447480268
User 77951 AUC after training: 0.684274438372799
User 77951 improves AUC. Keeping the model.
Training on augumented user 127456 31/50 current_auc = 0.684274438372799
User 127456 AUC after training: 0.6848816029143897
User 127456 improves AUC. Keeping the model.
Training on augumented user 13733 32/50 current_auc = 0.6848816029143897
User 13733 AUC after training: 0.6848816029143898
User 13733 improves AUC. Keeping the model.
Training on augumented user 135598 33/50 current_auc = 0.6848816029143898
User 135598 AUC after training: 0.6873102610807529
User 135598 improves AUC. Keeping the model.
Training on augumented user 8189 34/50 current_auc = 0.6873102610807529
User 8189 AUC after training: 0.6854887674559805
User 8189 does not improve AUC. Reverting changes.
Training on augumented user 96130 35/50 current_auc = 0.6873102610807529
User 96130 AUC after training: 0.6867030965391621
User 96130 does not improve AUC. Reverting changes.
Training on augumented user 8948 36/50 current_auc = 0.6873102610807529
User 8948 AUC after training: 0.6836672738312083
User 8948 does not improve AUC. Reverting changes.
Training on augumented user 85017 37/50 current_auc = 0.6873102610807529
User 85017 AUC after training: 0.6836672738312083
User 85017 does not improve AUC. Reverting changes.
Training on augumented user 120271 38/50 current_auc = 0.6873102610807529
User 120271 AUC after training: 0.6824529447480268
User 120271 does not improve AUC. Reverting changes.
Training on augumented user 29489 39/50 current_auc = 0.6873102610807529
User 29489 AUC after training: 0.6888281724347297
User 29489 improves AUC. Keeping the model.
Training on augumented user 10607 40/50 current_auc = 0.6888281724347297
User 10607 AUC after training: 0.6870066788099575
User 10607 does not improve AUC. Reverting changes.
Training on augumented user 53524 41/50 current_auc = 0.6888281724347297
User 53524 AUC after training: 0.6842744383727991
User 53524 does not improve AUC. Reverting changes.
Training on augumented user 82373 42/50 current_auc = 0.6888281724347297
User 82373 AUC after training: 0.6894353369763205
User 82373 improves AUC. Keeping the model.
Training on augumented user 128880 43/50 current_auc = 0.6894353369763205
User 128880 AUC after training: 0.6894353369763206
User 128880 improves AUC. Keeping the model.
Training on augumented user 35089 44/50 current_auc = 0.6894353369763206
User 35089 AUC after training: 0.6894353369763205
User 35089 does not improve AUC. Reverting changes.
Training on augumented user 66249 45/50 current_auc = 0.6894353369763206
User 66249 AUC after training: 0.6894353369763206
User 66249 does not improve AUC. Reverting changes.
Training on augumented user 25959 46/50 current_auc = 0.6894353369763206
User 25959 AUC after training: 0.685792349726776
User 25959 does not improve AUC. Reverting changes.
Training on augumented user 55276 47/50 current_auc = 0.6894353369763206
User 55276 AUC after training: 0.6888281724347297
User 55276 does not improve AUC. Reverting changes.
Training on augumented user 76947 48/50 current_auc = 0.6894353369763206
User 76947 AUC after training: 0.6876138433515482
User 76947 does not improve AUC. Reverting changes.
Training on augumented user 138359 49/50 current_auc = 0.6894353369763206
User 138359 AUC after training: 0.6888281724347298
User 138359 does not improve AUC. Reverting changes.
[2024-12-02 17:38:43.294942] start test user 69800 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:43.687701] start test user 69800 2/568 recall augumented users by random, augumented_users = [595, 48057, 23183, 3073, 7893, 137888, 72843, 2659, 67700, 20828, 72187, 54118, 42481, 126427, 34698, 120084, 4433, 9633, 91030, 105751, 97325, 125861, 21192, 12581, 4682, 87842, 18661, 106814, 30269, 39910, 98353, 134262, 122423, 3250, 83752, 136865, 41156, 91343, 61432, 55135, 77114, 26617, 74602, 109812, 50775, 50592, 110851, 107749, 50251, 136153]
[2024-12-02 17:38:43.701692] user = 69800 Cloud 2/568
[2024-12-02 17:38:43.711215] user = 69800 Local 2/568
[2024-12-02 17:38:43.729066] user = 69800 Local+ 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:46.207415] user = 69800 MPDA- 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 595 0/50 current_auc = 1.0
User 595 AUC after training: 1.0
User 595 does not improve AUC. Reverting changes.
Training on augumented user 48057 1/50 current_auc = 1.0
User 48057 AUC after training: 1.0
User 48057 does not improve AUC. Reverting changes.
Training on augumented user 23183 2/50 current_auc = 1.0
User 23183 AUC after training: 1.0
User 23183 does not improve AUC. Reverting changes.
Training on augumented user 3073 3/50 current_auc = 1.0
User 3073 AUC after training: 1.0
User 3073 does not improve AUC. Reverting changes.
Training on augumented user 7893 4/50 current_auc = 1.0
User 7893 AUC after training: 1.0
User 7893 does not improve AUC. Reverting changes.
Training on augumented user 137888 5/50 current_auc = 1.0
User 137888 AUC after training: 1.0
User 137888 does not improve AUC. Reverting changes.
Training on augumented user 72843 6/50 current_auc = 1.0
User 72843 AUC after training: 1.0
User 72843 does not improve AUC. Reverting changes.
Training on augumented user 2659 7/50 current_auc = 1.0
User 2659 AUC after training: 1.0
User 2659 does not improve AUC. Reverting changes.
Training on augumented user 67700 8/50 current_auc = 1.0
User 67700 AUC after training: 1.0
User 67700 does not improve AUC. Reverting changes.
Training on augumented user 20828 9/50 current_auc = 1.0
User 20828 AUC after training: 1.0
User 20828 does not improve AUC. Reverting changes.
Training on augumented user 72187 10/50 current_auc = 1.0
User 72187 AUC after training: 1.0
User 72187 does not improve AUC. Reverting changes.
Training on augumented user 54118 11/50 current_auc = 1.0
User 54118 AUC after training: 1.0
User 54118 does not improve AUC. Reverting changes.
Training on augumented user 42481 12/50 current_auc = 1.0
User 42481 AUC after training: 1.0
User 42481 does not improve AUC. Reverting changes.
Training on augumented user 126427 13/50 current_auc = 1.0
User 126427 AUC after training: 1.0
User 126427 does not improve AUC. Reverting changes.
Training on augumented user 34698 14/50 current_auc = 1.0
User 34698 AUC after training: 1.0
User 34698 does not improve AUC. Reverting changes.
Training on augumented user 120084 15/50 current_auc = 1.0
User 120084 AUC after training: 1.0
User 120084 does not improve AUC. Reverting changes.
Training on augumented user 4433 16/50 current_auc = 1.0
User 4433 AUC after training: 1.0
User 4433 does not improve AUC. Reverting changes.
Training on augumented user 9633 17/50 current_auc = 1.0
User 9633 AUC after training: 1.0
User 9633 does not improve AUC. Reverting changes.
Training on augumented user 91030 18/50 current_auc = 1.0
User 91030 AUC after training: 1.0
User 91030 does not improve AUC. Reverting changes.
Training on augumented user 105751 19/50 current_auc = 1.0
User 105751 AUC after training: 1.0
User 105751 does not improve AUC. Reverting changes.
Training on augumented user 97325 20/50 current_auc = 1.0
User 97325 AUC after training: 1.0
User 97325 does not improve AUC. Reverting changes.
Training on augumented user 125861 21/50 current_auc = 1.0
User 125861 AUC after training: 1.0
User 125861 does not improve AUC. Reverting changes.
Training on augumented user 21192 22/50 current_auc = 1.0
User 21192 AUC after training: 1.0
User 21192 does not improve AUC. Reverting changes.
Training on augumented user 12581 23/50 current_auc = 1.0
User 12581 AUC after training: 1.0
User 12581 does not improve AUC. Reverting changes.
Training on augumented user 4682 24/50 current_auc = 1.0
User 4682 AUC after training: 1.0
User 4682 does not improve AUC. Reverting changes.
Training on augumented user 87842 25/50 current_auc = 1.0
User 87842 AUC after training: 1.0
User 87842 does not improve AUC. Reverting changes.
Training on augumented user 18661 26/50 current_auc = 1.0
User 18661 AUC after training: 1.0
User 18661 does not improve AUC. Reverting changes.
Training on augumented user 106814 27/50 current_auc = 1.0
User 106814 AUC after training: 1.0
User 106814 does not improve AUC. Reverting changes.
Training on augumented user 30269 28/50 current_auc = 1.0
User 30269 AUC after training: 1.0
User 30269 does not improve AUC. Reverting changes.
Training on augumented user 39910 29/50 current_auc = 1.0
User 39910 AUC after training: 1.0
User 39910 does not improve AUC. Reverting changes.
Training on augumented user 98353 30/50 current_auc = 1.0
User 98353 AUC after training: 1.0
User 98353 does not improve AUC. Reverting changes.
Training on augumented user 134262 31/50 current_auc = 1.0
User 134262 AUC after training: 1.0
User 134262 does not improve AUC. Reverting changes.
Training on augumented user 122423 32/50 current_auc = 1.0
User 122423 AUC after training: 1.0
User 122423 does not improve AUC. Reverting changes.
Training on augumented user 3250 33/50 current_auc = 1.0
User 3250 AUC after training: 1.0
User 3250 does not improve AUC. Reverting changes.
Training on augumented user 83752 34/50 current_auc = 1.0
User 83752 AUC after training: 1.0
User 83752 does not improve AUC. Reverting changes.
Training on augumented user 136865 35/50 current_auc = 1.0
User 136865 AUC after training: 1.0
User 136865 does not improve AUC. Reverting changes.
Training on augumented user 41156 36/50 current_auc = 1.0
User 41156 AUC after training: 1.0
User 41156 does not improve AUC. Reverting changes.
Training on augumented user 91343 37/50 current_auc = 1.0
User 91343 AUC after training: 1.0
User 91343 does not improve AUC. Reverting changes.
Training on augumented user 61432 38/50 current_auc = 1.0
User 61432 AUC after training: 1.0
User 61432 does not improve AUC. Reverting changes.
Training on augumented user 55135 39/50 current_auc = 1.0
User 55135 AUC after training: 1.0
User 55135 does not improve AUC. Reverting changes.
Training on augumented user 77114 40/50 current_auc = 1.0
User 77114 AUC after training: 1.0
User 77114 does not improve AUC. Reverting changes.
Training on augumented user 26617 41/50 current_auc = 1.0
User 26617 AUC after training: 1.0
User 26617 does not improve AUC. Reverting changes.
Training on augumented user 74602 42/50 current_auc = 1.0
User 74602 AUC after training: 1.0
User 74602 does not improve AUC. Reverting changes.
Training on augumented user 109812 43/50 current_auc = 1.0
User 109812 AUC after training: 1.0
User 109812 does not improve AUC. Reverting changes.
Training on augumented user 50775 44/50 current_auc = 1.0
User 50775 AUC after training: 1.0
User 50775 does not improve AUC. Reverting changes.
Training on augumented user 50592 45/50 current_auc = 1.0
User 50592 AUC after training: 1.0
User 50592 does not improve AUC. Reverting changes.
Training on augumented user 110851 46/50 current_auc = 1.0
User 110851 AUC after training: 1.0
User 110851 does not improve AUC. Reverting changes.
Training on augumented user 107749 47/50 current_auc = 1.0
User 107749 AUC after training: 1.0
User 107749 does not improve AUC. Reverting changes.
Training on augumented user 50251 48/50 current_auc = 1.0
User 50251 AUC after training: 1.0
User 50251 does not improve AUC. Reverting changes.
Training on augumented user 136153 49/50 current_auc = 1.0
User 136153 AUC after training: 1.0
User 136153 does not improve AUC. Reverting changes.
[2024-12-02 17:39:10.273726] start test user 69808 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:10.688589] start test user 69808 3/568 recall augumented users by random, augumented_users = [105877, 55745, 117202, 121409, 45835, 98912, 90240, 78491, 124616, 6727, 111661, 46679, 55460, 121797, 82511, 52010, 34421, 99233, 37149, 33759, 21738, 27554, 71392, 45310, 91601, 52072, 20749, 125001, 128179, 30405, 107451, 116025, 32275, 104831, 35507, 137365, 118031, 15173, 122752, 8991, 83221, 120923, 5953, 38380, 121309, 94632, 21837, 3556, 55857, 101551]
[2024-12-02 17:39:10.703737] user = 69808 Cloud 3/568
[2024-12-02 17:39:10.713261] user = 69808 Local 3/568
[2024-12-02 17:39:10.963898] user = 69808 Local+ 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:13.634390] user = 69808 MPDA- 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4375
Training on augumented user 105877 0/50 current_auc = 0.4375
User 105877 AUC after training: 0.4375
User 105877 does not improve AUC. Reverting changes.
Training on augumented user 55745 1/50 current_auc = 0.4375
User 55745 AUC after training: 0.4464285714285714
User 55745 improves AUC. Keeping the model.
Training on augumented user 117202 2/50 current_auc = 0.4464285714285714
User 117202 AUC after training: 0.45535714285714285
User 117202 improves AUC. Keeping the model.
Training on augumented user 121409 3/50 current_auc = 0.45535714285714285
User 121409 AUC after training: 0.4464285714285714
User 121409 does not improve AUC. Reverting changes.
Training on augumented user 45835 4/50 current_auc = 0.45535714285714285
User 45835 AUC after training: 0.4464285714285714
User 45835 does not improve AUC. Reverting changes.
Training on augumented user 98912 5/50 current_auc = 0.45535714285714285
User 98912 AUC after training: 0.45535714285714285
User 98912 does not improve AUC. Reverting changes.
Training on augumented user 90240 6/50 current_auc = 0.45535714285714285
User 90240 AUC after training: 0.45535714285714285
User 90240 does not improve AUC. Reverting changes.
Training on augumented user 78491 7/50 current_auc = 0.45535714285714285
User 78491 AUC after training: 0.4464285714285714
User 78491 does not improve AUC. Reverting changes.
Training on augumented user 124616 8/50 current_auc = 0.45535714285714285
User 124616 AUC after training: 0.4375
User 124616 does not improve AUC. Reverting changes.
Training on augumented user 6727 9/50 current_auc = 0.45535714285714285
User 6727 AUC after training: 0.45535714285714285
User 6727 does not improve AUC. Reverting changes.
Training on augumented user 111661 10/50 current_auc = 0.45535714285714285
User 111661 AUC after training: 0.45535714285714285
User 111661 does not improve AUC. Reverting changes.
Training on augumented user 46679 11/50 current_auc = 0.45535714285714285
User 46679 AUC after training: 0.45535714285714285
User 46679 does not improve AUC. Reverting changes.
Training on augumented user 55460 12/50 current_auc = 0.45535714285714285
User 55460 AUC after training: 0.45535714285714285
User 55460 does not improve AUC. Reverting changes.
Training on augumented user 121797 13/50 current_auc = 0.45535714285714285
User 121797 AUC after training: 0.45535714285714285
User 121797 does not improve AUC. Reverting changes.
Training on augumented user 82511 14/50 current_auc = 0.45535714285714285
User 82511 AUC after training: 0.45535714285714285
User 82511 does not improve AUC. Reverting changes.
Training on augumented user 52010 15/50 current_auc = 0.45535714285714285
User 52010 AUC after training: 0.45535714285714285
User 52010 does not improve AUC. Reverting changes.
Training on augumented user 34421 16/50 current_auc = 0.45535714285714285
User 34421 AUC after training: 0.45535714285714285
User 34421 does not improve AUC. Reverting changes.
Training on augumented user 99233 17/50 current_auc = 0.45535714285714285
User 99233 AUC after training: 0.45535714285714285
User 99233 does not improve AUC. Reverting changes.
Training on augumented user 37149 18/50 current_auc = 0.45535714285714285
User 37149 AUC after training: 0.45535714285714285
User 37149 does not improve AUC. Reverting changes.
Training on augumented user 33759 19/50 current_auc = 0.45535714285714285
User 33759 AUC after training: 0.45535714285714285
User 33759 does not improve AUC. Reverting changes.
Training on augumented user 21738 20/50 current_auc = 0.45535714285714285
User 21738 AUC after training: 0.4375
User 21738 does not improve AUC. Reverting changes.
Training on augumented user 27554 21/50 current_auc = 0.45535714285714285
User 27554 AUC after training: 0.4464285714285714
User 27554 does not improve AUC. Reverting changes.
Training on augumented user 71392 22/50 current_auc = 0.45535714285714285
User 71392 AUC after training: 0.45535714285714285
User 71392 does not improve AUC. Reverting changes.
Training on augumented user 45310 23/50 current_auc = 0.45535714285714285
User 45310 AUC after training: 0.45535714285714285
User 45310 does not improve AUC. Reverting changes.
Training on augumented user 91601 24/50 current_auc = 0.45535714285714285
User 91601 AUC after training: 0.45535714285714285
User 91601 does not improve AUC. Reverting changes.
Training on augumented user 52072 25/50 current_auc = 0.45535714285714285
User 52072 AUC after training: 0.45535714285714285
User 52072 does not improve AUC. Reverting changes.
Training on augumented user 20749 26/50 current_auc = 0.45535714285714285
User 20749 AUC after training: 0.4464285714285714
User 20749 does not improve AUC. Reverting changes.
Training on augumented user 125001 27/50 current_auc = 0.45535714285714285
User 125001 AUC after training: 0.4375
User 125001 does not improve AUC. Reverting changes.
Training on augumented user 128179 28/50 current_auc = 0.45535714285714285
User 128179 AUC after training: 0.4375
User 128179 does not improve AUC. Reverting changes.
Training on augumented user 30405 29/50 current_auc = 0.45535714285714285
User 30405 AUC after training: 0.4375
User 30405 does not improve AUC. Reverting changes.
Training on augumented user 107451 30/50 current_auc = 0.45535714285714285
User 107451 AUC after training: 0.45535714285714285
User 107451 does not improve AUC. Reverting changes.
Training on augumented user 116025 31/50 current_auc = 0.45535714285714285
User 116025 AUC after training: 0.45535714285714285
User 116025 does not improve AUC. Reverting changes.
Training on augumented user 32275 32/50 current_auc = 0.45535714285714285
User 32275 AUC after training: 0.45535714285714285
User 32275 does not improve AUC. Reverting changes.
Training on augumented user 104831 33/50 current_auc = 0.45535714285714285
User 104831 AUC after training: 0.45535714285714285
User 104831 does not improve AUC. Reverting changes.
Training on augumented user 35507 34/50 current_auc = 0.45535714285714285
User 35507 AUC after training: 0.4375
User 35507 does not improve AUC. Reverting changes.
Training on augumented user 137365 35/50 current_auc = 0.45535714285714285
User 137365 AUC after training: 0.45535714285714285
User 137365 does not improve AUC. Reverting changes.
Training on augumented user 118031 36/50 current_auc = 0.45535714285714285
User 118031 AUC after training: 0.45535714285714285
User 118031 does not improve AUC. Reverting changes.
Training on augumented user 15173 37/50 current_auc = 0.45535714285714285
User 15173 AUC after training: 0.4464285714285714
User 15173 does not improve AUC. Reverting changes.
Training on augumented user 122752 38/50 current_auc = 0.45535714285714285
User 122752 AUC after training: 0.4375
User 122752 does not improve AUC. Reverting changes.
Training on augumented user 8991 39/50 current_auc = 0.45535714285714285
User 8991 AUC after training: 0.45535714285714285
User 8991 does not improve AUC. Reverting changes.
Training on augumented user 83221 40/50 current_auc = 0.45535714285714285
User 83221 AUC after training: 0.45535714285714285
User 83221 does not improve AUC. Reverting changes.
Training on augumented user 120923 41/50 current_auc = 0.45535714285714285
User 120923 AUC after training: 0.45535714285714285
User 120923 does not improve AUC. Reverting changes.
Training on augumented user 5953 42/50 current_auc = 0.45535714285714285
User 5953 AUC after training: 0.4375
User 5953 does not improve AUC. Reverting changes.
Training on augumented user 38380 43/50 current_auc = 0.45535714285714285
User 38380 AUC after training: 0.45535714285714285
User 38380 does not improve AUC. Reverting changes.
Training on augumented user 121309 44/50 current_auc = 0.45535714285714285
User 121309 AUC after training: 0.4375
User 121309 does not improve AUC. Reverting changes.
Training on augumented user 94632 45/50 current_auc = 0.45535714285714285
User 94632 AUC after training: 0.45535714285714285
User 94632 does not improve AUC. Reverting changes.
Training on augumented user 21837 46/50 current_auc = 0.45535714285714285
User 21837 AUC after training: 0.45535714285714285
User 21837 does not improve AUC. Reverting changes.
Training on augumented user 3556 47/50 current_auc = 0.45535714285714285
User 3556 AUC after training: 0.4375
User 3556 does not improve AUC. Reverting changes.
Training on augumented user 55857 48/50 current_auc = 0.45535714285714285
User 55857 AUC after training: 0.45535714285714285
User 55857 does not improve AUC. Reverting changes.
Training on augumented user 101551 49/50 current_auc = 0.45535714285714285
User 101551 AUC after training: 0.4464285714285714
User 101551 does not improve AUC. Reverting changes.
[2024-12-02 17:39:40.803269] start test user 69829 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:41.548988] start test user 69829 4/568 recall augumented users by random, augumented_users = [15819, 81618, 94457, 13621, 131230, 71096, 53230, 97596, 68831, 22487, 124779, 69446, 130176, 94250, 30884, 94753, 118558, 113828, 101183, 1380, 13155, 19882, 109284, 100824, 13195, 88155, 132334, 30117, 101819, 8176, 27282, 67534, 124689, 11511, 5263, 52203, 26060, 44615, 28704, 8394, 52722, 52490, 74172, 110404, 42518, 48605, 136032, 998, 98233, 53543]
[2024-12-02 17:39:41.579967] user = 69829 Cloud 4/568
[2024-12-02 17:39:41.604937] user = 69829 Local 4/568
[2024-12-02 17:39:42.084677] user = 69829 Local+ 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:44.625731] user = 69829 MPDA- 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6171617161716171
Training on augumented user 15819 0/50 current_auc = 0.6171617161716171
User 15819 AUC after training: 0.6178861788617886
User 15819 improves AUC. Keeping the model.
Training on augumented user 81618 1/50 current_auc = 0.6178861788617886
User 81618 AUC after training: 0.6167592368992996
User 81618 does not improve AUC. Reverting changes.
Training on augumented user 94457 2/50 current_auc = 0.6178861788617886
User 94457 AUC after training: 0.6173227078805442
User 94457 does not improve AUC. Reverting changes.
Training on augumented user 13621 3/50 current_auc = 0.6178861788617886
User 13621 AUC after training: 0.6165982451903727
User 13621 does not improve AUC. Reverting changes.
Training on augumented user 131230 4/50 current_auc = 0.6178861788617886
User 131230 AUC after training: 0.6177251871528616
User 131230 does not improve AUC. Reverting changes.
Training on augumented user 71096 5/50 current_auc = 0.6178861788617886
User 71096 AUC after training: 0.6171617161716172
User 71096 does not improve AUC. Reverting changes.
Training on augumented user 53230 6/50 current_auc = 0.6178861788617886
User 53230 AUC after training: 0.6172824599533124
User 53230 does not improve AUC. Reverting changes.
Training on augumented user 97596 7/50 current_auc = 0.6178861788617886
User 97596 AUC after training: 0.6171617161716171
User 97596 does not improve AUC. Reverting changes.
Training on augumented user 68831 8/50 current_auc = 0.6178861788617886
User 68831 AUC after training: 0.6174836995894711
User 68831 does not improve AUC. Reverting changes.
Training on augumented user 22487 9/50 current_auc = 0.6178861788617886
User 22487 AUC after training: 0.6176446912983982
User 22487 does not improve AUC. Reverting changes.
Training on augumented user 124779 10/50 current_auc = 0.6178861788617886
User 124779 AUC after training: 0.6165177493359092
User 124779 does not improve AUC. Reverting changes.
Training on augumented user 69446 11/50 current_auc = 0.6178861788617886
User 69446 AUC after training: 0.6175641954439347
User 69446 does not improve AUC. Reverting changes.
Training on augumented user 130176 12/50 current_auc = 0.6178861788617886
User 130176 AUC after training: 0.6173227078805442
User 130176 does not improve AUC. Reverting changes.
Training on augumented user 94250 13/50 current_auc = 0.6178861788617886
User 94250 AUC after training: 0.6173227078805441
User 94250 does not improve AUC. Reverting changes.
Training on augumented user 30884 14/50 current_auc = 0.6178861788617886
User 30884 AUC after training: 0.6173227078805441
User 30884 does not improve AUC. Reverting changes.
Training on augumented user 94753 15/50 current_auc = 0.6178861788617886
User 94753 AUC after training: 0.6174032037350076
User 94753 does not improve AUC. Reverting changes.
Training on augumented user 118558 16/50 current_auc = 0.6178861788617886
User 118558 AUC after training: 0.6169202286082266
User 118558 does not improve AUC. Reverting changes.
Training on augumented user 113828 17/50 current_auc = 0.6178861788617886
User 113828 AUC after training: 0.6156322949368107
User 113828 does not improve AUC. Reverting changes.
Training on augumented user 101183 18/50 current_auc = 0.6178861788617886
User 101183 AUC after training: 0.6171617161716172
User 101183 does not improve AUC. Reverting changes.
Training on augumented user 1380 19/50 current_auc = 0.6178861788617886
User 1380 AUC after training: 0.6169202286082266
User 1380 does not improve AUC. Reverting changes.
Training on augumented user 13155 20/50 current_auc = 0.6178861788617886
User 13155 AUC after training: 0.6170007244626902
User 13155 does not improve AUC. Reverting changes.
Training on augumented user 19882 21/50 current_auc = 0.6178861788617886
User 19882 AUC after training: 0.6171617161716171
User 19882 does not improve AUC. Reverting changes.
Training on augumented user 109284 22/50 current_auc = 0.6178861788617886
User 109284 AUC after training: 0.6172422120260805
User 109284 does not improve AUC. Reverting changes.
Training on augumented user 100824 23/50 current_auc = 0.6178861788617886
User 100824 AUC after training: 0.6170812203171537
User 100824 does not improve AUC. Reverting changes.
Training on augumented user 13195 24/50 current_auc = 0.6178861788617886
User 13195 AUC after training: 0.6174032037350077
User 13195 does not improve AUC. Reverting changes.
Training on augumented user 88155 25/50 current_auc = 0.6178861788617886
User 88155 AUC after training: 0.617483699589471
User 88155 does not improve AUC. Reverting changes.
Training on augumented user 132334 26/50 current_auc = 0.6178861788617886
User 132334 AUC after training: 0.617483699589471
User 132334 does not improve AUC. Reverting changes.
Training on augumented user 30117 27/50 current_auc = 0.6178861788617886
User 30117 AUC after training: 0.6170812203171536
User 30117 does not improve AUC. Reverting changes.
Training on augumented user 101819 28/50 current_auc = 0.6178861788617886
User 101819 AUC after training: 0.6171617161716171
User 101819 does not improve AUC. Reverting changes.
Training on augumented user 8176 29/50 current_auc = 0.6178861788617886
User 8176 AUC after training: 0.6172422120260805
User 8176 does not improve AUC. Reverting changes.
Training on augumented user 27282 30/50 current_auc = 0.6178861788617886
User 27282 AUC after training: 0.6174836995894711
User 27282 does not improve AUC. Reverting changes.
Training on augumented user 67534 31/50 current_auc = 0.6178861788617886
User 67534 AUC after training: 0.617483699589471
User 67534 does not improve AUC. Reverting changes.
Training on augumented user 124689 32/50 current_auc = 0.6178861788617886
User 124689 AUC after training: 0.6177251871528617
User 124689 does not improve AUC. Reverting changes.
Training on augumented user 11511 33/50 current_auc = 0.6178861788617886
User 11511 AUC after training: 0.617644691298398
User 11511 does not improve AUC. Reverting changes.
Training on augumented user 5263 34/50 current_auc = 0.6178861788617886
User 5263 AUC after training: 0.6173227078805441
User 5263 does not improve AUC. Reverting changes.
Training on augumented user 52203 35/50 current_auc = 0.6178861788617886
User 52203 AUC after training: 0.6175641954439347
User 52203 does not improve AUC. Reverting changes.
Training on augumented user 26060 36/50 current_auc = 0.6178861788617886
User 26060 AUC after training: 0.6175641954439346
User 26060 does not improve AUC. Reverting changes.
Training on augumented user 44615 37/50 current_auc = 0.6178861788617886
User 44615 AUC after training: 0.618127666425179
User 44615 improves AUC. Keeping the model.
Training on augumented user 28704 38/50 current_auc = 0.618127666425179
User 28704 AUC after training: 0.6178056830073252
User 28704 does not improve AUC. Reverting changes.
Training on augumented user 8394 39/50 current_auc = 0.618127666425179
User 8394 AUC after training: 0.6178861788617885
User 8394 does not improve AUC. Reverting changes.
Training on augumented user 52722 40/50 current_auc = 0.618127666425179
User 52722 AUC after training: 0.6183691539885696
User 52722 improves AUC. Keeping the model.
Training on augumented user 52490 41/50 current_auc = 0.6183691539885696
User 52490 AUC after training: 0.6185301456974965
User 52490 improves AUC. Keeping the model.
Training on augumented user 74172 42/50 current_auc = 0.6185301456974965
User 74172 AUC after training: 0.6182081622796426
User 74172 does not improve AUC. Reverting changes.
Training on augumented user 110404 43/50 current_auc = 0.6185301456974965
User 110404 AUC after training: 0.618127666425179
User 110404 does not improve AUC. Reverting changes.
Training on augumented user 42518 44/50 current_auc = 0.6185301456974965
User 42518 AUC after training: 0.6189326249698139
User 42518 improves AUC. Keeping the model.
Training on augumented user 48605 45/50 current_auc = 0.6189326249698139
User 48605 AUC after training: 0.617966674716252
User 48605 does not improve AUC. Reverting changes.
Training on augumented user 136032 46/50 current_auc = 0.6189326249698139
User 136032 AUC after training: 0.6188521291153506
User 136032 does not improve AUC. Reverting changes.
Training on augumented user 998 47/50 current_auc = 0.6189326249698139
User 998 AUC after training: 0.618932624969814
User 998 improves AUC. Keeping the model.
Training on augumented user 98233 48/50 current_auc = 0.618932624969814
User 98233 AUC after training: 0.6190131208242774
User 98233 improves AUC. Keeping the model.
Training on augumented user 53543 49/50 current_auc = 0.6190131208242774
User 53543 AUC after training: 0.6183691539885695
User 53543 does not improve AUC. Reverting changes.
[2024-12-02 17:40:15.052206] start test user 69883 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:15.558867] start test user 69883 5/568 recall augumented users by random, augumented_users = [50870, 57952, 112971, 44060, 91488, 31943, 30488, 121824, 95, 52982, 83783, 108137, 98608, 130848, 83734, 327, 134419, 109758, 129760, 45130, 64911, 56609, 78708, 6578, 29742, 13599, 95950, 10998, 126777, 27946, 9137, 20543, 59853, 55404, 71978, 34110, 41765, 55069, 10622, 130408, 55820, 99329, 11666, 135796, 51666, 33907, 120728, 102687, 129965, 130728]
[2024-12-02 17:40:15.575974] user = 69883 Cloud 5/568
[2024-12-02 17:40:15.588292] user = 69883 Local 5/568
[2024-12-02 17:40:15.616567] user = 69883 Local+ 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:18.733136] user = 69883 MPDA- 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9333333333333333
Training on augumented user 50870 0/50 current_auc = 0.9333333333333333
User 50870 AUC after training: 0.9333333333333333
User 50870 does not improve AUC. Reverting changes.
Training on augumented user 57952 1/50 current_auc = 0.9333333333333333
User 57952 AUC after training: 0.9333333333333333
User 57952 does not improve AUC. Reverting changes.
Training on augumented user 112971 2/50 current_auc = 0.9333333333333333
User 112971 AUC after training: 0.9333333333333333
User 112971 does not improve AUC. Reverting changes.
Training on augumented user 44060 3/50 current_auc = 0.9333333333333333
User 44060 AUC after training: 0.9333333333333333
User 44060 does not improve AUC. Reverting changes.
Training on augumented user 91488 4/50 current_auc = 0.9333333333333333
User 91488 AUC after training: 0.9333333333333333
User 91488 does not improve AUC. Reverting changes.
Training on augumented user 31943 5/50 current_auc = 0.9333333333333333
User 31943 AUC after training: 0.9333333333333333
User 31943 does not improve AUC. Reverting changes.
Training on augumented user 30488 6/50 current_auc = 0.9333333333333333
User 30488 AUC after training: 0.9333333333333333
User 30488 does not improve AUC. Reverting changes.
Training on augumented user 121824 7/50 current_auc = 0.9333333333333333
User 121824 AUC after training: 0.9333333333333333
User 121824 does not improve AUC. Reverting changes.
Training on augumented user 95 8/50 current_auc = 0.9333333333333333
User 95 AUC after training: 0.9333333333333333
User 95 does not improve AUC. Reverting changes.
Training on augumented user 52982 9/50 current_auc = 0.9333333333333333
User 52982 AUC after training: 0.9333333333333333
User 52982 does not improve AUC. Reverting changes.
Training on augumented user 83783 10/50 current_auc = 0.9333333333333333
User 83783 AUC after training: 0.9333333333333333
User 83783 does not improve AUC. Reverting changes.
Training on augumented user 108137 11/50 current_auc = 0.9333333333333333
User 108137 AUC after training: 0.9333333333333333
User 108137 does not improve AUC. Reverting changes.
Training on augumented user 98608 12/50 current_auc = 0.9333333333333333
User 98608 AUC after training: 0.9333333333333333
User 98608 does not improve AUC. Reverting changes.
Training on augumented user 130848 13/50 current_auc = 0.9333333333333333
User 130848 AUC after training: 0.9333333333333333
User 130848 does not improve AUC. Reverting changes.
Training on augumented user 83734 14/50 current_auc = 0.9333333333333333
User 83734 AUC after training: 0.9333333333333333
User 83734 does not improve AUC. Reverting changes.
Training on augumented user 327 15/50 current_auc = 0.9333333333333333
User 327 AUC after training: 0.9333333333333333
User 327 does not improve AUC. Reverting changes.
Training on augumented user 134419 16/50 current_auc = 0.9333333333333333
User 134419 AUC after training: 0.9333333333333333
User 134419 does not improve AUC. Reverting changes.
Training on augumented user 109758 17/50 current_auc = 0.9333333333333333
User 109758 AUC after training: 0.9333333333333333
User 109758 does not improve AUC. Reverting changes.
Training on augumented user 129760 18/50 current_auc = 0.9333333333333333
User 129760 AUC after training: 0.9333333333333333
User 129760 does not improve AUC. Reverting changes.
Training on augumented user 45130 19/50 current_auc = 0.9333333333333333
User 45130 AUC after training: 0.9333333333333333
User 45130 does not improve AUC. Reverting changes.
Training on augumented user 64911 20/50 current_auc = 0.9333333333333333
User 64911 AUC after training: 0.9333333333333333
User 64911 does not improve AUC. Reverting changes.
Training on augumented user 56609 21/50 current_auc = 0.9333333333333333
User 56609 AUC after training: 0.9333333333333333
User 56609 does not improve AUC. Reverting changes.
Training on augumented user 78708 22/50 current_auc = 0.9333333333333333
User 78708 AUC after training: 0.9333333333333333
User 78708 does not improve AUC. Reverting changes.
Training on augumented user 6578 23/50 current_auc = 0.9333333333333333
User 6578 AUC after training: 0.9333333333333333
User 6578 does not improve AUC. Reverting changes.
Training on augumented user 29742 24/50 current_auc = 0.9333333333333333
User 29742 AUC after training: 0.9333333333333333
User 29742 does not improve AUC. Reverting changes.
Training on augumented user 13599 25/50 current_auc = 0.9333333333333333
User 13599 AUC after training: 0.9333333333333333
User 13599 does not improve AUC. Reverting changes.
Training on augumented user 95950 26/50 current_auc = 0.9333333333333333
User 95950 AUC after training: 0.9333333333333333
User 95950 does not improve AUC. Reverting changes.
Training on augumented user 10998 27/50 current_auc = 0.9333333333333333
User 10998 AUC after training: 0.9333333333333333
User 10998 does not improve AUC. Reverting changes.
Training on augumented user 126777 28/50 current_auc = 0.9333333333333333
User 126777 AUC after training: 0.9333333333333333
User 126777 does not improve AUC. Reverting changes.
Training on augumented user 27946 29/50 current_auc = 0.9333333333333333
User 27946 AUC after training: 0.9333333333333333
User 27946 does not improve AUC. Reverting changes.
Training on augumented user 9137 30/50 current_auc = 0.9333333333333333
User 9137 AUC after training: 0.9333333333333333
User 9137 does not improve AUC. Reverting changes.
Training on augumented user 20543 31/50 current_auc = 0.9333333333333333
User 20543 AUC after training: 0.9333333333333333
User 20543 does not improve AUC. Reverting changes.
Training on augumented user 59853 32/50 current_auc = 0.9333333333333333
User 59853 AUC after training: 0.9333333333333333
User 59853 does not improve AUC. Reverting changes.
Training on augumented user 55404 33/50 current_auc = 0.9333333333333333
User 55404 AUC after training: 0.9333333333333333
User 55404 does not improve AUC. Reverting changes.
Training on augumented user 71978 34/50 current_auc = 0.9333333333333333
User 71978 AUC after training: 0.9333333333333333
User 71978 does not improve AUC. Reverting changes.
Training on augumented user 34110 35/50 current_auc = 0.9333333333333333
User 34110 AUC after training: 0.9333333333333333
User 34110 does not improve AUC. Reverting changes.
Training on augumented user 41765 36/50 current_auc = 0.9333333333333333
User 41765 AUC after training: 0.9333333333333333
User 41765 does not improve AUC. Reverting changes.
Training on augumented user 55069 37/50 current_auc = 0.9333333333333333
User 55069 AUC after training: 0.9333333333333333
User 55069 does not improve AUC. Reverting changes.
Training on augumented user 10622 38/50 current_auc = 0.9333333333333333
User 10622 AUC after training: 0.9333333333333333
User 10622 does not improve AUC. Reverting changes.
Training on augumented user 130408 39/50 current_auc = 0.9333333333333333
User 130408 AUC after training: 0.9333333333333333
User 130408 does not improve AUC. Reverting changes.
Training on augumented user 55820 40/50 current_auc = 0.9333333333333333
User 55820 AUC after training: 0.9333333333333333
User 55820 does not improve AUC. Reverting changes.
Training on augumented user 99329 41/50 current_auc = 0.9333333333333333
User 99329 AUC after training: 0.9333333333333333
User 99329 does not improve AUC. Reverting changes.
Training on augumented user 11666 42/50 current_auc = 0.9333333333333333
User 11666 AUC after training: 0.9333333333333333
User 11666 does not improve AUC. Reverting changes.
Training on augumented user 135796 43/50 current_auc = 0.9333333333333333
User 135796 AUC after training: 0.9333333333333333
User 135796 does not improve AUC. Reverting changes.
Training on augumented user 51666 44/50 current_auc = 0.9333333333333333
User 51666 AUC after training: 0.9333333333333333
User 51666 does not improve AUC. Reverting changes.
Training on augumented user 33907 45/50 current_auc = 0.9333333333333333
User 33907 AUC after training: 0.9333333333333333
User 33907 does not improve AUC. Reverting changes.
Training on augumented user 120728 46/50 current_auc = 0.9333333333333333
User 120728 AUC after training: 0.9333333333333333
User 120728 does not improve AUC. Reverting changes.
Training on augumented user 102687 47/50 current_auc = 0.9333333333333333
User 102687 AUC after training: 0.9333333333333333
User 102687 does not improve AUC. Reverting changes.
Training on augumented user 129965 48/50 current_auc = 0.9333333333333333
User 129965 AUC after training: 0.9333333333333333
User 129965 does not improve AUC. Reverting changes.
Training on augumented user 130728 49/50 current_auc = 0.9333333333333333
User 130728 AUC after training: 0.9333333333333333
User 130728 does not improve AUC. Reverting changes.
[2024-12-02 17:40:47.165156] start test user 69895 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:47.732665] start test user 69895 6/568 recall augumented users by random, augumented_users = [121985, 99605, 29611, 124410, 91280, 48155, 67958, 49251, 54495, 42400, 43036, 82599, 126104, 44063, 111620, 57390, 89842, 58740, 126132, 27712, 19423, 39191, 25576, 7534, 64084, 121940, 125681, 124877, 60556, 134285, 67118, 109461, 86917, 59442, 55253, 765, 20442, 6562, 106268, 35688, 25341, 130824, 46639, 59338, 133605, 25688, 26104, 91730, 123723, 11493]
[2024-12-02 17:40:47.747906] user = 69895 Cloud 6/568
[2024-12-02 17:40:47.758259] user = 69895 Local 6/568
[2024-12-02 17:40:47.859166] user = 69895 Local+ 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:50.700828] user = 69895 MPDA- 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333334
Training on augumented user 121985 0/50 current_auc = 0.5833333333333334
User 121985 AUC after training: 0.5833333333333334
User 121985 does not improve AUC. Reverting changes.
Training on augumented user 99605 1/50 current_auc = 0.5833333333333334
User 99605 AUC after training: 0.5833333333333334
User 99605 does not improve AUC. Reverting changes.
Training on augumented user 29611 2/50 current_auc = 0.5833333333333334
User 29611 AUC after training: 0.5833333333333334
User 29611 does not improve AUC. Reverting changes.
Training on augumented user 124410 3/50 current_auc = 0.5833333333333334
User 124410 AUC after training: 0.5833333333333334
User 124410 does not improve AUC. Reverting changes.
Training on augumented user 91280 4/50 current_auc = 0.5833333333333334
User 91280 AUC after training: 0.5833333333333334
User 91280 does not improve AUC. Reverting changes.
Training on augumented user 48155 5/50 current_auc = 0.5833333333333334
User 48155 AUC after training: 0.5833333333333334
User 48155 does not improve AUC. Reverting changes.
Training on augumented user 67958 6/50 current_auc = 0.5833333333333334
User 67958 AUC after training: 0.5833333333333334
User 67958 does not improve AUC. Reverting changes.
Training on augumented user 49251 7/50 current_auc = 0.5833333333333334
User 49251 AUC after training: 0.5833333333333334
User 49251 does not improve AUC. Reverting changes.
Training on augumented user 54495 8/50 current_auc = 0.5833333333333334
User 54495 AUC after training: 0.5833333333333334
User 54495 does not improve AUC. Reverting changes.
Training on augumented user 42400 9/50 current_auc = 0.5833333333333334
User 42400 AUC after training: 0.5833333333333334
User 42400 does not improve AUC. Reverting changes.
Training on augumented user 43036 10/50 current_auc = 0.5833333333333334
User 43036 AUC after training: 0.5833333333333334
User 43036 does not improve AUC. Reverting changes.
Training on augumented user 82599 11/50 current_auc = 0.5833333333333334
User 82599 AUC after training: 0.5833333333333334
User 82599 does not improve AUC. Reverting changes.
Training on augumented user 126104 12/50 current_auc = 0.5833333333333334
User 126104 AUC after training: 0.5833333333333334
User 126104 does not improve AUC. Reverting changes.
Training on augumented user 44063 13/50 current_auc = 0.5833333333333334
User 44063 AUC after training: 0.5833333333333334
User 44063 does not improve AUC. Reverting changes.
Training on augumented user 111620 14/50 current_auc = 0.5833333333333334
User 111620 AUC after training: 0.5833333333333334
User 111620 does not improve AUC. Reverting changes.
Training on augumented user 57390 15/50 current_auc = 0.5833333333333334
User 57390 AUC after training: 0.5833333333333334
User 57390 does not improve AUC. Reverting changes.
Training on augumented user 89842 16/50 current_auc = 0.5833333333333334
User 89842 AUC after training: 0.5833333333333334
User 89842 does not improve AUC. Reverting changes.
Training on augumented user 58740 17/50 current_auc = 0.5833333333333334
User 58740 AUC after training: 0.5833333333333334
User 58740 does not improve AUC. Reverting changes.
Training on augumented user 126132 18/50 current_auc = 0.5833333333333334
User 126132 AUC after training: 0.5833333333333334
User 126132 does not improve AUC. Reverting changes.
Training on augumented user 27712 19/50 current_auc = 0.5833333333333334
User 27712 AUC after training: 0.5833333333333334
User 27712 does not improve AUC. Reverting changes.
Training on augumented user 19423 20/50 current_auc = 0.5833333333333334
User 19423 AUC after training: 0.5833333333333334
User 19423 does not improve AUC. Reverting changes.
Training on augumented user 39191 21/50 current_auc = 0.5833333333333334
User 39191 AUC after training: 0.5833333333333334
User 39191 does not improve AUC. Reverting changes.
Training on augumented user 25576 22/50 current_auc = 0.5833333333333334
User 25576 AUC after training: 0.5833333333333334
User 25576 does not improve AUC. Reverting changes.
Training on augumented user 7534 23/50 current_auc = 0.5833333333333334
User 7534 AUC after training: 0.5833333333333334
User 7534 does not improve AUC. Reverting changes.
Training on augumented user 64084 24/50 current_auc = 0.5833333333333334
User 64084 AUC after training: 0.5833333333333334
User 64084 does not improve AUC. Reverting changes.
Training on augumented user 121940 25/50 current_auc = 0.5833333333333334
User 121940 AUC after training: 0.5833333333333334
User 121940 does not improve AUC. Reverting changes.
Training on augumented user 125681 26/50 current_auc = 0.5833333333333334
User 125681 AUC after training: 0.5833333333333334
User 125681 does not improve AUC. Reverting changes.
Training on augumented user 124877 27/50 current_auc = 0.5833333333333334
User 124877 AUC after training: 0.5833333333333334
User 124877 does not improve AUC. Reverting changes.
Training on augumented user 60556 28/50 current_auc = 0.5833333333333334
User 60556 AUC after training: 0.5833333333333334
User 60556 does not improve AUC. Reverting changes.
Training on augumented user 134285 29/50 current_auc = 0.5833333333333334
User 134285 AUC after training: 0.5833333333333334
User 134285 does not improve AUC. Reverting changes.
Training on augumented user 67118 30/50 current_auc = 0.5833333333333334
User 67118 AUC after training: 0.5833333333333334
User 67118 does not improve AUC. Reverting changes.
Training on augumented user 109461 31/50 current_auc = 0.5833333333333334
User 109461 AUC after training: 0.5833333333333334
User 109461 does not improve AUC. Reverting changes.
Training on augumented user 86917 32/50 current_auc = 0.5833333333333334
User 86917 AUC after training: 0.5833333333333334
User 86917 does not improve AUC. Reverting changes.
Training on augumented user 59442 33/50 current_auc = 0.5833333333333334
User 59442 AUC after training: 0.5833333333333334
User 59442 does not improve AUC. Reverting changes.
Training on augumented user 55253 34/50 current_auc = 0.5833333333333334
User 55253 AUC after training: 0.5833333333333334
User 55253 does not improve AUC. Reverting changes.
Training on augumented user 765 35/50 current_auc = 0.5833333333333334
User 765 AUC after training: 0.5833333333333334
User 765 does not improve AUC. Reverting changes.
Training on augumented user 20442 36/50 current_auc = 0.5833333333333334
User 20442 AUC after training: 0.5833333333333334
User 20442 does not improve AUC. Reverting changes.
Training on augumented user 6562 37/50 current_auc = 0.5833333333333334
User 6562 AUC after training: 0.5833333333333334
User 6562 does not improve AUC. Reverting changes.
Training on augumented user 106268 38/50 current_auc = 0.5833333333333334
User 106268 AUC after training: 0.5833333333333334
User 106268 does not improve AUC. Reverting changes.
Training on augumented user 35688 39/50 current_auc = 0.5833333333333334
User 35688 AUC after training: 0.5833333333333334
User 35688 does not improve AUC. Reverting changes.
Training on augumented user 25341 40/50 current_auc = 0.5833333333333334
User 25341 AUC after training: 0.5833333333333334
User 25341 does not improve AUC. Reverting changes.
Training on augumented user 130824 41/50 current_auc = 0.5833333333333334
User 130824 AUC after training: 0.5833333333333334
User 130824 does not improve AUC. Reverting changes.
Training on augumented user 46639 42/50 current_auc = 0.5833333333333334
User 46639 AUC after training: 0.5833333333333334
User 46639 does not improve AUC. Reverting changes.
Training on augumented user 59338 43/50 current_auc = 0.5833333333333334
User 59338 AUC after training: 0.5833333333333334
User 59338 does not improve AUC. Reverting changes.
Training on augumented user 133605 44/50 current_auc = 0.5833333333333334
User 133605 AUC after training: 0.5833333333333334
User 133605 does not improve AUC. Reverting changes.
Training on augumented user 25688 45/50 current_auc = 0.5833333333333334
User 25688 AUC after training: 0.5833333333333334
User 25688 does not improve AUC. Reverting changes.
Training on augumented user 26104 46/50 current_auc = 0.5833333333333334
User 26104 AUC after training: 0.5833333333333334
User 26104 does not improve AUC. Reverting changes.
Training on augumented user 91730 47/50 current_auc = 0.5833333333333334
User 91730 AUC after training: 0.5833333333333334
User 91730 does not improve AUC. Reverting changes.
Training on augumented user 123723 48/50 current_auc = 0.5833333333333334
User 123723 AUC after training: 0.5833333333333334
User 123723 does not improve AUC. Reverting changes.
Training on augumented user 11493 49/50 current_auc = 0.5833333333333334
User 11493 AUC after training: 0.5833333333333334
User 11493 does not improve AUC. Reverting changes.
[2024-12-02 17:41:21.732224] start test user 69910 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:22.529664] start test user 69910 7/568 recall augumented users by random, augumented_users = [103670, 13634, 123415, 30572, 102489, 77087, 96704, 67097, 3210, 126249, 122337, 121519, 77935, 45610, 104466, 134367, 101896, 62769, 95612, 26381, 117630, 28812, 40277, 5939, 27946, 63949, 33017, 29942, 118074, 800, 6388, 68072, 41172, 37209, 39038, 84934, 134661, 89054, 1099, 6686, 26326, 118988, 58355, 102408, 27101, 82824, 89688, 16103, 134223, 132941]
[2024-12-02 17:41:22.545615] user = 69910 Cloud 7/568
[2024-12-02 17:41:22.560525] user = 69910 Local 7/568
[2024-12-02 17:41:22.723365] user = 69910 Local+ 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:24.775484] user = 69910 MPDA- 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9345864661654135
Training on augumented user 103670 0/50 current_auc = 0.9345864661654135
User 103670 AUC after training: 0.9345864661654135
User 103670 does not improve AUC. Reverting changes.
Training on augumented user 13634 1/50 current_auc = 0.9345864661654135
User 13634 AUC after training: 0.9345864661654135
User 13634 does not improve AUC. Reverting changes.
Training on augumented user 123415 2/50 current_auc = 0.9345864661654135
User 123415 AUC after training: 0.9345864661654135
User 123415 does not improve AUC. Reverting changes.
Training on augumented user 30572 3/50 current_auc = 0.9345864661654135
User 30572 AUC after training: 0.9345864661654135
User 30572 does not improve AUC. Reverting changes.
Training on augumented user 102489 4/50 current_auc = 0.9345864661654135
User 102489 AUC after training: 0.9345864661654135
User 102489 does not improve AUC. Reverting changes.
Training on augumented user 77087 5/50 current_auc = 0.9345864661654135
User 77087 AUC after training: 0.9345864661654135
User 77087 does not improve AUC. Reverting changes.
Training on augumented user 96704 6/50 current_auc = 0.9345864661654135
User 96704 AUC after training: 0.9345864661654135
User 96704 does not improve AUC. Reverting changes.
Training on augumented user 67097 7/50 current_auc = 0.9345864661654135
User 67097 AUC after training: 0.9345864661654135
User 67097 does not improve AUC. Reverting changes.
Training on augumented user 3210 8/50 current_auc = 0.9345864661654135
User 3210 AUC after training: 0.9338345864661655
User 3210 does not improve AUC. Reverting changes.
Training on augumented user 126249 9/50 current_auc = 0.9345864661654135
User 126249 AUC after training: 0.9345864661654135
User 126249 does not improve AUC. Reverting changes.
Training on augumented user 122337 10/50 current_auc = 0.9345864661654135
User 122337 AUC after training: 0.9345864661654135
User 122337 does not improve AUC. Reverting changes.
Training on augumented user 121519 11/50 current_auc = 0.9345864661654135
User 121519 AUC after training: 0.9345864661654135
User 121519 does not improve AUC. Reverting changes.
Training on augumented user 77935 12/50 current_auc = 0.9345864661654135
User 77935 AUC after training: 0.9345864661654135
User 77935 does not improve AUC. Reverting changes.
Training on augumented user 45610 13/50 current_auc = 0.9345864661654135
User 45610 AUC after training: 0.9345864661654135
User 45610 does not improve AUC. Reverting changes.
Training on augumented user 104466 14/50 current_auc = 0.9345864661654135
User 104466 AUC after training: 0.9345864661654135
User 104466 does not improve AUC. Reverting changes.
Training on augumented user 134367 15/50 current_auc = 0.9345864661654135
User 134367 AUC after training: 0.9345864661654135
User 134367 does not improve AUC. Reverting changes.
Training on augumented user 101896 16/50 current_auc = 0.9345864661654135
User 101896 AUC after training: 0.9345864661654135
User 101896 does not improve AUC. Reverting changes.
Training on augumented user 62769 17/50 current_auc = 0.9345864661654135
User 62769 AUC after training: 0.9345864661654135
User 62769 does not improve AUC. Reverting changes.
Training on augumented user 95612 18/50 current_auc = 0.9345864661654135
User 95612 AUC after training: 0.9345864661654135
User 95612 does not improve AUC. Reverting changes.
Training on augumented user 26381 19/50 current_auc = 0.9345864661654135
User 26381 AUC after training: 0.9345864661654135
User 26381 does not improve AUC. Reverting changes.
Training on augumented user 117630 20/50 current_auc = 0.9345864661654135
User 117630 AUC after training: 0.9345864661654135
User 117630 does not improve AUC. Reverting changes.
Training on augumented user 28812 21/50 current_auc = 0.9345864661654135
User 28812 AUC after training: 0.9345864661654135
User 28812 does not improve AUC. Reverting changes.
Training on augumented user 40277 22/50 current_auc = 0.9345864661654135
User 40277 AUC after training: 0.9345864661654135
User 40277 does not improve AUC. Reverting changes.
Training on augumented user 5939 23/50 current_auc = 0.9345864661654135
User 5939 AUC after training: 0.9345864661654135
User 5939 does not improve AUC. Reverting changes.
Training on augumented user 27946 24/50 current_auc = 0.9345864661654135
User 27946 AUC after training: 0.9338345864661655
User 27946 does not improve AUC. Reverting changes.
Training on augumented user 63949 25/50 current_auc = 0.9345864661654135
User 63949 AUC after training: 0.9345864661654135
User 63949 does not improve AUC. Reverting changes.
Training on augumented user 33017 26/50 current_auc = 0.9345864661654135
User 33017 AUC after training: 0.9345864661654135
User 33017 does not improve AUC. Reverting changes.
Training on augumented user 29942 27/50 current_auc = 0.9345864661654135
User 29942 AUC after training: 0.9345864661654135
User 29942 does not improve AUC. Reverting changes.
Training on augumented user 118074 28/50 current_auc = 0.9345864661654135
User 118074 AUC after training: 0.9353383458646617
User 118074 improves AUC. Keeping the model.
Training on augumented user 800 29/50 current_auc = 0.9353383458646617
User 800 AUC after training: 0.9353383458646617
User 800 does not improve AUC. Reverting changes.
Training on augumented user 6388 30/50 current_auc = 0.9353383458646617
User 6388 AUC after training: 0.9360902255639099
User 6388 improves AUC. Keeping the model.
Training on augumented user 68072 31/50 current_auc = 0.9360902255639099
User 68072 AUC after training: 0.9360902255639099
User 68072 does not improve AUC. Reverting changes.
Training on augumented user 41172 32/50 current_auc = 0.9360902255639099
User 41172 AUC after training: 0.9360902255639099
User 41172 does not improve AUC. Reverting changes.
Training on augumented user 37209 33/50 current_auc = 0.9360902255639099
User 37209 AUC after training: 0.9353383458646617
User 37209 does not improve AUC. Reverting changes.
Training on augumented user 39038 34/50 current_auc = 0.9360902255639099
User 39038 AUC after training: 0.9360902255639099
User 39038 does not improve AUC. Reverting changes.
Training on augumented user 84934 35/50 current_auc = 0.9360902255639099
User 84934 AUC after training: 0.9360902255639099
User 84934 does not improve AUC. Reverting changes.
Training on augumented user 134661 36/50 current_auc = 0.9360902255639099
User 134661 AUC after training: 0.9360902255639099
User 134661 does not improve AUC. Reverting changes.
Training on augumented user 89054 37/50 current_auc = 0.9360902255639099
User 89054 AUC after training: 0.9360902255639099
User 89054 does not improve AUC. Reverting changes.
Training on augumented user 1099 38/50 current_auc = 0.9360902255639099
User 1099 AUC after training: 0.9360902255639099
User 1099 does not improve AUC. Reverting changes.
Training on augumented user 6686 39/50 current_auc = 0.9360902255639099
User 6686 AUC after training: 0.9338345864661655
User 6686 does not improve AUC. Reverting changes.
Training on augumented user 26326 40/50 current_auc = 0.9360902255639099
User 26326 AUC after training: 0.9360902255639099
User 26326 does not improve AUC. Reverting changes.
Training on augumented user 118988 41/50 current_auc = 0.9360902255639099
User 118988 AUC after training: 0.9353383458646617
User 118988 does not improve AUC. Reverting changes.
Training on augumented user 58355 42/50 current_auc = 0.9360902255639099
User 58355 AUC after training: 0.9360902255639099
User 58355 does not improve AUC. Reverting changes.
Training on augumented user 102408 43/50 current_auc = 0.9360902255639099
User 102408 AUC after training: 0.9368421052631579
User 102408 improves AUC. Keeping the model.
Training on augumented user 27101 44/50 current_auc = 0.9368421052631579
User 27101 AUC after training: 0.9368421052631579
User 27101 does not improve AUC. Reverting changes.
Training on augumented user 82824 45/50 current_auc = 0.9368421052631579
User 82824 AUC after training: 0.9360902255639099
User 82824 does not improve AUC. Reverting changes.
Training on augumented user 89688 46/50 current_auc = 0.9368421052631579
User 89688 AUC after training: 0.9368421052631579
User 89688 does not improve AUC. Reverting changes.
Training on augumented user 16103 47/50 current_auc = 0.9368421052631579
User 16103 AUC after training: 0.9360902255639099
User 16103 does not improve AUC. Reverting changes.
Training on augumented user 134223 48/50 current_auc = 0.9368421052631579
User 134223 AUC after training: 0.9368421052631579
User 134223 does not improve AUC. Reverting changes.
Training on augumented user 132941 49/50 current_auc = 0.9368421052631579
User 132941 AUC after training: 0.9360902255639099
User 132941 does not improve AUC. Reverting changes.
[2024-12-02 17:41:52.922159] start test user 69916 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:53.455715] start test user 69916 8/568 recall augumented users by random, augumented_users = [34399, 41144, 96261, 19687, 136811, 112941, 25943, 84879, 64637, 102205, 11618, 105107, 22735, 135120, 102937, 105111, 21379, 11675, 9809, 99310, 82871, 138279, 99087, 81975, 2395, 38961, 19596, 133833, 92949, 74111, 91035, 70705, 20819, 123627, 67439, 97649, 3795, 25747, 77205, 20613, 137730, 100215, 66866, 78951, 58966, 41150, 50179, 59966, 66584, 38780]
[2024-12-02 17:41:53.471609] user = 69916 Cloud 8/568
[2024-12-02 17:41:53.482008] user = 69916 Local 8/568
[2024-12-02 17:41:53.590883] user = 69916 Local+ 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:55.458599] user = 69916 MPDA- 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5978260869565217
Training on augumented user 34399 0/50 current_auc = 0.5978260869565217
User 34399 AUC after training: 0.5929951690821256
User 34399 does not improve AUC. Reverting changes.
Training on augumented user 41144 1/50 current_auc = 0.5978260869565217
User 41144 AUC after training: 0.5990338164251208
User 41144 improves AUC. Keeping the model.
Training on augumented user 96261 2/50 current_auc = 0.5990338164251208
User 96261 AUC after training: 0.5978260869565217
User 96261 does not improve AUC. Reverting changes.
Training on augumented user 19687 3/50 current_auc = 0.5990338164251208
User 19687 AUC after training: 0.6002415458937198
User 19687 improves AUC. Keeping the model.
Training on augumented user 136811 4/50 current_auc = 0.6002415458937198
User 136811 AUC after training: 0.5917874396135265
User 136811 does not improve AUC. Reverting changes.
Training on augumented user 112941 5/50 current_auc = 0.6002415458937198
User 112941 AUC after training: 0.5990338164251208
User 112941 does not improve AUC. Reverting changes.
Training on augumented user 25943 6/50 current_auc = 0.6002415458937198
User 25943 AUC after training: 0.6002415458937198
User 25943 does not improve AUC. Reverting changes.
Training on augumented user 84879 7/50 current_auc = 0.6002415458937198
User 84879 AUC after training: 0.6026570048309179
User 84879 improves AUC. Keeping the model.
Training on augumented user 64637 8/50 current_auc = 0.6026570048309179
User 64637 AUC after training: 0.6002415458937198
User 64637 does not improve AUC. Reverting changes.
Training on augumented user 102205 9/50 current_auc = 0.6026570048309179
User 102205 AUC after training: 0.605072463768116
User 102205 improves AUC. Keeping the model.
Training on augumented user 11618 10/50 current_auc = 0.605072463768116
User 11618 AUC after training: 0.6026570048309179
User 11618 does not improve AUC. Reverting changes.
Training on augumented user 105107 11/50 current_auc = 0.605072463768116
User 105107 AUC after training: 0.6026570048309179
User 105107 does not improve AUC. Reverting changes.
Training on augumented user 22735 12/50 current_auc = 0.605072463768116
User 22735 AUC after training: 0.6026570048309179
User 22735 does not improve AUC. Reverting changes.
Training on augumented user 135120 13/50 current_auc = 0.605072463768116
User 135120 AUC after training: 0.6026570048309179
User 135120 does not improve AUC. Reverting changes.
Training on augumented user 102937 14/50 current_auc = 0.605072463768116
User 102937 AUC after training: 0.6014492753623188
User 102937 does not improve AUC. Reverting changes.
Training on augumented user 105111 15/50 current_auc = 0.605072463768116
User 105111 AUC after training: 0.6026570048309179
User 105111 does not improve AUC. Reverting changes.
Training on augumented user 21379 16/50 current_auc = 0.605072463768116
User 21379 AUC after training: 0.605072463768116
User 21379 does not improve AUC. Reverting changes.
Training on augumented user 11675 17/50 current_auc = 0.605072463768116
User 11675 AUC after training: 0.606280193236715
User 11675 improves AUC. Keeping the model.
Training on augumented user 9809 18/50 current_auc = 0.606280193236715
User 9809 AUC after training: 0.605072463768116
User 9809 does not improve AUC. Reverting changes.
Training on augumented user 99310 19/50 current_auc = 0.606280193236715
User 99310 AUC after training: 0.607487922705314
User 99310 improves AUC. Keeping the model.
Training on augumented user 82871 20/50 current_auc = 0.607487922705314
User 82871 AUC after training: 0.606280193236715
User 82871 does not improve AUC. Reverting changes.
Training on augumented user 138279 21/50 current_auc = 0.607487922705314
User 138279 AUC after training: 0.607487922705314
User 138279 does not improve AUC. Reverting changes.
Training on augumented user 99087 22/50 current_auc = 0.607487922705314
User 99087 AUC after training: 0.607487922705314
User 99087 does not improve AUC. Reverting changes.
Training on augumented user 81975 23/50 current_auc = 0.607487922705314
User 81975 AUC after training: 0.605072463768116
User 81975 does not improve AUC. Reverting changes.
Training on augumented user 2395 24/50 current_auc = 0.607487922705314
User 2395 AUC after training: 0.607487922705314
User 2395 does not improve AUC. Reverting changes.
Training on augumented user 38961 25/50 current_auc = 0.607487922705314
User 38961 AUC after training: 0.606280193236715
User 38961 does not improve AUC. Reverting changes.
Training on augumented user 19596 26/50 current_auc = 0.607487922705314
User 19596 AUC after training: 0.606280193236715
User 19596 does not improve AUC. Reverting changes.
Training on augumented user 133833 27/50 current_auc = 0.607487922705314
User 133833 AUC after training: 0.605072463768116
User 133833 does not improve AUC. Reverting changes.
Training on augumented user 92949 28/50 current_auc = 0.607487922705314
User 92949 AUC after training: 0.606280193236715
User 92949 does not improve AUC. Reverting changes.
Training on augumented user 74111 29/50 current_auc = 0.607487922705314
User 74111 AUC after training: 0.607487922705314
User 74111 does not improve AUC. Reverting changes.
Training on augumented user 91035 30/50 current_auc = 0.607487922705314
User 91035 AUC after training: 0.606280193236715
User 91035 does not improve AUC. Reverting changes.
Training on augumented user 70705 31/50 current_auc = 0.607487922705314
User 70705 AUC after training: 0.606280193236715
User 70705 does not improve AUC. Reverting changes.
Training on augumented user 20819 32/50 current_auc = 0.607487922705314
User 20819 AUC after training: 0.607487922705314
User 20819 does not improve AUC. Reverting changes.
Training on augumented user 123627 33/50 current_auc = 0.607487922705314
User 123627 AUC after training: 0.6086956521739131
User 123627 improves AUC. Keeping the model.
Training on augumented user 67439 34/50 current_auc = 0.6086956521739131
User 67439 AUC after training: 0.606280193236715
User 67439 does not improve AUC. Reverting changes.
Training on augumented user 97649 35/50 current_auc = 0.6086956521739131
User 97649 AUC after training: 0.607487922705314
User 97649 does not improve AUC. Reverting changes.
Training on augumented user 3795 36/50 current_auc = 0.6086956521739131
User 3795 AUC after training: 0.6111111111111112
User 3795 improves AUC. Keeping the model.
Training on augumented user 25747 37/50 current_auc = 0.6111111111111112
User 25747 AUC after training: 0.6111111111111112
User 25747 does not improve AUC. Reverting changes.
Training on augumented user 77205 38/50 current_auc = 0.6111111111111112
User 77205 AUC after training: 0.6099033816425121
User 77205 does not improve AUC. Reverting changes.
Training on augumented user 20613 39/50 current_auc = 0.6111111111111112
User 20613 AUC after training: 0.6086956521739131
User 20613 does not improve AUC. Reverting changes.
Training on augumented user 137730 40/50 current_auc = 0.6111111111111112
User 137730 AUC after training: 0.6111111111111112
User 137730 does not improve AUC. Reverting changes.
Training on augumented user 100215 41/50 current_auc = 0.6111111111111112
User 100215 AUC after training: 0.6111111111111112
User 100215 does not improve AUC. Reverting changes.
Training on augumented user 66866 42/50 current_auc = 0.6111111111111112
User 66866 AUC after training: 0.6086956521739131
User 66866 does not improve AUC. Reverting changes.
Training on augumented user 78951 43/50 current_auc = 0.6111111111111112
User 78951 AUC after training: 0.6123188405797101
User 78951 improves AUC. Keeping the model.
Training on augumented user 58966 44/50 current_auc = 0.6123188405797101
User 58966 AUC after training: 0.607487922705314
User 58966 does not improve AUC. Reverting changes.
Training on augumented user 41150 45/50 current_auc = 0.6123188405797101
User 41150 AUC after training: 0.6111111111111112
User 41150 does not improve AUC. Reverting changes.
Training on augumented user 50179 46/50 current_auc = 0.6123188405797101
User 50179 AUC after training: 0.6111111111111112
User 50179 does not improve AUC. Reverting changes.
Training on augumented user 59966 47/50 current_auc = 0.6123188405797101
User 59966 AUC after training: 0.6111111111111112
User 59966 does not improve AUC. Reverting changes.
Training on augumented user 66584 48/50 current_auc = 0.6123188405797101
User 66584 AUC after training: 0.6135265700483092
User 66584 improves AUC. Keeping the model.
Training on augumented user 38780 49/50 current_auc = 0.6135265700483092
User 38780 AUC after training: 0.6123188405797102
User 38780 does not improve AUC. Reverting changes.
[2024-12-02 17:42:24.802264] start test user 69923 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:25.620439] start test user 69923 9/568 recall augumented users by random, augumented_users = [98482, 74971, 7791, 113783, 4171, 135701, 54348, 83063, 28071, 52074, 108721, 99307, 44412, 87119, 3773, 68637, 50785, 69586, 71556, 131713, 26341, 135823, 1628, 75402, 127215, 57394, 81134, 18277, 60796, 122151, 96493, 125476, 49595, 59381, 87384, 130046, 60826, 37404, 101510, 81544, 12437, 110984, 16024, 12684, 118394, 43268, 43059, 46900, 91876, 12206]
[2024-12-02 17:42:25.637980] user = 69923 Cloud 9/568
[2024-12-02 17:42:25.651021] user = 69923 Local 9/568
[2024-12-02 17:42:25.697930] user = 69923 Local+ 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:28.500273] user = 69923 MPDA- 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6
Training on augumented user 98482 0/50 current_auc = 0.6
User 98482 AUC after training: 0.6
User 98482 does not improve AUC. Reverting changes.
Training on augumented user 74971 1/50 current_auc = 0.6
User 74971 AUC after training: 0.6
User 74971 does not improve AUC. Reverting changes.
Training on augumented user 7791 2/50 current_auc = 0.6
User 7791 AUC after training: 0.6
User 7791 does not improve AUC. Reverting changes.
Training on augumented user 113783 3/50 current_auc = 0.6
User 113783 AUC after training: 0.6
User 113783 does not improve AUC. Reverting changes.
Training on augumented user 4171 4/50 current_auc = 0.6
User 4171 AUC after training: 0.6
User 4171 does not improve AUC. Reverting changes.
Training on augumented user 135701 5/50 current_auc = 0.6
User 135701 AUC after training: 0.6
User 135701 does not improve AUC. Reverting changes.
Training on augumented user 54348 6/50 current_auc = 0.6
User 54348 AUC after training: 0.6
User 54348 does not improve AUC. Reverting changes.
Training on augumented user 83063 7/50 current_auc = 0.6
User 83063 AUC after training: 0.6
User 83063 does not improve AUC. Reverting changes.
Training on augumented user 28071 8/50 current_auc = 0.6
User 28071 AUC after training: 0.6
User 28071 does not improve AUC. Reverting changes.
Training on augumented user 52074 9/50 current_auc = 0.6
User 52074 AUC after training: 0.6
User 52074 does not improve AUC. Reverting changes.
Training on augumented user 108721 10/50 current_auc = 0.6
User 108721 AUC after training: 0.6
User 108721 does not improve AUC. Reverting changes.
Training on augumented user 99307 11/50 current_auc = 0.6
User 99307 AUC after training: 0.6
User 99307 does not improve AUC. Reverting changes.
Training on augumented user 44412 12/50 current_auc = 0.6
User 44412 AUC after training: 0.6
User 44412 does not improve AUC. Reverting changes.
Training on augumented user 87119 13/50 current_auc = 0.6
User 87119 AUC after training: 0.6
User 87119 does not improve AUC. Reverting changes.
Training on augumented user 3773 14/50 current_auc = 0.6
User 3773 AUC after training: 0.6
User 3773 does not improve AUC. Reverting changes.
Training on augumented user 68637 15/50 current_auc = 0.6
User 68637 AUC after training: 0.6
User 68637 does not improve AUC. Reverting changes.
Training on augumented user 50785 16/50 current_auc = 0.6
User 50785 AUC after training: 0.6
User 50785 does not improve AUC. Reverting changes.
Training on augumented user 69586 17/50 current_auc = 0.6
User 69586 AUC after training: 0.6
User 69586 does not improve AUC. Reverting changes.
Training on augumented user 71556 18/50 current_auc = 0.6
User 71556 AUC after training: 0.6
User 71556 does not improve AUC. Reverting changes.
Training on augumented user 131713 19/50 current_auc = 0.6
User 131713 AUC after training: 0.6
User 131713 does not improve AUC. Reverting changes.
Training on augumented user 26341 20/50 current_auc = 0.6
User 26341 AUC after training: 0.6
User 26341 does not improve AUC. Reverting changes.
Training on augumented user 135823 21/50 current_auc = 0.6
User 135823 AUC after training: 0.6
User 135823 does not improve AUC. Reverting changes.
Training on augumented user 1628 22/50 current_auc = 0.6
User 1628 AUC after training: 0.6
User 1628 does not improve AUC. Reverting changes.
Training on augumented user 75402 23/50 current_auc = 0.6
User 75402 AUC after training: 0.6
User 75402 does not improve AUC. Reverting changes.
Training on augumented user 127215 24/50 current_auc = 0.6
User 127215 AUC after training: 0.6
User 127215 does not improve AUC. Reverting changes.
Training on augumented user 57394 25/50 current_auc = 0.6
User 57394 AUC after training: 0.6
User 57394 does not improve AUC. Reverting changes.
Training on augumented user 81134 26/50 current_auc = 0.6
User 81134 AUC after training: 0.6
User 81134 does not improve AUC. Reverting changes.
Training on augumented user 18277 27/50 current_auc = 0.6
User 18277 AUC after training: 0.6
User 18277 does not improve AUC. Reverting changes.
Training on augumented user 60796 28/50 current_auc = 0.6
User 60796 AUC after training: 0.6
User 60796 does not improve AUC. Reverting changes.
Training on augumented user 122151 29/50 current_auc = 0.6
User 122151 AUC after training: 0.6
User 122151 does not improve AUC. Reverting changes.
Training on augumented user 96493 30/50 current_auc = 0.6
User 96493 AUC after training: 0.6
User 96493 does not improve AUC. Reverting changes.
Training on augumented user 125476 31/50 current_auc = 0.6
User 125476 AUC after training: 0.6
User 125476 does not improve AUC. Reverting changes.
Training on augumented user 49595 32/50 current_auc = 0.6
User 49595 AUC after training: 0.6
User 49595 does not improve AUC. Reverting changes.
Training on augumented user 59381 33/50 current_auc = 0.6
User 59381 AUC after training: 0.6
User 59381 does not improve AUC. Reverting changes.
Training on augumented user 87384 34/50 current_auc = 0.6
User 87384 AUC after training: 0.6
User 87384 does not improve AUC. Reverting changes.
Training on augumented user 130046 35/50 current_auc = 0.6
User 130046 AUC after training: 0.6
User 130046 does not improve AUC. Reverting changes.
Training on augumented user 60826 36/50 current_auc = 0.6
User 60826 AUC after training: 0.6
User 60826 does not improve AUC. Reverting changes.
Training on augumented user 37404 37/50 current_auc = 0.6
User 37404 AUC after training: 0.6
User 37404 does not improve AUC. Reverting changes.
Training on augumented user 101510 38/50 current_auc = 0.6
User 101510 AUC after training: 0.6
User 101510 does not improve AUC. Reverting changes.
Training on augumented user 81544 39/50 current_auc = 0.6
User 81544 AUC after training: 0.6
User 81544 does not improve AUC. Reverting changes.
Training on augumented user 12437 40/50 current_auc = 0.6
User 12437 AUC after training: 0.6
User 12437 does not improve AUC. Reverting changes.
Training on augumented user 110984 41/50 current_auc = 0.6
User 110984 AUC after training: 0.6
User 110984 does not improve AUC. Reverting changes.
Training on augumented user 16024 42/50 current_auc = 0.6
User 16024 AUC after training: 0.6
User 16024 does not improve AUC. Reverting changes.
Training on augumented user 12684 43/50 current_auc = 0.6
User 12684 AUC after training: 0.6
User 12684 does not improve AUC. Reverting changes.
Training on augumented user 118394 44/50 current_auc = 0.6
User 118394 AUC after training: 0.6
User 118394 does not improve AUC. Reverting changes.
Training on augumented user 43268 45/50 current_auc = 0.6
User 43268 AUC after training: 0.6
User 43268 does not improve AUC. Reverting changes.
Training on augumented user 43059 46/50 current_auc = 0.6
User 43059 AUC after training: 0.6
User 43059 does not improve AUC. Reverting changes.
Training on augumented user 46900 47/50 current_auc = 0.6
User 46900 AUC after training: 0.6
User 46900 does not improve AUC. Reverting changes.
Training on augumented user 91876 48/50 current_auc = 0.6
User 91876 AUC after training: 0.6
User 91876 does not improve AUC. Reverting changes.
Training on augumented user 12206 49/50 current_auc = 0.6
User 12206 AUC after training: 0.6
User 12206 does not improve AUC. Reverting changes.
[2024-12-02 17:42:58.433817] start test user 69957 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:58.967707] start test user 69957 10/568 recall augumented users by random, augumented_users = [93051, 88602, 4178, 119066, 70732, 86292, 40938, 10019, 119255, 70039, 35760, 80760, 73652, 29644, 131288, 34302, 8497, 112431, 93999, 77010, 72704, 111239, 73879, 107332, 16751, 38336, 32869, 24570, 110587, 60516, 129022, 132620, 111442, 82369, 8234, 32843, 37754, 116109, 131760, 49262, 101667, 18870, 17117, 49681, 78959, 97371, 124730, 11068, 86835, 123343]
[2024-12-02 17:42:58.982048] user = 69957 Cloud 10/568
[2024-12-02 17:42:58.996421] user = 69957 Local 10/568
[2024-12-02 17:42:59.050934] user = 69957 Local+ 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:01.830286] user = 69957 MPDA- 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5118312757201646
Training on augumented user 93051 0/50 current_auc = 0.5118312757201646
User 93051 AUC after training: 0.5123456790123456
User 93051 improves AUC. Keeping the model.
Training on augumented user 88602 1/50 current_auc = 0.5123456790123456
User 88602 AUC after training: 0.5118312757201646
User 88602 does not improve AUC. Reverting changes.
Training on augumented user 4178 2/50 current_auc = 0.5123456790123456
User 4178 AUC after training: 0.5123456790123456
User 4178 does not improve AUC. Reverting changes.
Training on augumented user 119066 3/50 current_auc = 0.5123456790123456
User 119066 AUC after training: 0.5123456790123457
User 119066 improves AUC. Keeping the model.
Training on augumented user 70732 4/50 current_auc = 0.5123456790123457
User 70732 AUC after training: 0.5123456790123456
User 70732 does not improve AUC. Reverting changes.
Training on augumented user 86292 5/50 current_auc = 0.5123456790123457
User 86292 AUC after training: 0.5123456790123457
User 86292 does not improve AUC. Reverting changes.
Training on augumented user 40938 6/50 current_auc = 0.5123456790123457
User 40938 AUC after training: 0.5180041152263375
User 40938 improves AUC. Keeping the model.
Training on augumented user 10019 7/50 current_auc = 0.5180041152263375
User 10019 AUC after training: 0.5164609053497942
User 10019 does not improve AUC. Reverting changes.
Training on augumented user 119255 8/50 current_auc = 0.5180041152263375
User 119255 AUC after training: 0.5180041152263374
User 119255 does not improve AUC. Reverting changes.
Training on augumented user 70039 9/50 current_auc = 0.5180041152263375
User 70039 AUC after training: 0.5159465020576133
User 70039 does not improve AUC. Reverting changes.
Training on augumented user 35760 10/50 current_auc = 0.5180041152263375
User 35760 AUC after training: 0.5164609053497942
User 35760 does not improve AUC. Reverting changes.
Training on augumented user 80760 11/50 current_auc = 0.5180041152263375
User 80760 AUC after training: 0.5154320987654322
User 80760 does not improve AUC. Reverting changes.
Training on augumented user 73652 12/50 current_auc = 0.5180041152263375
User 73652 AUC after training: 0.5169753086419753
User 73652 does not improve AUC. Reverting changes.
Training on augumented user 29644 13/50 current_auc = 0.5180041152263375
User 29644 AUC after training: 0.5180041152263374
User 29644 does not improve AUC. Reverting changes.
Training on augumented user 131288 14/50 current_auc = 0.5180041152263375
User 131288 AUC after training: 0.5164609053497943
User 131288 does not improve AUC. Reverting changes.
Training on augumented user 34302 15/50 current_auc = 0.5180041152263375
User 34302 AUC after training: 0.5164609053497943
User 34302 does not improve AUC. Reverting changes.
Training on augumented user 8497 16/50 current_auc = 0.5180041152263375
User 8497 AUC after training: 0.5180041152263374
User 8497 does not improve AUC. Reverting changes.
Training on augumented user 112431 17/50 current_auc = 0.5180041152263375
User 112431 AUC after training: 0.5149176954732511
User 112431 does not improve AUC. Reverting changes.
Training on augumented user 93999 18/50 current_auc = 0.5180041152263375
User 93999 AUC after training: 0.5174897119341564
User 93999 does not improve AUC. Reverting changes.
Training on augumented user 77010 19/50 current_auc = 0.5180041152263375
User 77010 AUC after training: 0.5174897119341564
User 77010 does not improve AUC. Reverting changes.
Training on augumented user 72704 20/50 current_auc = 0.5180041152263375
User 72704 AUC after training: 0.5169753086419753
User 72704 does not improve AUC. Reverting changes.
Training on augumented user 111239 21/50 current_auc = 0.5180041152263375
User 111239 AUC after training: 0.5180041152263374
User 111239 does not improve AUC. Reverting changes.
Training on augumented user 73879 22/50 current_auc = 0.5180041152263375
User 73879 AUC after training: 0.5180041152263375
User 73879 does not improve AUC. Reverting changes.
Training on augumented user 107332 23/50 current_auc = 0.5180041152263375
User 107332 AUC after training: 0.5174897119341564
User 107332 does not improve AUC. Reverting changes.
Training on augumented user 16751 24/50 current_auc = 0.5180041152263375
User 16751 AUC after training: 0.5164609053497943
User 16751 does not improve AUC. Reverting changes.
Training on augumented user 38336 25/50 current_auc = 0.5180041152263375
User 38336 AUC after training: 0.5180041152263375
User 38336 does not improve AUC. Reverting changes.
Training on augumented user 32869 26/50 current_auc = 0.5180041152263375
User 32869 AUC after training: 0.5185185185185185
User 32869 improves AUC. Keeping the model.
Training on augumented user 24570 27/50 current_auc = 0.5185185185185185
User 24570 AUC after training: 0.5169753086419753
User 24570 does not improve AUC. Reverting changes.
Training on augumented user 110587 28/50 current_auc = 0.5185185185185185
User 110587 AUC after training: 0.5159465020576132
User 110587 does not improve AUC. Reverting changes.
Training on augumented user 60516 29/50 current_auc = 0.5185185185185185
User 60516 AUC after training: 0.5195473251028806
User 60516 improves AUC. Keeping the model.
Training on augumented user 129022 30/50 current_auc = 0.5195473251028806
User 129022 AUC after training: 0.5190329218106996
User 129022 does not improve AUC. Reverting changes.
Training on augumented user 132620 31/50 current_auc = 0.5195473251028806
User 132620 AUC after training: 0.5200617283950617
User 132620 improves AUC. Keeping the model.
Training on augumented user 111442 32/50 current_auc = 0.5200617283950617
User 111442 AUC after training: 0.5210905349794238
User 111442 improves AUC. Keeping the model.
Training on augumented user 82369 33/50 current_auc = 0.5210905349794238
User 82369 AUC after training: 0.5195473251028806
User 82369 does not improve AUC. Reverting changes.
Training on augumented user 8234 34/50 current_auc = 0.5210905349794238
User 8234 AUC after training: 0.5190329218106995
User 8234 does not improve AUC. Reverting changes.
Training on augumented user 32843 35/50 current_auc = 0.5210905349794238
User 32843 AUC after training: 0.5174897119341564
User 32843 does not improve AUC. Reverting changes.
Training on augumented user 37754 36/50 current_auc = 0.5210905349794238
User 37754 AUC after training: 0.5210905349794238
User 37754 does not improve AUC. Reverting changes.
Training on augumented user 116109 37/50 current_auc = 0.5210905349794238
User 116109 AUC after training: 0.5195473251028806
User 116109 does not improve AUC. Reverting changes.
Training on augumented user 131760 38/50 current_auc = 0.5210905349794238
User 131760 AUC after training: 0.5185185185185185
User 131760 does not improve AUC. Reverting changes.
Training on augumented user 49262 39/50 current_auc = 0.5210905349794238
User 49262 AUC after training: 0.5190329218106995
User 49262 does not improve AUC. Reverting changes.
Training on augumented user 101667 40/50 current_auc = 0.5210905349794238
User 101667 AUC after training: 0.5190329218106996
User 101667 does not improve AUC. Reverting changes.
Training on augumented user 18870 41/50 current_auc = 0.5210905349794238
User 18870 AUC after training: 0.5200617283950617
User 18870 does not improve AUC. Reverting changes.
Training on augumented user 17117 42/50 current_auc = 0.5210905349794238
User 17117 AUC after training: 0.5190329218106995
User 17117 does not improve AUC. Reverting changes.
Training on augumented user 49681 43/50 current_auc = 0.5210905349794238
User 49681 AUC after training: 0.5185185185185185
User 49681 does not improve AUC. Reverting changes.
Training on augumented user 78959 44/50 current_auc = 0.5210905349794238
User 78959 AUC after training: 0.5205761316872427
User 78959 does not improve AUC. Reverting changes.
Training on augumented user 97371 45/50 current_auc = 0.5210905349794238
User 97371 AUC after training: 0.5200617283950617
User 97371 does not improve AUC. Reverting changes.
Training on augumented user 124730 46/50 current_auc = 0.5210905349794238
User 124730 AUC after training: 0.5195473251028807
User 124730 does not improve AUC. Reverting changes.
Training on augumented user 11068 47/50 current_auc = 0.5210905349794238
User 11068 AUC after training: 0.5185185185185185
User 11068 does not improve AUC. Reverting changes.
Training on augumented user 86835 48/50 current_auc = 0.5210905349794238
User 86835 AUC after training: 0.5190329218106996
User 86835 does not improve AUC. Reverting changes.
Training on augumented user 123343 49/50 current_auc = 0.5210905349794238
User 123343 AUC after training: 0.5190329218106995
User 123343 does not improve AUC. Reverting changes.
[2024-12-02 17:43:32.204097] start test user 69969 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:32.689841] start test user 69969 11/568 recall augumented users by random, augumented_users = [42525, 49202, 85259, 110453, 95874, 88550, 18919, 122124, 88459, 128032, 135270, 62451, 131784, 93539, 24818, 116889, 129238, 121338, 68576, 68038, 30331, 54330, 3048, 129873, 10324, 15441, 77083, 105025, 132037, 63364, 114523, 69534, 11430, 25534, 22244, 81576, 136263, 97870, 125532, 51666, 89174, 81745, 36841, 94899, 75645, 28899, 85743, 72686, 73637, 679]
[2024-12-02 17:43:32.705062] user = 69969 Cloud 11/568
[2024-12-02 17:43:32.726149] user = 69969 Local 11/568
[2024-12-02 17:43:32.805938] user = 69969 Local+ 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:34.608988] user = 69969 MPDA- 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 42525 0/50 current_auc = 0.8333333333333334
User 42525 AUC after training: 0.8333333333333334
User 42525 does not improve AUC. Reverting changes.
Training on augumented user 49202 1/50 current_auc = 0.8333333333333334
User 49202 AUC after training: 0.8333333333333334
User 49202 does not improve AUC. Reverting changes.
Training on augumented user 85259 2/50 current_auc = 0.8333333333333334
User 85259 AUC after training: 0.8333333333333334
User 85259 does not improve AUC. Reverting changes.
Training on augumented user 110453 3/50 current_auc = 0.8333333333333334
User 110453 AUC after training: 0.8333333333333334
User 110453 does not improve AUC. Reverting changes.
Training on augumented user 95874 4/50 current_auc = 0.8333333333333334
User 95874 AUC after training: 0.8333333333333334
User 95874 does not improve AUC. Reverting changes.
Training on augumented user 88550 5/50 current_auc = 0.8333333333333334
User 88550 AUC after training: 0.8333333333333334
User 88550 does not improve AUC. Reverting changes.
Training on augumented user 18919 6/50 current_auc = 0.8333333333333334
User 18919 AUC after training: 0.8333333333333334
User 18919 does not improve AUC. Reverting changes.
Training on augumented user 122124 7/50 current_auc = 0.8333333333333334
User 122124 AUC after training: 0.8333333333333334
User 122124 does not improve AUC. Reverting changes.
Training on augumented user 88459 8/50 current_auc = 0.8333333333333334
User 88459 AUC after training: 0.8333333333333334
User 88459 does not improve AUC. Reverting changes.
Training on augumented user 128032 9/50 current_auc = 0.8333333333333334
User 128032 AUC after training: 0.8333333333333334
User 128032 does not improve AUC. Reverting changes.
Training on augumented user 135270 10/50 current_auc = 0.8333333333333334
User 135270 AUC after training: 0.8333333333333334
User 135270 does not improve AUC. Reverting changes.
Training on augumented user 62451 11/50 current_auc = 0.8333333333333334
User 62451 AUC after training: 0.8333333333333334
User 62451 does not improve AUC. Reverting changes.
Training on augumented user 131784 12/50 current_auc = 0.8333333333333334
User 131784 AUC after training: 0.8333333333333334
User 131784 does not improve AUC. Reverting changes.
Training on augumented user 93539 13/50 current_auc = 0.8333333333333334
User 93539 AUC after training: 0.8333333333333334
User 93539 does not improve AUC. Reverting changes.
Training on augumented user 24818 14/50 current_auc = 0.8333333333333334
User 24818 AUC after training: 0.8333333333333334
User 24818 does not improve AUC. Reverting changes.
Training on augumented user 116889 15/50 current_auc = 0.8333333333333334
User 116889 AUC after training: 0.8333333333333334
User 116889 does not improve AUC. Reverting changes.
Training on augumented user 129238 16/50 current_auc = 0.8333333333333334
User 129238 AUC after training: 0.8333333333333334
User 129238 does not improve AUC. Reverting changes.
Training on augumented user 121338 17/50 current_auc = 0.8333333333333334
User 121338 AUC after training: 0.8333333333333334
User 121338 does not improve AUC. Reverting changes.
Training on augumented user 68576 18/50 current_auc = 0.8333333333333334
User 68576 AUC after training: 0.8333333333333334
User 68576 does not improve AUC. Reverting changes.
Training on augumented user 68038 19/50 current_auc = 0.8333333333333334
User 68038 AUC after training: 0.8333333333333334
User 68038 does not improve AUC. Reverting changes.
Training on augumented user 30331 20/50 current_auc = 0.8333333333333334
User 30331 AUC after training: 0.8333333333333334
User 30331 does not improve AUC. Reverting changes.
Training on augumented user 54330 21/50 current_auc = 0.8333333333333334
User 54330 AUC after training: 0.8333333333333334
User 54330 does not improve AUC. Reverting changes.
Training on augumented user 3048 22/50 current_auc = 0.8333333333333334
User 3048 AUC after training: 0.8333333333333334
User 3048 does not improve AUC. Reverting changes.
Training on augumented user 129873 23/50 current_auc = 0.8333333333333334
User 129873 AUC after training: 0.8333333333333334
User 129873 does not improve AUC. Reverting changes.
Training on augumented user 10324 24/50 current_auc = 0.8333333333333334
User 10324 AUC after training: 0.8333333333333334
User 10324 does not improve AUC. Reverting changes.
Training on augumented user 15441 25/50 current_auc = 0.8333333333333334
User 15441 AUC after training: 0.8333333333333334
User 15441 does not improve AUC. Reverting changes.
Training on augumented user 77083 26/50 current_auc = 0.8333333333333334
User 77083 AUC after training: 0.8333333333333334
User 77083 does not improve AUC. Reverting changes.
Training on augumented user 105025 27/50 current_auc = 0.8333333333333334
User 105025 AUC after training: 0.8333333333333334
User 105025 does not improve AUC. Reverting changes.
Training on augumented user 132037 28/50 current_auc = 0.8333333333333334
User 132037 AUC after training: 0.8333333333333334
User 132037 does not improve AUC. Reverting changes.
Training on augumented user 63364 29/50 current_auc = 0.8333333333333334
User 63364 AUC after training: 0.8333333333333334
User 63364 does not improve AUC. Reverting changes.
Training on augumented user 114523 30/50 current_auc = 0.8333333333333334
User 114523 AUC after training: 0.8333333333333334
User 114523 does not improve AUC. Reverting changes.
Training on augumented user 69534 31/50 current_auc = 0.8333333333333334
User 69534 AUC after training: 0.8333333333333334
User 69534 does not improve AUC. Reverting changes.
Training on augumented user 11430 32/50 current_auc = 0.8333333333333334
User 11430 AUC after training: 0.8333333333333334
User 11430 does not improve AUC. Reverting changes.
Training on augumented user 25534 33/50 current_auc = 0.8333333333333334
User 25534 AUC after training: 0.8333333333333334
User 25534 does not improve AUC. Reverting changes.
Training on augumented user 22244 34/50 current_auc = 0.8333333333333334
User 22244 AUC after training: 0.8333333333333334
User 22244 does not improve AUC. Reverting changes.
Training on augumented user 81576 35/50 current_auc = 0.8333333333333334
User 81576 AUC after training: 0.8333333333333334
User 81576 does not improve AUC. Reverting changes.
Training on augumented user 136263 36/50 current_auc = 0.8333333333333334
User 136263 AUC after training: 0.8333333333333334
User 136263 does not improve AUC. Reverting changes.
Training on augumented user 97870 37/50 current_auc = 0.8333333333333334
User 97870 AUC after training: 0.8333333333333334
User 97870 does not improve AUC. Reverting changes.
Training on augumented user 125532 38/50 current_auc = 0.8333333333333334
User 125532 AUC after training: 0.8333333333333334
User 125532 does not improve AUC. Reverting changes.
Training on augumented user 51666 39/50 current_auc = 0.8333333333333334
User 51666 AUC after training: 0.8333333333333334
User 51666 does not improve AUC. Reverting changes.
Training on augumented user 89174 40/50 current_auc = 0.8333333333333334
User 89174 AUC after training: 0.8333333333333334
User 89174 does not improve AUC. Reverting changes.
Training on augumented user 81745 41/50 current_auc = 0.8333333333333334
User 81745 AUC after training: 0.8333333333333334
User 81745 does not improve AUC. Reverting changes.
Training on augumented user 36841 42/50 current_auc = 0.8333333333333334
User 36841 AUC after training: 0.8333333333333334
User 36841 does not improve AUC. Reverting changes.
Training on augumented user 94899 43/50 current_auc = 0.8333333333333334
User 94899 AUC after training: 0.8333333333333334
User 94899 does not improve AUC. Reverting changes.
Training on augumented user 75645 44/50 current_auc = 0.8333333333333334
User 75645 AUC after training: 0.8333333333333334
User 75645 does not improve AUC. Reverting changes.
Training on augumented user 28899 45/50 current_auc = 0.8333333333333334
User 28899 AUC after training: 0.8333333333333334
User 28899 does not improve AUC. Reverting changes.
Training on augumented user 85743 46/50 current_auc = 0.8333333333333334
User 85743 AUC after training: 0.8333333333333334
User 85743 does not improve AUC. Reverting changes.
Training on augumented user 72686 47/50 current_auc = 0.8333333333333334
User 72686 AUC after training: 0.8333333333333334
User 72686 does not improve AUC. Reverting changes.
Training on augumented user 73637 48/50 current_auc = 0.8333333333333334
User 73637 AUC after training: 0.8333333333333334
User 73637 does not improve AUC. Reverting changes.
Training on augumented user 679 49/50 current_auc = 0.8333333333333334
User 679 AUC after training: 0.8333333333333334
User 679 does not improve AUC. Reverting changes.
[2024-12-02 17:43:58.962610] start test user 70021 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:59.443470] start test user 70021 12/568 recall augumented users by random, augumented_users = [112553, 39312, 98067, 105236, 134364, 63584, 114839, 77217, 29546, 104957, 98784, 47643, 10478, 126182, 52230, 20850, 16087, 132683, 32380, 106963, 9084, 83460, 83934, 116384, 100672, 83282, 103173, 24206, 61238, 83877, 77797, 66572, 89336, 118908, 96248, 40861, 28297, 70647, 27079, 54634, 61853, 34006, 85032, 130393, 35235, 48844, 85182, 57885, 79373, 59723]
[2024-12-02 17:43:59.458805] user = 70021 Cloud 12/568
[2024-12-02 17:43:59.469167] user = 70021 Local 12/568
[2024-12-02 17:43:59.515666] user = 70021 Local+ 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:01.091342] user = 70021 MPDA- 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8631578947368421
Training on augumented user 112553 0/50 current_auc = 0.8631578947368421
User 112553 AUC after training: 0.8578947368421053
User 112553 does not improve AUC. Reverting changes.
Training on augumented user 39312 1/50 current_auc = 0.8631578947368421
User 39312 AUC after training: 0.8631578947368421
User 39312 does not improve AUC. Reverting changes.
Training on augumented user 98067 2/50 current_auc = 0.8631578947368421
User 98067 AUC after training: 0.8789473684210527
User 98067 improves AUC. Keeping the model.
Training on augumented user 105236 3/50 current_auc = 0.8789473684210527
User 105236 AUC after training: 0.8789473684210527
User 105236 does not improve AUC. Reverting changes.
Training on augumented user 134364 4/50 current_auc = 0.8789473684210527
User 134364 AUC after training: 0.8789473684210527
User 134364 does not improve AUC. Reverting changes.
Training on augumented user 63584 5/50 current_auc = 0.8789473684210527
User 63584 AUC after training: 0.8789473684210527
User 63584 does not improve AUC. Reverting changes.
Training on augumented user 114839 6/50 current_auc = 0.8789473684210527
User 114839 AUC after training: 0.8789473684210527
User 114839 does not improve AUC. Reverting changes.
Training on augumented user 77217 7/50 current_auc = 0.8789473684210527
User 77217 AUC after training: 0.8789473684210527
User 77217 does not improve AUC. Reverting changes.
Training on augumented user 29546 8/50 current_auc = 0.8789473684210527
User 29546 AUC after training: 0.8789473684210527
User 29546 does not improve AUC. Reverting changes.
Training on augumented user 104957 9/50 current_auc = 0.8789473684210527
User 104957 AUC after training: 0.8789473684210527
User 104957 does not improve AUC. Reverting changes.
Training on augumented user 98784 10/50 current_auc = 0.8789473684210527
User 98784 AUC after training: 0.8736842105263158
User 98784 does not improve AUC. Reverting changes.
Training on augumented user 47643 11/50 current_auc = 0.8789473684210527
User 47643 AUC after training: 0.8631578947368421
User 47643 does not improve AUC. Reverting changes.
Training on augumented user 10478 12/50 current_auc = 0.8789473684210527
User 10478 AUC after training: 0.8789473684210527
User 10478 does not improve AUC. Reverting changes.
Training on augumented user 126182 13/50 current_auc = 0.8789473684210527
User 126182 AUC after training: 0.8789473684210527
User 126182 does not improve AUC. Reverting changes.
Training on augumented user 52230 14/50 current_auc = 0.8789473684210527
User 52230 AUC after training: 0.868421052631579
User 52230 does not improve AUC. Reverting changes.
Training on augumented user 20850 15/50 current_auc = 0.8789473684210527
User 20850 AUC after training: 0.8736842105263158
User 20850 does not improve AUC. Reverting changes.
Training on augumented user 16087 16/50 current_auc = 0.8789473684210527
User 16087 AUC after training: 0.8789473684210527
User 16087 does not improve AUC. Reverting changes.
Training on augumented user 132683 17/50 current_auc = 0.8789473684210527
User 132683 AUC after training: 0.8789473684210527
User 132683 does not improve AUC. Reverting changes.
Training on augumented user 32380 18/50 current_auc = 0.8789473684210527
User 32380 AUC after training: 0.8789473684210527
User 32380 does not improve AUC. Reverting changes.
Training on augumented user 106963 19/50 current_auc = 0.8789473684210527
User 106963 AUC after training: 0.8789473684210527
User 106963 does not improve AUC. Reverting changes.
Training on augumented user 9084 20/50 current_auc = 0.8789473684210527
User 9084 AUC after training: 0.8789473684210527
User 9084 does not improve AUC. Reverting changes.
Training on augumented user 83460 21/50 current_auc = 0.8789473684210527
User 83460 AUC after training: 0.8789473684210527
User 83460 does not improve AUC. Reverting changes.
Training on augumented user 83934 22/50 current_auc = 0.8789473684210527
User 83934 AUC after training: 0.8789473684210527
User 83934 does not improve AUC. Reverting changes.
Training on augumented user 116384 23/50 current_auc = 0.8789473684210527
User 116384 AUC after training: 0.8789473684210527
User 116384 does not improve AUC. Reverting changes.
Training on augumented user 100672 24/50 current_auc = 0.8789473684210527
User 100672 AUC after training: 0.8789473684210527
User 100672 does not improve AUC. Reverting changes.
Training on augumented user 83282 25/50 current_auc = 0.8789473684210527
User 83282 AUC after training: 0.868421052631579
User 83282 does not improve AUC. Reverting changes.
Training on augumented user 103173 26/50 current_auc = 0.8789473684210527
User 103173 AUC after training: 0.8736842105263158
User 103173 does not improve AUC. Reverting changes.
Training on augumented user 24206 27/50 current_auc = 0.8789473684210527
User 24206 AUC after training: 0.8736842105263158
User 24206 does not improve AUC. Reverting changes.
Training on augumented user 61238 28/50 current_auc = 0.8789473684210527
User 61238 AUC after training: 0.8789473684210527
User 61238 does not improve AUC. Reverting changes.
Training on augumented user 83877 29/50 current_auc = 0.8789473684210527
User 83877 AUC after training: 0.8789473684210527
User 83877 does not improve AUC. Reverting changes.
Training on augumented user 77797 30/50 current_auc = 0.8789473684210527
User 77797 AUC after training: 0.8842105263157896
User 77797 improves AUC. Keeping the model.
Training on augumented user 66572 31/50 current_auc = 0.8842105263157896
User 66572 AUC after training: 0.8894736842105263
User 66572 improves AUC. Keeping the model.
Training on augumented user 89336 32/50 current_auc = 0.8894736842105263
User 89336 AUC after training: 0.8894736842105263
User 89336 does not improve AUC. Reverting changes.
Training on augumented user 118908 33/50 current_auc = 0.8894736842105263
User 118908 AUC after training: 0.8789473684210526
User 118908 does not improve AUC. Reverting changes.
Training on augumented user 96248 34/50 current_auc = 0.8894736842105263
User 96248 AUC after training: 0.8842105263157894
User 96248 does not improve AUC. Reverting changes.
Training on augumented user 40861 35/50 current_auc = 0.8894736842105263
User 40861 AUC after training: 0.8789473684210527
User 40861 does not improve AUC. Reverting changes.
Training on augumented user 28297 36/50 current_auc = 0.8894736842105263
User 28297 AUC after training: 0.8736842105263158
User 28297 does not improve AUC. Reverting changes.
Training on augumented user 70647 37/50 current_auc = 0.8894736842105263
User 70647 AUC after training: 0.8894736842105263
User 70647 does not improve AUC. Reverting changes.
Training on augumented user 27079 38/50 current_auc = 0.8894736842105263
User 27079 AUC after training: 0.8894736842105263
User 27079 does not improve AUC. Reverting changes.
Training on augumented user 54634 39/50 current_auc = 0.8894736842105263
User 54634 AUC after training: 0.8894736842105263
User 54634 does not improve AUC. Reverting changes.
Training on augumented user 61853 40/50 current_auc = 0.8894736842105263
User 61853 AUC after training: 0.8842105263157894
User 61853 does not improve AUC. Reverting changes.
Training on augumented user 34006 41/50 current_auc = 0.8894736842105263
User 34006 AUC after training: 0.8894736842105263
User 34006 does not improve AUC. Reverting changes.
Training on augumented user 85032 42/50 current_auc = 0.8894736842105263
User 85032 AUC after training: 0.8789473684210527
User 85032 does not improve AUC. Reverting changes.
Training on augumented user 130393 43/50 current_auc = 0.8894736842105263
User 130393 AUC after training: 0.8894736842105263
User 130393 does not improve AUC. Reverting changes.
Training on augumented user 35235 44/50 current_auc = 0.8894736842105263
User 35235 AUC after training: 0.8842105263157896
User 35235 does not improve AUC. Reverting changes.
Training on augumented user 48844 45/50 current_auc = 0.8894736842105263
User 48844 AUC after training: 0.8842105263157896
User 48844 does not improve AUC. Reverting changes.
Training on augumented user 85182 46/50 current_auc = 0.8894736842105263
User 85182 AUC after training: 0.8789473684210527
User 85182 does not improve AUC. Reverting changes.
Training on augumented user 57885 47/50 current_auc = 0.8894736842105263
User 57885 AUC after training: 0.8842105263157894
User 57885 does not improve AUC. Reverting changes.
Training on augumented user 79373 48/50 current_auc = 0.8894736842105263
User 79373 AUC after training: 0.8842105263157896
User 79373 does not improve AUC. Reverting changes.
Training on augumented user 59723 49/50 current_auc = 0.8894736842105263
User 59723 AUC after training: 0.8842105263157896
User 59723 does not improve AUC. Reverting changes.
[2024-12-02 17:44:31.451659] start test user 70026 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:31.916403] start test user 70026 13/568 recall augumented users by random, augumented_users = [89043, 3134, 920, 14255, 122234, 108288, 125115, 106219, 101012, 60055, 61818, 26408, 107024, 102907, 36496, 12843, 42248, 104653, 112282, 76185, 87577, 12298, 64834, 38594, 15692, 88330, 85019, 104984, 46800, 102510, 49269, 126729, 5156, 121405, 106040, 6570, 89055, 74738, 93241, 24961, 58560, 48452, 5686, 124713, 131046, 65970, 18312, 47744, 137517, 106034]
[2024-12-02 17:44:31.930741] user = 70026 Cloud 13/568
[2024-12-02 17:44:31.951027] user = 70026 Local 13/568
[2024-12-02 17:44:32.008166] user = 70026 Local+ 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:34.416720] user = 70026 MPDA- 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4935064935064935
Training on augumented user 89043 0/50 current_auc = 0.4935064935064935
User 89043 AUC after training: 0.4935064935064935
User 89043 does not improve AUC. Reverting changes.
Training on augumented user 3134 1/50 current_auc = 0.4935064935064935
User 3134 AUC after training: 0.4935064935064935
User 3134 does not improve AUC. Reverting changes.
Training on augumented user 920 2/50 current_auc = 0.4935064935064935
User 920 AUC after training: 0.512987012987013
User 920 improves AUC. Keeping the model.
Training on augumented user 14255 3/50 current_auc = 0.512987012987013
User 14255 AUC after training: 0.5064935064935066
User 14255 does not improve AUC. Reverting changes.
Training on augumented user 122234 4/50 current_auc = 0.512987012987013
User 122234 AUC after training: 0.512987012987013
User 122234 does not improve AUC. Reverting changes.
Training on augumented user 108288 5/50 current_auc = 0.512987012987013
User 108288 AUC after training: 0.4935064935064935
User 108288 does not improve AUC. Reverting changes.
Training on augumented user 125115 6/50 current_auc = 0.512987012987013
User 125115 AUC after training: 0.512987012987013
User 125115 does not improve AUC. Reverting changes.
Training on augumented user 106219 7/50 current_auc = 0.512987012987013
User 106219 AUC after training: 0.512987012987013
User 106219 does not improve AUC. Reverting changes.
Training on augumented user 101012 8/50 current_auc = 0.512987012987013
User 101012 AUC after training: 0.512987012987013
User 101012 does not improve AUC. Reverting changes.
Training on augumented user 60055 9/50 current_auc = 0.512987012987013
User 60055 AUC after training: 0.512987012987013
User 60055 does not improve AUC. Reverting changes.
Training on augumented user 61818 10/50 current_auc = 0.512987012987013
User 61818 AUC after training: 0.512987012987013
User 61818 does not improve AUC. Reverting changes.
Training on augumented user 26408 11/50 current_auc = 0.512987012987013
User 26408 AUC after training: 0.512987012987013
User 26408 does not improve AUC. Reverting changes.
Training on augumented user 107024 12/50 current_auc = 0.512987012987013
User 107024 AUC after training: 0.5194805194805194
User 107024 improves AUC. Keeping the model.
Training on augumented user 102907 13/50 current_auc = 0.5194805194805194
User 102907 AUC after training: 0.525974025974026
User 102907 improves AUC. Keeping the model.
Training on augumented user 36496 14/50 current_auc = 0.525974025974026
User 36496 AUC after training: 0.5064935064935066
User 36496 does not improve AUC. Reverting changes.
Training on augumented user 12843 15/50 current_auc = 0.525974025974026
User 12843 AUC after training: 0.525974025974026
User 12843 does not improve AUC. Reverting changes.
Training on augumented user 42248 16/50 current_auc = 0.525974025974026
User 42248 AUC after training: 0.5064935064935066
User 42248 does not improve AUC. Reverting changes.
Training on augumented user 104653 17/50 current_auc = 0.525974025974026
User 104653 AUC after training: 0.512987012987013
User 104653 does not improve AUC. Reverting changes.
Training on augumented user 112282 18/50 current_auc = 0.525974025974026
User 112282 AUC after training: 0.5194805194805194
User 112282 does not improve AUC. Reverting changes.
Training on augumented user 76185 19/50 current_auc = 0.525974025974026
User 76185 AUC after training: 0.512987012987013
User 76185 does not improve AUC. Reverting changes.
Training on augumented user 87577 20/50 current_auc = 0.525974025974026
User 87577 AUC after training: 0.5
User 87577 does not improve AUC. Reverting changes.
Training on augumented user 12298 21/50 current_auc = 0.525974025974026
User 12298 AUC after training: 0.525974025974026
User 12298 does not improve AUC. Reverting changes.
Training on augumented user 64834 22/50 current_auc = 0.525974025974026
User 64834 AUC after training: 0.5194805194805194
User 64834 does not improve AUC. Reverting changes.
Training on augumented user 38594 23/50 current_auc = 0.525974025974026
User 38594 AUC after training: 0.5194805194805194
User 38594 does not improve AUC. Reverting changes.
Training on augumented user 15692 24/50 current_auc = 0.525974025974026
User 15692 AUC after training: 0.525974025974026
User 15692 does not improve AUC. Reverting changes.
Training on augumented user 88330 25/50 current_auc = 0.525974025974026
User 88330 AUC after training: 0.5194805194805194
User 88330 does not improve AUC. Reverting changes.
Training on augumented user 85019 26/50 current_auc = 0.525974025974026
User 85019 AUC after training: 0.525974025974026
User 85019 does not improve AUC. Reverting changes.
Training on augumented user 104984 27/50 current_auc = 0.525974025974026
User 104984 AUC after training: 0.512987012987013
User 104984 does not improve AUC. Reverting changes.
Training on augumented user 46800 28/50 current_auc = 0.525974025974026
User 46800 AUC after training: 0.5194805194805194
User 46800 does not improve AUC. Reverting changes.
Training on augumented user 102510 29/50 current_auc = 0.525974025974026
User 102510 AUC after training: 0.5064935064935066
User 102510 does not improve AUC. Reverting changes.
Training on augumented user 49269 30/50 current_auc = 0.525974025974026
User 49269 AUC after training: 0.5064935064935066
User 49269 does not improve AUC. Reverting changes.
Training on augumented user 126729 31/50 current_auc = 0.525974025974026
User 126729 AUC after training: 0.5
User 126729 does not improve AUC. Reverting changes.
Training on augumented user 5156 32/50 current_auc = 0.525974025974026
User 5156 AUC after training: 0.5194805194805194
User 5156 does not improve AUC. Reverting changes.
Training on augumented user 121405 33/50 current_auc = 0.525974025974026
User 121405 AUC after training: 0.525974025974026
User 121405 does not improve AUC. Reverting changes.
Training on augumented user 106040 34/50 current_auc = 0.525974025974026
User 106040 AUC after training: 0.525974025974026
User 106040 does not improve AUC. Reverting changes.
Training on augumented user 6570 35/50 current_auc = 0.525974025974026
User 6570 AUC after training: 0.5064935064935066
User 6570 does not improve AUC. Reverting changes.
Training on augumented user 89055 36/50 current_auc = 0.525974025974026
User 89055 AUC after training: 0.512987012987013
User 89055 does not improve AUC. Reverting changes.
Training on augumented user 74738 37/50 current_auc = 0.525974025974026
User 74738 AUC after training: 0.5194805194805194
User 74738 does not improve AUC. Reverting changes.
Training on augumented user 93241 38/50 current_auc = 0.525974025974026
User 93241 AUC after training: 0.525974025974026
User 93241 does not improve AUC. Reverting changes.
Training on augumented user 24961 39/50 current_auc = 0.525974025974026
User 24961 AUC after training: 0.525974025974026
User 24961 does not improve AUC. Reverting changes.
Training on augumented user 58560 40/50 current_auc = 0.525974025974026
User 58560 AUC after training: 0.525974025974026
User 58560 does not improve AUC. Reverting changes.
Training on augumented user 48452 41/50 current_auc = 0.525974025974026
User 48452 AUC after training: 0.525974025974026
User 48452 does not improve AUC. Reverting changes.
Training on augumented user 5686 42/50 current_auc = 0.525974025974026
User 5686 AUC after training: 0.5064935064935066
User 5686 does not improve AUC. Reverting changes.
Training on augumented user 124713 43/50 current_auc = 0.525974025974026
User 124713 AUC after training: 0.5064935064935066
User 124713 does not improve AUC. Reverting changes.
Training on augumented user 131046 44/50 current_auc = 0.525974025974026
User 131046 AUC after training: 0.525974025974026
User 131046 does not improve AUC. Reverting changes.
Training on augumented user 65970 45/50 current_auc = 0.525974025974026
User 65970 AUC after training: 0.525974025974026
User 65970 does not improve AUC. Reverting changes.
Training on augumented user 18312 46/50 current_auc = 0.525974025974026
User 18312 AUC after training: 0.5194805194805194
User 18312 does not improve AUC. Reverting changes.
Training on augumented user 47744 47/50 current_auc = 0.525974025974026
User 47744 AUC after training: 0.5194805194805194
User 47744 does not improve AUC. Reverting changes.
Training on augumented user 137517 48/50 current_auc = 0.525974025974026
User 137517 AUC after training: 0.525974025974026
User 137517 does not improve AUC. Reverting changes.
Training on augumented user 106034 49/50 current_auc = 0.525974025974026
User 106034 AUC after training: 0.525974025974026
User 106034 does not improve AUC. Reverting changes.
[2024-12-02 17:45:03.807684] start test user 70068 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:04.506691] start test user 70068 14/568 recall augumented users by random, augumented_users = [68795, 26881, 27669, 67531, 135, 87057, 87051, 118990, 4421, 76900, 112816, 65025, 21107, 101129, 77743, 54149, 117293, 8430, 56555, 63056, 10978, 97339, 111377, 113650, 44797, 116384, 16782, 76788, 17295, 112971, 66308, 93678, 7604, 106026, 113494, 91686, 64961, 25305, 103207, 63775, 124973, 94057, 6503, 100077, 45882, 45106, 39556, 126890, 135425, 63806]
[2024-12-02 17:45:04.522399] user = 70068 Cloud 14/568
[2024-12-02 17:45:04.561052] user = 70068 Local 14/568
[2024-12-02 17:45:04.711606] user = 70068 Local+ 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:07.666280] user = 70068 MPDA- 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7286721504112809
Training on augumented user 68795 0/50 current_auc = 0.7286721504112809
User 68795 AUC after training: 0.7288288288288287
User 68795 improves AUC. Keeping the model.
Training on augumented user 26881 1/50 current_auc = 0.7288288288288287
User 26881 AUC after training: 0.7293380336858599
User 26881 improves AUC. Keeping the model.
Training on augumented user 27669 2/50 current_auc = 0.7293380336858599
User 27669 AUC after training: 0.7300430865648256
User 27669 improves AUC. Keeping the model.
Training on augumented user 67531 3/50 current_auc = 0.7300430865648256
User 67531 AUC after training: 0.7297297297297297
User 67531 does not improve AUC. Reverting changes.
Training on augumented user 135 4/50 current_auc = 0.7300430865648256
User 135 AUC after training: 0.7297297297297297
User 135 does not improve AUC. Reverting changes.
Training on augumented user 87057 5/50 current_auc = 0.7300430865648256
User 87057 AUC after training: 0.7297297297297297
User 87057 does not improve AUC. Reverting changes.
Training on augumented user 87051 6/50 current_auc = 0.7300430865648256
User 87051 AUC after training: 0.7300430865648256
User 87051 does not improve AUC. Reverting changes.
Training on augumented user 118990 7/50 current_auc = 0.7300430865648256
User 118990 AUC after training: 0.7297297297297298
User 118990 does not improve AUC. Reverting changes.
Training on augumented user 4421 8/50 current_auc = 0.7300430865648256
User 4421 AUC after training: 0.7296513905209557
User 4421 does not improve AUC. Reverting changes.
Training on augumented user 76900 9/50 current_auc = 0.7300430865648256
User 76900 AUC after training: 0.7298080689385038
User 76900 does not improve AUC. Reverting changes.
Training on augumented user 112816 10/50 current_auc = 0.7300430865648256
User 112816 AUC after training: 0.7298080689385037
User 112816 does not improve AUC. Reverting changes.
Training on augumented user 65025 11/50 current_auc = 0.7300430865648256
User 65025 AUC after training: 0.7292988640814727
User 65025 does not improve AUC. Reverting changes.
Training on augumented user 21107 12/50 current_auc = 0.7300430865648256
User 21107 AUC after training: 0.7295730513121818
User 21107 does not improve AUC. Reverting changes.
Training on augumented user 101129 13/50 current_auc = 0.7300430865648256
User 101129 AUC after training: 0.7306306306306307
User 101129 improves AUC. Keeping the model.
Training on augumented user 77743 14/50 current_auc = 0.7306306306306307
User 77743 AUC after training: 0.7296905601253428
User 77743 does not improve AUC. Reverting changes.
Training on augumented user 54149 15/50 current_auc = 0.7306306306306307
User 54149 AUC after training: 0.7307873090481786
User 54149 improves AUC. Keeping the model.
Training on augumented user 117293 16/50 current_auc = 0.7307873090481786
User 117293 AUC after training: 0.7305522914218566
User 117293 does not improve AUC. Reverting changes.
Training on augumented user 8430 17/50 current_auc = 0.7307873090481786
User 8430 AUC after training: 0.7303172737955347
User 8430 does not improve AUC. Reverting changes.
Training on augumented user 56555 18/50 current_auc = 0.7307873090481786
User 56555 AUC after training: 0.7304739522130826
User 56555 does not improve AUC. Reverting changes.
Training on augumented user 63056 19/50 current_auc = 0.7307873090481786
User 63056 AUC after training: 0.7307089698394047
User 63056 does not improve AUC. Reverting changes.
Training on augumented user 10978 20/50 current_auc = 0.7307873090481786
User 10978 AUC after training: 0.7314140227183705
User 10978 improves AUC. Keeping the model.
Training on augumented user 97339 21/50 current_auc = 0.7314140227183705
User 97339 AUC after training: 0.7304739522130826
User 97339 does not improve AUC. Reverting changes.
Training on augumented user 111377 22/50 current_auc = 0.7314140227183705
User 111377 AUC after training: 0.7315707011359185
User 111377 improves AUC. Keeping the model.
Training on augumented user 113650 23/50 current_auc = 0.7315707011359185
User 113650 AUC after training: 0.7305914610262436
User 113650 does not improve AUC. Reverting changes.
Training on augumented user 44797 24/50 current_auc = 0.7315707011359185
User 44797 AUC after training: 0.7310614962788877
User 44797 does not improve AUC. Reverting changes.
Training on augumented user 116384 25/50 current_auc = 0.7315707011359185
User 116384 AUC after training: 0.7309439874657266
User 116384 does not improve AUC. Reverting changes.
Training on augumented user 16782 26/50 current_auc = 0.7315707011359185
User 16782 AUC after training: 0.7313356835095967
User 16782 does not improve AUC. Reverting changes.
Training on augumented user 76788 27/50 current_auc = 0.7315707011359185
User 76788 AUC after training: 0.7312965139052096
User 76788 does not improve AUC. Reverting changes.
Training on augumented user 17295 28/50 current_auc = 0.7315707011359185
User 17295 AUC after training: 0.7321974148061104
User 17295 improves AUC. Keeping the model.
Training on augumented user 112971 29/50 current_auc = 0.7321974148061104
User 112971 AUC after training: 0.7320799059929495
User 112971 does not improve AUC. Reverting changes.
Training on augumented user 66308 30/50 current_auc = 0.7321974148061104
User 66308 AUC after training: 0.7314531923227575
User 66308 does not improve AUC. Reverting changes.
Training on augumented user 93678 31/50 current_auc = 0.7321974148061104
User 93678 AUC after training: 0.7316882099490796
User 93678 does not improve AUC. Reverting changes.
Training on augumented user 7604 32/50 current_auc = 0.7321974148061104
User 7604 AUC after training: 0.7307481394437917
User 7604 does not improve AUC. Reverting changes.
Training on augumented user 106026 33/50 current_auc = 0.7321974148061104
User 106026 AUC after training: 0.7316098707403056
User 106026 does not improve AUC. Reverting changes.
Training on augumented user 113494 34/50 current_auc = 0.7321974148061104
User 113494 AUC after training: 0.7315315315315316
User 113494 does not improve AUC. Reverting changes.
Training on augumented user 91686 35/50 current_auc = 0.7321974148061104
User 91686 AUC after training: 0.7319623971797885
User 91686 does not improve AUC. Reverting changes.
Training on augumented user 64961 36/50 current_auc = 0.7321974148061104
User 64961 AUC after training: 0.7323932628280455
User 64961 improves AUC. Keeping the model.
Training on augumented user 25305 37/50 current_auc = 0.7323932628280455
User 25305 AUC after training: 0.7329416372894634
User 25305 improves AUC. Keeping the model.
Training on augumented user 103207 38/50 current_auc = 0.7329416372894634
User 103207 AUC after training: 0.7301997649823737
User 103207 does not improve AUC. Reverting changes.
Training on augumented user 63775 39/50 current_auc = 0.7329416372894634
User 63775 AUC after training: 0.7327066196631414
User 63775 does not improve AUC. Reverting changes.
Training on augumented user 124973 40/50 current_auc = 0.7329416372894634
User 124973 AUC after training: 0.7321974148061104
User 124973 does not improve AUC. Reverting changes.
Training on augumented user 94057 41/50 current_auc = 0.7329416372894634
User 94057 AUC after training: 0.7323149236192715
User 94057 does not improve AUC. Reverting changes.
Training on augumented user 6503 42/50 current_auc = 0.7329416372894634
User 6503 AUC after training: 0.7327849588719155
User 6503 does not improve AUC. Reverting changes.
Training on augumented user 100077 43/50 current_auc = 0.7329416372894634
User 100077 AUC after training: 0.7303564433999217
User 100077 does not improve AUC. Reverting changes.
Training on augumented user 45882 44/50 current_auc = 0.7329416372894634
User 45882 AUC after training: 0.7322757540148843
User 45882 does not improve AUC. Reverting changes.
Training on augumented user 45106 45/50 current_auc = 0.7329416372894634
User 45106 AUC after training: 0.7325499412455934
User 45106 does not improve AUC. Reverting changes.
Training on augumented user 39556 46/50 current_auc = 0.7329416372894634
User 39556 AUC after training: 0.7295338817077948
User 39556 does not improve AUC. Reverting changes.
Training on augumented user 126890 47/50 current_auc = 0.7329416372894634
User 126890 AUC after training: 0.7330983157070114
User 126890 improves AUC. Keeping the model.
Training on augumented user 135425 48/50 current_auc = 0.7330983157070114
User 135425 AUC after training: 0.7317665491578536
User 135425 does not improve AUC. Reverting changes.
Training on augumented user 63806 49/50 current_auc = 0.7330983157070114
User 63806 AUC after training: 0.7321974148061106
User 63806 does not improve AUC. Reverting changes.
[2024-12-02 17:45:34.952807] start test user 70108 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:35.633420] start test user 70108 15/568 recall augumented users by random, augumented_users = [11779, 405, 115467, 127052, 56726, 110738, 116225, 56767, 85647, 85725, 86840, 56051, 136888, 77769, 5684, 52965, 65394, 48210, 51993, 137612, 9325, 83006, 13318, 67042, 10596, 91472, 88308, 52581, 111789, 32698, 57865, 128853, 3045, 28018, 119496, 25178, 84730, 85577, 70602, 54259, 108843, 71131, 56107, 77625, 100958, 28937, 89392, 13414, 133653, 19707]
[2024-12-02 17:45:35.648333] user = 70108 Cloud 15/568
[2024-12-02 17:45:35.658201] user = 70108 Local 15/568
[2024-12-02 17:45:35.738211] user = 70108 Local+ 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:38.206677] user = 70108 MPDA- 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.85
Training on augumented user 11779 0/50 current_auc = 0.85
User 11779 AUC after training: 0.85
User 11779 does not improve AUC. Reverting changes.
Training on augumented user 405 1/50 current_auc = 0.85
User 405 AUC after training: 0.85
User 405 does not improve AUC. Reverting changes.
Training on augumented user 115467 2/50 current_auc = 0.85
User 115467 AUC after training: 0.8454545454545453
User 115467 does not improve AUC. Reverting changes.
Training on augumented user 127052 3/50 current_auc = 0.85
User 127052 AUC after training: 0.85
User 127052 does not improve AUC. Reverting changes.
Training on augumented user 56726 4/50 current_auc = 0.85
User 56726 AUC after training: 0.8409090909090909
User 56726 does not improve AUC. Reverting changes.
Training on augumented user 110738 5/50 current_auc = 0.85
User 110738 AUC after training: 0.85
User 110738 does not improve AUC. Reverting changes.
Training on augumented user 116225 6/50 current_auc = 0.85
User 116225 AUC after training: 0.8545454545454545
User 116225 improves AUC. Keeping the model.
Training on augumented user 56767 7/50 current_auc = 0.8545454545454545
User 56767 AUC after training: 0.8545454545454545
User 56767 does not improve AUC. Reverting changes.
Training on augumented user 85647 8/50 current_auc = 0.8545454545454545
User 85647 AUC after training: 0.8499999999999999
User 85647 does not improve AUC. Reverting changes.
Training on augumented user 85725 9/50 current_auc = 0.8545454545454545
User 85725 AUC after training: 0.8454545454545455
User 85725 does not improve AUC. Reverting changes.
Training on augumented user 86840 10/50 current_auc = 0.8545454545454545
User 86840 AUC after training: 0.8454545454545455
User 86840 does not improve AUC. Reverting changes.
Training on augumented user 56051 11/50 current_auc = 0.8545454545454545
User 56051 AUC after training: 0.8499999999999999
User 56051 does not improve AUC. Reverting changes.
Training on augumented user 136888 12/50 current_auc = 0.8545454545454545
User 136888 AUC after training: 0.8499999999999999
User 136888 does not improve AUC. Reverting changes.
Training on augumented user 77769 13/50 current_auc = 0.8545454545454545
User 77769 AUC after training: 0.8545454545454545
User 77769 does not improve AUC. Reverting changes.
Training on augumented user 5684 14/50 current_auc = 0.8545454545454545
User 5684 AUC after training: 0.85
User 5684 does not improve AUC. Reverting changes.
Training on augumented user 52965 15/50 current_auc = 0.8545454545454545
User 52965 AUC after training: 0.8454545454545453
User 52965 does not improve AUC. Reverting changes.
Training on augumented user 65394 16/50 current_auc = 0.8545454545454545
User 65394 AUC after training: 0.85
User 65394 does not improve AUC. Reverting changes.
Training on augumented user 48210 17/50 current_auc = 0.8545454545454545
User 48210 AUC after training: 0.8409090909090909
User 48210 does not improve AUC. Reverting changes.
Training on augumented user 51993 18/50 current_auc = 0.8545454545454545
User 51993 AUC after training: 0.8454545454545453
User 51993 does not improve AUC. Reverting changes.
Training on augumented user 137612 19/50 current_auc = 0.8545454545454545
User 137612 AUC after training: 0.8545454545454545
User 137612 does not improve AUC. Reverting changes.
Training on augumented user 9325 20/50 current_auc = 0.8545454545454545
User 9325 AUC after training: 0.8454545454545455
User 9325 does not improve AUC. Reverting changes.
Training on augumented user 83006 21/50 current_auc = 0.8545454545454545
User 83006 AUC after training: 0.8499999999999999
User 83006 does not improve AUC. Reverting changes.
Training on augumented user 13318 22/50 current_auc = 0.8545454545454545
User 13318 AUC after training: 0.8499999999999999
User 13318 does not improve AUC. Reverting changes.
Training on augumented user 67042 23/50 current_auc = 0.8545454545454545
User 67042 AUC after training: 0.8499999999999999
User 67042 does not improve AUC. Reverting changes.
Training on augumented user 10596 24/50 current_auc = 0.8545454545454545
User 10596 AUC after training: 0.8545454545454545
User 10596 does not improve AUC. Reverting changes.
Training on augumented user 91472 25/50 current_auc = 0.8545454545454545
User 91472 AUC after training: 0.8454545454545455
User 91472 does not improve AUC. Reverting changes.
Training on augumented user 88308 26/50 current_auc = 0.8545454545454545
User 88308 AUC after training: 0.8454545454545453
User 88308 does not improve AUC. Reverting changes.
Training on augumented user 52581 27/50 current_auc = 0.8545454545454545
User 52581 AUC after training: 0.8545454545454545
User 52581 does not improve AUC. Reverting changes.
Training on augumented user 111789 28/50 current_auc = 0.8545454545454545
User 111789 AUC after training: 0.8499999999999999
User 111789 does not improve AUC. Reverting changes.
Training on augumented user 32698 29/50 current_auc = 0.8545454545454545
User 32698 AUC after training: 0.8499999999999999
User 32698 does not improve AUC. Reverting changes.
Training on augumented user 57865 30/50 current_auc = 0.8545454545454545
User 57865 AUC after training: 0.8499999999999999
User 57865 does not improve AUC. Reverting changes.
Training on augumented user 128853 31/50 current_auc = 0.8545454545454545
User 128853 AUC after training: 0.8500000000000001
User 128853 does not improve AUC. Reverting changes.
Training on augumented user 3045 32/50 current_auc = 0.8545454545454545
User 3045 AUC after training: 0.85
User 3045 does not improve AUC. Reverting changes.
Training on augumented user 28018 33/50 current_auc = 0.8545454545454545
User 28018 AUC after training: 0.8545454545454545
User 28018 does not improve AUC. Reverting changes.
Training on augumented user 119496 34/50 current_auc = 0.8545454545454545
User 119496 AUC after training: 0.8454545454545453
User 119496 does not improve AUC. Reverting changes.
Training on augumented user 25178 35/50 current_auc = 0.8545454545454545
User 25178 AUC after training: 0.85
User 25178 does not improve AUC. Reverting changes.
Training on augumented user 84730 36/50 current_auc = 0.8545454545454545
User 84730 AUC after training: 0.8499999999999999
User 84730 does not improve AUC. Reverting changes.
Training on augumented user 85577 37/50 current_auc = 0.8545454545454545
User 85577 AUC after training: 0.8454545454545453
User 85577 does not improve AUC. Reverting changes.
Training on augumented user 70602 38/50 current_auc = 0.8545454545454545
User 70602 AUC after training: 0.8499999999999999
User 70602 does not improve AUC. Reverting changes.
Training on augumented user 54259 39/50 current_auc = 0.8545454545454545
User 54259 AUC after training: 0.8454545454545453
User 54259 does not improve AUC. Reverting changes.
Training on augumented user 108843 40/50 current_auc = 0.8545454545454545
User 108843 AUC after training: 0.8454545454545455
User 108843 does not improve AUC. Reverting changes.
Training on augumented user 71131 41/50 current_auc = 0.8545454545454545
User 71131 AUC after training: 0.8499999999999999
User 71131 does not improve AUC. Reverting changes.
Training on augumented user 56107 42/50 current_auc = 0.8545454545454545
User 56107 AUC after training: 0.8545454545454545
User 56107 does not improve AUC. Reverting changes.
Training on augumented user 77625 43/50 current_auc = 0.8545454545454545
User 77625 AUC after training: 0.8454545454545453
User 77625 does not improve AUC. Reverting changes.
Training on augumented user 100958 44/50 current_auc = 0.8545454545454545
User 100958 AUC after training: 0.8409090909090909
User 100958 does not improve AUC. Reverting changes.
Training on augumented user 28937 45/50 current_auc = 0.8545454545454545
User 28937 AUC after training: 0.8545454545454545
User 28937 does not improve AUC. Reverting changes.
Training on augumented user 89392 46/50 current_auc = 0.8545454545454545
User 89392 AUC after training: 0.85
User 89392 does not improve AUC. Reverting changes.
Training on augumented user 13414 47/50 current_auc = 0.8545454545454545
User 13414 AUC after training: 0.8454545454545453
User 13414 does not improve AUC. Reverting changes.
Training on augumented user 133653 48/50 current_auc = 0.8545454545454545
User 133653 AUC after training: 0.8499999999999999
User 133653 does not improve AUC. Reverting changes.
Training on augumented user 19707 49/50 current_auc = 0.8545454545454545
User 19707 AUC after training: 0.8545454545454545
User 19707 does not improve AUC. Reverting changes.
[2024-12-02 17:46:12.602619] start test user 70141 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:13.186749] start test user 70141 16/568 recall augumented users by random, augumented_users = [33015, 127635, 28569, 63399, 22849, 124807, 30893, 124985, 80962, 19358, 84132, 103785, 137528, 38610, 76720, 21575, 129032, 128626, 39983, 138313, 680, 130484, 123480, 83700, 127631, 30247, 111046, 79697, 28294, 128787, 45108, 43727, 68870, 86111, 37449, 22232, 133082, 8994, 61143, 44532, 30743, 94152, 75193, 47506, 134956, 3951, 132210, 95929, 7869, 88557]
[2024-12-02 17:46:13.203729] user = 70141 Cloud 16/568
[2024-12-02 17:46:13.221871] user = 70141 Local 16/568
[2024-12-02 17:46:13.398050] user = 70141 Local+ 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:16.394329] user = 70141 MPDA- 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.482078853046595
Training on augumented user 33015 0/50 current_auc = 0.482078853046595
User 33015 AUC after training: 0.482078853046595
User 33015 does not improve AUC. Reverting changes.
Training on augumented user 127635 1/50 current_auc = 0.482078853046595
User 127635 AUC after training: 0.4829749103942652
User 127635 improves AUC. Keeping the model.
Training on augumented user 28569 2/50 current_auc = 0.4829749103942652
User 28569 AUC after training: 0.48118279569892475
User 28569 does not improve AUC. Reverting changes.
Training on augumented user 63399 3/50 current_auc = 0.4829749103942652
User 63399 AUC after training: 0.482078853046595
User 63399 does not improve AUC. Reverting changes.
Training on augumented user 22849 4/50 current_auc = 0.4829749103942652
User 22849 AUC after training: 0.48297491039426527
User 22849 improves AUC. Keeping the model.
Training on augumented user 124807 5/50 current_auc = 0.48297491039426527
User 124807 AUC after training: 0.4789426523297491
User 124807 does not improve AUC. Reverting changes.
Training on augumented user 30893 6/50 current_auc = 0.48297491039426527
User 30893 AUC after training: 0.4820788530465949
User 30893 does not improve AUC. Reverting changes.
Training on augumented user 124985 7/50 current_auc = 0.48297491039426527
User 124985 AUC after training: 0.4820788530465949
User 124985 does not improve AUC. Reverting changes.
Training on augumented user 80962 8/50 current_auc = 0.48297491039426527
User 80962 AUC after training: 0.48252688172043007
User 80962 does not improve AUC. Reverting changes.
Training on augumented user 19358 9/50 current_auc = 0.48297491039426527
User 19358 AUC after training: 0.48073476702508955
User 19358 does not improve AUC. Reverting changes.
Training on augumented user 84132 10/50 current_auc = 0.48297491039426527
User 84132 AUC after training: 0.4820788530465949
User 84132 does not improve AUC. Reverting changes.
Training on augumented user 103785 11/50 current_auc = 0.48297491039426527
User 103785 AUC after training: 0.48163082437275984
User 103785 does not improve AUC. Reverting changes.
Training on augumented user 137528 12/50 current_auc = 0.48297491039426527
User 137528 AUC after training: 0.48073476702508955
User 137528 does not improve AUC. Reverting changes.
Training on augumented user 38610 13/50 current_auc = 0.48297491039426527
User 38610 AUC after training: 0.4811827956989247
User 38610 does not improve AUC. Reverting changes.
Training on augumented user 76720 14/50 current_auc = 0.48297491039426527
User 76720 AUC after training: 0.482078853046595
User 76720 does not improve AUC. Reverting changes.
Training on augumented user 21575 15/50 current_auc = 0.48297491039426527
User 21575 AUC after training: 0.4811827956989247
User 21575 does not improve AUC. Reverting changes.
Training on augumented user 129032 16/50 current_auc = 0.48297491039426527
User 129032 AUC after training: 0.48163082437275984
User 129032 does not improve AUC. Reverting changes.
Training on augumented user 128626 17/50 current_auc = 0.48297491039426527
User 128626 AUC after training: 0.4829749103942652
User 128626 does not improve AUC. Reverting changes.
Training on augumented user 39983 18/50 current_auc = 0.48297491039426527
User 39983 AUC after training: 0.4816308243727599
User 39983 does not improve AUC. Reverting changes.
Training on augumented user 138313 19/50 current_auc = 0.48297491039426527
User 138313 AUC after training: 0.48342293906810035
User 138313 improves AUC. Keeping the model.
Training on augumented user 680 20/50 current_auc = 0.48342293906810035
User 680 AUC after training: 0.4829749103942652
User 680 does not improve AUC. Reverting changes.
Training on augumented user 130484 21/50 current_auc = 0.48342293906810035
User 130484 AUC after training: 0.4811827956989247
User 130484 does not improve AUC. Reverting changes.
Training on augumented user 123480 22/50 current_auc = 0.48342293906810035
User 123480 AUC after training: 0.48342293906810035
User 123480 does not improve AUC. Reverting changes.
Training on augumented user 83700 23/50 current_auc = 0.48342293906810035
User 83700 AUC after training: 0.4816308243727599
User 83700 does not improve AUC. Reverting changes.
Training on augumented user 127631 24/50 current_auc = 0.48342293906810035
User 127631 AUC after training: 0.4825268817204301
User 127631 does not improve AUC. Reverting changes.
Training on augumented user 30247 25/50 current_auc = 0.48342293906810035
User 30247 AUC after training: 0.47939068100358423
User 30247 does not improve AUC. Reverting changes.
Training on augumented user 111046 26/50 current_auc = 0.48342293906810035
User 111046 AUC after training: 0.48028673835125446
User 111046 does not improve AUC. Reverting changes.
Training on augumented user 79697 27/50 current_auc = 0.48342293906810035
User 79697 AUC after training: 0.48342293906810035
User 79697 does not improve AUC. Reverting changes.
Training on augumented user 28294 28/50 current_auc = 0.48342293906810035
User 28294 AUC after training: 0.48163082437275984
User 28294 does not improve AUC. Reverting changes.
Training on augumented user 128787 29/50 current_auc = 0.48342293906810035
User 128787 AUC after training: 0.4820788530465949
User 128787 does not improve AUC. Reverting changes.
Training on augumented user 45108 30/50 current_auc = 0.48342293906810035
User 45108 AUC after training: 0.4807347670250896
User 45108 does not improve AUC. Reverting changes.
Training on augumented user 43727 31/50 current_auc = 0.48342293906810035
User 43727 AUC after training: 0.4834229390681003
User 43727 does not improve AUC. Reverting changes.
Training on augumented user 68870 32/50 current_auc = 0.48342293906810035
User 68870 AUC after training: 0.4820788530465949
User 68870 does not improve AUC. Reverting changes.
Training on augumented user 86111 33/50 current_auc = 0.48342293906810035
User 86111 AUC after training: 0.48252688172043007
User 86111 does not improve AUC. Reverting changes.
Training on augumented user 37449 34/50 current_auc = 0.48342293906810035
User 37449 AUC after training: 0.48342293906810035
User 37449 does not improve AUC. Reverting changes.
Training on augumented user 22232 35/50 current_auc = 0.48342293906810035
User 22232 AUC after training: 0.48118279569892475
User 22232 does not improve AUC. Reverting changes.
Training on augumented user 133082 36/50 current_auc = 0.48342293906810035
User 133082 AUC after training: 0.4802867383512544
User 133082 does not improve AUC. Reverting changes.
Training on augumented user 8994 37/50 current_auc = 0.48342293906810035
User 8994 AUC after training: 0.4825268817204301
User 8994 does not improve AUC. Reverting changes.
Training on augumented user 61143 38/50 current_auc = 0.48342293906810035
User 61143 AUC after training: 0.4807347670250896
User 61143 does not improve AUC. Reverting changes.
Training on augumented user 44532 39/50 current_auc = 0.48342293906810035
User 44532 AUC after training: 0.4820788530465949
User 44532 does not improve AUC. Reverting changes.
Training on augumented user 30743 40/50 current_auc = 0.48342293906810035
User 30743 AUC after training: 0.48163082437275984
User 30743 does not improve AUC. Reverting changes.
Training on augumented user 94152 41/50 current_auc = 0.48342293906810035
User 94152 AUC after training: 0.48163082437275984
User 94152 does not improve AUC. Reverting changes.
Training on augumented user 75193 42/50 current_auc = 0.48342293906810035
User 75193 AUC after training: 0.48387096774193544
User 75193 improves AUC. Keeping the model.
Training on augumented user 47506 43/50 current_auc = 0.48387096774193544
User 47506 AUC after training: 0.4829749103942652
User 47506 does not improve AUC. Reverting changes.
Training on augumented user 134956 44/50 current_auc = 0.48387096774193544
User 134956 AUC after training: 0.48252688172043007
User 134956 does not improve AUC. Reverting changes.
Training on augumented user 3951 45/50 current_auc = 0.48387096774193544
User 3951 AUC after training: 0.482078853046595
User 3951 does not improve AUC. Reverting changes.
Training on augumented user 132210 46/50 current_auc = 0.48387096774193544
User 132210 AUC after training: 0.4767025089605734
User 132210 does not improve AUC. Reverting changes.
Training on augumented user 95929 47/50 current_auc = 0.48387096774193544
User 95929 AUC after training: 0.482078853046595
User 95929 does not improve AUC. Reverting changes.
Training on augumented user 7869 48/50 current_auc = 0.48387096774193544
User 7869 AUC after training: 0.4825268817204301
User 7869 does not improve AUC. Reverting changes.
Training on augumented user 88557 49/50 current_auc = 0.48387096774193544
User 88557 AUC after training: 0.4843189964157706
User 88557 improves AUC. Keeping the model.
[2024-12-02 17:46:48.046401] start test user 70157 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:48.997252] start test user 70157 17/568 recall augumented users by random, augumented_users = [111404, 10459, 68479, 56101, 2007, 27077, 7745, 24323, 61309, 74490, 104550, 51247, 39271, 69466, 129806, 9027, 66109, 132674, 82002, 46079, 100836, 54081, 73698, 110338, 93566, 81241, 50853, 63200, 16234, 54194, 132059, 327, 106160, 108274, 51115, 79891, 23366, 70684, 82056, 38117, 23742, 60396, 103448, 46662, 28076, 92723, 94226, 86241, 104066, 88902]
[2024-12-02 17:46:49.014220] user = 70157 Cloud 17/568
[2024-12-02 17:46:49.026037] user = 70157 Local 17/568
[2024-12-02 17:46:49.048517] user = 70157 Local+ 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:51.522773] user = 70157 MPDA- 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5696969696969697
Training on augumented user 111404 0/50 current_auc = 0.5696969696969697
User 111404 AUC after training: 0.5696969696969697
User 111404 does not improve AUC. Reverting changes.
Training on augumented user 10459 1/50 current_auc = 0.5696969696969697
User 10459 AUC after training: 0.5727272727272728
User 10459 improves AUC. Keeping the model.
Training on augumented user 68479 2/50 current_auc = 0.5727272727272728
User 68479 AUC after training: 0.5727272727272728
User 68479 does not improve AUC. Reverting changes.
Training on augumented user 56101 3/50 current_auc = 0.5727272727272728
User 56101 AUC after training: 0.5727272727272728
User 56101 does not improve AUC. Reverting changes.
Training on augumented user 2007 4/50 current_auc = 0.5727272727272728
User 2007 AUC after training: 0.5727272727272728
User 2007 does not improve AUC. Reverting changes.
Training on augumented user 27077 5/50 current_auc = 0.5727272727272728
User 27077 AUC after training: 0.5727272727272728
User 27077 does not improve AUC. Reverting changes.
Training on augumented user 7745 6/50 current_auc = 0.5727272727272728
User 7745 AUC after training: 0.5727272727272728
User 7745 does not improve AUC. Reverting changes.
Training on augumented user 24323 7/50 current_auc = 0.5727272727272728
User 24323 AUC after training: 0.5666666666666667
User 24323 does not improve AUC. Reverting changes.
Training on augumented user 61309 8/50 current_auc = 0.5727272727272728
User 61309 AUC after training: 0.5696969696969698
User 61309 does not improve AUC. Reverting changes.
Training on augumented user 74490 9/50 current_auc = 0.5727272727272728
User 74490 AUC after training: 0.5727272727272728
User 74490 does not improve AUC. Reverting changes.
Training on augumented user 104550 10/50 current_auc = 0.5727272727272728
User 104550 AUC after training: 0.5696969696969698
User 104550 does not improve AUC. Reverting changes.
Training on augumented user 51247 11/50 current_auc = 0.5727272727272728
User 51247 AUC after training: 0.5696969696969698
User 51247 does not improve AUC. Reverting changes.
Training on augumented user 39271 12/50 current_auc = 0.5727272727272728
User 39271 AUC after training: 0.5757575757575757
User 39271 improves AUC. Keeping the model.
Training on augumented user 69466 13/50 current_auc = 0.5757575757575757
User 69466 AUC after training: 0.5696969696969697
User 69466 does not improve AUC. Reverting changes.
Training on augumented user 129806 14/50 current_auc = 0.5757575757575757
User 129806 AUC after training: 0.5727272727272728
User 129806 does not improve AUC. Reverting changes.
Training on augumented user 9027 15/50 current_auc = 0.5757575757575757
User 9027 AUC after training: 0.5727272727272728
User 9027 does not improve AUC. Reverting changes.
Training on augumented user 66109 16/50 current_auc = 0.5757575757575757
User 66109 AUC after training: 0.5727272727272728
User 66109 does not improve AUC. Reverting changes.
Training on augumented user 132674 17/50 current_auc = 0.5757575757575757
User 132674 AUC after training: 0.5727272727272728
User 132674 does not improve AUC. Reverting changes.
Training on augumented user 82002 18/50 current_auc = 0.5757575757575757
User 82002 AUC after training: 0.5727272727272728
User 82002 does not improve AUC. Reverting changes.
Training on augumented user 46079 19/50 current_auc = 0.5757575757575757
User 46079 AUC after training: 0.5727272727272728
User 46079 does not improve AUC. Reverting changes.
Training on augumented user 100836 20/50 current_auc = 0.5757575757575757
User 100836 AUC after training: 0.5696969696969697
User 100836 does not improve AUC. Reverting changes.
Training on augumented user 54081 21/50 current_auc = 0.5757575757575757
User 54081 AUC after training: 0.5696969696969697
User 54081 does not improve AUC. Reverting changes.
Training on augumented user 73698 22/50 current_auc = 0.5757575757575757
User 73698 AUC after training: 0.5757575757575757
User 73698 does not improve AUC. Reverting changes.
Training on augumented user 110338 23/50 current_auc = 0.5757575757575757
User 110338 AUC after training: 0.5666666666666667
User 110338 does not improve AUC. Reverting changes.
Training on augumented user 93566 24/50 current_auc = 0.5757575757575757
User 93566 AUC after training: 0.5757575757575757
User 93566 does not improve AUC. Reverting changes.
Training on augumented user 81241 25/50 current_auc = 0.5757575757575757
User 81241 AUC after training: 0.5727272727272728
User 81241 does not improve AUC. Reverting changes.
Training on augumented user 50853 26/50 current_auc = 0.5757575757575757
User 50853 AUC after training: 0.5666666666666667
User 50853 does not improve AUC. Reverting changes.
Training on augumented user 63200 27/50 current_auc = 0.5757575757575757
User 63200 AUC after training: 0.5787878787878787
User 63200 improves AUC. Keeping the model.
Training on augumented user 16234 28/50 current_auc = 0.5787878787878787
User 16234 AUC after training: 0.5696969696969697
User 16234 does not improve AUC. Reverting changes.
Training on augumented user 54194 29/50 current_auc = 0.5787878787878787
User 54194 AUC after training: 0.5787878787878787
User 54194 does not improve AUC. Reverting changes.
Training on augumented user 132059 30/50 current_auc = 0.5787878787878787
User 132059 AUC after training: 0.5727272727272728
User 132059 does not improve AUC. Reverting changes.
Training on augumented user 327 31/50 current_auc = 0.5787878787878787
User 327 AUC after training: 0.5787878787878787
User 327 does not improve AUC. Reverting changes.
Training on augumented user 106160 32/50 current_auc = 0.5787878787878787
User 106160 AUC after training: 0.5727272727272728
User 106160 does not improve AUC. Reverting changes.
Training on augumented user 108274 33/50 current_auc = 0.5787878787878787
User 108274 AUC after training: 0.5787878787878787
User 108274 does not improve AUC. Reverting changes.
Training on augumented user 51115 34/50 current_auc = 0.5787878787878787
User 51115 AUC after training: 0.5787878787878787
User 51115 does not improve AUC. Reverting changes.
Training on augumented user 79891 35/50 current_auc = 0.5787878787878787
User 79891 AUC after training: 0.5757575757575757
User 79891 does not improve AUC. Reverting changes.
Training on augumented user 23366 36/50 current_auc = 0.5787878787878787
User 23366 AUC after training: 0.5757575757575757
User 23366 does not improve AUC. Reverting changes.
Training on augumented user 70684 37/50 current_auc = 0.5787878787878787
User 70684 AUC after training: 0.5727272727272728
User 70684 does not improve AUC. Reverting changes.
Training on augumented user 82056 38/50 current_auc = 0.5787878787878787
User 82056 AUC after training: 0.5727272727272728
User 82056 does not improve AUC. Reverting changes.
Training on augumented user 38117 39/50 current_auc = 0.5787878787878787
User 38117 AUC after training: 0.5727272727272728
User 38117 does not improve AUC. Reverting changes.
Training on augumented user 23742 40/50 current_auc = 0.5787878787878787
User 23742 AUC after training: 0.5696969696969697
User 23742 does not improve AUC. Reverting changes.
Training on augumented user 60396 41/50 current_auc = 0.5787878787878787
User 60396 AUC after training: 0.5727272727272728
User 60396 does not improve AUC. Reverting changes.
Training on augumented user 103448 42/50 current_auc = 0.5787878787878787
User 103448 AUC after training: 0.5787878787878787
User 103448 does not improve AUC. Reverting changes.
Training on augumented user 46662 43/50 current_auc = 0.5787878787878787
User 46662 AUC after training: 0.5787878787878787
User 46662 does not improve AUC. Reverting changes.
Training on augumented user 28076 44/50 current_auc = 0.5787878787878787
User 28076 AUC after training: 0.5757575757575757
User 28076 does not improve AUC. Reverting changes.
Training on augumented user 92723 45/50 current_auc = 0.5787878787878787
User 92723 AUC after training: 0.5757575757575757
User 92723 does not improve AUC. Reverting changes.
Training on augumented user 94226 46/50 current_auc = 0.5787878787878787
User 94226 AUC after training: 0.5787878787878787
User 94226 does not improve AUC. Reverting changes.
Training on augumented user 86241 47/50 current_auc = 0.5787878787878787
User 86241 AUC after training: 0.5787878787878787
User 86241 does not improve AUC. Reverting changes.
Training on augumented user 104066 48/50 current_auc = 0.5787878787878787
User 104066 AUC after training: 0.5757575757575757
User 104066 does not improve AUC. Reverting changes.
Training on augumented user 88902 49/50 current_auc = 0.5787878787878787
User 88902 AUC after training: 0.5757575757575757
User 88902 does not improve AUC. Reverting changes.
[2024-12-02 17:47:22.890691] start test user 70201 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:23.628422] start test user 70201 18/568 recall augumented users by random, augumented_users = [88764, 66807, 41821, 105363, 102405, 15233, 77931, 91213, 108170, 48573, 44084, 41283, 6523, 37266, 18362, 2252, 24495, 123527, 131161, 37799, 7996, 22229, 82846, 14700, 46044, 96755, 127009, 62021, 116676, 15514, 84151, 38850, 18885, 59334, 75183, 24238, 26331, 88514, 53094, 19965, 94629, 74206, 7555, 110665, 131562, 77966, 44657, 26655, 17807, 10216]
[2024-12-02 17:47:23.660027] user = 70201 Cloud 18/568
[2024-12-02 17:47:23.837457] user = 70201 Local 18/568
[2024-12-02 17:47:24.557482] user = 70201 Local+ 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:27.691202] user = 70201 MPDA- 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7563712882861819
Training on augumented user 88764 0/50 current_auc = 0.7563712882861819
User 88764 AUC after training: 0.7563712882861819
User 88764 does not improve AUC. Reverting changes.
Training on augumented user 66807 1/50 current_auc = 0.7563712882861819
User 66807 AUC after training: 0.756605097030629
User 66807 improves AUC. Keeping the model.
Training on augumented user 41821 2/50 current_auc = 0.756605097030629
User 41821 AUC after training: 0.75652716078248
User 41821 does not improve AUC. Reverting changes.
Training on augumented user 105363 3/50 current_auc = 0.756605097030629
User 105363 AUC after training: 0.7562777647884031
User 105363 does not improve AUC. Reverting changes.
Training on augumented user 102405 4/50 current_auc = 0.756605097030629
User 102405 AUC after training: 0.7564336372847011
User 102405 does not improve AUC. Reverting changes.
Training on augumented user 15233 5/50 current_auc = 0.756605097030629
User 15233 AUC after training: 0.7567142077780377
User 15233 improves AUC. Keeping the model.
Training on augumented user 77931 6/50 current_auc = 0.7567142077780377
User 77931 AUC after training: 0.7566986205284078
User 77931 does not improve AUC. Reverting changes.
Training on augumented user 91213 7/50 current_auc = 0.7567142077780377
User 91213 AUC after training: 0.7567297950276674
User 91213 improves AUC. Keeping the model.
Training on augumented user 108170 8/50 current_auc = 0.7567297950276674
User 108170 AUC after training: 0.7562777647884031
User 108170 does not improve AUC. Reverting changes.
Training on augumented user 48573 9/50 current_auc = 0.7567297950276674
User 48573 AUC after training: 0.7566674460291483
User 48573 does not improve AUC. Reverting changes.
Training on augumented user 44084 10/50 current_auc = 0.7567297950276674
User 44084 AUC after training: 0.7571038890187827
User 44084 improves AUC. Keeping the model.
Training on augumented user 41283 11/50 current_auc = 0.7571038890187827
User 41283 AUC after training: 0.7574000467617489
User 41283 improves AUC. Keeping the model.
Training on augumented user 6523 12/50 current_auc = 0.7574000467617489
User 6523 AUC after training: 0.7573844595121191
User 6523 does not improve AUC. Reverting changes.
Training on augumented user 37266 13/50 current_auc = 0.7574000467617489
User 37266 AUC after training: 0.7575247447587872
User 37266 improves AUC. Keeping the model.
Training on augumented user 18362 14/50 current_auc = 0.7575247447587872
User 18362 AUC after training: 0.7575403320084171
User 18362 improves AUC. Keeping the model.
Training on augumented user 2252 15/50 current_auc = 0.7575403320084171
User 2252 AUC after training: 0.7573221105135999
User 2252 does not improve AUC. Reverting changes.
Training on augumented user 24495 16/50 current_auc = 0.7575403320084171
User 24495 AUC after training: 0.7571038890187827
User 24495 does not improve AUC. Reverting changes.
Training on augumented user 123527 17/50 current_auc = 0.7575403320084171
User 123527 AUC after training: 0.7577351726287896
User 123527 improves AUC. Keeping the model.
Training on augumented user 131161 18/50 current_auc = 0.7577351726287896
User 131161 AUC after training: 0.7570571272698933
User 131161 does not improve AUC. Reverting changes.
Training on augumented user 37799 19/50 current_auc = 0.7577351726287896
User 37799 AUC after training: 0.7568077312758165
User 37799 does not improve AUC. Reverting changes.
Training on augumented user 7996 20/50 current_auc = 0.7577351726287896
User 7996 AUC after training: 0.7568856675239655
User 7996 does not improve AUC. Reverting changes.
Training on augumented user 22229 21/50 current_auc = 0.7577351726287896
User 22229 AUC after training: 0.7572597615150807
User 22229 does not improve AUC. Reverting changes.
Training on augumented user 82846 22/50 current_auc = 0.7577351726287896
User 82846 AUC after training: 0.7575403320084171
User 82846 does not improve AUC. Reverting changes.
Training on augumented user 14700 23/50 current_auc = 0.7577351726287896
User 14700 AUC after training: 0.7578209025017535
User 14700 improves AUC. Keeping the model.
Training on augumented user 46044 24/50 current_auc = 0.7578209025017535
User 46044 AUC after training: 0.7578988387499026
User 46044 improves AUC. Keeping the model.
Training on augumented user 96755 25/50 current_auc = 0.7578988387499026
User 96755 AUC after training: 0.7579300132491622
User 96755 improves AUC. Keeping the model.
Training on augumented user 127009 26/50 current_auc = 0.7579300132491622
User 127009 AUC after training: 0.7579767749980515
User 127009 improves AUC. Keeping the model.
Training on augumented user 62021 27/50 current_auc = 0.7579767749980515
User 62021 AUC after training: 0.7580547112462006
User 62021 improves AUC. Keeping the model.
Training on augumented user 116676 28/50 current_auc = 0.7580547112462006
User 116676 AUC after training: 0.7579767749980517
User 116676 does not improve AUC. Reverting changes.
Training on augumented user 15514 29/50 current_auc = 0.7580547112462006
User 15514 AUC after training: 0.7579767749980516
User 15514 does not improve AUC. Reverting changes.
Training on augumented user 84151 30/50 current_auc = 0.7580547112462006
User 84151 AUC after training: 0.7573532850128595
User 84151 does not improve AUC. Reverting changes.
Training on augumented user 38850 31/50 current_auc = 0.7580547112462006
User 38850 AUC after training: 0.7581326474943496
User 38850 improves AUC. Keeping the model.
Training on augumented user 18885 32/50 current_auc = 0.7581326474943496
User 18885 AUC after training: 0.7579300132491621
User 18885 does not improve AUC. Reverting changes.
Training on augumented user 59334 33/50 current_auc = 0.7581326474943496
User 59334 AUC after training: 0.7580079494973112
User 59334 does not improve AUC. Reverting changes.
Training on augumented user 75183 34/50 current_auc = 0.7581326474943496
User 75183 AUC after training: 0.7578520770010132
User 75183 does not improve AUC. Reverting changes.
Training on augumented user 24238 35/50 current_auc = 0.7581326474943496
User 24238 AUC after training: 0.7584288052373158
User 24238 improves AUC. Keeping the model.
Training on augumented user 26331 36/50 current_auc = 0.7584288052373158
User 26331 AUC after training: 0.7583976307380562
User 26331 does not improve AUC. Reverting changes.
Training on augumented user 88514 37/50 current_auc = 0.7584288052373158
User 88514 AUC after training: 0.7580391239965707
User 88514 does not improve AUC. Reverting changes.
Training on augumented user 53094 38/50 current_auc = 0.7584288052373158
User 53094 AUC after training: 0.7582885199906477
User 53094 does not improve AUC. Reverting changes.
Training on augumented user 19965 39/50 current_auc = 0.7584288052373158
User 19965 AUC after training: 0.758335281739537
User 19965 does not improve AUC. Reverting changes.
Training on augumented user 94629 40/50 current_auc = 0.7584288052373158
User 94629 AUC after training: 0.7575715065076767
User 94629 does not improve AUC. Reverting changes.
Training on augumented user 74206 41/50 current_auc = 0.7584288052373158
User 74206 AUC after training: 0.7584443924869457
User 74206 improves AUC. Keeping the model.
Training on augumented user 7555 42/50 current_auc = 0.7584443924869457
User 7555 AUC after training: 0.7583508689891668
User 7555 does not improve AUC. Reverting changes.
Training on augumented user 110665 43/50 current_auc = 0.7584443924869457
User 110665 AUC after training: 0.7583664562387967
User 110665 does not improve AUC. Reverting changes.
Training on augumented user 131562 44/50 current_auc = 0.7584443924869457
User 131562 AUC after training: 0.7584443924869457
User 131562 does not improve AUC. Reverting changes.
Training on augumented user 77966 45/50 current_auc = 0.7584443924869457
User 77966 AUC after training: 0.7578988387499026
User 77966 does not improve AUC. Reverting changes.
Training on augumented user 44657 46/50 current_auc = 0.7584443924869457
User 44657 AUC after training: 0.7585067414854649
User 44657 improves AUC. Keeping the model.
Training on augumented user 26655 47/50 current_auc = 0.7585067414854649
User 26655 AUC after training: 0.758335281739537
User 26655 does not improve AUC. Reverting changes.
Training on augumented user 17807 48/50 current_auc = 0.7585067414854649
User 17807 AUC after training: 0.7580079494973112
User 17807 does not improve AUC. Reverting changes.
Training on augumented user 10216 49/50 current_auc = 0.7585067414854649
User 10216 AUC after training: 0.7584288052373158
User 10216 does not improve AUC. Reverting changes.
[2024-12-02 17:48:05.238671] start test user 70217 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:05.678683] start test user 70217 19/568 recall augumented users by random, augumented_users = [15339, 39927, 134780, 108307, 98140, 15070, 115705, 56498, 24889, 126457, 91878, 134535, 16156, 124240, 100628, 35838, 47921, 66178, 48767, 57690, 92626, 130236, 38552, 46538, 26968, 105174, 17821, 44788, 115384, 37589, 48045, 109978, 129244, 65028, 91210, 134357, 59500, 116784, 100120, 65047, 38374, 80385, 133022, 135818, 49822, 92782, 24239, 71201, 7340, 120164]
[2024-12-02 17:48:05.693723] user = 70217 Cloud 19/568
[2024-12-02 17:48:05.703670] user = 70217 Local 19/568
[2024-12-02 17:48:05.739511] user = 70217 Local+ 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:07.271720] user = 70217 MPDA- 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 15339 0/50 current_auc = 0.8333333333333334
User 15339 AUC after training: 0.8333333333333334
User 15339 does not improve AUC. Reverting changes.
Training on augumented user 39927 1/50 current_auc = 0.8333333333333334
User 39927 AUC after training: 0.8333333333333334
User 39927 does not improve AUC. Reverting changes.
Training on augumented user 134780 2/50 current_auc = 0.8333333333333334
User 134780 AUC after training: 0.8333333333333334
User 134780 does not improve AUC. Reverting changes.
Training on augumented user 108307 3/50 current_auc = 0.8333333333333334
User 108307 AUC after training: 0.8333333333333334
User 108307 does not improve AUC. Reverting changes.
Training on augumented user 98140 4/50 current_auc = 0.8333333333333334
User 98140 AUC after training: 0.8333333333333334
User 98140 does not improve AUC. Reverting changes.
Training on augumented user 15070 5/50 current_auc = 0.8333333333333334
User 15070 AUC after training: 0.8333333333333334
User 15070 does not improve AUC. Reverting changes.
Training on augumented user 115705 6/50 current_auc = 0.8333333333333334
User 115705 AUC after training: 0.8333333333333334
User 115705 does not improve AUC. Reverting changes.
Training on augumented user 56498 7/50 current_auc = 0.8333333333333334
User 56498 AUC after training: 0.8333333333333334
User 56498 does not improve AUC. Reverting changes.
Training on augumented user 24889 8/50 current_auc = 0.8333333333333334
User 24889 AUC after training: 0.8333333333333334
User 24889 does not improve AUC. Reverting changes.
Training on augumented user 126457 9/50 current_auc = 0.8333333333333334
User 126457 AUC after training: 0.8333333333333334
User 126457 does not improve AUC. Reverting changes.
Training on augumented user 91878 10/50 current_auc = 0.8333333333333334
User 91878 AUC after training: 0.8333333333333334
User 91878 does not improve AUC. Reverting changes.
Training on augumented user 134535 11/50 current_auc = 0.8333333333333334
User 134535 AUC after training: 0.8333333333333334
User 134535 does not improve AUC. Reverting changes.
Training on augumented user 16156 12/50 current_auc = 0.8333333333333334
User 16156 AUC after training: 0.8333333333333334
User 16156 does not improve AUC. Reverting changes.
Training on augumented user 124240 13/50 current_auc = 0.8333333333333334
User 124240 AUC after training: 0.8333333333333334
User 124240 does not improve AUC. Reverting changes.
Training on augumented user 100628 14/50 current_auc = 0.8333333333333334
User 100628 AUC after training: 0.8333333333333334
User 100628 does not improve AUC. Reverting changes.
Training on augumented user 35838 15/50 current_auc = 0.8333333333333334
User 35838 AUC after training: 0.8333333333333334
User 35838 does not improve AUC. Reverting changes.
Training on augumented user 47921 16/50 current_auc = 0.8333333333333334
User 47921 AUC after training: 0.8333333333333334
User 47921 does not improve AUC. Reverting changes.
Training on augumented user 66178 17/50 current_auc = 0.8333333333333334
User 66178 AUC after training: 0.8333333333333334
User 66178 does not improve AUC. Reverting changes.
Training on augumented user 48767 18/50 current_auc = 0.8333333333333334
User 48767 AUC after training: 0.8333333333333334
User 48767 does not improve AUC. Reverting changes.
Training on augumented user 57690 19/50 current_auc = 0.8333333333333334
User 57690 AUC after training: 0.8333333333333334
User 57690 does not improve AUC. Reverting changes.
Training on augumented user 92626 20/50 current_auc = 0.8333333333333334
User 92626 AUC after training: 0.8333333333333334
User 92626 does not improve AUC. Reverting changes.
Training on augumented user 130236 21/50 current_auc = 0.8333333333333334
User 130236 AUC after training: 0.8333333333333334
User 130236 does not improve AUC. Reverting changes.
Training on augumented user 38552 22/50 current_auc = 0.8333333333333334
User 38552 AUC after training: 0.8333333333333334
User 38552 does not improve AUC. Reverting changes.
Training on augumented user 46538 23/50 current_auc = 0.8333333333333334
User 46538 AUC after training: 0.8333333333333334
User 46538 does not improve AUC. Reverting changes.
Training on augumented user 26968 24/50 current_auc = 0.8333333333333334
User 26968 AUC after training: 0.8333333333333334
User 26968 does not improve AUC. Reverting changes.
Training on augumented user 105174 25/50 current_auc = 0.8333333333333334
User 105174 AUC after training: 0.8333333333333334
User 105174 does not improve AUC. Reverting changes.
Training on augumented user 17821 26/50 current_auc = 0.8333333333333334
User 17821 AUC after training: 0.8333333333333334
User 17821 does not improve AUC. Reverting changes.
Training on augumented user 44788 27/50 current_auc = 0.8333333333333334
User 44788 AUC after training: 0.8333333333333334
User 44788 does not improve AUC. Reverting changes.
Training on augumented user 115384 28/50 current_auc = 0.8333333333333334
User 115384 AUC after training: 0.8333333333333334
User 115384 does not improve AUC. Reverting changes.
Training on augumented user 37589 29/50 current_auc = 0.8333333333333334
User 37589 AUC after training: 0.8333333333333334
User 37589 does not improve AUC. Reverting changes.
Training on augumented user 48045 30/50 current_auc = 0.8333333333333334
User 48045 AUC after training: 0.8333333333333334
User 48045 does not improve AUC. Reverting changes.
Training on augumented user 109978 31/50 current_auc = 0.8333333333333334
User 109978 AUC after training: 0.8333333333333334
User 109978 does not improve AUC. Reverting changes.
Training on augumented user 129244 32/50 current_auc = 0.8333333333333334
User 129244 AUC after training: 0.8333333333333334
User 129244 does not improve AUC. Reverting changes.
Training on augumented user 65028 33/50 current_auc = 0.8333333333333334
User 65028 AUC after training: 0.8333333333333334
User 65028 does not improve AUC. Reverting changes.
Training on augumented user 91210 34/50 current_auc = 0.8333333333333334
User 91210 AUC after training: 0.8333333333333334
User 91210 does not improve AUC. Reverting changes.
Training on augumented user 134357 35/50 current_auc = 0.8333333333333334
User 134357 AUC after training: 0.8333333333333334
User 134357 does not improve AUC. Reverting changes.
Training on augumented user 59500 36/50 current_auc = 0.8333333333333334
User 59500 AUC after training: 0.8333333333333334
User 59500 does not improve AUC. Reverting changes.
Training on augumented user 116784 37/50 current_auc = 0.8333333333333334
User 116784 AUC after training: 0.8333333333333334
User 116784 does not improve AUC. Reverting changes.
Training on augumented user 100120 38/50 current_auc = 0.8333333333333334
User 100120 AUC after training: 0.8333333333333334
User 100120 does not improve AUC. Reverting changes.
Training on augumented user 65047 39/50 current_auc = 0.8333333333333334
User 65047 AUC after training: 0.8333333333333334
User 65047 does not improve AUC. Reverting changes.
Training on augumented user 38374 40/50 current_auc = 0.8333333333333334
User 38374 AUC after training: 0.8333333333333334
User 38374 does not improve AUC. Reverting changes.
Training on augumented user 80385 41/50 current_auc = 0.8333333333333334
User 80385 AUC after training: 0.8333333333333334
User 80385 does not improve AUC. Reverting changes.
Training on augumented user 133022 42/50 current_auc = 0.8333333333333334
User 133022 AUC after training: 0.8333333333333334
User 133022 does not improve AUC. Reverting changes.
Training on augumented user 135818 43/50 current_auc = 0.8333333333333334
User 135818 AUC after training: 0.8333333333333334
User 135818 does not improve AUC. Reverting changes.
Training on augumented user 49822 44/50 current_auc = 0.8333333333333334
User 49822 AUC after training: 0.8333333333333334
User 49822 does not improve AUC. Reverting changes.
Training on augumented user 92782 45/50 current_auc = 0.8333333333333334
User 92782 AUC after training: 0.8333333333333334
User 92782 does not improve AUC. Reverting changes.
Training on augumented user 24239 46/50 current_auc = 0.8333333333333334
User 24239 AUC after training: 0.8333333333333334
User 24239 does not improve AUC. Reverting changes.
Training on augumented user 71201 47/50 current_auc = 0.8333333333333334
User 71201 AUC after training: 0.8333333333333334
User 71201 does not improve AUC. Reverting changes.
Training on augumented user 7340 48/50 current_auc = 0.8333333333333334
User 7340 AUC after training: 0.8333333333333334
User 7340 does not improve AUC. Reverting changes.
Training on augumented user 120164 49/50 current_auc = 0.8333333333333334
User 120164 AUC after training: 0.8333333333333334
User 120164 does not improve AUC. Reverting changes.
[2024-12-02 17:48:39.089462] start test user 70243 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:39.582145] start test user 70243 20/568 recall augumented users by random, augumented_users = [74208, 29082, 95118, 133195, 122023, 35944, 67240, 49948, 104916, 14409, 2584, 120947, 78464, 3399, 54069, 36207, 11691, 118263, 125715, 85555, 34653, 116098, 42165, 111884, 58881, 44606, 67950, 53001, 54363, 9810, 54944, 115191, 10750, 128602, 43444, 36300, 130682, 90472, 74025, 92723, 81727, 29754, 62446, 76623, 80108, 70289, 50167, 25760, 38377, 71172]
[2024-12-02 17:48:39.597853] user = 70243 Cloud 20/568
[2024-12-02 17:48:39.617609] user = 70243 Local 20/568
[2024-12-02 17:48:39.705005] user = 70243 Local+ 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:41.544813] user = 70243 MPDA- 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6101449275362318
Training on augumented user 74208 0/50 current_auc = 0.6101449275362318
User 74208 AUC after training: 0.6102564102564103
User 74208 improves AUC. Keeping the model.
Training on augumented user 29082 1/50 current_auc = 0.6102564102564103
User 29082 AUC after training: 0.6105908584169454
User 29082 improves AUC. Keeping the model.
Training on augumented user 95118 2/50 current_auc = 0.6105908584169454
User 95118 AUC after training: 0.6091415830546265
User 95118 does not improve AUC. Reverting changes.
Training on augumented user 133195 3/50 current_auc = 0.6105908584169454
User 133195 AUC after training: 0.610479375696767
User 133195 does not improve AUC. Reverting changes.
Training on augumented user 122023 4/50 current_auc = 0.6105908584169454
User 122023 AUC after training: 0.6108138238573021
User 122023 improves AUC. Keeping the model.
Training on augumented user 35944 5/50 current_auc = 0.6108138238573021
User 35944 AUC after training: 0.6110367892976588
User 35944 improves AUC. Keeping the model.
Training on augumented user 67240 6/50 current_auc = 0.6110367892976588
User 67240 AUC after training: 0.6112597547380156
User 67240 improves AUC. Keeping the model.
Training on augumented user 49948 7/50 current_auc = 0.6112597547380156
User 49948 AUC after training: 0.610144927536232
User 49948 does not improve AUC. Reverting changes.
Training on augumented user 104916 8/50 current_auc = 0.6112597547380156
User 104916 AUC after training: 0.6099219620958751
User 104916 does not improve AUC. Reverting changes.
Training on augumented user 14409 9/50 current_auc = 0.6112597547380156
User 14409 AUC after training: 0.6115942028985508
User 14409 improves AUC. Keeping the model.
Training on augumented user 2584 10/50 current_auc = 0.6115942028985508
User 2584 AUC after training: 0.6103678929765886
User 2584 does not improve AUC. Reverting changes.
Training on augumented user 120947 11/50 current_auc = 0.6115942028985508
User 120947 AUC after training: 0.6112597547380156
User 120947 does not improve AUC. Reverting changes.
Training on augumented user 78464 12/50 current_auc = 0.6115942028985508
User 78464 AUC after training: 0.6108138238573021
User 78464 does not improve AUC. Reverting changes.
Training on augumented user 3399 13/50 current_auc = 0.6115942028985508
User 3399 AUC after training: 0.6111482720178372
User 3399 does not improve AUC. Reverting changes.
Training on augumented user 54069 14/50 current_auc = 0.6115942028985508
User 54069 AUC after training: 0.6117056856187291
User 54069 improves AUC. Keeping the model.
Training on augumented user 36207 15/50 current_auc = 0.6117056856187291
User 36207 AUC after training: 0.611371237458194
User 36207 does not improve AUC. Reverting changes.
Training on augumented user 11691 16/50 current_auc = 0.6117056856187291
User 11691 AUC after training: 0.6121516164994426
User 11691 improves AUC. Keeping the model.
Training on augumented user 118263 17/50 current_auc = 0.6121516164994426
User 118263 AUC after training: 0.6115384615384615
User 118263 does not improve AUC. Reverting changes.
Training on augumented user 125715 18/50 current_auc = 0.6121516164994426
User 125715 AUC after training: 0.6120401337792643
User 125715 does not improve AUC. Reverting changes.
Training on augumented user 85555 19/50 current_auc = 0.6121516164994426
User 85555 AUC after training: 0.6105908584169454
User 85555 does not improve AUC. Reverting changes.
Training on augumented user 34653 20/50 current_auc = 0.6121516164994426
User 34653 AUC after training: 0.6114827201783725
User 34653 does not improve AUC. Reverting changes.
Training on augumented user 116098 21/50 current_auc = 0.6121516164994426
User 116098 AUC after training: 0.6120401337792643
User 116098 does not improve AUC. Reverting changes.
Training on augumented user 42165 22/50 current_auc = 0.6121516164994426
User 42165 AUC after training: 0.6115942028985507
User 42165 does not improve AUC. Reverting changes.
Training on augumented user 111884 23/50 current_auc = 0.6121516164994426
User 111884 AUC after training: 0.6102564102564103
User 111884 does not improve AUC. Reverting changes.
Training on augumented user 58881 24/50 current_auc = 0.6121516164994426
User 58881 AUC after training: 0.6102564102564102
User 58881 does not improve AUC. Reverting changes.
Training on augumented user 44606 25/50 current_auc = 0.6121516164994426
User 44606 AUC after training: 0.6119286510590859
User 44606 does not improve AUC. Reverting changes.
Training on augumented user 67950 26/50 current_auc = 0.6121516164994426
User 67950 AUC after training: 0.611371237458194
User 67950 does not improve AUC. Reverting changes.
Training on augumented user 53001 27/50 current_auc = 0.6121516164994426
User 53001 AUC after training: 0.6114827201783722
User 53001 does not improve AUC. Reverting changes.
Training on augumented user 54363 28/50 current_auc = 0.6121516164994426
User 54363 AUC after training: 0.6114827201783722
User 54363 does not improve AUC. Reverting changes.
Training on augumented user 9810 29/50 current_auc = 0.6121516164994426
User 9810 AUC after training: 0.6098104793756968
User 9810 does not improve AUC. Reverting changes.
Training on augumented user 54944 30/50 current_auc = 0.6121516164994426
User 54944 AUC after training: 0.6115942028985507
User 54944 does not improve AUC. Reverting changes.
Training on augumented user 115191 31/50 current_auc = 0.6121516164994426
User 115191 AUC after training: 0.611371237458194
User 115191 does not improve AUC. Reverting changes.
Training on augumented user 10750 32/50 current_auc = 0.6121516164994426
User 10750 AUC after training: 0.6117056856187291
User 10750 does not improve AUC. Reverting changes.
Training on augumented user 128602 33/50 current_auc = 0.6121516164994426
User 128602 AUC after training: 0.611092530657748
User 128602 does not improve AUC. Reverting changes.
Training on augumented user 43444 34/50 current_auc = 0.6121516164994426
User 43444 AUC after training: 0.6121516164994426
User 43444 does not improve AUC. Reverting changes.
Training on augumented user 36300 35/50 current_auc = 0.6121516164994426
User 36300 AUC after training: 0.6109253065774805
User 36300 does not improve AUC. Reverting changes.
Training on augumented user 130682 36/50 current_auc = 0.6121516164994426
User 130682 AUC after training: 0.6111482720178372
User 130682 does not improve AUC. Reverting changes.
Training on augumented user 90472 37/50 current_auc = 0.6121516164994426
User 90472 AUC after training: 0.6119286510590859
User 90472 does not improve AUC. Reverting changes.
Training on augumented user 74025 38/50 current_auc = 0.6121516164994426
User 74025 AUC after training: 0.611371237458194
User 74025 does not improve AUC. Reverting changes.
Training on augumented user 92723 39/50 current_auc = 0.6121516164994426
User 92723 AUC after training: 0.6109253065774806
User 92723 does not improve AUC. Reverting changes.
Training on augumented user 81727 40/50 current_auc = 0.6121516164994426
User 81727 AUC after training: 0.6107580824972129
User 81727 does not improve AUC. Reverting changes.
Training on augumented user 29754 41/50 current_auc = 0.6121516164994426
User 29754 AUC after training: 0.610144927536232
User 29754 does not improve AUC. Reverting changes.
Training on augumented user 62446 42/50 current_auc = 0.6121516164994426
User 62446 AUC after training: 0.6105908584169454
User 62446 does not improve AUC. Reverting changes.
Training on augumented user 76623 43/50 current_auc = 0.6121516164994426
User 76623 AUC after training: 0.6104793756967669
User 76623 does not improve AUC. Reverting changes.
Training on augumented user 80108 44/50 current_auc = 0.6121516164994426
User 80108 AUC after training: 0.611371237458194
User 80108 does not improve AUC. Reverting changes.
Training on augumented user 70289 45/50 current_auc = 0.6121516164994426
User 70289 AUC after training: 0.6115942028985507
User 70289 does not improve AUC. Reverting changes.
Training on augumented user 50167 46/50 current_auc = 0.6121516164994426
User 50167 AUC after training: 0.6109253065774805
User 50167 does not improve AUC. Reverting changes.
Training on augumented user 25760 47/50 current_auc = 0.6121516164994426
User 25760 AUC after training: 0.6112597547380156
User 25760 does not improve AUC. Reverting changes.
Training on augumented user 38377 48/50 current_auc = 0.6121516164994426
User 38377 AUC after training: 0.6114827201783724
User 38377 does not improve AUC. Reverting changes.
Training on augumented user 71172 49/50 current_auc = 0.6121516164994426
User 71172 AUC after training: 0.6114827201783724
User 71172 does not improve AUC. Reverting changes.
[2024-12-02 17:49:09.583334] start test user 70274 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:10.285955] start test user 70274 21/568 recall augumented users by random, augumented_users = [50389, 8983, 82421, 107068, 42676, 42136, 133834, 93069, 123916, 79730, 97232, 68442, 41235, 69129, 84676, 84680, 99139, 101117, 70074, 48305, 51691, 5606, 101077, 76451, 74729, 137983, 108305, 126778, 45955, 2827, 118462, 39877, 42889, 129080, 106850, 89180, 16833, 126010, 103700, 680, 112751, 134815, 105109, 71903, 136475, 119759, 48537, 33109, 123939, 127924]
[2024-12-02 17:49:10.380608] user = 70274 Cloud 21/568
[2024-12-02 17:49:10.469807] user = 70274 Local 21/568
[2024-12-02 17:49:10.542311] user = 70274 Local+ 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:12.256434] user = 70274 MPDA- 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46820158992050404
Training on augumented user 50389 0/50 current_auc = 0.46820158992050404
User 50389 AUC after training: 0.4664766761661917
User 50389 does not improve AUC. Reverting changes.
Training on augumented user 8983 1/50 current_auc = 0.46820158992050404
User 8983 AUC after training: 0.46865156742162895
User 8983 improves AUC. Keeping the model.
Training on augumented user 82421 2/50 current_auc = 0.46865156742162895
User 82421 AUC after training: 0.4678266086695666
User 82421 does not improve AUC. Reverting changes.
Training on augumented user 107068 3/50 current_auc = 0.46865156742162895
User 107068 AUC after training: 0.467901604919754
User 107068 does not improve AUC. Reverting changes.
Training on augumented user 42676 4/50 current_auc = 0.46865156742162895
User 42676 AUC after training: 0.46842657867106646
User 42676 does not improve AUC. Reverting changes.
Training on augumented user 42136 5/50 current_auc = 0.46865156742162895
User 42136 AUC after training: 0.46812659367031645
User 42136 does not improve AUC. Reverting changes.
Training on augumented user 133834 6/50 current_auc = 0.46865156742162895
User 133834 AUC after training: 0.46865156742162895
User 133834 does not improve AUC. Reverting changes.
Training on augumented user 93069 7/50 current_auc = 0.46865156742162895
User 93069 AUC after training: 0.46865156742162895
User 93069 does not improve AUC. Reverting changes.
Training on augumented user 123916 8/50 current_auc = 0.46865156742162895
User 123916 AUC after training: 0.46797660116994155
User 123916 does not improve AUC. Reverting changes.
Training on augumented user 79730 9/50 current_auc = 0.46865156742162895
User 79730 AUC after training: 0.46805159742012903
User 79730 does not improve AUC. Reverting changes.
Training on augumented user 97232 10/50 current_auc = 0.46865156742162895
User 97232 AUC after training: 0.468351582420879
User 97232 does not improve AUC. Reverting changes.
Training on augumented user 68442 11/50 current_auc = 0.46865156742162895
User 68442 AUC after training: 0.46962651867406635
User 68442 improves AUC. Keeping the model.
Training on augumented user 41235 12/50 current_auc = 0.46962651867406635
User 41235 AUC after training: 0.47112644367781614
User 41235 improves AUC. Keeping the model.
Training on augumented user 69129 13/50 current_auc = 0.47112644367781614
User 69129 AUC after training: 0.47030148492575374
User 69129 does not improve AUC. Reverting changes.
Training on augumented user 84676 14/50 current_auc = 0.47112644367781614
User 84676 AUC after training: 0.4711264436778162
User 84676 improves AUC. Keeping the model.
Training on augumented user 84680 15/50 current_auc = 0.4711264436778162
User 84680 AUC after training: 0.47090145492725366
User 84680 does not improve AUC. Reverting changes.
Training on augumented user 99139 16/50 current_auc = 0.4711264436778162
User 99139 AUC after training: 0.4719514024298785
User 99139 improves AUC. Keeping the model.
Training on augumented user 101117 17/50 current_auc = 0.4719514024298785
User 101117 AUC after training: 0.4724763761811909
User 101117 improves AUC. Keeping the model.
Training on augumented user 70074 18/50 current_auc = 0.4724763761811909
User 70074 AUC after training: 0.4725513724313784
User 70074 improves AUC. Keeping the model.
Training on augumented user 48305 19/50 current_auc = 0.4725513724313784
User 48305 AUC after training: 0.471876406179691
User 48305 does not improve AUC. Reverting changes.
Training on augumented user 51691 20/50 current_auc = 0.4725513724313784
User 51691 AUC after training: 0.4724763761811909
User 51691 does not improve AUC. Reverting changes.
Training on augumented user 5606 21/50 current_auc = 0.4725513724313784
User 5606 AUC after training: 0.47180140992950353
User 5606 does not improve AUC. Reverting changes.
Training on augumented user 101077 22/50 current_auc = 0.4725513724313784
User 101077 AUC after training: 0.47195140242987854
User 101077 does not improve AUC. Reverting changes.
Training on augumented user 76451 23/50 current_auc = 0.4725513724313784
User 76451 AUC after training: 0.4721013949302535
User 76451 does not improve AUC. Reverting changes.
Training on augumented user 74729 24/50 current_auc = 0.4725513724313784
User 74729 AUC after training: 0.4721013949302535
User 74729 does not improve AUC. Reverting changes.
Training on augumented user 137983 25/50 current_auc = 0.4725513724313784
User 137983 AUC after training: 0.4709764511774411
User 137983 does not improve AUC. Reverting changes.
Training on augumented user 108305 26/50 current_auc = 0.4725513724313784
User 108305 AUC after training: 0.47217639118044097
User 108305 does not improve AUC. Reverting changes.
Training on augumented user 126778 27/50 current_auc = 0.4725513724313784
User 126778 AUC after training: 0.47292635368231595
User 126778 improves AUC. Keeping the model.
Training on augumented user 45955 28/50 current_auc = 0.47292635368231595
User 45955 AUC after training: 0.47315134243287826
User 45955 improves AUC. Keeping the model.
Training on augumented user 2827 29/50 current_auc = 0.47315134243287826
User 2827 AUC after training: 0.47322633868306585
User 2827 improves AUC. Keeping the model.
Training on augumented user 118462 30/50 current_auc = 0.47322633868306585
User 118462 AUC after training: 0.47165141742912864
User 118462 does not improve AUC. Reverting changes.
Training on augumented user 39877 31/50 current_auc = 0.47322633868306585
User 39877 AUC after training: 0.4730013499325035
User 39877 does not improve AUC. Reverting changes.
Training on augumented user 42889 32/50 current_auc = 0.47322633868306585
User 42889 AUC after training: 0.47127643617819115
User 42889 does not improve AUC. Reverting changes.
Training on augumented user 129080 33/50 current_auc = 0.47322633868306585
User 129080 AUC after training: 0.47315134243287843
User 129080 does not improve AUC. Reverting changes.
Training on augumented user 106850 34/50 current_auc = 0.47322633868306585
User 106850 AUC after training: 0.472626368681566
User 106850 does not improve AUC. Reverting changes.
Training on augumented user 89180 35/50 current_auc = 0.47322633868306585
User 89180 AUC after training: 0.472476376181191
User 89180 does not improve AUC. Reverting changes.
Training on augumented user 16833 36/50 current_auc = 0.47322633868306585
User 16833 AUC after training: 0.4733013349332534
User 16833 improves AUC. Keeping the model.
Training on augumented user 126010 37/50 current_auc = 0.4733013349332534
User 126010 AUC after training: 0.4740512974351283
User 126010 improves AUC. Keeping the model.
Training on augumented user 103700 38/50 current_auc = 0.4740512974351283
User 103700 AUC after training: 0.4738263086845658
User 103700 does not improve AUC. Reverting changes.
Training on augumented user 680 39/50 current_auc = 0.4740512974351283
User 680 AUC after training: 0.4715014249287536
User 680 does not improve AUC. Reverting changes.
Training on augumented user 112751 40/50 current_auc = 0.4740512974351283
User 112751 AUC after training: 0.4723263836808159
User 112751 does not improve AUC. Reverting changes.
Training on augumented user 134815 41/50 current_auc = 0.4740512974351283
User 134815 AUC after training: 0.4745762711864407
User 134815 improves AUC. Keeping the model.
Training on augumented user 105109 42/50 current_auc = 0.4745762711864407
User 105109 AUC after training: 0.47435128243587826
User 105109 does not improve AUC. Reverting changes.
Training on augumented user 71903 43/50 current_auc = 0.4745762711864407
User 71903 AUC after training: 0.47622618869056554
User 71903 improves AUC. Keeping the model.
Training on augumented user 136475 44/50 current_auc = 0.47622618869056554
User 136475 AUC after training: 0.47592620368981553
User 136475 does not improve AUC. Reverting changes.
Training on augumented user 119759 45/50 current_auc = 0.47622618869056554
User 119759 AUC after training: 0.476151192440378
User 119759 does not improve AUC. Reverting changes.
Training on augumented user 48537 46/50 current_auc = 0.47622618869056554
User 48537 AUC after training: 0.47517624118794066
User 48537 does not improve AUC. Reverting changes.
Training on augumented user 33109 47/50 current_auc = 0.47622618869056554
User 33109 AUC after training: 0.4766011699415029
User 33109 improves AUC. Keeping the model.
Training on augumented user 123939 48/50 current_auc = 0.4766011699415029
User 123939 AUC after training: 0.47442627868606574
User 123939 does not improve AUC. Reverting changes.
Training on augumented user 127924 49/50 current_auc = 0.4766011699415029
User 127924 AUC after training: 0.4730013499325034
User 127924 does not improve AUC. Reverting changes.
[2024-12-02 17:49:45.213799] start test user 70279 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:45.964619] start test user 70279 22/568 recall augumented users by random, augumented_users = [96897, 24967, 39131, 96393, 133301, 128856, 52255, 105257, 95520, 33066, 76533, 76580, 111737, 111922, 60058, 92670, 40664, 37444, 70861, 133569, 106094, 34855, 67017, 69250, 21768, 33688, 21659, 133750, 49663, 91454, 89273, 116505, 20919, 132293, 133010, 85661, 21484, 4278, 62337, 57319, 59053, 10972, 10937, 97734, 101599, 32707, 98759, 94420, 137512, 118037]
[2024-12-02 17:49:45.983422] user = 70279 Cloud 22/568
[2024-12-02 17:49:46.001251] user = 70279 Local 22/568
[2024-12-02 17:49:46.184770] user = 70279 Local+ 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:48.621563] user = 70279 MPDA- 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.693121693121693
Training on augumented user 96897 0/50 current_auc = 0.693121693121693
User 96897 AUC after training: 0.693121693121693
User 96897 does not improve AUC. Reverting changes.
Training on augumented user 24967 1/50 current_auc = 0.693121693121693
User 24967 AUC after training: 0.693121693121693
User 24967 does not improve AUC. Reverting changes.
Training on augumented user 39131 2/50 current_auc = 0.693121693121693
User 39131 AUC after training: 0.6938775510204082
User 39131 improves AUC. Keeping the model.
Training on augumented user 96393 3/50 current_auc = 0.6938775510204082
User 96393 AUC after training: 0.6938775510204082
User 96393 does not improve AUC. Reverting changes.
Training on augumented user 133301 4/50 current_auc = 0.6938775510204082
User 133301 AUC after training: 0.6946334089191232
User 133301 improves AUC. Keeping the model.
Training on augumented user 128856 5/50 current_auc = 0.6946334089191232
User 128856 AUC after training: 0.6946334089191232
User 128856 does not improve AUC. Reverting changes.
Training on augumented user 52255 6/50 current_auc = 0.6946334089191232
User 52255 AUC after training: 0.6938775510204082
User 52255 does not improve AUC. Reverting changes.
Training on augumented user 105257 7/50 current_auc = 0.6946334089191232
User 105257 AUC after training: 0.6953892668178382
User 105257 improves AUC. Keeping the model.
Training on augumented user 95520 8/50 current_auc = 0.6953892668178382
User 95520 AUC after training: 0.6946334089191232
User 95520 does not improve AUC. Reverting changes.
Training on augumented user 33066 9/50 current_auc = 0.6953892668178382
User 33066 AUC after training: 0.6953892668178382
User 33066 does not improve AUC. Reverting changes.
Training on augumented user 76533 10/50 current_auc = 0.6953892668178382
User 76533 AUC after training: 0.6953892668178382
User 76533 does not improve AUC. Reverting changes.
Training on augumented user 76580 11/50 current_auc = 0.6953892668178382
User 76580 AUC after training: 0.6953892668178382
User 76580 does not improve AUC. Reverting changes.
Training on augumented user 111737 12/50 current_auc = 0.6953892668178382
User 111737 AUC after training: 0.6953892668178382
User 111737 does not improve AUC. Reverting changes.
Training on augumented user 111922 13/50 current_auc = 0.6953892668178382
User 111922 AUC after training: 0.6953892668178382
User 111922 does not improve AUC. Reverting changes.
Training on augumented user 60058 14/50 current_auc = 0.6953892668178382
User 60058 AUC after training: 0.6953892668178382
User 60058 does not improve AUC. Reverting changes.
Training on augumented user 92670 15/50 current_auc = 0.6953892668178382
User 92670 AUC after training: 0.6946334089191232
User 92670 does not improve AUC. Reverting changes.
Training on augumented user 40664 16/50 current_auc = 0.6953892668178382
User 40664 AUC after training: 0.6953892668178382
User 40664 does not improve AUC. Reverting changes.
Training on augumented user 37444 17/50 current_auc = 0.6953892668178382
User 37444 AUC after training: 0.6953892668178382
User 37444 does not improve AUC. Reverting changes.
Training on augumented user 70861 18/50 current_auc = 0.6953892668178382
User 70861 AUC after training: 0.6946334089191232
User 70861 does not improve AUC. Reverting changes.
Training on augumented user 133569 19/50 current_auc = 0.6953892668178382
User 133569 AUC after training: 0.6953892668178382
User 133569 does not improve AUC. Reverting changes.
Training on augumented user 106094 20/50 current_auc = 0.6953892668178382
User 106094 AUC after training: 0.6953892668178382
User 106094 does not improve AUC. Reverting changes.
Training on augumented user 34855 21/50 current_auc = 0.6953892668178382
User 34855 AUC after training: 0.6953892668178382
User 34855 does not improve AUC. Reverting changes.
Training on augumented user 67017 22/50 current_auc = 0.6953892668178382
User 67017 AUC after training: 0.6953892668178382
User 67017 does not improve AUC. Reverting changes.
Training on augumented user 69250 23/50 current_auc = 0.6953892668178382
User 69250 AUC after training: 0.6953892668178382
User 69250 does not improve AUC. Reverting changes.
Training on augumented user 21768 24/50 current_auc = 0.6953892668178382
User 21768 AUC after training: 0.6953892668178382
User 21768 does not improve AUC. Reverting changes.
Training on augumented user 33688 25/50 current_auc = 0.6953892668178382
User 33688 AUC after training: 0.6953892668178382
User 33688 does not improve AUC. Reverting changes.
Training on augumented user 21659 26/50 current_auc = 0.6953892668178382
User 21659 AUC after training: 0.6946334089191232
User 21659 does not improve AUC. Reverting changes.
Training on augumented user 133750 27/50 current_auc = 0.6953892668178382
User 133750 AUC after training: 0.6953892668178382
User 133750 does not improve AUC. Reverting changes.
Training on augumented user 49663 28/50 current_auc = 0.6953892668178382
User 49663 AUC after training: 0.6953892668178382
User 49663 does not improve AUC. Reverting changes.
Training on augumented user 91454 29/50 current_auc = 0.6953892668178382
User 91454 AUC after training: 0.6953892668178382
User 91454 does not improve AUC. Reverting changes.
Training on augumented user 89273 30/50 current_auc = 0.6953892668178382
User 89273 AUC after training: 0.6953892668178382
User 89273 does not improve AUC. Reverting changes.
Training on augumented user 116505 31/50 current_auc = 0.6953892668178382
User 116505 AUC after training: 0.6946334089191232
User 116505 does not improve AUC. Reverting changes.
Training on augumented user 20919 32/50 current_auc = 0.6953892668178382
User 20919 AUC after training: 0.6953892668178382
User 20919 does not improve AUC. Reverting changes.
Training on augumented user 132293 33/50 current_auc = 0.6953892668178382
User 132293 AUC after training: 0.6953892668178382
User 132293 does not improve AUC. Reverting changes.
Training on augumented user 133010 34/50 current_auc = 0.6953892668178382
User 133010 AUC after training: 0.6953892668178382
User 133010 does not improve AUC. Reverting changes.
Training on augumented user 85661 35/50 current_auc = 0.6953892668178382
User 85661 AUC after training: 0.6953892668178382
User 85661 does not improve AUC. Reverting changes.
Training on augumented user 21484 36/50 current_auc = 0.6953892668178382
User 21484 AUC after training: 0.6953892668178382
User 21484 does not improve AUC. Reverting changes.
Training on augumented user 4278 37/50 current_auc = 0.6953892668178382
User 4278 AUC after training: 0.6953892668178382
User 4278 does not improve AUC. Reverting changes.
Training on augumented user 62337 38/50 current_auc = 0.6953892668178382
User 62337 AUC after training: 0.6953892668178382
User 62337 does not improve AUC. Reverting changes.
Training on augumented user 57319 39/50 current_auc = 0.6953892668178382
User 57319 AUC after training: 0.6953892668178382
User 57319 does not improve AUC. Reverting changes.
Training on augumented user 59053 40/50 current_auc = 0.6953892668178382
User 59053 AUC after training: 0.6953892668178382
User 59053 does not improve AUC. Reverting changes.
Training on augumented user 10972 41/50 current_auc = 0.6953892668178382
User 10972 AUC after training: 0.6953892668178382
User 10972 does not improve AUC. Reverting changes.
Training on augumented user 10937 42/50 current_auc = 0.6953892668178382
User 10937 AUC after training: 0.690854119425548
User 10937 does not improve AUC. Reverting changes.
Training on augumented user 97734 43/50 current_auc = 0.6953892668178382
User 97734 AUC after training: 0.6953892668178382
User 97734 does not improve AUC. Reverting changes.
Training on augumented user 101599 44/50 current_auc = 0.6953892668178382
User 101599 AUC after training: 0.6953892668178382
User 101599 does not improve AUC. Reverting changes.
Training on augumented user 32707 45/50 current_auc = 0.6953892668178382
User 32707 AUC after training: 0.6953892668178382
User 32707 does not improve AUC. Reverting changes.
Training on augumented user 98759 46/50 current_auc = 0.6953892668178382
User 98759 AUC after training: 0.6953892668178382
User 98759 does not improve AUC. Reverting changes.
Training on augumented user 94420 47/50 current_auc = 0.6953892668178382
User 94420 AUC after training: 0.6953892668178382
User 94420 does not improve AUC. Reverting changes.
Training on augumented user 137512 48/50 current_auc = 0.6953892668178382
User 137512 AUC after training: 0.6953892668178382
User 137512 does not improve AUC. Reverting changes.
Training on augumented user 118037 49/50 current_auc = 0.6953892668178382
User 118037 AUC after training: 0.6953892668178382
User 118037 does not improve AUC. Reverting changes.
[2024-12-02 17:50:13.744941] start test user 70282 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:14.531224] start test user 70282 23/568 recall augumented users by random, augumented_users = [25329, 37775, 7932, 100084, 302, 16532, 766, 101226, 36031, 38539, 13748, 72077, 2553, 41811, 108584, 3089, 107105, 41323, 17932, 67588, 101718, 71314, 109972, 105840, 24281, 83799, 107705, 44125, 106532, 87103, 138250, 128689, 66042, 23979, 126885, 123939, 22860, 81510, 38004, 91494, 3557, 8636, 27714, 76053, 74372, 131911, 56304, 79250, 114140, 108054]
[2024-12-02 17:50:14.547063] user = 70282 Cloud 23/568
[2024-12-02 17:50:14.572682] user = 70282 Local 23/568
[2024-12-02 17:50:14.789296] user = 70282 Local+ 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:17.040120] user = 70282 MPDA- 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5694158075601374
Training on augumented user 25329 0/50 current_auc = 0.5694158075601374
User 25329 AUC after training: 0.5690721649484536
User 25329 does not improve AUC. Reverting changes.
Training on augumented user 37775 1/50 current_auc = 0.5694158075601374
User 37775 AUC after training: 0.5687285223367697
User 37775 does not improve AUC. Reverting changes.
Training on augumented user 7932 2/50 current_auc = 0.5694158075601374
User 7932 AUC after training: 0.5697594501718213
User 7932 improves AUC. Keeping the model.
Training on augumented user 100084 3/50 current_auc = 0.5697594501718213
User 100084 AUC after training: 0.5670103092783505
User 100084 does not improve AUC. Reverting changes.
Training on augumented user 302 4/50 current_auc = 0.5697594501718213
User 302 AUC after training: 0.5694158075601374
User 302 does not improve AUC. Reverting changes.
Training on augumented user 16532 5/50 current_auc = 0.5697594501718213
User 16532 AUC after training: 0.5707903780068728
User 16532 improves AUC. Keeping the model.
Training on augumented user 766 6/50 current_auc = 0.5707903780068728
User 766 AUC after training: 0.5673539518900343
User 766 does not improve AUC. Reverting changes.
Training on augumented user 101226 7/50 current_auc = 0.5707903780068728
User 101226 AUC after training: 0.5697594501718213
User 101226 does not improve AUC. Reverting changes.
Training on augumented user 36031 8/50 current_auc = 0.5707903780068728
User 36031 AUC after training: 0.5690721649484536
User 36031 does not improve AUC. Reverting changes.
Training on augumented user 38539 9/50 current_auc = 0.5707903780068728
User 38539 AUC after training: 0.565979381443299
User 38539 does not improve AUC. Reverting changes.
Training on augumented user 13748 10/50 current_auc = 0.5707903780068728
User 13748 AUC after training: 0.5683848797250859
User 13748 does not improve AUC. Reverting changes.
Training on augumented user 72077 11/50 current_auc = 0.5707903780068728
User 72077 AUC after training: 0.5652920962199313
User 72077 does not improve AUC. Reverting changes.
Training on augumented user 2553 12/50 current_auc = 0.5707903780068728
User 2553 AUC after training: 0.5701030927835051
User 2553 does not improve AUC. Reverting changes.
Training on augumented user 41811 13/50 current_auc = 0.5707903780068728
User 41811 AUC after training: 0.5701030927835051
User 41811 does not improve AUC. Reverting changes.
Training on augumented user 108584 14/50 current_auc = 0.5707903780068728
User 108584 AUC after training: 0.5697594501718213
User 108584 does not improve AUC. Reverting changes.
Training on augumented user 3089 15/50 current_auc = 0.5707903780068728
User 3089 AUC after training: 0.5687285223367697
User 3089 does not improve AUC. Reverting changes.
Training on augumented user 107105 16/50 current_auc = 0.5707903780068728
User 107105 AUC after training: 0.5683848797250859
User 107105 does not improve AUC. Reverting changes.
Training on augumented user 41323 17/50 current_auc = 0.5707903780068728
User 41323 AUC after training: 0.5701030927835051
User 41323 does not improve AUC. Reverting changes.
Training on augumented user 17932 18/50 current_auc = 0.5707903780068728
User 17932 AUC after training: 0.5701030927835051
User 17932 does not improve AUC. Reverting changes.
Training on augumented user 67588 19/50 current_auc = 0.5707903780068728
User 67588 AUC after training: 0.5694158075601374
User 67588 does not improve AUC. Reverting changes.
Training on augumented user 101718 20/50 current_auc = 0.5707903780068728
User 101718 AUC after training: 0.5690721649484536
User 101718 does not improve AUC. Reverting changes.
Training on augumented user 71314 21/50 current_auc = 0.5707903780068728
User 71314 AUC after training: 0.5683848797250859
User 71314 does not improve AUC. Reverting changes.
Training on augumented user 109972 22/50 current_auc = 0.5707903780068728
User 109972 AUC after training: 0.5694158075601374
User 109972 does not improve AUC. Reverting changes.
Training on augumented user 105840 23/50 current_auc = 0.5707903780068728
User 105840 AUC after training: 0.5690721649484536
User 105840 does not improve AUC. Reverting changes.
Training on augumented user 24281 24/50 current_auc = 0.5707903780068728
User 24281 AUC after training: 0.5694158075601374
User 24281 does not improve AUC. Reverting changes.
Training on augumented user 83799 25/50 current_auc = 0.5707903780068728
User 83799 AUC after training: 0.5683848797250859
User 83799 does not improve AUC. Reverting changes.
Training on augumented user 107705 26/50 current_auc = 0.5707903780068728
User 107705 AUC after training: 0.5690721649484536
User 107705 does not improve AUC. Reverting changes.
Training on augumented user 44125 27/50 current_auc = 0.5707903780068728
User 44125 AUC after training: 0.570446735395189
User 44125 does not improve AUC. Reverting changes.
Training on augumented user 106532 28/50 current_auc = 0.5707903780068728
User 106532 AUC after training: 0.568041237113402
User 106532 does not improve AUC. Reverting changes.
Training on augumented user 87103 29/50 current_auc = 0.5707903780068728
User 87103 AUC after training: 0.5697594501718213
User 87103 does not improve AUC. Reverting changes.
Training on augumented user 138250 30/50 current_auc = 0.5707903780068728
User 138250 AUC after training: 0.5683848797250859
User 138250 does not improve AUC. Reverting changes.
Training on augumented user 128689 31/50 current_auc = 0.5707903780068728
User 128689 AUC after training: 0.5687285223367697
User 128689 does not improve AUC. Reverting changes.
Training on augumented user 66042 32/50 current_auc = 0.5707903780068728
User 66042 AUC after training: 0.5697594501718214
User 66042 does not improve AUC. Reverting changes.
Training on augumented user 23979 33/50 current_auc = 0.5707903780068728
User 23979 AUC after training: 0.5690721649484536
User 23979 does not improve AUC. Reverting changes.
Training on augumented user 126885 34/50 current_auc = 0.5707903780068728
User 126885 AUC after training: 0.5701030927835051
User 126885 does not improve AUC. Reverting changes.
Training on augumented user 123939 35/50 current_auc = 0.5707903780068728
User 123939 AUC after training: 0.5683848797250859
User 123939 does not improve AUC. Reverting changes.
Training on augumented user 22860 36/50 current_auc = 0.5707903780068728
User 22860 AUC after training: 0.5701030927835051
User 22860 does not improve AUC. Reverting changes.
Training on augumented user 81510 37/50 current_auc = 0.5707903780068728
User 81510 AUC after training: 0.5701030927835051
User 81510 does not improve AUC. Reverting changes.
Training on augumented user 38004 38/50 current_auc = 0.5707903780068728
User 38004 AUC after training: 0.5694158075601374
User 38004 does not improve AUC. Reverting changes.
Training on augumented user 91494 39/50 current_auc = 0.5707903780068728
User 91494 AUC after training: 0.5687285223367697
User 91494 does not improve AUC. Reverting changes.
Training on augumented user 3557 40/50 current_auc = 0.5707903780068728
User 3557 AUC after training: 0.5694158075601374
User 3557 does not improve AUC. Reverting changes.
Training on augumented user 8636 41/50 current_auc = 0.5707903780068728
User 8636 AUC after training: 0.5735395189003436
User 8636 improves AUC. Keeping the model.
Training on augumented user 27714 42/50 current_auc = 0.5735395189003436
User 27714 AUC after training: 0.5725085910652921
User 27714 does not improve AUC. Reverting changes.
Training on augumented user 76053 43/50 current_auc = 0.5735395189003436
User 76053 AUC after training: 0.5725085910652921
User 76053 does not improve AUC. Reverting changes.
Training on augumented user 74372 44/50 current_auc = 0.5735395189003436
User 74372 AUC after training: 0.5711340206185567
User 74372 does not improve AUC. Reverting changes.
Training on augumented user 131911 45/50 current_auc = 0.5735395189003436
User 131911 AUC after training: 0.5718213058419244
User 131911 does not improve AUC. Reverting changes.
Training on augumented user 56304 46/50 current_auc = 0.5735395189003436
User 56304 AUC after training: 0.5731958762886598
User 56304 does not improve AUC. Reverting changes.
Training on augumented user 79250 47/50 current_auc = 0.5735395189003436
User 79250 AUC after training: 0.5721649484536082
User 79250 does not improve AUC. Reverting changes.
Training on augumented user 114140 48/50 current_auc = 0.5735395189003436
User 114140 AUC after training: 0.5725085910652921
User 114140 does not improve AUC. Reverting changes.
Training on augumented user 108054 49/50 current_auc = 0.5735395189003436
User 108054 AUC after training: 0.5701030927835051
User 108054 does not improve AUC. Reverting changes.
[2024-12-02 17:50:49.233210] start test user 70303 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:49.648910] start test user 70303 24/568 recall augumented users by random, augumented_users = [71991, 57649, 93344, 79042, 18262, 129256, 116787, 64420, 18205, 56717, 26974, 75700, 14831, 100862, 18797, 100137, 130785, 23118, 8617, 116704, 80467, 19487, 116224, 111317, 91508, 65581, 109503, 109627, 72353, 12662, 106923, 65851, 36128, 8442, 137225, 107717, 22736, 86105, 122341, 23448, 136891, 20643, 94920, 80530, 101244, 89941, 95439, 130943, 19612, 59010]
[2024-12-02 17:50:49.665983] user = 70303 Cloud 24/568
[2024-12-02 17:50:49.677941] user = 70303 Local 24/568
[2024-12-02 17:50:49.828704] user = 70303 Local+ 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:51.567989] user = 70303 MPDA- 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6818181818181818
Training on augumented user 71991 0/50 current_auc = 0.6818181818181818
User 71991 AUC after training: 0.6832844574780058
User 71991 improves AUC. Keeping the model.
Training on augumented user 57649 1/50 current_auc = 0.6832844574780058
User 57649 AUC after training: 0.6832844574780058
User 57649 does not improve AUC. Reverting changes.
Training on augumented user 93344 2/50 current_auc = 0.6832844574780058
User 93344 AUC after training: 0.6832844574780058
User 93344 does not improve AUC. Reverting changes.
Training on augumented user 79042 3/50 current_auc = 0.6832844574780058
User 79042 AUC after training: 0.6832844574780058
User 79042 does not improve AUC. Reverting changes.
Training on augumented user 18262 4/50 current_auc = 0.6832844574780058
User 18262 AUC after training: 0.6832844574780058
User 18262 does not improve AUC. Reverting changes.
Training on augumented user 129256 5/50 current_auc = 0.6832844574780058
User 129256 AUC after training: 0.6818181818181818
User 129256 does not improve AUC. Reverting changes.
Training on augumented user 116787 6/50 current_auc = 0.6832844574780058
User 116787 AUC after training: 0.68475073313783
User 116787 improves AUC. Keeping the model.
Training on augumented user 64420 7/50 current_auc = 0.68475073313783
User 64420 AUC after training: 0.68475073313783
User 64420 does not improve AUC. Reverting changes.
Training on augumented user 18205 8/50 current_auc = 0.68475073313783
User 18205 AUC after training: 0.6832844574780058
User 18205 does not improve AUC. Reverting changes.
Training on augumented user 56717 9/50 current_auc = 0.68475073313783
User 56717 AUC after training: 0.68475073313783
User 56717 does not improve AUC. Reverting changes.
Training on augumented user 26974 10/50 current_auc = 0.68475073313783
User 26974 AUC after training: 0.6818181818181818
User 26974 does not improve AUC. Reverting changes.
Training on augumented user 75700 11/50 current_auc = 0.68475073313783
User 75700 AUC after training: 0.6832844574780059
User 75700 does not improve AUC. Reverting changes.
Training on augumented user 14831 12/50 current_auc = 0.68475073313783
User 14831 AUC after training: 0.6832844574780059
User 14831 does not improve AUC. Reverting changes.
Training on augumented user 100862 13/50 current_auc = 0.68475073313783
User 100862 AUC after training: 0.6818181818181818
User 100862 does not improve AUC. Reverting changes.
Training on augumented user 18797 14/50 current_auc = 0.68475073313783
User 18797 AUC after training: 0.6803519061583577
User 18797 does not improve AUC. Reverting changes.
Training on augumented user 100137 15/50 current_auc = 0.68475073313783
User 100137 AUC after training: 0.6832844574780059
User 100137 does not improve AUC. Reverting changes.
Training on augumented user 130785 16/50 current_auc = 0.68475073313783
User 130785 AUC after training: 0.68475073313783
User 130785 does not improve AUC. Reverting changes.
Training on augumented user 23118 17/50 current_auc = 0.68475073313783
User 23118 AUC after training: 0.6832844574780058
User 23118 does not improve AUC. Reverting changes.
Training on augumented user 8617 18/50 current_auc = 0.68475073313783
User 8617 AUC after training: 0.6832844574780059
User 8617 does not improve AUC. Reverting changes.
Training on augumented user 116704 19/50 current_auc = 0.68475073313783
User 116704 AUC after training: 0.6832844574780059
User 116704 does not improve AUC. Reverting changes.
Training on augumented user 80467 20/50 current_auc = 0.68475073313783
User 80467 AUC after training: 0.68475073313783
User 80467 does not improve AUC. Reverting changes.
Training on augumented user 19487 21/50 current_auc = 0.68475073313783
User 19487 AUC after training: 0.68475073313783
User 19487 does not improve AUC. Reverting changes.
Training on augumented user 116224 22/50 current_auc = 0.68475073313783
User 116224 AUC after training: 0.6832844574780059
User 116224 does not improve AUC. Reverting changes.
Training on augumented user 111317 23/50 current_auc = 0.68475073313783
User 111317 AUC after training: 0.6825513196480939
User 111317 does not improve AUC. Reverting changes.
Training on augumented user 91508 24/50 current_auc = 0.68475073313783
User 91508 AUC after training: 0.6788856304985337
User 91508 does not improve AUC. Reverting changes.
Training on augumented user 65581 25/50 current_auc = 0.68475073313783
User 65581 AUC after training: 0.6818181818181818
User 65581 does not improve AUC. Reverting changes.
Training on augumented user 109503 26/50 current_auc = 0.68475073313783
User 109503 AUC after training: 0.6818181818181818
User 109503 does not improve AUC. Reverting changes.
Training on augumented user 109627 27/50 current_auc = 0.68475073313783
User 109627 AUC after training: 0.6832844574780058
User 109627 does not improve AUC. Reverting changes.
Training on augumented user 72353 28/50 current_auc = 0.68475073313783
User 72353 AUC after training: 0.68475073313783
User 72353 does not improve AUC. Reverting changes.
Training on augumented user 12662 29/50 current_auc = 0.68475073313783
User 12662 AUC after training: 0.6818181818181818
User 12662 does not improve AUC. Reverting changes.
Training on augumented user 106923 30/50 current_auc = 0.68475073313783
User 106923 AUC after training: 0.6818181818181818
User 106923 does not improve AUC. Reverting changes.
Training on augumented user 65851 31/50 current_auc = 0.68475073313783
User 65851 AUC after training: 0.68475073313783
User 65851 does not improve AUC. Reverting changes.
Training on augumented user 36128 32/50 current_auc = 0.68475073313783
User 36128 AUC after training: 0.6832844574780058
User 36128 does not improve AUC. Reverting changes.
Training on augumented user 8442 33/50 current_auc = 0.68475073313783
User 8442 AUC after training: 0.6818181818181818
User 8442 does not improve AUC. Reverting changes.
Training on augumented user 137225 34/50 current_auc = 0.68475073313783
User 137225 AUC after training: 0.6818181818181819
User 137225 does not improve AUC. Reverting changes.
Training on augumented user 107717 35/50 current_auc = 0.68475073313783
User 107717 AUC after training: 0.68475073313783
User 107717 does not improve AUC. Reverting changes.
Training on augumented user 22736 36/50 current_auc = 0.68475073313783
User 22736 AUC after training: 0.68475073313783
User 22736 does not improve AUC. Reverting changes.
Training on augumented user 86105 37/50 current_auc = 0.68475073313783
User 86105 AUC after training: 0.6818181818181818
User 86105 does not improve AUC. Reverting changes.
Training on augumented user 122341 38/50 current_auc = 0.68475073313783
User 122341 AUC after training: 0.6832844574780058
User 122341 does not improve AUC. Reverting changes.
Training on augumented user 23448 39/50 current_auc = 0.68475073313783
User 23448 AUC after training: 0.6832844574780058
User 23448 does not improve AUC. Reverting changes.
Training on augumented user 136891 40/50 current_auc = 0.68475073313783
User 136891 AUC after training: 0.6832844574780058
User 136891 does not improve AUC. Reverting changes.
Training on augumented user 20643 41/50 current_auc = 0.68475073313783
User 20643 AUC after training: 0.6847507331378299
User 20643 does not improve AUC. Reverting changes.
Training on augumented user 94920 42/50 current_auc = 0.68475073313783
User 94920 AUC after training: 0.6840175953079178
User 94920 does not improve AUC. Reverting changes.
Training on augumented user 80530 43/50 current_auc = 0.68475073313783
User 80530 AUC after training: 0.6818181818181818
User 80530 does not improve AUC. Reverting changes.
Training on augumented user 101244 44/50 current_auc = 0.68475073313783
User 101244 AUC after training: 0.6832844574780058
User 101244 does not improve AUC. Reverting changes.
Training on augumented user 89941 45/50 current_auc = 0.68475073313783
User 89941 AUC after training: 0.68475073313783
User 89941 does not improve AUC. Reverting changes.
Training on augumented user 95439 46/50 current_auc = 0.68475073313783
User 95439 AUC after training: 0.6832844574780059
User 95439 does not improve AUC. Reverting changes.
Training on augumented user 130943 47/50 current_auc = 0.68475073313783
User 130943 AUC after training: 0.6818181818181818
User 130943 does not improve AUC. Reverting changes.
Training on augumented user 19612 48/50 current_auc = 0.68475073313783
User 19612 AUC after training: 0.6847507331378299
User 19612 does not improve AUC. Reverting changes.
Training on augumented user 59010 49/50 current_auc = 0.68475073313783
User 59010 AUC after training: 0.6825513196480938
User 59010 does not improve AUC. Reverting changes.
[2024-12-02 17:51:18.988124] start test user 70342 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:19.764308] start test user 70342 25/568 recall augumented users by random, augumented_users = [71397, 53551, 11959, 32328, 56826, 110916, 64462, 37137, 29054, 67991, 47488, 76771, 67538, 67090, 60879, 26234, 39502, 32251, 87665, 105347, 79484, 108522, 135838, 124135, 47245, 89152, 100708, 134640, 97582, 66571, 87723, 51682, 86322, 8298, 29813, 106533, 29064, 117606, 108088, 98942, 53632, 123102, 91275, 6574, 25555, 75642, 71511, 4034, 629, 45334]
[2024-12-02 17:51:19.789295] user = 70342 Cloud 25/568
[2024-12-02 17:51:19.898844] user = 70342 Local 25/568
[2024-12-02 17:51:19.979818] user = 70342 Local+ 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:22.113614] user = 70342 MPDA- 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7794307861237251
Training on augumented user 71397 0/50 current_auc = 0.7794307861237251
User 71397 AUC after training: 0.7789329449862279
User 71397 does not improve AUC. Reverting changes.
Training on augumented user 53551 1/50 current_auc = 0.7794307861237251
User 53551 AUC after training: 0.7786188863247228
User 53551 does not improve AUC. Reverting changes.
Training on augumented user 11959 2/50 current_auc = 0.7794307861237251
User 11959 AUC after training: 0.7796959912156629
User 11959 improves AUC. Keeping the model.
Training on augumented user 32328 3/50 current_auc = 0.7796959912156629
User 32328 AUC after training: 0.7792493300081889
User 32328 does not improve AUC. Reverting changes.
Training on augumented user 56826 4/50 current_auc = 0.7796959912156629
User 56826 AUC after training: 0.7795587359487829
User 56826 does not improve AUC. Reverting changes.
Training on augumented user 110916 5/50 current_auc = 0.7796959912156629
User 110916 AUC after training: 0.7799425854239559
User 110916 improves AUC. Keeping the model.
Training on augumented user 64462 6/50 current_auc = 0.7799425854239559
User 64462 AUC after training: 0.7797099493783964
User 64462 does not improve AUC. Reverting changes.
Training on augumented user 37137 7/50 current_auc = 0.7799425854239559
User 37137 AUC after training: 0.7800123762376239
User 37137 improves AUC. Keeping the model.
Training on augumented user 29054 8/50 current_auc = 0.7800123762376239
User 29054 AUC after training: 0.7797681083897865
User 29054 does not improve AUC. Reverting changes.
Training on augumented user 67991 9/50 current_auc = 0.7800123762376239
User 67991 AUC after training: 0.7799146690984888
User 67991 does not improve AUC. Reverting changes.
Training on augumented user 47488 10/50 current_auc = 0.7800123762376239
User 47488 AUC after training: 0.7796750539715626
User 47488 does not improve AUC. Reverting changes.
Training on augumented user 76771 11/50 current_auc = 0.7800123762376239
User 76771 AUC after training: 0.7797076230179408
User 76771 does not improve AUC. Reverting changes.
Training on augumented user 67538 12/50 current_auc = 0.7800123762376239
User 67538 AUC after training: 0.7800402925630909
User 67538 improves AUC. Keeping the model.
Training on augumented user 67090 13/50 current_auc = 0.7800402925630909
User 67090 AUC after training: 0.7797867192734311
User 67090 does not improve AUC. Reverting changes.
Training on augumented user 60879 14/50 current_auc = 0.7800402925630909
User 60879 AUC after training: 0.7799751544703343
User 60879 does not improve AUC. Reverting changes.
Training on augumented user 26234 15/50 current_auc = 0.7800402925630909
User 26234 AUC after training: 0.7803962257127969
User 26234 improves AUC. Keeping the model.
Training on augumented user 39502 16/50 current_auc = 0.7803962257127969
User 39502 AUC after training: 0.7806195563165339
User 39502 improves AUC. Keeping the model.
Training on augumented user 32251 17/50 current_auc = 0.7806195563165339
User 32251 AUC after training: 0.780189179632249
User 32251 does not improve AUC. Reverting changes.
Training on augumented user 87665 18/50 current_auc = 0.7806195563165339
User 87665 AUC after training: 0.779896058214844
User 87665 does not improve AUC. Reverting changes.
Training on augumented user 105347 19/50 current_auc = 0.7806195563165339
User 105347 AUC after training: 0.7802845604109283
User 105347 does not improve AUC. Reverting changes.
Training on augumented user 79484 20/50 current_auc = 0.7806195563165339
User 79484 AUC after training: 0.7797076230179409
User 79484 does not improve AUC. Reverting changes.
Training on augumented user 108522 21/50 current_auc = 0.7806195563165339
User 108522 AUC after training: 0.7801635896672374
User 108522 does not improve AUC. Reverting changes.
Training on augumented user 135838 22/50 current_auc = 0.7806195563165339
User 135838 AUC after training: 0.7800728616094692
User 135838 does not improve AUC. Reverting changes.
Training on augumented user 124135 23/50 current_auc = 0.7806195563165339
User 124135 AUC after training: 0.7804985855728429
User 124135 does not improve AUC. Reverting changes.
Training on augumented user 47245 24/50 current_auc = 0.7806195563165339
User 47245 AUC after training: 0.7802077905158937
User 47245 does not improve AUC. Reverting changes.
Training on augumented user 89152 25/50 current_auc = 0.7806195563165339
User 89152 AUC after training: 0.7800472716444578
User 89152 does not improve AUC. Reverting changes.
Training on augumented user 100708 26/50 current_auc = 0.7806195563165339
User 100708 AUC after training: 0.7804427529219088
User 100708 does not improve AUC. Reverting changes.
Training on augumented user 134640 27/50 current_auc = 0.7806195563165339
User 134640 AUC after training: 0.7802729286086504
User 134640 does not improve AUC. Reverting changes.
Training on augumented user 97582 28/50 current_auc = 0.7806195563165339
User 97582 AUC after training: 0.7805544182237774
User 97582 does not improve AUC. Reverting changes.
Training on augumented user 66571 29/50 current_auc = 0.7806195563165339
User 66571 AUC after training: 0.7800844934117471
User 66571 does not improve AUC. Reverting changes.
Training on augumented user 87723 30/50 current_auc = 0.7806195563165339
User 87723 AUC after training: 0.7801682423881485
User 87723 does not improve AUC. Reverting changes.
Training on augumented user 51682 31/50 current_auc = 0.7806195563165339
User 51682 AUC after training: 0.7802473386436388
User 51682 does not improve AUC. Reverting changes.
Training on augumented user 86322 32/50 current_auc = 0.7806195563165339
User 86322 AUC after training: 0.7801007779349363
User 86322 does not improve AUC. Reverting changes.
Training on augumented user 8298 33/50 current_auc = 0.7806195563165339
User 8298 AUC after training: 0.7801938323531601
User 8298 does not improve AUC. Reverting changes.
Training on augumented user 29813 34/50 current_auc = 0.7806195563165339
User 29813 AUC after training: 0.7803171294573066
User 29813 does not improve AUC. Reverting changes.
Training on augumented user 106533 35/50 current_auc = 0.7806195563165339
User 106533 AUC after training: 0.7804311211196309
User 106533 does not improve AUC. Reverting changes.
Training on augumented user 29064 36/50 current_auc = 0.7806195563165339
User 29064 AUC after training: 0.7802426859227276
User 29064 does not improve AUC. Reverting changes.
Training on augumented user 117606 37/50 current_auc = 0.7806195563165339
User 117606 AUC after training: 0.7799914389935233
User 117606 does not improve AUC. Reverting changes.
Training on augumented user 108088 38/50 current_auc = 0.7806195563165339
User 108088 AUC after training: 0.7804706692473758
User 108088 does not improve AUC. Reverting changes.
Training on augumented user 98942 39/50 current_auc = 0.7806195563165339
User 98942 AUC after training: 0.7773859152832576
User 98942 does not improve AUC. Reverting changes.
Training on augumented user 53632 40/50 current_auc = 0.7806195563165339
User 53632 AUC after training: 0.7804101838755304
User 53632 does not improve AUC. Reverting changes.
Training on augumented user 123102 41/50 current_auc = 0.7806195563165339
User 123102 AUC after training: 0.7798378992034541
User 123102 does not improve AUC. Reverting changes.
Training on augumented user 91275 42/50 current_auc = 0.7806195563165339
User 91275 AUC after training: 0.7803915729918857
User 91275 does not improve AUC. Reverting changes.
Training on augumented user 6574 43/50 current_auc = 0.7806195563165339
User 6574 AUC after training: 0.7800286607608129
User 6574 does not improve AUC. Reverting changes.
Training on augumented user 25555 44/50 current_auc = 0.7806195563165339
User 25555 AUC after training: 0.7803729621082409
User 25555 does not improve AUC. Reverting changes.
Training on augumented user 75642 45/50 current_auc = 0.7806195563165339
User 75642 AUC after training: 0.7791772128340654
User 75642 does not improve AUC. Reverting changes.
Training on augumented user 71511 46/50 current_auc = 0.7806195563165339
User 71511 AUC after training: 0.7803729621082409
User 71511 does not improve AUC. Reverting changes.
Training on augumented user 4034 47/50 current_auc = 0.7806195563165339
User 4034 AUC after training: 0.7803264348991289
User 4034 does not improve AUC. Reverting changes.
Training on augumented user 629 48/50 current_auc = 0.7806195563165339
User 629 AUC after training: 0.7803101503759398
User 629 does not improve AUC. Reverting changes.
Training on augumented user 45334 49/50 current_auc = 0.7806195563165339
User 45334 AUC after training: 0.7798472046452765
User 45334 does not improve AUC. Reverting changes.
[2024-12-02 17:51:50.750652] start test user 70346 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:51.170122] start test user 70346 26/568 recall augumented users by random, augumented_users = [119843, 11721, 19241, 97770, 51145, 55316, 13094, 101406, 57092, 15588, 45063, 50769, 10320, 105515, 89084, 72355, 7396, 41829, 76431, 126990, 99114, 109598, 26641, 108143, 90468, 130388, 75797, 26779, 36217, 129862, 69327, 124369, 45162, 100250, 129927, 3559, 34946, 67047, 22201, 75353, 13299, 34226, 110745, 25060, 73046, 46808, 24759, 110542, 110012, 127661]
[2024-12-02 17:51:51.186013] user = 70346 Cloud 26/568
[2024-12-02 17:51:51.216719] user = 70346 Local 26/568
[2024-12-02 17:51:51.388121] user = 70346 Local+ 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:53.843398] user = 70346 MPDA- 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5763221153846154
Training on augumented user 119843 0/50 current_auc = 0.5763221153846154
User 119843 AUC after training: 0.5758814102564103
User 119843 does not improve AUC. Reverting changes.
Training on augumented user 11721 1/50 current_auc = 0.5763221153846154
User 11721 AUC after training: 0.5768830128205128
User 11721 improves AUC. Keeping the model.
Training on augumented user 19241 2/50 current_auc = 0.5768830128205128
User 19241 AUC after training: 0.5768830128205128
User 19241 does not improve AUC. Reverting changes.
Training on augumented user 97770 3/50 current_auc = 0.5768830128205128
User 97770 AUC after training: 0.5787660256410256
User 97770 improves AUC. Keeping the model.
Training on augumented user 51145 4/50 current_auc = 0.5787660256410256
User 51145 AUC after training: 0.5782051282051283
User 51145 does not improve AUC. Reverting changes.
Training on augumented user 55316 5/50 current_auc = 0.5787660256410256
User 55316 AUC after training: 0.575801282051282
User 55316 does not improve AUC. Reverting changes.
Training on augumented user 13094 6/50 current_auc = 0.5787660256410256
User 13094 AUC after training: 0.5788060897435898
User 13094 improves AUC. Keeping the model.
Training on augumented user 101406 7/50 current_auc = 0.5788060897435898
User 101406 AUC after training: 0.5764823717948718
User 101406 does not improve AUC. Reverting changes.
Training on augumented user 57092 8/50 current_auc = 0.5788060897435898
User 57092 AUC after training: 0.5783653846153847
User 57092 does not improve AUC. Reverting changes.
Training on augumented user 15588 9/50 current_auc = 0.5788060897435898
User 15588 AUC after training: 0.5783253205128205
User 15588 does not improve AUC. Reverting changes.
Training on augumented user 45063 10/50 current_auc = 0.5788060897435898
User 45063 AUC after training: 0.578125
User 45063 does not improve AUC. Reverting changes.
Training on augumented user 50769 11/50 current_auc = 0.5788060897435898
User 50769 AUC after training: 0.5783253205128205
User 50769 does not improve AUC. Reverting changes.
Training on augumented user 10320 12/50 current_auc = 0.5788060897435898
User 10320 AUC after training: 0.5764423076923076
User 10320 does not improve AUC. Reverting changes.
Training on augumented user 105515 13/50 current_auc = 0.5788060897435898
User 105515 AUC after training: 0.5782051282051281
User 105515 does not improve AUC. Reverting changes.
Training on augumented user 89084 14/50 current_auc = 0.5788060897435898
User 89084 AUC after training: 0.5783653846153847
User 89084 does not improve AUC. Reverting changes.
Training on augumented user 72355 15/50 current_auc = 0.5788060897435898
User 72355 AUC after training: 0.577323717948718
User 72355 does not improve AUC. Reverting changes.
Training on augumented user 7396 16/50 current_auc = 0.5788060897435898
User 7396 AUC after training: 0.5781650641025642
User 7396 does not improve AUC. Reverting changes.
Training on augumented user 41829 17/50 current_auc = 0.5788060897435898
User 41829 AUC after training: 0.5791666666666667
User 41829 improves AUC. Keeping the model.
Training on augumented user 76431 18/50 current_auc = 0.5791666666666667
User 76431 AUC after training: 0.578886217948718
User 76431 does not improve AUC. Reverting changes.
Training on augumented user 126990 19/50 current_auc = 0.5791666666666667
User 126990 AUC after training: 0.5797676282051283
User 126990 improves AUC. Keeping the model.
Training on augumented user 99114 20/50 current_auc = 0.5797676282051283
User 99114 AUC after training: 0.5789262820512822
User 99114 does not improve AUC. Reverting changes.
Training on augumented user 109598 21/50 current_auc = 0.5797676282051283
User 109598 AUC after training: 0.5786858974358975
User 109598 does not improve AUC. Reverting changes.
Training on augumented user 26641 22/50 current_auc = 0.5797676282051283
User 26641 AUC after training: 0.5797676282051283
User 26641 does not improve AUC. Reverting changes.
Training on augumented user 108143 23/50 current_auc = 0.5797676282051283
User 108143 AUC after training: 0.5786458333333333
User 108143 does not improve AUC. Reverting changes.
Training on augumented user 90468 24/50 current_auc = 0.5797676282051283
User 90468 AUC after training: 0.5795673076923076
User 90468 does not improve AUC. Reverting changes.
Training on augumented user 130388 25/50 current_auc = 0.5797676282051283
User 130388 AUC after training: 0.5796875
User 130388 does not improve AUC. Reverting changes.
Training on augumented user 75797 26/50 current_auc = 0.5797676282051283
User 75797 AUC after training: 0.5805889423076923
User 75797 improves AUC. Keeping the model.
Training on augumented user 26779 27/50 current_auc = 0.5805889423076923
User 26779 AUC after training: 0.5804286858974359
User 26779 does not improve AUC. Reverting changes.
Training on augumented user 36217 28/50 current_auc = 0.5805889423076923
User 36217 AUC after training: 0.5809294871794872
User 36217 improves AUC. Keeping the model.
Training on augumented user 129862 29/50 current_auc = 0.5809294871794872
User 129862 AUC after training: 0.5800080128205128
User 129862 does not improve AUC. Reverting changes.
Training on augumented user 69327 30/50 current_auc = 0.5809294871794872
User 69327 AUC after training: 0.5789663461538461
User 69327 does not improve AUC. Reverting changes.
Training on augumented user 124369 31/50 current_auc = 0.5809294871794872
User 124369 AUC after training: 0.5802483974358974
User 124369 does not improve AUC. Reverting changes.
Training on augumented user 45162 32/50 current_auc = 0.5809294871794872
User 45162 AUC after training: 0.5795072115384616
User 45162 does not improve AUC. Reverting changes.
Training on augumented user 100250 33/50 current_auc = 0.5809294871794872
User 100250 AUC after training: 0.5809294871794872
User 100250 does not improve AUC. Reverting changes.
Training on augumented user 129927 34/50 current_auc = 0.5809294871794872
User 129927 AUC after training: 0.5796674679487179
User 129927 does not improve AUC. Reverting changes.
Training on augumented user 3559 35/50 current_auc = 0.5809294871794872
User 3559 AUC after training: 0.5811298076923077
User 3559 improves AUC. Keeping the model.
Training on augumented user 34946 36/50 current_auc = 0.5811298076923077
User 34946 AUC after training: 0.5810897435897436
User 34946 does not improve AUC. Reverting changes.
Training on augumented user 67047 37/50 current_auc = 0.5811298076923077
User 67047 AUC after training: 0.5809695512820513
User 67047 does not improve AUC. Reverting changes.
Training on augumented user 22201 38/50 current_auc = 0.5811298076923077
User 22201 AUC after training: 0.5804086538461538
User 22201 does not improve AUC. Reverting changes.
Training on augumented user 75353 39/50 current_auc = 0.5811298076923077
User 75353 AUC after training: 0.5806891025641026
User 75353 does not improve AUC. Reverting changes.
Training on augumented user 13299 40/50 current_auc = 0.5811298076923077
User 13299 AUC after training: 0.5803685897435897
User 13299 does not improve AUC. Reverting changes.
Training on augumented user 34226 41/50 current_auc = 0.5811298076923077
User 34226 AUC after training: 0.5799679487179488
User 34226 does not improve AUC. Reverting changes.
Training on augumented user 110745 42/50 current_auc = 0.5811298076923077
User 110745 AUC after training: 0.5806089743589744
User 110745 does not improve AUC. Reverting changes.
Training on augumented user 25060 43/50 current_auc = 0.5811298076923077
User 25060 AUC after training: 0.5806891025641026
User 25060 does not improve AUC. Reverting changes.
Training on augumented user 73046 44/50 current_auc = 0.5811298076923077
User 73046 AUC after training: 0.580448717948718
User 73046 does not improve AUC. Reverting changes.
Training on augumented user 46808 45/50 current_auc = 0.5811298076923077
User 46808 AUC after training: 0.5804887820512821
User 46808 does not improve AUC. Reverting changes.
Training on augumented user 24759 46/50 current_auc = 0.5811298076923077
User 24759 AUC after training: 0.5810296474358975
User 24759 does not improve AUC. Reverting changes.
Training on augumented user 110542 47/50 current_auc = 0.5811298076923077
User 110542 AUC after training: 0.5817307692307692
User 110542 improves AUC. Keeping the model.
Training on augumented user 110012 48/50 current_auc = 0.5817307692307692
User 110012 AUC after training: 0.5819310897435898
User 110012 improves AUC. Keeping the model.
Training on augumented user 127661 49/50 current_auc = 0.5819310897435898
User 127661 AUC after training: 0.5816907051282051
User 127661 does not improve AUC. Reverting changes.
[2024-12-02 17:52:26.440751] start test user 70386 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:26.855701] start test user 70386 27/568 recall augumented users by random, augumented_users = [78919, 30251, 72760, 104161, 71643, 76428, 102413, 111005, 1132, 83196, 37209, 67128, 120920, 28761, 123401, 77839, 4174, 21750, 43766, 129660, 51464, 78685, 76664, 12958, 73726, 25763, 21417, 123648, 49056, 94132, 52751, 107673, 49978, 18669, 119874, 82484, 91116, 70596, 128258, 118342, 36211, 34439, 94794, 67238, 131806, 54793, 49861, 80668, 133191, 103426]
[2024-12-02 17:52:26.872770] user = 70386 Cloud 27/568
[2024-12-02 17:52:26.900485] user = 70386 Local 27/568
[2024-12-02 17:52:27.071869] user = 70386 Local+ 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:30.399903] user = 70386 MPDA- 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5958417849898581
Training on augumented user 78919 0/50 current_auc = 0.5958417849898581
User 78919 AUC after training: 0.5958417849898581
User 78919 does not improve AUC. Reverting changes.
Training on augumented user 30251 1/50 current_auc = 0.5958417849898581
User 30251 AUC after training: 0.597870182555781
User 30251 improves AUC. Keeping the model.
Training on augumented user 72760 2/50 current_auc = 0.597870182555781
User 72760 AUC after training: 0.5963488843813388
User 72760 does not improve AUC. Reverting changes.
Training on augumented user 104161 3/50 current_auc = 0.597870182555781
User 104161 AUC after training: 0.5988843813387424
User 104161 improves AUC. Keeping the model.
Training on augumented user 71643 4/50 current_auc = 0.5988843813387424
User 71643 AUC after training: 0.5973630831643003
User 71643 does not improve AUC. Reverting changes.
Training on augumented user 76428 5/50 current_auc = 0.5988843813387424
User 76428 AUC after training: 0.597870182555781
User 76428 does not improve AUC. Reverting changes.
Training on augumented user 102413 6/50 current_auc = 0.5988843813387424
User 102413 AUC after training: 0.5988843813387424
User 102413 does not improve AUC. Reverting changes.
Training on augumented user 111005 7/50 current_auc = 0.5988843813387424
User 111005 AUC after training: 0.5993914807302231
User 111005 improves AUC. Keeping the model.
Training on augumented user 1132 8/50 current_auc = 0.5993914807302231
User 1132 AUC after training: 0.5988843813387423
User 1132 does not improve AUC. Reverting changes.
Training on augumented user 83196 9/50 current_auc = 0.5993914807302231
User 83196 AUC after training: 0.5988843813387423
User 83196 does not improve AUC. Reverting changes.
Training on augumented user 37209 10/50 current_auc = 0.5993914807302231
User 37209 AUC after training: 0.5983772819472616
User 37209 does not improve AUC. Reverting changes.
Training on augumented user 67128 11/50 current_auc = 0.5993914807302231
User 67128 AUC after training: 0.5988843813387423
User 67128 does not improve AUC. Reverting changes.
Training on augumented user 120920 12/50 current_auc = 0.5993914807302231
User 120920 AUC after training: 0.597870182555781
User 120920 does not improve AUC. Reverting changes.
Training on augumented user 28761 13/50 current_auc = 0.5993914807302231
User 28761 AUC after training: 0.5988843813387423
User 28761 does not improve AUC. Reverting changes.
Training on augumented user 123401 14/50 current_auc = 0.5993914807302231
User 123401 AUC after training: 0.5983772819472617
User 123401 does not improve AUC. Reverting changes.
Training on augumented user 77839 15/50 current_auc = 0.5993914807302231
User 77839 AUC after training: 0.5988843813387424
User 77839 does not improve AUC. Reverting changes.
Training on augumented user 4174 16/50 current_auc = 0.5993914807302231
User 4174 AUC after training: 0.6004056795131846
User 4174 improves AUC. Keeping the model.
Training on augumented user 21750 17/50 current_auc = 0.6004056795131846
User 21750 AUC after training: 0.5993914807302231
User 21750 does not improve AUC. Reverting changes.
Training on augumented user 43766 18/50 current_auc = 0.6004056795131846
User 43766 AUC after training: 0.5988843813387423
User 43766 does not improve AUC. Reverting changes.
Training on augumented user 129660 19/50 current_auc = 0.6004056795131846
User 129660 AUC after training: 0.6009127789046653
User 129660 improves AUC. Keeping the model.
Training on augumented user 51464 20/50 current_auc = 0.6009127789046653
User 51464 AUC after training: 0.6009127789046653
User 51464 does not improve AUC. Reverting changes.
Training on augumented user 78685 21/50 current_auc = 0.6009127789046653
User 78685 AUC after training: 0.6019269776876267
User 78685 improves AUC. Keeping the model.
Training on augumented user 76664 22/50 current_auc = 0.6019269776876267
User 76664 AUC after training: 0.6004056795131846
User 76664 does not improve AUC. Reverting changes.
Training on augumented user 12958 23/50 current_auc = 0.6019269776876267
User 12958 AUC after training: 0.6014198782961461
User 12958 does not improve AUC. Reverting changes.
Training on augumented user 73726 24/50 current_auc = 0.6019269776876267
User 73726 AUC after training: 0.6019269776876267
User 73726 does not improve AUC. Reverting changes.
Training on augumented user 25763 25/50 current_auc = 0.6019269776876267
User 25763 AUC after training: 0.6004056795131846
User 25763 does not improve AUC. Reverting changes.
Training on augumented user 21417 26/50 current_auc = 0.6019269776876267
User 21417 AUC after training: 0.6009127789046653
User 21417 does not improve AUC. Reverting changes.
Training on augumented user 123648 27/50 current_auc = 0.6019269776876267
User 123648 AUC after training: 0.6009127789046653
User 123648 does not improve AUC. Reverting changes.
Training on augumented user 49056 28/50 current_auc = 0.6019269776876267
User 49056 AUC after training: 0.601419878296146
User 49056 does not improve AUC. Reverting changes.
Training on augumented user 94132 29/50 current_auc = 0.6019269776876267
User 94132 AUC after training: 0.601419878296146
User 94132 does not improve AUC. Reverting changes.
Training on augumented user 52751 30/50 current_auc = 0.6019269776876267
User 52751 AUC after training: 0.6009127789046653
User 52751 does not improve AUC. Reverting changes.
Training on augumented user 107673 31/50 current_auc = 0.6019269776876267
User 107673 AUC after training: 0.6019269776876267
User 107673 does not improve AUC. Reverting changes.
Training on augumented user 49978 32/50 current_auc = 0.6019269776876267
User 49978 AUC after training: 0.5988843813387423
User 49978 does not improve AUC. Reverting changes.
Training on augumented user 18669 33/50 current_auc = 0.6019269776876267
User 18669 AUC after training: 0.6009127789046653
User 18669 does not improve AUC. Reverting changes.
Training on augumented user 119874 34/50 current_auc = 0.6019269776876267
User 119874 AUC after training: 0.6019269776876268
User 119874 improves AUC. Keeping the model.
Training on augumented user 82484 35/50 current_auc = 0.6019269776876268
User 82484 AUC after training: 0.6019269776876268
User 82484 does not improve AUC. Reverting changes.
Training on augumented user 91116 36/50 current_auc = 0.6019269776876268
User 91116 AUC after training: 0.6004056795131846
User 91116 does not improve AUC. Reverting changes.
Training on augumented user 70596 37/50 current_auc = 0.6019269776876268
User 70596 AUC after training: 0.6009127789046653
User 70596 does not improve AUC. Reverting changes.
Training on augumented user 128258 38/50 current_auc = 0.6019269776876268
User 128258 AUC after training: 0.5998985801217038
User 128258 does not improve AUC. Reverting changes.
Training on augumented user 118342 39/50 current_auc = 0.6019269776876268
User 118342 AUC after training: 0.6024340770791075
User 118342 improves AUC. Keeping the model.
Training on augumented user 36211 40/50 current_auc = 0.6024340770791075
User 36211 AUC after training: 0.6019269776876268
User 36211 does not improve AUC. Reverting changes.
Training on augumented user 34439 41/50 current_auc = 0.6024340770791075
User 34439 AUC after training: 0.6014198782961461
User 34439 does not improve AUC. Reverting changes.
Training on augumented user 94794 42/50 current_auc = 0.6024340770791075
User 94794 AUC after training: 0.6009127789046653
User 94794 does not improve AUC. Reverting changes.
Training on augumented user 67238 43/50 current_auc = 0.6024340770791075
User 67238 AUC after training: 0.6019269776876268
User 67238 does not improve AUC. Reverting changes.
Training on augumented user 131806 44/50 current_auc = 0.6024340770791075
User 131806 AUC after training: 0.6004056795131846
User 131806 does not improve AUC. Reverting changes.
Training on augumented user 54793 45/50 current_auc = 0.6024340770791075
User 54793 AUC after training: 0.6029411764705882
User 54793 improves AUC. Keeping the model.
Training on augumented user 49861 46/50 current_auc = 0.6029411764705882
User 49861 AUC after training: 0.6029411764705882
User 49861 does not improve AUC. Reverting changes.
Training on augumented user 80668 47/50 current_auc = 0.6029411764705882
User 80668 AUC after training: 0.6059837728194727
User 80668 improves AUC. Keeping the model.
Training on augumented user 133191 48/50 current_auc = 0.6059837728194727
User 133191 AUC after training: 0.6059837728194727
User 133191 does not improve AUC. Reverting changes.
Training on augumented user 103426 49/50 current_auc = 0.6059837728194727
User 103426 AUC after training: 0.6039553752535497
User 103426 does not improve AUC. Reverting changes.
[2024-12-02 17:52:59.806886] start test user 70396 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:00.664633] start test user 70396 28/568 recall augumented users by random, augumented_users = [6108, 61932, 73936, 65782, 86401, 42893, 132546, 51126, 131062, 38134, 28863, 103621, 88506, 50705, 50021, 95863, 75634, 98968, 94470, 30035, 80310, 42318, 128518, 91684, 136096, 96089, 118792, 123377, 57516, 113735, 21999, 34927, 59401, 125677, 95265, 44899, 42125, 32004, 93331, 114844, 123719, 50598, 52487, 1416, 129325, 25726, 4875, 135142, 22142, 54338]
[2024-12-02 17:53:00.681351] user = 70396 Cloud 28/568
[2024-12-02 17:53:00.697868] user = 70396 Local 28/568
[2024-12-02 17:53:00.752793] user = 70396 Local+ 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:03.518632] user = 70396 MPDA- 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.529585798816568
Training on augumented user 6108 0/50 current_auc = 0.529585798816568
User 6108 AUC after training: 0.5266272189349113
User 6108 does not improve AUC. Reverting changes.
Training on augumented user 61932 1/50 current_auc = 0.529585798816568
User 61932 AUC after training: 0.5285996055226825
User 61932 does not improve AUC. Reverting changes.
Training on augumented user 73936 2/50 current_auc = 0.529585798816568
User 73936 AUC after training: 0.5276134122287968
User 73936 does not improve AUC. Reverting changes.
Training on augumented user 65782 3/50 current_auc = 0.529585798816568
User 65782 AUC after training: 0.5285996055226825
User 65782 does not improve AUC. Reverting changes.
Training on augumented user 86401 4/50 current_auc = 0.529585798816568
User 86401 AUC after training: 0.5285996055226825
User 86401 does not improve AUC. Reverting changes.
Training on augumented user 42893 5/50 current_auc = 0.529585798816568
User 42893 AUC after training: 0.529585798816568
User 42893 does not improve AUC. Reverting changes.
Training on augumented user 132546 6/50 current_auc = 0.529585798816568
User 132546 AUC after training: 0.5305719921104537
User 132546 improves AUC. Keeping the model.
Training on augumented user 51126 7/50 current_auc = 0.5305719921104537
User 51126 AUC after training: 0.5285996055226825
User 51126 does not improve AUC. Reverting changes.
Training on augumented user 131062 8/50 current_auc = 0.5305719921104537
User 131062 AUC after training: 0.5305719921104537
User 131062 does not improve AUC. Reverting changes.
Training on augumented user 38134 9/50 current_auc = 0.5305719921104537
User 38134 AUC after training: 0.5266272189349113
User 38134 does not improve AUC. Reverting changes.
Training on augumented user 28863 10/50 current_auc = 0.5305719921104537
User 28863 AUC after training: 0.5276134122287969
User 28863 does not improve AUC. Reverting changes.
Training on augumented user 103621 11/50 current_auc = 0.5305719921104537
User 103621 AUC after training: 0.529585798816568
User 103621 does not improve AUC. Reverting changes.
Training on augumented user 88506 12/50 current_auc = 0.5305719921104537
User 88506 AUC after training: 0.5305719921104537
User 88506 does not improve AUC. Reverting changes.
Training on augumented user 50705 13/50 current_auc = 0.5305719921104537
User 50705 AUC after training: 0.529585798816568
User 50705 does not improve AUC. Reverting changes.
Training on augumented user 50021 14/50 current_auc = 0.5305719921104537
User 50021 AUC after training: 0.5266272189349113
User 50021 does not improve AUC. Reverting changes.
Training on augumented user 95863 15/50 current_auc = 0.5305719921104537
User 95863 AUC after training: 0.529585798816568
User 95863 does not improve AUC. Reverting changes.
Training on augumented user 75634 16/50 current_auc = 0.5305719921104537
User 75634 AUC after training: 0.5266272189349113
User 75634 does not improve AUC. Reverting changes.
Training on augumented user 98968 17/50 current_auc = 0.5305719921104537
User 98968 AUC after training: 0.529585798816568
User 98968 does not improve AUC. Reverting changes.
Training on augumented user 94470 18/50 current_auc = 0.5305719921104537
User 94470 AUC after training: 0.5266272189349113
User 94470 does not improve AUC. Reverting changes.
Training on augumented user 30035 19/50 current_auc = 0.5305719921104537
User 30035 AUC after training: 0.5256410256410257
User 30035 does not improve AUC. Reverting changes.
Training on augumented user 80310 20/50 current_auc = 0.5305719921104537
User 80310 AUC after training: 0.5276134122287969
User 80310 does not improve AUC. Reverting changes.
Training on augumented user 42318 21/50 current_auc = 0.5305719921104537
User 42318 AUC after training: 0.5285996055226825
User 42318 does not improve AUC. Reverting changes.
Training on augumented user 128518 22/50 current_auc = 0.5305719921104537
User 128518 AUC after training: 0.529585798816568
User 128518 does not improve AUC. Reverting changes.
Training on augumented user 91684 23/50 current_auc = 0.5305719921104537
User 91684 AUC after training: 0.5276134122287968
User 91684 does not improve AUC. Reverting changes.
Training on augumented user 136096 24/50 current_auc = 0.5305719921104537
User 136096 AUC after training: 0.5285996055226825
User 136096 does not improve AUC. Reverting changes.
Training on augumented user 96089 25/50 current_auc = 0.5305719921104537
User 96089 AUC after training: 0.5305719921104537
User 96089 does not improve AUC. Reverting changes.
Training on augumented user 118792 26/50 current_auc = 0.5305719921104537
User 118792 AUC after training: 0.529585798816568
User 118792 does not improve AUC. Reverting changes.
Training on augumented user 123377 27/50 current_auc = 0.5305719921104537
User 123377 AUC after training: 0.5305719921104537
User 123377 does not improve AUC. Reverting changes.
Training on augumented user 57516 28/50 current_auc = 0.5305719921104537
User 57516 AUC after training: 0.5236686390532544
User 57516 does not improve AUC. Reverting changes.
Training on augumented user 113735 29/50 current_auc = 0.5305719921104537
User 113735 AUC after training: 0.529585798816568
User 113735 does not improve AUC. Reverting changes.
Training on augumented user 21999 30/50 current_auc = 0.5305719921104537
User 21999 AUC after training: 0.5276134122287969
User 21999 does not improve AUC. Reverting changes.
Training on augumented user 34927 31/50 current_auc = 0.5305719921104537
User 34927 AUC after training: 0.5285996055226825
User 34927 does not improve AUC. Reverting changes.
Training on augumented user 59401 32/50 current_auc = 0.5305719921104537
User 59401 AUC after training: 0.5285996055226825
User 59401 does not improve AUC. Reverting changes.
Training on augumented user 125677 33/50 current_auc = 0.5305719921104537
User 125677 AUC after training: 0.529585798816568
User 125677 does not improve AUC. Reverting changes.
Training on augumented user 95265 34/50 current_auc = 0.5305719921104537
User 95265 AUC after training: 0.5305719921104537
User 95265 does not improve AUC. Reverting changes.
Training on augumented user 44899 35/50 current_auc = 0.5305719921104537
User 44899 AUC after training: 0.5305719921104537
User 44899 does not improve AUC. Reverting changes.
Training on augumented user 42125 36/50 current_auc = 0.5305719921104537
User 42125 AUC after training: 0.5285996055226825
User 42125 does not improve AUC. Reverting changes.
Training on augumented user 32004 37/50 current_auc = 0.5305719921104537
User 32004 AUC after training: 0.5315581854043392
User 32004 improves AUC. Keeping the model.
Training on augumented user 93331 38/50 current_auc = 0.5315581854043392
User 93331 AUC after training: 0.5315581854043392
User 93331 does not improve AUC. Reverting changes.
Training on augumented user 114844 39/50 current_auc = 0.5315581854043392
User 114844 AUC after training: 0.5305719921104537
User 114844 does not improve AUC. Reverting changes.
Training on augumented user 123719 40/50 current_auc = 0.5315581854043392
User 123719 AUC after training: 0.5379684418145957
User 123719 improves AUC. Keeping the model.
Training on augumented user 50598 41/50 current_auc = 0.5379684418145957
User 50598 AUC after training: 0.5409270216962525
User 50598 improves AUC. Keeping the model.
Training on augumented user 52487 42/50 current_auc = 0.5409270216962525
User 52487 AUC after training: 0.5399408284023668
User 52487 does not improve AUC. Reverting changes.
Training on augumented user 1416 43/50 current_auc = 0.5409270216962525
User 1416 AUC after training: 0.5384615384615385
User 1416 does not improve AUC. Reverting changes.
Training on augumented user 129325 44/50 current_auc = 0.5409270216962525
User 129325 AUC after training: 0.5389546351084813
User 129325 does not improve AUC. Reverting changes.
Training on augumented user 25726 45/50 current_auc = 0.5409270216962525
User 25726 AUC after training: 0.5384615384615385
User 25726 does not improve AUC. Reverting changes.
Training on augumented user 4875 46/50 current_auc = 0.5409270216962525
User 4875 AUC after training: 0.5389546351084813
User 4875 does not improve AUC. Reverting changes.
Training on augumented user 135142 47/50 current_auc = 0.5409270216962525
User 135142 AUC after training: 0.5285996055226824
User 135142 does not improve AUC. Reverting changes.
Training on augumented user 22142 48/50 current_auc = 0.5409270216962525
User 22142 AUC after training: 0.5374753451676528
User 22142 does not improve AUC. Reverting changes.
Training on augumented user 54338 49/50 current_auc = 0.5409270216962525
User 54338 AUC after training: 0.5399408284023668
User 54338 does not improve AUC. Reverting changes.
[2024-12-02 17:53:32.350147] start test user 70408 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:32.874912] start test user 70408 29/568 recall augumented users by random, augumented_users = [101008, 42618, 62167, 24940, 60484, 131883, 136092, 123769, 6241, 133805, 64096, 49512, 112081, 131621, 92888, 131013, 88942, 136894, 121498, 15015, 22215, 96143, 131698, 109948, 104858, 51198, 4138, 56756, 11722, 133578, 128796, 33879, 36290, 56310, 17897, 90174, 56979, 75565, 30916, 107498, 11938, 58613, 122421, 10071, 87810, 4158, 22732, 120434, 18298, 86736]
[2024-12-02 17:53:32.891999] user = 70408 Cloud 29/568
[2024-12-02 17:53:32.907538] user = 70408 Local 29/568
[2024-12-02 17:53:32.963720] user = 70408 Local+ 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:35.963945] user = 70408 MPDA- 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6652777777777777
Training on augumented user 101008 0/50 current_auc = 0.6652777777777777
User 101008 AUC after training: 0.6652777777777779
User 101008 improves AUC. Keeping the model.
Training on augumented user 42618 1/50 current_auc = 0.6652777777777779
User 42618 AUC after training: 0.6666666666666667
User 42618 improves AUC. Keeping the model.
Training on augumented user 62167 2/50 current_auc = 0.6666666666666667
User 62167 AUC after training: 0.6680555555555556
User 62167 improves AUC. Keeping the model.
Training on augumented user 24940 3/50 current_auc = 0.6680555555555556
User 24940 AUC after training: 0.6680555555555556
User 24940 does not improve AUC. Reverting changes.
Training on augumented user 60484 4/50 current_auc = 0.6680555555555556
User 60484 AUC after training: 0.6687500000000001
User 60484 improves AUC. Keeping the model.
Training on augumented user 131883 5/50 current_auc = 0.6687500000000001
User 131883 AUC after training: 0.6673611111111111
User 131883 does not improve AUC. Reverting changes.
Training on augumented user 136092 6/50 current_auc = 0.6687500000000001
User 136092 AUC after training: 0.6673611111111112
User 136092 does not improve AUC. Reverting changes.
Training on augumented user 123769 7/50 current_auc = 0.6687500000000001
User 123769 AUC after training: 0.6680555555555556
User 123769 does not improve AUC. Reverting changes.
Training on augumented user 6241 8/50 current_auc = 0.6687500000000001
User 6241 AUC after training: 0.6694444444444445
User 6241 improves AUC. Keeping the model.
Training on augumented user 133805 9/50 current_auc = 0.6694444444444445
User 133805 AUC after training: 0.66875
User 133805 does not improve AUC. Reverting changes.
Training on augumented user 64096 10/50 current_auc = 0.6694444444444445
User 64096 AUC after training: 0.6638888888888889
User 64096 does not improve AUC. Reverting changes.
Training on augumented user 49512 11/50 current_auc = 0.6694444444444445
User 49512 AUC after training: 0.6708333333333334
User 49512 improves AUC. Keeping the model.
Training on augumented user 112081 12/50 current_auc = 0.6708333333333334
User 112081 AUC after training: 0.6694444444444445
User 112081 does not improve AUC. Reverting changes.
Training on augumented user 131621 13/50 current_auc = 0.6708333333333334
User 131621 AUC after training: 0.670138888888889
User 131621 does not improve AUC. Reverting changes.
Training on augumented user 92888 14/50 current_auc = 0.6708333333333334
User 92888 AUC after training: 0.6708333333333334
User 92888 does not improve AUC. Reverting changes.
Training on augumented user 131013 15/50 current_auc = 0.6708333333333334
User 131013 AUC after training: 0.6701388888888888
User 131013 does not improve AUC. Reverting changes.
Training on augumented user 88942 16/50 current_auc = 0.6708333333333334
User 88942 AUC after training: 0.6708333333333334
User 88942 does not improve AUC. Reverting changes.
Training on augumented user 136894 17/50 current_auc = 0.6708333333333334
User 136894 AUC after training: 0.66875
User 136894 does not improve AUC. Reverting changes.
Training on augumented user 121498 18/50 current_auc = 0.6708333333333334
User 121498 AUC after training: 0.6694444444444445
User 121498 does not improve AUC. Reverting changes.
Training on augumented user 15015 19/50 current_auc = 0.6708333333333334
User 15015 AUC after training: 0.6708333333333334
User 15015 does not improve AUC. Reverting changes.
Training on augumented user 22215 20/50 current_auc = 0.6708333333333334
User 22215 AUC after training: 0.6687500000000001
User 22215 does not improve AUC. Reverting changes.
Training on augumented user 96143 21/50 current_auc = 0.6708333333333334
User 96143 AUC after training: 0.6708333333333334
User 96143 does not improve AUC. Reverting changes.
Training on augumented user 131698 22/50 current_auc = 0.6708333333333334
User 131698 AUC after training: 0.6694444444444444
User 131698 does not improve AUC. Reverting changes.
Training on augumented user 109948 23/50 current_auc = 0.6708333333333334
User 109948 AUC after training: 0.6722222222222223
User 109948 improves AUC. Keeping the model.
Training on augumented user 104858 24/50 current_auc = 0.6722222222222223
User 104858 AUC after training: 0.6680555555555556
User 104858 does not improve AUC. Reverting changes.
Training on augumented user 51198 25/50 current_auc = 0.6722222222222223
User 51198 AUC after training: 0.6694444444444445
User 51198 does not improve AUC. Reverting changes.
Training on augumented user 4138 26/50 current_auc = 0.6722222222222223
User 4138 AUC after training: 0.6694444444444444
User 4138 does not improve AUC. Reverting changes.
Training on augumented user 56756 27/50 current_auc = 0.6722222222222223
User 56756 AUC after training: 0.6715277777777777
User 56756 does not improve AUC. Reverting changes.
Training on augumented user 11722 28/50 current_auc = 0.6722222222222223
User 11722 AUC after training: 0.6694444444444445
User 11722 does not improve AUC. Reverting changes.
Training on augumented user 133578 29/50 current_auc = 0.6722222222222223
User 133578 AUC after training: 0.6708333333333334
User 133578 does not improve AUC. Reverting changes.
Training on augumented user 128796 30/50 current_auc = 0.6722222222222223
User 128796 AUC after training: 0.6708333333333333
User 128796 does not improve AUC. Reverting changes.
Training on augumented user 33879 31/50 current_auc = 0.6722222222222223
User 33879 AUC after training: 0.6687500000000001
User 33879 does not improve AUC. Reverting changes.
Training on augumented user 36290 32/50 current_auc = 0.6722222222222223
User 36290 AUC after training: 0.6687500000000001
User 36290 does not improve AUC. Reverting changes.
Training on augumented user 56310 33/50 current_auc = 0.6722222222222223
User 56310 AUC after training: 0.6708333333333333
User 56310 does not improve AUC. Reverting changes.
Training on augumented user 17897 34/50 current_auc = 0.6722222222222223
User 17897 AUC after training: 0.6680555555555556
User 17897 does not improve AUC. Reverting changes.
Training on augumented user 90174 35/50 current_auc = 0.6722222222222223
User 90174 AUC after training: 0.6680555555555556
User 90174 does not improve AUC. Reverting changes.
Training on augumented user 56979 36/50 current_auc = 0.6722222222222223
User 56979 AUC after training: 0.6666666666666667
User 56979 does not improve AUC. Reverting changes.
Training on augumented user 75565 37/50 current_auc = 0.6722222222222223
User 75565 AUC after training: 0.6680555555555555
User 75565 does not improve AUC. Reverting changes.
Training on augumented user 30916 38/50 current_auc = 0.6722222222222223
User 30916 AUC after training: 0.6694444444444445
User 30916 does not improve AUC. Reverting changes.
Training on augumented user 107498 39/50 current_auc = 0.6722222222222223
User 107498 AUC after training: 0.6694444444444445
User 107498 does not improve AUC. Reverting changes.
Training on augumented user 11938 40/50 current_auc = 0.6722222222222223
User 11938 AUC after training: 0.6694444444444444
User 11938 does not improve AUC. Reverting changes.
Training on augumented user 58613 41/50 current_auc = 0.6722222222222223
User 58613 AUC after training: 0.6715277777777778
User 58613 does not improve AUC. Reverting changes.
Training on augumented user 122421 42/50 current_auc = 0.6722222222222223
User 122421 AUC after training: 0.66875
User 122421 does not improve AUC. Reverting changes.
Training on augumented user 10071 43/50 current_auc = 0.6722222222222223
User 10071 AUC after training: 0.6715277777777778
User 10071 does not improve AUC. Reverting changes.
Training on augumented user 87810 44/50 current_auc = 0.6722222222222223
User 87810 AUC after training: 0.670138888888889
User 87810 does not improve AUC. Reverting changes.
Training on augumented user 4158 45/50 current_auc = 0.6722222222222223
User 4158 AUC after training: 0.6704861111111111
User 4158 does not improve AUC. Reverting changes.
Training on augumented user 22732 46/50 current_auc = 0.6722222222222223
User 22732 AUC after training: 0.670138888888889
User 22732 does not improve AUC. Reverting changes.
Training on augumented user 120434 47/50 current_auc = 0.6722222222222223
User 120434 AUC after training: 0.6694444444444445
User 120434 does not improve AUC. Reverting changes.
Training on augumented user 18298 48/50 current_auc = 0.6722222222222223
User 18298 AUC after training: 0.6687500000000001
User 18298 does not improve AUC. Reverting changes.
Training on augumented user 86736 49/50 current_auc = 0.6722222222222223
User 86736 AUC after training: 0.6611111111111111
User 86736 does not improve AUC. Reverting changes.
[2024-12-02 17:54:09.284312] start test user 70410 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:09.760226] start test user 70410 30/568 recall augumented users by random, augumented_users = [62404, 15875, 52517, 14841, 57765, 51233, 65753, 92254, 121067, 132215, 42951, 59734, 88855, 64740, 137133, 43403, 79810, 67865, 11837, 57496, 105678, 75444, 106099, 17275, 89415, 49443, 40893, 130599, 89900, 14604, 19014, 95773, 27661, 10081, 78563, 123286, 66283, 88107, 131161, 108999, 32328, 86927, 76236, 110201, 66054, 1570, 8195, 4231, 114185, 26599]
[2024-12-02 17:54:09.775927] user = 70410 Cloud 30/568
[2024-12-02 17:54:09.787042] user = 70410 Local 30/568
[2024-12-02 17:54:09.832939] user = 70410 Local+ 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:11.845329] user = 70410 MPDA- 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2777777777777778
Training on augumented user 62404 0/50 current_auc = 0.2777777777777778
User 62404 AUC after training: 0.2777777777777778
User 62404 does not improve AUC. Reverting changes.
Training on augumented user 15875 1/50 current_auc = 0.2777777777777778
User 15875 AUC after training: 0.2777777777777778
User 15875 does not improve AUC. Reverting changes.
Training on augumented user 52517 2/50 current_auc = 0.2777777777777778
User 52517 AUC after training: 0.2777777777777778
User 52517 does not improve AUC. Reverting changes.
Training on augumented user 14841 3/50 current_auc = 0.2777777777777778
User 14841 AUC after training: 0.2777777777777778
User 14841 does not improve AUC. Reverting changes.
Training on augumented user 57765 4/50 current_auc = 0.2777777777777778
User 57765 AUC after training: 0.2777777777777778
User 57765 does not improve AUC. Reverting changes.
Training on augumented user 51233 5/50 current_auc = 0.2777777777777778
User 51233 AUC after training: 0.2777777777777778
User 51233 does not improve AUC. Reverting changes.
Training on augumented user 65753 6/50 current_auc = 0.2777777777777778
User 65753 AUC after training: 0.2777777777777778
User 65753 does not improve AUC. Reverting changes.
Training on augumented user 92254 7/50 current_auc = 0.2777777777777778
User 92254 AUC after training: 0.2777777777777778
User 92254 does not improve AUC. Reverting changes.
Training on augumented user 121067 8/50 current_auc = 0.2777777777777778
User 121067 AUC after training: 0.2777777777777778
User 121067 does not improve AUC. Reverting changes.
Training on augumented user 132215 9/50 current_auc = 0.2777777777777778
User 132215 AUC after training: 0.2777777777777778
User 132215 does not improve AUC. Reverting changes.
Training on augumented user 42951 10/50 current_auc = 0.2777777777777778
User 42951 AUC after training: 0.2777777777777778
User 42951 does not improve AUC. Reverting changes.
Training on augumented user 59734 11/50 current_auc = 0.2777777777777778
User 59734 AUC after training: 0.2777777777777778
User 59734 does not improve AUC. Reverting changes.
Training on augumented user 88855 12/50 current_auc = 0.2777777777777778
User 88855 AUC after training: 0.2777777777777778
User 88855 does not improve AUC. Reverting changes.
Training on augumented user 64740 13/50 current_auc = 0.2777777777777778
User 64740 AUC after training: 0.2777777777777778
User 64740 does not improve AUC. Reverting changes.
Training on augumented user 137133 14/50 current_auc = 0.2777777777777778
User 137133 AUC after training: 0.2777777777777778
User 137133 does not improve AUC. Reverting changes.
Training on augumented user 43403 15/50 current_auc = 0.2777777777777778
User 43403 AUC after training: 0.2777777777777778
User 43403 does not improve AUC. Reverting changes.
Training on augumented user 79810 16/50 current_auc = 0.2777777777777778
User 79810 AUC after training: 0.2777777777777778
User 79810 does not improve AUC. Reverting changes.
Training on augumented user 67865 17/50 current_auc = 0.2777777777777778
User 67865 AUC after training: 0.2777777777777778
User 67865 does not improve AUC. Reverting changes.
Training on augumented user 11837 18/50 current_auc = 0.2777777777777778
User 11837 AUC after training: 0.2777777777777778
User 11837 does not improve AUC. Reverting changes.
Training on augumented user 57496 19/50 current_auc = 0.2777777777777778
User 57496 AUC after training: 0.2777777777777778
User 57496 does not improve AUC. Reverting changes.
Training on augumented user 105678 20/50 current_auc = 0.2777777777777778
User 105678 AUC after training: 0.2777777777777778
User 105678 does not improve AUC. Reverting changes.
Training on augumented user 75444 21/50 current_auc = 0.2777777777777778
User 75444 AUC after training: 0.2777777777777778
User 75444 does not improve AUC. Reverting changes.
Training on augumented user 106099 22/50 current_auc = 0.2777777777777778
User 106099 AUC after training: 0.2777777777777778
User 106099 does not improve AUC. Reverting changes.
Training on augumented user 17275 23/50 current_auc = 0.2777777777777778
User 17275 AUC after training: 0.2777777777777778
User 17275 does not improve AUC. Reverting changes.
Training on augumented user 89415 24/50 current_auc = 0.2777777777777778
User 89415 AUC after training: 0.2777777777777778
User 89415 does not improve AUC. Reverting changes.
Training on augumented user 49443 25/50 current_auc = 0.2777777777777778
User 49443 AUC after training: 0.2777777777777778
User 49443 does not improve AUC. Reverting changes.
Training on augumented user 40893 26/50 current_auc = 0.2777777777777778
User 40893 AUC after training: 0.2777777777777778
User 40893 does not improve AUC. Reverting changes.
Training on augumented user 130599 27/50 current_auc = 0.2777777777777778
User 130599 AUC after training: 0.2777777777777778
User 130599 does not improve AUC. Reverting changes.
Training on augumented user 89900 28/50 current_auc = 0.2777777777777778
User 89900 AUC after training: 0.2777777777777778
User 89900 does not improve AUC. Reverting changes.
Training on augumented user 14604 29/50 current_auc = 0.2777777777777778
User 14604 AUC after training: 0.2777777777777778
User 14604 does not improve AUC. Reverting changes.
Training on augumented user 19014 30/50 current_auc = 0.2777777777777778
User 19014 AUC after training: 0.2777777777777778
User 19014 does not improve AUC. Reverting changes.
Training on augumented user 95773 31/50 current_auc = 0.2777777777777778
User 95773 AUC after training: 0.2777777777777778
User 95773 does not improve AUC. Reverting changes.
Training on augumented user 27661 32/50 current_auc = 0.2777777777777778
User 27661 AUC after training: 0.2777777777777778
User 27661 does not improve AUC. Reverting changes.
Training on augumented user 10081 33/50 current_auc = 0.2777777777777778
User 10081 AUC after training: 0.2777777777777778
User 10081 does not improve AUC. Reverting changes.
Training on augumented user 78563 34/50 current_auc = 0.2777777777777778
User 78563 AUC after training: 0.2777777777777778
User 78563 does not improve AUC. Reverting changes.
Training on augumented user 123286 35/50 current_auc = 0.2777777777777778
User 123286 AUC after training: 0.2777777777777778
User 123286 does not improve AUC. Reverting changes.
Training on augumented user 66283 36/50 current_auc = 0.2777777777777778
User 66283 AUC after training: 0.2777777777777778
User 66283 does not improve AUC. Reverting changes.
Training on augumented user 88107 37/50 current_auc = 0.2777777777777778
User 88107 AUC after training: 0.2777777777777778
User 88107 does not improve AUC. Reverting changes.
Training on augumented user 131161 38/50 current_auc = 0.2777777777777778
User 131161 AUC after training: 0.2777777777777778
User 131161 does not improve AUC. Reverting changes.
Training on augumented user 108999 39/50 current_auc = 0.2777777777777778
User 108999 AUC after training: 0.2777777777777778
User 108999 does not improve AUC. Reverting changes.
Training on augumented user 32328 40/50 current_auc = 0.2777777777777778
User 32328 AUC after training: 0.2777777777777778
User 32328 does not improve AUC. Reverting changes.
Training on augumented user 86927 41/50 current_auc = 0.2777777777777778
User 86927 AUC after training: 0.2777777777777778
User 86927 does not improve AUC. Reverting changes.
Training on augumented user 76236 42/50 current_auc = 0.2777777777777778
User 76236 AUC after training: 0.2777777777777778
User 76236 does not improve AUC. Reverting changes.
Training on augumented user 110201 43/50 current_auc = 0.2777777777777778
User 110201 AUC after training: 0.2777777777777778
User 110201 does not improve AUC. Reverting changes.
Training on augumented user 66054 44/50 current_auc = 0.2777777777777778
User 66054 AUC after training: 0.2777777777777778
User 66054 does not improve AUC. Reverting changes.
Training on augumented user 1570 45/50 current_auc = 0.2777777777777778
User 1570 AUC after training: 0.2777777777777778
User 1570 does not improve AUC. Reverting changes.
Training on augumented user 8195 46/50 current_auc = 0.2777777777777778
User 8195 AUC after training: 0.2777777777777778
User 8195 does not improve AUC. Reverting changes.
Training on augumented user 4231 47/50 current_auc = 0.2777777777777778
User 4231 AUC after training: 0.2777777777777778
User 4231 does not improve AUC. Reverting changes.
Training on augumented user 114185 48/50 current_auc = 0.2777777777777778
User 114185 AUC after training: 0.2777777777777778
User 114185 does not improve AUC. Reverting changes.
Training on augumented user 26599 49/50 current_auc = 0.2777777777777778
User 26599 AUC after training: 0.2777777777777778
User 26599 does not improve AUC. Reverting changes.
[2024-12-02 17:54:38.904768] start test user 70412 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:39.334515] start test user 70412 31/568 recall augumented users by random, augumented_users = [69489, 105550, 113227, 88169, 76905, 39760, 57346, 123894, 136304, 21240, 37237, 35414, 128453, 128862, 41217, 47219, 33885, 110786, 123588, 26774, 106362, 114793, 31139, 91920, 46445, 107297, 12679, 79382, 5809, 28248, 80770, 98069, 105954, 60658, 33643, 55420, 70254, 81323, 31736, 129426, 61225, 83483, 100022, 36196, 6538, 94672, 110854, 79919, 39233, 20158]
[2024-12-02 17:54:39.349452] user = 70412 Cloud 31/568
[2024-12-02 17:54:39.380672] user = 70412 Local 31/568
[2024-12-02 17:54:39.533683] user = 70412 Local+ 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:41.954134] user = 70412 MPDA- 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7261543868898555
Training on augumented user 69489 0/50 current_auc = 0.7261543868898555
User 69489 AUC after training: 0.7265498000966566
User 69489 improves AUC. Keeping the model.
Training on augumented user 105550 1/50 current_auc = 0.7265498000966566
User 105550 AUC after training: 0.7261104520890999
User 105550 does not improve AUC. Reverting changes.
Training on augumented user 113227 2/50 current_auc = 0.7265498000966566
User 113227 AUC after training: 0.726637669698168
User 113227 improves AUC. Keeping the model.
Training on augumented user 88169 3/50 current_auc = 0.726637669698168
User 88169 AUC after training: 0.7271209525064805
User 88169 improves AUC. Keeping the model.
Training on augumented user 76905 4/50 current_auc = 0.7271209525064805
User 76905 AUC after training: 0.727340626510259
User 76905 improves AUC. Keeping the model.
Training on augumented user 39760 5/50 current_auc = 0.727340626510259
User 39760 AUC after training: 0.7272088221079918
User 39760 does not improve AUC. Reverting changes.
Training on augumented user 57346 6/50 current_auc = 0.727340626510259
User 57346 AUC after training: 0.7277799745178156
User 57346 improves AUC. Keeping the model.
Training on augumented user 123894 7/50 current_auc = 0.7277799745178156
User 123894 AUC after training: 0.7276481701155485
User 123894 does not improve AUC. Reverting changes.
Training on augumented user 136304 8/50 current_auc = 0.7277799745178156
User 136304 AUC after training: 0.7283950617283951
User 136304 improves AUC. Keeping the model.
Training on augumented user 21240 9/50 current_auc = 0.7283950617283951
User 21240 AUC after training: 0.7282632573261281
User 21240 does not improve AUC. Reverting changes.
Training on augumented user 37237 10/50 current_auc = 0.7283950617283951
User 37237 AUC after training: 0.7287465401344405
User 37237 improves AUC. Keeping the model.
Training on augumented user 35414 11/50 current_auc = 0.7287465401344405
User 35414 AUC after training: 0.7283511269276394
User 35414 does not improve AUC. Reverting changes.
Training on augumented user 128453 12/50 current_auc = 0.7287465401344405
User 128453 AUC after training: 0.7287026053336848
User 128453 does not improve AUC. Reverting changes.
Training on augumented user 128862 13/50 current_auc = 0.7287465401344405
User 128862 AUC after training: 0.729229822942753
User 128862 improves AUC. Keeping the model.
Training on augumented user 41217 14/50 current_auc = 0.729229822942753
User 41217 AUC after training: 0.7290101489389748
User 41217 does not improve AUC. Reverting changes.
Training on augumented user 47219 15/50 current_auc = 0.729229822942753
User 47219 AUC after training: 0.7298888449540881
User 47219 improves AUC. Keeping the model.
Training on augumented user 33885 16/50 current_auc = 0.7298888449540881
User 33885 AUC after training: 0.730328192961645
User 33885 improves AUC. Keeping the model.
Training on augumented user 110786 17/50 current_auc = 0.730328192961645
User 110786 AUC after training: 0.7299327797548438
User 110786 does not improve AUC. Reverting changes.
Training on augumented user 123588 18/50 current_auc = 0.730328192961645
User 123588 AUC after training: 0.7298449101533324
User 123588 does not improve AUC. Reverting changes.
Training on augumented user 26774 19/50 current_auc = 0.730328192961645
User 26774 AUC after training: 0.7306357365669347
User 26774 improves AUC. Keeping the model.
Training on augumented user 106362 20/50 current_auc = 0.7306357365669347
User 106362 AUC after training: 0.7307675409692017
User 106362 improves AUC. Keeping the model.
Training on augumented user 114793 21/50 current_auc = 0.7307675409692017
User 114793 AUC after training: 0.7307675409692017
User 114793 does not improve AUC. Reverting changes.
Training on augumented user 31139 22/50 current_auc = 0.7307675409692017
User 31139 AUC after training: 0.7308554105707131
User 31139 improves AUC. Keeping the model.
Training on augumented user 91920 23/50 current_auc = 0.7308554105707131
User 91920 AUC after training: 0.7308554105707131
User 91920 does not improve AUC. Reverting changes.
Training on augumented user 46445 24/50 current_auc = 0.7308554105707131
User 46445 AUC after training: 0.7310311497737358
User 46445 improves AUC. Keeping the model.
Training on augumented user 107297 25/50 current_auc = 0.7310311497737358
User 107297 AUC after training: 0.7313826281797813
User 107297 improves AUC. Keeping the model.
Training on augumented user 12679 26/50 current_auc = 0.7313826281797813
User 12679 AUC after training: 0.7310750845744914
User 12679 does not improve AUC. Reverting changes.
Training on augumented user 79382 27/50 current_auc = 0.7313826281797813
User 79382 AUC after training: 0.7308993453714688
User 79382 does not improve AUC. Reverting changes.
Training on augumented user 5809 28/50 current_auc = 0.7313826281797813
User 5809 AUC after training: 0.7313826281797813
User 5809 does not improve AUC. Reverting changes.
Training on augumented user 28248 29/50 current_auc = 0.7313826281797813
User 28248 AUC after training: 0.7316023021835597
User 28248 improves AUC. Keeping the model.
Training on augumented user 80770 30/50 current_auc = 0.7316023021835597
User 80770 AUC after training: 0.7316023021835597
User 80770 does not improve AUC. Reverting changes.
Training on augumented user 98069 31/50 current_auc = 0.7316023021835597
User 98069 AUC after training: 0.7317341065858267
User 98069 improves AUC. Keeping the model.
Training on augumented user 105954 32/50 current_auc = 0.7317341065858267
User 105954 AUC after training: 0.7313826281797814
User 105954 does not improve AUC. Reverting changes.
Training on augumented user 60658 33/50 current_auc = 0.7317341065858267
User 60658 AUC after training: 0.7316462369843154
User 60658 does not improve AUC. Reverting changes.
Training on augumented user 33643 34/50 current_auc = 0.7317341065858267
User 33643 AUC after training: 0.731558367382804
User 33643 does not improve AUC. Reverting changes.
Training on augumented user 55420 35/50 current_auc = 0.7317341065858267
User 55420 AUC after training: 0.7316462369843154
User 55420 does not improve AUC. Reverting changes.
Training on augumented user 70254 36/50 current_auc = 0.7317341065858267
User 70254 AUC after training: 0.7310311497737358
User 70254 does not improve AUC. Reverting changes.
Training on augumented user 81323 37/50 current_auc = 0.7317341065858267
User 81323 AUC after training: 0.7316462369843153
User 81323 does not improve AUC. Reverting changes.
Training on augumented user 31736 38/50 current_auc = 0.7317341065858267
User 31736 AUC after training: 0.7318659109880937
User 31736 improves AUC. Keeping the model.
Training on augumented user 129426 39/50 current_auc = 0.7318659109880937
User 129426 AUC after training: 0.7315583673828041
User 129426 does not improve AUC. Reverting changes.
Training on augumented user 61225 40/50 current_auc = 0.7318659109880937
User 61225 AUC after training: 0.7317341065858267
User 61225 does not improve AUC. Reverting changes.
Training on augumented user 83483 41/50 current_auc = 0.7318659109880937
User 83483 AUC after training: 0.7315583673828041
User 83483 does not improve AUC. Reverting changes.
Training on augumented user 100022 42/50 current_auc = 0.7318659109880937
User 100022 AUC after training: 0.7318659109880937
User 100022 does not improve AUC. Reverting changes.
Training on augumented user 36196 43/50 current_auc = 0.7318659109880937
User 36196 AUC after training: 0.7318659109880937
User 36196 does not improve AUC. Reverting changes.
Training on augumented user 6538 44/50 current_auc = 0.7318659109880937
User 6538 AUC after training: 0.7319098457888493
User 6538 improves AUC. Keeping the model.
Training on augumented user 94672 45/50 current_auc = 0.7319098457888493
User 94672 AUC after training: 0.7317780413865824
User 94672 does not improve AUC. Reverting changes.
Training on augumented user 110854 46/50 current_auc = 0.7319098457888493
User 110854 AUC after training: 0.7320416501911163
User 110854 improves AUC. Keeping the model.
Training on augumented user 79919 47/50 current_auc = 0.7320416501911163
User 79919 AUC after training: 0.7323491937964062
User 79919 improves AUC. Keeping the model.
Training on augumented user 39233 48/50 current_auc = 0.7323491937964062
User 39233 AUC after training: 0.7319098457888493
User 39233 does not improve AUC. Reverting changes.
Training on augumented user 20158 49/50 current_auc = 0.7323491937964062
User 20158 AUC after training: 0.7320416501911164
User 20158 does not improve AUC. Reverting changes.
[2024-12-02 17:55:13.368125] start test user 70453 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:14.011545] start test user 70453 32/568 recall augumented users by random, augumented_users = [115063, 61474, 57228, 16170, 49845, 12466, 97815, 3977, 130635, 39850, 4803, 110909, 3445, 123499, 43749, 110759, 23889, 73514, 94669, 83835, 6824, 127472, 47655, 14713, 46714, 22520, 44791, 85384, 129934, 92355, 108606, 16388, 23922, 77456, 55444, 36227, 52299, 52508, 4258, 14413, 33174, 56640, 131143, 40589, 23004, 72854, 94446, 119689, 84390, 15823]
[2024-12-02 17:55:14.035297] user = 70453 Cloud 32/568
[2024-12-02 17:55:14.046458] user = 70453 Local 32/568
[2024-12-02 17:55:14.261771] user = 70453 Local+ 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:17.266169] user = 70453 MPDA- 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5452488687782805
Training on augumented user 115063 0/50 current_auc = 0.5452488687782805
User 115063 AUC after training: 0.5497737556561085
User 115063 improves AUC. Keeping the model.
Training on augumented user 61474 1/50 current_auc = 0.5497737556561085
User 61474 AUC after training: 0.5452488687782805
User 61474 does not improve AUC. Reverting changes.
Training on augumented user 57228 2/50 current_auc = 0.5497737556561085
User 57228 AUC after training: 0.5452488687782805
User 57228 does not improve AUC. Reverting changes.
Training on augumented user 16170 3/50 current_auc = 0.5497737556561085
User 16170 AUC after training: 0.5497737556561085
User 16170 does not improve AUC. Reverting changes.
Training on augumented user 49845 4/50 current_auc = 0.5497737556561085
User 49845 AUC after training: 0.5497737556561085
User 49845 does not improve AUC. Reverting changes.
Training on augumented user 12466 5/50 current_auc = 0.5497737556561085
User 12466 AUC after training: 0.5429864253393665
User 12466 does not improve AUC. Reverting changes.
Training on augumented user 97815 6/50 current_auc = 0.5497737556561085
User 97815 AUC after training: 0.5452488687782805
User 97815 does not improve AUC. Reverting changes.
Training on augumented user 3977 7/50 current_auc = 0.5497737556561085
User 3977 AUC after training: 0.5452488687782805
User 3977 does not improve AUC. Reverting changes.
Training on augumented user 130635 8/50 current_auc = 0.5497737556561085
User 130635 AUC after training: 0.5475113122171945
User 130635 does not improve AUC. Reverting changes.
Training on augumented user 39850 9/50 current_auc = 0.5497737556561085
User 39850 AUC after training: 0.5497737556561085
User 39850 does not improve AUC. Reverting changes.
Training on augumented user 4803 10/50 current_auc = 0.5497737556561085
User 4803 AUC after training: 0.5497737556561085
User 4803 does not improve AUC. Reverting changes.
Training on augumented user 110909 11/50 current_auc = 0.5497737556561085
User 110909 AUC after training: 0.5452488687782805
User 110909 does not improve AUC. Reverting changes.
Training on augumented user 3445 12/50 current_auc = 0.5497737556561085
User 3445 AUC after training: 0.5497737556561085
User 3445 does not improve AUC. Reverting changes.
Training on augumented user 123499 13/50 current_auc = 0.5497737556561085
User 123499 AUC after training: 0.5497737556561085
User 123499 does not improve AUC. Reverting changes.
Training on augumented user 43749 14/50 current_auc = 0.5497737556561085
User 43749 AUC after training: 0.5497737556561085
User 43749 does not improve AUC. Reverting changes.
Training on augumented user 110759 15/50 current_auc = 0.5497737556561085
User 110759 AUC after training: 0.5452488687782805
User 110759 does not improve AUC. Reverting changes.
Training on augumented user 23889 16/50 current_auc = 0.5497737556561085
User 23889 AUC after training: 0.5497737556561085
User 23889 does not improve AUC. Reverting changes.
Training on augumented user 73514 17/50 current_auc = 0.5497737556561085
User 73514 AUC after training: 0.5452488687782805
User 73514 does not improve AUC. Reverting changes.
Training on augumented user 94669 18/50 current_auc = 0.5497737556561085
User 94669 AUC after training: 0.5452488687782805
User 94669 does not improve AUC. Reverting changes.
Training on augumented user 83835 19/50 current_auc = 0.5497737556561085
User 83835 AUC after training: 0.5452488687782805
User 83835 does not improve AUC. Reverting changes.
Training on augumented user 6824 20/50 current_auc = 0.5497737556561085
User 6824 AUC after training: 0.5429864253393665
User 6824 does not improve AUC. Reverting changes.
Training on augumented user 127472 21/50 current_auc = 0.5497737556561085
User 127472 AUC after training: 0.5452488687782805
User 127472 does not improve AUC. Reverting changes.
Training on augumented user 47655 22/50 current_auc = 0.5497737556561085
User 47655 AUC after training: 0.5452488687782805
User 47655 does not improve AUC. Reverting changes.
Training on augumented user 14713 23/50 current_auc = 0.5497737556561085
User 14713 AUC after training: 0.5452488687782805
User 14713 does not improve AUC. Reverting changes.
Training on augumented user 46714 24/50 current_auc = 0.5497737556561085
User 46714 AUC after training: 0.5452488687782805
User 46714 does not improve AUC. Reverting changes.
Training on augumented user 22520 25/50 current_auc = 0.5497737556561085
User 22520 AUC after training: 0.5452488687782805
User 22520 does not improve AUC. Reverting changes.
Training on augumented user 44791 26/50 current_auc = 0.5497737556561085
User 44791 AUC after training: 0.5452488687782805
User 44791 does not improve AUC. Reverting changes.
Training on augumented user 85384 27/50 current_auc = 0.5497737556561085
User 85384 AUC after training: 0.5497737556561085
User 85384 does not improve AUC. Reverting changes.
Training on augumented user 129934 28/50 current_auc = 0.5497737556561085
User 129934 AUC after training: 0.5452488687782805
User 129934 does not improve AUC. Reverting changes.
Training on augumented user 92355 29/50 current_auc = 0.5497737556561085
User 92355 AUC after training: 0.5497737556561085
User 92355 does not improve AUC. Reverting changes.
Training on augumented user 108606 30/50 current_auc = 0.5497737556561085
User 108606 AUC after training: 0.5497737556561085
User 108606 does not improve AUC. Reverting changes.
Training on augumented user 16388 31/50 current_auc = 0.5497737556561085
User 16388 AUC after training: 0.5429864253393665
User 16388 does not improve AUC. Reverting changes.
Training on augumented user 23922 32/50 current_auc = 0.5497737556561085
User 23922 AUC after training: 0.5429864253393665
User 23922 does not improve AUC. Reverting changes.
Training on augumented user 77456 33/50 current_auc = 0.5497737556561085
User 77456 AUC after training: 0.5452488687782805
User 77456 does not improve AUC. Reverting changes.
Training on augumented user 55444 34/50 current_auc = 0.5497737556561085
User 55444 AUC after training: 0.5452488687782805
User 55444 does not improve AUC. Reverting changes.
Training on augumented user 36227 35/50 current_auc = 0.5497737556561085
User 36227 AUC after training: 0.5452488687782805
User 36227 does not improve AUC. Reverting changes.
Training on augumented user 52299 36/50 current_auc = 0.5497737556561085
User 52299 AUC after training: 0.5452488687782805
User 52299 does not improve AUC. Reverting changes.
Training on augumented user 52508 37/50 current_auc = 0.5497737556561085
User 52508 AUC after training: 0.5429864253393665
User 52508 does not improve AUC. Reverting changes.
Training on augumented user 4258 38/50 current_auc = 0.5497737556561085
User 4258 AUC after training: 0.5452488687782805
User 4258 does not improve AUC. Reverting changes.
Training on augumented user 14413 39/50 current_auc = 0.5497737556561085
User 14413 AUC after training: 0.5497737556561085
User 14413 does not improve AUC. Reverting changes.
Training on augumented user 33174 40/50 current_auc = 0.5497737556561085
User 33174 AUC after training: 0.5452488687782805
User 33174 does not improve AUC. Reverting changes.
Training on augumented user 56640 41/50 current_auc = 0.5497737556561085
User 56640 AUC after training: 0.5452488687782805
User 56640 does not improve AUC. Reverting changes.
Training on augumented user 131143 42/50 current_auc = 0.5497737556561085
User 131143 AUC after training: 0.5497737556561085
User 131143 does not improve AUC. Reverting changes.
Training on augumented user 40589 43/50 current_auc = 0.5497737556561085
User 40589 AUC after training: 0.5452488687782805
User 40589 does not improve AUC. Reverting changes.
Training on augumented user 23004 44/50 current_auc = 0.5497737556561085
User 23004 AUC after training: 0.5452488687782805
User 23004 does not improve AUC. Reverting changes.
Training on augumented user 72854 45/50 current_auc = 0.5497737556561085
User 72854 AUC after training: 0.5452488687782805
User 72854 does not improve AUC. Reverting changes.
Training on augumented user 94446 46/50 current_auc = 0.5497737556561085
User 94446 AUC after training: 0.5452488687782805
User 94446 does not improve AUC. Reverting changes.
Training on augumented user 119689 47/50 current_auc = 0.5497737556561085
User 119689 AUC after training: 0.5497737556561085
User 119689 does not improve AUC. Reverting changes.
Training on augumented user 84390 48/50 current_auc = 0.5497737556561085
User 84390 AUC after training: 0.5441176470588235
User 84390 does not improve AUC. Reverting changes.
Training on augumented user 15823 49/50 current_auc = 0.5497737556561085
User 15823 AUC after training: 0.5452488687782805
User 15823 does not improve AUC. Reverting changes.
[2024-12-02 17:55:50.118822] start test user 70543 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:50.618914] start test user 70543 33/568 recall augumented users by random, augumented_users = [34575, 101543, 18418, 12650, 7197, 37168, 118790, 32421, 77159, 96752, 127100, 63377, 92318, 7644, 121013, 116513, 47372, 41619, 96906, 123137, 33899, 123142, 95002, 105369, 137263, 137701, 84589, 102996, 73350, 73391, 52612, 73010, 44134, 47064, 13261, 129272, 38766, 57085, 86127, 21339, 36562, 130711, 51388, 100707, 57070, 88225, 123543, 64902, 8202, 39494]
[2024-12-02 17:55:50.633974] user = 70543 Cloud 33/568
[2024-12-02 17:55:50.647643] user = 70543 Local 33/568
[2024-12-02 17:55:50.728008] user = 70543 Local+ 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:52.698525] user = 70543 MPDA- 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.53125
Training on augumented user 34575 0/50 current_auc = 0.53125
User 34575 AUC after training: 0.53125
User 34575 does not improve AUC. Reverting changes.
Training on augumented user 101543 1/50 current_auc = 0.53125
User 101543 AUC after training: 0.53125
User 101543 does not improve AUC. Reverting changes.
Training on augumented user 18418 2/50 current_auc = 0.53125
User 18418 AUC after training: 0.53125
User 18418 does not improve AUC. Reverting changes.
Training on augumented user 12650 3/50 current_auc = 0.53125
User 12650 AUC after training: 0.53125
User 12650 does not improve AUC. Reverting changes.
Training on augumented user 7197 4/50 current_auc = 0.53125
User 7197 AUC after training: 0.53125
User 7197 does not improve AUC. Reverting changes.
Training on augumented user 37168 5/50 current_auc = 0.53125
User 37168 AUC after training: 0.53125
User 37168 does not improve AUC. Reverting changes.
Training on augumented user 118790 6/50 current_auc = 0.53125
User 118790 AUC after training: 0.53125
User 118790 does not improve AUC. Reverting changes.
Training on augumented user 32421 7/50 current_auc = 0.53125
User 32421 AUC after training: 0.53125
User 32421 does not improve AUC. Reverting changes.
Training on augumented user 77159 8/50 current_auc = 0.53125
User 77159 AUC after training: 0.53125
User 77159 does not improve AUC. Reverting changes.
Training on augumented user 96752 9/50 current_auc = 0.53125
User 96752 AUC after training: 0.53125
User 96752 does not improve AUC. Reverting changes.
Training on augumented user 127100 10/50 current_auc = 0.53125
User 127100 AUC after training: 0.53125
User 127100 does not improve AUC. Reverting changes.
Training on augumented user 63377 11/50 current_auc = 0.53125
User 63377 AUC after training: 0.53125
User 63377 does not improve AUC. Reverting changes.
Training on augumented user 92318 12/50 current_auc = 0.53125
User 92318 AUC after training: 0.53125
User 92318 does not improve AUC. Reverting changes.
Training on augumented user 7644 13/50 current_auc = 0.53125
User 7644 AUC after training: 0.53125
User 7644 does not improve AUC. Reverting changes.
Training on augumented user 121013 14/50 current_auc = 0.53125
User 121013 AUC after training: 0.53125
User 121013 does not improve AUC. Reverting changes.
Training on augumented user 116513 15/50 current_auc = 0.53125
User 116513 AUC after training: 0.53125
User 116513 does not improve AUC. Reverting changes.
Training on augumented user 47372 16/50 current_auc = 0.53125
User 47372 AUC after training: 0.53125
User 47372 does not improve AUC. Reverting changes.
Training on augumented user 41619 17/50 current_auc = 0.53125
User 41619 AUC after training: 0.53125
User 41619 does not improve AUC. Reverting changes.
Training on augumented user 96906 18/50 current_auc = 0.53125
User 96906 AUC after training: 0.53125
User 96906 does not improve AUC. Reverting changes.
Training on augumented user 123137 19/50 current_auc = 0.53125
User 123137 AUC after training: 0.53125
User 123137 does not improve AUC. Reverting changes.
Training on augumented user 33899 20/50 current_auc = 0.53125
User 33899 AUC after training: 0.53125
User 33899 does not improve AUC. Reverting changes.
Training on augumented user 123142 21/50 current_auc = 0.53125
User 123142 AUC after training: 0.53125
User 123142 does not improve AUC. Reverting changes.
Training on augumented user 95002 22/50 current_auc = 0.53125
User 95002 AUC after training: 0.53125
User 95002 does not improve AUC. Reverting changes.
Training on augumented user 105369 23/50 current_auc = 0.53125
User 105369 AUC after training: 0.53125
User 105369 does not improve AUC. Reverting changes.
Training on augumented user 137263 24/50 current_auc = 0.53125
User 137263 AUC after training: 0.53125
User 137263 does not improve AUC. Reverting changes.
Training on augumented user 137701 25/50 current_auc = 0.53125
User 137701 AUC after training: 0.53125
User 137701 does not improve AUC. Reverting changes.
Training on augumented user 84589 26/50 current_auc = 0.53125
User 84589 AUC after training: 0.53125
User 84589 does not improve AUC. Reverting changes.
Training on augumented user 102996 27/50 current_auc = 0.53125
User 102996 AUC after training: 0.53125
User 102996 does not improve AUC. Reverting changes.
Training on augumented user 73350 28/50 current_auc = 0.53125
User 73350 AUC after training: 0.53125
User 73350 does not improve AUC. Reverting changes.
Training on augumented user 73391 29/50 current_auc = 0.53125
User 73391 AUC after training: 0.53125
User 73391 does not improve AUC. Reverting changes.
Training on augumented user 52612 30/50 current_auc = 0.53125
User 52612 AUC after training: 0.53125
User 52612 does not improve AUC. Reverting changes.
Training on augumented user 73010 31/50 current_auc = 0.53125
User 73010 AUC after training: 0.53125
User 73010 does not improve AUC. Reverting changes.
Training on augumented user 44134 32/50 current_auc = 0.53125
User 44134 AUC after training: 0.53125
User 44134 does not improve AUC. Reverting changes.
Training on augumented user 47064 33/50 current_auc = 0.53125
User 47064 AUC after training: 0.53125
User 47064 does not improve AUC. Reverting changes.
Training on augumented user 13261 34/50 current_auc = 0.53125
User 13261 AUC after training: 0.53125
User 13261 does not improve AUC. Reverting changes.
Training on augumented user 129272 35/50 current_auc = 0.53125
User 129272 AUC after training: 0.53125
User 129272 does not improve AUC. Reverting changes.
Training on augumented user 38766 36/50 current_auc = 0.53125
User 38766 AUC after training: 0.53125
User 38766 does not improve AUC. Reverting changes.
Training on augumented user 57085 37/50 current_auc = 0.53125
User 57085 AUC after training: 0.53125
User 57085 does not improve AUC. Reverting changes.
Training on augumented user 86127 38/50 current_auc = 0.53125
User 86127 AUC after training: 0.53125
User 86127 does not improve AUC. Reverting changes.
Training on augumented user 21339 39/50 current_auc = 0.53125
User 21339 AUC after training: 0.53125
User 21339 does not improve AUC. Reverting changes.
Training on augumented user 36562 40/50 current_auc = 0.53125
User 36562 AUC after training: 0.53125
User 36562 does not improve AUC. Reverting changes.
Training on augumented user 130711 41/50 current_auc = 0.53125
User 130711 AUC after training: 0.53125
User 130711 does not improve AUC. Reverting changes.
Training on augumented user 51388 42/50 current_auc = 0.53125
User 51388 AUC after training: 0.53125
User 51388 does not improve AUC. Reverting changes.
Training on augumented user 100707 43/50 current_auc = 0.53125
User 100707 AUC after training: 0.53125
User 100707 does not improve AUC. Reverting changes.
Training on augumented user 57070 44/50 current_auc = 0.53125
User 57070 AUC after training: 0.53125
User 57070 does not improve AUC. Reverting changes.
Training on augumented user 88225 45/50 current_auc = 0.53125
User 88225 AUC after training: 0.53125
User 88225 does not improve AUC. Reverting changes.
Training on augumented user 123543 46/50 current_auc = 0.53125
User 123543 AUC after training: 0.53125
User 123543 does not improve AUC. Reverting changes.
Training on augumented user 64902 47/50 current_auc = 0.53125
User 64902 AUC after training: 0.53125
User 64902 does not improve AUC. Reverting changes.
Training on augumented user 8202 48/50 current_auc = 0.53125
User 8202 AUC after training: 0.53125
User 8202 does not improve AUC. Reverting changes.
Training on augumented user 39494 49/50 current_auc = 0.53125
User 39494 AUC after training: 0.546875
User 39494 improves AUC. Keeping the model.
[2024-12-02 17:56:24.027060] start test user 70546 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:24.456485] start test user 70546 34/568 recall augumented users by random, augumented_users = [93506, 91946, 61118, 37476, 20853, 23573, 81826, 54042, 25360, 22317, 14100, 124100, 97016, 134410, 138080, 124792, 72194, 58074, 138059, 124634, 26356, 79063, 53994, 131743, 102523, 96760, 34001, 7540, 9804, 18645, 66225, 127604, 1833, 50893, 18884, 39017, 74518, 124856, 28204, 27598, 88112, 50532, 53278, 57882, 119472, 109547, 65288, 21834, 66480, 20432]
[2024-12-02 17:56:24.471907] user = 70546 Cloud 34/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:24.478611] user = 70546 Local 34/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:24.526425] user = 70546 Local+ 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:26.080468] user = 70546 MPDA- 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 93506 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93506 AUC after training: 0.5
User 93506 does not improve AUC. Reverting changes.
Training on augumented user 91946 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91946 AUC after training: 0.5
User 91946 does not improve AUC. Reverting changes.
Training on augumented user 61118 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61118 AUC after training: 0.5
User 61118 does not improve AUC. Reverting changes.
Training on augumented user 37476 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37476 AUC after training: 0.5
User 37476 does not improve AUC. Reverting changes.
Training on augumented user 20853 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20853 AUC after training: 0.5
User 20853 does not improve AUC. Reverting changes.
Training on augumented user 23573 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23573 AUC after training: 0.5
User 23573 does not improve AUC. Reverting changes.
Training on augumented user 81826 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81826 AUC after training: 0.5
User 81826 does not improve AUC. Reverting changes.
Training on augumented user 54042 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54042 AUC after training: 0.5
User 54042 does not improve AUC. Reverting changes.
Training on augumented user 25360 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25360 AUC after training: 0.5
User 25360 does not improve AUC. Reverting changes.
Training on augumented user 22317 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22317 AUC after training: 0.5
User 22317 does not improve AUC. Reverting changes.
Training on augumented user 14100 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14100 AUC after training: 0.5
User 14100 does not improve AUC. Reverting changes.
Training on augumented user 124100 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124100 AUC after training: 0.5
User 124100 does not improve AUC. Reverting changes.
Training on augumented user 97016 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97016 AUC after training: 0.5
User 97016 does not improve AUC. Reverting changes.
Training on augumented user 134410 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134410 AUC after training: 0.5
User 134410 does not improve AUC. Reverting changes.
Training on augumented user 138080 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138080 AUC after training: 0.5
User 138080 does not improve AUC. Reverting changes.
Training on augumented user 124792 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124792 AUC after training: 0.5
User 124792 does not improve AUC. Reverting changes.
Training on augumented user 72194 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72194 AUC after training: 0.5
User 72194 does not improve AUC. Reverting changes.
Training on augumented user 58074 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58074 AUC after training: 0.5
User 58074 does not improve AUC. Reverting changes.
Training on augumented user 138059 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138059 AUC after training: 0.5
User 138059 does not improve AUC. Reverting changes.
Training on augumented user 124634 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124634 AUC after training: 0.5
User 124634 does not improve AUC. Reverting changes.
Training on augumented user 26356 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26356 AUC after training: 0.5
User 26356 does not improve AUC. Reverting changes.
Training on augumented user 79063 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79063 AUC after training: 0.5
User 79063 does not improve AUC. Reverting changes.
Training on augumented user 53994 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53994 AUC after training: 0.5
User 53994 does not improve AUC. Reverting changes.
Training on augumented user 131743 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131743 AUC after training: 0.5
User 131743 does not improve AUC. Reverting changes.
Training on augumented user 102523 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102523 AUC after training: 0.5
User 102523 does not improve AUC. Reverting changes.
Training on augumented user 96760 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96760 AUC after training: 0.5
User 96760 does not improve AUC. Reverting changes.
Training on augumented user 34001 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34001 AUC after training: 0.5
User 34001 does not improve AUC. Reverting changes.
Training on augumented user 7540 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7540 AUC after training: 0.5
User 7540 does not improve AUC. Reverting changes.
Training on augumented user 9804 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9804 AUC after training: 0.5
User 9804 does not improve AUC. Reverting changes.
Training on augumented user 18645 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18645 AUC after training: 0.5
User 18645 does not improve AUC. Reverting changes.
Training on augumented user 66225 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66225 AUC after training: 0.5
User 66225 does not improve AUC. Reverting changes.
Training on augumented user 127604 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127604 AUC after training: 0.5
User 127604 does not improve AUC. Reverting changes.
Training on augumented user 1833 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1833 AUC after training: 0.5
User 1833 does not improve AUC. Reverting changes.
Training on augumented user 50893 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50893 AUC after training: 0.5
User 50893 does not improve AUC. Reverting changes.
Training on augumented user 18884 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18884 AUC after training: 0.5
User 18884 does not improve AUC. Reverting changes.
Training on augumented user 39017 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39017 AUC after training: 0.5
User 39017 does not improve AUC. Reverting changes.
Training on augumented user 74518 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74518 AUC after training: 0.5
User 74518 does not improve AUC. Reverting changes.
Training on augumented user 124856 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124856 AUC after training: 0.5
User 124856 does not improve AUC. Reverting changes.
Training on augumented user 28204 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28204 AUC after training: 0.5
User 28204 does not improve AUC. Reverting changes.
Training on augumented user 27598 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27598 AUC after training: 0.5
User 27598 does not improve AUC. Reverting changes.
Training on augumented user 88112 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88112 AUC after training: 0.5
User 88112 does not improve AUC. Reverting changes.
Training on augumented user 50532 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50532 AUC after training: 0.5
User 50532 does not improve AUC. Reverting changes.
Training on augumented user 53278 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53278 AUC after training: 0.5
User 53278 does not improve AUC. Reverting changes.
Training on augumented user 57882 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57882 AUC after training: 0.5
User 57882 does not improve AUC. Reverting changes.
Training on augumented user 119472 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119472 AUC after training: 0.5
User 119472 does not improve AUC. Reverting changes.
Training on augumented user 109547 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109547 AUC after training: 0.5
User 109547 does not improve AUC. Reverting changes.
Training on augumented user 65288 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65288 AUC after training: 0.5
User 65288 does not improve AUC. Reverting changes.
Training on augumented user 21834 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21834 AUC after training: 0.5
User 21834 does not improve AUC. Reverting changes.
Training on augumented user 66480 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66480 AUC after training: 0.5
User 66480 does not improve AUC. Reverting changes.
Training on augumented user 20432 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20432 AUC after training: 0.5
User 20432 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:52.895280] start test user 70568 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:53.845884] start test user 70568 35/568 recall augumented users by random, augumented_users = [58802, 109159, 95267, 71066, 99813, 2234, 10975, 119479, 75876, 120461, 118135, 46708, 101895, 19576, 86873, 111954, 106421, 38743, 24872, 107178, 37317, 118781, 103606, 90127, 86949, 91370, 91923, 49771, 36743, 35683, 12302, 34935, 58546, 115605, 132523, 49089, 51526, 51549, 33130, 70575, 14140, 73505, 75624, 103283, 55675, 56973, 1714, 33643, 10081, 40903]
[2024-12-02 17:56:53.876251] user = 70568 Cloud 35/568
[2024-12-02 17:56:53.893560] user = 70568 Local 35/568
[2024-12-02 17:56:53.936644] user = 70568 Local+ 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:57.685792] user = 70568 MPDA- 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.30434782608695654
Training on augumented user 58802 0/50 current_auc = 0.30434782608695654
User 58802 AUC after training: 0.32608695652173914
User 58802 improves AUC. Keeping the model.
Training on augumented user 109159 1/50 current_auc = 0.32608695652173914
User 109159 AUC after training: 0.32608695652173914
User 109159 does not improve AUC. Reverting changes.
Training on augumented user 95267 2/50 current_auc = 0.32608695652173914
User 95267 AUC after training: 0.32608695652173914
User 95267 does not improve AUC. Reverting changes.
Training on augumented user 71066 3/50 current_auc = 0.32608695652173914
User 71066 AUC after training: 0.32608695652173914
User 71066 does not improve AUC. Reverting changes.
Training on augumented user 99813 4/50 current_auc = 0.32608695652173914
User 99813 AUC after training: 0.32608695652173914
User 99813 does not improve AUC. Reverting changes.
Training on augumented user 2234 5/50 current_auc = 0.32608695652173914
User 2234 AUC after training: 0.32608695652173914
User 2234 does not improve AUC. Reverting changes.
Training on augumented user 10975 6/50 current_auc = 0.32608695652173914
User 10975 AUC after training: 0.32608695652173914
User 10975 does not improve AUC. Reverting changes.
Training on augumented user 119479 7/50 current_auc = 0.32608695652173914
User 119479 AUC after training: 0.32608695652173914
User 119479 does not improve AUC. Reverting changes.
Training on augumented user 75876 8/50 current_auc = 0.32608695652173914
User 75876 AUC after training: 0.32608695652173914
User 75876 does not improve AUC. Reverting changes.
Training on augumented user 120461 9/50 current_auc = 0.32608695652173914
User 120461 AUC after training: 0.32608695652173914
User 120461 does not improve AUC. Reverting changes.
Training on augumented user 118135 10/50 current_auc = 0.32608695652173914
User 118135 AUC after training: 0.32608695652173914
User 118135 does not improve AUC. Reverting changes.
Training on augumented user 46708 11/50 current_auc = 0.32608695652173914
User 46708 AUC after training: 0.32608695652173914
User 46708 does not improve AUC. Reverting changes.
Training on augumented user 101895 12/50 current_auc = 0.32608695652173914
User 101895 AUC after training: 0.32608695652173914
User 101895 does not improve AUC. Reverting changes.
Training on augumented user 19576 13/50 current_auc = 0.32608695652173914
User 19576 AUC after training: 0.32608695652173914
User 19576 does not improve AUC. Reverting changes.
Training on augumented user 86873 14/50 current_auc = 0.32608695652173914
User 86873 AUC after training: 0.32608695652173914
User 86873 does not improve AUC. Reverting changes.
Training on augumented user 111954 15/50 current_auc = 0.32608695652173914
User 111954 AUC after training: 0.32608695652173914
User 111954 does not improve AUC. Reverting changes.
Training on augumented user 106421 16/50 current_auc = 0.32608695652173914
User 106421 AUC after training: 0.32608695652173914
User 106421 does not improve AUC. Reverting changes.
Training on augumented user 38743 17/50 current_auc = 0.32608695652173914
User 38743 AUC after training: 0.32608695652173914
User 38743 does not improve AUC. Reverting changes.
Training on augumented user 24872 18/50 current_auc = 0.32608695652173914
User 24872 AUC after training: 0.32608695652173914
User 24872 does not improve AUC. Reverting changes.
Training on augumented user 107178 19/50 current_auc = 0.32608695652173914
User 107178 AUC after training: 0.32608695652173914
User 107178 does not improve AUC. Reverting changes.
Training on augumented user 37317 20/50 current_auc = 0.32608695652173914
User 37317 AUC after training: 0.32608695652173914
User 37317 does not improve AUC. Reverting changes.
Training on augumented user 118781 21/50 current_auc = 0.32608695652173914
User 118781 AUC after training: 0.32608695652173914
User 118781 does not improve AUC. Reverting changes.
Training on augumented user 103606 22/50 current_auc = 0.32608695652173914
User 103606 AUC after training: 0.32608695652173914
User 103606 does not improve AUC. Reverting changes.
Training on augumented user 90127 23/50 current_auc = 0.32608695652173914
User 90127 AUC after training: 0.32608695652173914
User 90127 does not improve AUC. Reverting changes.
Training on augumented user 86949 24/50 current_auc = 0.32608695652173914
User 86949 AUC after training: 0.32608695652173914
User 86949 does not improve AUC. Reverting changes.
Training on augumented user 91370 25/50 current_auc = 0.32608695652173914
User 91370 AUC after training: 0.32608695652173914
User 91370 does not improve AUC. Reverting changes.
Training on augumented user 91923 26/50 current_auc = 0.32608695652173914
User 91923 AUC after training: 0.32608695652173914
User 91923 does not improve AUC. Reverting changes.
Training on augumented user 49771 27/50 current_auc = 0.32608695652173914
User 49771 AUC after training: 0.32608695652173914
User 49771 does not improve AUC. Reverting changes.
Training on augumented user 36743 28/50 current_auc = 0.32608695652173914
User 36743 AUC after training: 0.32608695652173914
User 36743 does not improve AUC. Reverting changes.
Training on augumented user 35683 29/50 current_auc = 0.32608695652173914
User 35683 AUC after training: 0.32608695652173914
User 35683 does not improve AUC. Reverting changes.
Training on augumented user 12302 30/50 current_auc = 0.32608695652173914
User 12302 AUC after training: 0.32608695652173914
User 12302 does not improve AUC. Reverting changes.
Training on augumented user 34935 31/50 current_auc = 0.32608695652173914
User 34935 AUC after training: 0.32608695652173914
User 34935 does not improve AUC. Reverting changes.
Training on augumented user 58546 32/50 current_auc = 0.32608695652173914
User 58546 AUC after training: 0.32608695652173914
User 58546 does not improve AUC. Reverting changes.
Training on augumented user 115605 33/50 current_auc = 0.32608695652173914
User 115605 AUC after training: 0.32608695652173914
User 115605 does not improve AUC. Reverting changes.
Training on augumented user 132523 34/50 current_auc = 0.32608695652173914
User 132523 AUC after training: 0.32608695652173914
User 132523 does not improve AUC. Reverting changes.
Training on augumented user 49089 35/50 current_auc = 0.32608695652173914
User 49089 AUC after training: 0.32608695652173914
User 49089 does not improve AUC. Reverting changes.
Training on augumented user 51526 36/50 current_auc = 0.32608695652173914
User 51526 AUC after training: 0.32608695652173914
User 51526 does not improve AUC. Reverting changes.
Training on augumented user 51549 37/50 current_auc = 0.32608695652173914
User 51549 AUC after training: 0.32608695652173914
User 51549 does not improve AUC. Reverting changes.
Training on augumented user 33130 38/50 current_auc = 0.32608695652173914
User 33130 AUC after training: 0.32608695652173914
User 33130 does not improve AUC. Reverting changes.
Training on augumented user 70575 39/50 current_auc = 0.32608695652173914
User 70575 AUC after training: 0.32608695652173914
User 70575 does not improve AUC. Reverting changes.
Training on augumented user 14140 40/50 current_auc = 0.32608695652173914
User 14140 AUC after training: 0.32608695652173914
User 14140 does not improve AUC. Reverting changes.
Training on augumented user 73505 41/50 current_auc = 0.32608695652173914
User 73505 AUC after training: 0.32608695652173914
User 73505 does not improve AUC. Reverting changes.
Training on augumented user 75624 42/50 current_auc = 0.32608695652173914
User 75624 AUC after training: 0.32608695652173914
User 75624 does not improve AUC. Reverting changes.
Training on augumented user 103283 43/50 current_auc = 0.32608695652173914
User 103283 AUC after training: 0.32608695652173914
User 103283 does not improve AUC. Reverting changes.
Training on augumented user 55675 44/50 current_auc = 0.32608695652173914
User 55675 AUC after training: 0.32608695652173914
User 55675 does not improve AUC. Reverting changes.
Training on augumented user 56973 45/50 current_auc = 0.32608695652173914
User 56973 AUC after training: 0.32608695652173914
User 56973 does not improve AUC. Reverting changes.
Training on augumented user 1714 46/50 current_auc = 0.32608695652173914
User 1714 AUC after training: 0.32608695652173914
User 1714 does not improve AUC. Reverting changes.
Training on augumented user 33643 47/50 current_auc = 0.32608695652173914
User 33643 AUC after training: 0.32608695652173914
User 33643 does not improve AUC. Reverting changes.
Training on augumented user 10081 48/50 current_auc = 0.32608695652173914
User 10081 AUC after training: 0.32608695652173914
User 10081 does not improve AUC. Reverting changes.
Training on augumented user 40903 49/50 current_auc = 0.32608695652173914
User 40903 AUC after training: 0.32608695652173914
User 40903 does not improve AUC. Reverting changes.
[2024-12-02 17:57:26.813205] start test user 70570 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:27.267680] start test user 70570 36/568 recall augumented users by random, augumented_users = [81617, 122026, 125058, 53072, 270, 123016, 25348, 60750, 75107, 45958, 23909, 69993, 38434, 25750, 121344, 131505, 99946, 118867, 20952, 24521, 83473, 2525, 48914, 22465, 112843, 49487, 47450, 69484, 37410, 120863, 26809, 75781, 47038, 57796, 8088, 58244, 57590, 13470, 86636, 7961, 89979, 88450, 52754, 54388, 97920, 6504, 78646, 62559, 55266, 74325]
[2024-12-02 17:57:27.282258] user = 70570 Cloud 36/568
[2024-12-02 17:57:27.324880] user = 70570 Local 36/568
[2024-12-02 17:57:27.387449] user = 70570 Local+ 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:29.342088] user = 70570 MPDA- 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7203896604938272
Training on augumented user 81617 0/50 current_auc = 0.7203896604938272
User 81617 AUC after training: 0.7196180555555556
User 81617 does not improve AUC. Reverting changes.
Training on augumented user 122026 1/50 current_auc = 0.7203896604938272
User 122026 AUC after training: 0.7197145061728396
User 122026 does not improve AUC. Reverting changes.
Training on augumented user 125058 2/50 current_auc = 0.7203896604938272
User 125058 AUC after training: 0.7201003086419754
User 125058 does not improve AUC. Reverting changes.
Training on augumented user 53072 3/50 current_auc = 0.7203896604938272
User 53072 AUC after training: 0.7200038580246915
User 53072 does not improve AUC. Reverting changes.
Training on augumented user 270 4/50 current_auc = 0.7203896604938272
User 270 AUC after training: 0.7201003086419753
User 270 does not improve AUC. Reverting changes.
Training on augumented user 123016 5/50 current_auc = 0.7203896604938272
User 123016 AUC after training: 0.7194251543209876
User 123016 does not improve AUC. Reverting changes.
Training on augumented user 25348 6/50 current_auc = 0.7203896604938272
User 25348 AUC after training: 0.7201967592592593
User 25348 does not improve AUC. Reverting changes.
Training on augumented user 60750 7/50 current_auc = 0.7203896604938272
User 60750 AUC after training: 0.7209683641975309
User 60750 improves AUC. Keeping the model.
Training on augumented user 75107 8/50 current_auc = 0.7209683641975309
User 75107 AUC after training: 0.7201967592592592
User 75107 does not improve AUC. Reverting changes.
Training on augumented user 45958 9/50 current_auc = 0.7209683641975309
User 45958 AUC after training: 0.7202932098765432
User 45958 does not improve AUC. Reverting changes.
Training on augumented user 23909 10/50 current_auc = 0.7209683641975309
User 23909 AUC after training: 0.7206790123456791
User 23909 does not improve AUC. Reverting changes.
Training on augumented user 69993 11/50 current_auc = 0.7209683641975309
User 69993 AUC after training: 0.7204861111111112
User 69993 does not improve AUC. Reverting changes.
Training on augumented user 38434 12/50 current_auc = 0.7209683641975309
User 38434 AUC after training: 0.720968364197531
User 38434 improves AUC. Keeping the model.
Training on augumented user 25750 13/50 current_auc = 0.720968364197531
User 25750 AUC after training: 0.7201003086419753
User 25750 does not improve AUC. Reverting changes.
Training on augumented user 121344 14/50 current_auc = 0.720968364197531
User 121344 AUC after training: 0.720871913580247
User 121344 does not improve AUC. Reverting changes.
Training on augumented user 131505 15/50 current_auc = 0.720968364197531
User 131505 AUC after training: 0.7204861111111112
User 131505 does not improve AUC. Reverting changes.
Training on augumented user 99946 16/50 current_auc = 0.720968364197531
User 99946 AUC after training: 0.7199074074074074
User 99946 does not improve AUC. Reverting changes.
Training on augumented user 118867 17/50 current_auc = 0.720968364197531
User 118867 AUC after training: 0.7201003086419755
User 118867 does not improve AUC. Reverting changes.
Training on augumented user 20952 18/50 current_auc = 0.720968364197531
User 20952 AUC after training: 0.720486111111111
User 20952 does not improve AUC. Reverting changes.
Training on augumented user 24521 19/50 current_auc = 0.720968364197531
User 24521 AUC after training: 0.7202932098765433
User 24521 does not improve AUC. Reverting changes.
Training on augumented user 83473 20/50 current_auc = 0.720968364197531
User 83473 AUC after training: 0.720968364197531
User 83473 does not improve AUC. Reverting changes.
Training on augumented user 2525 21/50 current_auc = 0.720968364197531
User 2525 AUC after training: 0.720871913580247
User 2525 does not improve AUC. Reverting changes.
Training on augumented user 48914 22/50 current_auc = 0.720968364197531
User 48914 AUC after training: 0.7203896604938271
User 48914 does not improve AUC. Reverting changes.
Training on augumented user 22465 23/50 current_auc = 0.720968364197531
User 22465 AUC after training: 0.7213541666666666
User 22465 improves AUC. Keeping the model.
Training on augumented user 112843 24/50 current_auc = 0.7213541666666666
User 112843 AUC after training: 0.7208719135802469
User 112843 does not improve AUC. Reverting changes.
Training on augumented user 49487 25/50 current_auc = 0.7213541666666666
User 49487 AUC after training: 0.7210648148148148
User 49487 does not improve AUC. Reverting changes.
Training on augumented user 47450 26/50 current_auc = 0.7213541666666666
User 47450 AUC after training: 0.7189429012345678
User 47450 does not improve AUC. Reverting changes.
Training on augumented user 69484 27/50 current_auc = 0.7213541666666666
User 69484 AUC after training: 0.7194733796296297
User 69484 does not improve AUC. Reverting changes.
Training on augumented user 37410 28/50 current_auc = 0.7213541666666666
User 37410 AUC after training: 0.7210648148148149
User 37410 does not improve AUC. Reverting changes.
Training on augumented user 120863 29/50 current_auc = 0.7213541666666666
User 120863 AUC after training: 0.7213541666666667
User 120863 improves AUC. Keeping the model.
Training on augumented user 26809 30/50 current_auc = 0.7213541666666667
User 26809 AUC after training: 0.720727237654321
User 26809 does not improve AUC. Reverting changes.
Training on augumented user 75781 31/50 current_auc = 0.7213541666666667
User 75781 AUC after training: 0.7201967592592593
User 75781 does not improve AUC. Reverting changes.
Training on augumented user 47038 32/50 current_auc = 0.7213541666666667
User 47038 AUC after training: 0.7199074074074074
User 47038 does not improve AUC. Reverting changes.
Training on augumented user 57796 33/50 current_auc = 0.7213541666666667
User 57796 AUC after training: 0.7210648148148149
User 57796 does not improve AUC. Reverting changes.
Training on augumented user 8088 34/50 current_auc = 0.7213541666666667
User 8088 AUC after training: 0.720679012345679
User 8088 does not improve AUC. Reverting changes.
Training on augumented user 58244 35/50 current_auc = 0.7213541666666667
User 58244 AUC after training: 0.720871913580247
User 58244 does not improve AUC. Reverting changes.
Training on augumented user 57590 36/50 current_auc = 0.7213541666666667
User 57590 AUC after training: 0.721064814814815
User 57590 does not improve AUC. Reverting changes.
Training on augumented user 13470 37/50 current_auc = 0.7213541666666667
User 13470 AUC after training: 0.7204861111111112
User 13470 does not improve AUC. Reverting changes.
Training on augumented user 86636 38/50 current_auc = 0.7213541666666667
User 86636 AUC after training: 0.7207754629629631
User 86636 does not improve AUC. Reverting changes.
Training on augumented user 7961 39/50 current_auc = 0.7213541666666667
User 7961 AUC after training: 0.720679012345679
User 7961 does not improve AUC. Reverting changes.
Training on augumented user 89979 40/50 current_auc = 0.7213541666666667
User 89979 AUC after training: 0.720968364197531
User 89979 does not improve AUC. Reverting changes.
Training on augumented user 88450 41/50 current_auc = 0.7213541666666667
User 88450 AUC after training: 0.7206790123456791
User 88450 does not improve AUC. Reverting changes.
Training on augumented user 52754 42/50 current_auc = 0.7213541666666667
User 52754 AUC after training: 0.720679012345679
User 52754 does not improve AUC. Reverting changes.
Training on augumented user 54388 43/50 current_auc = 0.7213541666666667
User 54388 AUC after training: 0.7210648148148149
User 54388 does not improve AUC. Reverting changes.
Training on augumented user 97920 44/50 current_auc = 0.7213541666666667
User 97920 AUC after training: 0.7209683641975309
User 97920 does not improve AUC. Reverting changes.
Training on augumented user 6504 45/50 current_auc = 0.7213541666666667
User 6504 AUC after training: 0.7210648148148149
User 6504 does not improve AUC. Reverting changes.
Training on augumented user 78646 46/50 current_auc = 0.7213541666666667
User 78646 AUC after training: 0.7214506172839508
User 78646 improves AUC. Keeping the model.
Training on augumented user 62559 47/50 current_auc = 0.7214506172839508
User 62559 AUC after training: 0.720871913580247
User 62559 does not improve AUC. Reverting changes.
Training on augumented user 55266 48/50 current_auc = 0.7214506172839508
User 55266 AUC after training: 0.7215470679012347
User 55266 improves AUC. Keeping the model.
Training on augumented user 74325 49/50 current_auc = 0.7215470679012347
User 74325 AUC after training: 0.7213541666666667
User 74325 does not improve AUC. Reverting changes.
[2024-12-02 17:57:58.023007] start test user 70593 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:58.966628] start test user 70593 37/568 recall augumented users by random, augumented_users = [34995, 63357, 43777, 103855, 109181, 9857, 99128, 60740, 43710, 130723, 92612, 19653, 129223, 80076, 116513, 40906, 58119, 55621, 100664, 16820, 86391, 26786, 79915, 100490, 39900, 103029, 111165, 95063, 93684, 116830, 49544, 62261, 94537, 39889, 40348, 110822, 106319, 34715, 111771, 56527, 13062, 277, 54064, 56, 105159, 37089, 22048, 121819, 135221, 114435]
[2024-12-02 17:57:58.990583] user = 70593 Cloud 37/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:57:59.009838] user = 70593 Local 37/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:57:59.035904] user = 70593 Local+ 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:58:01.559959] user = 70593 MPDA- 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 34995 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34995 AUC after training: 0.5
User 34995 does not improve AUC. Reverting changes.
Training on augumented user 63357 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63357 AUC after training: 0.5
User 63357 does not improve AUC. Reverting changes.
Training on augumented user 43777 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43777 AUC after training: 0.5
User 43777 does not improve AUC. Reverting changes.
Training on augumented user 103855 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103855 AUC after training: 0.5
User 103855 does not improve AUC. Reverting changes.
Training on augumented user 109181 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109181 AUC after training: 0.5
User 109181 does not improve AUC. Reverting changes.
Training on augumented user 9857 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9857 AUC after training: 0.5
User 9857 does not improve AUC. Reverting changes.
Training on augumented user 99128 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99128 AUC after training: 0.5
User 99128 does not improve AUC. Reverting changes.
Training on augumented user 60740 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60740 AUC after training: 0.5
User 60740 does not improve AUC. Reverting changes.
Training on augumented user 43710 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43710 AUC after training: 0.5
User 43710 does not improve AUC. Reverting changes.
Training on augumented user 130723 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130723 AUC after training: 0.5
User 130723 does not improve AUC. Reverting changes.
Training on augumented user 92612 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92612 AUC after training: 0.5
User 92612 does not improve AUC. Reverting changes.
Training on augumented user 19653 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19653 AUC after training: 0.5
User 19653 does not improve AUC. Reverting changes.
Training on augumented user 129223 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129223 AUC after training: 0.5
User 129223 does not improve AUC. Reverting changes.
Training on augumented user 80076 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80076 AUC after training: 0.5
User 80076 does not improve AUC. Reverting changes.
Training on augumented user 116513 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116513 AUC after training: 0.5
User 116513 does not improve AUC. Reverting changes.
Training on augumented user 40906 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40906 AUC after training: 0.5
User 40906 does not improve AUC. Reverting changes.
Training on augumented user 58119 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58119 AUC after training: 0.5
User 58119 does not improve AUC. Reverting changes.
Training on augumented user 55621 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55621 AUC after training: 0.5
User 55621 does not improve AUC. Reverting changes.
Training on augumented user 100664 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100664 AUC after training: 0.5
User 100664 does not improve AUC. Reverting changes.
Training on augumented user 16820 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16820 AUC after training: 0.5
User 16820 does not improve AUC. Reverting changes.
Training on augumented user 86391 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86391 AUC after training: 0.5
User 86391 does not improve AUC. Reverting changes.
Training on augumented user 26786 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26786 AUC after training: 0.5
User 26786 does not improve AUC. Reverting changes.
Training on augumented user 79915 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79915 AUC after training: 0.5
User 79915 does not improve AUC. Reverting changes.
Training on augumented user 100490 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100490 AUC after training: 0.5
User 100490 does not improve AUC. Reverting changes.
Training on augumented user 39900 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39900 AUC after training: 0.5
User 39900 does not improve AUC. Reverting changes.
Training on augumented user 103029 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103029 AUC after training: 0.5
User 103029 does not improve AUC. Reverting changes.
Training on augumented user 111165 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111165 AUC after training: 0.5
User 111165 does not improve AUC. Reverting changes.
Training on augumented user 95063 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95063 AUC after training: 0.5
User 95063 does not improve AUC. Reverting changes.
Training on augumented user 93684 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93684 AUC after training: 0.5
User 93684 does not improve AUC. Reverting changes.
Training on augumented user 116830 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116830 AUC after training: 0.5
User 116830 does not improve AUC. Reverting changes.
Training on augumented user 49544 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49544 AUC after training: 0.5
User 49544 does not improve AUC. Reverting changes.
Training on augumented user 62261 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62261 AUC after training: 0.5
User 62261 does not improve AUC. Reverting changes.
Training on augumented user 94537 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94537 AUC after training: 0.5
User 94537 does not improve AUC. Reverting changes.
Training on augumented user 39889 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39889 AUC after training: 0.5
User 39889 does not improve AUC. Reverting changes.
Training on augumented user 40348 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40348 AUC after training: 0.5
User 40348 does not improve AUC. Reverting changes.
Training on augumented user 110822 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110822 AUC after training: 0.5
User 110822 does not improve AUC. Reverting changes.
Training on augumented user 106319 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106319 AUC after training: 0.5
User 106319 does not improve AUC. Reverting changes.
Training on augumented user 34715 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34715 AUC after training: 0.5
User 34715 does not improve AUC. Reverting changes.
Training on augumented user 111771 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111771 AUC after training: 0.5
User 111771 does not improve AUC. Reverting changes.
Training on augumented user 56527 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56527 AUC after training: 0.5
User 56527 does not improve AUC. Reverting changes.
Training on augumented user 13062 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13062 AUC after training: 0.5
User 13062 does not improve AUC. Reverting changes.
Training on augumented user 277 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 277 AUC after training: 0.5
User 277 does not improve AUC. Reverting changes.
Training on augumented user 54064 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54064 AUC after training: 0.5
User 54064 does not improve AUC. Reverting changes.
Training on augumented user 56 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56 AUC after training: 0.5
User 56 does not improve AUC. Reverting changes.
Training on augumented user 105159 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105159 AUC after training: 0.5
User 105159 does not improve AUC. Reverting changes.
Training on augumented user 37089 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37089 AUC after training: 0.5
User 37089 does not improve AUC. Reverting changes.
Training on augumented user 22048 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22048 AUC after training: 0.5
User 22048 does not improve AUC. Reverting changes.
Training on augumented user 121819 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121819 AUC after training: 0.5
User 121819 does not improve AUC. Reverting changes.
Training on augumented user 135221 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135221 AUC after training: 0.5
User 135221 does not improve AUC. Reverting changes.
Training on augumented user 114435 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114435 AUC after training: 0.5
User 114435 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:58:32.824144] start test user 70606 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:33.439435] start test user 70606 38/568 recall augumented users by random, augumented_users = [90596, 73823, 35355, 94759, 88759, 129988, 41496, 82837, 74930, 41877, 21405, 111931, 86552, 57492, 108334, 94878, 119321, 137710, 7690, 75369, 50248, 50599, 75328, 44816, 15967, 55604, 92033, 93858, 82962, 90242, 79106, 137080, 114058, 32601, 49179, 50237, 24093, 86609, 131994, 32502, 108980, 29088, 84590, 6996, 17298, 10891, 95356, 66986, 116552, 44508]
[2024-12-02 17:58:33.454207] user = 70606 Cloud 38/568
[2024-12-02 17:58:33.465790] user = 70606 Local 38/568
[2024-12-02 17:58:33.500513] user = 70606 Local+ 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:36.241303] user = 70606 MPDA- 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333333
Training on augumented user 90596 0/50 current_auc = 0.8333333333333333
User 90596 AUC after training: 0.8333333333333333
User 90596 does not improve AUC. Reverting changes.
Training on augumented user 73823 1/50 current_auc = 0.8333333333333333
User 73823 AUC after training: 0.8333333333333333
User 73823 does not improve AUC. Reverting changes.
Training on augumented user 35355 2/50 current_auc = 0.8333333333333333
User 35355 AUC after training: 0.8333333333333333
User 35355 does not improve AUC. Reverting changes.
Training on augumented user 94759 3/50 current_auc = 0.8333333333333333
User 94759 AUC after training: 0.8333333333333333
User 94759 does not improve AUC. Reverting changes.
Training on augumented user 88759 4/50 current_auc = 0.8333333333333333
User 88759 AUC after training: 0.8333333333333333
User 88759 does not improve AUC. Reverting changes.
Training on augumented user 129988 5/50 current_auc = 0.8333333333333333
User 129988 AUC after training: 0.8333333333333333
User 129988 does not improve AUC. Reverting changes.
Training on augumented user 41496 6/50 current_auc = 0.8333333333333333
User 41496 AUC after training: 0.8333333333333333
User 41496 does not improve AUC. Reverting changes.
Training on augumented user 82837 7/50 current_auc = 0.8333333333333333
User 82837 AUC after training: 0.8333333333333333
User 82837 does not improve AUC. Reverting changes.
Training on augumented user 74930 8/50 current_auc = 0.8333333333333333
User 74930 AUC after training: 0.8333333333333333
User 74930 does not improve AUC. Reverting changes.
Training on augumented user 41877 9/50 current_auc = 0.8333333333333333
User 41877 AUC after training: 0.8333333333333333
User 41877 does not improve AUC. Reverting changes.
Training on augumented user 21405 10/50 current_auc = 0.8333333333333333
User 21405 AUC after training: 0.8333333333333333
User 21405 does not improve AUC. Reverting changes.
Training on augumented user 111931 11/50 current_auc = 0.8333333333333333
User 111931 AUC after training: 0.8333333333333333
User 111931 does not improve AUC. Reverting changes.
Training on augumented user 86552 12/50 current_auc = 0.8333333333333333
User 86552 AUC after training: 0.8333333333333333
User 86552 does not improve AUC. Reverting changes.
Training on augumented user 57492 13/50 current_auc = 0.8333333333333333
User 57492 AUC after training: 0.8333333333333333
User 57492 does not improve AUC. Reverting changes.
Training on augumented user 108334 14/50 current_auc = 0.8333333333333333
User 108334 AUC after training: 0.8333333333333333
User 108334 does not improve AUC. Reverting changes.
Training on augumented user 94878 15/50 current_auc = 0.8333333333333333
User 94878 AUC after training: 0.8333333333333333
User 94878 does not improve AUC. Reverting changes.
Training on augumented user 119321 16/50 current_auc = 0.8333333333333333
User 119321 AUC after training: 0.8333333333333333
User 119321 does not improve AUC. Reverting changes.
Training on augumented user 137710 17/50 current_auc = 0.8333333333333333
User 137710 AUC after training: 0.8333333333333333
User 137710 does not improve AUC. Reverting changes.
Training on augumented user 7690 18/50 current_auc = 0.8333333333333333
User 7690 AUC after training: 0.8333333333333333
User 7690 does not improve AUC. Reverting changes.
Training on augumented user 75369 19/50 current_auc = 0.8333333333333333
User 75369 AUC after training: 0.8333333333333333
User 75369 does not improve AUC. Reverting changes.
Training on augumented user 50248 20/50 current_auc = 0.8333333333333333
User 50248 AUC after training: 0.8333333333333333
User 50248 does not improve AUC. Reverting changes.
Training on augumented user 50599 21/50 current_auc = 0.8333333333333333
User 50599 AUC after training: 0.8333333333333333
User 50599 does not improve AUC. Reverting changes.
Training on augumented user 75328 22/50 current_auc = 0.8333333333333333
User 75328 AUC after training: 0.8333333333333333
User 75328 does not improve AUC. Reverting changes.
Training on augumented user 44816 23/50 current_auc = 0.8333333333333333
User 44816 AUC after training: 0.8333333333333333
User 44816 does not improve AUC. Reverting changes.
Training on augumented user 15967 24/50 current_auc = 0.8333333333333333
User 15967 AUC after training: 0.8333333333333333
User 15967 does not improve AUC. Reverting changes.
Training on augumented user 55604 25/50 current_auc = 0.8333333333333333
User 55604 AUC after training: 0.8333333333333333
User 55604 does not improve AUC. Reverting changes.
Training on augumented user 92033 26/50 current_auc = 0.8333333333333333
User 92033 AUC after training: 0.8333333333333333
User 92033 does not improve AUC. Reverting changes.
Training on augumented user 93858 27/50 current_auc = 0.8333333333333333
User 93858 AUC after training: 0.8333333333333333
User 93858 does not improve AUC. Reverting changes.
Training on augumented user 82962 28/50 current_auc = 0.8333333333333333
User 82962 AUC after training: 0.8333333333333333
User 82962 does not improve AUC. Reverting changes.
Training on augumented user 90242 29/50 current_auc = 0.8333333333333333
User 90242 AUC after training: 0.8333333333333333
User 90242 does not improve AUC. Reverting changes.
Training on augumented user 79106 30/50 current_auc = 0.8333333333333333
User 79106 AUC after training: 0.8333333333333333
User 79106 does not improve AUC. Reverting changes.
Training on augumented user 137080 31/50 current_auc = 0.8333333333333333
User 137080 AUC after training: 0.8333333333333333
User 137080 does not improve AUC. Reverting changes.
Training on augumented user 114058 32/50 current_auc = 0.8333333333333333
User 114058 AUC after training: 0.8333333333333333
User 114058 does not improve AUC. Reverting changes.
Training on augumented user 32601 33/50 current_auc = 0.8333333333333333
User 32601 AUC after training: 0.8333333333333333
User 32601 does not improve AUC. Reverting changes.
Training on augumented user 49179 34/50 current_auc = 0.8333333333333333
User 49179 AUC after training: 0.8333333333333333
User 49179 does not improve AUC. Reverting changes.
Training on augumented user 50237 35/50 current_auc = 0.8333333333333333
User 50237 AUC after training: 0.8333333333333333
User 50237 does not improve AUC. Reverting changes.
Training on augumented user 24093 36/50 current_auc = 0.8333333333333333
User 24093 AUC after training: 0.8333333333333333
User 24093 does not improve AUC. Reverting changes.
Training on augumented user 86609 37/50 current_auc = 0.8333333333333333
User 86609 AUC after training: 0.8333333333333333
User 86609 does not improve AUC. Reverting changes.
Training on augumented user 131994 38/50 current_auc = 0.8333333333333333
User 131994 AUC after training: 0.8333333333333333
User 131994 does not improve AUC. Reverting changes.
Training on augumented user 32502 39/50 current_auc = 0.8333333333333333
User 32502 AUC after training: 0.8333333333333333
User 32502 does not improve AUC. Reverting changes.
Training on augumented user 108980 40/50 current_auc = 0.8333333333333333
User 108980 AUC after training: 0.8333333333333333
User 108980 does not improve AUC. Reverting changes.
Training on augumented user 29088 41/50 current_auc = 0.8333333333333333
User 29088 AUC after training: 0.8333333333333333
User 29088 does not improve AUC. Reverting changes.
Training on augumented user 84590 42/50 current_auc = 0.8333333333333333
User 84590 AUC after training: 0.8333333333333333
User 84590 does not improve AUC. Reverting changes.
Training on augumented user 6996 43/50 current_auc = 0.8333333333333333
User 6996 AUC after training: 0.8333333333333333
User 6996 does not improve AUC. Reverting changes.
Training on augumented user 17298 44/50 current_auc = 0.8333333333333333
User 17298 AUC after training: 0.8333333333333333
User 17298 does not improve AUC. Reverting changes.
Training on augumented user 10891 45/50 current_auc = 0.8333333333333333
User 10891 AUC after training: 0.8333333333333333
User 10891 does not improve AUC. Reverting changes.
Training on augumented user 95356 46/50 current_auc = 0.8333333333333333
User 95356 AUC after training: 0.8333333333333333
User 95356 does not improve AUC. Reverting changes.
Training on augumented user 66986 47/50 current_auc = 0.8333333333333333
User 66986 AUC after training: 0.8333333333333333
User 66986 does not improve AUC. Reverting changes.
Training on augumented user 116552 48/50 current_auc = 0.8333333333333333
User 116552 AUC after training: 0.8333333333333333
User 116552 does not improve AUC. Reverting changes.
Training on augumented user 44508 49/50 current_auc = 0.8333333333333333
User 44508 AUC after training: 0.8333333333333333
User 44508 does not improve AUC. Reverting changes.
[2024-12-02 17:59:06.005265] start test user 70629 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:06.452852] start test user 70629 39/568 recall augumented users by random, augumented_users = [93904, 99429, 86515, 41480, 55210, 74063, 50577, 124773, 68400, 131272, 45788, 97943, 127924, 28621, 23835, 39825, 38661, 33342, 120292, 24814, 112868, 120837, 126286, 29803, 79242, 363, 72738, 6629, 69729, 52321, 11646, 101875, 71203, 29594, 70753, 24366, 72004, 89480, 3919, 116192, 123150, 7439, 45523, 7421, 73158, 98974, 38161, 92194, 1566, 72783]
[2024-12-02 17:59:06.467559] user = 70629 Cloud 39/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:59:06.472814] user = 70629 Local 39/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:59:06.505995] user = 70629 Local+ 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:59:09.634538] user = 70629 MPDA- 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 93904 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93904 AUC after training: 0.5
User 93904 does not improve AUC. Reverting changes.
Training on augumented user 99429 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99429 AUC after training: 0.5
User 99429 does not improve AUC. Reverting changes.
Training on augumented user 86515 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86515 AUC after training: 0.5
User 86515 does not improve AUC. Reverting changes.
Training on augumented user 41480 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41480 AUC after training: 0.5
User 41480 does not improve AUC. Reverting changes.
Training on augumented user 55210 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55210 AUC after training: 0.5
User 55210 does not improve AUC. Reverting changes.
Training on augumented user 74063 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74063 AUC after training: 0.5
User 74063 does not improve AUC. Reverting changes.
Training on augumented user 50577 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50577 AUC after training: 0.5
User 50577 does not improve AUC. Reverting changes.
Training on augumented user 124773 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124773 AUC after training: 0.5
User 124773 does not improve AUC. Reverting changes.
Training on augumented user 68400 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68400 AUC after training: 0.5
User 68400 does not improve AUC. Reverting changes.
Training on augumented user 131272 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131272 AUC after training: 0.5
User 131272 does not improve AUC. Reverting changes.
Training on augumented user 45788 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45788 AUC after training: 0.5
User 45788 does not improve AUC. Reverting changes.
Training on augumented user 97943 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97943 AUC after training: 0.5
User 97943 does not improve AUC. Reverting changes.
Training on augumented user 127924 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127924 AUC after training: 0.5
User 127924 does not improve AUC. Reverting changes.
Training on augumented user 28621 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28621 AUC after training: 0.5
User 28621 does not improve AUC. Reverting changes.
Training on augumented user 23835 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23835 AUC after training: 0.5
User 23835 does not improve AUC. Reverting changes.
Training on augumented user 39825 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39825 AUC after training: 0.5
User 39825 does not improve AUC. Reverting changes.
Training on augumented user 38661 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38661 AUC after training: 0.5
User 38661 does not improve AUC. Reverting changes.
Training on augumented user 33342 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33342 AUC after training: 0.5
User 33342 does not improve AUC. Reverting changes.
Training on augumented user 120292 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120292 AUC after training: 0.5
User 120292 does not improve AUC. Reverting changes.
Training on augumented user 24814 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24814 AUC after training: 0.5
User 24814 does not improve AUC. Reverting changes.
Training on augumented user 112868 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112868 AUC after training: 0.5
User 112868 does not improve AUC. Reverting changes.
Training on augumented user 120837 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120837 AUC after training: 0.5
User 120837 does not improve AUC. Reverting changes.
Training on augumented user 126286 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126286 AUC after training: 0.5
User 126286 does not improve AUC. Reverting changes.
Training on augumented user 29803 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29803 AUC after training: 0.5
User 29803 does not improve AUC. Reverting changes.
Training on augumented user 79242 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79242 AUC after training: 0.5
User 79242 does not improve AUC. Reverting changes.
Training on augumented user 363 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 363 AUC after training: 0.5
User 363 does not improve AUC. Reverting changes.
Training on augumented user 72738 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72738 AUC after training: 0.5
User 72738 does not improve AUC. Reverting changes.
Training on augumented user 6629 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6629 AUC after training: 0.5
User 6629 does not improve AUC. Reverting changes.
Training on augumented user 69729 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69729 AUC after training: 0.5
User 69729 does not improve AUC. Reverting changes.
Training on augumented user 52321 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52321 AUC after training: 0.5
User 52321 does not improve AUC. Reverting changes.
Training on augumented user 11646 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11646 AUC after training: 0.5
User 11646 does not improve AUC. Reverting changes.
Training on augumented user 101875 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101875 AUC after training: 0.5
User 101875 does not improve AUC. Reverting changes.
Training on augumented user 71203 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71203 AUC after training: 0.5
User 71203 does not improve AUC. Reverting changes.
Training on augumented user 29594 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29594 AUC after training: 0.5
User 29594 does not improve AUC. Reverting changes.
Training on augumented user 70753 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70753 AUC after training: 0.5
User 70753 does not improve AUC. Reverting changes.
Training on augumented user 24366 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24366 AUC after training: 0.5
User 24366 does not improve AUC. Reverting changes.
Training on augumented user 72004 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72004 AUC after training: 0.5
User 72004 does not improve AUC. Reverting changes.
Training on augumented user 89480 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89480 AUC after training: 0.5
User 89480 does not improve AUC. Reverting changes.
Training on augumented user 3919 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3919 AUC after training: 0.5
User 3919 does not improve AUC. Reverting changes.
Training on augumented user 116192 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116192 AUC after training: 0.5
User 116192 does not improve AUC. Reverting changes.
Training on augumented user 123150 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123150 AUC after training: 0.5
User 123150 does not improve AUC. Reverting changes.
Training on augumented user 7439 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7439 AUC after training: 0.5
User 7439 does not improve AUC. Reverting changes.
Training on augumented user 45523 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45523 AUC after training: 0.5
User 45523 does not improve AUC. Reverting changes.
Training on augumented user 7421 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7421 AUC after training: 0.5
User 7421 does not improve AUC. Reverting changes.
Training on augumented user 73158 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73158 AUC after training: 0.5
User 73158 does not improve AUC. Reverting changes.
Training on augumented user 98974 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98974 AUC after training: 0.5
User 98974 does not improve AUC. Reverting changes.
Training on augumented user 38161 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38161 AUC after training: 0.5
User 38161 does not improve AUC. Reverting changes.
Training on augumented user 92194 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92194 AUC after training: 0.5
User 92194 does not improve AUC. Reverting changes.
Training on augumented user 1566 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1566 AUC after training: 0.5
User 1566 does not improve AUC. Reverting changes.
Training on augumented user 72783 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72783 AUC after training: 0.5
User 72783 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:59:40.919722] start test user 70663 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:41.394352] start test user 70663 40/568 recall augumented users by random, augumented_users = [83365, 73015, 25996, 21539, 104914, 33672, 52945, 41823, 36113, 104623, 105389, 107656, 57063, 80846, 96284, 121199, 356, 138462, 109413, 124884, 97274, 15943, 2965, 68097, 99907, 3645, 135995, 24736, 106463, 80556, 122908, 115722, 113694, 38434, 31871, 18733, 100716, 113671, 58805, 70290, 8464, 110373, 108661, 137521, 69676, 101242, 40829, 127808, 94509, 105382]
[2024-12-02 17:59:41.409953] user = 70663 Cloud 40/568
[2024-12-02 17:59:41.420687] user = 70663 Local 40/568
[2024-12-02 17:59:41.541875] user = 70663 Local+ 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:43.492410] user = 70663 MPDA- 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4642857142857143
Training on augumented user 83365 0/50 current_auc = 0.4642857142857143
User 83365 AUC after training: 0.4642857142857143
User 83365 does not improve AUC. Reverting changes.
Training on augumented user 73015 1/50 current_auc = 0.4642857142857143
User 73015 AUC after training: 0.4523809523809524
User 73015 does not improve AUC. Reverting changes.
Training on augumented user 25996 2/50 current_auc = 0.4642857142857143
User 25996 AUC after training: 0.4642857142857143
User 25996 does not improve AUC. Reverting changes.
Training on augumented user 21539 3/50 current_auc = 0.4642857142857143
User 21539 AUC after training: 0.4523809523809524
User 21539 does not improve AUC. Reverting changes.
Training on augumented user 104914 4/50 current_auc = 0.4642857142857143
User 104914 AUC after training: 0.4642857142857143
User 104914 does not improve AUC. Reverting changes.
Training on augumented user 33672 5/50 current_auc = 0.4642857142857143
User 33672 AUC after training: 0.4642857142857143
User 33672 does not improve AUC. Reverting changes.
Training on augumented user 52945 6/50 current_auc = 0.4642857142857143
User 52945 AUC after training: 0.4523809523809524
User 52945 does not improve AUC. Reverting changes.
Training on augumented user 41823 7/50 current_auc = 0.4642857142857143
User 41823 AUC after training: 0.4523809523809524
User 41823 does not improve AUC. Reverting changes.
Training on augumented user 36113 8/50 current_auc = 0.4642857142857143
User 36113 AUC after training: 0.4642857142857143
User 36113 does not improve AUC. Reverting changes.
Training on augumented user 104623 9/50 current_auc = 0.4642857142857143
User 104623 AUC after training: 0.4523809523809524
User 104623 does not improve AUC. Reverting changes.
Training on augumented user 105389 10/50 current_auc = 0.4642857142857143
User 105389 AUC after training: 0.4642857142857143
User 105389 does not improve AUC. Reverting changes.
Training on augumented user 107656 11/50 current_auc = 0.4642857142857143
User 107656 AUC after training: 0.4642857142857143
User 107656 does not improve AUC. Reverting changes.
Training on augumented user 57063 12/50 current_auc = 0.4642857142857143
User 57063 AUC after training: 0.4523809523809524
User 57063 does not improve AUC. Reverting changes.
Training on augumented user 80846 13/50 current_auc = 0.4642857142857143
User 80846 AUC after training: 0.4642857142857143
User 80846 does not improve AUC. Reverting changes.
Training on augumented user 96284 14/50 current_auc = 0.4642857142857143
User 96284 AUC after training: 0.4523809523809524
User 96284 does not improve AUC. Reverting changes.
Training on augumented user 121199 15/50 current_auc = 0.4642857142857143
User 121199 AUC after training: 0.4523809523809524
User 121199 does not improve AUC. Reverting changes.
Training on augumented user 356 16/50 current_auc = 0.4642857142857143
User 356 AUC after training: 0.4642857142857143
User 356 does not improve AUC. Reverting changes.
Training on augumented user 138462 17/50 current_auc = 0.4642857142857143
User 138462 AUC after training: 0.4642857142857143
User 138462 does not improve AUC. Reverting changes.
Training on augumented user 109413 18/50 current_auc = 0.4642857142857143
User 109413 AUC after training: 0.4642857142857143
User 109413 does not improve AUC. Reverting changes.
Training on augumented user 124884 19/50 current_auc = 0.4642857142857143
User 124884 AUC after training: 0.4642857142857143
User 124884 does not improve AUC. Reverting changes.
Training on augumented user 97274 20/50 current_auc = 0.4642857142857143
User 97274 AUC after training: 0.4642857142857143
User 97274 does not improve AUC. Reverting changes.
Training on augumented user 15943 21/50 current_auc = 0.4642857142857143
User 15943 AUC after training: 0.4642857142857143
User 15943 does not improve AUC. Reverting changes.
Training on augumented user 2965 22/50 current_auc = 0.4642857142857143
User 2965 AUC after training: 0.4642857142857143
User 2965 does not improve AUC. Reverting changes.
Training on augumented user 68097 23/50 current_auc = 0.4642857142857143
User 68097 AUC after training: 0.4642857142857143
User 68097 does not improve AUC. Reverting changes.
Training on augumented user 99907 24/50 current_auc = 0.4642857142857143
User 99907 AUC after training: 0.4642857142857143
User 99907 does not improve AUC. Reverting changes.
Training on augumented user 3645 25/50 current_auc = 0.4642857142857143
User 3645 AUC after training: 0.4523809523809524
User 3645 does not improve AUC. Reverting changes.
Training on augumented user 135995 26/50 current_auc = 0.4642857142857143
User 135995 AUC after training: 0.4642857142857143
User 135995 does not improve AUC. Reverting changes.
Training on augumented user 24736 27/50 current_auc = 0.4642857142857143
User 24736 AUC after training: 0.4642857142857143
User 24736 does not improve AUC. Reverting changes.
Training on augumented user 106463 28/50 current_auc = 0.4642857142857143
User 106463 AUC after training: 0.4523809523809524
User 106463 does not improve AUC. Reverting changes.
Training on augumented user 80556 29/50 current_auc = 0.4642857142857143
User 80556 AUC after training: 0.4642857142857143
User 80556 does not improve AUC. Reverting changes.
Training on augumented user 122908 30/50 current_auc = 0.4642857142857143
User 122908 AUC after training: 0.4523809523809524
User 122908 does not improve AUC. Reverting changes.
Training on augumented user 115722 31/50 current_auc = 0.4642857142857143
User 115722 AUC after training: 0.4642857142857143
User 115722 does not improve AUC. Reverting changes.
Training on augumented user 113694 32/50 current_auc = 0.4642857142857143
User 113694 AUC after training: 0.4642857142857143
User 113694 does not improve AUC. Reverting changes.
Training on augumented user 38434 33/50 current_auc = 0.4642857142857143
User 38434 AUC after training: 0.4642857142857143
User 38434 does not improve AUC. Reverting changes.
Training on augumented user 31871 34/50 current_auc = 0.4642857142857143
User 31871 AUC after training: 0.4523809523809524
User 31871 does not improve AUC. Reverting changes.
Training on augumented user 18733 35/50 current_auc = 0.4642857142857143
User 18733 AUC after training: 0.4642857142857143
User 18733 does not improve AUC. Reverting changes.
Training on augumented user 100716 36/50 current_auc = 0.4642857142857143
User 100716 AUC after training: 0.4642857142857143
User 100716 does not improve AUC. Reverting changes.
Training on augumented user 113671 37/50 current_auc = 0.4642857142857143
User 113671 AUC after training: 0.4642857142857143
User 113671 does not improve AUC. Reverting changes.
Training on augumented user 58805 38/50 current_auc = 0.4642857142857143
User 58805 AUC after training: 0.4642857142857143
User 58805 does not improve AUC. Reverting changes.
Training on augumented user 70290 39/50 current_auc = 0.4642857142857143
User 70290 AUC after training: 0.4642857142857143
User 70290 does not improve AUC. Reverting changes.
Training on augumented user 8464 40/50 current_auc = 0.4642857142857143
User 8464 AUC after training: 0.4642857142857143
User 8464 does not improve AUC. Reverting changes.
Training on augumented user 110373 41/50 current_auc = 0.4642857142857143
User 110373 AUC after training: 0.4642857142857143
User 110373 does not improve AUC. Reverting changes.
Training on augumented user 108661 42/50 current_auc = 0.4642857142857143
User 108661 AUC after training: 0.4642857142857143
User 108661 does not improve AUC. Reverting changes.
Training on augumented user 137521 43/50 current_auc = 0.4642857142857143
User 137521 AUC after training: 0.4642857142857143
User 137521 does not improve AUC. Reverting changes.
Training on augumented user 69676 44/50 current_auc = 0.4642857142857143
User 69676 AUC after training: 0.4642857142857143
User 69676 does not improve AUC. Reverting changes.
Training on augumented user 101242 45/50 current_auc = 0.4642857142857143
User 101242 AUC after training: 0.4642857142857143
User 101242 does not improve AUC. Reverting changes.
Training on augumented user 40829 46/50 current_auc = 0.4642857142857143
User 40829 AUC after training: 0.4642857142857143
User 40829 does not improve AUC. Reverting changes.
Training on augumented user 127808 47/50 current_auc = 0.4642857142857143
User 127808 AUC after training: 0.4642857142857143
User 127808 does not improve AUC. Reverting changes.
Training on augumented user 94509 48/50 current_auc = 0.4642857142857143
User 94509 AUC after training: 0.4642857142857143
User 94509 does not improve AUC. Reverting changes.
Training on augumented user 105382 49/50 current_auc = 0.4642857142857143
User 105382 AUC after training: 0.4642857142857143
User 105382 does not improve AUC. Reverting changes.
[2024-12-02 18:00:09.956942] start test user 70683 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:10.407935] start test user 70683 41/568 recall augumented users by random, augumented_users = [118379, 108234, 34357, 70530, 43385, 53425, 127412, 110036, 135888, 95784, 117417, 48908, 119621, 72920, 65632, 66853, 36888, 81744, 112340, 129230, 122984, 24895, 36784, 122703, 6293, 64093, 25036, 64328, 123631, 114177, 60153, 94672, 133065, 29366, 31273, 34069, 19705, 82864, 86575, 42783, 85807, 126781, 106081, 123961, 30715, 3700, 66329, 56023, 134677, 25887]
[2024-12-02 18:00:10.422236] user = 70683 Cloud 41/568
[2024-12-02 18:00:10.433224] user = 70683 Local 41/568
[2024-12-02 18:00:10.507020] user = 70683 Local+ 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:12.822140] user = 70683 MPDA- 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6370370370370371
Training on augumented user 118379 0/50 current_auc = 0.6370370370370371
User 118379 AUC after training: 0.6407407407407407
User 118379 improves AUC. Keeping the model.
Training on augumented user 108234 1/50 current_auc = 0.6407407407407407
User 108234 AUC after training: 0.6407407407407407
User 108234 does not improve AUC. Reverting changes.
Training on augumented user 34357 2/50 current_auc = 0.6407407407407407
User 34357 AUC after training: 0.6407407407407407
User 34357 does not improve AUC. Reverting changes.
Training on augumented user 70530 3/50 current_auc = 0.6407407407407407
User 70530 AUC after training: 0.6407407407407407
User 70530 does not improve AUC. Reverting changes.
Training on augumented user 43385 4/50 current_auc = 0.6407407407407407
User 43385 AUC after training: 0.6407407407407407
User 43385 does not improve AUC. Reverting changes.
Training on augumented user 53425 5/50 current_auc = 0.6407407407407407
User 53425 AUC after training: 0.6407407407407407
User 53425 does not improve AUC. Reverting changes.
Training on augumented user 127412 6/50 current_auc = 0.6407407407407407
User 127412 AUC after training: 0.6407407407407407
User 127412 does not improve AUC. Reverting changes.
Training on augumented user 110036 7/50 current_auc = 0.6407407407407407
User 110036 AUC after training: 0.6407407407407407
User 110036 does not improve AUC. Reverting changes.
Training on augumented user 135888 8/50 current_auc = 0.6407407407407407
User 135888 AUC after training: 0.6370370370370371
User 135888 does not improve AUC. Reverting changes.
Training on augumented user 95784 9/50 current_auc = 0.6407407407407407
User 95784 AUC after training: 0.6333333333333333
User 95784 does not improve AUC. Reverting changes.
Training on augumented user 117417 10/50 current_auc = 0.6407407407407407
User 117417 AUC after training: 0.6333333333333333
User 117417 does not improve AUC. Reverting changes.
Training on augumented user 48908 11/50 current_auc = 0.6407407407407407
User 48908 AUC after training: 0.6407407407407407
User 48908 does not improve AUC. Reverting changes.
Training on augumented user 119621 12/50 current_auc = 0.6407407407407407
User 119621 AUC after training: 0.6407407407407407
User 119621 does not improve AUC. Reverting changes.
Training on augumented user 72920 13/50 current_auc = 0.6407407407407407
User 72920 AUC after training: 0.6407407407407407
User 72920 does not improve AUC. Reverting changes.
Training on augumented user 65632 14/50 current_auc = 0.6407407407407407
User 65632 AUC after training: 0.6407407407407407
User 65632 does not improve AUC. Reverting changes.
Training on augumented user 66853 15/50 current_auc = 0.6407407407407407
User 66853 AUC after training: 0.6407407407407407
User 66853 does not improve AUC. Reverting changes.
Training on augumented user 36888 16/50 current_auc = 0.6407407407407407
User 36888 AUC after training: 0.6407407407407407
User 36888 does not improve AUC. Reverting changes.
Training on augumented user 81744 17/50 current_auc = 0.6407407407407407
User 81744 AUC after training: 0.6407407407407407
User 81744 does not improve AUC. Reverting changes.
Training on augumented user 112340 18/50 current_auc = 0.6407407407407407
User 112340 AUC after training: 0.6407407407407407
User 112340 does not improve AUC. Reverting changes.
Training on augumented user 129230 19/50 current_auc = 0.6407407407407407
User 129230 AUC after training: 0.6407407407407407
User 129230 does not improve AUC. Reverting changes.
Training on augumented user 122984 20/50 current_auc = 0.6407407407407407
User 122984 AUC after training: 0.6370370370370371
User 122984 does not improve AUC. Reverting changes.
Training on augumented user 24895 21/50 current_auc = 0.6407407407407407
User 24895 AUC after training: 0.6407407407407407
User 24895 does not improve AUC. Reverting changes.
Training on augumented user 36784 22/50 current_auc = 0.6407407407407407
User 36784 AUC after training: 0.6333333333333333
User 36784 does not improve AUC. Reverting changes.
Training on augumented user 122703 23/50 current_auc = 0.6407407407407407
User 122703 AUC after training: 0.6407407407407407
User 122703 does not improve AUC. Reverting changes.
Training on augumented user 6293 24/50 current_auc = 0.6407407407407407
User 6293 AUC after training: 0.6407407407407407
User 6293 does not improve AUC. Reverting changes.
Training on augumented user 64093 25/50 current_auc = 0.6407407407407407
User 64093 AUC after training: 0.6407407407407407
User 64093 does not improve AUC. Reverting changes.
Training on augumented user 25036 26/50 current_auc = 0.6407407407407407
User 25036 AUC after training: 0.6407407407407407
User 25036 does not improve AUC. Reverting changes.
Training on augumented user 64328 27/50 current_auc = 0.6407407407407407
User 64328 AUC after training: 0.6407407407407407
User 64328 does not improve AUC. Reverting changes.
Training on augumented user 123631 28/50 current_auc = 0.6407407407407407
User 123631 AUC after training: 0.6407407407407407
User 123631 does not improve AUC. Reverting changes.
Training on augumented user 114177 29/50 current_auc = 0.6407407407407407
User 114177 AUC after training: 0.6444444444444444
User 114177 improves AUC. Keeping the model.
Training on augumented user 60153 30/50 current_auc = 0.6444444444444444
User 60153 AUC after training: 0.6444444444444444
User 60153 does not improve AUC. Reverting changes.
Training on augumented user 94672 31/50 current_auc = 0.6444444444444444
User 94672 AUC after training: 0.6444444444444444
User 94672 does not improve AUC. Reverting changes.
Training on augumented user 133065 32/50 current_auc = 0.6444444444444444
User 133065 AUC after training: 0.6444444444444444
User 133065 does not improve AUC. Reverting changes.
Training on augumented user 29366 33/50 current_auc = 0.6444444444444444
User 29366 AUC after training: 0.6444444444444444
User 29366 does not improve AUC. Reverting changes.
Training on augumented user 31273 34/50 current_auc = 0.6444444444444444
User 31273 AUC after training: 0.6407407407407407
User 31273 does not improve AUC. Reverting changes.
Training on augumented user 34069 35/50 current_auc = 0.6444444444444444
User 34069 AUC after training: 0.6444444444444444
User 34069 does not improve AUC. Reverting changes.
Training on augumented user 19705 36/50 current_auc = 0.6444444444444444
User 19705 AUC after training: 0.6444444444444444
User 19705 does not improve AUC. Reverting changes.
Training on augumented user 82864 37/50 current_auc = 0.6444444444444444
User 82864 AUC after training: 0.6444444444444444
User 82864 does not improve AUC. Reverting changes.
Training on augumented user 86575 38/50 current_auc = 0.6444444444444444
User 86575 AUC after training: 0.6444444444444444
User 86575 does not improve AUC. Reverting changes.
Training on augumented user 42783 39/50 current_auc = 0.6444444444444444
User 42783 AUC after training: 0.6444444444444444
User 42783 does not improve AUC. Reverting changes.
Training on augumented user 85807 40/50 current_auc = 0.6444444444444444
User 85807 AUC after training: 0.6444444444444444
User 85807 does not improve AUC. Reverting changes.
Training on augumented user 126781 41/50 current_auc = 0.6444444444444444
User 126781 AUC after training: 0.6444444444444444
User 126781 does not improve AUC. Reverting changes.
Training on augumented user 106081 42/50 current_auc = 0.6444444444444444
User 106081 AUC after training: 0.6296296296296295
User 106081 does not improve AUC. Reverting changes.
Training on augumented user 123961 43/50 current_auc = 0.6444444444444444
User 123961 AUC after training: 0.6444444444444444
User 123961 does not improve AUC. Reverting changes.
Training on augumented user 30715 44/50 current_auc = 0.6444444444444444
User 30715 AUC after training: 0.6444444444444444
User 30715 does not improve AUC. Reverting changes.
Training on augumented user 3700 45/50 current_auc = 0.6444444444444444
User 3700 AUC after training: 0.6407407407407407
User 3700 does not improve AUC. Reverting changes.
Training on augumented user 66329 46/50 current_auc = 0.6444444444444444
User 66329 AUC after training: 0.6444444444444444
User 66329 does not improve AUC. Reverting changes.
Training on augumented user 56023 47/50 current_auc = 0.6444444444444444
User 56023 AUC after training: 0.6444444444444444
User 56023 does not improve AUC. Reverting changes.
Training on augumented user 134677 48/50 current_auc = 0.6444444444444444
User 134677 AUC after training: 0.6444444444444444
User 134677 does not improve AUC. Reverting changes.
Training on augumented user 25887 49/50 current_auc = 0.6444444444444444
User 25887 AUC after training: 0.6444444444444444
User 25887 does not improve AUC. Reverting changes.
[2024-12-02 18:00:37.893631] start test user 70704 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:38.568375] start test user 70704 42/568 recall augumented users by random, augumented_users = [89785, 56204, 45372, 83108, 129115, 26471, 10792, 25843, 19891, 127638, 16218, 108150, 15842, 7142, 95346, 130661, 105457, 5966, 128252, 134478, 3686, 114857, 32536, 62402, 128392, 75794, 80620, 2727, 136768, 17711, 89405, 79828, 121224, 77650, 100161, 137936, 132243, 126276, 53718, 106404, 286, 128526, 33451, 14682, 38402, 123450, 5836, 43388, 119277, 73795]
[2024-12-02 18:00:38.583226] user = 70704 Cloud 42/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:00:38.589363] user = 70704 Local 42/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:00:38.749563] user = 70704 Local+ 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:00:40.907335] user = 70704 MPDA- 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 89785 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89785 AUC after training: 0.5
User 89785 does not improve AUC. Reverting changes.
Training on augumented user 56204 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56204 AUC after training: 0.5
User 56204 does not improve AUC. Reverting changes.
Training on augumented user 45372 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45372 AUC after training: 0.5
User 45372 does not improve AUC. Reverting changes.
Training on augumented user 83108 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83108 AUC after training: 0.5
User 83108 does not improve AUC. Reverting changes.
Training on augumented user 129115 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129115 AUC after training: 0.5
User 129115 does not improve AUC. Reverting changes.
Training on augumented user 26471 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26471 AUC after training: 0.5
User 26471 does not improve AUC. Reverting changes.
Training on augumented user 10792 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10792 AUC after training: 0.5
User 10792 does not improve AUC. Reverting changes.
Training on augumented user 25843 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25843 AUC after training: 0.5
User 25843 does not improve AUC. Reverting changes.
Training on augumented user 19891 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19891 AUC after training: 0.5
User 19891 does not improve AUC. Reverting changes.
Training on augumented user 127638 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127638 AUC after training: 0.5
User 127638 does not improve AUC. Reverting changes.
Training on augumented user 16218 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16218 AUC after training: 0.5
User 16218 does not improve AUC. Reverting changes.
Training on augumented user 108150 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108150 AUC after training: 0.5
User 108150 does not improve AUC. Reverting changes.
Training on augumented user 15842 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15842 AUC after training: 0.5
User 15842 does not improve AUC. Reverting changes.
Training on augumented user 7142 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7142 AUC after training: 0.5
User 7142 does not improve AUC. Reverting changes.
Training on augumented user 95346 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95346 AUC after training: 0.5
User 95346 does not improve AUC. Reverting changes.
Training on augumented user 130661 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130661 AUC after training: 0.5
User 130661 does not improve AUC. Reverting changes.
Training on augumented user 105457 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105457 AUC after training: 0.5
User 105457 does not improve AUC. Reverting changes.
Training on augumented user 5966 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5966 AUC after training: 0.5
User 5966 does not improve AUC. Reverting changes.
Training on augumented user 128252 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128252 AUC after training: 0.5
User 128252 does not improve AUC. Reverting changes.
Training on augumented user 134478 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134478 AUC after training: 0.5
User 134478 does not improve AUC. Reverting changes.
Training on augumented user 3686 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3686 AUC after training: 0.5
User 3686 does not improve AUC. Reverting changes.
Training on augumented user 114857 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114857 AUC after training: 0.5
User 114857 does not improve AUC. Reverting changes.
Training on augumented user 32536 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32536 AUC after training: 0.5
User 32536 does not improve AUC. Reverting changes.
Training on augumented user 62402 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62402 AUC after training: 0.5
User 62402 does not improve AUC. Reverting changes.
Training on augumented user 128392 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128392 AUC after training: 0.5
User 128392 does not improve AUC. Reverting changes.
Training on augumented user 75794 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75794 AUC after training: 0.5
User 75794 does not improve AUC. Reverting changes.
Training on augumented user 80620 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80620 AUC after training: 0.5
User 80620 does not improve AUC. Reverting changes.
Training on augumented user 2727 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2727 AUC after training: 0.5
User 2727 does not improve AUC. Reverting changes.
Training on augumented user 136768 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136768 AUC after training: 0.5
User 136768 does not improve AUC. Reverting changes.
Training on augumented user 17711 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17711 AUC after training: 0.5
User 17711 does not improve AUC. Reverting changes.
Training on augumented user 89405 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89405 AUC after training: 0.5
User 89405 does not improve AUC. Reverting changes.
Training on augumented user 79828 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79828 AUC after training: 0.5
User 79828 does not improve AUC. Reverting changes.
Training on augumented user 121224 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121224 AUC after training: 0.5
User 121224 does not improve AUC. Reverting changes.
Training on augumented user 77650 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77650 AUC after training: 0.5
User 77650 does not improve AUC. Reverting changes.
Training on augumented user 100161 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100161 AUC after training: 0.5
User 100161 does not improve AUC. Reverting changes.
Training on augumented user 137936 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137936 AUC after training: 0.5
User 137936 does not improve AUC. Reverting changes.
Training on augumented user 132243 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132243 AUC after training: 0.5
User 132243 does not improve AUC. Reverting changes.
Training on augumented user 126276 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126276 AUC after training: 0.5
User 126276 does not improve AUC. Reverting changes.
Training on augumented user 53718 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53718 AUC after training: 0.5
User 53718 does not improve AUC. Reverting changes.
Training on augumented user 106404 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106404 AUC after training: 0.5
User 106404 does not improve AUC. Reverting changes.
Training on augumented user 286 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 286 AUC after training: 0.5
User 286 does not improve AUC. Reverting changes.
Training on augumented user 128526 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128526 AUC after training: 0.5
User 128526 does not improve AUC. Reverting changes.
Training on augumented user 33451 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33451 AUC after training: 0.5
User 33451 does not improve AUC. Reverting changes.
Training on augumented user 14682 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14682 AUC after training: 0.5
User 14682 does not improve AUC. Reverting changes.
Training on augumented user 38402 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38402 AUC after training: 0.5
User 38402 does not improve AUC. Reverting changes.
Training on augumented user 123450 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123450 AUC after training: 0.5
User 123450 does not improve AUC. Reverting changes.
Training on augumented user 5836 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5836 AUC after training: 0.5
User 5836 does not improve AUC. Reverting changes.
Training on augumented user 43388 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43388 AUC after training: 0.5
User 43388 does not improve AUC. Reverting changes.
Training on augumented user 119277 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119277 AUC after training: 0.5
User 119277 does not improve AUC. Reverting changes.
Training on augumented user 73795 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73795 AUC after training: 0.5
User 73795 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:01:04.921519] start test user 70706 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:05.341574] start test user 70706 43/568 recall augumented users by random, augumented_users = [24222, 105992, 28319, 12397, 128361, 84951, 27877, 138151, 120175, 52520, 90049, 132230, 3782, 52819, 85982, 86833, 566, 111954, 94166, 75862, 99141, 31743, 2841, 94108, 96761, 84121, 111678, 70277, 83633, 14602, 44611, 135174, 136260, 53452, 61458, 98093, 81928, 58211, 90137, 17569, 13187, 34638, 31474, 124061, 93670, 58328, 110974, 118543, 14243, 4689]
[2024-12-02 18:01:05.356000] user = 70706 Cloud 43/568
[2024-12-02 18:01:05.386307] user = 70706 Local 43/568
[2024-12-02 18:01:05.426434] user = 70706 Local+ 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:07.221193] user = 70706 MPDA- 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5342702702702703
Training on augumented user 24222 0/50 current_auc = 0.5342702702702703
User 24222 AUC after training: 0.5347027027027027
User 24222 improves AUC. Keeping the model.
Training on augumented user 105992 1/50 current_auc = 0.5347027027027027
User 105992 AUC after training: 0.5338378378378379
User 105992 does not improve AUC. Reverting changes.
Training on augumented user 28319 2/50 current_auc = 0.5347027027027027
User 28319 AUC after training: 0.5347027027027027
User 28319 does not improve AUC. Reverting changes.
Training on augumented user 12397 3/50 current_auc = 0.5347027027027027
User 12397 AUC after training: 0.5343783783783784
User 12397 does not improve AUC. Reverting changes.
Training on augumented user 128361 4/50 current_auc = 0.5347027027027027
User 128361 AUC after training: 0.5340540540540542
User 128361 does not improve AUC. Reverting changes.
Training on augumented user 84951 5/50 current_auc = 0.5347027027027027
User 84951 AUC after training: 0.5343783783783784
User 84951 does not improve AUC. Reverting changes.
Training on augumented user 27877 6/50 current_auc = 0.5347027027027027
User 27877 AUC after training: 0.5337297297297297
User 27877 does not improve AUC. Reverting changes.
Training on augumented user 138151 7/50 current_auc = 0.5347027027027027
User 138151 AUC after training: 0.533081081081081
User 138151 does not improve AUC. Reverting changes.
Training on augumented user 120175 8/50 current_auc = 0.5347027027027027
User 120175 AUC after training: 0.5342702702702702
User 120175 does not improve AUC. Reverting changes.
Training on augumented user 52520 9/50 current_auc = 0.5347027027027027
User 52520 AUC after training: 0.5330810810810811
User 52520 does not improve AUC. Reverting changes.
Training on augumented user 90049 10/50 current_auc = 0.5347027027027027
User 90049 AUC after training: 0.5341621621621622
User 90049 does not improve AUC. Reverting changes.
Training on augumented user 132230 11/50 current_auc = 0.5347027027027027
User 132230 AUC after training: 0.5348108108108108
User 132230 improves AUC. Keeping the model.
Training on augumented user 3782 12/50 current_auc = 0.5348108108108108
User 3782 AUC after training: 0.536
User 3782 improves AUC. Keeping the model.
Training on augumented user 52819 13/50 current_auc = 0.536
User 52819 AUC after training: 0.5352432432432432
User 52819 does not improve AUC. Reverting changes.
Training on augumented user 85982 14/50 current_auc = 0.536
User 85982 AUC after training: 0.536
User 85982 does not improve AUC. Reverting changes.
Training on augumented user 86833 15/50 current_auc = 0.536
User 86833 AUC after training: 0.5359999999999999
User 86833 does not improve AUC. Reverting changes.
Training on augumented user 566 16/50 current_auc = 0.536
User 566 AUC after training: 0.5367567567567568
User 566 improves AUC. Keeping the model.
Training on augumented user 111954 17/50 current_auc = 0.5367567567567568
User 111954 AUC after training: 0.535027027027027
User 111954 does not improve AUC. Reverting changes.
Training on augumented user 94166 18/50 current_auc = 0.5367567567567568
User 94166 AUC after training: 0.5384324324324324
User 94166 improves AUC. Keeping the model.
Training on augumented user 75862 19/50 current_auc = 0.5384324324324324
User 75862 AUC after training: 0.5376216216216216
User 75862 does not improve AUC. Reverting changes.
Training on augumented user 99141 20/50 current_auc = 0.5384324324324324
User 99141 AUC after training: 0.5368108108108107
User 99141 does not improve AUC. Reverting changes.
Training on augumented user 31743 21/50 current_auc = 0.5384324324324324
User 31743 AUC after training: 0.5376756756756758
User 31743 does not improve AUC. Reverting changes.
Training on augumented user 2841 22/50 current_auc = 0.5384324324324324
User 2841 AUC after training: 0.5379459459459459
User 2841 does not improve AUC. Reverting changes.
Training on augumented user 94108 23/50 current_auc = 0.5384324324324324
User 94108 AUC after training: 0.536918918918919
User 94108 does not improve AUC. Reverting changes.
Training on augumented user 96761 24/50 current_auc = 0.5384324324324324
User 96761 AUC after training: 0.538
User 96761 does not improve AUC. Reverting changes.
Training on augumented user 84121 25/50 current_auc = 0.5384324324324324
User 84121 AUC after training: 0.5367567567567567
User 84121 does not improve AUC. Reverting changes.
Training on augumented user 111678 26/50 current_auc = 0.5384324324324324
User 111678 AUC after training: 0.5389729729729729
User 111678 improves AUC. Keeping the model.
Training on augumented user 70277 27/50 current_auc = 0.5389729729729729
User 70277 AUC after training: 0.5376756756756756
User 70277 does not improve AUC. Reverting changes.
Training on augumented user 83633 28/50 current_auc = 0.5389729729729729
User 83633 AUC after training: 0.5367027027027026
User 83633 does not improve AUC. Reverting changes.
Training on augumented user 14602 29/50 current_auc = 0.5389729729729729
User 14602 AUC after training: 0.5390810810810811
User 14602 improves AUC. Keeping the model.
Training on augumented user 44611 30/50 current_auc = 0.5390810810810811
User 44611 AUC after training: 0.5394594594594595
User 44611 improves AUC. Keeping the model.
Training on augumented user 135174 31/50 current_auc = 0.5394594594594595
User 135174 AUC after training: 0.5382702702702703
User 135174 does not improve AUC. Reverting changes.
Training on augumented user 136260 32/50 current_auc = 0.5394594594594595
User 136260 AUC after training: 0.539027027027027
User 136260 does not improve AUC. Reverting changes.
Training on augumented user 53452 33/50 current_auc = 0.5394594594594595
User 53452 AUC after training: 0.5383243243243243
User 53452 does not improve AUC. Reverting changes.
Training on augumented user 61458 34/50 current_auc = 0.5394594594594595
User 61458 AUC after training: 0.54
User 61458 improves AUC. Keeping the model.
Training on augumented user 98093 35/50 current_auc = 0.54
User 98093 AUC after training: 0.541027027027027
User 98093 improves AUC. Keeping the model.
Training on augumented user 81928 36/50 current_auc = 0.541027027027027
User 81928 AUC after training: 0.541027027027027
User 81928 does not improve AUC. Reverting changes.
Training on augumented user 58211 37/50 current_auc = 0.541027027027027
User 58211 AUC after training: 0.5388648648648648
User 58211 does not improve AUC. Reverting changes.
Training on augumented user 90137 38/50 current_auc = 0.541027027027027
User 90137 AUC after training: 0.5406486486486486
User 90137 does not improve AUC. Reverting changes.
Training on augumented user 17569 39/50 current_auc = 0.541027027027027
User 17569 AUC after training: 0.5356756756756756
User 17569 does not improve AUC. Reverting changes.
Training on augumented user 13187 40/50 current_auc = 0.541027027027027
User 13187 AUC after training: 0.5398378378378379
User 13187 does not improve AUC. Reverting changes.
Training on augumented user 34638 41/50 current_auc = 0.541027027027027
User 34638 AUC after training: 0.5399459459459459
User 34638 does not improve AUC. Reverting changes.
Training on augumented user 31474 42/50 current_auc = 0.541027027027027
User 31474 AUC after training: 0.5365405405405405
User 31474 does not improve AUC. Reverting changes.
Training on augumented user 124061 43/50 current_auc = 0.541027027027027
User 124061 AUC after training: 0.5402702702702704
User 124061 does not improve AUC. Reverting changes.
Training on augumented user 93670 44/50 current_auc = 0.541027027027027
User 93670 AUC after training: 0.5385405405405405
User 93670 does not improve AUC. Reverting changes.
Training on augumented user 58328 45/50 current_auc = 0.541027027027027
User 58328 AUC after training: 0.54
User 58328 does not improve AUC. Reverting changes.
Training on augumented user 110974 46/50 current_auc = 0.541027027027027
User 110974 AUC after training: 0.5403783783783784
User 110974 does not improve AUC. Reverting changes.
Training on augumented user 118543 47/50 current_auc = 0.541027027027027
User 118543 AUC after training: 0.5392972972972973
User 118543 does not improve AUC. Reverting changes.
Training on augumented user 14243 48/50 current_auc = 0.541027027027027
User 14243 AUC after training: 0.540054054054054
User 14243 does not improve AUC. Reverting changes.
Training on augumented user 4689 49/50 current_auc = 0.541027027027027
User 4689 AUC after training: 0.5388108108108107
User 4689 does not improve AUC. Reverting changes.
[2024-12-02 18:01:37.150730] start test user 70721 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:37.573100] start test user 70721 44/568 recall augumented users by random, augumented_users = [55738, 73515, 93498, 41125, 123905, 1328, 33145, 23617, 66031, 38265, 85394, 1865, 67492, 70007, 113604, 13267, 110306, 116215, 77093, 105639, 96237, 44021, 36114, 22876, 85497, 56172, 36704, 88963, 28469, 113290, 48146, 2840, 32872, 65769, 32763, 76711, 12629, 86916, 41770, 113113, 41467, 126214, 11379, 7670, 50059, 107734, 38401, 30881, 121328, 113836]
[2024-12-02 18:01:37.589136] user = 70721 Cloud 44/568
[2024-12-02 18:01:37.598970] user = 70721 Local 44/568
[2024-12-02 18:01:37.707316] user = 70721 Local+ 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:40.527041] user = 70721 MPDA- 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5625
Training on augumented user 55738 0/50 current_auc = 0.5625
User 55738 AUC after training: 0.5625
User 55738 does not improve AUC. Reverting changes.
Training on augumented user 73515 1/50 current_auc = 0.5625
User 73515 AUC after training: 0.5625
User 73515 does not improve AUC. Reverting changes.
Training on augumented user 93498 2/50 current_auc = 0.5625
User 93498 AUC after training: 0.5625
User 93498 does not improve AUC. Reverting changes.
Training on augumented user 41125 3/50 current_auc = 0.5625
User 41125 AUC after training: 0.5625
User 41125 does not improve AUC. Reverting changes.
Training on augumented user 123905 4/50 current_auc = 0.5625
User 123905 AUC after training: 0.5625
User 123905 does not improve AUC. Reverting changes.
Training on augumented user 1328 5/50 current_auc = 0.5625
User 1328 AUC after training: 0.5520833333333333
User 1328 does not improve AUC. Reverting changes.
Training on augumented user 33145 6/50 current_auc = 0.5625
User 33145 AUC after training: 0.5625
User 33145 does not improve AUC. Reverting changes.
Training on augumented user 23617 7/50 current_auc = 0.5625
User 23617 AUC after training: 0.5520833333333333
User 23617 does not improve AUC. Reverting changes.
Training on augumented user 66031 8/50 current_auc = 0.5625
User 66031 AUC after training: 0.5520833333333333
User 66031 does not improve AUC. Reverting changes.
Training on augumented user 38265 9/50 current_auc = 0.5625
User 38265 AUC after training: 0.5520833333333333
User 38265 does not improve AUC. Reverting changes.
Training on augumented user 85394 10/50 current_auc = 0.5625
User 85394 AUC after training: 0.5625
User 85394 does not improve AUC. Reverting changes.
Training on augumented user 1865 11/50 current_auc = 0.5625
User 1865 AUC after training: 0.5625
User 1865 does not improve AUC. Reverting changes.
Training on augumented user 67492 12/50 current_auc = 0.5625
User 67492 AUC after training: 0.5729166666666666
User 67492 improves AUC. Keeping the model.
Training on augumented user 70007 13/50 current_auc = 0.5729166666666666
User 70007 AUC after training: 0.5833333333333333
User 70007 improves AUC. Keeping the model.
Training on augumented user 113604 14/50 current_auc = 0.5833333333333333
User 113604 AUC after training: 0.5729166666666667
User 113604 does not improve AUC. Reverting changes.
Training on augumented user 13267 15/50 current_auc = 0.5833333333333333
User 13267 AUC after training: 0.5729166666666666
User 13267 does not improve AUC. Reverting changes.
Training on augumented user 110306 16/50 current_auc = 0.5833333333333333
User 110306 AUC after training: 0.5833333333333333
User 110306 does not improve AUC. Reverting changes.
Training on augumented user 116215 17/50 current_auc = 0.5833333333333333
User 116215 AUC after training: 0.5833333333333333
User 116215 does not improve AUC. Reverting changes.
Training on augumented user 77093 18/50 current_auc = 0.5833333333333333
User 77093 AUC after training: 0.5729166666666666
User 77093 does not improve AUC. Reverting changes.
Training on augumented user 105639 19/50 current_auc = 0.5833333333333333
User 105639 AUC after training: 0.5729166666666666
User 105639 does not improve AUC. Reverting changes.
Training on augumented user 96237 20/50 current_auc = 0.5833333333333333
User 96237 AUC after training: 0.5833333333333333
User 96237 does not improve AUC. Reverting changes.
Training on augumented user 44021 21/50 current_auc = 0.5833333333333333
User 44021 AUC after training: 0.5833333333333333
User 44021 does not improve AUC. Reverting changes.
Training on augumented user 36114 22/50 current_auc = 0.5833333333333333
User 36114 AUC after training: 0.5833333333333333
User 36114 does not improve AUC. Reverting changes.
Training on augumented user 22876 23/50 current_auc = 0.5833333333333333
User 22876 AUC after training: 0.5729166666666666
User 22876 does not improve AUC. Reverting changes.
Training on augumented user 85497 24/50 current_auc = 0.5833333333333333
User 85497 AUC after training: 0.5833333333333333
User 85497 does not improve AUC. Reverting changes.
Training on augumented user 56172 25/50 current_auc = 0.5833333333333333
User 56172 AUC after training: 0.5625
User 56172 does not improve AUC. Reverting changes.
Training on augumented user 36704 26/50 current_auc = 0.5833333333333333
User 36704 AUC after training: 0.5833333333333333
User 36704 does not improve AUC. Reverting changes.
Training on augumented user 88963 27/50 current_auc = 0.5833333333333333
User 88963 AUC after training: 0.5729166666666666
User 88963 does not improve AUC. Reverting changes.
Training on augumented user 28469 28/50 current_auc = 0.5833333333333333
User 28469 AUC after training: 0.5729166666666667
User 28469 does not improve AUC. Reverting changes.
Training on augumented user 113290 29/50 current_auc = 0.5833333333333333
User 113290 AUC after training: 0.5729166666666667
User 113290 does not improve AUC. Reverting changes.
Training on augumented user 48146 30/50 current_auc = 0.5833333333333333
User 48146 AUC after training: 0.5729166666666666
User 48146 does not improve AUC. Reverting changes.
Training on augumented user 2840 31/50 current_auc = 0.5833333333333333
User 2840 AUC after training: 0.5729166666666666
User 2840 does not improve AUC. Reverting changes.
Training on augumented user 32872 32/50 current_auc = 0.5833333333333333
User 32872 AUC after training: 0.5729166666666667
User 32872 does not improve AUC. Reverting changes.
Training on augumented user 65769 33/50 current_auc = 0.5833333333333333
User 65769 AUC after training: 0.5833333333333333
User 65769 does not improve AUC. Reverting changes.
Training on augumented user 32763 34/50 current_auc = 0.5833333333333333
User 32763 AUC after training: 0.5729166666666667
User 32763 does not improve AUC. Reverting changes.
Training on augumented user 76711 35/50 current_auc = 0.5833333333333333
User 76711 AUC after training: 0.5729166666666666
User 76711 does not improve AUC. Reverting changes.
Training on augumented user 12629 36/50 current_auc = 0.5833333333333333
User 12629 AUC after training: 0.5520833333333333
User 12629 does not improve AUC. Reverting changes.
Training on augumented user 86916 37/50 current_auc = 0.5833333333333333
User 86916 AUC after training: 0.5729166666666666
User 86916 does not improve AUC. Reverting changes.
Training on augumented user 41770 38/50 current_auc = 0.5833333333333333
User 41770 AUC after training: 0.5729166666666666
User 41770 does not improve AUC. Reverting changes.
Training on augumented user 113113 39/50 current_auc = 0.5833333333333333
User 113113 AUC after training: 0.5729166666666666
User 113113 does not improve AUC. Reverting changes.
Training on augumented user 41467 40/50 current_auc = 0.5833333333333333
User 41467 AUC after training: 0.5729166666666666
User 41467 does not improve AUC. Reverting changes.
Training on augumented user 126214 41/50 current_auc = 0.5833333333333333
User 126214 AUC after training: 0.5729166666666667
User 126214 does not improve AUC. Reverting changes.
Training on augumented user 11379 42/50 current_auc = 0.5833333333333333
User 11379 AUC after training: 0.5833333333333333
User 11379 does not improve AUC. Reverting changes.
Training on augumented user 7670 43/50 current_auc = 0.5833333333333333
User 7670 AUC after training: 0.5729166666666666
User 7670 does not improve AUC. Reverting changes.
Training on augumented user 50059 44/50 current_auc = 0.5833333333333333
User 50059 AUC after training: 0.5833333333333333
User 50059 does not improve AUC. Reverting changes.
Training on augumented user 107734 45/50 current_auc = 0.5833333333333333
User 107734 AUC after training: 0.5729166666666666
User 107734 does not improve AUC. Reverting changes.
Training on augumented user 38401 46/50 current_auc = 0.5833333333333333
User 38401 AUC after training: 0.5729166666666666
User 38401 does not improve AUC. Reverting changes.
Training on augumented user 30881 47/50 current_auc = 0.5833333333333333
User 30881 AUC after training: 0.5729166666666666
User 30881 does not improve AUC. Reverting changes.
Training on augumented user 121328 48/50 current_auc = 0.5833333333333333
User 121328 AUC after training: 0.5729166666666667
User 121328 does not improve AUC. Reverting changes.
Training on augumented user 113836 49/50 current_auc = 0.5833333333333333
User 113836 AUC after training: 0.5729166666666667
User 113836 does not improve AUC. Reverting changes.
[2024-12-02 18:02:09.457904] start test user 70736 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:10.363946] start test user 70736 45/568 recall augumented users by random, augumented_users = [2632, 65204, 127658, 36243, 136232, 121634, 122603, 5414, 43326, 36942, 101383, 50908, 110060, 69903, 12732, 69681, 54103, 101590, 53807, 39042, 29233, 108729, 97205, 6905, 43419, 125043, 96018, 55157, 35455, 22847, 135020, 130933, 56033, 126717, 119452, 92143, 128672, 66747, 114762, 70485, 15557, 82130, 103398, 92686, 87435, 29179, 74169, 127071, 55013, 116286]
[2024-12-02 18:02:10.397743] user = 70736 Cloud 45/568
[2024-12-02 18:02:10.439159] user = 70736 Local 45/568
[2024-12-02 18:02:10.632959] user = 70736 Local+ 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:12.800540] user = 70736 MPDA- 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5932073544433095
Training on augumented user 2632 0/50 current_auc = 0.5932073544433095
User 2632 AUC after training: 0.5926966292134832
User 2632 does not improve AUC. Reverting changes.
Training on augumented user 65204 1/50 current_auc = 0.5932073544433095
User 65204 AUC after training: 0.5883554647599591
User 65204 does not improve AUC. Reverting changes.
Training on augumented user 127658 2/50 current_auc = 0.5932073544433095
User 127658 AUC after training: 0.5886108273748724
User 127658 does not improve AUC. Reverting changes.
Training on augumented user 36243 3/50 current_auc = 0.5932073544433095
User 36243 AUC after training: 0.5926966292134831
User 36243 does not improve AUC. Reverting changes.
Training on augumented user 136232 4/50 current_auc = 0.5932073544433095
User 136232 AUC after training: 0.5926966292134832
User 136232 does not improve AUC. Reverting changes.
Training on augumented user 121634 5/50 current_auc = 0.5932073544433095
User 121634 AUC after training: 0.5926966292134832
User 121634 does not improve AUC. Reverting changes.
Training on augumented user 122603 6/50 current_auc = 0.5932073544433095
User 122603 AUC after training: 0.5901430030643513
User 122603 does not improve AUC. Reverting changes.
Training on augumented user 5414 7/50 current_auc = 0.5932073544433095
User 5414 AUC after training: 0.5934627170582227
User 5414 improves AUC. Keeping the model.
Training on augumented user 43326 8/50 current_auc = 0.5934627170582227
User 43326 AUC after training: 0.5914198161389173
User 43326 does not improve AUC. Reverting changes.
Training on augumented user 36942 9/50 current_auc = 0.5934627170582227
User 36942 AUC after training: 0.5929519918283963
User 36942 does not improve AUC. Reverting changes.
Training on augumented user 101383 10/50 current_auc = 0.5934627170582227
User 101383 AUC after training: 0.5919305413687436
User 101383 does not improve AUC. Reverting changes.
Training on augumented user 50908 11/50 current_auc = 0.5934627170582227
User 50908 AUC after training: 0.5929519918283963
User 50908 does not improve AUC. Reverting changes.
Training on augumented user 110060 12/50 current_auc = 0.5934627170582227
User 110060 AUC after training: 0.5934627170582227
User 110060 does not improve AUC. Reverting changes.
Training on augumented user 69903 13/50 current_auc = 0.5934627170582227
User 69903 AUC after training: 0.5919305413687436
User 69903 does not improve AUC. Reverting changes.
Training on augumented user 12732 14/50 current_auc = 0.5934627170582227
User 12732 AUC after training: 0.5934627170582227
User 12732 does not improve AUC. Reverting changes.
Training on augumented user 69681 15/50 current_auc = 0.5934627170582227
User 69681 AUC after training: 0.5934627170582227
User 69681 does not improve AUC. Reverting changes.
Training on augumented user 54103 16/50 current_auc = 0.5934627170582227
User 54103 AUC after training: 0.5929519918283963
User 54103 does not improve AUC. Reverting changes.
Training on augumented user 101590 17/50 current_auc = 0.5934627170582227
User 101590 AUC after training: 0.5934627170582227
User 101590 does not improve AUC. Reverting changes.
Training on augumented user 53807 18/50 current_auc = 0.5934627170582227
User 53807 AUC after training: 0.5929519918283963
User 53807 does not improve AUC. Reverting changes.
Training on augumented user 39042 19/50 current_auc = 0.5934627170582227
User 39042 AUC after training: 0.5957609805924412
User 39042 improves AUC. Keeping the model.
Training on augumented user 29233 20/50 current_auc = 0.5957609805924412
User 29233 AUC after training: 0.593718079673136
User 29233 does not improve AUC. Reverting changes.
Training on augumented user 108729 21/50 current_auc = 0.5957609805924412
User 108729 AUC after training: 0.5965270684371808
User 108729 improves AUC. Keeping the model.
Training on augumented user 97205 22/50 current_auc = 0.5965270684371808
User 97205 AUC after training: 0.5947395301327886
User 97205 does not improve AUC. Reverting changes.
Training on augumented user 6905 23/50 current_auc = 0.5965270684371808
User 6905 AUC after training: 0.5957609805924413
User 6905 does not improve AUC. Reverting changes.
Training on augumented user 43419 24/50 current_auc = 0.5965270684371808
User 43419 AUC after training: 0.5939734422880489
User 43419 does not improve AUC. Reverting changes.
Training on augumented user 125043 25/50 current_auc = 0.5965270684371808
User 125043 AUC after training: 0.5962717058222676
User 125043 does not improve AUC. Reverting changes.
Training on augumented user 96018 26/50 current_auc = 0.5965270684371808
User 96018 AUC after training: 0.5944841675178754
User 96018 does not improve AUC. Reverting changes.
Training on augumented user 55157 27/50 current_auc = 0.5965270684371808
User 55157 AUC after training: 0.5965270684371807
User 55157 does not improve AUC. Reverting changes.
Training on augumented user 35455 28/50 current_auc = 0.5965270684371808
User 35455 AUC after training: 0.5955056179775281
User 35455 does not improve AUC. Reverting changes.
Training on augumented user 22847 29/50 current_auc = 0.5965270684371808
User 22847 AUC after training: 0.5955056179775281
User 22847 does not improve AUC. Reverting changes.
Training on augumented user 135020 30/50 current_auc = 0.5965270684371808
User 135020 AUC after training: 0.5962717058222676
User 135020 does not improve AUC. Reverting changes.
Training on augumented user 130933 31/50 current_auc = 0.5965270684371808
User 130933 AUC after training: 0.5949948927477018
User 130933 does not improve AUC. Reverting changes.
Training on augumented user 56033 32/50 current_auc = 0.5965270684371808
User 56033 AUC after training: 0.593973442288049
User 56033 does not improve AUC. Reverting changes.
Training on augumented user 126717 33/50 current_auc = 0.5965270684371808
User 126717 AUC after training: 0.5960163432073544
User 126717 does not improve AUC. Reverting changes.
Training on augumented user 119452 34/50 current_auc = 0.5965270684371808
User 119452 AUC after training: 0.5960163432073544
User 119452 does not improve AUC. Reverting changes.
Training on augumented user 92143 35/50 current_auc = 0.5965270684371808
User 92143 AUC after training: 0.5960163432073544
User 92143 does not improve AUC. Reverting changes.
Training on augumented user 128672 36/50 current_auc = 0.5965270684371808
User 128672 AUC after training: 0.5955056179775281
User 128672 does not improve AUC. Reverting changes.
Training on augumented user 66747 37/50 current_auc = 0.5965270684371808
User 66747 AUC after training: 0.5957609805924413
User 66747 does not improve AUC. Reverting changes.
Training on augumented user 114762 38/50 current_auc = 0.5965270684371808
User 114762 AUC after training: 0.5944841675178754
User 114762 does not improve AUC. Reverting changes.
Training on augumented user 70485 39/50 current_auc = 0.5965270684371808
User 70485 AUC after training: 0.5949948927477018
User 70485 does not improve AUC. Reverting changes.
Training on augumented user 15557 40/50 current_auc = 0.5965270684371808
User 15557 AUC after training: 0.5957609805924412
User 15557 does not improve AUC. Reverting changes.
Training on augumented user 82130 41/50 current_auc = 0.5965270684371808
User 82130 AUC after training: 0.5947395301327886
User 82130 does not improve AUC. Reverting changes.
Training on augumented user 103398 42/50 current_auc = 0.5965270684371808
User 103398 AUC after training: 0.5949948927477018
User 103398 does not improve AUC. Reverting changes.
Training on augumented user 92686 43/50 current_auc = 0.5965270684371808
User 92686 AUC after training: 0.5955056179775281
User 92686 does not improve AUC. Reverting changes.
Training on augumented user 87435 44/50 current_auc = 0.5965270684371808
User 87435 AUC after training: 0.5960163432073544
User 87435 does not improve AUC. Reverting changes.
Training on augumented user 29179 45/50 current_auc = 0.5965270684371808
User 29179 AUC after training: 0.5967824310520939
User 29179 improves AUC. Keeping the model.
Training on augumented user 74169 46/50 current_auc = 0.5967824310520939
User 74169 AUC after training: 0.5967824310520939
User 74169 does not improve AUC. Reverting changes.
Training on augumented user 127071 47/50 current_auc = 0.5967824310520939
User 127071 AUC after training: 0.59244126659857
User 127071 does not improve AUC. Reverting changes.
Training on augumented user 55013 48/50 current_auc = 0.5967824310520939
User 55013 AUC after training: 0.5947395301327885
User 55013 does not improve AUC. Reverting changes.
Training on augumented user 116286 49/50 current_auc = 0.5967824310520939
User 116286 AUC after training: 0.5962717058222675
User 116286 does not improve AUC. Reverting changes.
[2024-12-02 18:02:44.438959] start test user 70770 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:44.844570] start test user 70770 46/568 recall augumented users by random, augumented_users = [137194, 87158, 67799, 17352, 69009, 4850, 102119, 96881, 124802, 93451, 57352, 81551, 122179, 119048, 129995, 52205, 102710, 21059, 22444, 116950, 55922, 54782, 15177, 124415, 79964, 18112, 134285, 48186, 95009, 25061, 81331, 102193, 36929, 108621, 51425, 61221, 56770, 21771, 2221, 18886, 16597, 11880, 49567, 102655, 11320, 76487, 3809, 71860, 60863, 54009]
[2024-12-02 18:02:44.861132] user = 70770 Cloud 46/568
[2024-12-02 18:02:44.886735] user = 70770 Local 46/568
[2024-12-02 18:02:45.147219] user = 70770 Local+ 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:47.850766] user = 70770 MPDA- 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.41818181818181815
Training on augumented user 137194 0/50 current_auc = 0.41818181818181815
User 137194 AUC after training: 0.41630094043887145
User 137194 does not improve AUC. Reverting changes.
Training on augumented user 87158 1/50 current_auc = 0.41818181818181815
User 87158 AUC after training: 0.41818181818181815
User 87158 does not improve AUC. Reverting changes.
Training on augumented user 67799 2/50 current_auc = 0.41818181818181815
User 67799 AUC after training: 0.4175548589341692
User 67799 does not improve AUC. Reverting changes.
Training on augumented user 17352 3/50 current_auc = 0.41818181818181815
User 17352 AUC after training: 0.41755485893416927
User 17352 does not improve AUC. Reverting changes.
Training on augumented user 69009 4/50 current_auc = 0.41818181818181815
User 69009 AUC after training: 0.41818181818181815
User 69009 does not improve AUC. Reverting changes.
Training on augumented user 4850 5/50 current_auc = 0.41818181818181815
User 4850 AUC after training: 0.4175548589341692
User 4850 does not improve AUC. Reverting changes.
Training on augumented user 102119 6/50 current_auc = 0.41818181818181815
User 102119 AUC after training: 0.41818181818181815
User 102119 does not improve AUC. Reverting changes.
Training on augumented user 96881 7/50 current_auc = 0.41818181818181815
User 96881 AUC after training: 0.4163009404388715
User 96881 does not improve AUC. Reverting changes.
Training on augumented user 124802 8/50 current_auc = 0.41818181818181815
User 124802 AUC after training: 0.4169278996865204
User 124802 does not improve AUC. Reverting changes.
Training on augumented user 93451 9/50 current_auc = 0.41818181818181815
User 93451 AUC after training: 0.41755485893416927
User 93451 does not improve AUC. Reverting changes.
Training on augumented user 57352 10/50 current_auc = 0.41818181818181815
User 57352 AUC after training: 0.41442006269592474
User 57352 does not improve AUC. Reverting changes.
Training on augumented user 81551 11/50 current_auc = 0.41818181818181815
User 81551 AUC after training: 0.41692789968652033
User 81551 does not improve AUC. Reverting changes.
Training on augumented user 122179 12/50 current_auc = 0.41818181818181815
User 122179 AUC after training: 0.41818181818181804
User 122179 does not improve AUC. Reverting changes.
Training on augumented user 119048 13/50 current_auc = 0.41818181818181815
User 119048 AUC after training: 0.4156739811912225
User 119048 does not improve AUC. Reverting changes.
Training on augumented user 129995 14/50 current_auc = 0.41818181818181815
User 129995 AUC after training: 0.4144200626959247
User 129995 does not improve AUC. Reverting changes.
Training on augumented user 52205 15/50 current_auc = 0.41818181818181815
User 52205 AUC after training: 0.4175548589341692
User 52205 does not improve AUC. Reverting changes.
Training on augumented user 102710 16/50 current_auc = 0.41818181818181815
User 102710 AUC after training: 0.41880877742946715
User 102710 improves AUC. Keeping the model.
Training on augumented user 21059 17/50 current_auc = 0.41880877742946715
User 21059 AUC after training: 0.4156739811912225
User 21059 does not improve AUC. Reverting changes.
Training on augumented user 22444 18/50 current_auc = 0.41880877742946715
User 22444 AUC after training: 0.4169278996865204
User 22444 does not improve AUC. Reverting changes.
Training on augumented user 116950 19/50 current_auc = 0.41880877742946715
User 116950 AUC after training: 0.4144200626959248
User 116950 does not improve AUC. Reverting changes.
Training on augumented user 55922 20/50 current_auc = 0.41880877742946715
User 55922 AUC after training: 0.41880877742946704
User 55922 does not improve AUC. Reverting changes.
Training on augumented user 54782 21/50 current_auc = 0.41880877742946715
User 54782 AUC after training: 0.4178683385579937
User 54782 does not improve AUC. Reverting changes.
Training on augumented user 15177 22/50 current_auc = 0.41880877742946715
User 15177 AUC after training: 0.4128526645768024
User 15177 does not improve AUC. Reverting changes.
Training on augumented user 124415 23/50 current_auc = 0.41880877742946715
User 124415 AUC after training: 0.4169278996865204
User 124415 does not improve AUC. Reverting changes.
Training on augumented user 79964 24/50 current_auc = 0.41880877742946715
User 79964 AUC after training: 0.41849529780564265
User 79964 does not improve AUC. Reverting changes.
Training on augumented user 18112 25/50 current_auc = 0.41880877742946715
User 18112 AUC after training: 0.41818181818181815
User 18112 does not improve AUC. Reverting changes.
Training on augumented user 134285 26/50 current_auc = 0.41880877742946715
User 134285 AUC after training: 0.4178683385579937
User 134285 does not improve AUC. Reverting changes.
Training on augumented user 48186 27/50 current_auc = 0.41880877742946715
User 48186 AUC after training: 0.41818181818181815
User 48186 does not improve AUC. Reverting changes.
Training on augumented user 95009 28/50 current_auc = 0.41880877742946715
User 95009 AUC after training: 0.4169278996865204
User 95009 does not improve AUC. Reverting changes.
Training on augumented user 25061 29/50 current_auc = 0.41880877742946715
User 25061 AUC after training: 0.4175548589341692
User 25061 does not improve AUC. Reverting changes.
Training on augumented user 81331 30/50 current_auc = 0.41880877742946715
User 81331 AUC after training: 0.4150470219435736
User 81331 does not improve AUC. Reverting changes.
Training on augumented user 102193 31/50 current_auc = 0.41880877742946715
User 102193 AUC after training: 0.4181818181818182
User 102193 does not improve AUC. Reverting changes.
Training on augumented user 36929 32/50 current_auc = 0.41880877742946715
User 36929 AUC after training: 0.4169278996865204
User 36929 does not improve AUC. Reverting changes.
Training on augumented user 108621 33/50 current_auc = 0.41880877742946715
User 108621 AUC after training: 0.41755485893416927
User 108621 does not improve AUC. Reverting changes.
Training on augumented user 51425 34/50 current_auc = 0.41880877742946715
User 51425 AUC after training: 0.41818181818181815
User 51425 does not improve AUC. Reverting changes.
Training on augumented user 61221 35/50 current_auc = 0.41880877742946715
User 61221 AUC after training: 0.41880877742946704
User 61221 does not improve AUC. Reverting changes.
Training on augumented user 56770 36/50 current_auc = 0.41880877742946715
User 56770 AUC after training: 0.4181818181818182
User 56770 does not improve AUC. Reverting changes.
Training on augumented user 21771 37/50 current_auc = 0.41880877742946715
User 21771 AUC after training: 0.41755485893416927
User 21771 does not improve AUC. Reverting changes.
Training on augumented user 2221 38/50 current_auc = 0.41880877742946715
User 2221 AUC after training: 0.41755485893416927
User 2221 does not improve AUC. Reverting changes.
Training on augumented user 18886 39/50 current_auc = 0.41880877742946715
User 18886 AUC after training: 0.41880877742946704
User 18886 does not improve AUC. Reverting changes.
Training on augumented user 16597 40/50 current_auc = 0.41880877742946715
User 16597 AUC after training: 0.4175548589341692
User 16597 does not improve AUC. Reverting changes.
Training on augumented user 11880 41/50 current_auc = 0.41880877742946715
User 11880 AUC after training: 0.4175548589341692
User 11880 does not improve AUC. Reverting changes.
Training on augumented user 49567 42/50 current_auc = 0.41880877742946715
User 49567 AUC after training: 0.41567398119122256
User 49567 does not improve AUC. Reverting changes.
Training on augumented user 102655 43/50 current_auc = 0.41880877742946715
User 102655 AUC after training: 0.4169278996865204
User 102655 does not improve AUC. Reverting changes.
Training on augumented user 11320 44/50 current_auc = 0.41880877742946715
User 11320 AUC after training: 0.41912225705329154
User 11320 improves AUC. Keeping the model.
Training on augumented user 76487 45/50 current_auc = 0.41912225705329154
User 76487 AUC after training: 0.41755485893416927
User 76487 does not improve AUC. Reverting changes.
Training on augumented user 3809 46/50 current_auc = 0.41912225705329154
User 3809 AUC after training: 0.4191222570532915
User 3809 does not improve AUC. Reverting changes.
Training on augumented user 71860 47/50 current_auc = 0.41912225705329154
User 71860 AUC after training: 0.41661442006269583
User 71860 does not improve AUC. Reverting changes.
Training on augumented user 60863 48/50 current_auc = 0.41912225705329154
User 60863 AUC after training: 0.41849529780564254
User 60863 does not improve AUC. Reverting changes.
Training on augumented user 54009 49/50 current_auc = 0.41912225705329154
User 54009 AUC after training: 0.419435736677116
User 54009 improves AUC. Keeping the model.
[2024-12-02 18:03:19.547648] start test user 70790 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:20.073500] start test user 70790 47/568 recall augumented users by random, augumented_users = [97579, 107874, 8495, 2916, 61540, 76181, 56086, 77315, 107405, 133541, 102159, 110525, 131675, 32911, 9849, 133061, 50570, 133450, 21223, 69462, 53314, 130338, 30556, 49100, 80173, 87055, 73366, 65734, 82117, 134109, 62858, 66971, 136978, 63037, 94443, 16324, 129573, 17021, 119629, 122590, 49032, 99616, 99765, 9949, 12928, 84671, 115274, 46004, 82003, 121474]
[2024-12-02 18:03:20.088020] user = 70790 Cloud 47/568
[2024-12-02 18:03:20.104938] user = 70790 Local 47/568
[2024-12-02 18:03:20.146049] user = 70790 Local+ 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:23.025521] user = 70790 MPDA- 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3205128205128205
Training on augumented user 97579 0/50 current_auc = 0.3205128205128205
User 97579 AUC after training: 0.3205128205128205
User 97579 does not improve AUC. Reverting changes.
Training on augumented user 107874 1/50 current_auc = 0.3205128205128205
User 107874 AUC after training: 0.3205128205128205
User 107874 does not improve AUC. Reverting changes.
Training on augumented user 8495 2/50 current_auc = 0.3205128205128205
User 8495 AUC after training: 0.3205128205128205
User 8495 does not improve AUC. Reverting changes.
Training on augumented user 2916 3/50 current_auc = 0.3205128205128205
User 2916 AUC after training: 0.3205128205128205
User 2916 does not improve AUC. Reverting changes.
Training on augumented user 61540 4/50 current_auc = 0.3205128205128205
User 61540 AUC after training: 0.3205128205128205
User 61540 does not improve AUC. Reverting changes.
Training on augumented user 76181 5/50 current_auc = 0.3205128205128205
User 76181 AUC after training: 0.3205128205128205
User 76181 does not improve AUC. Reverting changes.
Training on augumented user 56086 6/50 current_auc = 0.3205128205128205
User 56086 AUC after training: 0.3205128205128205
User 56086 does not improve AUC. Reverting changes.
Training on augumented user 77315 7/50 current_auc = 0.3205128205128205
User 77315 AUC after training: 0.3076923076923077
User 77315 does not improve AUC. Reverting changes.
Training on augumented user 107405 8/50 current_auc = 0.3205128205128205
User 107405 AUC after training: 0.3076923076923077
User 107405 does not improve AUC. Reverting changes.
Training on augumented user 133541 9/50 current_auc = 0.3205128205128205
User 133541 AUC after training: 0.3205128205128205
User 133541 does not improve AUC. Reverting changes.
Training on augumented user 102159 10/50 current_auc = 0.3205128205128205
User 102159 AUC after training: 0.3205128205128205
User 102159 does not improve AUC. Reverting changes.
Training on augumented user 110525 11/50 current_auc = 0.3205128205128205
User 110525 AUC after training: 0.3076923076923077
User 110525 does not improve AUC. Reverting changes.
Training on augumented user 131675 12/50 current_auc = 0.3205128205128205
User 131675 AUC after training: 0.3205128205128205
User 131675 does not improve AUC. Reverting changes.
Training on augumented user 32911 13/50 current_auc = 0.3205128205128205
User 32911 AUC after training: 0.3076923076923077
User 32911 does not improve AUC. Reverting changes.
Training on augumented user 9849 14/50 current_auc = 0.3205128205128205
User 9849 AUC after training: 0.3076923076923077
User 9849 does not improve AUC. Reverting changes.
Training on augumented user 133061 15/50 current_auc = 0.3205128205128205
User 133061 AUC after training: 0.3205128205128205
User 133061 does not improve AUC. Reverting changes.
Training on augumented user 50570 16/50 current_auc = 0.3205128205128205
User 50570 AUC after training: 0.3076923076923077
User 50570 does not improve AUC. Reverting changes.
Training on augumented user 133450 17/50 current_auc = 0.3205128205128205
User 133450 AUC after training: 0.3205128205128205
User 133450 does not improve AUC. Reverting changes.
Training on augumented user 21223 18/50 current_auc = 0.3205128205128205
User 21223 AUC after training: 0.3076923076923077
User 21223 does not improve AUC. Reverting changes.
Training on augumented user 69462 19/50 current_auc = 0.3205128205128205
User 69462 AUC after training: 0.3076923076923077
User 69462 does not improve AUC. Reverting changes.
Training on augumented user 53314 20/50 current_auc = 0.3205128205128205
User 53314 AUC after training: 0.3205128205128205
User 53314 does not improve AUC. Reverting changes.
Training on augumented user 130338 21/50 current_auc = 0.3205128205128205
User 130338 AUC after training: 0.3205128205128205
User 130338 does not improve AUC. Reverting changes.
Training on augumented user 30556 22/50 current_auc = 0.3205128205128205
User 30556 AUC after training: 0.3205128205128205
User 30556 does not improve AUC. Reverting changes.
Training on augumented user 49100 23/50 current_auc = 0.3205128205128205
User 49100 AUC after training: 0.3205128205128205
User 49100 does not improve AUC. Reverting changes.
Training on augumented user 80173 24/50 current_auc = 0.3205128205128205
User 80173 AUC after training: 0.3205128205128205
User 80173 does not improve AUC. Reverting changes.
Training on augumented user 87055 25/50 current_auc = 0.3205128205128205
User 87055 AUC after training: 0.3076923076923077
User 87055 does not improve AUC. Reverting changes.
Training on augumented user 73366 26/50 current_auc = 0.3205128205128205
User 73366 AUC after training: 0.3205128205128205
User 73366 does not improve AUC. Reverting changes.
Training on augumented user 65734 27/50 current_auc = 0.3205128205128205
User 65734 AUC after training: 0.3076923076923077
User 65734 does not improve AUC. Reverting changes.
Training on augumented user 82117 28/50 current_auc = 0.3205128205128205
User 82117 AUC after training: 0.3205128205128205
User 82117 does not improve AUC. Reverting changes.
Training on augumented user 134109 29/50 current_auc = 0.3205128205128205
User 134109 AUC after training: 0.3076923076923077
User 134109 does not improve AUC. Reverting changes.
Training on augumented user 62858 30/50 current_auc = 0.3205128205128205
User 62858 AUC after training: 0.3205128205128205
User 62858 does not improve AUC. Reverting changes.
Training on augumented user 66971 31/50 current_auc = 0.3205128205128205
User 66971 AUC after training: 0.3205128205128205
User 66971 does not improve AUC. Reverting changes.
Training on augumented user 136978 32/50 current_auc = 0.3205128205128205
User 136978 AUC after training: 0.3205128205128205
User 136978 does not improve AUC. Reverting changes.
Training on augumented user 63037 33/50 current_auc = 0.3205128205128205
User 63037 AUC after training: 0.3076923076923077
User 63037 does not improve AUC. Reverting changes.
Training on augumented user 94443 34/50 current_auc = 0.3205128205128205
User 94443 AUC after training: 0.3205128205128205
User 94443 does not improve AUC. Reverting changes.
Training on augumented user 16324 35/50 current_auc = 0.3205128205128205
User 16324 AUC after training: 0.3205128205128205
User 16324 does not improve AUC. Reverting changes.
Training on augumented user 129573 36/50 current_auc = 0.3205128205128205
User 129573 AUC after training: 0.3205128205128205
User 129573 does not improve AUC. Reverting changes.
Training on augumented user 17021 37/50 current_auc = 0.3205128205128205
User 17021 AUC after training: 0.3205128205128205
User 17021 does not improve AUC. Reverting changes.
Training on augumented user 119629 38/50 current_auc = 0.3205128205128205
User 119629 AUC after training: 0.3205128205128205
User 119629 does not improve AUC. Reverting changes.
Training on augumented user 122590 39/50 current_auc = 0.3205128205128205
User 122590 AUC after training: 0.3205128205128205
User 122590 does not improve AUC. Reverting changes.
Training on augumented user 49032 40/50 current_auc = 0.3205128205128205
User 49032 AUC after training: 0.3205128205128205
User 49032 does not improve AUC. Reverting changes.
Training on augumented user 99616 41/50 current_auc = 0.3205128205128205
User 99616 AUC after training: 0.3205128205128205
User 99616 does not improve AUC. Reverting changes.
Training on augumented user 99765 42/50 current_auc = 0.3205128205128205
User 99765 AUC after training: 0.3205128205128205
User 99765 does not improve AUC. Reverting changes.
Training on augumented user 9949 43/50 current_auc = 0.3205128205128205
User 9949 AUC after training: 0.3205128205128205
User 9949 does not improve AUC. Reverting changes.
Training on augumented user 12928 44/50 current_auc = 0.3205128205128205
User 12928 AUC after training: 0.3205128205128205
User 12928 does not improve AUC. Reverting changes.
Training on augumented user 84671 45/50 current_auc = 0.3205128205128205
User 84671 AUC after training: 0.3205128205128205
User 84671 does not improve AUC. Reverting changes.
Training on augumented user 115274 46/50 current_auc = 0.3205128205128205
User 115274 AUC after training: 0.3205128205128205
User 115274 does not improve AUC. Reverting changes.
Training on augumented user 46004 47/50 current_auc = 0.3205128205128205
User 46004 AUC after training: 0.3205128205128205
User 46004 does not improve AUC. Reverting changes.
Training on augumented user 82003 48/50 current_auc = 0.3205128205128205
User 82003 AUC after training: 0.3205128205128205
User 82003 does not improve AUC. Reverting changes.
Training on augumented user 121474 49/50 current_auc = 0.3205128205128205
User 121474 AUC after training: 0.3076923076923077
User 121474 does not improve AUC. Reverting changes.
[2024-12-02 18:03:52.777029] start test user 70816 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:53.231669] start test user 70816 48/568 recall augumented users by random, augumented_users = [112532, 122620, 24592, 79016, 98866, 130529, 79686, 52086, 125542, 97962, 10934, 30700, 63537, 133450, 127529, 100428, 13187, 934, 100559, 105445, 55128, 21510, 32867, 114170, 115306, 7085, 132564, 58384, 130496, 1379, 65119, 96934, 28370, 66809, 104756, 31811, 75710, 115016, 96727, 53778, 79689, 51006, 77512, 41597, 121858, 54671, 29372, 136395, 4331, 92516]
[2024-12-02 18:03:53.249569] user = 70816 Cloud 48/568
[2024-12-02 18:03:53.268123] user = 70816 Local 48/568
[2024-12-02 18:03:53.674542] user = 70816 Local+ 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:56.077636] user = 70816 MPDA- 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5866390191128741
Training on augumented user 112532 0/50 current_auc = 0.5866390191128741
User 112532 AUC after training: 0.5873602596465921
User 112532 improves AUC. Keeping the model.
Training on augumented user 122620 1/50 current_auc = 0.5873602596465921
User 122620 AUC after training: 0.5868193292463036
User 122620 does not improve AUC. Reverting changes.
Training on augumented user 24592 2/50 current_auc = 0.5873602596465921
User 24592 AUC after training: 0.5862783988460152
User 24592 does not improve AUC. Reverting changes.
Training on augumented user 79016 3/50 current_auc = 0.5873602596465921
User 79016 AUC after training: 0.5898846015146051
User 79016 improves AUC. Keeping the model.
Training on augumented user 98866 4/50 current_auc = 0.5898846015146051
User 98866 AUC after training: 0.5884421204471691
User 98866 does not improve AUC. Reverting changes.
Training on augumented user 130529 5/50 current_auc = 0.5898846015146051
User 130529 AUC after training: 0.5891633609808871
User 130529 does not improve AUC. Reverting changes.
Training on augumented user 79686 6/50 current_auc = 0.5898846015146051
User 79686 AUC after training: 0.5889830508474576
User 79686 does not improve AUC. Reverting changes.
Training on augumented user 52086 7/50 current_auc = 0.5898846015146051
User 52086 AUC after training: 0.5892535160476018
User 52086 does not improve AUC. Reverting changes.
Training on augumented user 125542 8/50 current_auc = 0.5898846015146051
User 125542 AUC after training: 0.5893436711143165
User 125542 does not improve AUC. Reverting changes.
Training on augumented user 97962 9/50 current_auc = 0.5898846015146051
User 97962 AUC after training: 0.5893436711143165
User 97962 does not improve AUC. Reverting changes.
Training on augumented user 10934 10/50 current_auc = 0.5898846015146051
User 10934 AUC after training: 0.5889830508474576
User 10934 does not improve AUC. Reverting changes.
Training on augumented user 30700 11/50 current_auc = 0.5898846015146051
User 30700 AUC after training: 0.5891633609808871
User 30700 does not improve AUC. Reverting changes.
Training on augumented user 63537 12/50 current_auc = 0.5898846015146051
User 63537 AUC after training: 0.5887125856473133
User 63537 does not improve AUC. Reverting changes.
Training on augumented user 133450 13/50 current_auc = 0.5898846015146051
User 133450 AUC after training: 0.5902452217814641
User 133450 improves AUC. Keeping the model.
Training on augumented user 127529 14/50 current_auc = 0.5902452217814641
User 127529 AUC after training: 0.5891633609808872
User 127529 does not improve AUC. Reverting changes.
Training on augumented user 100428 15/50 current_auc = 0.5902452217814641
User 100428 AUC after training: 0.5862783988460151
User 100428 does not improve AUC. Reverting changes.
Training on augumented user 13187 16/50 current_auc = 0.5902452217814641
User 13187 AUC after training: 0.5893436711143166
User 13187 does not improve AUC. Reverting changes.
Training on augumented user 934 17/50 current_auc = 0.5902452217814641
User 934 AUC after training: 0.5882618103137396
User 934 does not improve AUC. Reverting changes.
Training on augumented user 100559 18/50 current_auc = 0.5902452217814641
User 100559 AUC after training: 0.5869996393797331
User 100559 does not improve AUC. Reverting changes.
Training on augumented user 105445 19/50 current_auc = 0.5902452217814641
User 105445 AUC after training: 0.5891633609808871
User 105445 does not improve AUC. Reverting changes.
Training on augumented user 55128 20/50 current_auc = 0.5902452217814641
User 55128 AUC after training: 0.5891633609808871
User 55128 does not improve AUC. Reverting changes.
Training on augumented user 21510 21/50 current_auc = 0.5902452217814641
User 21510 AUC after training: 0.5860980887125856
User 21510 does not improve AUC. Reverting changes.
Training on augumented user 32867 22/50 current_auc = 0.5902452217814641
User 32867 AUC after training: 0.5873602596465921
User 32867 does not improve AUC. Reverting changes.
Training on augumented user 114170 23/50 current_auc = 0.5902452217814641
User 114170 AUC after training: 0.5904255319148937
User 114170 improves AUC. Keeping the model.
Training on augumented user 115306 24/50 current_auc = 0.5904255319148937
User 115306 AUC after training: 0.5907861521817526
User 115306 improves AUC. Keeping the model.
Training on augumented user 7085 25/50 current_auc = 0.5907861521817526
User 7085 AUC after training: 0.5897042913811756
User 7085 does not improve AUC. Reverting changes.
Training on augumented user 132564 26/50 current_auc = 0.5907861521817526
User 132564 AUC after training: 0.5904255319148936
User 132564 does not improve AUC. Reverting changes.
Training on augumented user 58384 27/50 current_auc = 0.5907861521817526
User 58384 AUC after training: 0.5898846015146051
User 58384 does not improve AUC. Reverting changes.
Training on augumented user 130496 28/50 current_auc = 0.5907861521817526
User 130496 AUC after training: 0.5895239812477462
User 130496 does not improve AUC. Reverting changes.
Training on augumented user 1379 29/50 current_auc = 0.5907861521817526
User 1379 AUC after training: 0.5904255319148937
User 1379 does not improve AUC. Reverting changes.
Training on augumented user 65119 30/50 current_auc = 0.5907861521817526
User 65119 AUC after training: 0.5904255319148937
User 65119 does not improve AUC. Reverting changes.
Training on augumented user 96934 31/50 current_auc = 0.5907861521817526
User 96934 AUC after training: 0.5917778579156148
User 96934 improves AUC. Keeping the model.
Training on augumented user 28370 32/50 current_auc = 0.5917778579156148
User 28370 AUC after training: 0.5907861521817526
User 28370 does not improve AUC. Reverting changes.
Training on augumented user 66809 33/50 current_auc = 0.5917778579156148
User 66809 AUC after training: 0.5914172376487559
User 66809 does not improve AUC. Reverting changes.
Training on augumented user 104756 34/50 current_auc = 0.5917778579156148
User 104756 AUC after training: 0.5903353768481788
User 104756 does not improve AUC. Reverting changes.
Training on augumented user 31811 35/50 current_auc = 0.5917778579156148
User 31811 AUC after training: 0.5895239812477462
User 31811 does not improve AUC. Reverting changes.
Training on augumented user 75710 36/50 current_auc = 0.5917778579156148
User 75710 AUC after training: 0.5908763072484674
User 75710 does not improve AUC. Reverting changes.
Training on augumented user 115016 37/50 current_auc = 0.5917778579156148
User 115016 AUC after training: 0.5899747565813198
User 115016 does not improve AUC. Reverting changes.
Training on augumented user 96727 38/50 current_auc = 0.5917778579156148
User 96727 AUC after training: 0.5906058420483231
User 96727 does not improve AUC. Reverting changes.
Training on augumented user 53778 39/50 current_auc = 0.5917778579156148
User 53778 AUC after training: 0.5906959971150378
User 53778 does not improve AUC. Reverting changes.
Training on augumented user 79689 40/50 current_auc = 0.5917778579156148
User 79689 AUC after training: 0.5917778579156148
User 79689 does not improve AUC. Reverting changes.
Training on augumented user 51006 41/50 current_auc = 0.5917778579156148
User 51006 AUC after training: 0.5904255319148937
User 51006 does not improve AUC. Reverting changes.
Training on augumented user 77512 42/50 current_auc = 0.5917778579156148
User 77512 AUC after training: 0.5860079336458709
User 77512 does not improve AUC. Reverting changes.
Training on augumented user 41597 43/50 current_auc = 0.5917778579156148
User 41597 AUC after training: 0.588442120447169
User 41597 does not improve AUC. Reverting changes.
Training on augumented user 121858 44/50 current_auc = 0.5917778579156148
User 121858 AUC after training: 0.5897944464478904
User 121858 does not improve AUC. Reverting changes.
Training on augumented user 54671 45/50 current_auc = 0.5917778579156148
User 54671 AUC after training: 0.5908763072484673
User 54671 does not improve AUC. Reverting changes.
Training on augumented user 29372 46/50 current_auc = 0.5917778579156148
User 29372 AUC after training: 0.5893436711143166
User 29372 does not improve AUC. Reverting changes.
Training on augumented user 136395 47/50 current_auc = 0.5917778579156148
User 136395 AUC after training: 0.5890732059141723
User 136395 does not improve AUC. Reverting changes.
Training on augumented user 4331 48/50 current_auc = 0.5917778579156148
User 4331 AUC after training: 0.5873602596465921
User 4331 does not improve AUC. Reverting changes.
Training on augumented user 92516 49/50 current_auc = 0.5917778579156148
User 92516 AUC after training: 0.5847457627118644
User 92516 does not improve AUC. Reverting changes.
[2024-12-02 18:04:30.126049] start test user 70854 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:31.061704] start test user 70854 49/568 recall augumented users by random, augumented_users = [64778, 93929, 41605, 89362, 60619, 86821, 77449, 78024, 128452, 31994, 113695, 132729, 17618, 82008, 84996, 114732, 55134, 4827, 89439, 37056, 68327, 88684, 121452, 70108, 100981, 93050, 133182, 102852, 1668, 81744, 116476, 77010, 60587, 14424, 78194, 80662, 10923, 89412, 81980, 12974, 93614, 56242, 56693, 126348, 58519, 4506, 125870, 46311, 65290, 13090]
[2024-12-02 18:04:31.081091] user = 70854 Cloud 49/568
[2024-12-02 18:04:31.107021] user = 70854 Local 49/568
[2024-12-02 18:04:31.403092] user = 70854 Local+ 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:33.679543] user = 70854 MPDA- 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5755853165044802
Training on augumented user 64778 0/50 current_auc = 0.5755853165044802
User 64778 AUC after training: 0.5726466904326043
User 64778 does not improve AUC. Reverting changes.
Training on augumented user 93929 1/50 current_auc = 0.5755853165044802
User 93929 AUC after training: 0.5734656517968976
User 93929 does not improve AUC. Reverting changes.
Training on augumented user 41605 2/50 current_auc = 0.5755853165044802
User 41605 AUC after training: 0.5758261874939782
User 41605 improves AUC. Keeping the model.
Training on augumented user 89362 3/50 current_auc = 0.5758261874939782
User 89362 AUC after training: 0.5733693034010985
User 89362 does not improve AUC. Reverting changes.
Training on augumented user 60619 4/50 current_auc = 0.5758261874939782
User 60619 AUC after training: 0.575248097119183
User 60619 does not improve AUC. Reverting changes.
Training on augumented user 86821 5/50 current_auc = 0.5758261874939782
User 86821 AUC after training: 0.5744291357548897
User 86821 does not improve AUC. Reverting changes.
Training on augumented user 77449 6/50 current_auc = 0.5758261874939782
User 77449 AUC after training: 0.5754407939107814
User 77449 does not improve AUC. Reverting changes.
Training on augumented user 78024 7/50 current_auc = 0.5758261874939782
User 78024 AUC after training: 0.5728875614221023
User 78024 does not improve AUC. Reverting changes.
Training on augumented user 128452 8/50 current_auc = 0.5758261874939782
User 128452 AUC after training: 0.5740437421716929
User 128452 does not improve AUC. Reverting changes.
Training on augumented user 31994 9/50 current_auc = 0.5758261874939782
User 31994 AUC after training: 0.5751517487233838
User 31994 does not improve AUC. Reverting changes.
Training on augumented user 113695 10/50 current_auc = 0.5758261874939782
User 113695 AUC after training: 0.5747663551401869
User 113695 does not improve AUC. Reverting changes.
Training on augumented user 132729 11/50 current_auc = 0.5758261874939782
User 132729 AUC after training: 0.5739955679737933
User 132729 does not improve AUC. Reverting changes.
Training on augumented user 17618 12/50 current_auc = 0.5758261874939782
User 17618 AUC after training: 0.5753926197128817
User 17618 does not improve AUC. Reverting changes.
Training on augumented user 82008 13/50 current_auc = 0.5758261874939782
User 82008 AUC after training: 0.5748145293380866
User 82008 does not improve AUC. Reverting changes.
Training on augumented user 84996 14/50 current_auc = 0.5758261874939782
User 84996 AUC after training: 0.575248097119183
User 84996 does not improve AUC. Reverting changes.
Training on augumented user 114732 15/50 current_auc = 0.5758261874939782
User 114732 AUC after training: 0.5757780132960786
User 114732 does not improve AUC. Reverting changes.
Training on augumented user 55134 16/50 current_auc = 0.5758261874939782
User 55134 AUC after training: 0.5705270257250217
User 55134 does not improve AUC. Reverting changes.
Training on augumented user 4827 17/50 current_auc = 0.5758261874939782
User 4827 AUC after training: 0.5748145293380866
User 4827 does not improve AUC. Reverting changes.
Training on augumented user 89439 18/50 current_auc = 0.5758261874939782
User 89439 AUC after training: 0.5759707100876772
User 89439 improves AUC. Keeping the model.
Training on augumented user 37056 19/50 current_auc = 0.5759707100876772
User 37056 AUC after training: 0.5762597552750746
User 37056 improves AUC. Keeping the model.
Training on augumented user 68327 20/50 current_auc = 0.5762597552750746
User 68327 AUC after training: 0.5758743616918779
User 68327 does not improve AUC. Reverting changes.
Training on augumented user 88684 21/50 current_auc = 0.5762597552750746
User 88684 AUC after training: 0.57683784564987
User 88684 improves AUC. Keeping the model.
Training on augumented user 121452 22/50 current_auc = 0.57683784564987
User 121452 AUC after training: 0.5751035745254842
User 121452 does not improve AUC. Reverting changes.
Training on augumented user 70108 23/50 current_auc = 0.57683784564987
User 70108 AUC after training: 0.5781867231910589
User 70108 improves AUC. Keeping the model.
Training on augumented user 100981 24/50 current_auc = 0.5781867231910589
User 100981 AUC after training: 0.5763561036708739
User 100981 does not improve AUC. Reverting changes.
Training on augumented user 93050 25/50 current_auc = 0.5781867231910589
User 93050 AUC after training: 0.57683784564987
User 93050 does not improve AUC. Reverting changes.
Training on augumented user 133182 26/50 current_auc = 0.5781867231910589
User 133182 AUC after training: 0.5767896714519705
User 133182 does not improve AUC. Reverting changes.
Training on augumented user 102852 27/50 current_auc = 0.5781867231910589
User 102852 AUC after training: 0.5784275941805569
User 102852 improves AUC. Keeping the model.
Training on augumented user 1668 28/50 current_auc = 0.5784275941805569
User 1668 AUC after training: 0.5788129877637538
User 1668 improves AUC. Keeping the model.
Training on augumented user 81744 29/50 current_auc = 0.5788129877637538
User 81744 AUC after training: 0.5785721167742556
User 81744 does not improve AUC. Reverting changes.
Training on augumented user 116476 30/50 current_auc = 0.5788129877637538
User 116476 AUC after training: 0.5766451488582715
User 116476 does not improve AUC. Reverting changes.
Training on augumented user 77010 31/50 current_auc = 0.5788129877637538
User 77010 AUC after training: 0.5792465555448503
User 77010 improves AUC. Keeping the model.
Training on augumented user 60587 32/50 current_auc = 0.5792465555448503
User 60587 AUC after training: 0.5768860198477695
User 60587 does not improve AUC. Reverting changes.
Training on augumented user 14424 33/50 current_auc = 0.5792465555448503
User 14424 AUC after training: 0.5788611619616533
User 14424 does not improve AUC. Reverting changes.
Training on augumented user 78194 34/50 current_auc = 0.5792465555448503
User 78194 AUC after training: 0.579872820117545
User 78194 improves AUC. Keeping the model.
Training on augumented user 80662 35/50 current_auc = 0.579872820117545
User 80662 AUC after training: 0.578668465170055
User 80662 does not improve AUC. Reverting changes.
Training on augumented user 10923 36/50 current_auc = 0.579872820117545
User 10923 AUC after training: 0.5791983813469506
User 10923 does not improve AUC. Reverting changes.
Training on augumented user 89412 37/50 current_auc = 0.579872820117545
User 89412 AUC after training: 0.5791983813469507
User 89412 does not improve AUC. Reverting changes.
Training on augumented user 81980 38/50 current_auc = 0.579872820117545
User 81980 AUC after training: 0.5792947297427499
User 81980 does not improve AUC. Reverting changes.
Training on augumented user 12974 39/50 current_auc = 0.579872820117545
User 12974 AUC after training: 0.5788129877637538
User 12974 does not improve AUC. Reverting changes.
Training on augumented user 93614 40/50 current_auc = 0.579872820117545
User 93614 AUC after training: 0.5789575103574525
User 93614 does not improve AUC. Reverting changes.
Training on augumented user 56242 41/50 current_auc = 0.579872820117545
User 56242 AUC after training: 0.5778013296078621
User 56242 does not improve AUC. Reverting changes.
Training on augumented user 56693 42/50 current_auc = 0.579872820117545
User 56693 AUC after training: 0.5782348973889586
User 56693 does not improve AUC. Reverting changes.
Training on augumented user 126348 43/50 current_auc = 0.579872820117545
User 126348 AUC after training: 0.5811735234608343
User 126348 improves AUC. Keeping the model.
Training on augumented user 58519 44/50 current_auc = 0.5811735234608343
User 58519 AUC after training: 0.5798728201175452
User 58519 does not improve AUC. Reverting changes.
Training on augumented user 4506 45/50 current_auc = 0.5811735234608343
User 4506 AUC after training: 0.5794874265343481
User 4506 does not improve AUC. Reverting changes.
Training on augumented user 125870 46/50 current_auc = 0.5811735234608343
User 125870 AUC after training: 0.5804027362944407
User 125870 does not improve AUC. Reverting changes.
Training on augumented user 46311 47/50 current_auc = 0.5811735234608343
User 46311 AUC after training: 0.5794392523364486
User 46311 does not improve AUC. Reverting changes.
Training on augumented user 65290 48/50 current_auc = 0.5811735234608343
User 65290 AUC after training: 0.5802582137007419
User 65290 does not improve AUC. Reverting changes.
Training on augumented user 13090 49/50 current_auc = 0.5811735234608343
User 13090 AUC after training: 0.5712014644956163
User 13090 does not improve AUC. Reverting changes.
[2024-12-02 18:05:02.201767] start test user 70874 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:02.622813] start test user 70874 50/568 recall augumented users by random, augumented_users = [54196, 22949, 43255, 12582, 111654, 5245, 133082, 129686, 94140, 230, 82278, 84850, 120857, 96163, 18142, 69088, 131990, 100137, 30302, 49332, 36820, 86224, 93062, 75811, 98827, 83536, 29013, 95899, 41769, 105003, 93788, 99670, 47094, 82939, 104644, 106225, 135394, 78507, 56505, 37720, 111955, 23301, 85359, 14370, 77592, 74800, 45719, 58096, 14406, 115062]
[2024-12-02 18:05:02.637791] user = 70874 Cloud 50/568
[2024-12-02 18:05:02.650632] user = 70874 Local 50/568
[2024-12-02 18:05:02.708139] user = 70874 Local+ 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:04.450253] user = 70874 MPDA- 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6066985645933014
Training on augumented user 54196 0/50 current_auc = 0.6066985645933014
User 54196 AUC after training: 0.6066985645933014
User 54196 does not improve AUC. Reverting changes.
Training on augumented user 22949 1/50 current_auc = 0.6066985645933014
User 22949 AUC after training: 0.6057416267942584
User 22949 does not improve AUC. Reverting changes.
Training on augumented user 43255 2/50 current_auc = 0.6066985645933014
User 43255 AUC after training: 0.6076555023923446
User 43255 improves AUC. Keeping the model.
Training on augumented user 12582 3/50 current_auc = 0.6076555023923446
User 12582 AUC after training: 0.6095693779904306
User 12582 improves AUC. Keeping the model.
Training on augumented user 111654 4/50 current_auc = 0.6095693779904306
User 111654 AUC after training: 0.6095693779904306
User 111654 does not improve AUC. Reverting changes.
Training on augumented user 5245 5/50 current_auc = 0.6095693779904306
User 5245 AUC after training: 0.6095693779904306
User 5245 does not improve AUC. Reverting changes.
Training on augumented user 133082 6/50 current_auc = 0.6095693779904306
User 133082 AUC after training: 0.6133971291866029
User 133082 improves AUC. Keeping the model.
Training on augumented user 129686 7/50 current_auc = 0.6133971291866029
User 129686 AUC after training: 0.6133971291866029
User 129686 does not improve AUC. Reverting changes.
Training on augumented user 94140 8/50 current_auc = 0.6133971291866029
User 94140 AUC after training: 0.6124401913875599
User 94140 does not improve AUC. Reverting changes.
Training on augumented user 230 9/50 current_auc = 0.6133971291866029
User 230 AUC after training: 0.6124401913875599
User 230 does not improve AUC. Reverting changes.
Training on augumented user 82278 10/50 current_auc = 0.6133971291866029
User 82278 AUC after training: 0.6133971291866029
User 82278 does not improve AUC. Reverting changes.
Training on augumented user 84850 11/50 current_auc = 0.6133971291866029
User 84850 AUC after training: 0.6086124401913876
User 84850 does not improve AUC. Reverting changes.
Training on augumented user 120857 12/50 current_auc = 0.6133971291866029
User 120857 AUC after training: 0.6133971291866029
User 120857 does not improve AUC. Reverting changes.
Training on augumented user 96163 13/50 current_auc = 0.6133971291866029
User 96163 AUC after training: 0.6114832535885167
User 96163 does not improve AUC. Reverting changes.
Training on augumented user 18142 14/50 current_auc = 0.6133971291866029
User 18142 AUC after training: 0.614354066985646
User 18142 improves AUC. Keeping the model.
Training on augumented user 69088 15/50 current_auc = 0.614354066985646
User 69088 AUC after training: 0.614354066985646
User 69088 does not improve AUC. Reverting changes.
Training on augumented user 131990 16/50 current_auc = 0.614354066985646
User 131990 AUC after training: 0.6133971291866028
User 131990 does not improve AUC. Reverting changes.
Training on augumented user 100137 17/50 current_auc = 0.614354066985646
User 100137 AUC after training: 0.614354066985646
User 100137 does not improve AUC. Reverting changes.
Training on augumented user 30302 18/50 current_auc = 0.614354066985646
User 30302 AUC after training: 0.6133971291866029
User 30302 does not improve AUC. Reverting changes.
Training on augumented user 49332 19/50 current_auc = 0.614354066985646
User 49332 AUC after training: 0.6124401913875599
User 49332 does not improve AUC. Reverting changes.
Training on augumented user 36820 20/50 current_auc = 0.614354066985646
User 36820 AUC after training: 0.6133971291866029
User 36820 does not improve AUC. Reverting changes.
Training on augumented user 86224 21/50 current_auc = 0.614354066985646
User 86224 AUC after training: 0.6148325358851674
User 86224 improves AUC. Keeping the model.
Training on augumented user 93062 22/50 current_auc = 0.6148325358851674
User 93062 AUC after training: 0.6138755980861244
User 93062 does not improve AUC. Reverting changes.
Training on augumented user 75811 23/50 current_auc = 0.6148325358851674
User 75811 AUC after training: 0.614354066985646
User 75811 does not improve AUC. Reverting changes.
Training on augumented user 98827 24/50 current_auc = 0.6148325358851674
User 98827 AUC after training: 0.6124401913875599
User 98827 does not improve AUC. Reverting changes.
Training on augumented user 83536 25/50 current_auc = 0.6148325358851674
User 83536 AUC after training: 0.6124401913875598
User 83536 does not improve AUC. Reverting changes.
Training on augumented user 29013 26/50 current_auc = 0.6148325358851674
User 29013 AUC after training: 0.6133971291866029
User 29013 does not improve AUC. Reverting changes.
Training on augumented user 95899 27/50 current_auc = 0.6148325358851674
User 95899 AUC after training: 0.6133971291866029
User 95899 does not improve AUC. Reverting changes.
Training on augumented user 41769 28/50 current_auc = 0.6148325358851674
User 41769 AUC after training: 0.6133971291866029
User 41769 does not improve AUC. Reverting changes.
Training on augumented user 105003 29/50 current_auc = 0.6148325358851674
User 105003 AUC after training: 0.6124401913875598
User 105003 does not improve AUC. Reverting changes.
Training on augumented user 93788 30/50 current_auc = 0.6148325358851674
User 93788 AUC after training: 0.6138755980861244
User 93788 does not improve AUC. Reverting changes.
Training on augumented user 99670 31/50 current_auc = 0.6148325358851674
User 99670 AUC after training: 0.6138755980861244
User 99670 does not improve AUC. Reverting changes.
Training on augumented user 47094 32/50 current_auc = 0.6148325358851674
User 47094 AUC after training: 0.6133971291866029
User 47094 does not improve AUC. Reverting changes.
Training on augumented user 82939 33/50 current_auc = 0.6148325358851674
User 82939 AUC after training: 0.6138755980861244
User 82939 does not improve AUC. Reverting changes.
Training on augumented user 104644 34/50 current_auc = 0.6148325358851674
User 104644 AUC after training: 0.6133971291866029
User 104644 does not improve AUC. Reverting changes.
Training on augumented user 106225 35/50 current_auc = 0.6148325358851674
User 106225 AUC after training: 0.6133971291866029
User 106225 does not improve AUC. Reverting changes.
Training on augumented user 135394 36/50 current_auc = 0.6148325358851674
User 135394 AUC after training: 0.6133971291866029
User 135394 does not improve AUC. Reverting changes.
Training on augumented user 78507 37/50 current_auc = 0.6148325358851674
User 78507 AUC after training: 0.614354066985646
User 78507 does not improve AUC. Reverting changes.
Training on augumented user 56505 38/50 current_auc = 0.6148325358851674
User 56505 AUC after training: 0.615311004784689
User 56505 improves AUC. Keeping the model.
Training on augumented user 37720 39/50 current_auc = 0.615311004784689
User 37720 AUC after training: 0.6133971291866029
User 37720 does not improve AUC. Reverting changes.
Training on augumented user 111955 40/50 current_auc = 0.615311004784689
User 111955 AUC after training: 0.6095693779904305
User 111955 does not improve AUC. Reverting changes.
Training on augumented user 23301 41/50 current_auc = 0.615311004784689
User 23301 AUC after training: 0.614354066985646
User 23301 does not improve AUC. Reverting changes.
Training on augumented user 85359 42/50 current_auc = 0.615311004784689
User 85359 AUC after training: 0.615311004784689
User 85359 does not improve AUC. Reverting changes.
Training on augumented user 14370 43/50 current_auc = 0.615311004784689
User 14370 AUC after training: 0.614354066985646
User 14370 does not improve AUC. Reverting changes.
Training on augumented user 77592 44/50 current_auc = 0.615311004784689
User 77592 AUC after training: 0.614354066985646
User 77592 does not improve AUC. Reverting changes.
Training on augumented user 74800 45/50 current_auc = 0.615311004784689
User 74800 AUC after training: 0.6148325358851674
User 74800 does not improve AUC. Reverting changes.
Training on augumented user 45719 46/50 current_auc = 0.615311004784689
User 45719 AUC after training: 0.6105263157894737
User 45719 does not improve AUC. Reverting changes.
Training on augumented user 58096 47/50 current_auc = 0.615311004784689
User 58096 AUC after training: 0.6129186602870813
User 58096 does not improve AUC. Reverting changes.
Training on augumented user 14406 48/50 current_auc = 0.615311004784689
User 14406 AUC after training: 0.6162679425837321
User 14406 improves AUC. Keeping the model.
Training on augumented user 115062 49/50 current_auc = 0.6162679425837321
User 115062 AUC after training: 0.6138755980861244
User 115062 does not improve AUC. Reverting changes.
[2024-12-02 18:05:32.205663] start test user 70875 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:32.683862] start test user 70875 51/568 recall augumented users by random, augumented_users = [97313, 136906, 64818, 99723, 82686, 78405, 8927, 41068, 59717, 75064, 59962, 51559, 112458, 78413, 95019, 100545, 52242, 73408, 130055, 34896, 15316, 100615, 33629, 52065, 7340, 45390, 131127, 69632, 59020, 70453, 70246, 31418, 129461, 129614, 79890, 34574, 92398, 62851, 111321, 89216, 55502, 22531, 106234, 75712, 43412, 106046, 99281, 115498, 76346, 19232]
[2024-12-02 18:05:32.698168] user = 70875 Cloud 51/568
[2024-12-02 18:05:32.723781] user = 70875 Local 51/568
[2024-12-02 18:05:32.769391] user = 70875 Local+ 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:35.029929] user = 70875 MPDA- 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7651131508150024
Training on augumented user 97313 0/50 current_auc = 0.7651131508150024
User 97313 AUC after training: 0.764994461148916
User 97313 does not improve AUC. Reverting changes.
Training on augumented user 136906 1/50 current_auc = 0.7651131508150024
User 136906 AUC after training: 0.765587909479348
User 136906 improves AUC. Keeping the model.
Training on augumented user 64818 2/50 current_auc = 0.765587909479348
User 64818 AUC after training: 0.7649153347048583
User 64818 does not improve AUC. Reverting changes.
Training on augumented user 99723 3/50 current_auc = 0.765587909479348
User 99723 AUC after training: 0.7652714037031175
User 99723 does not improve AUC. Reverting changes.
Training on augumented user 82686 4/50 current_auc = 0.765587909479348
User 82686 AUC after training: 0.7652714037031176
User 82686 does not improve AUC. Reverting changes.
Training on augumented user 78405 5/50 current_auc = 0.765587909479348
User 78405 AUC after training: 0.7652318404810888
User 78405 does not improve AUC. Reverting changes.
Training on augumented user 8927 6/50 current_auc = 0.765587909479348
User 8927 AUC after training: 0.7651527140370311
User 8927 does not improve AUC. Reverting changes.
Training on augumented user 41068 7/50 current_auc = 0.765587909479348
User 41068 AUC after training: 0.7650735875929736
User 41068 does not improve AUC. Reverting changes.
Training on augumented user 59717 8/50 current_auc = 0.765587909479348
User 59717 AUC after training: 0.7651131508150024
User 59717 does not improve AUC. Reverting changes.
Training on augumented user 75064 9/50 current_auc = 0.765587909479348
User 75064 AUC after training: 0.7651922772590599
User 75064 does not improve AUC. Reverting changes.
Training on augumented user 59962 10/50 current_auc = 0.765587909479348
User 59962 AUC after training: 0.7653505301471751
User 59962 does not improve AUC. Reverting changes.
Training on augumented user 51559 11/50 current_auc = 0.765587909479348
User 51559 AUC after training: 0.7652714037031176
User 51559 does not improve AUC. Reverting changes.
Training on augumented user 112458 12/50 current_auc = 0.765587909479348
User 112458 AUC after training: 0.7655483462573192
User 112458 does not improve AUC. Reverting changes.
Training on augumented user 78413 13/50 current_auc = 0.765587909479348
User 78413 AUC after training: 0.7652714037031175
User 78413 does not improve AUC. Reverting changes.
Training on augumented user 95019 14/50 current_auc = 0.765587909479348
User 95019 AUC after training: 0.7655087830352904
User 95019 does not improve AUC. Reverting changes.
Training on augumented user 100545 15/50 current_auc = 0.765587909479348
User 100545 AUC after training: 0.7654692198132615
User 100545 does not improve AUC. Reverting changes.
Training on augumented user 52242 16/50 current_auc = 0.765587909479348
User 52242 AUC after training: 0.765390093369204
User 52242 does not improve AUC. Reverting changes.
Training on augumented user 73408 17/50 current_auc = 0.765587909479348
User 73408 AUC after training: 0.7655087830352905
User 73408 does not improve AUC. Reverting changes.
Training on augumented user 130055 18/50 current_auc = 0.765587909479348
User 130055 AUC after training: 0.7653109669251464
User 130055 does not improve AUC. Reverting changes.
Training on augumented user 34896 19/50 current_auc = 0.765587909479348
User 34896 AUC after training: 0.7653900933692039
User 34896 does not improve AUC. Reverting changes.
Training on augumented user 15316 20/50 current_auc = 0.765587909479348
User 15316 AUC after training: 0.7654296565912329
User 15316 does not improve AUC. Reverting changes.
Training on augumented user 100615 21/50 current_auc = 0.765587909479348
User 100615 AUC after training: 0.7654296565912327
User 100615 does not improve AUC. Reverting changes.
Training on augumented user 33629 22/50 current_auc = 0.765587909479348
User 33629 AUC after training: 0.7654296565912327
User 33629 does not improve AUC. Reverting changes.
Training on augumented user 52065 23/50 current_auc = 0.765587909479348
User 52065 AUC after training: 0.7660231049216648
User 52065 improves AUC. Keeping the model.
Training on augumented user 7340 24/50 current_auc = 0.7660231049216648
User 7340 AUC after training: 0.7663000474758664
User 7340 improves AUC. Keeping the model.
Training on augumented user 45390 25/50 current_auc = 0.7663000474758664
User 45390 AUC after training: 0.766379173919924
User 45390 improves AUC. Keeping the model.
Training on augumented user 131127 26/50 current_auc = 0.766379173919924
User 131127 AUC after training: 0.7661417945877512
User 131127 does not improve AUC. Reverting changes.
Training on augumented user 69632 27/50 current_auc = 0.766379173919924
User 69632 AUC after training: 0.7659439784776072
User 69632 does not improve AUC. Reverting changes.
Training on augumented user 59020 28/50 current_auc = 0.766379173919924
User 59020 AUC after training: 0.7663000474758664
User 59020 does not improve AUC. Reverting changes.
Training on augumented user 70453 29/50 current_auc = 0.766379173919924
User 70453 AUC after training: 0.7664187371419529
User 70453 improves AUC. Keeping the model.
Training on augumented user 70246 30/50 current_auc = 0.7664187371419529
User 70246 AUC after training: 0.7666165532520969
User 70246 improves AUC. Keeping the model.
Training on augumented user 31418 31/50 current_auc = 0.7666165532520969
User 31418 AUC after training: 0.7666561164741256
User 31418 improves AUC. Keeping the model.
Training on augumented user 129461 32/50 current_auc = 0.7666561164741256
User 129461 AUC after training: 0.7664187371419527
User 129461 does not improve AUC. Reverting changes.
Training on augumented user 129614 33/50 current_auc = 0.7666561164741256
User 129614 AUC after training: 0.7666956796961544
User 129614 improves AUC. Keeping the model.
Training on augumented user 79890 34/50 current_auc = 0.7666956796961544
User 79890 AUC after training: 0.7667352429181832
User 79890 improves AUC. Keeping the model.
Training on augumented user 34574 35/50 current_auc = 0.7667352429181832
User 34574 AUC after training: 0.7662209210318089
User 34574 does not improve AUC. Reverting changes.
Training on augumented user 92398 36/50 current_auc = 0.7667352429181832
User 92398 AUC after training: 0.7667352429181833
User 92398 improves AUC. Keeping the model.
Training on augumented user 62851 37/50 current_auc = 0.7667352429181833
User 62851 AUC after training: 0.7667352429181833
User 62851 does not improve AUC. Reverting changes.
Training on augumented user 111321 38/50 current_auc = 0.7667352429181833
User 111321 AUC after training: 0.7668934958062984
User 111321 improves AUC. Keeping the model.
Training on augumented user 89216 39/50 current_auc = 0.7668934958062984
User 89216 AUC after training: 0.7671704383605001
User 89216 improves AUC. Keeping the model.
Training on augumented user 55502 40/50 current_auc = 0.7671704383605001
User 55502 AUC after training: 0.7668539325842697
User 55502 does not improve AUC. Reverting changes.
Training on augumented user 22531 41/50 current_auc = 0.7671704383605001
User 22531 AUC after training: 0.7672495648045576
User 22531 improves AUC. Keeping the model.
Training on augumented user 106234 42/50 current_auc = 0.7672495648045576
User 106234 AUC after training: 0.7671704383605
User 106234 does not improve AUC. Reverting changes.
Training on augumented user 75712 43/50 current_auc = 0.7672495648045576
User 75712 AUC after training: 0.7670121854723848
User 75712 does not improve AUC. Reverting changes.
Training on augumented user 43412 44/50 current_auc = 0.7672495648045576
User 43412 AUC after training: 0.7672891280265864
User 43412 improves AUC. Keeping the model.
Training on augumented user 106046 45/50 current_auc = 0.7672891280265864
User 106046 AUC after training: 0.7670517486944137
User 106046 does not improve AUC. Reverting changes.
Training on augumented user 99281 46/50 current_auc = 0.7672891280265864
User 99281 AUC after training: 0.7670517486944137
User 99281 does not improve AUC. Reverting changes.
Training on augumented user 115498 47/50 current_auc = 0.7672891280265864
User 115498 AUC after training: 0.7671308751384713
User 115498 does not improve AUC. Reverting changes.
Training on augumented user 76346 48/50 current_auc = 0.7672891280265864
User 76346 AUC after training: 0.7671704383605
User 76346 does not improve AUC. Reverting changes.
Training on augumented user 19232 49/50 current_auc = 0.7672891280265864
User 19232 AUC after training: 0.7672495648045576
User 19232 does not improve AUC. Reverting changes.
[2024-12-02 18:06:03.144706] start test user 70877 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:04.130593] start test user 70877 52/568 recall augumented users by random, augumented_users = [63827, 14201, 137714, 127991, 37015, 92976, 34740, 26802, 49768, 61743, 95474, 53826, 2073, 28943, 59981, 33139, 59713, 100131, 8099, 82692, 91220, 60086, 71245, 89766, 131777, 21373, 3263, 6891, 24532, 62606, 39219, 120677, 25312, 123222, 127107, 30650, 52360, 17513, 58283, 86391, 109693, 122724, 23908, 12033, 117616, 113595, 21802, 82541, 51855, 36130]
[2024-12-02 18:06:04.150550] user = 70877 Cloud 52/568
[2024-12-02 18:06:04.165998] user = 70877 Local 52/568
[2024-12-02 18:06:04.455750] user = 70877 Local+ 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:07.019756] user = 70877 MPDA- 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 63827 0/50 current_auc = 1.0
User 63827 AUC after training: 1.0
User 63827 does not improve AUC. Reverting changes.
Training on augumented user 14201 1/50 current_auc = 1.0
User 14201 AUC after training: 1.0
User 14201 does not improve AUC. Reverting changes.
Training on augumented user 137714 2/50 current_auc = 1.0
User 137714 AUC after training: 1.0
User 137714 does not improve AUC. Reverting changes.
Training on augumented user 127991 3/50 current_auc = 1.0
User 127991 AUC after training: 1.0
User 127991 does not improve AUC. Reverting changes.
Training on augumented user 37015 4/50 current_auc = 1.0
User 37015 AUC after training: 1.0
User 37015 does not improve AUC. Reverting changes.
Training on augumented user 92976 5/50 current_auc = 1.0
User 92976 AUC after training: 1.0
User 92976 does not improve AUC. Reverting changes.
Training on augumented user 34740 6/50 current_auc = 1.0
User 34740 AUC after training: 1.0
User 34740 does not improve AUC. Reverting changes.
Training on augumented user 26802 7/50 current_auc = 1.0
User 26802 AUC after training: 1.0
User 26802 does not improve AUC. Reverting changes.
Training on augumented user 49768 8/50 current_auc = 1.0
User 49768 AUC after training: 1.0
User 49768 does not improve AUC. Reverting changes.
Training on augumented user 61743 9/50 current_auc = 1.0
User 61743 AUC after training: 1.0
User 61743 does not improve AUC. Reverting changes.
Training on augumented user 95474 10/50 current_auc = 1.0
User 95474 AUC after training: 1.0
User 95474 does not improve AUC. Reverting changes.
Training on augumented user 53826 11/50 current_auc = 1.0
User 53826 AUC after training: 1.0
User 53826 does not improve AUC. Reverting changes.
Training on augumented user 2073 12/50 current_auc = 1.0
User 2073 AUC after training: 1.0
User 2073 does not improve AUC. Reverting changes.
Training on augumented user 28943 13/50 current_auc = 1.0
User 28943 AUC after training: 1.0
User 28943 does not improve AUC. Reverting changes.
Training on augumented user 59981 14/50 current_auc = 1.0
User 59981 AUC after training: 1.0
User 59981 does not improve AUC. Reverting changes.
Training on augumented user 33139 15/50 current_auc = 1.0
User 33139 AUC after training: 1.0
User 33139 does not improve AUC. Reverting changes.
Training on augumented user 59713 16/50 current_auc = 1.0
User 59713 AUC after training: 1.0
User 59713 does not improve AUC. Reverting changes.
Training on augumented user 100131 17/50 current_auc = 1.0
User 100131 AUC after training: 1.0
User 100131 does not improve AUC. Reverting changes.
Training on augumented user 8099 18/50 current_auc = 1.0
User 8099 AUC after training: 1.0
User 8099 does not improve AUC. Reverting changes.
Training on augumented user 82692 19/50 current_auc = 1.0
User 82692 AUC after training: 1.0
User 82692 does not improve AUC. Reverting changes.
Training on augumented user 91220 20/50 current_auc = 1.0
User 91220 AUC after training: 1.0
User 91220 does not improve AUC. Reverting changes.
Training on augumented user 60086 21/50 current_auc = 1.0
User 60086 AUC after training: 1.0
User 60086 does not improve AUC. Reverting changes.
Training on augumented user 71245 22/50 current_auc = 1.0
User 71245 AUC after training: 1.0
User 71245 does not improve AUC. Reverting changes.
Training on augumented user 89766 23/50 current_auc = 1.0
User 89766 AUC after training: 1.0
User 89766 does not improve AUC. Reverting changes.
Training on augumented user 131777 24/50 current_auc = 1.0
User 131777 AUC after training: 1.0
User 131777 does not improve AUC. Reverting changes.
Training on augumented user 21373 25/50 current_auc = 1.0
User 21373 AUC after training: 1.0
User 21373 does not improve AUC. Reverting changes.
Training on augumented user 3263 26/50 current_auc = 1.0
User 3263 AUC after training: 1.0
User 3263 does not improve AUC. Reverting changes.
Training on augumented user 6891 27/50 current_auc = 1.0
User 6891 AUC after training: 1.0
User 6891 does not improve AUC. Reverting changes.
Training on augumented user 24532 28/50 current_auc = 1.0
User 24532 AUC after training: 1.0
User 24532 does not improve AUC. Reverting changes.
Training on augumented user 62606 29/50 current_auc = 1.0
User 62606 AUC after training: 1.0
User 62606 does not improve AUC. Reverting changes.
Training on augumented user 39219 30/50 current_auc = 1.0
User 39219 AUC after training: 1.0
User 39219 does not improve AUC. Reverting changes.
Training on augumented user 120677 31/50 current_auc = 1.0
User 120677 AUC after training: 1.0
User 120677 does not improve AUC. Reverting changes.
Training on augumented user 25312 32/50 current_auc = 1.0
User 25312 AUC after training: 1.0
User 25312 does not improve AUC. Reverting changes.
Training on augumented user 123222 33/50 current_auc = 1.0
User 123222 AUC after training: 1.0
User 123222 does not improve AUC. Reverting changes.
Training on augumented user 127107 34/50 current_auc = 1.0
User 127107 AUC after training: 1.0
User 127107 does not improve AUC. Reverting changes.
Training on augumented user 30650 35/50 current_auc = 1.0
User 30650 AUC after training: 1.0
User 30650 does not improve AUC. Reverting changes.
Training on augumented user 52360 36/50 current_auc = 1.0
User 52360 AUC after training: 1.0
User 52360 does not improve AUC. Reverting changes.
Training on augumented user 17513 37/50 current_auc = 1.0
User 17513 AUC after training: 1.0
User 17513 does not improve AUC. Reverting changes.
Training on augumented user 58283 38/50 current_auc = 1.0
User 58283 AUC after training: 1.0
User 58283 does not improve AUC. Reverting changes.
Training on augumented user 86391 39/50 current_auc = 1.0
User 86391 AUC after training: 1.0
User 86391 does not improve AUC. Reverting changes.
Training on augumented user 109693 40/50 current_auc = 1.0
User 109693 AUC after training: 1.0
User 109693 does not improve AUC. Reverting changes.
Training on augumented user 122724 41/50 current_auc = 1.0
User 122724 AUC after training: 1.0
User 122724 does not improve AUC. Reverting changes.
Training on augumented user 23908 42/50 current_auc = 1.0
User 23908 AUC after training: 1.0
User 23908 does not improve AUC. Reverting changes.
Training on augumented user 12033 43/50 current_auc = 1.0
User 12033 AUC after training: 1.0
User 12033 does not improve AUC. Reverting changes.
Training on augumented user 117616 44/50 current_auc = 1.0
User 117616 AUC after training: 1.0
User 117616 does not improve AUC. Reverting changes.
Training on augumented user 113595 45/50 current_auc = 1.0
User 113595 AUC after training: 1.0
User 113595 does not improve AUC. Reverting changes.
Training on augumented user 21802 46/50 current_auc = 1.0
User 21802 AUC after training: 1.0
User 21802 does not improve AUC. Reverting changes.
Training on augumented user 82541 47/50 current_auc = 1.0
User 82541 AUC after training: 1.0
User 82541 does not improve AUC. Reverting changes.
Training on augumented user 51855 48/50 current_auc = 1.0
User 51855 AUC after training: 1.0
User 51855 does not improve AUC. Reverting changes.
Training on augumented user 36130 49/50 current_auc = 1.0
User 36130 AUC after training: 1.0
User 36130 does not improve AUC. Reverting changes.
[2024-12-02 18:06:36.049720] start test user 70883 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:36.474709] start test user 70883 53/568 recall augumented users by random, augumented_users = [77454, 60366, 79152, 26027, 65578, 120723, 93341, 26759, 138144, 51617, 16332, 127209, 133696, 44968, 935, 55999, 86201, 23341, 132916, 102632, 23956, 34860, 120725, 124166, 101886, 106866, 114021, 62081, 44690, 11556, 136485, 105414, 34934, 66691, 28878, 80004, 2541, 117292, 104122, 102949, 24373, 70273, 105826, 24840, 39249, 17701, 80936, 9643, 5014, 14664]
[2024-12-02 18:06:36.491717] user = 70883 Cloud 53/568
[2024-12-02 18:06:36.502361] user = 70883 Local 53/568
[2024-12-02 18:06:36.661692] user = 70883 Local+ 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:38.119626] user = 70883 MPDA- 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4649122807017544
Training on augumented user 77454 0/50 current_auc = 0.4649122807017544
User 77454 AUC after training: 0.4649122807017544
User 77454 does not improve AUC. Reverting changes.
Training on augumented user 60366 1/50 current_auc = 0.4649122807017544
User 60366 AUC after training: 0.4649122807017544
User 60366 does not improve AUC. Reverting changes.
Training on augumented user 79152 2/50 current_auc = 0.4649122807017544
User 79152 AUC after training: 0.4649122807017544
User 79152 does not improve AUC. Reverting changes.
Training on augumented user 26027 3/50 current_auc = 0.4649122807017544
User 26027 AUC after training: 0.4649122807017544
User 26027 does not improve AUC. Reverting changes.
Training on augumented user 65578 4/50 current_auc = 0.4649122807017544
User 65578 AUC after training: 0.46783625730994155
User 65578 improves AUC. Keeping the model.
Training on augumented user 120723 5/50 current_auc = 0.46783625730994155
User 120723 AUC after training: 0.4649122807017544
User 120723 does not improve AUC. Reverting changes.
Training on augumented user 93341 6/50 current_auc = 0.46783625730994155
User 93341 AUC after training: 0.4649122807017544
User 93341 does not improve AUC. Reverting changes.
Training on augumented user 26759 7/50 current_auc = 0.46783625730994155
User 26759 AUC after training: 0.46783625730994155
User 26759 does not improve AUC. Reverting changes.
Training on augumented user 138144 8/50 current_auc = 0.46783625730994155
User 138144 AUC after training: 0.4590643274853802
User 138144 does not improve AUC. Reverting changes.
Training on augumented user 51617 9/50 current_auc = 0.46783625730994155
User 51617 AUC after training: 0.46783625730994155
User 51617 does not improve AUC. Reverting changes.
Training on augumented user 16332 10/50 current_auc = 0.46783625730994155
User 16332 AUC after training: 0.46783625730994155
User 16332 does not improve AUC. Reverting changes.
Training on augumented user 127209 11/50 current_auc = 0.46783625730994155
User 127209 AUC after training: 0.4649122807017544
User 127209 does not improve AUC. Reverting changes.
Training on augumented user 133696 12/50 current_auc = 0.46783625730994155
User 133696 AUC after training: 0.46783625730994155
User 133696 does not improve AUC. Reverting changes.
Training on augumented user 44968 13/50 current_auc = 0.46783625730994155
User 44968 AUC after training: 0.4649122807017544
User 44968 does not improve AUC. Reverting changes.
Training on augumented user 935 14/50 current_auc = 0.46783625730994155
User 935 AUC after training: 0.4590643274853801
User 935 does not improve AUC. Reverting changes.
Training on augumented user 55999 15/50 current_auc = 0.46783625730994155
User 55999 AUC after training: 0.46783625730994155
User 55999 does not improve AUC. Reverting changes.
Training on augumented user 86201 16/50 current_auc = 0.46783625730994155
User 86201 AUC after training: 0.4649122807017544
User 86201 does not improve AUC. Reverting changes.
Training on augumented user 23341 17/50 current_auc = 0.46783625730994155
User 23341 AUC after training: 0.4649122807017544
User 23341 does not improve AUC. Reverting changes.
Training on augumented user 132916 18/50 current_auc = 0.46783625730994155
User 132916 AUC after training: 0.4649122807017544
User 132916 does not improve AUC. Reverting changes.
Training on augumented user 102632 19/50 current_auc = 0.46783625730994155
User 102632 AUC after training: 0.4649122807017544
User 102632 does not improve AUC. Reverting changes.
Training on augumented user 23956 20/50 current_auc = 0.46783625730994155
User 23956 AUC after training: 0.4649122807017544
User 23956 does not improve AUC. Reverting changes.
Training on augumented user 34860 21/50 current_auc = 0.46783625730994155
User 34860 AUC after training: 0.46783625730994155
User 34860 does not improve AUC. Reverting changes.
Training on augumented user 120725 22/50 current_auc = 0.46783625730994155
User 120725 AUC after training: 0.46783625730994155
User 120725 does not improve AUC. Reverting changes.
Training on augumented user 124166 23/50 current_auc = 0.46783625730994155
User 124166 AUC after training: 0.46783625730994155
User 124166 does not improve AUC. Reverting changes.
Training on augumented user 101886 24/50 current_auc = 0.46783625730994155
User 101886 AUC after training: 0.4649122807017544
User 101886 does not improve AUC. Reverting changes.
Training on augumented user 106866 25/50 current_auc = 0.46783625730994155
User 106866 AUC after training: 0.4649122807017544
User 106866 does not improve AUC. Reverting changes.
Training on augumented user 114021 26/50 current_auc = 0.46783625730994155
User 114021 AUC after training: 0.4649122807017544
User 114021 does not improve AUC. Reverting changes.
Training on augumented user 62081 27/50 current_auc = 0.46783625730994155
User 62081 AUC after training: 0.4649122807017544
User 62081 does not improve AUC. Reverting changes.
Training on augumented user 44690 28/50 current_auc = 0.46783625730994155
User 44690 AUC after training: 0.46783625730994155
User 44690 does not improve AUC. Reverting changes.
Training on augumented user 11556 29/50 current_auc = 0.46783625730994155
User 11556 AUC after training: 0.46783625730994155
User 11556 does not improve AUC. Reverting changes.
Training on augumented user 136485 30/50 current_auc = 0.46783625730994155
User 136485 AUC after training: 0.4649122807017544
User 136485 does not improve AUC. Reverting changes.
Training on augumented user 105414 31/50 current_auc = 0.46783625730994155
User 105414 AUC after training: 0.4590643274853801
User 105414 does not improve AUC. Reverting changes.
Training on augumented user 34934 32/50 current_auc = 0.46783625730994155
User 34934 AUC after training: 0.46783625730994155
User 34934 does not improve AUC. Reverting changes.
Training on augumented user 66691 33/50 current_auc = 0.46783625730994155
User 66691 AUC after training: 0.4649122807017544
User 66691 does not improve AUC. Reverting changes.
Training on augumented user 28878 34/50 current_auc = 0.46783625730994155
User 28878 AUC after training: 0.4649122807017544
User 28878 does not improve AUC. Reverting changes.
Training on augumented user 80004 35/50 current_auc = 0.46783625730994155
User 80004 AUC after training: 0.4649122807017544
User 80004 does not improve AUC. Reverting changes.
Training on augumented user 2541 36/50 current_auc = 0.46783625730994155
User 2541 AUC after training: 0.4649122807017544
User 2541 does not improve AUC. Reverting changes.
Training on augumented user 117292 37/50 current_auc = 0.46783625730994155
User 117292 AUC after training: 0.46783625730994155
User 117292 does not improve AUC. Reverting changes.
Training on augumented user 104122 38/50 current_auc = 0.46783625730994155
User 104122 AUC after training: 0.4649122807017544
User 104122 does not improve AUC. Reverting changes.
Training on augumented user 102949 39/50 current_auc = 0.46783625730994155
User 102949 AUC after training: 0.4678362573099415
User 102949 does not improve AUC. Reverting changes.
Training on augumented user 24373 40/50 current_auc = 0.46783625730994155
User 24373 AUC after training: 0.4649122807017544
User 24373 does not improve AUC. Reverting changes.
Training on augumented user 70273 41/50 current_auc = 0.46783625730994155
User 70273 AUC after training: 0.4649122807017544
User 70273 does not improve AUC. Reverting changes.
Training on augumented user 105826 42/50 current_auc = 0.46783625730994155
User 105826 AUC after training: 0.46783625730994155
User 105826 does not improve AUC. Reverting changes.
Training on augumented user 24840 43/50 current_auc = 0.46783625730994155
User 24840 AUC after training: 0.4649122807017544
User 24840 does not improve AUC. Reverting changes.
Training on augumented user 39249 44/50 current_auc = 0.46783625730994155
User 39249 AUC after training: 0.47076023391812866
User 39249 improves AUC. Keeping the model.
Training on augumented user 17701 45/50 current_auc = 0.47076023391812866
User 17701 AUC after training: 0.47076023391812866
User 17701 does not improve AUC. Reverting changes.
Training on augumented user 80936 46/50 current_auc = 0.47076023391812866
User 80936 AUC after training: 0.47076023391812866
User 80936 does not improve AUC. Reverting changes.
Training on augumented user 9643 47/50 current_auc = 0.47076023391812866
User 9643 AUC after training: 0.47076023391812866
User 9643 does not improve AUC. Reverting changes.
Training on augumented user 5014 48/50 current_auc = 0.47076023391812866
User 5014 AUC after training: 0.4619883040935673
User 5014 does not improve AUC. Reverting changes.
Training on augumented user 14664 49/50 current_auc = 0.47076023391812866
User 14664 AUC after training: 0.4678362573099415
User 14664 does not improve AUC. Reverting changes.
[2024-12-02 18:07:08.753351] start test user 70887 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:09.148518] start test user 70887 54/568 recall augumented users by random, augumented_users = [74587, 29339, 133345, 134314, 94585, 120624, 87326, 26022, 52988, 115441, 78755, 52992, 76074, 127945, 48969, 111108, 10008, 6849, 109601, 97675, 131361, 90086, 51776, 15311, 54285, 36486, 4351, 130699, 92624, 87095, 59653, 123990, 115331, 114887, 44463, 134332, 7515, 64205, 81232, 110287, 7217, 49495, 8226, 77224, 15765, 67392, 72435, 107900, 32183, 110831]
[2024-12-02 18:07:09.163898] user = 70887 Cloud 54/568
[2024-12-02 18:07:09.181995] user = 70887 Local 54/568
[2024-12-02 18:07:09.248286] user = 70887 Local+ 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:11.073557] user = 70887 MPDA- 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6046626984126985
Training on augumented user 74587 0/50 current_auc = 0.6046626984126985
User 74587 AUC after training: 0.6036706349206349
User 74587 does not improve AUC. Reverting changes.
Training on augumented user 29339 1/50 current_auc = 0.6046626984126985
User 29339 AUC after training: 0.6016865079365079
User 29339 does not improve AUC. Reverting changes.
Training on augumented user 133345 2/50 current_auc = 0.6046626984126985
User 133345 AUC after training: 0.6036706349206349
User 133345 does not improve AUC. Reverting changes.
Training on augumented user 134314 3/50 current_auc = 0.6046626984126985
User 134314 AUC after training: 0.6056547619047619
User 134314 improves AUC. Keeping the model.
Training on augumented user 94585 4/50 current_auc = 0.6056547619047619
User 94585 AUC after training: 0.6056547619047619
User 94585 does not improve AUC. Reverting changes.
Training on augumented user 120624 5/50 current_auc = 0.6056547619047619
User 120624 AUC after training: 0.6051587301587301
User 120624 does not improve AUC. Reverting changes.
Training on augumented user 87326 6/50 current_auc = 0.6056547619047619
User 87326 AUC after training: 0.603670634920635
User 87326 does not improve AUC. Reverting changes.
Training on augumented user 26022 7/50 current_auc = 0.6056547619047619
User 26022 AUC after training: 0.6066468253968254
User 26022 improves AUC. Keeping the model.
Training on augumented user 52988 8/50 current_auc = 0.6066468253968254
User 52988 AUC after training: 0.6061507936507936
User 52988 does not improve AUC. Reverting changes.
Training on augumented user 115441 9/50 current_auc = 0.6066468253968254
User 115441 AUC after training: 0.6061507936507936
User 115441 does not improve AUC. Reverting changes.
Training on augumented user 78755 10/50 current_auc = 0.6066468253968254
User 78755 AUC after training: 0.6051587301587302
User 78755 does not improve AUC. Reverting changes.
Training on augumented user 52992 11/50 current_auc = 0.6066468253968254
User 52992 AUC after training: 0.6036706349206349
User 52992 does not improve AUC. Reverting changes.
Training on augumented user 76074 12/50 current_auc = 0.6066468253968254
User 76074 AUC after training: 0.6061507936507936
User 76074 does not improve AUC. Reverting changes.
Training on augumented user 127945 13/50 current_auc = 0.6066468253968254
User 127945 AUC after training: 0.605654761904762
User 127945 does not improve AUC. Reverting changes.
Training on augumented user 48969 14/50 current_auc = 0.6066468253968254
User 48969 AUC after training: 0.6056547619047619
User 48969 does not improve AUC. Reverting changes.
Training on augumented user 111108 15/50 current_auc = 0.6066468253968254
User 111108 AUC after training: 0.6071428571428571
User 111108 improves AUC. Keeping the model.
Training on augumented user 10008 16/50 current_auc = 0.6071428571428571
User 10008 AUC after training: 0.6066468253968254
User 10008 does not improve AUC. Reverting changes.
Training on augumented user 6849 17/50 current_auc = 0.6071428571428571
User 6849 AUC after training: 0.6071428571428572
User 6849 improves AUC. Keeping the model.
Training on augumented user 109601 18/50 current_auc = 0.6071428571428572
User 109601 AUC after training: 0.6066468253968255
User 109601 does not improve AUC. Reverting changes.
Training on augumented user 97675 19/50 current_auc = 0.6071428571428572
User 97675 AUC after training: 0.6061507936507937
User 97675 does not improve AUC. Reverting changes.
Training on augumented user 131361 20/50 current_auc = 0.6071428571428572
User 131361 AUC after training: 0.6056547619047619
User 131361 does not improve AUC. Reverting changes.
Training on augumented user 90086 21/50 current_auc = 0.6071428571428572
User 90086 AUC after training: 0.6051587301587302
User 90086 does not improve AUC. Reverting changes.
Training on augumented user 51776 22/50 current_auc = 0.6071428571428572
User 51776 AUC after training: 0.6056547619047619
User 51776 does not improve AUC. Reverting changes.
Training on augumented user 15311 23/50 current_auc = 0.6071428571428572
User 15311 AUC after training: 0.6066468253968254
User 15311 does not improve AUC. Reverting changes.
Training on augumented user 54285 24/50 current_auc = 0.6071428571428572
User 54285 AUC after training: 0.6051587301587302
User 54285 does not improve AUC. Reverting changes.
Training on augumented user 36486 25/50 current_auc = 0.6071428571428572
User 36486 AUC after training: 0.6066468253968254
User 36486 does not improve AUC. Reverting changes.
Training on augumented user 4351 26/50 current_auc = 0.6071428571428572
User 4351 AUC after training: 0.6051587301587302
User 4351 does not improve AUC. Reverting changes.
Training on augumented user 130699 27/50 current_auc = 0.6071428571428572
User 130699 AUC after training: 0.6051587301587302
User 130699 does not improve AUC. Reverting changes.
Training on augumented user 92624 28/50 current_auc = 0.6071428571428572
User 92624 AUC after training: 0.6061507936507937
User 92624 does not improve AUC. Reverting changes.
Training on augumented user 87095 29/50 current_auc = 0.6071428571428572
User 87095 AUC after training: 0.6041666666666666
User 87095 does not improve AUC. Reverting changes.
Training on augumented user 59653 30/50 current_auc = 0.6071428571428572
User 59653 AUC after training: 0.6061507936507937
User 59653 does not improve AUC. Reverting changes.
Training on augumented user 123990 31/50 current_auc = 0.6071428571428572
User 123990 AUC after training: 0.6066468253968254
User 123990 does not improve AUC. Reverting changes.
Training on augumented user 115331 32/50 current_auc = 0.6071428571428572
User 115331 AUC after training: 0.6066468253968254
User 115331 does not improve AUC. Reverting changes.
Training on augumented user 114887 33/50 current_auc = 0.6071428571428572
User 114887 AUC after training: 0.6066468253968254
User 114887 does not improve AUC. Reverting changes.
Training on augumented user 44463 34/50 current_auc = 0.6071428571428572
User 44463 AUC after training: 0.6071428571428572
User 44463 does not improve AUC. Reverting changes.
Training on augumented user 134332 35/50 current_auc = 0.6071428571428572
User 134332 AUC after training: 0.6056547619047619
User 134332 does not improve AUC. Reverting changes.
Training on augumented user 7515 36/50 current_auc = 0.6071428571428572
User 7515 AUC after training: 0.6061507936507936
User 7515 does not improve AUC. Reverting changes.
Training on augumented user 64205 37/50 current_auc = 0.6071428571428572
User 64205 AUC after training: 0.6066468253968254
User 64205 does not improve AUC. Reverting changes.
Training on augumented user 81232 38/50 current_auc = 0.6071428571428572
User 81232 AUC after training: 0.6056547619047619
User 81232 does not improve AUC. Reverting changes.
Training on augumented user 110287 39/50 current_auc = 0.6071428571428572
User 110287 AUC after training: 0.6056547619047619
User 110287 does not improve AUC. Reverting changes.
Training on augumented user 7217 40/50 current_auc = 0.6071428571428572
User 7217 AUC after training: 0.6066468253968254
User 7217 does not improve AUC. Reverting changes.
Training on augumented user 49495 41/50 current_auc = 0.6071428571428572
User 49495 AUC after training: 0.6061507936507937
User 49495 does not improve AUC. Reverting changes.
Training on augumented user 8226 42/50 current_auc = 0.6071428571428572
User 8226 AUC after training: 0.6061507936507936
User 8226 does not improve AUC. Reverting changes.
Training on augumented user 77224 43/50 current_auc = 0.6071428571428572
User 77224 AUC after training: 0.6061507936507937
User 77224 does not improve AUC. Reverting changes.
Training on augumented user 15765 44/50 current_auc = 0.6071428571428572
User 15765 AUC after training: 0.6041666666666666
User 15765 does not improve AUC. Reverting changes.
Training on augumented user 67392 45/50 current_auc = 0.6071428571428572
User 67392 AUC after training: 0.6051587301587301
User 67392 does not improve AUC. Reverting changes.
Training on augumented user 72435 46/50 current_auc = 0.6071428571428572
User 72435 AUC after training: 0.6071428571428572
User 72435 does not improve AUC. Reverting changes.
Training on augumented user 107900 47/50 current_auc = 0.6071428571428572
User 107900 AUC after training: 0.6066468253968254
User 107900 does not improve AUC. Reverting changes.
Training on augumented user 32183 48/50 current_auc = 0.6071428571428572
User 32183 AUC after training: 0.6071428571428572
User 32183 does not improve AUC. Reverting changes.
Training on augumented user 110831 49/50 current_auc = 0.6071428571428572
User 110831 AUC after training: 0.6046626984126984
User 110831 does not improve AUC. Reverting changes.
[2024-12-02 18:07:34.978278] start test user 70889 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:35.533469] start test user 70889 55/568 recall augumented users by random, augumented_users = [138463, 108213, 104348, 111090, 133140, 110854, 103673, 65598, 42712, 135648, 72372, 63226, 109011, 54285, 22206, 93183, 57746, 6922, 106370, 49100, 115174, 51529, 80556, 18343, 17672, 67749, 5178, 73309, 39841, 7526, 95410, 108391, 113344, 34250, 17832, 126041, 102368, 6117, 119654, 137267, 35441, 75019, 55440, 53170, 96259, 41805, 32162, 86433, 106750, 43655]
[2024-12-02 18:07:35.557378] user = 70889 Cloud 55/568
[2024-12-02 18:07:35.624997] user = 70889 Local 55/568
[2024-12-02 18:07:35.787796] user = 70889 Local+ 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:38.866767] user = 70889 MPDA- 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.743103448275862
Training on augumented user 138463 0/50 current_auc = 0.743103448275862
User 138463 AUC after training: 0.7429802955665026
User 138463 does not improve AUC. Reverting changes.
Training on augumented user 108213 1/50 current_auc = 0.743103448275862
User 108213 AUC after training: 0.7430418719211822
User 108213 does not improve AUC. Reverting changes.
Training on augumented user 104348 2/50 current_auc = 0.743103448275862
User 104348 AUC after training: 0.7435344827586207
User 104348 improves AUC. Keeping the model.
Training on augumented user 111090 3/50 current_auc = 0.7435344827586207
User 111090 AUC after training: 0.7433497536945813
User 111090 does not improve AUC. Reverting changes.
Training on augumented user 133140 4/50 current_auc = 0.7435344827586207
User 133140 AUC after training: 0.7435960591133005
User 133140 improves AUC. Keeping the model.
Training on augumented user 110854 5/50 current_auc = 0.7435960591133005
User 110854 AUC after training: 0.7434729064039408
User 110854 does not improve AUC. Reverting changes.
Training on augumented user 103673 6/50 current_auc = 0.7435960591133005
User 103673 AUC after training: 0.7426724137931034
User 103673 does not improve AUC. Reverting changes.
Training on augumented user 65598 7/50 current_auc = 0.7435960591133005
User 65598 AUC after training: 0.7431650246305419
User 65598 does not improve AUC. Reverting changes.
Training on augumented user 42712 8/50 current_auc = 0.7435960591133005
User 42712 AUC after training: 0.7434113300492612
User 42712 does not improve AUC. Reverting changes.
Training on augumented user 135648 9/50 current_auc = 0.7435960591133005
User 135648 AUC after training: 0.7437192118226601
User 135648 improves AUC. Keeping the model.
Training on augumented user 72372 10/50 current_auc = 0.7437192118226601
User 72372 AUC after training: 0.7436576354679804
User 72372 does not improve AUC. Reverting changes.
Training on augumented user 63226 11/50 current_auc = 0.7437192118226601
User 63226 AUC after training: 0.7433497536945813
User 63226 does not improve AUC. Reverting changes.
Training on augumented user 109011 12/50 current_auc = 0.7437192118226601
User 109011 AUC after training: 0.7434113300492612
User 109011 does not improve AUC. Reverting changes.
Training on augumented user 54285 13/50 current_auc = 0.7437192118226601
User 54285 AUC after training: 0.7436576354679804
User 54285 does not improve AUC. Reverting changes.
Training on augumented user 22206 14/50 current_auc = 0.7437192118226601
User 22206 AUC after training: 0.7433497536945813
User 22206 does not improve AUC. Reverting changes.
Training on augumented user 93183 15/50 current_auc = 0.7437192118226601
User 93183 AUC after training: 0.7434729064039409
User 93183 does not improve AUC. Reverting changes.
Training on augumented user 57746 16/50 current_auc = 0.7437192118226601
User 57746 AUC after training: 0.7433497536945813
User 57746 does not improve AUC. Reverting changes.
Training on augumented user 6922 17/50 current_auc = 0.7437192118226601
User 6922 AUC after training: 0.7433497536945813
User 6922 does not improve AUC. Reverting changes.
Training on augumented user 106370 18/50 current_auc = 0.7437192118226601
User 106370 AUC after training: 0.74378078817734
User 106370 improves AUC. Keeping the model.
Training on augumented user 49100 19/50 current_auc = 0.74378078817734
User 49100 AUC after training: 0.7436576354679802
User 49100 does not improve AUC. Reverting changes.
Training on augumented user 115174 20/50 current_auc = 0.74378078817734
User 115174 AUC after training: 0.7438423645320197
User 115174 improves AUC. Keeping the model.
Training on augumented user 51529 21/50 current_auc = 0.7438423645320197
User 51529 AUC after training: 0.7436576354679804
User 51529 does not improve AUC. Reverting changes.
Training on augumented user 80556 22/50 current_auc = 0.7438423645320197
User 80556 AUC after training: 0.7437192118226601
User 80556 does not improve AUC. Reverting changes.
Training on augumented user 18343 23/50 current_auc = 0.7438423645320197
User 18343 AUC after training: 0.7439039408866994
User 18343 improves AUC. Keeping the model.
Training on augumented user 17672 24/50 current_auc = 0.7439039408866994
User 17672 AUC after training: 0.7437807881773398
User 17672 does not improve AUC. Reverting changes.
Training on augumented user 67749 25/50 current_auc = 0.7439039408866994
User 67749 AUC after training: 0.7432266009852216
User 67749 does not improve AUC. Reverting changes.
Training on augumented user 5178 26/50 current_auc = 0.7439039408866994
User 5178 AUC after training: 0.7436576354679804
User 5178 does not improve AUC. Reverting changes.
Training on augumented user 73309 27/50 current_auc = 0.7439039408866994
User 73309 AUC after training: 0.7438423645320197
User 73309 does not improve AUC. Reverting changes.
Training on augumented user 39841 28/50 current_auc = 0.7439039408866994
User 39841 AUC after training: 0.7440270935960591
User 39841 improves AUC. Keeping the model.
Training on augumented user 7526 29/50 current_auc = 0.7440270935960591
User 7526 AUC after training: 0.7435344827586207
User 7526 does not improve AUC. Reverting changes.
Training on augumented user 95410 30/50 current_auc = 0.7440270935960591
User 95410 AUC after training: 0.7429802955665025
User 95410 does not improve AUC. Reverting changes.
Training on augumented user 108391 31/50 current_auc = 0.7440270935960591
User 108391 AUC after training: 0.744027093596059
User 108391 does not improve AUC. Reverting changes.
Training on augumented user 113344 32/50 current_auc = 0.7440270935960591
User 113344 AUC after training: 0.74378078817734
User 113344 does not improve AUC. Reverting changes.
Training on augumented user 34250 33/50 current_auc = 0.7440270935960591
User 34250 AUC after training: 0.7437192118226601
User 34250 does not improve AUC. Reverting changes.
Training on augumented user 17832 34/50 current_auc = 0.7440270935960591
User 17832 AUC after training: 0.7435344827586207
User 17832 does not improve AUC. Reverting changes.
Training on augumented user 126041 35/50 current_auc = 0.7440270935960591
User 126041 AUC after training: 0.7434729064039409
User 126041 does not improve AUC. Reverting changes.
Training on augumented user 102368 36/50 current_auc = 0.7440270935960591
User 102368 AUC after training: 0.7435960591133005
User 102368 does not improve AUC. Reverting changes.
Training on augumented user 6117 37/50 current_auc = 0.7440270935960591
User 6117 AUC after training: 0.7435960591133005
User 6117 does not improve AUC. Reverting changes.
Training on augumented user 119654 38/50 current_auc = 0.7440270935960591
User 119654 AUC after training: 0.7443349753694581
User 119654 improves AUC. Keeping the model.
Training on augumented user 137267 39/50 current_auc = 0.7443349753694581
User 137267 AUC after training: 0.7441502463054187
User 137267 does not improve AUC. Reverting changes.
Training on augumented user 35441 40/50 current_auc = 0.7443349753694581
User 35441 AUC after training: 0.7448275862068966
User 35441 improves AUC. Keeping the model.
Training on augumented user 75019 41/50 current_auc = 0.7448275862068966
User 75019 AUC after training: 0.7448891625615763
User 75019 improves AUC. Keeping the model.
Training on augumented user 55440 42/50 current_auc = 0.7448891625615763
User 55440 AUC after training: 0.7447044334975369
User 55440 does not improve AUC. Reverting changes.
Training on augumented user 53170 43/50 current_auc = 0.7448891625615763
User 53170 AUC after training: 0.7447660098522167
User 53170 does not improve AUC. Reverting changes.
Training on augumented user 96259 44/50 current_auc = 0.7448891625615763
User 96259 AUC after training: 0.7447660098522167
User 96259 does not improve AUC. Reverting changes.
Training on augumented user 41805 45/50 current_auc = 0.7448891625615763
User 41805 AUC after training: 0.7448891625615763
User 41805 does not improve AUC. Reverting changes.
Training on augumented user 32162 46/50 current_auc = 0.7448891625615763
User 32162 AUC after training: 0.7442733990147783
User 32162 does not improve AUC. Reverting changes.
Training on augumented user 86433 47/50 current_auc = 0.7448891625615763
User 86433 AUC after training: 0.7445812807881774
User 86433 does not improve AUC. Reverting changes.
Training on augumented user 106750 48/50 current_auc = 0.7448891625615763
User 106750 AUC after training: 0.7451354679802955
User 106750 improves AUC. Keeping the model.
Training on augumented user 43655 49/50 current_auc = 0.7451354679802955
User 43655 AUC after training: 0.7448275862068966
User 43655 does not improve AUC. Reverting changes.
[2024-12-02 18:08:00.196436] start test user 70895 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:00.887227] start test user 70895 56/568 recall augumented users by random, augumented_users = [38234, 3379, 86059, 12652, 106279, 34636, 62508, 106890, 107085, 28248, 80213, 116595, 39334, 137097, 33301, 118322, 126761, 89459, 31496, 22480, 118546, 18755, 79100, 3441, 13009, 34796, 76552, 119684, 13630, 110424, 3791, 72766, 98888, 43228, 84388, 75539, 125428, 90737, 89234, 117013, 7052, 22097, 46435, 78079, 58410, 89397, 44209, 40992, 99452, 99012]
[2024-12-02 18:08:00.901752] user = 70895 Cloud 56/568
[2024-12-02 18:08:00.912078] user = 70895 Local 56/568
[2024-12-02 18:08:00.931741] user = 70895 Local+ 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:02.708527] user = 70895 MPDA- 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5848214285714286
Training on augumented user 38234 0/50 current_auc = 0.5848214285714286
User 38234 AUC after training: 0.5830357142857143
User 38234 does not improve AUC. Reverting changes.
Training on augumented user 3379 1/50 current_auc = 0.5848214285714286
User 3379 AUC after training: 0.58125
User 3379 does not improve AUC. Reverting changes.
Training on augumented user 86059 2/50 current_auc = 0.5848214285714286
User 86059 AUC after training: 0.58125
User 86059 does not improve AUC. Reverting changes.
Training on augumented user 12652 3/50 current_auc = 0.5848214285714286
User 12652 AUC after training: 0.5848214285714286
User 12652 does not improve AUC. Reverting changes.
Training on augumented user 106279 4/50 current_auc = 0.5848214285714286
User 106279 AUC after training: 0.5848214285714286
User 106279 does not improve AUC. Reverting changes.
Training on augumented user 34636 5/50 current_auc = 0.5848214285714286
User 34636 AUC after training: 0.5830357142857143
User 34636 does not improve AUC. Reverting changes.
Training on augumented user 62508 6/50 current_auc = 0.5848214285714286
User 62508 AUC after training: 0.5848214285714286
User 62508 does not improve AUC. Reverting changes.
Training on augumented user 106890 7/50 current_auc = 0.5848214285714286
User 106890 AUC after training: 0.5794642857142858
User 106890 does not improve AUC. Reverting changes.
Training on augumented user 107085 8/50 current_auc = 0.5848214285714286
User 107085 AUC after training: 0.5848214285714286
User 107085 does not improve AUC. Reverting changes.
Training on augumented user 28248 9/50 current_auc = 0.5848214285714286
User 28248 AUC after training: 0.58125
User 28248 does not improve AUC. Reverting changes.
Training on augumented user 80213 10/50 current_auc = 0.5848214285714286
User 80213 AUC after training: 0.58125
User 80213 does not improve AUC. Reverting changes.
Training on augumented user 116595 11/50 current_auc = 0.5848214285714286
User 116595 AUC after training: 0.5830357142857143
User 116595 does not improve AUC. Reverting changes.
Training on augumented user 39334 12/50 current_auc = 0.5848214285714286
User 39334 AUC after training: 0.5830357142857143
User 39334 does not improve AUC. Reverting changes.
Training on augumented user 137097 13/50 current_auc = 0.5848214285714286
User 137097 AUC after training: 0.58125
User 137097 does not improve AUC. Reverting changes.
Training on augumented user 33301 14/50 current_auc = 0.5848214285714286
User 33301 AUC after training: 0.58125
User 33301 does not improve AUC. Reverting changes.
Training on augumented user 118322 15/50 current_auc = 0.5848214285714286
User 118322 AUC after training: 0.5830357142857143
User 118322 does not improve AUC. Reverting changes.
Training on augumented user 126761 16/50 current_auc = 0.5848214285714286
User 126761 AUC after training: 0.5776785714285715
User 126761 does not improve AUC. Reverting changes.
Training on augumented user 89459 17/50 current_auc = 0.5848214285714286
User 89459 AUC after training: 0.58125
User 89459 does not improve AUC. Reverting changes.
Training on augumented user 31496 18/50 current_auc = 0.5848214285714286
User 31496 AUC after training: 0.58125
User 31496 does not improve AUC. Reverting changes.
Training on augumented user 22480 19/50 current_auc = 0.5848214285714286
User 22480 AUC after training: 0.5794642857142858
User 22480 does not improve AUC. Reverting changes.
Training on augumented user 118546 20/50 current_auc = 0.5848214285714286
User 118546 AUC after training: 0.58125
User 118546 does not improve AUC. Reverting changes.
Training on augumented user 18755 21/50 current_auc = 0.5848214285714286
User 18755 AUC after training: 0.5830357142857143
User 18755 does not improve AUC. Reverting changes.
Training on augumented user 79100 22/50 current_auc = 0.5848214285714286
User 79100 AUC after training: 0.58125
User 79100 does not improve AUC. Reverting changes.
Training on augumented user 3441 23/50 current_auc = 0.5848214285714286
User 3441 AUC after training: 0.5776785714285715
User 3441 does not improve AUC. Reverting changes.
Training on augumented user 13009 24/50 current_auc = 0.5848214285714286
User 13009 AUC after training: 0.5794642857142858
User 13009 does not improve AUC. Reverting changes.
Training on augumented user 34796 25/50 current_auc = 0.5848214285714286
User 34796 AUC after training: 0.5830357142857143
User 34796 does not improve AUC. Reverting changes.
Training on augumented user 76552 26/50 current_auc = 0.5848214285714286
User 76552 AUC after training: 0.58125
User 76552 does not improve AUC. Reverting changes.
Training on augumented user 119684 27/50 current_auc = 0.5848214285714286
User 119684 AUC after training: 0.58125
User 119684 does not improve AUC. Reverting changes.
Training on augumented user 13630 28/50 current_auc = 0.5848214285714286
User 13630 AUC after training: 0.5848214285714286
User 13630 does not improve AUC. Reverting changes.
Training on augumented user 110424 29/50 current_auc = 0.5848214285714286
User 110424 AUC after training: 0.58125
User 110424 does not improve AUC. Reverting changes.
Training on augumented user 3791 30/50 current_auc = 0.5848214285714286
User 3791 AUC after training: 0.58125
User 3791 does not improve AUC. Reverting changes.
Training on augumented user 72766 31/50 current_auc = 0.5848214285714286
User 72766 AUC after training: 0.5830357142857143
User 72766 does not improve AUC. Reverting changes.
Training on augumented user 98888 32/50 current_auc = 0.5848214285714286
User 98888 AUC after training: 0.5830357142857143
User 98888 does not improve AUC. Reverting changes.
Training on augumented user 43228 33/50 current_auc = 0.5848214285714286
User 43228 AUC after training: 0.5857142857142857
User 43228 improves AUC. Keeping the model.
Training on augumented user 84388 34/50 current_auc = 0.5857142857142857
User 84388 AUC after training: 0.5830357142857143
User 84388 does not improve AUC. Reverting changes.
Training on augumented user 75539 35/50 current_auc = 0.5857142857142857
User 75539 AUC after training: 0.5794642857142858
User 75539 does not improve AUC. Reverting changes.
Training on augumented user 125428 36/50 current_auc = 0.5857142857142857
User 125428 AUC after training: 0.5839285714285715
User 125428 does not improve AUC. Reverting changes.
Training on augumented user 90737 37/50 current_auc = 0.5857142857142857
User 90737 AUC after training: 0.5848214285714286
User 90737 does not improve AUC. Reverting changes.
Training on augumented user 89234 38/50 current_auc = 0.5857142857142857
User 89234 AUC after training: 0.5830357142857143
User 89234 does not improve AUC. Reverting changes.
Training on augumented user 117013 39/50 current_auc = 0.5857142857142857
User 117013 AUC after training: 0.5830357142857143
User 117013 does not improve AUC. Reverting changes.
Training on augumented user 7052 40/50 current_auc = 0.5857142857142857
User 7052 AUC after training: 0.5830357142857143
User 7052 does not improve AUC. Reverting changes.
Training on augumented user 22097 41/50 current_auc = 0.5857142857142857
User 22097 AUC after training: 0.5821428571428571
User 22097 does not improve AUC. Reverting changes.
Training on augumented user 46435 42/50 current_auc = 0.5857142857142857
User 46435 AUC after training: 0.5821428571428572
User 46435 does not improve AUC. Reverting changes.
Training on augumented user 78079 43/50 current_auc = 0.5857142857142857
User 78079 AUC after training: 0.58125
User 78079 does not improve AUC. Reverting changes.
Training on augumented user 58410 44/50 current_auc = 0.5857142857142857
User 58410 AUC after training: 0.5794642857142858
User 58410 does not improve AUC. Reverting changes.
Training on augumented user 89397 45/50 current_auc = 0.5857142857142857
User 89397 AUC after training: 0.5794642857142858
User 89397 does not improve AUC. Reverting changes.
Training on augumented user 44209 46/50 current_auc = 0.5857142857142857
User 44209 AUC after training: 0.5794642857142858
User 44209 does not improve AUC. Reverting changes.
Training on augumented user 40992 47/50 current_auc = 0.5857142857142857
User 40992 AUC after training: 0.5776785714285715
User 40992 does not improve AUC. Reverting changes.
Training on augumented user 99452 48/50 current_auc = 0.5857142857142857
User 99452 AUC after training: 0.5866071428571429
User 99452 improves AUC. Keeping the model.
Training on augumented user 99012 49/50 current_auc = 0.5866071428571429
User 99012 AUC after training: 0.5848214285714286
User 99012 does not improve AUC. Reverting changes.
[2024-12-02 18:08:33.926650] start test user 70918 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:34.575887] start test user 70918 57/568 recall augumented users by random, augumented_users = [43103, 131807, 70344, 60985, 133248, 122648, 74348, 10830, 30307, 112071, 77767, 137026, 14441, 106059, 2292, 11219, 39047, 121989, 8725, 88852, 103267, 68143, 35107, 44926, 103533, 3080, 60324, 18315, 38749, 85801, 56180, 121607, 107692, 73674, 75943, 37359, 64699, 6890, 132919, 37296, 134439, 91976, 33623, 74114, 50403, 127065, 136398, 125606, 31461, 118786]
[2024-12-02 18:08:34.598801] user = 70918 Cloud 57/568
[2024-12-02 18:08:34.617928] user = 70918 Local 57/568
[2024-12-02 18:08:34.773643] user = 70918 Local+ 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:37.152373] user = 70918 MPDA- 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6026986506746626
Training on augumented user 43103 0/50 current_auc = 0.6026986506746626
User 43103 AUC after training: 0.60119940029985
User 43103 does not improve AUC. Reverting changes.
Training on augumented user 131807 1/50 current_auc = 0.6026986506746626
User 131807 AUC after training: 0.60119940029985
User 131807 does not improve AUC. Reverting changes.
Training on augumented user 70344 2/50 current_auc = 0.6026986506746626
User 70344 AUC after training: 0.5982008995502248
User 70344 does not improve AUC. Reverting changes.
Training on augumented user 60985 3/50 current_auc = 0.6026986506746626
User 60985 AUC after training: 0.6011994002998501
User 60985 does not improve AUC. Reverting changes.
Training on augumented user 133248 4/50 current_auc = 0.6026986506746626
User 133248 AUC after training: 0.6026986506746626
User 133248 does not improve AUC. Reverting changes.
Training on augumented user 122648 5/50 current_auc = 0.6026986506746626
User 122648 AUC after training: 0.6041979010494752
User 122648 improves AUC. Keeping the model.
Training on augumented user 74348 6/50 current_auc = 0.6041979010494752
User 74348 AUC after training: 0.5982008995502248
User 74348 does not improve AUC. Reverting changes.
Training on augumented user 10830 7/50 current_auc = 0.6041979010494752
User 10830 AUC after training: 0.6056971514242879
User 10830 improves AUC. Keeping the model.
Training on augumented user 30307 8/50 current_auc = 0.6056971514242879
User 30307 AUC after training: 0.6056971514242879
User 30307 does not improve AUC. Reverting changes.
Training on augumented user 112071 9/50 current_auc = 0.6056971514242879
User 112071 AUC after training: 0.6056971514242879
User 112071 does not improve AUC. Reverting changes.
Training on augumented user 77767 10/50 current_auc = 0.6056971514242879
User 77767 AUC after training: 0.6056971514242879
User 77767 does not improve AUC. Reverting changes.
Training on augumented user 137026 11/50 current_auc = 0.6056971514242879
User 137026 AUC after training: 0.6056971514242879
User 137026 does not improve AUC. Reverting changes.
Training on augumented user 14441 12/50 current_auc = 0.6056971514242879
User 14441 AUC after training: 0.60119940029985
User 14441 does not improve AUC. Reverting changes.
Training on augumented user 106059 13/50 current_auc = 0.6056971514242879
User 106059 AUC after training: 0.6071964017991005
User 106059 improves AUC. Keeping the model.
Training on augumented user 2292 14/50 current_auc = 0.6071964017991005
User 2292 AUC after training: 0.6056971514242879
User 2292 does not improve AUC. Reverting changes.
Training on augumented user 11219 15/50 current_auc = 0.6071964017991005
User 11219 AUC after training: 0.6071964017991005
User 11219 does not improve AUC. Reverting changes.
Training on augumented user 39047 16/50 current_auc = 0.6071964017991005
User 39047 AUC after training: 0.60119940029985
User 39047 does not improve AUC. Reverting changes.
Training on augumented user 121989 17/50 current_auc = 0.6071964017991005
User 121989 AUC after training: 0.6071964017991005
User 121989 does not improve AUC. Reverting changes.
Training on augumented user 8725 18/50 current_auc = 0.6071964017991005
User 8725 AUC after training: 0.6071964017991005
User 8725 does not improve AUC. Reverting changes.
Training on augumented user 88852 19/50 current_auc = 0.6071964017991005
User 88852 AUC after training: 0.60119940029985
User 88852 does not improve AUC. Reverting changes.
Training on augumented user 103267 20/50 current_auc = 0.6071964017991005
User 103267 AUC after training: 0.6071964017991005
User 103267 does not improve AUC. Reverting changes.
Training on augumented user 68143 21/50 current_auc = 0.6071964017991005
User 68143 AUC after training: 0.6056971514242879
User 68143 does not improve AUC. Reverting changes.
Training on augumented user 35107 22/50 current_auc = 0.6071964017991005
User 35107 AUC after training: 0.6056971514242878
User 35107 does not improve AUC. Reverting changes.
Training on augumented user 44926 23/50 current_auc = 0.6071964017991005
User 44926 AUC after training: 0.60119940029985
User 44926 does not improve AUC. Reverting changes.
Training on augumented user 103533 24/50 current_auc = 0.6071964017991005
User 103533 AUC after training: 0.6056971514242879
User 103533 does not improve AUC. Reverting changes.
Training on augumented user 3080 25/50 current_auc = 0.6071964017991005
User 3080 AUC after training: 0.6056971514242879
User 3080 does not improve AUC. Reverting changes.
Training on augumented user 60324 26/50 current_auc = 0.6071964017991005
User 60324 AUC after training: 0.6026986506746627
User 60324 does not improve AUC. Reverting changes.
Training on augumented user 18315 27/50 current_auc = 0.6071964017991005
User 18315 AUC after training: 0.6071964017991005
User 18315 does not improve AUC. Reverting changes.
Training on augumented user 38749 28/50 current_auc = 0.6071964017991005
User 38749 AUC after training: 0.6071964017991005
User 38749 does not improve AUC. Reverting changes.
Training on augumented user 85801 29/50 current_auc = 0.6071964017991005
User 85801 AUC after training: 0.6071964017991005
User 85801 does not improve AUC. Reverting changes.
Training on augumented user 56180 30/50 current_auc = 0.6071964017991005
User 56180 AUC after training: 0.6056971514242879
User 56180 does not improve AUC. Reverting changes.
Training on augumented user 121607 31/50 current_auc = 0.6071964017991005
User 121607 AUC after training: 0.6071964017991005
User 121607 does not improve AUC. Reverting changes.
Training on augumented user 107692 32/50 current_auc = 0.6071964017991005
User 107692 AUC after training: 0.6071964017991005
User 107692 does not improve AUC. Reverting changes.
Training on augumented user 73674 33/50 current_auc = 0.6071964017991005
User 73674 AUC after training: 0.6071964017991005
User 73674 does not improve AUC. Reverting changes.
Training on augumented user 75943 34/50 current_auc = 0.6071964017991005
User 75943 AUC after training: 0.6071964017991005
User 75943 does not improve AUC. Reverting changes.
Training on augumented user 37359 35/50 current_auc = 0.6071964017991005
User 37359 AUC after training: 0.6071964017991005
User 37359 does not improve AUC. Reverting changes.
Training on augumented user 64699 36/50 current_auc = 0.6071964017991005
User 64699 AUC after training: 0.6056971514242879
User 64699 does not improve AUC. Reverting changes.
Training on augumented user 6890 37/50 current_auc = 0.6071964017991005
User 6890 AUC after training: 0.6071964017991005
User 6890 does not improve AUC. Reverting changes.
Training on augumented user 132919 38/50 current_auc = 0.6071964017991005
User 132919 AUC after training: 0.6086956521739131
User 132919 improves AUC. Keeping the model.
Training on augumented user 37296 39/50 current_auc = 0.6086956521739131
User 37296 AUC after training: 0.6026986506746627
User 37296 does not improve AUC. Reverting changes.
Training on augumented user 134439 40/50 current_auc = 0.6086956521739131
User 134439 AUC after training: 0.6026986506746626
User 134439 does not improve AUC. Reverting changes.
Training on augumented user 91976 41/50 current_auc = 0.6086956521739131
User 91976 AUC after training: 0.60119940029985
User 91976 does not improve AUC. Reverting changes.
Training on augumented user 33623 42/50 current_auc = 0.6086956521739131
User 33623 AUC after training: 0.6041979010494753
User 33623 does not improve AUC. Reverting changes.
Training on augumented user 74114 43/50 current_auc = 0.6086956521739131
User 74114 AUC after training: 0.6071964017991005
User 74114 does not improve AUC. Reverting changes.
Training on augumented user 50403 44/50 current_auc = 0.6086956521739131
User 50403 AUC after training: 0.6086956521739131
User 50403 does not improve AUC. Reverting changes.
Training on augumented user 127065 45/50 current_auc = 0.6086956521739131
User 127065 AUC after training: 0.6071964017991005
User 127065 does not improve AUC. Reverting changes.
Training on augumented user 136398 46/50 current_auc = 0.6086956521739131
User 136398 AUC after training: 0.6071964017991005
User 136398 does not improve AUC. Reverting changes.
Training on augumented user 125606 47/50 current_auc = 0.6086956521739131
User 125606 AUC after training: 0.6071964017991005
User 125606 does not improve AUC. Reverting changes.
Training on augumented user 31461 48/50 current_auc = 0.6086956521739131
User 31461 AUC after training: 0.6071964017991005
User 31461 does not improve AUC. Reverting changes.
Training on augumented user 118786 49/50 current_auc = 0.6086956521739131
User 118786 AUC after training: 0.6086956521739131
User 118786 does not improve AUC. Reverting changes.
[2024-12-02 18:09:07.652458] start test user 70926 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:08.703531] start test user 70926 58/568 recall augumented users by random, augumented_users = [117367, 134110, 9614, 54766, 45878, 96708, 4654, 113122, 106734, 115315, 123493, 33432, 115579, 58469, 124553, 14373, 11068, 46986, 12462, 106957, 133287, 126725, 31284, 4870, 31860, 89016, 22199, 14607, 9395, 32392, 63401, 50977, 30863, 71774, 88387, 106468, 53548, 133183, 81970, 45543, 111387, 61681, 24836, 101771, 91450, 15077, 2591, 37314, 126966, 126421]
[2024-12-02 18:09:08.725863] user = 70926 Cloud 58/568
[2024-12-02 18:09:08.735536] user = 70926 Local 58/568
[2024-12-02 18:09:08.755215] user = 70926 Local+ 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:11.147761] user = 70926 MPDA- 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6285714285714286
Training on augumented user 117367 0/50 current_auc = 0.6285714285714286
User 117367 AUC after training: 0.6285714285714286
User 117367 does not improve AUC. Reverting changes.
Training on augumented user 134110 1/50 current_auc = 0.6285714285714286
User 134110 AUC after training: 0.6285714285714286
User 134110 does not improve AUC. Reverting changes.
Training on augumented user 9614 2/50 current_auc = 0.6285714285714286
User 9614 AUC after training: 0.6285714285714286
User 9614 does not improve AUC. Reverting changes.
Training on augumented user 54766 3/50 current_auc = 0.6285714285714286
User 54766 AUC after training: 0.6285714285714286
User 54766 does not improve AUC. Reverting changes.
Training on augumented user 45878 4/50 current_auc = 0.6285714285714286
User 45878 AUC after training: 0.6285714285714286
User 45878 does not improve AUC. Reverting changes.
Training on augumented user 96708 5/50 current_auc = 0.6285714285714286
User 96708 AUC after training: 0.6285714285714286
User 96708 does not improve AUC. Reverting changes.
Training on augumented user 4654 6/50 current_auc = 0.6285714285714286
User 4654 AUC after training: 0.6285714285714286
User 4654 does not improve AUC. Reverting changes.
Training on augumented user 113122 7/50 current_auc = 0.6285714285714286
User 113122 AUC after training: 0.6285714285714286
User 113122 does not improve AUC. Reverting changes.
Training on augumented user 106734 8/50 current_auc = 0.6285714285714286
User 106734 AUC after training: 0.6285714285714286
User 106734 does not improve AUC. Reverting changes.
Training on augumented user 115315 9/50 current_auc = 0.6285714285714286
User 115315 AUC after training: 0.6285714285714286
User 115315 does not improve AUC. Reverting changes.
Training on augumented user 123493 10/50 current_auc = 0.6285714285714286
User 123493 AUC after training: 0.6285714285714286
User 123493 does not improve AUC. Reverting changes.
Training on augumented user 33432 11/50 current_auc = 0.6285714285714286
User 33432 AUC after training: 0.6428571428571429
User 33432 improves AUC. Keeping the model.
Training on augumented user 115579 12/50 current_auc = 0.6428571428571429
User 115579 AUC after training: 0.6428571428571429
User 115579 does not improve AUC. Reverting changes.
Training on augumented user 58469 13/50 current_auc = 0.6428571428571429
User 58469 AUC after training: 0.6428571428571429
User 58469 does not improve AUC. Reverting changes.
Training on augumented user 124553 14/50 current_auc = 0.6428571428571429
User 124553 AUC after training: 0.6428571428571429
User 124553 does not improve AUC. Reverting changes.
Training on augumented user 14373 15/50 current_auc = 0.6428571428571429
User 14373 AUC after training: 0.6428571428571429
User 14373 does not improve AUC. Reverting changes.
Training on augumented user 11068 16/50 current_auc = 0.6428571428571429
User 11068 AUC after training: 0.6428571428571429
User 11068 does not improve AUC. Reverting changes.
Training on augumented user 46986 17/50 current_auc = 0.6428571428571429
User 46986 AUC after training: 0.6428571428571429
User 46986 does not improve AUC. Reverting changes.
Training on augumented user 12462 18/50 current_auc = 0.6428571428571429
User 12462 AUC after training: 0.6285714285714286
User 12462 does not improve AUC. Reverting changes.
Training on augumented user 106957 19/50 current_auc = 0.6428571428571429
User 106957 AUC after training: 0.6285714285714286
User 106957 does not improve AUC. Reverting changes.
Training on augumented user 133287 20/50 current_auc = 0.6428571428571429
User 133287 AUC after training: 0.6428571428571429
User 133287 does not improve AUC. Reverting changes.
Training on augumented user 126725 21/50 current_auc = 0.6428571428571429
User 126725 AUC after training: 0.6428571428571429
User 126725 does not improve AUC. Reverting changes.
Training on augumented user 31284 22/50 current_auc = 0.6428571428571429
User 31284 AUC after training: 0.6285714285714286
User 31284 does not improve AUC. Reverting changes.
Training on augumented user 4870 23/50 current_auc = 0.6428571428571429
User 4870 AUC after training: 0.657142857142857
User 4870 improves AUC. Keeping the model.
Training on augumented user 31860 24/50 current_auc = 0.657142857142857
User 31860 AUC after training: 0.6428571428571429
User 31860 does not improve AUC. Reverting changes.
Training on augumented user 89016 25/50 current_auc = 0.657142857142857
User 89016 AUC after training: 0.657142857142857
User 89016 does not improve AUC. Reverting changes.
Training on augumented user 22199 26/50 current_auc = 0.657142857142857
User 22199 AUC after training: 0.6428571428571429
User 22199 does not improve AUC. Reverting changes.
Training on augumented user 14607 27/50 current_auc = 0.657142857142857
User 14607 AUC after training: 0.657142857142857
User 14607 does not improve AUC. Reverting changes.
Training on augumented user 9395 28/50 current_auc = 0.657142857142857
User 9395 AUC after training: 0.6714285714285714
User 9395 improves AUC. Keeping the model.
Training on augumented user 32392 29/50 current_auc = 0.6714285714285714
User 32392 AUC after training: 0.6714285714285714
User 32392 does not improve AUC. Reverting changes.
Training on augumented user 63401 30/50 current_auc = 0.6714285714285714
User 63401 AUC after training: 0.6571428571428571
User 63401 does not improve AUC. Reverting changes.
Training on augumented user 50977 31/50 current_auc = 0.6714285714285714
User 50977 AUC after training: 0.6714285714285714
User 50977 does not improve AUC. Reverting changes.
Training on augumented user 30863 32/50 current_auc = 0.6714285714285714
User 30863 AUC after training: 0.657142857142857
User 30863 does not improve AUC. Reverting changes.
Training on augumented user 71774 33/50 current_auc = 0.6714285714285714
User 71774 AUC after training: 0.657142857142857
User 71774 does not improve AUC. Reverting changes.
Training on augumented user 88387 34/50 current_auc = 0.6714285714285714
User 88387 AUC after training: 0.6714285714285714
User 88387 does not improve AUC. Reverting changes.
Training on augumented user 106468 35/50 current_auc = 0.6714285714285714
User 106468 AUC after training: 0.6571428571428571
User 106468 does not improve AUC. Reverting changes.
Training on augumented user 53548 36/50 current_auc = 0.6714285714285714
User 53548 AUC after training: 0.6428571428571429
User 53548 does not improve AUC. Reverting changes.
Training on augumented user 133183 37/50 current_auc = 0.6714285714285714
User 133183 AUC after training: 0.6428571428571429
User 133183 does not improve AUC. Reverting changes.
Training on augumented user 81970 38/50 current_auc = 0.6714285714285714
User 81970 AUC after training: 0.6714285714285714
User 81970 does not improve AUC. Reverting changes.
Training on augumented user 45543 39/50 current_auc = 0.6714285714285714
User 45543 AUC after training: 0.657142857142857
User 45543 does not improve AUC. Reverting changes.
Training on augumented user 111387 40/50 current_auc = 0.6714285714285714
User 111387 AUC after training: 0.6714285714285714
User 111387 does not improve AUC. Reverting changes.
Training on augumented user 61681 41/50 current_auc = 0.6714285714285714
User 61681 AUC after training: 0.6714285714285714
User 61681 does not improve AUC. Reverting changes.
Training on augumented user 24836 42/50 current_auc = 0.6714285714285714
User 24836 AUC after training: 0.6428571428571429
User 24836 does not improve AUC. Reverting changes.
Training on augumented user 101771 43/50 current_auc = 0.6714285714285714
User 101771 AUC after training: 0.6428571428571429
User 101771 does not improve AUC. Reverting changes.
Training on augumented user 91450 44/50 current_auc = 0.6714285714285714
User 91450 AUC after training: 0.6428571428571429
User 91450 does not improve AUC. Reverting changes.
Training on augumented user 15077 45/50 current_auc = 0.6714285714285714
User 15077 AUC after training: 0.6571428571428571
User 15077 does not improve AUC. Reverting changes.
Training on augumented user 2591 46/50 current_auc = 0.6714285714285714
User 2591 AUC after training: 0.6571428571428571
User 2591 does not improve AUC. Reverting changes.
Training on augumented user 37314 47/50 current_auc = 0.6714285714285714
User 37314 AUC after training: 0.6428571428571429
User 37314 does not improve AUC. Reverting changes.
Training on augumented user 126966 48/50 current_auc = 0.6714285714285714
User 126966 AUC after training: 0.6428571428571429
User 126966 does not improve AUC. Reverting changes.
Training on augumented user 126421 49/50 current_auc = 0.6714285714285714
User 126421 AUC after training: 0.6571428571428571
User 126421 does not improve AUC. Reverting changes.
[2024-12-02 18:09:39.281768] start test user 70932 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:39.966427] start test user 70932 59/568 recall augumented users by random, augumented_users = [131053, 71109, 124802, 85751, 99896, 92634, 102106, 137787, 99144, 64861, 117655, 69722, 5206, 19615, 91599, 60893, 48708, 32988, 131270, 26688, 10762, 52155, 7931, 13146, 29925, 128504, 42686, 129032, 48080, 44151, 22956, 119977, 80381, 115816, 108636, 33944, 69492, 125171, 122938, 48686, 73020, 4965, 114676, 32825, 114741, 138119, 62745, 110578, 61463, 39517]
[2024-12-02 18:09:39.997508] user = 70932 Cloud 59/568
[2024-12-02 18:09:40.027939] user = 70932 Local 59/568
[2024-12-02 18:09:40.071469] user = 70932 Local+ 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:42.889025] user = 70932 MPDA- 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333334
Training on augumented user 131053 0/50 current_auc = 0.5833333333333334
User 131053 AUC after training: 0.5833333333333334
User 131053 does not improve AUC. Reverting changes.
Training on augumented user 71109 1/50 current_auc = 0.5833333333333334
User 71109 AUC after training: 0.5833333333333334
User 71109 does not improve AUC. Reverting changes.
Training on augumented user 124802 2/50 current_auc = 0.5833333333333334
User 124802 AUC after training: 0.5833333333333334
User 124802 does not improve AUC. Reverting changes.
Training on augumented user 85751 3/50 current_auc = 0.5833333333333334
User 85751 AUC after training: 0.5833333333333334
User 85751 does not improve AUC. Reverting changes.
Training on augumented user 99896 4/50 current_auc = 0.5833333333333334
User 99896 AUC after training: 0.5833333333333334
User 99896 does not improve AUC. Reverting changes.
Training on augumented user 92634 5/50 current_auc = 0.5833333333333334
User 92634 AUC after training: 0.5833333333333334
User 92634 does not improve AUC. Reverting changes.
Training on augumented user 102106 6/50 current_auc = 0.5833333333333334
User 102106 AUC after training: 0.5833333333333334
User 102106 does not improve AUC. Reverting changes.
Training on augumented user 137787 7/50 current_auc = 0.5833333333333334
User 137787 AUC after training: 0.5833333333333334
User 137787 does not improve AUC. Reverting changes.
Training on augumented user 99144 8/50 current_auc = 0.5833333333333334
User 99144 AUC after training: 0.5833333333333334
User 99144 does not improve AUC. Reverting changes.
Training on augumented user 64861 9/50 current_auc = 0.5833333333333334
User 64861 AUC after training: 0.5833333333333334
User 64861 does not improve AUC. Reverting changes.
Training on augumented user 117655 10/50 current_auc = 0.5833333333333334
User 117655 AUC after training: 0.5833333333333334
User 117655 does not improve AUC. Reverting changes.
Training on augumented user 69722 11/50 current_auc = 0.5833333333333334
User 69722 AUC after training: 0.5833333333333334
User 69722 does not improve AUC. Reverting changes.
Training on augumented user 5206 12/50 current_auc = 0.5833333333333334
User 5206 AUC after training: 0.5833333333333334
User 5206 does not improve AUC. Reverting changes.
Training on augumented user 19615 13/50 current_auc = 0.5833333333333334
User 19615 AUC after training: 0.5833333333333334
User 19615 does not improve AUC. Reverting changes.
Training on augumented user 91599 14/50 current_auc = 0.5833333333333334
User 91599 AUC after training: 0.5833333333333334
User 91599 does not improve AUC. Reverting changes.
Training on augumented user 60893 15/50 current_auc = 0.5833333333333334
User 60893 AUC after training: 0.5833333333333334
User 60893 does not improve AUC. Reverting changes.
Training on augumented user 48708 16/50 current_auc = 0.5833333333333334
User 48708 AUC after training: 0.5833333333333334
User 48708 does not improve AUC. Reverting changes.
Training on augumented user 32988 17/50 current_auc = 0.5833333333333334
User 32988 AUC after training: 0.5833333333333334
User 32988 does not improve AUC. Reverting changes.
Training on augumented user 131270 18/50 current_auc = 0.5833333333333334
User 131270 AUC after training: 0.5833333333333334
User 131270 does not improve AUC. Reverting changes.
Training on augumented user 26688 19/50 current_auc = 0.5833333333333334
User 26688 AUC after training: 0.5833333333333334
User 26688 does not improve AUC. Reverting changes.
Training on augumented user 10762 20/50 current_auc = 0.5833333333333334
User 10762 AUC after training: 0.5833333333333334
User 10762 does not improve AUC. Reverting changes.
Training on augumented user 52155 21/50 current_auc = 0.5833333333333334
User 52155 AUC after training: 0.5833333333333334
User 52155 does not improve AUC. Reverting changes.
Training on augumented user 7931 22/50 current_auc = 0.5833333333333334
User 7931 AUC after training: 0.5833333333333334
User 7931 does not improve AUC. Reverting changes.
Training on augumented user 13146 23/50 current_auc = 0.5833333333333334
User 13146 AUC after training: 0.5833333333333334
User 13146 does not improve AUC. Reverting changes.
Training on augumented user 29925 24/50 current_auc = 0.5833333333333334
User 29925 AUC after training: 0.5833333333333334
User 29925 does not improve AUC. Reverting changes.
Training on augumented user 128504 25/50 current_auc = 0.5833333333333334
User 128504 AUC after training: 0.5833333333333334
User 128504 does not improve AUC. Reverting changes.
Training on augumented user 42686 26/50 current_auc = 0.5833333333333334
User 42686 AUC after training: 0.5833333333333334
User 42686 does not improve AUC. Reverting changes.
Training on augumented user 129032 27/50 current_auc = 0.5833333333333334
User 129032 AUC after training: 0.5833333333333334
User 129032 does not improve AUC. Reverting changes.
Training on augumented user 48080 28/50 current_auc = 0.5833333333333334
User 48080 AUC after training: 0.5833333333333334
User 48080 does not improve AUC. Reverting changes.
Training on augumented user 44151 29/50 current_auc = 0.5833333333333334
User 44151 AUC after training: 0.5833333333333334
User 44151 does not improve AUC. Reverting changes.
Training on augumented user 22956 30/50 current_auc = 0.5833333333333334
User 22956 AUC after training: 0.5833333333333334
User 22956 does not improve AUC. Reverting changes.
Training on augumented user 119977 31/50 current_auc = 0.5833333333333334
User 119977 AUC after training: 0.5833333333333334
User 119977 does not improve AUC. Reverting changes.
Training on augumented user 80381 32/50 current_auc = 0.5833333333333334
User 80381 AUC after training: 0.5833333333333334
User 80381 does not improve AUC. Reverting changes.
Training on augumented user 115816 33/50 current_auc = 0.5833333333333334
User 115816 AUC after training: 0.5833333333333334
User 115816 does not improve AUC. Reverting changes.
Training on augumented user 108636 34/50 current_auc = 0.5833333333333334
User 108636 AUC after training: 0.5833333333333334
User 108636 does not improve AUC. Reverting changes.
Training on augumented user 33944 35/50 current_auc = 0.5833333333333334
User 33944 AUC after training: 0.5833333333333334
User 33944 does not improve AUC. Reverting changes.
Training on augumented user 69492 36/50 current_auc = 0.5833333333333334
User 69492 AUC after training: 0.5833333333333334
User 69492 does not improve AUC. Reverting changes.
Training on augumented user 125171 37/50 current_auc = 0.5833333333333334
User 125171 AUC after training: 0.5833333333333334
User 125171 does not improve AUC. Reverting changes.
Training on augumented user 122938 38/50 current_auc = 0.5833333333333334
User 122938 AUC after training: 0.5833333333333334
User 122938 does not improve AUC. Reverting changes.
Training on augumented user 48686 39/50 current_auc = 0.5833333333333334
User 48686 AUC after training: 0.5833333333333334
User 48686 does not improve AUC. Reverting changes.
Training on augumented user 73020 40/50 current_auc = 0.5833333333333334
User 73020 AUC after training: 0.5833333333333334
User 73020 does not improve AUC. Reverting changes.
Training on augumented user 4965 41/50 current_auc = 0.5833333333333334
User 4965 AUC after training: 0.5833333333333334
User 4965 does not improve AUC. Reverting changes.
Training on augumented user 114676 42/50 current_auc = 0.5833333333333334
User 114676 AUC after training: 0.5833333333333334
User 114676 does not improve AUC. Reverting changes.
Training on augumented user 32825 43/50 current_auc = 0.5833333333333334
User 32825 AUC after training: 0.5833333333333334
User 32825 does not improve AUC. Reverting changes.
Training on augumented user 114741 44/50 current_auc = 0.5833333333333334
User 114741 AUC after training: 0.5833333333333334
User 114741 does not improve AUC. Reverting changes.
Training on augumented user 138119 45/50 current_auc = 0.5833333333333334
User 138119 AUC after training: 0.5833333333333334
User 138119 does not improve AUC. Reverting changes.
Training on augumented user 62745 46/50 current_auc = 0.5833333333333334
User 62745 AUC after training: 0.5833333333333334
User 62745 does not improve AUC. Reverting changes.
Training on augumented user 110578 47/50 current_auc = 0.5833333333333334
User 110578 AUC after training: 0.5833333333333334
User 110578 does not improve AUC. Reverting changes.
Training on augumented user 61463 48/50 current_auc = 0.5833333333333334
User 61463 AUC after training: 0.5833333333333334
User 61463 does not improve AUC. Reverting changes.
Training on augumented user 39517 49/50 current_auc = 0.5833333333333334
User 39517 AUC after training: 0.5833333333333334
User 39517 does not improve AUC. Reverting changes.
[2024-12-02 18:10:08.080899] start test user 70936 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:08.872449] start test user 70936 60/568 recall augumented users by random, augumented_users = [35745, 104540, 86850, 89715, 96363, 122608, 73273, 111409, 123025, 42616, 5685, 1078, 131734, 134385, 18158, 17125, 18952, 52464, 25965, 123962, 74874, 25533, 80933, 22966, 138317, 41150, 42995, 91481, 101253, 11139, 21697, 31544, 112367, 75838, 37967, 64536, 33174, 55057, 52062, 132491, 71397, 22900, 116814, 99349, 61651, 1700, 113939, 106284, 88219, 89776]
[2024-12-02 18:10:08.891871] user = 70936 Cloud 60/568
[2024-12-02 18:10:08.967969] user = 70936 Local 60/568
[2024-12-02 18:10:09.417091] user = 70936 Local+ 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:12.336069] user = 70936 MPDA- 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5256700970986685
Training on augumented user 35745 0/50 current_auc = 0.5256700970986685
User 35745 AUC after training: 0.5254569064092873
User 35745 does not improve AUC. Reverting changes.
Training on augumented user 104540 1/50 current_auc = 0.5256700970986685
User 104540 AUC after training: 0.5252243347481442
User 104540 does not improve AUC. Reverting changes.
Training on augumented user 86850 2/50 current_auc = 0.5256700970986685
User 86850 AUC after training: 0.5257476209857161
User 86850 improves AUC. Keeping the model.
Training on augumented user 89715 3/50 current_auc = 0.5257476209857161
User 89715 AUC after training: 0.5253600015504777
User 89715 does not improve AUC. Reverting changes.
Training on augumented user 96363 4/50 current_auc = 0.5257476209857161
User 96363 AUC after training: 0.5253987634940016
User 96363 does not improve AUC. Reverting changes.
Training on augumented user 122608 5/50 current_auc = 0.5257476209857161
User 122608 AUC after training: 0.5264937883985502
User 122608 improves AUC. Keeping the model.
Training on augumented user 73273 6/50 current_auc = 0.5264937883985502
User 73273 AUC after training: 0.5265325503420741
User 73273 improves AUC. Keeping the model.
Training on augumented user 111409 7/50 current_auc = 0.5265325503420741
User 111409 AUC after training: 0.5264840979126693
User 111409 does not improve AUC. Reverting changes.
Training on augumented user 123025 8/50 current_auc = 0.5265325503420741
User 123025 AUC after training: 0.5263775025679787
User 123025 does not improve AUC. Reverting changes.
Training on augumented user 42616 9/50 current_auc = 0.5265325503420741
User 42616 AUC after training: 0.5261546213927166
User 42616 does not improve AUC. Reverting changes.
Training on augumented user 5685 10/50 current_auc = 0.5265325503420741
User 5685 AUC after training: 0.5274434560148846
User 5685 improves AUC. Keeping the model.
Training on augumented user 1078 11/50 current_auc = 0.5274434560148846
User 1078 AUC after training: 0.5271527414384557
User 1078 does not improve AUC. Reverting changes.
Training on augumented user 131734 12/50 current_auc = 0.5274434560148846
User 131734 AUC after training: 0.5279473612806946
User 131734 improves AUC. Keeping the model.
Training on augumented user 134385 13/50 current_auc = 0.5279473612806946
User 134385 AUC after training: 0.5280442661395043
User 134385 improves AUC. Keeping the model.
Training on augumented user 18158 14/50 current_auc = 0.5280442661395043
User 18158 AUC after training: 0.5269104792914316
User 18158 does not improve AUC. Reverting changes.
Training on augumented user 17125 15/50 current_auc = 0.5280442661395043
User 17125 AUC after training: 0.5283155997441712
User 17125 improves AUC. Keeping the model.
Training on augumented user 18952 16/50 current_auc = 0.5283155997441712
User 18952 AUC after training: 0.5271624319243366
User 18952 does not improve AUC. Reverting changes.
Training on augumented user 52464 17/50 current_auc = 0.5283155997441712
User 52464 AUC after training: 0.5274725274725275
User 52464 does not improve AUC. Reverting changes.
Training on augumented user 25965 18/50 current_auc = 0.5283155997441712
User 25965 AUC after training: 0.5280248851677423
User 25965 does not improve AUC. Reverting changes.
Training on augumented user 123962 19/50 current_auc = 0.5283155997441712
User 123962 AUC after training: 0.5267360505455744
User 123962 does not improve AUC. Reverting changes.
Training on augumented user 74874 20/50 current_auc = 0.5283155997441712
User 74874 AUC after training: 0.5277050991336706
User 74874 does not improve AUC. Reverting changes.
Training on augumented user 25533 21/50 current_auc = 0.5283155997441712
User 25533 AUC after training: 0.5278795278795279
User 25533 does not improve AUC. Reverting changes.
Training on augumented user 80933 22/50 current_auc = 0.5283155997441712
User 80933 AUC after training: 0.5280055041959804
User 80933 does not improve AUC. Reverting changes.
Training on augumented user 22966 23/50 current_auc = 0.5283155997441712
User 22966 AUC after training: 0.5251758823187395
User 22966 does not improve AUC. Reverting changes.
Training on augumented user 138317 24/50 current_auc = 0.5283155997441712
User 138317 AUC after training: 0.5261933833362404
User 138317 does not improve AUC. Reverting changes.
Training on augumented user 41150 25/50 current_auc = 0.5283155997441712
User 41150 AUC after training: 0.5288485764676241
User 41150 improves AUC. Keeping the model.
Training on augumented user 42995 26/50 current_auc = 0.5288485764676241
User 42995 AUC after training: 0.5289939337558386
User 42995 improves AUC. Keeping the model.
Training on augumented user 91481 27/50 current_auc = 0.5289939337558386
User 91481 AUC after training: 0.5287322906370525
User 91481 does not improve AUC. Reverting changes.
Training on augumented user 101253 28/50 current_auc = 0.5289939337558386
User 101253 AUC after training: 0.5282962187724092
User 101253 does not improve AUC. Reverting changes.
Training on augumented user 11139 29/50 current_auc = 0.5289939337558386
User 11139 AUC after training: 0.5289164098687908
User 11139 does not improve AUC. Reverting changes.
Training on augumented user 21697 30/50 current_auc = 0.5289939337558386
User 21697 AUC after training: 0.5286935286935286
User 21697 does not improve AUC. Reverting changes.
Training on augumented user 31544 31/50 current_auc = 0.5289939337558386
User 31544 AUC after training: 0.5287129096652906
User 31544 does not improve AUC. Reverting changes.
Training on augumented user 112367 32/50 current_auc = 0.5289939337558386
User 112367 AUC after training: 0.5277632420489563
User 112367 does not improve AUC. Reverting changes.
Training on augumented user 75838 33/50 current_auc = 0.5289939337558386
User 75838 AUC after training: 0.5285384809194333
User 75838 does not improve AUC. Reverting changes.
Training on augumented user 37967 34/50 current_auc = 0.5289939337558386
User 37967 AUC after training: 0.5285578618911952
User 37967 does not improve AUC. Reverting changes.
Training on augumented user 64536 35/50 current_auc = 0.5289939337558386
User 64536 AUC after training: 0.5292555768746244
User 64536 improves AUC. Keeping the model.
Training on augumented user 33174 36/50 current_auc = 0.5292555768746244
User 33174 AUC after training: 0.5291780529875768
User 33174 does not improve AUC. Reverting changes.
Training on augumented user 55057 37/50 current_auc = 0.5292555768746244
User 55057 AUC after training: 0.5290230052134814
User 55057 does not improve AUC. Reverting changes.
Training on augumented user 52062 38/50 current_auc = 0.5292555768746244
User 52062 AUC after training: 0.5286353857782429
User 52062 does not improve AUC. Reverting changes.
Training on augumented user 132491 39/50 current_auc = 0.5292555768746244
User 132491 AUC after training: 0.5292555768746245
User 132491 improves AUC. Keeping the model.
Training on augumented user 71397 40/50 current_auc = 0.5292555768746245
User 71397 AUC after training: 0.5282865282865282
User 71397 does not improve AUC. Reverting changes.
Training on augumented user 22900 41/50 current_auc = 0.5292555768746245
User 22900 AUC after training: 0.5295462914510534
User 22900 improves AUC. Keeping the model.
Training on augumented user 116814 42/50 current_auc = 0.5295462914510534
User 116814 AUC after training: 0.528867957439386
User 116814 does not improve AUC. Reverting changes.
Training on augumented user 99349 43/50 current_auc = 0.5295462914510534
User 99349 AUC after training: 0.5295947438804582
User 99349 improves AUC. Keeping the model.
Training on augumented user 61651 44/50 current_auc = 0.5295947438804582
User 61651 AUC after training: 0.5280345756536233
User 61651 does not improve AUC. Reverting changes.
Training on augumented user 1700 45/50 current_auc = 0.5295947438804582
User 1700 AUC after training: 0.5290908386146481
User 1700 does not improve AUC. Reverting changes.
Training on augumented user 113939 46/50 current_auc = 0.5295947438804582
User 113939 AUC after training: 0.5290617671570053
User 113939 does not improve AUC. Reverting changes.
Training on augumented user 106284 47/50 current_auc = 0.5295947438804582
User 106284 AUC after training: 0.5284415760606237
User 106284 does not improve AUC. Reverting changes.
Training on augumented user 88219 48/50 current_auc = 0.5295947438804582
User 88219 AUC after training: 0.5289745527840766
User 88219 does not improve AUC. Reverting changes.
Training on augumented user 89776 49/50 current_auc = 0.5295947438804582
User 89776 AUC after training: 0.5295075295075296
User 89776 does not improve AUC. Reverting changes.
[2024-12-02 18:10:38.253482] start test user 70940 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:38.675428] start test user 70940 61/568 recall augumented users by random, augumented_users = [91425, 73394, 63687, 110489, 120199, 127749, 16614, 4699, 19782, 75023, 1012, 39156, 126201, 70769, 130043, 134037, 84282, 104871, 45043, 117892, 48758, 135362, 19722, 15655, 117268, 68123, 81355, 111111, 63633, 23002, 100388, 104324, 115904, 101451, 91553, 80134, 77979, 40319, 49770, 44151, 60591, 38840, 54179, 83283, 106115, 78057, 119841, 92514, 91844, 46529]
[2024-12-02 18:10:38.691433] user = 70940 Cloud 61/568
[2024-12-02 18:10:38.719845] user = 70940 Local 61/568
[2024-12-02 18:10:38.831130] user = 70940 Local+ 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:41.945457] user = 70940 MPDA- 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4507521318386509
Training on augumented user 91425 0/50 current_auc = 0.4507521318386509
User 91425 AUC after training: 0.4520615758040305
User 91425 improves AUC. Keeping the model.
Training on augumented user 73394 1/50 current_auc = 0.4520615758040305
User 73394 AUC after training: 0.4514866979655712
User 73394 does not improve AUC. Reverting changes.
Training on augumented user 63687 2/50 current_auc = 0.4520615758040305
User 63687 AUC after training: 0.4525406406694133
User 63687 improves AUC. Keeping the model.
Training on augumented user 110489 3/50 current_auc = 0.4525406406694133
User 110489 AUC after training: 0.45249273418287506
User 110489 does not improve AUC. Reverting changes.
Training on augumented user 120199 4/50 current_auc = 0.4525406406694133
User 120199 AUC after training: 0.45186994985787743
User 120199 does not improve AUC. Reverting changes.
Training on augumented user 127749 5/50 current_auc = 0.4525406406694133
User 127749 AUC after training: 0.45153460445210947
User 127749 does not improve AUC. Reverting changes.
Training on augumented user 16614 6/50 current_auc = 0.4525406406694133
User 16614 AUC after training: 0.45325923796748746
User 16614 improves AUC. Keeping the model.
Training on augumented user 4699 7/50 current_auc = 0.45325923796748746
User 4699 AUC after training: 0.45402574175209987
User 4699 improves AUC. Keeping the model.
Training on augumented user 19782 8/50 current_auc = 0.45402574175209987
User 19782 AUC after training: 0.4532911756251796
User 19782 does not improve AUC. Reverting changes.
Training on augumented user 75023 9/50 current_auc = 0.45402574175209987
User 75023 AUC after training: 0.45370636517517804
User 75023 does not improve AUC. Reverting changes.
Training on augumented user 1012 10/50 current_auc = 0.45402574175209987
User 1012 AUC after training: 0.45472837022132795
User 1012 improves AUC. Keeping the model.
Training on augumented user 39156 11/50 current_auc = 0.45472837022132795
User 39156 AUC after training: 0.45568649995209354
User 39156 improves AUC. Keeping the model.
Training on augumented user 126201 12/50 current_auc = 0.45568649995209354
User 126201 AUC after training: 0.4569640062597809
User 126201 improves AUC. Keeping the model.
Training on augumented user 70769 13/50 current_auc = 0.4569640062597809
User 70769 AUC after training: 0.4569640062597809
User 70769 does not improve AUC. Reverting changes.
Training on augumented user 130043 14/50 current_auc = 0.4569640062597809
User 130043 AUC after training: 0.45629331544824503
User 130043 does not improve AUC. Reverting changes.
Training on augumented user 134037 15/50 current_auc = 0.4569640062597809
User 134037 AUC after training: 0.45686819328670436
User 134037 does not improve AUC. Reverting changes.
Training on augumented user 84282 16/50 current_auc = 0.4569640062597809
User 84282 AUC after training: 0.45543099869055603
User 84282 does not improve AUC. Reverting changes.
Training on augumented user 104871 17/50 current_auc = 0.4569640062597809
User 104871 AUC after training: 0.4550158091405576
User 104871 does not improve AUC. Reverting changes.
Training on augumented user 45043 18/50 current_auc = 0.4569640062597809
User 45043 AUC after training: 0.4536744275174859
User 45043 does not improve AUC. Reverting changes.
Training on augumented user 117892 19/50 current_auc = 0.4569640062597809
User 117892 AUC after training: 0.45568649995209354
User 117892 does not improve AUC. Reverting changes.
Training on augumented user 48758 20/50 current_auc = 0.4569640062597809
User 48758 AUC after training: 0.4561975024751685
User 48758 does not improve AUC. Reverting changes.
Training on augumented user 135362 21/50 current_auc = 0.4569640062597809
User 135362 AUC after training: 0.4576346970713168
User 135362 improves AUC. Keeping the model.
Training on augumented user 19722 22/50 current_auc = 0.4576346970713168
User 19722 AUC after training: 0.45258854715595165
User 19722 does not improve AUC. Reverting changes.
Training on augumented user 15655 23/50 current_auc = 0.4576346970713168
User 15655 AUC after training: 0.45613362715978406
User 15655 does not improve AUC. Reverting changes.
Training on augumented user 117268 24/50 current_auc = 0.4576346970713168
User 117268 AUC after training: 0.4560378141867075
User 117268 does not improve AUC. Reverting changes.
Training on augumented user 68123 25/50 current_auc = 0.4576346970713168
User 68123 AUC after training: 0.45680431797132
User 68123 does not improve AUC. Reverting changes.
Training on augumented user 81355 26/50 current_auc = 0.4576346970713168
User 81355 AUC after training: 0.45485612085209676
User 81355 does not improve AUC. Reverting changes.
Training on augumented user 111111 27/50 current_auc = 0.4576346970713168
User 111111 AUC after training: 0.4586567021174667
User 111111 improves AUC. Keeping the model.
Training on augumented user 63633 28/50 current_auc = 0.4586567021174667
User 63633 AUC after training: 0.45712369454824187
User 63633 does not improve AUC. Reverting changes.
Training on augumented user 23002 29/50 current_auc = 0.4586567021174667
User 23002 AUC after training: 0.4591038293251573
User 23002 improves AUC. Keeping the model.
Training on augumented user 100388 30/50 current_auc = 0.4591038293251573
User 100388 AUC after training: 0.45811376193669956
User 100388 does not improve AUC. Reverting changes.
Training on augumented user 104324 31/50 current_auc = 0.4591038293251573
User 104324 AUC after training: 0.46006195905592284
User 104324 improves AUC. Keeping the model.
Training on augumented user 115904 32/50 current_auc = 0.46006195905592284
User 115904 AUC after training: 0.45983839545207755
User 115904 does not improve AUC. Reverting changes.
Training on augumented user 101451 33/50 current_auc = 0.46006195905592284
User 101451 AUC after training: 0.45964676950592437
User 101451 does not improve AUC. Reverting changes.
Training on augumented user 91553 34/50 current_auc = 0.46006195905592284
User 91553 AUC after training: 0.4595828941905401
User 91553 does not improve AUC. Reverting changes.
Training on augumented user 80134 35/50 current_auc = 0.46006195905592284
User 80134 AUC after training: 0.45897607869438856
User 80134 does not improve AUC. Reverting changes.
Training on augumented user 77979 36/50 current_auc = 0.46006195905592284
User 77979 AUC after training: 0.4592635176136182
User 77979 does not improve AUC. Reverting changes.
Training on augumented user 40319 37/50 current_auc = 0.46006195905592284
User 40319 AUC after training: 0.4597745201366932
User 40319 does not improve AUC. Reverting changes.
Training on augumented user 49770 38/50 current_auc = 0.46006195905592284
User 49770 AUC after training: 0.45999808374053847
User 49770 does not improve AUC. Reverting changes.
Training on augumented user 44151 39/50 current_auc = 0.46006195905592284
User 44151 AUC after training: 0.45919964229823385
User 44151 does not improve AUC. Reverting changes.
Training on augumented user 60591 40/50 current_auc = 0.46006195905592284
User 60591 AUC after training: 0.4583373255405448
User 60591 does not improve AUC. Reverting changes.
Training on augumented user 38840 41/50 current_auc = 0.46006195905592284
User 38840 AUC after training: 0.45990227076746193
User 38840 does not improve AUC. Reverting changes.
Training on augumented user 54179 42/50 current_auc = 0.46006195905592284
User 54179 AUC after training: 0.45951901887515567
User 54179 does not improve AUC. Reverting changes.
Training on augumented user 83283 43/50 current_auc = 0.46006195905592284
User 83283 AUC after training: 0.4591038293251573
User 83283 does not improve AUC. Reverting changes.
Training on augumented user 106115 44/50 current_auc = 0.46006195905592284
User 106115 AUC after training: 0.45849701382900576
User 106115 does not improve AUC. Reverting changes.
Training on augumented user 78057 45/50 current_auc = 0.46006195905592284
User 78057 AUC after training: 0.4588483280636198
User 78057 does not improve AUC. Reverting changes.
Training on augumented user 119841 46/50 current_auc = 0.46006195905592284
User 119841 AUC after training: 0.45980645779438534
User 119841 does not improve AUC. Reverting changes.
Training on augumented user 92514 47/50 current_auc = 0.46006195905592284
User 92514 AUC after training: 0.45987033310976977
User 92514 does not improve AUC. Reverting changes.
Training on augumented user 91844 48/50 current_auc = 0.46006195905592284
User 91844 AUC after training: 0.4591996422982338
User 91844 does not improve AUC. Reverting changes.
Training on augumented user 46529 49/50 current_auc = 0.46006195905592284
User 46529 AUC after training: 0.45990227076746193
User 46529 does not improve AUC. Reverting changes.
[2024-12-02 18:11:09.576953] start test user 70945 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:10.349618] start test user 70945 62/568 recall augumented users by random, augumented_users = [57588, 75548, 60983, 124729, 39347, 111308, 33742, 56518, 131061, 104473, 66686, 56195, 41348, 107322, 7413, 126842, 95555, 70505, 134195, 53530, 135246, 126820, 2185, 13016, 91783, 35779, 68241, 76044, 83108, 86236, 28628, 50187, 72105, 89565, 93651, 83752, 122542, 71007, 5094, 110872, 127486, 4096, 105071, 69564, 9435, 126696, 82883, 16705, 92597, 87319]
[2024-12-02 18:11:10.381146] user = 70945 Cloud 62/568
[2024-12-02 18:11:10.398748] user = 70945 Local 62/568
[2024-12-02 18:11:10.531942] user = 70945 Local+ 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:13.100471] user = 70945 MPDA- 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7209302325581395
Training on augumented user 57588 0/50 current_auc = 0.7209302325581395
User 57588 AUC after training: 0.7209302325581395
User 57588 does not improve AUC. Reverting changes.
Training on augumented user 75548 1/50 current_auc = 0.7209302325581395
User 75548 AUC after training: 0.7233782129742962
User 75548 improves AUC. Keeping the model.
Training on augumented user 60983 2/50 current_auc = 0.7233782129742962
User 60983 AUC after training: 0.7246022031823744
User 60983 improves AUC. Keeping the model.
Training on augumented user 124729 3/50 current_auc = 0.7246022031823744
User 124729 AUC after training: 0.7258261933904528
User 124729 improves AUC. Keeping the model.
Training on augumented user 39347 4/50 current_auc = 0.7258261933904528
User 39347 AUC after training: 0.7246022031823744
User 39347 does not improve AUC. Reverting changes.
Training on augumented user 111308 5/50 current_auc = 0.7258261933904528
User 111308 AUC after training: 0.7282741738066095
User 111308 improves AUC. Keeping the model.
Training on augumented user 33742 6/50 current_auc = 0.7282741738066095
User 33742 AUC after training: 0.7282741738066095
User 33742 does not improve AUC. Reverting changes.
Training on augumented user 56518 7/50 current_auc = 0.7282741738066095
User 56518 AUC after training: 0.7282741738066095
User 56518 does not improve AUC. Reverting changes.
Training on augumented user 131061 8/50 current_auc = 0.7282741738066095
User 131061 AUC after training: 0.7307221542227662
User 131061 improves AUC. Keeping the model.
Training on augumented user 104473 9/50 current_auc = 0.7307221542227662
User 104473 AUC after training: 0.7294981640146878
User 104473 does not improve AUC. Reverting changes.
Training on augumented user 66686 10/50 current_auc = 0.7307221542227662
User 66686 AUC after training: 0.7294981640146878
User 66686 does not improve AUC. Reverting changes.
Training on augumented user 56195 11/50 current_auc = 0.7307221542227662
User 56195 AUC after training: 0.7294981640146878
User 56195 does not improve AUC. Reverting changes.
Training on augumented user 41348 12/50 current_auc = 0.7307221542227662
User 41348 AUC after training: 0.7294981640146878
User 41348 does not improve AUC. Reverting changes.
Training on augumented user 107322 13/50 current_auc = 0.7307221542227662
User 107322 AUC after training: 0.7282741738066095
User 107322 does not improve AUC. Reverting changes.
Training on augumented user 7413 14/50 current_auc = 0.7307221542227662
User 7413 AUC after training: 0.7294981640146878
User 7413 does not improve AUC. Reverting changes.
Training on augumented user 126842 15/50 current_auc = 0.7307221542227662
User 126842 AUC after training: 0.7282741738066095
User 126842 does not improve AUC. Reverting changes.
Training on augumented user 95555 16/50 current_auc = 0.7307221542227662
User 95555 AUC after training: 0.7294981640146878
User 95555 does not improve AUC. Reverting changes.
Training on augumented user 70505 17/50 current_auc = 0.7307221542227662
User 70505 AUC after training: 0.7294981640146878
User 70505 does not improve AUC. Reverting changes.
Training on augumented user 134195 18/50 current_auc = 0.7307221542227662
User 134195 AUC after training: 0.7307221542227662
User 134195 does not improve AUC. Reverting changes.
Training on augumented user 53530 19/50 current_auc = 0.7307221542227662
User 53530 AUC after training: 0.7294981640146878
User 53530 does not improve AUC. Reverting changes.
Training on augumented user 135246 20/50 current_auc = 0.7307221542227662
User 135246 AUC after training: 0.7294981640146878
User 135246 does not improve AUC. Reverting changes.
Training on augumented user 126820 21/50 current_auc = 0.7307221542227662
User 126820 AUC after training: 0.7294981640146878
User 126820 does not improve AUC. Reverting changes.
Training on augumented user 2185 22/50 current_auc = 0.7307221542227662
User 2185 AUC after training: 0.7294981640146878
User 2185 does not improve AUC. Reverting changes.
Training on augumented user 13016 23/50 current_auc = 0.7307221542227662
User 13016 AUC after training: 0.7307221542227662
User 13016 does not improve AUC. Reverting changes.
Training on augumented user 91783 24/50 current_auc = 0.7307221542227662
User 91783 AUC after training: 0.7282741738066095
User 91783 does not improve AUC. Reverting changes.
Training on augumented user 35779 25/50 current_auc = 0.7307221542227662
User 35779 AUC after training: 0.7319461444308445
User 35779 improves AUC. Keeping the model.
Training on augumented user 68241 26/50 current_auc = 0.7319461444308445
User 68241 AUC after training: 0.7307221542227662
User 68241 does not improve AUC. Reverting changes.
Training on augumented user 76044 27/50 current_auc = 0.7319461444308445
User 76044 AUC after training: 0.7307221542227662
User 76044 does not improve AUC. Reverting changes.
Training on augumented user 83108 28/50 current_auc = 0.7319461444308445
User 83108 AUC after training: 0.7294981640146878
User 83108 does not improve AUC. Reverting changes.
Training on augumented user 86236 29/50 current_auc = 0.7319461444308445
User 86236 AUC after training: 0.7319461444308445
User 86236 does not improve AUC. Reverting changes.
Training on augumented user 28628 30/50 current_auc = 0.7319461444308445
User 28628 AUC after training: 0.7294981640146878
User 28628 does not improve AUC. Reverting changes.
Training on augumented user 50187 31/50 current_auc = 0.7319461444308445
User 50187 AUC after training: 0.7294981640146878
User 50187 does not improve AUC. Reverting changes.
Training on augumented user 72105 32/50 current_auc = 0.7319461444308445
User 72105 AUC after training: 0.7246022031823746
User 72105 does not improve AUC. Reverting changes.
Training on augumented user 89565 33/50 current_auc = 0.7319461444308445
User 89565 AUC after training: 0.7282741738066095
User 89565 does not improve AUC. Reverting changes.
Training on augumented user 93651 34/50 current_auc = 0.7319461444308445
User 93651 AUC after training: 0.7307221542227662
User 93651 does not improve AUC. Reverting changes.
Training on augumented user 83752 35/50 current_auc = 0.7319461444308445
User 83752 AUC after training: 0.7356181150550796
User 83752 improves AUC. Keeping the model.
Training on augumented user 122542 36/50 current_auc = 0.7356181150550796
User 122542 AUC after training: 0.7343941248470012
User 122542 does not improve AUC. Reverting changes.
Training on augumented user 71007 37/50 current_auc = 0.7356181150550796
User 71007 AUC after training: 0.7331701346389229
User 71007 does not improve AUC. Reverting changes.
Training on augumented user 5094 38/50 current_auc = 0.7356181150550796
User 5094 AUC after training: 0.7343941248470012
User 5094 does not improve AUC. Reverting changes.
Training on augumented user 110872 39/50 current_auc = 0.7356181150550796
User 110872 AUC after training: 0.7356181150550796
User 110872 does not improve AUC. Reverting changes.
Training on augumented user 127486 40/50 current_auc = 0.7356181150550796
User 127486 AUC after training: 0.7307221542227662
User 127486 does not improve AUC. Reverting changes.
Training on augumented user 4096 41/50 current_auc = 0.7356181150550796
User 4096 AUC after training: 0.733170134638923
User 4096 does not improve AUC. Reverting changes.
Training on augumented user 105071 42/50 current_auc = 0.7356181150550796
User 105071 AUC after training: 0.7343941248470012
User 105071 does not improve AUC. Reverting changes.
Training on augumented user 69564 43/50 current_auc = 0.7356181150550796
User 69564 AUC after training: 0.7343941248470012
User 69564 does not improve AUC. Reverting changes.
Training on augumented user 9435 44/50 current_auc = 0.7356181150550796
User 9435 AUC after training: 0.7343941248470012
User 9435 does not improve AUC. Reverting changes.
Training on augumented user 126696 45/50 current_auc = 0.7356181150550796
User 126696 AUC after training: 0.7356181150550796
User 126696 does not improve AUC. Reverting changes.
Training on augumented user 82883 46/50 current_auc = 0.7356181150550796
User 82883 AUC after training: 0.7356181150550796
User 82883 does not improve AUC. Reverting changes.
Training on augumented user 16705 47/50 current_auc = 0.7356181150550796
User 16705 AUC after training: 0.7319461444308446
User 16705 does not improve AUC. Reverting changes.
Training on augumented user 92597 48/50 current_auc = 0.7356181150550796
User 92597 AUC after training: 0.736842105263158
User 92597 improves AUC. Keeping the model.
Training on augumented user 87319 49/50 current_auc = 0.736842105263158
User 87319 AUC after training: 0.7356181150550796
User 87319 does not improve AUC. Reverting changes.
[2024-12-02 18:11:44.090302] start test user 71026 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:44.606245] start test user 71026 63/568 recall augumented users by random, augumented_users = [125231, 51671, 21341, 39530, 11781, 102801, 38902, 20594, 17025, 62441, 113409, 5305, 900, 81911, 29330, 72565, 7637, 52656, 33629, 28808, 50375, 64810, 3535, 79818, 112329, 20889, 7676, 83000, 34246, 65943, 125391, 51489, 120033, 1175, 82257, 92598, 99160, 66683, 97001, 127238, 41561, 121069, 66294, 33496, 79478, 55963, 5202, 118064, 113824, 33203]
[2024-12-02 18:11:44.624149] user = 71026 Cloud 63/568
[2024-12-02 18:11:44.635562] user = 71026 Local 63/568
[2024-12-02 18:11:44.749624] user = 71026 Local+ 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:46.474064] user = 71026 MPDA- 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7692307692307692
Training on augumented user 125231 0/50 current_auc = 0.7692307692307692
User 125231 AUC after training: 0.7692307692307692
User 125231 does not improve AUC. Reverting changes.
Training on augumented user 51671 1/50 current_auc = 0.7692307692307692
User 51671 AUC after training: 0.7692307692307692
User 51671 does not improve AUC. Reverting changes.
Training on augumented user 21341 2/50 current_auc = 0.7692307692307692
User 21341 AUC after training: 0.7692307692307692
User 21341 does not improve AUC. Reverting changes.
Training on augumented user 39530 3/50 current_auc = 0.7692307692307692
User 39530 AUC after training: 0.7692307692307692
User 39530 does not improve AUC. Reverting changes.
Training on augumented user 11781 4/50 current_auc = 0.7692307692307692
User 11781 AUC after training: 0.7692307692307692
User 11781 does not improve AUC. Reverting changes.
Training on augumented user 102801 5/50 current_auc = 0.7692307692307692
User 102801 AUC after training: 0.7692307692307692
User 102801 does not improve AUC. Reverting changes.
Training on augumented user 38902 6/50 current_auc = 0.7692307692307692
User 38902 AUC after training: 0.7692307692307692
User 38902 does not improve AUC. Reverting changes.
Training on augumented user 20594 7/50 current_auc = 0.7692307692307692
User 20594 AUC after training: 0.7692307692307692
User 20594 does not improve AUC. Reverting changes.
Training on augumented user 17025 8/50 current_auc = 0.7692307692307692
User 17025 AUC after training: 0.7692307692307692
User 17025 does not improve AUC. Reverting changes.
Training on augumented user 62441 9/50 current_auc = 0.7692307692307692
User 62441 AUC after training: 0.7692307692307692
User 62441 does not improve AUC. Reverting changes.
Training on augumented user 113409 10/50 current_auc = 0.7692307692307692
User 113409 AUC after training: 0.7692307692307692
User 113409 does not improve AUC. Reverting changes.
Training on augumented user 5305 11/50 current_auc = 0.7692307692307692
User 5305 AUC after training: 0.7692307692307692
User 5305 does not improve AUC. Reverting changes.
Training on augumented user 900 12/50 current_auc = 0.7692307692307692
User 900 AUC after training: 0.7692307692307692
User 900 does not improve AUC. Reverting changes.
Training on augumented user 81911 13/50 current_auc = 0.7692307692307692
User 81911 AUC after training: 0.7692307692307692
User 81911 does not improve AUC. Reverting changes.
Training on augumented user 29330 14/50 current_auc = 0.7692307692307692
User 29330 AUC after training: 0.7692307692307692
User 29330 does not improve AUC. Reverting changes.
Training on augumented user 72565 15/50 current_auc = 0.7692307692307692
User 72565 AUC after training: 0.7692307692307692
User 72565 does not improve AUC. Reverting changes.
Training on augumented user 7637 16/50 current_auc = 0.7692307692307692
User 7637 AUC after training: 0.7692307692307692
User 7637 does not improve AUC. Reverting changes.
Training on augumented user 52656 17/50 current_auc = 0.7692307692307692
User 52656 AUC after training: 0.7692307692307692
User 52656 does not improve AUC. Reverting changes.
Training on augumented user 33629 18/50 current_auc = 0.7692307692307692
User 33629 AUC after training: 0.7692307692307692
User 33629 does not improve AUC. Reverting changes.
Training on augumented user 28808 19/50 current_auc = 0.7692307692307692
User 28808 AUC after training: 0.7692307692307692
User 28808 does not improve AUC. Reverting changes.
Training on augumented user 50375 20/50 current_auc = 0.7692307692307692
User 50375 AUC after training: 0.7692307692307692
User 50375 does not improve AUC. Reverting changes.
Training on augumented user 64810 21/50 current_auc = 0.7692307692307692
User 64810 AUC after training: 0.7692307692307692
User 64810 does not improve AUC. Reverting changes.
Training on augumented user 3535 22/50 current_auc = 0.7692307692307692
User 3535 AUC after training: 0.7692307692307692
User 3535 does not improve AUC. Reverting changes.
Training on augumented user 79818 23/50 current_auc = 0.7692307692307692
User 79818 AUC after training: 0.7692307692307692
User 79818 does not improve AUC. Reverting changes.
Training on augumented user 112329 24/50 current_auc = 0.7692307692307692
User 112329 AUC after training: 0.7692307692307692
User 112329 does not improve AUC. Reverting changes.
Training on augumented user 20889 25/50 current_auc = 0.7692307692307692
User 20889 AUC after training: 0.7692307692307692
User 20889 does not improve AUC. Reverting changes.
Training on augumented user 7676 26/50 current_auc = 0.7692307692307692
User 7676 AUC after training: 0.7692307692307692
User 7676 does not improve AUC. Reverting changes.
Training on augumented user 83000 27/50 current_auc = 0.7692307692307692
User 83000 AUC after training: 0.7692307692307692
User 83000 does not improve AUC. Reverting changes.
Training on augumented user 34246 28/50 current_auc = 0.7692307692307692
User 34246 AUC after training: 0.7692307692307692
User 34246 does not improve AUC. Reverting changes.
Training on augumented user 65943 29/50 current_auc = 0.7692307692307692
User 65943 AUC after training: 0.7692307692307692
User 65943 does not improve AUC. Reverting changes.
Training on augumented user 125391 30/50 current_auc = 0.7692307692307692
User 125391 AUC after training: 0.7692307692307692
User 125391 does not improve AUC. Reverting changes.
Training on augumented user 51489 31/50 current_auc = 0.7692307692307692
User 51489 AUC after training: 0.7692307692307692
User 51489 does not improve AUC. Reverting changes.
Training on augumented user 120033 32/50 current_auc = 0.7692307692307692
User 120033 AUC after training: 0.7692307692307692
User 120033 does not improve AUC. Reverting changes.
Training on augumented user 1175 33/50 current_auc = 0.7692307692307692
User 1175 AUC after training: 0.7692307692307692
User 1175 does not improve AUC. Reverting changes.
Training on augumented user 82257 34/50 current_auc = 0.7692307692307692
User 82257 AUC after training: 0.7692307692307692
User 82257 does not improve AUC. Reverting changes.
Training on augumented user 92598 35/50 current_auc = 0.7692307692307692
User 92598 AUC after training: 0.7692307692307692
User 92598 does not improve AUC. Reverting changes.
Training on augumented user 99160 36/50 current_auc = 0.7692307692307692
User 99160 AUC after training: 0.7692307692307692
User 99160 does not improve AUC. Reverting changes.
Training on augumented user 66683 37/50 current_auc = 0.7692307692307692
User 66683 AUC after training: 0.7692307692307692
User 66683 does not improve AUC. Reverting changes.
Training on augumented user 97001 38/50 current_auc = 0.7692307692307692
User 97001 AUC after training: 0.7692307692307692
User 97001 does not improve AUC. Reverting changes.
Training on augumented user 127238 39/50 current_auc = 0.7692307692307692
User 127238 AUC after training: 0.7692307692307692
User 127238 does not improve AUC. Reverting changes.
Training on augumented user 41561 40/50 current_auc = 0.7692307692307692
User 41561 AUC after training: 0.7692307692307692
User 41561 does not improve AUC. Reverting changes.
Training on augumented user 121069 41/50 current_auc = 0.7692307692307692
User 121069 AUC after training: 0.7692307692307692
User 121069 does not improve AUC. Reverting changes.
Training on augumented user 66294 42/50 current_auc = 0.7692307692307692
User 66294 AUC after training: 0.7692307692307692
User 66294 does not improve AUC. Reverting changes.
Training on augumented user 33496 43/50 current_auc = 0.7692307692307692
User 33496 AUC after training: 0.7692307692307692
User 33496 does not improve AUC. Reverting changes.
Training on augumented user 79478 44/50 current_auc = 0.7692307692307692
User 79478 AUC after training: 0.7692307692307692
User 79478 does not improve AUC. Reverting changes.
Training on augumented user 55963 45/50 current_auc = 0.7692307692307692
User 55963 AUC after training: 0.7692307692307692
User 55963 does not improve AUC. Reverting changes.
Training on augumented user 5202 46/50 current_auc = 0.7692307692307692
User 5202 AUC after training: 0.7692307692307692
User 5202 does not improve AUC. Reverting changes.
Training on augumented user 118064 47/50 current_auc = 0.7692307692307692
User 118064 AUC after training: 0.7692307692307692
User 118064 does not improve AUC. Reverting changes.
Training on augumented user 113824 48/50 current_auc = 0.7692307692307692
User 113824 AUC after training: 0.7692307692307692
User 113824 does not improve AUC. Reverting changes.
Training on augumented user 33203 49/50 current_auc = 0.7692307692307692
User 33203 AUC after training: 0.7692307692307692
User 33203 does not improve AUC. Reverting changes.
[2024-12-02 18:12:14.429323] start test user 71036 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:14.834473] start test user 71036 64/568 recall augumented users by random, augumented_users = [30439, 97547, 132095, 12860, 21818, 104271, 2138, 127867, 130488, 116592, 12847, 95109, 30659, 47556, 14313, 84723, 79967, 26342, 66180, 101389, 114245, 53375, 89037, 93211, 23704, 5641, 6764, 131230, 28272, 1722, 69213, 39719, 53342, 64591, 74892, 58435, 131227, 108064, 50978, 91743, 20855, 102611, 48723, 87569, 72130, 115341, 66810, 49186, 81072, 53438]
[2024-12-02 18:12:14.849880] user = 71036 Cloud 64/568
[2024-12-02 18:12:14.876333] user = 71036 Local 64/568
[2024-12-02 18:12:14.996042] user = 71036 Local+ 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:18.437554] user = 71036 MPDA- 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8462223806129722
Training on augumented user 30439 0/50 current_auc = 0.8462223806129722
User 30439 AUC after training: 0.8464599667379425
User 30439 improves AUC. Keeping the model.
Training on augumented user 97547 1/50 current_auc = 0.8464599667379425
User 97547 AUC after training: 0.8464599667379424
User 97547 does not improve AUC. Reverting changes.
Training on augumented user 132095 2/50 current_auc = 0.8464599667379425
User 132095 AUC after training: 0.8442325968163459
User 132095 does not improve AUC. Reverting changes.
Training on augumented user 12860 3/50 current_auc = 0.8464599667379425
User 12860 AUC after training: 0.8475885008315514
User 12860 improves AUC. Keeping the model.
Training on augumented user 21818 4/50 current_auc = 0.8475885008315514
User 21818 AUC after training: 0.8475291043003088
User 21818 does not improve AUC. Reverting changes.
Training on augumented user 104271 5/50 current_auc = 0.8475885008315514
User 104271 AUC after training: 0.8475885008315515
User 104271 improves AUC. Keeping the model.
Training on augumented user 2138 6/50 current_auc = 0.8475885008315515
User 2138 AUC after training: 0.8477666904252792
User 2138 improves AUC. Keeping the model.
Training on augumented user 127867 7/50 current_auc = 0.8477666904252792
User 127867 AUC after training: 0.8480042765502495
User 127867 improves AUC. Keeping the model.
Training on augumented user 130488 8/50 current_auc = 0.8480042765502495
User 130488 AUC after training: 0.8476478973627939
User 130488 does not improve AUC. Reverting changes.
Training on augumented user 116592 9/50 current_auc = 0.8480042765502495
User 116592 AUC after training: 0.8480636730814919
User 116592 improves AUC. Keeping the model.
Training on augumented user 12847 10/50 current_auc = 0.8480636730814919
User 12847 AUC after training: 0.8480042765502495
User 12847 does not improve AUC. Reverting changes.
Training on augumented user 95109 11/50 current_auc = 0.8480636730814919
User 95109 AUC after training: 0.8479448800190068
User 95109 does not improve AUC. Reverting changes.
Training on augumented user 30659 12/50 current_auc = 0.8480636730814919
User 30659 AUC after training: 0.8481824661439772
User 30659 improves AUC. Keeping the model.
Training on augumented user 47556 13/50 current_auc = 0.8481824661439772
User 47556 AUC after training: 0.8470539320503683
User 47556 does not improve AUC. Reverting changes.
Training on augumented user 14313 14/50 current_auc = 0.8481824661439772
User 14313 AUC after training: 0.8479448800190068
User 14313 does not improve AUC. Reverting changes.
Training on augumented user 84723 15/50 current_auc = 0.8481824661439772
User 84723 AUC after training: 0.8480042765502493
User 84723 does not improve AUC. Reverting changes.
Training on augumented user 79967 16/50 current_auc = 0.8481824661439772
User 79967 AUC after training: 0.8477666904252792
User 79967 does not improve AUC. Reverting changes.
Training on augumented user 26342 17/50 current_auc = 0.8481824661439772
User 26342 AUC after training: 0.8480042765502493
User 26342 does not improve AUC. Reverting changes.
Training on augumented user 66180 18/50 current_auc = 0.8481824661439772
User 66180 AUC after training: 0.8478260869565217
User 66180 does not improve AUC. Reverting changes.
Training on augumented user 101389 19/50 current_auc = 0.8481824661439772
User 101389 AUC after training: 0.8480636730814921
User 101389 does not improve AUC. Reverting changes.
Training on augumented user 114245 20/50 current_auc = 0.8481824661439772
User 114245 AUC after training: 0.848063673081492
User 114245 does not improve AUC. Reverting changes.
Training on augumented user 53375 21/50 current_auc = 0.8481824661439772
User 53375 AUC after training: 0.848063673081492
User 53375 does not improve AUC. Reverting changes.
Training on augumented user 89037 22/50 current_auc = 0.8481824661439772
User 89037 AUC after training: 0.8480042765502496
User 89037 does not improve AUC. Reverting changes.
Training on augumented user 93211 23/50 current_auc = 0.8481824661439772
User 93211 AUC after training: 0.8478854834877643
User 93211 does not improve AUC. Reverting changes.
Training on augumented user 23704 24/50 current_auc = 0.8481824661439772
User 23704 AUC after training: 0.8475885008315515
User 23704 does not improve AUC. Reverting changes.
Training on augumented user 5641 25/50 current_auc = 0.8481824661439772
User 5641 AUC after training: 0.8478260869565217
User 5641 does not improve AUC. Reverting changes.
Training on augumented user 6764 26/50 current_auc = 0.8481824661439772
User 6764 AUC after training: 0.8474697077690663
User 6764 does not improve AUC. Reverting changes.
Training on augumented user 131230 27/50 current_auc = 0.8481824661439772
User 131230 AUC after training: 0.8484794488001901
User 131230 improves AUC. Keeping the model.
Training on augumented user 28272 28/50 current_auc = 0.8484794488001901
User 28272 AUC after training: 0.8480636730814921
User 28272 does not improve AUC. Reverting changes.
Training on augumented user 1722 29/50 current_auc = 0.8484794488001901
User 1722 AUC after training: 0.8480042765502493
User 1722 does not improve AUC. Reverting changes.
Training on augumented user 69213 30/50 current_auc = 0.8484794488001901
User 69213 AUC after training: 0.8484200522689476
User 69213 does not improve AUC. Reverting changes.
Training on augumented user 39719 31/50 current_auc = 0.8484794488001901
User 39719 AUC after training: 0.8483012592064624
User 39719 does not improve AUC. Reverting changes.
Training on augumented user 53342 32/50 current_auc = 0.8484794488001901
User 53342 AUC after training: 0.8483012592064624
User 53342 does not improve AUC. Reverting changes.
Training on augumented user 64591 33/50 current_auc = 0.8484794488001901
User 64591 AUC after training: 0.8484200522689475
User 64591 does not improve AUC. Reverting changes.
Training on augumented user 74892 34/50 current_auc = 0.8484794488001901
User 74892 AUC after training: 0.8483012592064623
User 74892 does not improve AUC. Reverting changes.
Training on augumented user 58435 35/50 current_auc = 0.8484794488001901
User 58435 AUC after training: 0.8487764314564029
User 58435 improves AUC. Keeping the model.
Training on augumented user 131227 36/50 current_auc = 0.8487764314564029
User 131227 AUC after training: 0.8485982418626752
User 131227 does not improve AUC. Reverting changes.
Training on augumented user 108064 37/50 current_auc = 0.8487764314564029
User 108064 AUC after training: 0.8484794488001901
User 108064 does not improve AUC. Reverting changes.
Training on augumented user 50978 38/50 current_auc = 0.8487764314564029
User 50978 AUC after training: 0.8487764314564029
User 50978 does not improve AUC. Reverting changes.
Training on augumented user 91743 39/50 current_auc = 0.8487764314564029
User 91743 AUC after training: 0.8487170349251603
User 91743 does not improve AUC. Reverting changes.
Training on augumented user 20855 40/50 current_auc = 0.8487764314564029
User 20855 AUC after training: 0.8485388453314326
User 20855 does not improve AUC. Reverting changes.
Training on augumented user 102611 41/50 current_auc = 0.8487764314564029
User 102611 AUC after training: 0.8489546210501306
User 102611 improves AUC. Keeping the model.
Training on augumented user 48723 42/50 current_auc = 0.8489546210501306
User 48723 AUC after training: 0.8490140175813732
User 48723 improves AUC. Keeping the model.
Training on augumented user 87569 43/50 current_auc = 0.8490140175813732
User 87569 AUC after training: 0.8488952245188881
User 87569 does not improve AUC. Reverting changes.
Training on augumented user 72130 44/50 current_auc = 0.8490140175813732
User 72130 AUC after training: 0.8488952245188881
User 72130 does not improve AUC. Reverting changes.
Training on augumented user 115341 45/50 current_auc = 0.8490140175813732
User 115341 AUC after training: 0.8490734141126158
User 115341 improves AUC. Keeping the model.
Training on augumented user 66810 46/50 current_auc = 0.8490734141126158
User 66810 AUC after training: 0.8495485863625565
User 66810 improves AUC. Keeping the model.
Training on augumented user 49186 47/50 current_auc = 0.8495485863625565
User 49186 AUC after training: 0.850023758612497
User 49186 improves AUC. Keeping the model.
Training on augumented user 81072 48/50 current_auc = 0.850023758612497
User 81072 AUC after training: 0.8497861724875267
User 81072 does not improve AUC. Reverting changes.
Training on augumented user 53438 49/50 current_auc = 0.850023758612497
User 53438 AUC after training: 0.8495485863625565
User 53438 does not improve AUC. Reverting changes.
[2024-12-02 18:12:52.260677] start test user 71055 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:53.229189] start test user 71055 65/568 recall augumented users by random, augumented_users = [111227, 73365, 23303, 5217, 26878, 16498, 92593, 24996, 7606, 26424, 111131, 99254, 91340, 128248, 55532, 48195, 46157, 45512, 90793, 116172, 105353, 111941, 65594, 31622, 72596, 72101, 50007, 111558, 66188, 36783, 118358, 417, 103496, 68769, 37012, 127590, 47064, 86106, 131483, 14968, 61526, 3790, 26986, 115465, 8779, 127539, 103035, 79386, 133921, 67762]
[2024-12-02 18:12:53.253434] user = 71055 Cloud 65/568
[2024-12-02 18:12:53.331269] user = 71055 Local 65/568
[2024-12-02 18:12:53.395718] user = 71055 Local+ 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:55.733753] user = 71055 MPDA- 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6275641025641026
Training on augumented user 111227 0/50 current_auc = 0.6275641025641026
User 111227 AUC after training: 0.6269230769230769
User 111227 does not improve AUC. Reverting changes.
Training on augumented user 73365 1/50 current_auc = 0.6275641025641026
User 73365 AUC after training: 0.627991452991453
User 73365 improves AUC. Keeping the model.
Training on augumented user 23303 2/50 current_auc = 0.627991452991453
User 23303 AUC after training: 0.6281339031339032
User 23303 improves AUC. Keeping the model.
Training on augumented user 5217 3/50 current_auc = 0.6281339031339032
User 5217 AUC after training: 0.6276709401709403
User 5217 does not improve AUC. Reverting changes.
Training on augumented user 26878 4/50 current_auc = 0.6281339031339032
User 26878 AUC after training: 0.6278846153846154
User 26878 does not improve AUC. Reverting changes.
Training on augumented user 16498 5/50 current_auc = 0.6281339031339032
User 16498 AUC after training: 0.6282051282051282
User 16498 improves AUC. Keeping the model.
Training on augumented user 92593 6/50 current_auc = 0.6282051282051282
User 92593 AUC after training: 0.628525641025641
User 92593 improves AUC. Keeping the model.
Training on augumented user 24996 7/50 current_auc = 0.628525641025641
User 24996 AUC after training: 0.6284900284900284
User 24996 does not improve AUC. Reverting changes.
Training on augumented user 7606 8/50 current_auc = 0.628525641025641
User 7606 AUC after training: 0.6284188034188034
User 7606 does not improve AUC. Reverting changes.
Training on augumented user 26424 9/50 current_auc = 0.628525641025641
User 26424 AUC after training: 0.6276175213675214
User 26424 does not improve AUC. Reverting changes.
Training on augumented user 111131 10/50 current_auc = 0.628525641025641
User 111131 AUC after training: 0.6291310541310542
User 111131 improves AUC. Keeping the model.
Training on augumented user 99254 11/50 current_auc = 0.6291310541310542
User 99254 AUC after training: 0.6290954415954415
User 99254 does not improve AUC. Reverting changes.
Training on augumented user 91340 12/50 current_auc = 0.6291310541310542
User 91340 AUC after training: 0.6274216524216524
User 91340 does not improve AUC. Reverting changes.
Training on augumented user 128248 13/50 current_auc = 0.6291310541310542
User 128248 AUC after training: 0.6286680911680911
User 128248 does not improve AUC. Reverting changes.
Training on augumented user 55532 14/50 current_auc = 0.6291310541310542
User 55532 AUC after training: 0.6274928774928775
User 55532 does not improve AUC. Reverting changes.
Training on augumented user 48195 15/50 current_auc = 0.6291310541310542
User 48195 AUC after training: 0.6293091168091168
User 48195 improves AUC. Keeping the model.
Training on augumented user 46157 16/50 current_auc = 0.6293091168091168
User 46157 AUC after training: 0.6283653846153846
User 46157 does not improve AUC. Reverting changes.
Training on augumented user 45512 17/50 current_auc = 0.6293091168091168
User 45512 AUC after training: 0.6284188034188034
User 45512 does not improve AUC. Reverting changes.
Training on augumented user 90793 18/50 current_auc = 0.6293091168091168
User 90793 AUC after training: 0.6276175213675215
User 90793 does not improve AUC. Reverting changes.
Training on augumented user 116172 19/50 current_auc = 0.6293091168091168
User 116172 AUC after training: 0.628383190883191
User 116172 does not improve AUC. Reverting changes.
Training on augumented user 105353 20/50 current_auc = 0.6293091168091168
User 105353 AUC after training: 0.6276709401709402
User 105353 does not improve AUC. Reverting changes.
Training on augumented user 111941 21/50 current_auc = 0.6293091168091168
User 111941 AUC after training: 0.6291666666666667
User 111941 does not improve AUC. Reverting changes.
Training on augumented user 65594 22/50 current_auc = 0.6293091168091168
User 65594 AUC after training: 0.6287037037037037
User 65594 does not improve AUC. Reverting changes.
Training on augumented user 31622 23/50 current_auc = 0.6293091168091168
User 31622 AUC after training: 0.628454415954416
User 31622 does not improve AUC. Reverting changes.
Training on augumented user 72596 24/50 current_auc = 0.6293091168091168
User 72596 AUC after training: 0.628454415954416
User 72596 does not improve AUC. Reverting changes.
Training on augumented user 72101 25/50 current_auc = 0.6293091168091168
User 72101 AUC after training: 0.629059829059829
User 72101 does not improve AUC. Reverting changes.
Training on augumented user 50007 26/50 current_auc = 0.6293091168091168
User 50007 AUC after training: 0.6280982905982906
User 50007 does not improve AUC. Reverting changes.
Training on augumented user 111558 27/50 current_auc = 0.6293091168091168
User 111558 AUC after training: 0.6287749287749287
User 111558 does not improve AUC. Reverting changes.
Training on augumented user 66188 28/50 current_auc = 0.6293091168091168
User 66188 AUC after training: 0.6287749287749287
User 66188 does not improve AUC. Reverting changes.
Training on augumented user 36783 29/50 current_auc = 0.6293091168091168
User 36783 AUC after training: 0.6284188034188034
User 36783 does not improve AUC. Reverting changes.
Training on augumented user 118358 30/50 current_auc = 0.6293091168091168
User 118358 AUC after training: 0.6277421652421653
User 118358 does not improve AUC. Reverting changes.
Training on augumented user 417 31/50 current_auc = 0.6293091168091168
User 417 AUC after training: 0.6284900284900286
User 417 does not improve AUC. Reverting changes.
Training on augumented user 103496 32/50 current_auc = 0.6293091168091168
User 103496 AUC after training: 0.6284900284900284
User 103496 does not improve AUC. Reverting changes.
Training on augumented user 68769 33/50 current_auc = 0.6293091168091168
User 68769 AUC after training: 0.6295584045584045
User 68769 improves AUC. Keeping the model.
Training on augumented user 37012 34/50 current_auc = 0.6295584045584045
User 37012 AUC after training: 0.629789886039886
User 37012 improves AUC. Keeping the model.
Training on augumented user 127590 35/50 current_auc = 0.629789886039886
User 127590 AUC after training: 0.6280804843304842
User 127590 does not improve AUC. Reverting changes.
Training on augumented user 47064 36/50 current_auc = 0.629789886039886
User 47064 AUC after training: 0.6282407407407408
User 47064 does not improve AUC. Reverting changes.
Training on augumented user 86106 37/50 current_auc = 0.629789886039886
User 86106 AUC after training: 0.6279558404558404
User 86106 does not improve AUC. Reverting changes.
Training on augumented user 131483 38/50 current_auc = 0.629789886039886
User 131483 AUC after training: 0.6291132478632478
User 131483 does not improve AUC. Reverting changes.
Training on augumented user 14968 39/50 current_auc = 0.629789886039886
User 14968 AUC after training: 0.6297364672364671
User 14968 does not improve AUC. Reverting changes.
Training on augumented user 61526 40/50 current_auc = 0.629789886039886
User 61526 AUC after training: 0.6279558404558405
User 61526 does not improve AUC. Reverting changes.
Training on augumented user 3790 41/50 current_auc = 0.629789886039886
User 3790 AUC after training: 0.6292378917378917
User 3790 does not improve AUC. Reverting changes.
Training on augumented user 26986 42/50 current_auc = 0.629789886039886
User 26986 AUC after training: 0.6278846153846154
User 26986 does not improve AUC. Reverting changes.
Training on augumented user 115465 43/50 current_auc = 0.629789886039886
User 115465 AUC after training: 0.6284900284900284
User 115465 does not improve AUC. Reverting changes.
Training on augumented user 8779 44/50 current_auc = 0.629789886039886
User 8779 AUC after training: 0.6278490028490029
User 8779 does not improve AUC. Reverting changes.
Training on augumented user 127539 45/50 current_auc = 0.629789886039886
User 127539 AUC after training: 0.6288817663817663
User 127539 does not improve AUC. Reverting changes.
Training on augumented user 103035 46/50 current_auc = 0.629789886039886
User 103035 AUC after training: 0.6282407407407408
User 103035 does not improve AUC. Reverting changes.
Training on augumented user 79386 47/50 current_auc = 0.629789886039886
User 79386 AUC after training: 0.6295762108262108
User 79386 does not improve AUC. Reverting changes.
Training on augumented user 133921 48/50 current_auc = 0.629789886039886
User 133921 AUC after training: 0.6282407407407407
User 133921 does not improve AUC. Reverting changes.
Training on augumented user 67762 49/50 current_auc = 0.629789886039886
User 67762 AUC after training: 0.6294337606837607
User 67762 does not improve AUC. Reverting changes.
[2024-12-02 18:13:29.845777] start test user 71056 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:30.335309] start test user 71056 66/568 recall augumented users by random, augumented_users = [114390, 99881, 20906, 41992, 54297, 39151, 54772, 42991, 33426, 88196, 70499, 2403, 91476, 120706, 105186, 22868, 5094, 110181, 68523, 69893, 68592, 123428, 120769, 86028, 79533, 75529, 103017, 26466, 113189, 66847, 119696, 99748, 80666, 57118, 54750, 11552, 10107, 124258, 68802, 84177, 99078, 11715, 115721, 94852, 134326, 63594, 46848, 51080, 67068, 45748]
[2024-12-02 18:13:30.349899] user = 71056 Cloud 66/568
[2024-12-02 18:13:30.360299] user = 71056 Local 66/568
[2024-12-02 18:13:30.391926] user = 71056 Local+ 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:33.202092] user = 71056 MPDA- 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6702898550724639
Training on augumented user 114390 0/50 current_auc = 0.6702898550724639
User 114390 AUC after training: 0.6630434782608695
User 114390 does not improve AUC. Reverting changes.
Training on augumented user 99881 1/50 current_auc = 0.6702898550724639
User 99881 AUC after training: 0.6666666666666666
User 99881 does not improve AUC. Reverting changes.
Training on augumented user 20906 2/50 current_auc = 0.6702898550724639
User 20906 AUC after training: 0.6666666666666666
User 20906 does not improve AUC. Reverting changes.
Training on augumented user 41992 3/50 current_auc = 0.6702898550724639
User 41992 AUC after training: 0.6702898550724639
User 41992 does not improve AUC. Reverting changes.
Training on augumented user 54297 4/50 current_auc = 0.6702898550724639
User 54297 AUC after training: 0.6630434782608695
User 54297 does not improve AUC. Reverting changes.
Training on augumented user 39151 5/50 current_auc = 0.6702898550724639
User 39151 AUC after training: 0.6666666666666666
User 39151 does not improve AUC. Reverting changes.
Training on augumented user 54772 6/50 current_auc = 0.6702898550724639
User 54772 AUC after training: 0.6666666666666666
User 54772 does not improve AUC. Reverting changes.
Training on augumented user 42991 7/50 current_auc = 0.6702898550724639
User 42991 AUC after training: 0.6702898550724639
User 42991 does not improve AUC. Reverting changes.
Training on augumented user 33426 8/50 current_auc = 0.6702898550724639
User 33426 AUC after training: 0.6702898550724639
User 33426 does not improve AUC. Reverting changes.
Training on augumented user 88196 9/50 current_auc = 0.6702898550724639
User 88196 AUC after training: 0.6630434782608695
User 88196 does not improve AUC. Reverting changes.
Training on augumented user 70499 10/50 current_auc = 0.6702898550724639
User 70499 AUC after training: 0.6666666666666666
User 70499 does not improve AUC. Reverting changes.
Training on augumented user 2403 11/50 current_auc = 0.6702898550724639
User 2403 AUC after training: 0.6702898550724639
User 2403 does not improve AUC. Reverting changes.
Training on augumented user 91476 12/50 current_auc = 0.6702898550724639
User 91476 AUC after training: 0.6739130434782609
User 91476 improves AUC. Keeping the model.
Training on augumented user 120706 13/50 current_auc = 0.6739130434782609
User 120706 AUC after training: 0.6739130434782609
User 120706 does not improve AUC. Reverting changes.
Training on augumented user 105186 14/50 current_auc = 0.6739130434782609
User 105186 AUC after training: 0.6739130434782609
User 105186 does not improve AUC. Reverting changes.
Training on augumented user 22868 15/50 current_auc = 0.6739130434782609
User 22868 AUC after training: 0.6739130434782609
User 22868 does not improve AUC. Reverting changes.
Training on augumented user 5094 16/50 current_auc = 0.6739130434782609
User 5094 AUC after training: 0.6666666666666666
User 5094 does not improve AUC. Reverting changes.
Training on augumented user 110181 17/50 current_auc = 0.6739130434782609
User 110181 AUC after training: 0.6811594202898551
User 110181 improves AUC. Keeping the model.
Training on augumented user 68523 18/50 current_auc = 0.6811594202898551
User 68523 AUC after training: 0.677536231884058
User 68523 does not improve AUC. Reverting changes.
Training on augumented user 69893 19/50 current_auc = 0.6811594202898551
User 69893 AUC after training: 0.677536231884058
User 69893 does not improve AUC. Reverting changes.
Training on augumented user 68592 20/50 current_auc = 0.6811594202898551
User 68592 AUC after training: 0.673913043478261
User 68592 does not improve AUC. Reverting changes.
Training on augumented user 123428 21/50 current_auc = 0.6811594202898551
User 123428 AUC after training: 0.6811594202898551
User 123428 does not improve AUC. Reverting changes.
Training on augumented user 120769 22/50 current_auc = 0.6811594202898551
User 120769 AUC after training: 0.6811594202898551
User 120769 does not improve AUC. Reverting changes.
Training on augumented user 86028 23/50 current_auc = 0.6811594202898551
User 86028 AUC after training: 0.677536231884058
User 86028 does not improve AUC. Reverting changes.
Training on augumented user 79533 24/50 current_auc = 0.6811594202898551
User 79533 AUC after training: 0.6992753623188406
User 79533 improves AUC. Keeping the model.
Training on augumented user 75529 25/50 current_auc = 0.6992753623188406
User 75529 AUC after training: 0.6956521739130435
User 75529 does not improve AUC. Reverting changes.
Training on augumented user 103017 26/50 current_auc = 0.6992753623188406
User 103017 AUC after training: 0.6956521739130435
User 103017 does not improve AUC. Reverting changes.
Training on augumented user 26466 27/50 current_auc = 0.6992753623188406
User 26466 AUC after training: 0.6956521739130435
User 26466 does not improve AUC. Reverting changes.
Training on augumented user 113189 28/50 current_auc = 0.6992753623188406
User 113189 AUC after training: 0.6992753623188406
User 113189 does not improve AUC. Reverting changes.
Training on augumented user 66847 29/50 current_auc = 0.6992753623188406
User 66847 AUC after training: 0.6992753623188406
User 66847 does not improve AUC. Reverting changes.
Training on augumented user 119696 30/50 current_auc = 0.6992753623188406
User 119696 AUC after training: 0.6992753623188406
User 119696 does not improve AUC. Reverting changes.
Training on augumented user 99748 31/50 current_auc = 0.6992753623188406
User 99748 AUC after training: 0.6884057971014492
User 99748 does not improve AUC. Reverting changes.
Training on augumented user 80666 32/50 current_auc = 0.6992753623188406
User 80666 AUC after training: 0.6956521739130435
User 80666 does not improve AUC. Reverting changes.
Training on augumented user 57118 33/50 current_auc = 0.6992753623188406
User 57118 AUC after training: 0.6992753623188406
User 57118 does not improve AUC. Reverting changes.
Training on augumented user 54750 34/50 current_auc = 0.6992753623188406
User 54750 AUC after training: 0.6992753623188406
User 54750 does not improve AUC. Reverting changes.
Training on augumented user 11552 35/50 current_auc = 0.6992753623188406
User 11552 AUC after training: 0.6992753623188406
User 11552 does not improve AUC. Reverting changes.
Training on augumented user 10107 36/50 current_auc = 0.6992753623188406
User 10107 AUC after training: 0.6956521739130435
User 10107 does not improve AUC. Reverting changes.
Training on augumented user 124258 37/50 current_auc = 0.6992753623188406
User 124258 AUC after training: 0.6992753623188406
User 124258 does not improve AUC. Reverting changes.
Training on augumented user 68802 38/50 current_auc = 0.6992753623188406
User 68802 AUC after training: 0.6992753623188406
User 68802 does not improve AUC. Reverting changes.
Training on augumented user 84177 39/50 current_auc = 0.6992753623188406
User 84177 AUC after training: 0.6956521739130435
User 84177 does not improve AUC. Reverting changes.
Training on augumented user 99078 40/50 current_auc = 0.6992753623188406
User 99078 AUC after training: 0.6992753623188406
User 99078 does not improve AUC. Reverting changes.
Training on augumented user 11715 41/50 current_auc = 0.6992753623188406
User 11715 AUC after training: 0.6992753623188406
User 11715 does not improve AUC. Reverting changes.
Training on augumented user 115721 42/50 current_auc = 0.6992753623188406
User 115721 AUC after training: 0.6956521739130435
User 115721 does not improve AUC. Reverting changes.
Training on augumented user 94852 43/50 current_auc = 0.6992753623188406
User 94852 AUC after training: 0.6992753623188406
User 94852 does not improve AUC. Reverting changes.
Training on augumented user 134326 44/50 current_auc = 0.6992753623188406
User 134326 AUC after training: 0.6956521739130435
User 134326 does not improve AUC. Reverting changes.
Training on augumented user 63594 45/50 current_auc = 0.6992753623188406
User 63594 AUC after training: 0.6992753623188406
User 63594 does not improve AUC. Reverting changes.
Training on augumented user 46848 46/50 current_auc = 0.6992753623188406
User 46848 AUC after training: 0.6884057971014493
User 46848 does not improve AUC. Reverting changes.
Training on augumented user 51080 47/50 current_auc = 0.6992753623188406
User 51080 AUC after training: 0.6956521739130435
User 51080 does not improve AUC. Reverting changes.
Training on augumented user 67068 48/50 current_auc = 0.6992753623188406
User 67068 AUC after training: 0.6992753623188406
User 67068 does not improve AUC. Reverting changes.
Training on augumented user 45748 49/50 current_auc = 0.6992753623188406
User 45748 AUC after training: 0.6992753623188406
User 45748 does not improve AUC. Reverting changes.
[2024-12-02 18:14:04.242680] start test user 71083 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:04.725982] start test user 71083 67/568 recall augumented users by random, augumented_users = [542, 72131, 101827, 44257, 136750, 85617, 81963, 72169, 105785, 45782, 96119, 21424, 78545, 74652, 80031, 68126, 3944, 16534, 109685, 6948, 119558, 60071, 6747, 71527, 23303, 115143, 80462, 55341, 14499, 80110, 104004, 58303, 70663, 10250, 42963, 61126, 81052, 52298, 75058, 19917, 450, 69293, 112855, 50330, 104639, 102152, 14376, 119881, 106970, 58305]
[2024-12-02 18:14:04.740136] user = 71083 Cloud 67/568
[2024-12-02 18:14:04.749840] user = 71083 Local 67/568
[2024-12-02 18:14:04.767835] user = 71083 Local+ 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:07.460984] user = 71083 MPDA- 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 542 0/50 current_auc = 0.0
User 542 AUC after training: 0.0
User 542 does not improve AUC. Reverting changes.
Training on augumented user 72131 1/50 current_auc = 0.0
User 72131 AUC after training: 0.0
User 72131 does not improve AUC. Reverting changes.
Training on augumented user 101827 2/50 current_auc = 0.0
User 101827 AUC after training: 0.0
User 101827 does not improve AUC. Reverting changes.
Training on augumented user 44257 3/50 current_auc = 0.0
User 44257 AUC after training: 0.0
User 44257 does not improve AUC. Reverting changes.
Training on augumented user 136750 4/50 current_auc = 0.0
User 136750 AUC after training: 0.0
User 136750 does not improve AUC. Reverting changes.
Training on augumented user 85617 5/50 current_auc = 0.0
User 85617 AUC after training: 0.0
User 85617 does not improve AUC. Reverting changes.
Training on augumented user 81963 6/50 current_auc = 0.0
User 81963 AUC after training: 0.0
User 81963 does not improve AUC. Reverting changes.
Training on augumented user 72169 7/50 current_auc = 0.0
User 72169 AUC after training: 0.0
User 72169 does not improve AUC. Reverting changes.
Training on augumented user 105785 8/50 current_auc = 0.0
User 105785 AUC after training: 0.0
User 105785 does not improve AUC. Reverting changes.
Training on augumented user 45782 9/50 current_auc = 0.0
User 45782 AUC after training: 0.0
User 45782 does not improve AUC. Reverting changes.
Training on augumented user 96119 10/50 current_auc = 0.0
User 96119 AUC after training: 0.0
User 96119 does not improve AUC. Reverting changes.
Training on augumented user 21424 11/50 current_auc = 0.0
User 21424 AUC after training: 0.0
User 21424 does not improve AUC. Reverting changes.
Training on augumented user 78545 12/50 current_auc = 0.0
User 78545 AUC after training: 0.0
User 78545 does not improve AUC. Reverting changes.
Training on augumented user 74652 13/50 current_auc = 0.0
User 74652 AUC after training: 0.0
User 74652 does not improve AUC. Reverting changes.
Training on augumented user 80031 14/50 current_auc = 0.0
User 80031 AUC after training: 0.0
User 80031 does not improve AUC. Reverting changes.
Training on augumented user 68126 15/50 current_auc = 0.0
User 68126 AUC after training: 0.0
User 68126 does not improve AUC. Reverting changes.
Training on augumented user 3944 16/50 current_auc = 0.0
User 3944 AUC after training: 0.0
User 3944 does not improve AUC. Reverting changes.
Training on augumented user 16534 17/50 current_auc = 0.0
User 16534 AUC after training: 0.0
User 16534 does not improve AUC. Reverting changes.
Training on augumented user 109685 18/50 current_auc = 0.0
User 109685 AUC after training: 0.0
User 109685 does not improve AUC. Reverting changes.
Training on augumented user 6948 19/50 current_auc = 0.0
User 6948 AUC after training: 0.0
User 6948 does not improve AUC. Reverting changes.
Training on augumented user 119558 20/50 current_auc = 0.0
User 119558 AUC after training: 0.0
User 119558 does not improve AUC. Reverting changes.
Training on augumented user 60071 21/50 current_auc = 0.0
User 60071 AUC after training: 0.0
User 60071 does not improve AUC. Reverting changes.
Training on augumented user 6747 22/50 current_auc = 0.0
User 6747 AUC after training: 0.0
User 6747 does not improve AUC. Reverting changes.
Training on augumented user 71527 23/50 current_auc = 0.0
User 71527 AUC after training: 0.0
User 71527 does not improve AUC. Reverting changes.
Training on augumented user 23303 24/50 current_auc = 0.0
User 23303 AUC after training: 0.0
User 23303 does not improve AUC. Reverting changes.
Training on augumented user 115143 25/50 current_auc = 0.0
User 115143 AUC after training: 0.0
User 115143 does not improve AUC. Reverting changes.
Training on augumented user 80462 26/50 current_auc = 0.0
User 80462 AUC after training: 0.0
User 80462 does not improve AUC. Reverting changes.
Training on augumented user 55341 27/50 current_auc = 0.0
User 55341 AUC after training: 0.0
User 55341 does not improve AUC. Reverting changes.
Training on augumented user 14499 28/50 current_auc = 0.0
User 14499 AUC after training: 0.0
User 14499 does not improve AUC. Reverting changes.
Training on augumented user 80110 29/50 current_auc = 0.0
User 80110 AUC after training: 0.0
User 80110 does not improve AUC. Reverting changes.
Training on augumented user 104004 30/50 current_auc = 0.0
User 104004 AUC after training: 0.0
User 104004 does not improve AUC. Reverting changes.
Training on augumented user 58303 31/50 current_auc = 0.0
User 58303 AUC after training: 0.0
User 58303 does not improve AUC. Reverting changes.
Training on augumented user 70663 32/50 current_auc = 0.0
User 70663 AUC after training: 0.0
User 70663 does not improve AUC. Reverting changes.
Training on augumented user 10250 33/50 current_auc = 0.0
User 10250 AUC after training: 0.0
User 10250 does not improve AUC. Reverting changes.
Training on augumented user 42963 34/50 current_auc = 0.0
User 42963 AUC after training: 0.0
User 42963 does not improve AUC. Reverting changes.
Training on augumented user 61126 35/50 current_auc = 0.0
User 61126 AUC after training: 0.0
User 61126 does not improve AUC. Reverting changes.
Training on augumented user 81052 36/50 current_auc = 0.0
User 81052 AUC after training: 0.0
User 81052 does not improve AUC. Reverting changes.
Training on augumented user 52298 37/50 current_auc = 0.0
User 52298 AUC after training: 0.0
User 52298 does not improve AUC. Reverting changes.
Training on augumented user 75058 38/50 current_auc = 0.0
User 75058 AUC after training: 0.0
User 75058 does not improve AUC. Reverting changes.
Training on augumented user 19917 39/50 current_auc = 0.0
User 19917 AUC after training: 0.0
User 19917 does not improve AUC. Reverting changes.
Training on augumented user 450 40/50 current_auc = 0.0
User 450 AUC after training: 0.0
User 450 does not improve AUC. Reverting changes.
Training on augumented user 69293 41/50 current_auc = 0.0
User 69293 AUC after training: 0.0
User 69293 does not improve AUC. Reverting changes.
Training on augumented user 112855 42/50 current_auc = 0.0
User 112855 AUC after training: 0.0
User 112855 does not improve AUC. Reverting changes.
Training on augumented user 50330 43/50 current_auc = 0.0
User 50330 AUC after training: 0.0
User 50330 does not improve AUC. Reverting changes.
Training on augumented user 104639 44/50 current_auc = 0.0
User 104639 AUC after training: 0.0
User 104639 does not improve AUC. Reverting changes.
Training on augumented user 102152 45/50 current_auc = 0.0
User 102152 AUC after training: 0.0
User 102152 does not improve AUC. Reverting changes.
Training on augumented user 14376 46/50 current_auc = 0.0
User 14376 AUC after training: 0.0
User 14376 does not improve AUC. Reverting changes.
Training on augumented user 119881 47/50 current_auc = 0.0
User 119881 AUC after training: 0.0
User 119881 does not improve AUC. Reverting changes.
Training on augumented user 106970 48/50 current_auc = 0.0
User 106970 AUC after training: 0.0
User 106970 does not improve AUC. Reverting changes.
Training on augumented user 58305 49/50 current_auc = 0.0
User 58305 AUC after training: 0.0
User 58305 does not improve AUC. Reverting changes.
[2024-12-02 18:14:29.864593] start test user 71105 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:30.601820] start test user 71105 68/568 recall augumented users by random, augumented_users = [83169, 32544, 104214, 9464, 126697, 124116, 79165, 45650, 32626, 121072, 131409, 2802, 30249, 78498, 86802, 122426, 111821, 107364, 28610, 75624, 20354, 86636, 52785, 35428, 37427, 114241, 107325, 46130, 138234, 17059, 57251, 115908, 27748, 63664, 21267, 98719, 14513, 14571, 24957, 99141, 102719, 10133, 113640, 38922, 134835, 90026, 82896, 33081, 91055, 125945]
[2024-12-02 18:14:30.617455] user = 71105 Cloud 68/568
[2024-12-02 18:14:30.628517] user = 71105 Local 68/568
[2024-12-02 18:14:30.704484] user = 71105 Local+ 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:33.167916] user = 71105 MPDA- 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6776018099547512
Training on augumented user 83169 0/50 current_auc = 0.6776018099547512
User 83169 AUC after training: 0.6776018099547512
User 83169 does not improve AUC. Reverting changes.
Training on augumented user 32544 1/50 current_auc = 0.6776018099547512
User 32544 AUC after training: 0.6776018099547512
User 32544 does not improve AUC. Reverting changes.
Training on augumented user 104214 2/50 current_auc = 0.6776018099547512
User 104214 AUC after training: 0.6685520361990951
User 104214 does not improve AUC. Reverting changes.
Training on augumented user 9464 3/50 current_auc = 0.6776018099547512
User 9464 AUC after training: 0.6798642533936652
User 9464 improves AUC. Keeping the model.
Training on augumented user 126697 4/50 current_auc = 0.6798642533936652
User 126697 AUC after training: 0.6776018099547512
User 126697 does not improve AUC. Reverting changes.
Training on augumented user 124116 5/50 current_auc = 0.6798642533936652
User 124116 AUC after training: 0.6821266968325792
User 124116 improves AUC. Keeping the model.
Training on augumented user 79165 6/50 current_auc = 0.6821266968325792
User 79165 AUC after training: 0.6798642533936652
User 79165 does not improve AUC. Reverting changes.
Training on augumented user 45650 7/50 current_auc = 0.6821266968325792
User 45650 AUC after training: 0.6776018099547512
User 45650 does not improve AUC. Reverting changes.
Training on augumented user 32626 8/50 current_auc = 0.6821266968325792
User 32626 AUC after training: 0.6798642533936652
User 32626 does not improve AUC. Reverting changes.
Training on augumented user 121072 9/50 current_auc = 0.6821266968325792
User 121072 AUC after training: 0.6821266968325792
User 121072 does not improve AUC. Reverting changes.
Training on augumented user 131409 10/50 current_auc = 0.6821266968325792
User 131409 AUC after training: 0.6821266968325792
User 131409 does not improve AUC. Reverting changes.
Training on augumented user 2802 11/50 current_auc = 0.6821266968325792
User 2802 AUC after training: 0.6821266968325792
User 2802 does not improve AUC. Reverting changes.
Training on augumented user 30249 12/50 current_auc = 0.6821266968325792
User 30249 AUC after training: 0.6798642533936652
User 30249 does not improve AUC. Reverting changes.
Training on augumented user 78498 13/50 current_auc = 0.6821266968325792
User 78498 AUC after training: 0.6798642533936652
User 78498 does not improve AUC. Reverting changes.
Training on augumented user 86802 14/50 current_auc = 0.6821266968325792
User 86802 AUC after training: 0.6798642533936652
User 86802 does not improve AUC. Reverting changes.
Training on augumented user 122426 15/50 current_auc = 0.6821266968325792
User 122426 AUC after training: 0.6798642533936652
User 122426 does not improve AUC. Reverting changes.
Training on augumented user 111821 16/50 current_auc = 0.6821266968325792
User 111821 AUC after training: 0.667420814479638
User 111821 does not improve AUC. Reverting changes.
Training on augumented user 107364 17/50 current_auc = 0.6821266968325792
User 107364 AUC after training: 0.6821266968325792
User 107364 does not improve AUC. Reverting changes.
Training on augumented user 28610 18/50 current_auc = 0.6821266968325792
User 28610 AUC after training: 0.6821266968325792
User 28610 does not improve AUC. Reverting changes.
Training on augumented user 75624 19/50 current_auc = 0.6821266968325792
User 75624 AUC after training: 0.6798642533936652
User 75624 does not improve AUC. Reverting changes.
Training on augumented user 20354 20/50 current_auc = 0.6821266968325792
User 20354 AUC after training: 0.6798642533936652
User 20354 does not improve AUC. Reverting changes.
Training on augumented user 86636 21/50 current_auc = 0.6821266968325792
User 86636 AUC after training: 0.6798642533936652
User 86636 does not improve AUC. Reverting changes.
Training on augumented user 52785 22/50 current_auc = 0.6821266968325792
User 52785 AUC after training: 0.6798642533936652
User 52785 does not improve AUC. Reverting changes.
Training on augumented user 35428 23/50 current_auc = 0.6821266968325792
User 35428 AUC after training: 0.6776018099547512
User 35428 does not improve AUC. Reverting changes.
Training on augumented user 37427 24/50 current_auc = 0.6821266968325792
User 37427 AUC after training: 0.6821266968325792
User 37427 does not improve AUC. Reverting changes.
Training on augumented user 114241 25/50 current_auc = 0.6821266968325792
User 114241 AUC after training: 0.6821266968325792
User 114241 does not improve AUC. Reverting changes.
Training on augumented user 107325 26/50 current_auc = 0.6821266968325792
User 107325 AUC after training: 0.6753393665158371
User 107325 does not improve AUC. Reverting changes.
Training on augumented user 46130 27/50 current_auc = 0.6821266968325792
User 46130 AUC after training: 0.6798642533936652
User 46130 does not improve AUC. Reverting changes.
Training on augumented user 138234 28/50 current_auc = 0.6821266968325792
User 138234 AUC after training: 0.6798642533936652
User 138234 does not improve AUC. Reverting changes.
Training on augumented user 17059 29/50 current_auc = 0.6821266968325792
User 17059 AUC after training: 0.6798642533936652
User 17059 does not improve AUC. Reverting changes.
Training on augumented user 57251 30/50 current_auc = 0.6821266968325792
User 57251 AUC after training: 0.6776018099547512
User 57251 does not improve AUC. Reverting changes.
Training on augumented user 115908 31/50 current_auc = 0.6821266968325792
User 115908 AUC after training: 0.6821266968325792
User 115908 does not improve AUC. Reverting changes.
Training on augumented user 27748 32/50 current_auc = 0.6821266968325792
User 27748 AUC after training: 0.6821266968325792
User 27748 does not improve AUC. Reverting changes.
Training on augumented user 63664 33/50 current_auc = 0.6821266968325792
User 63664 AUC after training: 0.6798642533936652
User 63664 does not improve AUC. Reverting changes.
Training on augumented user 21267 34/50 current_auc = 0.6821266968325792
User 21267 AUC after training: 0.6798642533936652
User 21267 does not improve AUC. Reverting changes.
Training on augumented user 98719 35/50 current_auc = 0.6821266968325792
User 98719 AUC after training: 0.6753393665158371
User 98719 does not improve AUC. Reverting changes.
Training on augumented user 14513 36/50 current_auc = 0.6821266968325792
User 14513 AUC after training: 0.6821266968325792
User 14513 does not improve AUC. Reverting changes.
Training on augumented user 14571 37/50 current_auc = 0.6821266968325792
User 14571 AUC after training: 0.6821266968325792
User 14571 does not improve AUC. Reverting changes.
Training on augumented user 24957 38/50 current_auc = 0.6821266968325792
User 24957 AUC after training: 0.673076923076923
User 24957 does not improve AUC. Reverting changes.
Training on augumented user 99141 39/50 current_auc = 0.6821266968325792
User 99141 AUC after training: 0.6798642533936652
User 99141 does not improve AUC. Reverting changes.
Training on augumented user 102719 40/50 current_auc = 0.6821266968325792
User 102719 AUC after training: 0.6798642533936652
User 102719 does not improve AUC. Reverting changes.
Training on augumented user 10133 41/50 current_auc = 0.6821266968325792
User 10133 AUC after training: 0.6776018099547512
User 10133 does not improve AUC. Reverting changes.
Training on augumented user 113640 42/50 current_auc = 0.6821266968325792
User 113640 AUC after training: 0.6798642533936652
User 113640 does not improve AUC. Reverting changes.
Training on augumented user 38922 43/50 current_auc = 0.6821266968325792
User 38922 AUC after training: 0.6821266968325792
User 38922 does not improve AUC. Reverting changes.
Training on augumented user 134835 44/50 current_auc = 0.6821266968325792
User 134835 AUC after training: 0.6753393665158371
User 134835 does not improve AUC. Reverting changes.
Training on augumented user 90026 45/50 current_auc = 0.6821266968325792
User 90026 AUC after training: 0.6776018099547512
User 90026 does not improve AUC. Reverting changes.
Training on augumented user 82896 46/50 current_auc = 0.6821266968325792
User 82896 AUC after training: 0.6798642533936652
User 82896 does not improve AUC. Reverting changes.
Training on augumented user 33081 47/50 current_auc = 0.6821266968325792
User 33081 AUC after training: 0.6798642533936652
User 33081 does not improve AUC. Reverting changes.
Training on augumented user 91055 48/50 current_auc = 0.6821266968325792
User 91055 AUC after training: 0.6821266968325792
User 91055 does not improve AUC. Reverting changes.
Training on augumented user 125945 49/50 current_auc = 0.6821266968325792
User 125945 AUC after training: 0.6776018099547512
User 125945 does not improve AUC. Reverting changes.
[2024-12-02 18:14:59.691364] start test user 71121 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:00.112713] start test user 71121 69/568 recall augumented users by random, augumented_users = [47779, 76387, 79692, 64184, 88501, 8472, 97548, 43925, 50045, 102715, 127013, 29963, 126883, 121262, 49368, 80114, 81471, 34838, 138402, 57172, 122552, 75972, 44539, 78303, 61239, 88175, 74102, 16422, 98623, 39964, 102793, 87506, 59126, 100395, 55921, 16391, 56124, 18803, 134752, 121529, 103772, 49957, 56911, 80775, 14672, 102323, 130030, 39553, 45535, 102181]
[2024-12-02 18:15:00.129369] user = 71121 Cloud 69/568
[2024-12-02 18:15:00.192684] user = 71121 Local 69/568
[2024-12-02 18:15:00.354933] user = 71121 Local+ 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:03.895046] user = 71121 MPDA- 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.749421898485374
Training on augumented user 47779 0/50 current_auc = 0.749421898485374
User 47779 AUC after training: 0.7491473002659266
User 47779 does not improve AUC. Reverting changes.
Training on augumented user 76387 1/50 current_auc = 0.749421898485374
User 76387 AUC after training: 0.7495086137125679
User 76387 improves AUC. Keeping the model.
Training on augumented user 79692 2/50 current_auc = 0.7495086137125679
User 79692 AUC after training: 0.7497832119320152
User 79692 improves AUC. Keeping the model.
Training on augumented user 64184 3/50 current_auc = 0.7497832119320152
User 64184 AUC after training: 0.75
User 64184 improves AUC. Keeping the model.
Training on augumented user 88501 4/50 current_auc = 0.75
User 88501 AUC after training: 0.7495664238640305
User 88501 does not improve AUC. Reverting changes.
Training on augumented user 8472 5/50 current_auc = 0.75
User 8472 AUC after training: 0.7501589779165222
User 8472 improves AUC. Keeping the model.
Training on augumented user 97548 6/50 current_auc = 0.7501589779165222
User 97548 AUC after training: 0.7501011677650595
User 97548 does not improve AUC. Reverting changes.
Training on augumented user 43925 7/50 current_auc = 0.7501589779165222
User 43925 AUC after training: 0.7496386865533587
User 43925 does not improve AUC. Reverting changes.
Training on augumented user 50045 8/50 current_auc = 0.7501589779165222
User 50045 AUC after training: 0.7496097814776275
User 50045 does not improve AUC. Reverting changes.
Training on augumented user 102715 9/50 current_auc = 0.7501589779165222
User 102715 AUC after training: 0.750086715227194
User 102715 does not improve AUC. Reverting changes.
Training on augumented user 127013 10/50 current_auc = 0.7501589779165222
User 127013 AUC after training: 0.749176205341658
User 127013 does not improve AUC. Reverting changes.
Training on augumented user 29963 11/50 current_auc = 0.7501589779165222
User 29963 AUC after training: 0.7501011677650595
User 29963 does not improve AUC. Reverting changes.
Training on augumented user 126883 12/50 current_auc = 0.7501589779165222
User 126883 AUC after training: 0.7494797086368367
User 126883 does not improve AUC. Reverting changes.
Training on augumented user 121262 13/50 current_auc = 0.7501589779165222
User 121262 AUC after training: 0.7498988322349405
User 121262 does not improve AUC. Reverting changes.
Training on augumented user 49368 14/50 current_auc = 0.7501589779165222
User 49368 AUC after training: 0.7498121170077465
User 49368 does not improve AUC. Reverting changes.
Training on augumented user 80114 15/50 current_auc = 0.7501589779165222
User 80114 AUC after training: 0.7501734304543877
User 80114 improves AUC. Keeping the model.
Training on augumented user 81471 16/50 current_auc = 0.7501734304543877
User 81471 AUC after training: 0.7502167880679846
User 81471 improves AUC. Keeping the model.
Training on augumented user 34838 17/50 current_auc = 0.7502167880679846
User 34838 AUC after training: 0.7498265695456123
User 34838 does not improve AUC. Reverting changes.
Training on augumented user 138402 18/50 current_auc = 0.7502167880679846
User 138402 AUC after training: 0.7501445253786566
User 138402 does not improve AUC. Reverting changes.
Training on augumented user 57172 19/50 current_auc = 0.7502167880679846
User 57172 AUC after training: 0.749465256098971
User 57172 does not improve AUC. Reverting changes.
Training on augumented user 122552 20/50 current_auc = 0.7502167880679846
User 122552 AUC after training: 0.7501878829922534
User 122552 does not improve AUC. Reverting changes.
Training on augumented user 75972 21/50 current_auc = 0.7502167880679846
User 75972 AUC after training: 0.748887154584345
User 75972 does not improve AUC. Reverting changes.
Training on augumented user 44539 22/50 current_auc = 0.7502167880679846
User 44539 AUC after training: 0.7500289050757312
User 44539 does not improve AUC. Reverting changes.
Training on augumented user 78303 23/50 current_auc = 0.7502167880679846
User 78303 AUC after training: 0.7496964967048214
User 78303 does not improve AUC. Reverting changes.
Training on augumented user 61239 24/50 current_auc = 0.7502167880679846
User 61239 AUC after training: 0.7495808764018962
User 61239 does not improve AUC. Reverting changes.
Training on augumented user 88175 25/50 current_auc = 0.7502167880679846
User 88175 AUC after training: 0.7501878829922535
User 88175 does not improve AUC. Reverting changes.
Training on augumented user 74102 26/50 current_auc = 0.7502167880679846
User 74102 AUC after training: 0.7494074459475084
User 74102 does not improve AUC. Reverting changes.
Training on augumented user 16422 27/50 current_auc = 0.7502167880679846
User 16422 AUC after training: 0.7501878829922535
User 16422 does not improve AUC. Reverting changes.
Training on augumented user 98623 28/50 current_auc = 0.7502167880679846
User 98623 AUC after training: 0.7498843796970748
User 98623 does not improve AUC. Reverting changes.
Training on augumented user 39964 29/50 current_auc = 0.7502167880679846
User 39964 AUC after training: 0.7499710949242686
User 39964 does not improve AUC. Reverting changes.
Training on augumented user 102793 30/50 current_auc = 0.7502167880679846
User 102793 AUC after training: 0.749710949242687
User 102793 does not improve AUC. Reverting changes.
Training on augumented user 87506 31/50 current_auc = 0.7502167880679846
User 87506 AUC after training: 0.7516764943924154
User 87506 improves AUC. Keeping the model.
Training on augumented user 59126 32/50 current_auc = 0.7516764943924154
User 59126 AUC after training: 0.7518788299225345
User 59126 improves AUC. Keeping the model.
Training on augumented user 100395 33/50 current_auc = 0.7518788299225345
User 100395 AUC after training: 0.7521100705283847
User 100395 improves AUC. Keeping the model.
Training on augumented user 55921 34/50 current_auc = 0.7521100705283847
User 55921 AUC after training: 0.7521823332177131
User 55921 improves AUC. Keeping the model.
Training on augumented user 16391 35/50 current_auc = 0.7521823332177131
User 16391 AUC after training: 0.7521534281419817
User 16391 does not improve AUC. Reverting changes.
Training on augumented user 56124 36/50 current_auc = 0.7521823332177131
User 56124 AUC after training: 0.7523124060585039
User 56124 improves AUC. Keeping the model.
Training on augumented user 18803 37/50 current_auc = 0.7523124060585039
User 18803 AUC after training: 0.7522835009827727
User 18803 does not improve AUC. Reverting changes.
Training on augumented user 134752 38/50 current_auc = 0.7523124060585039
User 134752 AUC after training: 0.751604231703087
User 134752 does not improve AUC. Reverting changes.
Training on augumented user 121529 39/50 current_auc = 0.7523124060585039
User 121529 AUC after training: 0.7524569314371603
User 121529 improves AUC. Keeping the model.
Training on augumented user 103772 40/50 current_auc = 0.7524569314371603
User 103772 AUC after training: 0.7521100705283847
User 103772 does not improve AUC. Reverting changes.
Training on augumented user 49957 41/50 current_auc = 0.7524569314371603
User 49957 AUC after training: 0.7524135738235634
User 49957 does not improve AUC. Reverting changes.
Training on augumented user 56911 42/50 current_auc = 0.7524569314371603
User 56911 AUC after training: 0.7524424788992947
User 56911 does not improve AUC. Reverting changes.
Training on augumented user 80775 43/50 current_auc = 0.7524569314371603
User 80775 AUC after training: 0.7525002890507573
User 80775 improves AUC. Keeping the model.
Training on augumented user 14672 44/50 current_auc = 0.7525002890507573
User 14672 AUC after training: 0.7520089027633252
User 14672 does not improve AUC. Reverting changes.
Training on augumented user 102323 45/50 current_auc = 0.7525002890507573
User 102323 AUC after training: 0.751647589316684
User 102323 does not improve AUC. Reverting changes.
Training on augumented user 130030 46/50 current_auc = 0.7525002890507573
User 130030 AUC after training: 0.7519799976875939
User 130030 does not improve AUC. Reverting changes.
Training on augumented user 39553 47/50 current_auc = 0.7525002890507573
User 39553 AUC after training: 0.7519799976875939
User 39553 does not improve AUC. Reverting changes.
Training on augumented user 45535 48/50 current_auc = 0.7525002890507573
User 45535 AUC after training: 0.7525002890507574
User 45535 improves AUC. Keeping the model.
Training on augumented user 102181 49/50 current_auc = 0.7525002890507574
User 102181 AUC after training: 0.7524713839750259
User 102181 does not improve AUC. Reverting changes.
[2024-12-02 18:15:33.820069] start test user 71138 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:34.483469] start test user 71138 70/568 recall augumented users by random, augumented_users = [41021, 66498, 119019, 57029, 116266, 118480, 52422, 117378, 83456, 110718, 125495, 85341, 110147, 105343, 109080, 103819, 66812, 81164, 19558, 12229, 96733, 102905, 64251, 81218, 48445, 133140, 102268, 129989, 74727, 103144, 71982, 106607, 20380, 38225, 46116, 64894, 109486, 185, 87194, 78567, 73230, 74950, 78180, 26891, 111290, 107233, 123402, 75102, 133694, 27100]
[2024-12-02 18:15:34.502862] user = 71138 Cloud 70/568
[2024-12-02 18:15:34.552743] user = 71138 Local 70/568
[2024-12-02 18:15:34.715260] user = 71138 Local+ 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:37.066246] user = 71138 MPDA- 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6089701838182082
Training on augumented user 41021 0/50 current_auc = 0.6089701838182082
User 41021 AUC after training: 0.6089339991315675
User 41021 does not improve AUC. Reverting changes.
Training on augumented user 66498 1/50 current_auc = 0.6089701838182082
User 66498 AUC after training: 0.6091149225647706
User 66498 improves AUC. Keeping the model.
Training on augumented user 119019 2/50 current_auc = 0.6091149225647706
User 119019 AUC after training: 0.6088254450716456
User 119019 does not improve AUC. Reverting changes.
Training on augumented user 57029 3/50 current_auc = 0.6091149225647706
User 57029 AUC after training: 0.6089882761615285
User 57029 does not improve AUC. Reverting changes.
Training on augumented user 116266 4/50 current_auc = 0.6091149225647706
User 116266 AUC after training: 0.6093320306846143
User 116266 improves AUC. Keeping the model.
Training on augumented user 118480 5/50 current_auc = 0.6093320306846143
User 118480 AUC after training: 0.6092234766246925
User 118480 does not improve AUC. Reverting changes.
Training on augumented user 52422 6/50 current_auc = 0.6093320306846143
User 52422 AUC after training: 0.6084816905485598
User 52422 does not improve AUC. Reverting changes.
Training on augumented user 117378 7/50 current_auc = 0.6093320306846143
User 117378 AUC after training: 0.6088616297582863
User 117378 does not improve AUC. Reverting changes.
Training on augumented user 83456 8/50 current_auc = 0.6093320306846143
User 83456 AUC after training: 0.6087530756983645
User 83456 does not improve AUC. Reverting changes.
Training on augumented user 110718 9/50 current_auc = 0.6093320306846143
User 110718 AUC after training: 0.6089339991315675
User 110718 does not improve AUC. Reverting changes.
Training on augumented user 125495 10/50 current_auc = 0.6093320306846143
User 125495 AUC after training: 0.6087168910117239
User 125495 does not improve AUC. Reverting changes.
Training on augumented user 85341 11/50 current_auc = 0.6093320306846143
User 85341 AUC after training: 0.6086445216384426
User 85341 does not improve AUC. Reverting changes.
Training on augumented user 110147 12/50 current_auc = 0.6093320306846143
User 110147 AUC after training: 0.6089159067882473
User 110147 does not improve AUC. Reverting changes.
Training on augumented user 105343 13/50 current_auc = 0.6093320306846143
User 105343 AUC after training: 0.608789260385005
User 105343 does not improve AUC. Reverting changes.
Training on augumented user 109080 14/50 current_auc = 0.6093320306846143
User 109080 AUC after training: 0.6091149225647706
User 109080 does not improve AUC. Reverting changes.
Training on augumented user 103819 15/50 current_auc = 0.6093320306846143
User 103819 AUC after training: 0.6085359675785208
User 103819 does not improve AUC. Reverting changes.
Training on augumented user 66812 16/50 current_auc = 0.6093320306846143
User 66812 AUC after training: 0.608427413518599
User 66812 does not improve AUC. Reverting changes.
Training on augumented user 81164 17/50 current_auc = 0.6093320306846143
User 81164 AUC after training: 0.6087711680416847
User 81164 does not improve AUC. Reverting changes.
Training on augumented user 19558 18/50 current_auc = 0.6093320306846143
User 19558 AUC after training: 0.6086445216384426
User 19558 does not improve AUC. Reverting changes.
Training on augumented user 12229 19/50 current_auc = 0.6093320306846143
User 12229 AUC after training: 0.6083912288319584
User 12229 does not improve AUC. Reverting changes.
Training on augumented user 96733 20/50 current_auc = 0.6093320306846143
User 96733 AUC after training: 0.60907873787813
User 96733 does not improve AUC. Reverting changes.
Training on augumented user 102905 21/50 current_auc = 0.6093320306846143
User 102905 AUC after training: 0.6091511072514112
User 102905 does not improve AUC. Reverting changes.
Training on augumented user 64251 22/50 current_auc = 0.6093320306846143
User 64251 AUC after training: 0.6087168910117238
User 64251 does not improve AUC. Reverting changes.
Training on augumented user 81218 23/50 current_auc = 0.6093320306846143
User 81218 AUC after training: 0.608373136488638
User 81218 does not improve AUC. Reverting changes.
Training on augumented user 48445 24/50 current_auc = 0.6093320306846143
User 48445 AUC after training: 0.60790273556231
User 48445 does not improve AUC. Reverting changes.
Training on augumented user 133140 25/50 current_auc = 0.6093320306846143
User 133140 AUC after training: 0.6091872919380518
User 133140 does not improve AUC. Reverting changes.
Training on augumented user 102268 26/50 current_auc = 0.6093320306846143
User 102268 AUC after training: 0.6090063685048488
User 102268 does not improve AUC. Reverting changes.
Training on augumented user 129989 27/50 current_auc = 0.6093320306846143
User 129989 AUC after training: 0.6083369518019973
User 129989 does not improve AUC. Reverting changes.
Training on augumented user 74727 28/50 current_auc = 0.6093320306846143
User 74727 AUC after training: 0.608789260385005
User 74727 does not improve AUC. Reverting changes.
Training on augumented user 103144 29/50 current_auc = 0.6093320306846143
User 103144 AUC after training: 0.6089159067882473
User 103144 does not improve AUC. Reverting changes.
Training on augumented user 71982 30/50 current_auc = 0.6093320306846143
User 71982 AUC after training: 0.6085902446084817
User 71982 does not improve AUC. Reverting changes.
Training on augumented user 106607 31/50 current_auc = 0.6093320306846143
User 106607 AUC after training: 0.6088616297582863
User 106607 does not improve AUC. Reverting changes.
Training on augumented user 20380 32/50 current_auc = 0.6093320306846143
User 20380 AUC after training: 0.6090063685048488
User 20380 does not improve AUC. Reverting changes.
Training on augumented user 38225 33/50 current_auc = 0.6093320306846143
User 38225 AUC after training: 0.6085540599218411
User 38225 does not improve AUC. Reverting changes.
Training on augumented user 46116 34/50 current_auc = 0.6093320306846143
User 46116 AUC after training: 0.6094044000578955
User 46116 improves AUC. Keeping the model.
Training on augumented user 64894 35/50 current_auc = 0.6094044000578955
User 64894 AUC after training: 0.6094767694311767
User 64894 improves AUC. Keeping the model.
Training on augumented user 109486 36/50 current_auc = 0.6094767694311767
User 109486 AUC after training: 0.6097662469243017
User 109486 improves AUC. Keeping the model.
Training on augumented user 185 37/50 current_auc = 0.6097662469243017
User 185 AUC after training: 0.6095491388044579
User 185 does not improve AUC. Reverting changes.
Training on augumented user 87194 38/50 current_auc = 0.6097662469243017
User 87194 AUC after training: 0.6096215081777392
User 87194 does not improve AUC. Reverting changes.
Training on augumented user 78567 39/50 current_auc = 0.6097662469243017
User 78567 AUC after training: 0.6094948617744971
User 78567 does not improve AUC. Reverting changes.
Training on augumented user 73230 40/50 current_auc = 0.6097662469243017
User 73230 AUC after training: 0.6096576928643799
User 73230 does not improve AUC. Reverting changes.
Training on augumented user 74950 41/50 current_auc = 0.6097662469243017
User 74950 AUC after training: 0.6095491388044579
User 74950 does not improve AUC. Reverting changes.
Training on augumented user 78180 42/50 current_auc = 0.6097662469243017
User 78180 AUC after training: 0.6102547401939499
User 78180 improves AUC. Keeping the model.
Training on augumented user 26891 43/50 current_auc = 0.6102547401939499
User 26891 AUC after training: 0.6100738167607468
User 26891 does not improve AUC. Reverting changes.
Training on augumented user 111290 44/50 current_auc = 0.6102547401939499
User 111290 AUC after training: 0.6105804023737155
User 111290 improves AUC. Keeping the model.
Training on augumented user 107233 45/50 current_auc = 0.6105804023737155
User 107233 AUC after training: 0.6100919091040672
User 107233 does not improve AUC. Reverting changes.
Training on augumented user 123402 46/50 current_auc = 0.6105804023737155
User 123402 AUC after training: 0.6103994789405124
User 123402 does not improve AUC. Reverting changes.
Training on augumented user 75102 47/50 current_auc = 0.6105804023737155
User 75102 AUC after training: 0.610381386597192
User 75102 does not improve AUC. Reverting changes.
Training on augumented user 133694 48/50 current_auc = 0.6105804023737155
User 133694 AUC after training: 0.6098748009842235
User 133694 does not improve AUC. Reverting changes.
Training on augumented user 27100 49/50 current_auc = 0.6105804023737155
User 27100 AUC after training: 0.608843537414966
User 27100 does not improve AUC. Reverting changes.
[2024-12-02 18:16:08.065718] start test user 71169 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:08.743173] start test user 71169 71/568 recall augumented users by random, augumented_users = [56205, 59369, 18593, 55257, 61080, 36262, 5693, 63371, 57890, 36156, 60370, 115361, 21356, 89397, 129119, 124848, 24852, 132412, 111699, 28469, 90905, 36893, 34251, 56650, 31164, 39085, 78922, 78481, 47008, 73336, 65390, 52376, 29483, 65596, 130038, 13589, 73722, 59319, 6579, 53820, 3066, 16517, 78002, 35965, 25202, 122460, 112608, 63704, 132338, 81961]
[2024-12-02 18:16:08.760520] user = 71169 Cloud 71/568
[2024-12-02 18:16:08.771665] user = 71169 Local 71/568
[2024-12-02 18:16:08.791717] user = 71169 Local+ 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:11.588550] user = 71169 MPDA- 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.12244897959183675
Training on augumented user 56205 0/50 current_auc = 0.12244897959183675
User 56205 AUC after training: 0.12244897959183675
User 56205 does not improve AUC. Reverting changes.
Training on augumented user 59369 1/50 current_auc = 0.12244897959183675
User 59369 AUC after training: 0.12244897959183675
User 59369 does not improve AUC. Reverting changes.
Training on augumented user 18593 2/50 current_auc = 0.12244897959183675
User 18593 AUC after training: 0.12244897959183675
User 18593 does not improve AUC. Reverting changes.
Training on augumented user 55257 3/50 current_auc = 0.12244897959183675
User 55257 AUC after training: 0.12244897959183675
User 55257 does not improve AUC. Reverting changes.
Training on augumented user 61080 4/50 current_auc = 0.12244897959183675
User 61080 AUC after training: 0.12244897959183675
User 61080 does not improve AUC. Reverting changes.
Training on augumented user 36262 5/50 current_auc = 0.12244897959183675
User 36262 AUC after training: 0.12244897959183675
User 36262 does not improve AUC. Reverting changes.
Training on augumented user 5693 6/50 current_auc = 0.12244897959183675
User 5693 AUC after training: 0.12244897959183675
User 5693 does not improve AUC. Reverting changes.
Training on augumented user 63371 7/50 current_auc = 0.12244897959183675
User 63371 AUC after training: 0.12244897959183675
User 63371 does not improve AUC. Reverting changes.
Training on augumented user 57890 8/50 current_auc = 0.12244897959183675
User 57890 AUC after training: 0.12244897959183675
User 57890 does not improve AUC. Reverting changes.
Training on augumented user 36156 9/50 current_auc = 0.12244897959183675
User 36156 AUC after training: 0.12244897959183675
User 36156 does not improve AUC. Reverting changes.
Training on augumented user 60370 10/50 current_auc = 0.12244897959183675
User 60370 AUC after training: 0.12244897959183675
User 60370 does not improve AUC. Reverting changes.
Training on augumented user 115361 11/50 current_auc = 0.12244897959183675
User 115361 AUC after training: 0.12244897959183675
User 115361 does not improve AUC. Reverting changes.
Training on augumented user 21356 12/50 current_auc = 0.12244897959183675
User 21356 AUC after training: 0.12244897959183675
User 21356 does not improve AUC. Reverting changes.
Training on augumented user 89397 13/50 current_auc = 0.12244897959183675
User 89397 AUC after training: 0.12244897959183675
User 89397 does not improve AUC. Reverting changes.
Training on augumented user 129119 14/50 current_auc = 0.12244897959183675
User 129119 AUC after training: 0.12244897959183675
User 129119 does not improve AUC. Reverting changes.
Training on augumented user 124848 15/50 current_auc = 0.12244897959183675
User 124848 AUC after training: 0.12244897959183675
User 124848 does not improve AUC. Reverting changes.
Training on augumented user 24852 16/50 current_auc = 0.12244897959183675
User 24852 AUC after training: 0.12244897959183675
User 24852 does not improve AUC. Reverting changes.
Training on augumented user 132412 17/50 current_auc = 0.12244897959183675
User 132412 AUC after training: 0.12244897959183675
User 132412 does not improve AUC. Reverting changes.
Training on augumented user 111699 18/50 current_auc = 0.12244897959183675
User 111699 AUC after training: 0.12244897959183675
User 111699 does not improve AUC. Reverting changes.
Training on augumented user 28469 19/50 current_auc = 0.12244897959183675
User 28469 AUC after training: 0.12244897959183675
User 28469 does not improve AUC. Reverting changes.
Training on augumented user 90905 20/50 current_auc = 0.12244897959183675
User 90905 AUC after training: 0.12244897959183675
User 90905 does not improve AUC. Reverting changes.
Training on augumented user 36893 21/50 current_auc = 0.12244897959183675
User 36893 AUC after training: 0.12244897959183675
User 36893 does not improve AUC. Reverting changes.
Training on augumented user 34251 22/50 current_auc = 0.12244897959183675
User 34251 AUC after training: 0.12244897959183675
User 34251 does not improve AUC. Reverting changes.
Training on augumented user 56650 23/50 current_auc = 0.12244897959183675
User 56650 AUC after training: 0.12244897959183675
User 56650 does not improve AUC. Reverting changes.
Training on augumented user 31164 24/50 current_auc = 0.12244897959183675
User 31164 AUC after training: 0.12244897959183675
User 31164 does not improve AUC. Reverting changes.
Training on augumented user 39085 25/50 current_auc = 0.12244897959183675
User 39085 AUC after training: 0.12244897959183675
User 39085 does not improve AUC. Reverting changes.
Training on augumented user 78922 26/50 current_auc = 0.12244897959183675
User 78922 AUC after training: 0.12244897959183675
User 78922 does not improve AUC. Reverting changes.
Training on augumented user 78481 27/50 current_auc = 0.12244897959183675
User 78481 AUC after training: 0.12244897959183675
User 78481 does not improve AUC. Reverting changes.
Training on augumented user 47008 28/50 current_auc = 0.12244897959183675
User 47008 AUC after training: 0.12244897959183675
User 47008 does not improve AUC. Reverting changes.
Training on augumented user 73336 29/50 current_auc = 0.12244897959183675
User 73336 AUC after training: 0.12244897959183675
User 73336 does not improve AUC. Reverting changes.
Training on augumented user 65390 30/50 current_auc = 0.12244897959183675
User 65390 AUC after training: 0.12244897959183675
User 65390 does not improve AUC. Reverting changes.
Training on augumented user 52376 31/50 current_auc = 0.12244897959183675
User 52376 AUC after training: 0.12244897959183675
User 52376 does not improve AUC. Reverting changes.
Training on augumented user 29483 32/50 current_auc = 0.12244897959183675
User 29483 AUC after training: 0.12244897959183675
User 29483 does not improve AUC. Reverting changes.
Training on augumented user 65596 33/50 current_auc = 0.12244897959183675
User 65596 AUC after training: 0.12244897959183675
User 65596 does not improve AUC. Reverting changes.
Training on augumented user 130038 34/50 current_auc = 0.12244897959183675
User 130038 AUC after training: 0.12244897959183675
User 130038 does not improve AUC. Reverting changes.
Training on augumented user 13589 35/50 current_auc = 0.12244897959183675
User 13589 AUC after training: 0.12244897959183675
User 13589 does not improve AUC. Reverting changes.
Training on augumented user 73722 36/50 current_auc = 0.12244897959183675
User 73722 AUC after training: 0.12244897959183675
User 73722 does not improve AUC. Reverting changes.
Training on augumented user 59319 37/50 current_auc = 0.12244897959183675
User 59319 AUC after training: 0.12244897959183675
User 59319 does not improve AUC. Reverting changes.
Training on augumented user 6579 38/50 current_auc = 0.12244897959183675
User 6579 AUC after training: 0.12244897959183675
User 6579 does not improve AUC. Reverting changes.
Training on augumented user 53820 39/50 current_auc = 0.12244897959183675
User 53820 AUC after training: 0.12244897959183675
User 53820 does not improve AUC. Reverting changes.
Training on augumented user 3066 40/50 current_auc = 0.12244897959183675
User 3066 AUC after training: 0.12244897959183675
User 3066 does not improve AUC. Reverting changes.
Training on augumented user 16517 41/50 current_auc = 0.12244897959183675
User 16517 AUC after training: 0.12244897959183675
User 16517 does not improve AUC. Reverting changes.
Training on augumented user 78002 42/50 current_auc = 0.12244897959183675
User 78002 AUC after training: 0.12244897959183675
User 78002 does not improve AUC. Reverting changes.
Training on augumented user 35965 43/50 current_auc = 0.12244897959183675
User 35965 AUC after training: 0.12244897959183675
User 35965 does not improve AUC. Reverting changes.
Training on augumented user 25202 44/50 current_auc = 0.12244897959183675
User 25202 AUC after training: 0.12244897959183675
User 25202 does not improve AUC. Reverting changes.
Training on augumented user 122460 45/50 current_auc = 0.12244897959183675
User 122460 AUC after training: 0.12244897959183675
User 122460 does not improve AUC. Reverting changes.
Training on augumented user 112608 46/50 current_auc = 0.12244897959183675
User 112608 AUC after training: 0.12244897959183675
User 112608 does not improve AUC. Reverting changes.
Training on augumented user 63704 47/50 current_auc = 0.12244897959183675
User 63704 AUC after training: 0.12244897959183675
User 63704 does not improve AUC. Reverting changes.
Training on augumented user 132338 48/50 current_auc = 0.12244897959183675
User 132338 AUC after training: 0.12244897959183675
User 132338 does not improve AUC. Reverting changes.
Training on augumented user 81961 49/50 current_auc = 0.12244897959183675
User 81961 AUC after training: 0.163265306122449
User 81961 improves AUC. Keeping the model.
[2024-12-02 18:16:40.232595] start test user 71170 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:40.750762] start test user 71170 72/568 recall augumented users by random, augumented_users = [102910, 84318, 102535, 15823, 69618, 1019, 57419, 130666, 59137, 105604, 130229, 77446, 66666, 135235, 132681, 78758, 85406, 93239, 106455, 103915, 103018, 48661, 81252, 90509, 83602, 121924, 16935, 81057, 120981, 76849, 53908, 24608, 74706, 94790, 101564, 92184, 117703, 63450, 18343, 43433, 95274, 94658, 113878, 70400, 22385, 71088, 7942, 44859, 40762, 112719]
[2024-12-02 18:16:40.773931] user = 71170 Cloud 72/568
[2024-12-02 18:16:40.808840] user = 71170 Local 72/568
[2024-12-02 18:16:41.054159] user = 71170 Local+ 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:44.233149] user = 71170 MPDA- 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.717506832675372
Training on augumented user 102910 0/50 current_auc = 0.717506832675372
User 102910 AUC after training: 0.7170513209839053
User 102910 does not improve AUC. Reverting changes.
Training on augumented user 84318 1/50 current_auc = 0.717506832675372
User 84318 AUC after training: 0.717456220265209
User 84318 does not improve AUC. Reverting changes.
Training on augumented user 102535 2/50 current_auc = 0.717506832675372
User 102535 AUC after training: 0.7174056078550461
User 102535 does not improve AUC. Reverting changes.
Training on augumented user 15823 3/50 current_auc = 0.717506832675372
User 15823 AUC after training: 0.7172537706245572
User 15823 does not improve AUC. Reverting changes.
Training on augumented user 69618 4/50 current_auc = 0.717506832675372
User 69618 AUC after training: 0.7172790768296387
User 69618 does not improve AUC. Reverting changes.
Training on augumented user 1019 5/50 current_auc = 0.717506832675372
User 1019 AUC after training: 0.7179876505719203
User 1019 improves AUC. Keeping the model.
Training on augumented user 57419 6/50 current_auc = 0.7179876505719203
User 57419 AUC after training: 0.7177092823160239
User 57419 does not improve AUC. Reverting changes.
Training on augumented user 130666 7/50 current_auc = 0.7179876505719203
User 130666 AUC after training: 0.7176586699058609
User 130666 does not improve AUC. Reverting changes.
Training on augumented user 59137 8/50 current_auc = 0.7179876505719203
User 59137 AUC after training: 0.7171525458042312
User 59137 does not improve AUC. Reverting changes.
Training on augumented user 105604 9/50 current_auc = 0.7179876505719203
User 105604 AUC after training: 0.7166464217026015
User 105604 does not improve AUC. Reverting changes.
Training on augumented user 130229 10/50 current_auc = 0.7179876505719203
User 130229 AUC after training: 0.717608057495698
User 130229 does not improve AUC. Reverting changes.
Training on augumented user 77446 11/50 current_auc = 0.7179876505719203
User 77446 AUC after training: 0.7178864257515942
User 77446 does not improve AUC. Reverting changes.
Training on augumented user 66666 12/50 current_auc = 0.7179876505719203
User 66666 AUC after training: 0.7164186658568681
User 66666 does not improve AUC. Reverting changes.
Training on augumented user 135235 13/50 current_auc = 0.7179876505719203
User 135235 AUC after training: 0.717557445085535
User 135235 does not improve AUC. Reverting changes.
Training on augumented user 132681 14/50 current_auc = 0.7179876505719203
User 132681 AUC after training: 0.7173549954448831
User 132681 does not improve AUC. Reverting changes.
Training on augumented user 78758 15/50 current_auc = 0.7179876505719203
User 78758 AUC after training: 0.7176839761109424
User 78758 does not improve AUC. Reverting changes.
Training on augumented user 85406 16/50 current_auc = 0.7179876505719203
User 85406 AUC after training: 0.7180382629820833
User 85406 improves AUC. Keeping the model.
Training on augumented user 93239 17/50 current_auc = 0.7180382629820833
User 93239 AUC after training: 0.7174309140601276
User 93239 does not improve AUC. Reverting changes.
Training on augumented user 106455 18/50 current_auc = 0.7180382629820833
User 106455 AUC after training: 0.7171525458042312
User 106455 does not improve AUC. Reverting changes.
Training on augumented user 103915 19/50 current_auc = 0.7180382629820833
User 103915 AUC after training: 0.7177092823160238
User 103915 does not improve AUC. Reverting changes.
Training on augumented user 103018 20/50 current_auc = 0.7180382629820833
User 103018 AUC after training: 0.7167476465229274
User 103018 does not improve AUC. Reverting changes.
Training on augumented user 48661 21/50 current_auc = 0.7180382629820833
User 48661 AUC after training: 0.7183166312379796
User 48661 improves AUC. Keeping the model.
Training on augumented user 81252 22/50 current_auc = 0.7183166312379796
User 81252 AUC after training: 0.7179623443668388
User 81252 does not improve AUC. Reverting changes.
Training on augumented user 90509 23/50 current_auc = 0.7183166312379796
User 90509 AUC after training: 0.7168994837534164
User 90509 does not improve AUC. Reverting changes.
Training on augumented user 83602 24/50 current_auc = 0.7183166312379796
User 83602 AUC after training: 0.7178864257515943
User 83602 does not improve AUC. Reverting changes.
Training on augumented user 121924 25/50 current_auc = 0.7183166312379796
User 121924 AUC after training: 0.7182407126227351
User 121924 does not improve AUC. Reverting changes.
Training on augumented user 16935 26/50 current_auc = 0.7183166312379796
User 16935 AUC after training: 0.7186203056989574
User 16935 improves AUC. Keeping the model.
Training on augumented user 81057 27/50 current_auc = 0.7186203056989574
User 81057 AUC after training: 0.7138880453487194
User 81057 does not improve AUC. Reverting changes.
Training on augumented user 120981 28/50 current_auc = 0.7186203056989574
User 120981 AUC after training: 0.7181141815973275
User 120981 does not improve AUC. Reverting changes.
Training on augumented user 76849 29/50 current_auc = 0.7186203056989574
User 76849 AUC after training: 0.7183419374430611
User 76849 does not improve AUC. Reverting changes.
Training on augumented user 53908 30/50 current_auc = 0.7186203056989574
User 53908 AUC after training: 0.7171525458042313
User 53908 does not improve AUC. Reverting changes.
Training on augumented user 24608 31/50 current_auc = 0.7186203056989574
User 24608 AUC after training: 0.7177345885211054
User 24608 does not improve AUC. Reverting changes.
Training on augumented user 74706 32/50 current_auc = 0.7186203056989574
User 74706 AUC after training: 0.7178864257515943
User 74706 does not improve AUC. Reverting changes.
Training on augumented user 94790 33/50 current_auc = 0.7186203056989574
User 94790 AUC after training: 0.7186962243142017
User 94790 improves AUC. Keeping the model.
Training on augumented user 101564 34/50 current_auc = 0.7186962243142017
User 101564 AUC after training: 0.7184684684684685
User 101564 does not improve AUC. Reverting changes.
Training on augumented user 92184 35/50 current_auc = 0.7186962243142017
User 92184 AUC after training: 0.7180129567770017
User 92184 does not improve AUC. Reverting changes.
Training on augumented user 117703 36/50 current_auc = 0.7186962243142017
User 117703 AUC after training: 0.7183672436481425
User 117703 does not improve AUC. Reverting changes.
Training on augumented user 63450 37/50 current_auc = 0.7186962243142017
User 63450 AUC after training: 0.7175574450855351
User 63450 does not improve AUC. Reverting changes.
Training on augumented user 18343 38/50 current_auc = 0.7186962243142017
User 18343 AUC after training: 0.7185696932887944
User 18343 does not improve AUC. Reverting changes.
Training on augumented user 43433 39/50 current_auc = 0.7186962243142017
User 43433 AUC after training: 0.7177345885211053
User 43433 does not improve AUC. Reverting changes.
Training on augumented user 95274 40/50 current_auc = 0.7186962243142017
User 95274 AUC after training: 0.7186962243142019
User 95274 improves AUC. Keeping the model.
Training on augumented user 94658 41/50 current_auc = 0.7186962243142019
User 94658 AUC after training: 0.7178864257515943
User 94658 does not improve AUC. Reverting changes.
Training on augumented user 113878 42/50 current_auc = 0.7186962243142019
User 113878 AUC after training: 0.7186203056989574
User 113878 does not improve AUC. Reverting changes.
Training on augumented user 70400 43/50 current_auc = 0.7186962243142019
User 70400 AUC after training: 0.7184431622633871
User 70400 does not improve AUC. Reverting changes.
Training on augumented user 22385 44/50 current_auc = 0.7186962243142019
User 22385 AUC after training: 0.7186456119040389
User 22385 does not improve AUC. Reverting changes.
Training on augumented user 71088 45/50 current_auc = 0.7186962243142019
User 71088 AUC after training: 0.7169500961635793
User 71088 does not improve AUC. Reverting changes.
Training on augumented user 7942 46/50 current_auc = 0.7186962243142019
User 7942 AUC after training: 0.7181901002125721
User 7942 does not improve AUC. Reverting changes.
Training on augumented user 44859 47/50 current_auc = 0.7186962243142019
User 44859 AUC after training: 0.7186203056989574
User 44859 does not improve AUC. Reverting changes.
Training on augumented user 40762 48/50 current_auc = 0.7186962243142019
User 40762 AUC after training: 0.7178105071363498
User 40762 does not improve AUC. Reverting changes.
Training on augumented user 112719 49/50 current_auc = 0.7186962243142019
User 112719 AUC after training: 0.7179623443668388
User 112719 does not improve AUC. Reverting changes.
[2024-12-02 18:17:16.332895] start test user 71180 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:17.291853] start test user 71180 73/568 recall augumented users by random, augumented_users = [85132, 93276, 101884, 12061, 24790, 41107, 17169, 100859, 14664, 105988, 61812, 96300, 129071, 107876, 127693, 19336, 107766, 2074, 98587, 136357, 112255, 44288, 118003, 124897, 4644, 117453, 54482, 111667, 7986, 35724, 105056, 22276, 24660, 38599, 136545, 1972, 62063, 121216, 67313, 36184, 114011, 79011, 33330, 76056, 79900, 16688, 101632, 71304, 35769, 21082]
[2024-12-02 18:17:17.308782] user = 71180 Cloud 73/568
[2024-12-02 18:17:17.324903] user = 71180 Local 73/568
[2024-12-02 18:17:17.352419] user = 71180 Local+ 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:20.362475] user = 71180 MPDA- 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6169772256728778
Training on augumented user 85132 0/50 current_auc = 0.6169772256728778
User 85132 AUC after training: 0.6162008281573499
User 85132 does not improve AUC. Reverting changes.
Training on augumented user 93276 1/50 current_auc = 0.6169772256728778
User 93276 AUC after training: 0.6185300207039337
User 93276 improves AUC. Keeping the model.
Training on augumented user 101884 2/50 current_auc = 0.6185300207039337
User 101884 AUC after training: 0.6177536231884058
User 101884 does not improve AUC. Reverting changes.
Training on augumented user 12061 3/50 current_auc = 0.6185300207039337
User 12061 AUC after training: 0.618271221532091
User 12061 does not improve AUC. Reverting changes.
Training on augumented user 24790 4/50 current_auc = 0.6185300207039337
User 24790 AUC after training: 0.6182712215320911
User 24790 does not improve AUC. Reverting changes.
Training on augumented user 41107 5/50 current_auc = 0.6185300207039337
User 41107 AUC after training: 0.6177536231884058
User 41107 does not improve AUC. Reverting changes.
Training on augumented user 17169 6/50 current_auc = 0.6185300207039337
User 17169 AUC after training: 0.6191770186335404
User 17169 improves AUC. Keeping the model.
Training on augumented user 100859 7/50 current_auc = 0.6191770186335404
User 100859 AUC after training: 0.6193064182194616
User 100859 improves AUC. Keeping the model.
Training on augumented user 14664 8/50 current_auc = 0.6193064182194616
User 14664 AUC after training: 0.6182712215320911
User 14664 does not improve AUC. Reverting changes.
Training on augumented user 105988 9/50 current_auc = 0.6193064182194616
User 105988 AUC after training: 0.6187888198757764
User 105988 does not improve AUC. Reverting changes.
Training on augumented user 61812 10/50 current_auc = 0.6193064182194616
User 61812 AUC after training: 0.6187888198757764
User 61812 does not improve AUC. Reverting changes.
Training on augumented user 96300 11/50 current_auc = 0.6193064182194616
User 96300 AUC after training: 0.6195652173913044
User 96300 improves AUC. Keeping the model.
Training on augumented user 129071 12/50 current_auc = 0.6195652173913044
User 129071 AUC after training: 0.6200828157349896
User 129071 improves AUC. Keeping the model.
Training on augumented user 107876 13/50 current_auc = 0.6200828157349896
User 107876 AUC after training: 0.6176242236024845
User 107876 does not improve AUC. Reverting changes.
Training on augumented user 127693 14/50 current_auc = 0.6200828157349896
User 127693 AUC after training: 0.6193064182194618
User 127693 does not improve AUC. Reverting changes.
Training on augumented user 19336 15/50 current_auc = 0.6200828157349896
User 19336 AUC after training: 0.6187888198757765
User 19336 does not improve AUC. Reverting changes.
Training on augumented user 107766 16/50 current_auc = 0.6200828157349896
User 107766 AUC after training: 0.6187888198757764
User 107766 does not improve AUC. Reverting changes.
Training on augumented user 2074 17/50 current_auc = 0.6200828157349896
User 2074 AUC after training: 0.6185300207039337
User 2074 does not improve AUC. Reverting changes.
Training on augumented user 98587 18/50 current_auc = 0.6200828157349896
User 98587 AUC after training: 0.6190476190476191
User 98587 does not improve AUC. Reverting changes.
Training on augumented user 136357 19/50 current_auc = 0.6200828157349896
User 136357 AUC after training: 0.6182712215320911
User 136357 does not improve AUC. Reverting changes.
Training on augumented user 112255 20/50 current_auc = 0.6200828157349896
User 112255 AUC after training: 0.6190476190476191
User 112255 does not improve AUC. Reverting changes.
Training on augumented user 44288 21/50 current_auc = 0.6200828157349896
User 44288 AUC after training: 0.6190476190476191
User 44288 does not improve AUC. Reverting changes.
Training on augumented user 118003 22/50 current_auc = 0.6200828157349896
User 118003 AUC after training: 0.6191770186335404
User 118003 does not improve AUC. Reverting changes.
Training on augumented user 124897 23/50 current_auc = 0.6200828157349896
User 124897 AUC after training: 0.6195652173913044
User 124897 does not improve AUC. Reverting changes.
Training on augumented user 4644 24/50 current_auc = 0.6200828157349896
User 4644 AUC after training: 0.6182712215320911
User 4644 does not improve AUC. Reverting changes.
Training on augumented user 117453 25/50 current_auc = 0.6200828157349896
User 117453 AUC after training: 0.6193064182194616
User 117453 does not improve AUC. Reverting changes.
Training on augumented user 54482 26/50 current_auc = 0.6200828157349896
User 54482 AUC after training: 0.620600414078675
User 54482 improves AUC. Keeping the model.
Training on augumented user 111667 27/50 current_auc = 0.620600414078675
User 111667 AUC after training: 0.6189182194616978
User 111667 does not improve AUC. Reverting changes.
Training on augumented user 7986 28/50 current_auc = 0.620600414078675
User 7986 AUC after training: 0.6200828157349896
User 7986 does not improve AUC. Reverting changes.
Training on augumented user 35724 29/50 current_auc = 0.620600414078675
User 35724 AUC after training: 0.6200828157349896
User 35724 does not improve AUC. Reverting changes.
Training on augumented user 105056 30/50 current_auc = 0.620600414078675
User 105056 AUC after training: 0.6195652173913044
User 105056 does not improve AUC. Reverting changes.
Training on augumented user 22276 31/50 current_auc = 0.620600414078675
User 22276 AUC after training: 0.6196946169772257
User 22276 does not improve AUC. Reverting changes.
Training on augumented user 24660 32/50 current_auc = 0.620600414078675
User 24660 AUC after training: 0.6200828157349896
User 24660 does not improve AUC. Reverting changes.
Training on augumented user 38599 33/50 current_auc = 0.620600414078675
User 38599 AUC after training: 0.6203416149068324
User 38599 does not improve AUC. Reverting changes.
Training on augumented user 136545 34/50 current_auc = 0.620600414078675
User 136545 AUC after training: 0.6195652173913043
User 136545 does not improve AUC. Reverting changes.
Training on augumented user 1972 35/50 current_auc = 0.620600414078675
User 1972 AUC after training: 0.6199534161490683
User 1972 does not improve AUC. Reverting changes.
Training on augumented user 62063 36/50 current_auc = 0.620600414078675
User 62063 AUC after training: 0.6190476190476191
User 62063 does not improve AUC. Reverting changes.
Training on augumented user 121216 37/50 current_auc = 0.620600414078675
User 121216 AUC after training: 0.6204710144927537
User 121216 does not improve AUC. Reverting changes.
Training on augumented user 67313 38/50 current_auc = 0.620600414078675
User 67313 AUC after training: 0.6203416149068324
User 67313 does not improve AUC. Reverting changes.
Training on augumented user 36184 39/50 current_auc = 0.620600414078675
User 36184 AUC after training: 0.6191770186335404
User 36184 does not improve AUC. Reverting changes.
Training on augumented user 114011 40/50 current_auc = 0.620600414078675
User 114011 AUC after training: 0.6177536231884058
User 114011 does not improve AUC. Reverting changes.
Training on augumented user 79011 41/50 current_auc = 0.620600414078675
User 79011 AUC after training: 0.6156832298136645
User 79011 does not improve AUC. Reverting changes.
Training on augumented user 33330 42/50 current_auc = 0.620600414078675
User 33330 AUC after training: 0.6193064182194616
User 33330 does not improve AUC. Reverting changes.
Training on augumented user 76056 43/50 current_auc = 0.620600414078675
User 76056 AUC after training: 0.6203416149068324
User 76056 does not improve AUC. Reverting changes.
Training on augumented user 79900 44/50 current_auc = 0.620600414078675
User 79900 AUC after training: 0.6195652173913043
User 79900 does not improve AUC. Reverting changes.
Training on augumented user 16688 45/50 current_auc = 0.620600414078675
User 16688 AUC after training: 0.6191770186335404
User 16688 does not improve AUC. Reverting changes.
Training on augumented user 101632 46/50 current_auc = 0.620600414078675
User 101632 AUC after training: 0.6199534161490684
User 101632 does not improve AUC. Reverting changes.
Training on augumented user 71304 47/50 current_auc = 0.620600414078675
User 71304 AUC after training: 0.6184006211180124
User 71304 does not improve AUC. Reverting changes.
Training on augumented user 35769 48/50 current_auc = 0.620600414078675
User 35769 AUC after training: 0.6195652173913043
User 35769 does not improve AUC. Reverting changes.
Training on augumented user 21082 49/50 current_auc = 0.620600414078675
User 21082 AUC after training: 0.6189182194616978
User 21082 does not improve AUC. Reverting changes.
[2024-12-02 18:17:47.698291] start test user 71245 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:48.379212] start test user 71245 74/568 recall augumented users by random, augumented_users = [90816, 89492, 57803, 46144, 52030, 60615, 26715, 21525, 4377, 99940, 138292, 79264, 16087, 52121, 136825, 29997, 80771, 95537, 101142, 68316, 30257, 28467, 87749, 76508, 130201, 17894, 72574, 104044, 44084, 63113, 55062, 39970, 113708, 35922, 104173, 3395, 123114, 95901, 30817, 122959, 64528, 104407, 26069, 111927, 18465, 41335, 109746, 127528, 108479, 96142]
[2024-12-02 18:17:48.394884] user = 71245 Cloud 74/568
[2024-12-02 18:17:48.410598] user = 71245 Local 74/568
[2024-12-02 18:17:48.550032] user = 71245 Local+ 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:50.853254] user = 71245 MPDA- 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7256073277578654
Training on augumented user 90816 0/50 current_auc = 0.7256073277578654
User 90816 AUC after training: 0.7256073277578653
User 90816 does not improve AUC. Reverting changes.
Training on augumented user 89492 1/50 current_auc = 0.7256073277578654
User 89492 AUC after training: 0.7260055754679411
User 89492 improves AUC. Keeping the model.
Training on augumented user 57803 2/50 current_auc = 0.7260055754679411
User 57803 AUC after training: 0.7248108323377139
User 57803 does not improve AUC. Reverting changes.
Training on augumented user 46144 3/50 current_auc = 0.7260055754679411
User 46144 AUC after training: 0.7266029470330545
User 46144 improves AUC. Keeping the model.
Training on augumented user 52030 4/50 current_auc = 0.7266029470330545
User 52030 AUC after training: 0.7268020708880923
User 52030 improves AUC. Keeping the model.
Training on augumented user 60615 5/50 current_auc = 0.7268020708880923
User 60615 AUC after training: 0.7262046993229789
User 60615 does not improve AUC. Reverting changes.
Training on augumented user 26715 6/50 current_auc = 0.7268020708880923
User 26715 AUC after training: 0.7275985663082437
User 26715 improves AUC. Keeping the model.
Training on augumented user 21525 7/50 current_auc = 0.7275985663082437
User 21525 AUC after training: 0.7254082039028275
User 21525 does not improve AUC. Reverting changes.
Training on augumented user 4377 8/50 current_auc = 0.7275985663082437
User 4377 AUC after training: 0.7268020708880923
User 4377 does not improve AUC. Reverting changes.
Training on augumented user 99940 9/50 current_auc = 0.7275985663082437
User 99940 AUC after training: 0.7283950617283951
User 99940 improves AUC. Keeping the model.
Training on augumented user 138292 10/50 current_auc = 0.7283950617283951
User 138292 AUC after training: 0.7279968140183193
User 138292 does not improve AUC. Reverting changes.
Training on augumented user 79264 11/50 current_auc = 0.7283950617283951
User 79264 AUC after training: 0.7289924332935086
User 79264 improves AUC. Keeping the model.
Training on augumented user 16087 12/50 current_auc = 0.7289924332935086
User 16087 AUC after training: 0.7279968140183193
User 16087 does not improve AUC. Reverting changes.
Training on augumented user 52121 13/50 current_auc = 0.7289924332935086
User 52121 AUC after training: 0.7283950617283951
User 52121 does not improve AUC. Reverting changes.
Training on augumented user 136825 14/50 current_auc = 0.7289924332935086
User 136825 AUC after training: 0.7268020708880923
User 136825 does not improve AUC. Reverting changes.
Training on augumented user 29997 15/50 current_auc = 0.7289924332935086
User 29997 AUC after training: 0.7270011947431303
User 29997 does not improve AUC. Reverting changes.
Training on augumented user 80771 16/50 current_auc = 0.7289924332935086
User 80771 AUC after training: 0.724810832337714
User 80771 does not improve AUC. Reverting changes.
Training on augumented user 95537 17/50 current_auc = 0.7289924332935086
User 95537 AUC after training: 0.7291915571485464
User 95537 improves AUC. Keeping the model.
Training on augumented user 101142 18/50 current_auc = 0.7291915571485464
User 101142 AUC after training: 0.7262046993229788
User 101142 does not improve AUC. Reverting changes.
Training on augumented user 68316 19/50 current_auc = 0.7291915571485464
User 68316 AUC after training: 0.7293906810035842
User 68316 improves AUC. Keeping the model.
Training on augumented user 30257 20/50 current_auc = 0.7293906810035842
User 30257 AUC after training: 0.7285941855834329
User 30257 does not improve AUC. Reverting changes.
Training on augumented user 28467 21/50 current_auc = 0.7293906810035842
User 28467 AUC after training: 0.7273994424532059
User 28467 does not improve AUC. Reverting changes.
Training on augumented user 87749 22/50 current_auc = 0.7293906810035842
User 87749 AUC after training: 0.7287933094384706
User 87749 does not improve AUC. Reverting changes.
Training on augumented user 76508 23/50 current_auc = 0.7293906810035842
User 76508 AUC after training: 0.7285941855834328
User 76508 does not improve AUC. Reverting changes.
Training on augumented user 130201 24/50 current_auc = 0.7293906810035842
User 130201 AUC after training: 0.7291915571485463
User 130201 does not improve AUC. Reverting changes.
Training on augumented user 17894 25/50 current_auc = 0.7293906810035842
User 17894 AUC after training: 0.7291915571485464
User 17894 does not improve AUC. Reverting changes.
Training on augumented user 72574 26/50 current_auc = 0.7293906810035842
User 72574 AUC after training: 0.728395061728395
User 72574 does not improve AUC. Reverting changes.
Training on augumented user 104044 27/50 current_auc = 0.7293906810035842
User 104044 AUC after training: 0.7287933094384708
User 104044 does not improve AUC. Reverting changes.
Training on augumented user 44084 28/50 current_auc = 0.7293906810035842
User 44084 AUC after training: 0.7252090800477897
User 44084 does not improve AUC. Reverting changes.
Training on augumented user 63113 29/50 current_auc = 0.7293906810035842
User 63113 AUC after training: 0.7285941855834329
User 63113 does not improve AUC. Reverting changes.
Training on augumented user 55062 30/50 current_auc = 0.7293906810035842
User 55062 AUC after training: 0.7291915571485464
User 55062 does not improve AUC. Reverting changes.
Training on augumented user 39970 31/50 current_auc = 0.7293906810035842
User 39970 AUC after training: 0.7287933094384706
User 39970 does not improve AUC. Reverting changes.
Training on augumented user 113708 32/50 current_auc = 0.7293906810035842
User 113708 AUC after training: 0.7273994424532059
User 113708 does not improve AUC. Reverting changes.
Training on augumented user 35922 33/50 current_auc = 0.7293906810035842
User 35922 AUC after training: 0.7283950617283951
User 35922 does not improve AUC. Reverting changes.
Training on augumented user 104173 34/50 current_auc = 0.7293906810035842
User 104173 AUC after training: 0.7289924332935085
User 104173 does not improve AUC. Reverting changes.
Training on augumented user 3395 35/50 current_auc = 0.7293906810035842
User 3395 AUC after training: 0.7275985663082436
User 3395 does not improve AUC. Reverting changes.
Training on augumented user 123114 36/50 current_auc = 0.7293906810035842
User 123114 AUC after training: 0.7283950617283951
User 123114 does not improve AUC. Reverting changes.
Training on augumented user 95901 37/50 current_auc = 0.7293906810035842
User 95901 AUC after training: 0.7279968140183194
User 95901 does not improve AUC. Reverting changes.
Training on augumented user 30817 38/50 current_auc = 0.7293906810035842
User 30817 AUC after training: 0.7285941855834329
User 30817 does not improve AUC. Reverting changes.
Training on augumented user 122959 39/50 current_auc = 0.7293906810035842
User 122959 AUC after training: 0.7279968140183194
User 122959 does not improve AUC. Reverting changes.
Training on augumented user 64528 40/50 current_auc = 0.7293906810035842
User 64528 AUC after training: 0.7293906810035842
User 64528 does not improve AUC. Reverting changes.
Training on augumented user 104407 41/50 current_auc = 0.7293906810035842
User 104407 AUC after training: 0.7277976901632816
User 104407 does not improve AUC. Reverting changes.
Training on augumented user 26069 42/50 current_auc = 0.7293906810035842
User 26069 AUC after training: 0.7281959378733572
User 26069 does not improve AUC. Reverting changes.
Training on augumented user 111927 43/50 current_auc = 0.7293906810035842
User 111927 AUC after training: 0.7285941855834329
User 111927 does not improve AUC. Reverting changes.
Training on augumented user 18465 44/50 current_auc = 0.7293906810035842
User 18465 AUC after training: 0.7283950617283951
User 18465 does not improve AUC. Reverting changes.
Training on augumented user 41335 45/50 current_auc = 0.7293906810035842
User 41335 AUC after training: 0.7293906810035843
User 41335 improves AUC. Keeping the model.
Training on augumented user 109746 46/50 current_auc = 0.7293906810035843
User 109746 AUC after training: 0.7285941855834329
User 109746 does not improve AUC. Reverting changes.
Training on augumented user 127528 47/50 current_auc = 0.7293906810035843
User 127528 AUC after training: 0.7297889287136599
User 127528 improves AUC. Keeping the model.
Training on augumented user 108479 48/50 current_auc = 0.7297889287136599
User 108479 AUC after training: 0.729589804858622
User 108479 does not improve AUC. Reverting changes.
Training on augumented user 96142 49/50 current_auc = 0.7297889287136599
User 96142 AUC after training: 0.7277976901632814
User 96142 does not improve AUC. Reverting changes.
[2024-12-02 18:18:18.223982] start test user 71258 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:18.851759] start test user 71258 75/568 recall augumented users by random, augumented_users = [58099, 43227, 61801, 68595, 106863, 12134, 31541, 49063, 16081, 107635, 34143, 122437, 8475, 39333, 46914, 88034, 96230, 14462, 90047, 98319, 84772, 75638, 113536, 29870, 67410, 27419, 73240, 100700, 90162, 46891, 57488, 101342, 127708, 9122, 114543, 1128, 70672, 89937, 22928, 23934, 20097, 39837, 104361, 77700, 25548, 86712, 83999, 32350, 67858, 47205]
[2024-12-02 18:18:18.866550] user = 71258 Cloud 75/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:18:18.883393] user = 71258 Local 75/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:18:18.902782] user = 71258 Local+ 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:18:20.544693] user = 71258 MPDA- 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 58099 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58099 AUC after training: 0.5
User 58099 does not improve AUC. Reverting changes.
Training on augumented user 43227 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43227 AUC after training: 0.5
User 43227 does not improve AUC. Reverting changes.
Training on augumented user 61801 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61801 AUC after training: 0.5
User 61801 does not improve AUC. Reverting changes.
Training on augumented user 68595 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68595 AUC after training: 0.5
User 68595 does not improve AUC. Reverting changes.
Training on augumented user 106863 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106863 AUC after training: 0.5
User 106863 does not improve AUC. Reverting changes.
Training on augumented user 12134 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12134 AUC after training: 0.5
User 12134 does not improve AUC. Reverting changes.
Training on augumented user 31541 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31541 AUC after training: 0.5
User 31541 does not improve AUC. Reverting changes.
Training on augumented user 49063 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49063 AUC after training: 0.5
User 49063 does not improve AUC. Reverting changes.
Training on augumented user 16081 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16081 AUC after training: 0.5
User 16081 does not improve AUC. Reverting changes.
Training on augumented user 107635 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107635 AUC after training: 0.5
User 107635 does not improve AUC. Reverting changes.
Training on augumented user 34143 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34143 AUC after training: 0.5
User 34143 does not improve AUC. Reverting changes.
Training on augumented user 122437 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122437 AUC after training: 0.5
User 122437 does not improve AUC. Reverting changes.
Training on augumented user 8475 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8475 AUC after training: 0.5
User 8475 does not improve AUC. Reverting changes.
Training on augumented user 39333 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39333 AUC after training: 0.5
User 39333 does not improve AUC. Reverting changes.
Training on augumented user 46914 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46914 AUC after training: 0.5
User 46914 does not improve AUC. Reverting changes.
Training on augumented user 88034 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88034 AUC after training: 0.5
User 88034 does not improve AUC. Reverting changes.
Training on augumented user 96230 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96230 AUC after training: 0.5
User 96230 does not improve AUC. Reverting changes.
Training on augumented user 14462 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14462 AUC after training: 0.5
User 14462 does not improve AUC. Reverting changes.
Training on augumented user 90047 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90047 AUC after training: 0.5
User 90047 does not improve AUC. Reverting changes.
Training on augumented user 98319 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98319 AUC after training: 0.5
User 98319 does not improve AUC. Reverting changes.
Training on augumented user 84772 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84772 AUC after training: 0.5
User 84772 does not improve AUC. Reverting changes.
Training on augumented user 75638 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75638 AUC after training: 0.5
User 75638 does not improve AUC. Reverting changes.
Training on augumented user 113536 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113536 AUC after training: 0.5
User 113536 does not improve AUC. Reverting changes.
Training on augumented user 29870 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29870 AUC after training: 0.5
User 29870 does not improve AUC. Reverting changes.
Training on augumented user 67410 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67410 AUC after training: 0.5
User 67410 does not improve AUC. Reverting changes.
Training on augumented user 27419 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27419 AUC after training: 0.5
User 27419 does not improve AUC. Reverting changes.
Training on augumented user 73240 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73240 AUC after training: 0.5
User 73240 does not improve AUC. Reverting changes.
Training on augumented user 100700 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100700 AUC after training: 0.5
User 100700 does not improve AUC. Reverting changes.
Training on augumented user 90162 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90162 AUC after training: 0.5
User 90162 does not improve AUC. Reverting changes.
Training on augumented user 46891 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46891 AUC after training: 0.5
User 46891 does not improve AUC. Reverting changes.
Training on augumented user 57488 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57488 AUC after training: 0.5
User 57488 does not improve AUC. Reverting changes.
Training on augumented user 101342 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101342 AUC after training: 0.5
User 101342 does not improve AUC. Reverting changes.
Training on augumented user 127708 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127708 AUC after training: 0.5
User 127708 does not improve AUC. Reverting changes.
Training on augumented user 9122 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9122 AUC after training: 0.5
User 9122 does not improve AUC. Reverting changes.
Training on augumented user 114543 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114543 AUC after training: 0.5
User 114543 does not improve AUC. Reverting changes.
Training on augumented user 1128 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1128 AUC after training: 0.5
User 1128 does not improve AUC. Reverting changes.
Training on augumented user 70672 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70672 AUC after training: 0.5
User 70672 does not improve AUC. Reverting changes.
Training on augumented user 89937 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89937 AUC after training: 0.5
User 89937 does not improve AUC. Reverting changes.
Training on augumented user 22928 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22928 AUC after training: 0.5
User 22928 does not improve AUC. Reverting changes.
Training on augumented user 23934 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23934 AUC after training: 0.5
User 23934 does not improve AUC. Reverting changes.
Training on augumented user 20097 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20097 AUC after training: 0.5
User 20097 does not improve AUC. Reverting changes.
Training on augumented user 39837 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39837 AUC after training: 0.5
User 39837 does not improve AUC. Reverting changes.
Training on augumented user 104361 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104361 AUC after training: 0.5
User 104361 does not improve AUC. Reverting changes.
Training on augumented user 77700 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77700 AUC after training: 0.5
User 77700 does not improve AUC. Reverting changes.
Training on augumented user 25548 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25548 AUC after training: 0.5
User 25548 does not improve AUC. Reverting changes.
Training on augumented user 86712 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86712 AUC after training: 0.5
User 86712 does not improve AUC. Reverting changes.
Training on augumented user 83999 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83999 AUC after training: 0.5
User 83999 does not improve AUC. Reverting changes.
Training on augumented user 32350 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32350 AUC after training: 0.5
User 32350 does not improve AUC. Reverting changes.
Training on augumented user 67858 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67858 AUC after training: 0.5
User 67858 does not improve AUC. Reverting changes.
Training on augumented user 47205 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47205 AUC after training: 0.5
User 47205 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:18:44.376490] start test user 71264 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:44.779756] start test user 71264 76/568 recall augumented users by random, augumented_users = [9377, 31029, 60508, 55436, 127868, 89449, 107999, 30482, 41172, 130008, 31056, 131267, 32334, 50947, 103074, 96853, 30574, 106852, 58675, 132368, 130737, 28965, 112332, 96121, 71482, 25144, 120067, 123421, 29696, 111475, 31080, 113657, 23063, 27088, 107350, 10866, 72724, 56764, 112678, 12254, 36228, 55161, 62259, 6799, 112316, 64693, 82462, 130889, 9465, 24453]
[2024-12-02 18:18:44.796064] user = 71264 Cloud 76/568
[2024-12-02 18:18:44.814059] user = 71264 Local 76/568
[2024-12-02 18:18:44.953341] user = 71264 Local+ 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:47.015366] user = 71264 MPDA- 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5085858585858586
Training on augumented user 9377 0/50 current_auc = 0.5085858585858586
User 9377 AUC after training: 0.5085858585858586
User 9377 does not improve AUC. Reverting changes.
Training on augumented user 31029 1/50 current_auc = 0.5085858585858586
User 31029 AUC after training: 0.5085858585858586
User 31029 does not improve AUC. Reverting changes.
Training on augumented user 60508 2/50 current_auc = 0.5085858585858586
User 60508 AUC after training: 0.5063131313131313
User 60508 does not improve AUC. Reverting changes.
Training on augumented user 55436 3/50 current_auc = 0.5085858585858586
User 55436 AUC after training: 0.5059343434343434
User 55436 does not improve AUC. Reverting changes.
Training on augumented user 127868 4/50 current_auc = 0.5085858585858586
User 127868 AUC after training: 0.5088383838383839
User 127868 improves AUC. Keeping the model.
Training on augumented user 89449 5/50 current_auc = 0.5088383838383839
User 89449 AUC after training: 0.5087121212121212
User 89449 does not improve AUC. Reverting changes.
Training on augumented user 107999 6/50 current_auc = 0.5088383838383839
User 107999 AUC after training: 0.5084595959595959
User 107999 does not improve AUC. Reverting changes.
Training on augumented user 30482 7/50 current_auc = 0.5088383838383839
User 30482 AUC after training: 0.5080808080808081
User 30482 does not improve AUC. Reverting changes.
Training on augumented user 41172 8/50 current_auc = 0.5088383838383839
User 41172 AUC after training: 0.5075757575757576
User 41172 does not improve AUC. Reverting changes.
Training on augumented user 130008 9/50 current_auc = 0.5088383838383839
User 130008 AUC after training: 0.5089646464646465
User 130008 improves AUC. Keeping the model.
Training on augumented user 31056 10/50 current_auc = 0.5089646464646465
User 31056 AUC after training: 0.5080808080808081
User 31056 does not improve AUC. Reverting changes.
Training on augumented user 131267 11/50 current_auc = 0.5089646464646465
User 131267 AUC after training: 0.5066919191919192
User 131267 does not improve AUC. Reverting changes.
Training on augumented user 32334 12/50 current_auc = 0.5089646464646465
User 32334 AUC after training: 0.5077020202020203
User 32334 does not improve AUC. Reverting changes.
Training on augumented user 50947 13/50 current_auc = 0.5089646464646465
User 50947 AUC after training: 0.5071969696969698
User 50947 does not improve AUC. Reverting changes.
Training on augumented user 103074 14/50 current_auc = 0.5089646464646465
User 103074 AUC after training: 0.5068181818181818
User 103074 does not improve AUC. Reverting changes.
Training on augumented user 96853 15/50 current_auc = 0.5089646464646465
User 96853 AUC after training: 0.5088383838383838
User 96853 does not improve AUC. Reverting changes.
Training on augumented user 30574 16/50 current_auc = 0.5089646464646465
User 30574 AUC after training: 0.5089646464646465
User 30574 does not improve AUC. Reverting changes.
Training on augumented user 106852 17/50 current_auc = 0.5089646464646465
User 106852 AUC after training: 0.507070707070707
User 106852 does not improve AUC. Reverting changes.
Training on augumented user 58675 18/50 current_auc = 0.5089646464646465
User 58675 AUC after training: 0.5089646464646465
User 58675 does not improve AUC. Reverting changes.
Training on augumented user 132368 19/50 current_auc = 0.5089646464646465
User 132368 AUC after training: 0.5073232323232323
User 132368 does not improve AUC. Reverting changes.
Training on augumented user 130737 20/50 current_auc = 0.5089646464646465
User 130737 AUC after training: 0.5077020202020202
User 130737 does not improve AUC. Reverting changes.
Training on augumented user 28965 21/50 current_auc = 0.5089646464646465
User 28965 AUC after training: 0.5093434343434344
User 28965 improves AUC. Keeping the model.
Training on augumented user 112332 22/50 current_auc = 0.5093434343434344
User 112332 AUC after training: 0.5093434343434342
User 112332 does not improve AUC. Reverting changes.
Training on augumented user 96121 23/50 current_auc = 0.5093434343434344
User 96121 AUC after training: 0.5095959595959596
User 96121 improves AUC. Keeping the model.
Training on augumented user 71482 24/50 current_auc = 0.5095959595959596
User 71482 AUC after training: 0.5073232323232323
User 71482 does not improve AUC. Reverting changes.
Training on augumented user 25144 25/50 current_auc = 0.5095959595959596
User 25144 AUC after training: 0.5075757575757576
User 25144 does not improve AUC. Reverting changes.
Training on augumented user 120067 26/50 current_auc = 0.5095959595959596
User 120067 AUC after training: 0.5078282828282827
User 120067 does not improve AUC. Reverting changes.
Training on augumented user 123421 27/50 current_auc = 0.5095959595959596
User 123421 AUC after training: 0.5056818181818182
User 123421 does not improve AUC. Reverting changes.
Training on augumented user 29696 28/50 current_auc = 0.5095959595959596
User 29696 AUC after training: 0.5082070707070707
User 29696 does not improve AUC. Reverting changes.
Training on augumented user 111475 29/50 current_auc = 0.5095959595959596
User 111475 AUC after training: 0.5085858585858586
User 111475 does not improve AUC. Reverting changes.
Training on augumented user 31080 30/50 current_auc = 0.5095959595959596
User 31080 AUC after training: 0.5093434343434344
User 31080 does not improve AUC. Reverting changes.
Training on augumented user 113657 31/50 current_auc = 0.5095959595959596
User 113657 AUC after training: 0.5089646464646465
User 113657 does not improve AUC. Reverting changes.
Training on augumented user 23063 32/50 current_auc = 0.5095959595959596
User 23063 AUC after training: 0.509469696969697
User 23063 does not improve AUC. Reverting changes.
Training on augumented user 27088 33/50 current_auc = 0.5095959595959596
User 27088 AUC after training: 0.5087121212121213
User 27088 does not improve AUC. Reverting changes.
Training on augumented user 107350 34/50 current_auc = 0.5095959595959596
User 107350 AUC after training: 0.5079545454545454
User 107350 does not improve AUC. Reverting changes.
Training on augumented user 10866 35/50 current_auc = 0.5095959595959596
User 10866 AUC after training: 0.5079545454545454
User 10866 does not improve AUC. Reverting changes.
Training on augumented user 72724 36/50 current_auc = 0.5095959595959596
User 72724 AUC after training: 0.5079545454545454
User 72724 does not improve AUC. Reverting changes.
Training on augumented user 56764 37/50 current_auc = 0.5095959595959596
User 56764 AUC after training: 0.5083333333333333
User 56764 does not improve AUC. Reverting changes.
Training on augumented user 112678 38/50 current_auc = 0.5095959595959596
User 112678 AUC after training: 0.5088383838383839
User 112678 does not improve AUC. Reverting changes.
Training on augumented user 12254 39/50 current_auc = 0.5095959595959596
User 12254 AUC after training: 0.508459595959596
User 12254 does not improve AUC. Reverting changes.
Training on augumented user 36228 40/50 current_auc = 0.5095959595959596
User 36228 AUC after training: 0.5092171717171717
User 36228 does not improve AUC. Reverting changes.
Training on augumented user 55161 41/50 current_auc = 0.5095959595959596
User 55161 AUC after training: 0.5074494949494949
User 55161 does not improve AUC. Reverting changes.
Training on augumented user 62259 42/50 current_auc = 0.5095959595959596
User 62259 AUC after training: 0.5079545454545454
User 62259 does not improve AUC. Reverting changes.
Training on augumented user 6799 43/50 current_auc = 0.5095959595959596
User 6799 AUC after training: 0.5092171717171717
User 6799 does not improve AUC. Reverting changes.
Training on augumented user 112316 44/50 current_auc = 0.5095959595959596
User 112316 AUC after training: 0.5092171717171717
User 112316 does not improve AUC. Reverting changes.
Training on augumented user 64693 45/50 current_auc = 0.5095959595959596
User 64693 AUC after training: 0.5085858585858586
User 64693 does not improve AUC. Reverting changes.
Training on augumented user 82462 46/50 current_auc = 0.5095959595959596
User 82462 AUC after training: 0.5087121212121212
User 82462 does not improve AUC. Reverting changes.
Training on augumented user 130889 47/50 current_auc = 0.5095959595959596
User 130889 AUC after training: 0.5083333333333333
User 130889 does not improve AUC. Reverting changes.
Training on augumented user 9465 48/50 current_auc = 0.5095959595959596
User 9465 AUC after training: 0.5075757575757576
User 9465 does not improve AUC. Reverting changes.
Training on augumented user 24453 49/50 current_auc = 0.5095959595959596
User 24453 AUC after training: 0.5084595959595959
User 24453 does not improve AUC. Reverting changes.
[2024-12-02 18:19:17.851296] start test user 71325 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:18.762086] start test user 71325 77/568 recall augumented users by random, augumented_users = [136451, 18477, 25517, 3972, 80119, 98708, 67958, 40901, 59818, 11815, 76734, 43245, 33632, 77945, 14856, 16307, 67206, 133502, 96001, 126345, 101304, 22224, 35272, 106900, 47595, 116034, 54941, 107229, 10839, 108224, 48826, 46605, 137900, 123354, 84798, 119727, 72985, 91746, 82762, 128572, 116930, 115542, 42409, 98318, 62749, 130043, 8999, 77820, 96232, 51739]
[2024-12-02 18:19:18.781039] user = 71325 Cloud 77/568
[2024-12-02 18:19:18.795813] user = 71325 Local 77/568
[2024-12-02 18:19:18.908126] user = 71325 Local+ 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:21.412503] user = 71325 MPDA- 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6911196911196911
Training on augumented user 136451 0/50 current_auc = 0.6911196911196911
User 136451 AUC after training: 0.6916023166023165
User 136451 improves AUC. Keeping the model.
Training on augumented user 18477 1/50 current_auc = 0.6916023166023165
User 18477 AUC after training: 0.6911196911196911
User 18477 does not improve AUC. Reverting changes.
Training on augumented user 25517 2/50 current_auc = 0.6916023166023165
User 25517 AUC after training: 0.6911196911196911
User 25517 does not improve AUC. Reverting changes.
Training on augumented user 3972 3/50 current_auc = 0.6916023166023165
User 3972 AUC after training: 0.6916023166023165
User 3972 does not improve AUC. Reverting changes.
Training on augumented user 80119 4/50 current_auc = 0.6916023166023165
User 80119 AUC after training: 0.6901544401544402
User 80119 does not improve AUC. Reverting changes.
Training on augumented user 98708 5/50 current_auc = 0.6916023166023165
User 98708 AUC after training: 0.6916023166023165
User 98708 does not improve AUC. Reverting changes.
Training on augumented user 67958 6/50 current_auc = 0.6916023166023165
User 67958 AUC after training: 0.6920849420849421
User 67958 improves AUC. Keeping the model.
Training on augumented user 40901 7/50 current_auc = 0.6920849420849421
User 40901 AUC after training: 0.6920849420849421
User 40901 does not improve AUC. Reverting changes.
Training on augumented user 59818 8/50 current_auc = 0.6920849420849421
User 59818 AUC after training: 0.6916023166023165
User 59818 does not improve AUC. Reverting changes.
Training on augumented user 11815 9/50 current_auc = 0.6920849420849421
User 11815 AUC after training: 0.6920849420849421
User 11815 does not improve AUC. Reverting changes.
Training on augumented user 76734 10/50 current_auc = 0.6920849420849421
User 76734 AUC after training: 0.6901544401544402
User 76734 does not improve AUC. Reverting changes.
Training on augumented user 43245 11/50 current_auc = 0.6920849420849421
User 43245 AUC after training: 0.6911196911196912
User 43245 does not improve AUC. Reverting changes.
Training on augumented user 33632 12/50 current_auc = 0.6920849420849421
User 33632 AUC after training: 0.6925675675675677
User 33632 improves AUC. Keeping the model.
Training on augumented user 77945 13/50 current_auc = 0.6925675675675677
User 77945 AUC after training: 0.6916023166023165
User 77945 does not improve AUC. Reverting changes.
Training on augumented user 14856 14/50 current_auc = 0.6925675675675677
User 14856 AUC after training: 0.6916023166023166
User 14856 does not improve AUC. Reverting changes.
Training on augumented user 16307 15/50 current_auc = 0.6925675675675677
User 16307 AUC after training: 0.6916023166023165
User 16307 does not improve AUC. Reverting changes.
Training on augumented user 67206 16/50 current_auc = 0.6925675675675677
User 67206 AUC after training: 0.6916023166023165
User 67206 does not improve AUC. Reverting changes.
Training on augumented user 133502 17/50 current_auc = 0.6925675675675677
User 133502 AUC after training: 0.6920849420849421
User 133502 does not improve AUC. Reverting changes.
Training on augumented user 96001 18/50 current_auc = 0.6925675675675677
User 96001 AUC after training: 0.6911196911196912
User 96001 does not improve AUC. Reverting changes.
Training on augumented user 126345 19/50 current_auc = 0.6925675675675677
User 126345 AUC after training: 0.6916023166023166
User 126345 does not improve AUC. Reverting changes.
Training on augumented user 101304 20/50 current_auc = 0.6925675675675677
User 101304 AUC after training: 0.6916023166023165
User 101304 does not improve AUC. Reverting changes.
Training on augumented user 22224 21/50 current_auc = 0.6925675675675677
User 22224 AUC after training: 0.6920849420849421
User 22224 does not improve AUC. Reverting changes.
Training on augumented user 35272 22/50 current_auc = 0.6925675675675677
User 35272 AUC after training: 0.6906370656370657
User 35272 does not improve AUC. Reverting changes.
Training on augumented user 106900 23/50 current_auc = 0.6925675675675677
User 106900 AUC after training: 0.6920849420849421
User 106900 does not improve AUC. Reverting changes.
Training on augumented user 47595 24/50 current_auc = 0.6925675675675677
User 47595 AUC after training: 0.6916023166023165
User 47595 does not improve AUC. Reverting changes.
Training on augumented user 116034 25/50 current_auc = 0.6925675675675677
User 116034 AUC after training: 0.693050193050193
User 116034 improves AUC. Keeping the model.
Training on augumented user 54941 26/50 current_auc = 0.693050193050193
User 54941 AUC after training: 0.6935328185328186
User 54941 improves AUC. Keeping the model.
Training on augumented user 107229 27/50 current_auc = 0.6935328185328186
User 107229 AUC after training: 0.693050193050193
User 107229 does not improve AUC. Reverting changes.
Training on augumented user 10839 28/50 current_auc = 0.6935328185328186
User 10839 AUC after training: 0.6935328185328186
User 10839 does not improve AUC. Reverting changes.
Training on augumented user 108224 29/50 current_auc = 0.6935328185328186
User 108224 AUC after training: 0.693050193050193
User 108224 does not improve AUC. Reverting changes.
Training on augumented user 48826 30/50 current_auc = 0.6935328185328186
User 48826 AUC after training: 0.6913610038610039
User 48826 does not improve AUC. Reverting changes.
Training on augumented user 46605 31/50 current_auc = 0.6935328185328186
User 46605 AUC after training: 0.693050193050193
User 46605 does not improve AUC. Reverting changes.
Training on augumented user 137900 32/50 current_auc = 0.6935328185328186
User 137900 AUC after training: 0.6944980694980695
User 137900 improves AUC. Keeping the model.
Training on augumented user 123354 33/50 current_auc = 0.6944980694980695
User 123354 AUC after training: 0.6954633204633206
User 123354 improves AUC. Keeping the model.
Training on augumented user 84798 34/50 current_auc = 0.6954633204633206
User 84798 AUC after training: 0.6949806949806949
User 84798 does not improve AUC. Reverting changes.
Training on augumented user 119727 35/50 current_auc = 0.6954633204633206
User 119727 AUC after training: 0.694980694980695
User 119727 does not improve AUC. Reverting changes.
Training on augumented user 72985 36/50 current_auc = 0.6954633204633206
User 72985 AUC after training: 0.6940154440154441
User 72985 does not improve AUC. Reverting changes.
Training on augumented user 91746 37/50 current_auc = 0.6954633204633206
User 91746 AUC after training: 0.693050193050193
User 91746 does not improve AUC. Reverting changes.
Training on augumented user 82762 38/50 current_auc = 0.6954633204633206
User 82762 AUC after training: 0.694980694980695
User 82762 does not improve AUC. Reverting changes.
Training on augumented user 128572 39/50 current_auc = 0.6954633204633206
User 128572 AUC after training: 0.6944980694980695
User 128572 does not improve AUC. Reverting changes.
Training on augumented user 116930 40/50 current_auc = 0.6954633204633206
User 116930 AUC after training: 0.6944980694980696
User 116930 does not improve AUC. Reverting changes.
Training on augumented user 115542 41/50 current_auc = 0.6954633204633206
User 115542 AUC after training: 0.6925675675675677
User 115542 does not improve AUC. Reverting changes.
Training on augumented user 42409 42/50 current_auc = 0.6954633204633206
User 42409 AUC after training: 0.6940154440154441
User 42409 does not improve AUC. Reverting changes.
Training on augumented user 98318 43/50 current_auc = 0.6954633204633206
User 98318 AUC after training: 0.694980694980695
User 98318 does not improve AUC. Reverting changes.
Training on augumented user 62749 44/50 current_auc = 0.6954633204633206
User 62749 AUC after training: 0.6940154440154441
User 62749 does not improve AUC. Reverting changes.
Training on augumented user 130043 45/50 current_auc = 0.6954633204633206
User 130043 AUC after training: 0.6935328185328186
User 130043 does not improve AUC. Reverting changes.
Training on augumented user 8999 46/50 current_auc = 0.6954633204633206
User 8999 AUC after training: 0.6925675675675675
User 8999 does not improve AUC. Reverting changes.
Training on augumented user 77820 47/50 current_auc = 0.6954633204633206
User 77820 AUC after training: 0.694980694980695
User 77820 does not improve AUC. Reverting changes.
Training on augumented user 96232 48/50 current_auc = 0.6954633204633206
User 96232 AUC after training: 0.6954633204633206
User 96232 does not improve AUC. Reverting changes.
Training on augumented user 51739 49/50 current_auc = 0.6954633204633206
User 51739 AUC after training: 0.6940154440154441
User 51739 does not improve AUC. Reverting changes.
[2024-12-02 18:19:48.020225] start test user 71326 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:48.693954] start test user 71326 78/568 recall augumented users by random, augumented_users = [40067, 128388, 117299, 50193, 122131, 88450, 7926, 53856, 70036, 83766, 9058, 133472, 89732, 64117, 35518, 136336, 96183, 84861, 74678, 123302, 104975, 13562, 8140, 131484, 92201, 22086, 52522, 4656, 1493, 117446, 92943, 10869, 26571, 98269, 95403, 136434, 42470, 25554, 124769, 112533, 67491, 32230, 56655, 25359, 118763, 130086, 65946, 80321, 65638, 21053]
[2024-12-02 18:19:48.710246] user = 71326 Cloud 78/568
[2024-12-02 18:19:48.769052] user = 71326 Local 78/568
[2024-12-02 18:19:48.934656] user = 71326 Local+ 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:50.455472] user = 71326 MPDA- 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7789133880290882
Training on augumented user 40067 0/50 current_auc = 0.7789133880290882
User 40067 AUC after training: 0.7791581204549691
User 40067 improves AUC. Keeping the model.
Training on augumented user 128388 1/50 current_auc = 0.7791581204549691
User 128388 AUC after training: 0.7798923177326123
User 128388 improves AUC. Keeping the model.
Training on augumented user 117299 2/50 current_auc = 0.7798923177326123
User 117299 AUC after training: 0.7799855491329479
User 117299 improves AUC. Keeping the model.
Training on augumented user 50193 3/50 current_auc = 0.7799855491329479
User 50193 AUC after training: 0.7800205109080739
User 50193 improves AUC. Keeping the model.
Training on augumented user 122131 4/50 current_auc = 0.7800205109080739
User 122131 AUC after training: 0.7798340481074024
User 122131 does not improve AUC. Reverting changes.
Training on augumented user 88450 5/50 current_auc = 0.7800205109080739
User 88450 AUC after training: 0.779216390080179
User 88450 does not improve AUC. Reverting changes.
Training on augumented user 7926 6/50 current_auc = 0.7800205109080739
User 7926 AUC after training: 0.7799156255826961
User 7926 does not improve AUC. Reverting changes.
Training on augumented user 53856 7/50 current_auc = 0.7800205109080739
User 53856 AUC after training: 0.7799972030579898
User 53856 does not improve AUC. Reverting changes.
Training on augumented user 70036 8/50 current_auc = 0.7800205109080739
User 70036 AUC after training: 0.7800205109080739
User 70036 does not improve AUC. Reverting changes.
Training on augumented user 83766 9/50 current_auc = 0.7800205109080739
User 83766 AUC after training: 0.7798573559574865
User 83766 does not improve AUC. Reverting changes.
Training on augumented user 9058 10/50 current_auc = 0.7800205109080739
User 9058 AUC after training: 0.7796359313816893
User 9058 does not improve AUC. Reverting changes.
Training on augumented user 133472 11/50 current_auc = 0.7800205109080739
User 133472 AUC after training: 0.7793212754055565
User 133472 does not improve AUC. Reverting changes.
Training on augumented user 89732 12/50 current_auc = 0.7800205109080739
User 89732 AUC after training: 0.7797874324072348
User 89732 does not improve AUC. Reverting changes.
Training on augumented user 64117 13/50 current_auc = 0.7800205109080739
User 64117 AUC after training: 0.779717508856983
User 64117 does not improve AUC. Reverting changes.
Training on augumented user 35518 14/50 current_auc = 0.7800205109080739
User 35518 AUC after training: 0.7791464665299273
User 35518 does not improve AUC. Reverting changes.
Training on augumented user 136336 15/50 current_auc = 0.7800205109080739
User 136336 AUC after training: 0.7795310460563117
User 136336 does not improve AUC. Reverting changes.
Training on augumented user 96183 16/50 current_auc = 0.7800205109080739
User 96183 AUC after training: 0.7798107402573187
User 96183 does not improve AUC. Reverting changes.
Training on augumented user 84861 17/50 current_auc = 0.7800205109080739
User 84861 AUC after training: 0.7794960842811858
User 84861 does not improve AUC. Reverting changes.
Training on augumented user 74678 18/50 current_auc = 0.7800205109080739
User 74678 AUC after training: 0.7796475853067313
User 74678 does not improve AUC. Reverting changes.
Training on augumented user 123302 19/50 current_auc = 0.7800205109080739
User 123302 AUC after training: 0.7796009696065634
User 123302 does not improve AUC. Reverting changes.
Training on augumented user 104975 20/50 current_auc = 0.7800205109080739
User 104975 AUC after training: 0.7793562371806825
User 104975 does not improve AUC. Reverting changes.
Training on augumented user 13562 21/50 current_auc = 0.7800205109080739
User 13562 AUC after training: 0.7797524706321088
User 13562 does not improve AUC. Reverting changes.
Training on augumented user 8140 22/50 current_auc = 0.7800205109080739
User 8140 AUC after training: 0.7792746597053887
User 8140 does not improve AUC. Reverting changes.
Training on augumented user 131484 23/50 current_auc = 0.7800205109080739
User 131484 AUC after training: 0.7792630057803467
User 131484 does not improve AUC. Reverting changes.
Training on augumented user 92201 24/50 current_auc = 0.7800205109080739
User 92201 AUC after training: 0.7799505873578221
User 92201 does not improve AUC. Reverting changes.
Training on augumented user 22086 25/50 current_auc = 0.7800205109080739
User 22086 AUC after training: 0.7801603580085774
User 22086 improves AUC. Keeping the model.
Training on augumented user 52522 26/50 current_auc = 0.7801603580085774
User 52522 AUC after training: 0.7805915532351295
User 52522 improves AUC. Keeping the model.
Training on augumented user 4656 27/50 current_auc = 0.7805915532351295
User 4656 AUC after training: 0.7799272795077382
User 4656 does not improve AUC. Reverting changes.
Training on augumented user 1493 28/50 current_auc = 0.7805915532351295
User 1493 AUC after training: 0.7802768972589967
User 1493 does not improve AUC. Reverting changes.
Training on augumented user 117446 29/50 current_auc = 0.7805915532351295
User 117446 AUC after training: 0.7793678911057245
User 117446 does not improve AUC. Reverting changes.
Training on augumented user 92943 30/50 current_auc = 0.7805915532351295
User 92943 AUC after training: 0.7801370501584933
User 92943 does not improve AUC. Reverting changes.
Training on augumented user 10869 31/50 current_auc = 0.7805915532351295
User 10869 AUC after training: 0.7794844303561439
User 10869 does not improve AUC. Reverting changes.
Training on augumented user 26571 32/50 current_auc = 0.7805915532351295
User 26571 AUC after training: 0.7799389334327801
User 26571 does not improve AUC. Reverting changes.
Training on augumented user 98269 33/50 current_auc = 0.7805915532351295
User 98269 AUC after training: 0.780195319783703
User 98269 does not improve AUC. Reverting changes.
Training on augumented user 95403 34/50 current_auc = 0.7805915532351295
User 95403 AUC after training: 0.7800205109080738
User 95403 does not improve AUC. Reverting changes.
Training on augumented user 136434 35/50 current_auc = 0.7805915532351295
User 136434 AUC after training: 0.7803701286593324
User 136434 does not improve AUC. Reverting changes.
Training on augumented user 42470 36/50 current_auc = 0.7805915532351295
User 42470 AUC after training: 0.7795077382062279
User 42470 does not improve AUC. Reverting changes.
Training on augumented user 25554 37/50 current_auc = 0.7805915532351295
User 25554 AUC after training: 0.7798223941823605
User 25554 does not improve AUC. Reverting changes.
Training on augumented user 124769 38/50 current_auc = 0.7805915532351295
User 124769 AUC after training: 0.7799389334327802
User 124769 does not improve AUC. Reverting changes.
Training on augumented user 112533 39/50 current_auc = 0.7805915532351295
User 112533 AUC after training: 0.7798223941823607
User 112533 does not improve AUC. Reverting changes.
Training on augumented user 67491 40/50 current_auc = 0.7805915532351295
User 67491 AUC after training: 0.7797641245571508
User 67491 does not improve AUC. Reverting changes.
Training on augumented user 32230 41/50 current_auc = 0.7805915532351295
User 32230 AUC after training: 0.7799505873578222
User 32230 does not improve AUC. Reverting changes.
Training on augumented user 56655 42/50 current_auc = 0.7805915532351295
User 56655 AUC after training: 0.7801370501584933
User 56655 does not improve AUC. Reverting changes.
Training on augumented user 25359 43/50 current_auc = 0.7805915532351295
User 25359 AUC after training: 0.780230281558829
User 25359 does not improve AUC. Reverting changes.
Training on augumented user 118763 44/50 current_auc = 0.7805915532351295
User 118763 AUC after training: 0.7798806638075704
User 118763 does not improve AUC. Reverting changes.
Training on augumented user 130086 45/50 current_auc = 0.7805915532351295
User 130086 AUC after training: 0.7800554726831996
User 130086 does not improve AUC. Reverting changes.
Training on augumented user 65946 46/50 current_auc = 0.7805915532351295
User 65946 AUC after training: 0.7803934365094163
User 65946 does not improve AUC. Reverting changes.
Training on augumented user 80321 47/50 current_auc = 0.7805915532351295
User 80321 AUC after training: 0.7795776617564796
User 80321 does not improve AUC. Reverting changes.
Training on augumented user 65638 48/50 current_auc = 0.7805915532351295
User 65638 AUC after training: 0.7799389334327802
User 65638 does not improve AUC. Reverting changes.
Training on augumented user 21053 49/50 current_auc = 0.7805915532351295
User 21053 AUC after training: 0.7806498228603393
User 21053 improves AUC. Keeping the model.
[2024-12-02 18:20:23.093342] start test user 71328 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:23.508465] start test user 71328 79/568 recall augumented users by random, augumented_users = [103973, 30789, 89145, 44673, 128540, 31484, 86551, 47875, 94605, 73681, 104346, 20656, 61531, 14695, 10492, 27768, 112003, 55131, 27085, 97931, 16226, 102756, 35391, 59082, 74563, 74890, 19826, 48690, 55307, 97370, 136163, 33116, 55127, 121452, 25978, 112846, 70414, 77213, 27390, 62875, 15289, 138010, 53413, 95794, 107572, 60979, 47254, 96632, 126367, 47638]
[2024-12-02 18:20:23.524785] user = 71328 Cloud 79/568
[2024-12-02 18:20:23.570037] user = 71328 Local 79/568
[2024-12-02 18:20:23.680197] user = 71328 Local+ 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:26.735976] user = 71328 MPDA- 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5641802870063739
Training on augumented user 103973 0/50 current_auc = 0.5641802870063739
User 103973 AUC after training: 0.5640334009899227
User 103973 does not improve AUC. Reverting changes.
Training on augumented user 30789 1/50 current_auc = 0.5641802870063739
User 30789 AUC after training: 0.5640690097211837
User 30789 does not improve AUC. Reverting changes.
Training on augumented user 89145 2/50 current_auc = 0.5641802870063739
User 89145 AUC after training: 0.5639977922586619
User 89145 does not improve AUC. Reverting changes.
Training on augumented user 44673 3/50 current_auc = 0.5641802870063739
User 44673 AUC after training: 0.564282662108749
User 44673 improves AUC. Keeping the model.
Training on augumented user 128540 4/50 current_auc = 0.564282662108749
User 128540 AUC after training: 0.5642559555603034
User 128540 does not improve AUC. Reverting changes.
Training on augumented user 31484 5/50 current_auc = 0.564282662108749
User 31484 AUC after training: 0.5640601075383684
User 31484 does not improve AUC. Reverting changes.
Training on augumented user 86551 6/50 current_auc = 0.564282662108749
User 86551 AUC after training: 0.5636149983976071
User 86551 does not improve AUC. Reverting changes.
Training on augumented user 47875 7/50 current_auc = 0.564282662108749
User 47875 AUC after training: 0.5646832603354341
User 47875 improves AUC. Keeping the model.
Training on augumented user 94605 8/50 current_auc = 0.5646832603354341
User 94605 AUC after training: 0.5646654559698038
User 94605 does not improve AUC. Reverting changes.
Training on augumented user 73681 9/50 current_auc = 0.5646832603354341
User 73681 AUC after training: 0.5650482498308584
User 73681 improves AUC. Keeping the model.
Training on augumented user 104346 10/50 current_auc = 0.5650482498308584
User 104346 AUC after training: 0.5649859345511519
User 104346 does not improve AUC. Reverting changes.
Training on augumented user 20656 11/50 current_auc = 0.5650482498308584
User 20656 AUC after training: 0.5650838585621194
User 20656 improves AUC. Keeping the model.
Training on augumented user 61531 12/50 current_auc = 0.5650838585621194
User 61531 AUC after training: 0.5649592280027063
User 61531 does not improve AUC. Reverting changes.
Training on augumented user 14695 13/50 current_auc = 0.5650838585621194
User 14695 AUC after training: 0.5651550760246412
User 14695 improves AUC. Keeping the model.
Training on augumented user 10492 14/50 current_auc = 0.5651550760246412
User 10492 AUC after training: 0.5656357938966634
User 10492 improves AUC. Keeping the model.
Training on augumented user 27768 15/50 current_auc = 0.5656357938966634
User 27768 AUC after training: 0.5655912829825873
User 27768 does not improve AUC. Reverting changes.
Training on augumented user 112003 16/50 current_auc = 0.5656357938966634
User 112003 AUC after training: 0.5656357938966634
User 112003 does not improve AUC. Reverting changes.
Training on augumented user 55131 17/50 current_auc = 0.5656357938966634
User 55131 AUC after training: 0.5651417227504184
User 55131 does not improve AUC. Reverting changes.
Training on augumented user 27085 18/50 current_auc = 0.5656357938966634
User 27085 AUC after training: 0.5654043371434676
User 27085 does not improve AUC. Reverting changes.
Training on augumented user 97931 19/50 current_auc = 0.5656357938966634
User 97931 AUC after training: 0.5654043371434676
User 97931 does not improve AUC. Reverting changes.
Training on augumented user 16226 20/50 current_auc = 0.5656357938966634
User 16226 AUC after training: 0.5655823807997721
User 16226 does not improve AUC. Reverting changes.
Training on augumented user 102756 21/50 current_auc = 0.5656357938966634
User 102756 AUC after training: 0.5659829790264572
User 102756 improves AUC. Keeping the model.
Training on augumented user 35391 22/50 current_auc = 0.5659829790264572
User 35391 AUC after training: 0.5657960331873375
User 35391 does not improve AUC. Reverting changes.
Training on augumented user 59082 23/50 current_auc = 0.5659829790264572
User 59082 AUC after training: 0.5651728803902717
User 59082 does not improve AUC. Reverting changes.
Training on augumented user 74563 24/50 current_auc = 0.5659829790264572
User 74563 AUC after training: 0.5660274899405334
User 74563 improves AUC. Keeping the model.
Training on augumented user 74890 25/50 current_auc = 0.5660274899405334
User 74890 AUC after training: 0.5661788270483923
User 74890 improves AUC. Keeping the model.
Training on augumented user 19826 26/50 current_auc = 0.5661788270483923
User 19826 AUC after training: 0.566009685574903
User 19826 does not improve AUC. Reverting changes.
Training on augumented user 48690 27/50 current_auc = 0.5661788270483923
User 48690 AUC after training: 0.5648880105401844
User 48690 does not improve AUC. Reverting changes.
Training on augumented user 55307 28/50 current_auc = 0.5661788270483923
User 55307 AUC after training: 0.5662767510593597
User 55307 improves AUC. Keeping the model.
Training on augumented user 97370 29/50 current_auc = 0.5662767510593597
User 97370 AUC after training: 0.566285653242175
User 97370 improves AUC. Keeping the model.
Training on augumented user 136163 30/50 current_auc = 0.566285653242175
User 136163 AUC after training: 0.5660007833920877
User 136163 does not improve AUC. Reverting changes.
Training on augumented user 33116 31/50 current_auc = 0.566285653242175
User 33116 AUC after training: 0.5656446960794788
User 33116 does not improve AUC. Reverting changes.
Training on augumented user 55127 32/50 current_auc = 0.566285653242175
User 55127 AUC after training: 0.5661076095858704
User 55127 does not improve AUC. Reverting changes.
Training on augumented user 121452 33/50 current_auc = 0.566285653242175
User 121452 AUC after training: 0.5648613039917387
User 121452 does not improve AUC. Reverting changes.
Training on augumented user 25978 34/50 current_auc = 0.566285653242175
User 25978 AUC after training: 0.5654755546059893
User 25978 does not improve AUC. Reverting changes.
Training on augumented user 112846 35/50 current_auc = 0.566285653242175
User 112846 AUC after training: 0.5656001851654026
User 112846 does not improve AUC. Reverting changes.
Training on augumented user 70414 36/50 current_auc = 0.566285653242175
User 70414 AUC after training: 0.565617989531033
User 70414 does not improve AUC. Reverting changes.
Training on augumented user 77213 37/50 current_auc = 0.566285653242175
User 77213 AUC after training: 0.5647188690666951
User 77213 does not improve AUC. Reverting changes.
Training on augumented user 27390 38/50 current_auc = 0.566285653242175
User 27390 AUC after training: 0.5660007833920877
User 27390 does not improve AUC. Reverting changes.
Training on augumented user 62875 39/50 current_auc = 0.566285653242175
User 62875 AUC after training: 0.5659562724780116
User 62875 does not improve AUC. Reverting changes.
Training on augumented user 15289 40/50 current_auc = 0.566285653242175
User 15289 AUC after training: 0.565778228821707
User 15289 does not improve AUC. Reverting changes.
Training on augumented user 138010 41/50 current_auc = 0.566285653242175
User 138010 AUC after training: 0.5661165117686857
User 138010 does not improve AUC. Reverting changes.
Training on augumented user 53413 42/50 current_auc = 0.566285653242175
User 53413 AUC after training: 0.5644696079478688
User 53413 does not improve AUC. Reverting changes.
Training on augumented user 95794 43/50 current_auc = 0.566285653242175
User 95794 AUC after training: 0.5647455756151408
User 95794 does not improve AUC. Reverting changes.
Training on augumented user 107572 44/50 current_auc = 0.566285653242175
User 107572 AUC after training: 0.5658761528326746
User 107572 does not improve AUC. Reverting changes.
Training on augumented user 60979 45/50 current_auc = 0.566285653242175
User 60979 AUC after training: 0.5654043371434676
User 60979 does not improve AUC. Reverting changes.
Training on augumented user 47254 46/50 current_auc = 0.566285653242175
User 47254 AUC after training: 0.5658761528326746
User 47254 does not improve AUC. Reverting changes.
Training on augumented user 96632 47/50 current_auc = 0.566285653242175
User 96632 AUC after training: 0.5660809030374248
User 96632 does not improve AUC. Reverting changes.
Training on augumented user 126367 48/50 current_auc = 0.566285653242175
User 126367 AUC after training: 0.565893957198305
User 126367 does not improve AUC. Reverting changes.
Training on augumented user 47638 49/50 current_auc = 0.566285653242175
User 47638 AUC after training: 0.5653776305950219
User 47638 does not improve AUC. Reverting changes.
[2024-12-02 18:21:02.402143] start test user 71333 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:03.117107] start test user 71333 80/568 recall augumented users by random, augumented_users = [20775, 105262, 20452, 51786, 88582, 35669, 96854, 105653, 39661, 95590, 63568, 118175, 107292, 79587, 101602, 7406, 133913, 121727, 34515, 4450, 15240, 65095, 29402, 127499, 13558, 94761, 24611, 72070, 107438, 62441, 88954, 15963, 79959, 133431, 20678, 60600, 52660, 125090, 134177, 18425, 103399, 132465, 110331, 20322, 92612, 31061, 6052, 90414, 120639, 39556]
[2024-12-02 18:21:03.131744] user = 71333 Cloud 80/568
[2024-12-02 18:21:03.146670] user = 71333 Local 80/568
[2024-12-02 18:21:03.242531] user = 71333 Local+ 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:05.955243] user = 71333 MPDA- 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6583333333333333
Training on augumented user 20775 0/50 current_auc = 0.6583333333333333
User 20775 AUC after training: 0.6583333333333333
User 20775 does not improve AUC. Reverting changes.
Training on augumented user 105262 1/50 current_auc = 0.6583333333333333
User 105262 AUC after training: 0.659375
User 105262 improves AUC. Keeping the model.
Training on augumented user 20452 2/50 current_auc = 0.659375
User 20452 AUC after training: 0.659375
User 20452 does not improve AUC. Reverting changes.
Training on augumented user 51786 3/50 current_auc = 0.659375
User 51786 AUC after training: 0.6588541666666666
User 51786 does not improve AUC. Reverting changes.
Training on augumented user 88582 4/50 current_auc = 0.659375
User 88582 AUC after training: 0.6588541666666666
User 88582 does not improve AUC. Reverting changes.
Training on augumented user 35669 5/50 current_auc = 0.659375
User 35669 AUC after training: 0.65625
User 35669 does not improve AUC. Reverting changes.
Training on augumented user 96854 6/50 current_auc = 0.659375
User 96854 AUC after training: 0.6593749999999999
User 96854 does not improve AUC. Reverting changes.
Training on augumented user 105653 7/50 current_auc = 0.659375
User 105653 AUC after training: 0.6583333333333333
User 105653 does not improve AUC. Reverting changes.
Training on augumented user 39661 8/50 current_auc = 0.659375
User 39661 AUC after training: 0.6588541666666666
User 39661 does not improve AUC. Reverting changes.
Training on augumented user 95590 9/50 current_auc = 0.659375
User 95590 AUC after training: 0.6583333333333333
User 95590 does not improve AUC. Reverting changes.
Training on augumented user 63568 10/50 current_auc = 0.659375
User 63568 AUC after training: 0.6578125
User 63568 does not improve AUC. Reverting changes.
Training on augumented user 118175 11/50 current_auc = 0.659375
User 118175 AUC after training: 0.6583333333333333
User 118175 does not improve AUC. Reverting changes.
Training on augumented user 107292 12/50 current_auc = 0.659375
User 107292 AUC after training: 0.6588541666666666
User 107292 does not improve AUC. Reverting changes.
Training on augumented user 79587 13/50 current_auc = 0.659375
User 79587 AUC after training: 0.6578125
User 79587 does not improve AUC. Reverting changes.
Training on augumented user 101602 14/50 current_auc = 0.659375
User 101602 AUC after training: 0.6588541666666667
User 101602 does not improve AUC. Reverting changes.
Training on augumented user 7406 15/50 current_auc = 0.659375
User 7406 AUC after training: 0.6593749999999999
User 7406 does not improve AUC. Reverting changes.
Training on augumented user 133913 16/50 current_auc = 0.659375
User 133913 AUC after training: 0.6588541666666666
User 133913 does not improve AUC. Reverting changes.
Training on augumented user 121727 17/50 current_auc = 0.659375
User 121727 AUC after training: 0.6604166666666667
User 121727 improves AUC. Keeping the model.
Training on augumented user 34515 18/50 current_auc = 0.6604166666666667
User 34515 AUC after training: 0.659375
User 34515 does not improve AUC. Reverting changes.
Training on augumented user 4450 19/50 current_auc = 0.6604166666666667
User 4450 AUC after training: 0.6583333333333333
User 4450 does not improve AUC. Reverting changes.
Training on augumented user 15240 20/50 current_auc = 0.6604166666666667
User 15240 AUC after training: 0.659375
User 15240 does not improve AUC. Reverting changes.
Training on augumented user 65095 21/50 current_auc = 0.6604166666666667
User 65095 AUC after training: 0.6604166666666667
User 65095 does not improve AUC. Reverting changes.
Training on augumented user 29402 22/50 current_auc = 0.6604166666666667
User 29402 AUC after training: 0.6604166666666667
User 29402 does not improve AUC. Reverting changes.
Training on augumented user 127499 23/50 current_auc = 0.6604166666666667
User 127499 AUC after training: 0.6609375000000001
User 127499 improves AUC. Keeping the model.
Training on augumented user 13558 24/50 current_auc = 0.6609375000000001
User 13558 AUC after training: 0.6598958333333333
User 13558 does not improve AUC. Reverting changes.
Training on augumented user 94761 25/50 current_auc = 0.6609375000000001
User 94761 AUC after training: 0.6588541666666666
User 94761 does not improve AUC. Reverting changes.
Training on augumented user 24611 26/50 current_auc = 0.6609375000000001
User 24611 AUC after training: 0.6598958333333333
User 24611 does not improve AUC. Reverting changes.
Training on augumented user 72070 27/50 current_auc = 0.6609375000000001
User 72070 AUC after training: 0.6598958333333333
User 72070 does not improve AUC. Reverting changes.
Training on augumented user 107438 28/50 current_auc = 0.6609375000000001
User 107438 AUC after training: 0.6604166666666667
User 107438 does not improve AUC. Reverting changes.
Training on augumented user 62441 29/50 current_auc = 0.6609375000000001
User 62441 AUC after training: 0.6604166666666667
User 62441 does not improve AUC. Reverting changes.
Training on augumented user 88954 30/50 current_auc = 0.6609375000000001
User 88954 AUC after training: 0.6604166666666667
User 88954 does not improve AUC. Reverting changes.
Training on augumented user 15963 31/50 current_auc = 0.6609375000000001
User 15963 AUC after training: 0.6593749999999999
User 15963 does not improve AUC. Reverting changes.
Training on augumented user 79959 32/50 current_auc = 0.6609375000000001
User 79959 AUC after training: 0.6598958333333333
User 79959 does not improve AUC. Reverting changes.
Training on augumented user 133431 33/50 current_auc = 0.6609375000000001
User 133431 AUC after training: 0.6598958333333333
User 133431 does not improve AUC. Reverting changes.
Training on augumented user 20678 34/50 current_auc = 0.6609375000000001
User 20678 AUC after training: 0.6598958333333333
User 20678 does not improve AUC. Reverting changes.
Training on augumented user 60600 35/50 current_auc = 0.6609375000000001
User 60600 AUC after training: 0.6604166666666667
User 60600 does not improve AUC. Reverting changes.
Training on augumented user 52660 36/50 current_auc = 0.6609375000000001
User 52660 AUC after training: 0.659375
User 52660 does not improve AUC. Reverting changes.
Training on augumented user 125090 37/50 current_auc = 0.6609375000000001
User 125090 AUC after training: 0.6588541666666666
User 125090 does not improve AUC. Reverting changes.
Training on augumented user 134177 38/50 current_auc = 0.6609375000000001
User 134177 AUC after training: 0.6604166666666667
User 134177 does not improve AUC. Reverting changes.
Training on augumented user 18425 39/50 current_auc = 0.6609375000000001
User 18425 AUC after training: 0.659375
User 18425 does not improve AUC. Reverting changes.
Training on augumented user 103399 40/50 current_auc = 0.6609375000000001
User 103399 AUC after training: 0.659375
User 103399 does not improve AUC. Reverting changes.
Training on augumented user 132465 41/50 current_auc = 0.6609375000000001
User 132465 AUC after training: 0.659375
User 132465 does not improve AUC. Reverting changes.
Training on augumented user 110331 42/50 current_auc = 0.6609375000000001
User 110331 AUC after training: 0.6604166666666667
User 110331 does not improve AUC. Reverting changes.
Training on augumented user 20322 43/50 current_auc = 0.6609375000000001
User 20322 AUC after training: 0.6609375000000001
User 20322 does not improve AUC. Reverting changes.
Training on augumented user 92612 44/50 current_auc = 0.6609375000000001
User 92612 AUC after training: 0.6598958333333333
User 92612 does not improve AUC. Reverting changes.
Training on augumented user 31061 45/50 current_auc = 0.6609375000000001
User 31061 AUC after training: 0.6604166666666667
User 31061 does not improve AUC. Reverting changes.
Training on augumented user 6052 46/50 current_auc = 0.6609375000000001
User 6052 AUC after training: 0.6598958333333333
User 6052 does not improve AUC. Reverting changes.
Training on augumented user 90414 47/50 current_auc = 0.6609375000000001
User 90414 AUC after training: 0.659375
User 90414 does not improve AUC. Reverting changes.
Training on augumented user 120639 48/50 current_auc = 0.6609375000000001
User 120639 AUC after training: 0.6598958333333333
User 120639 does not improve AUC. Reverting changes.
Training on augumented user 39556 49/50 current_auc = 0.6609375000000001
User 39556 AUC after training: 0.6588541666666666
User 39556 does not improve AUC. Reverting changes.
[2024-12-02 18:21:36.316755] start test user 71374 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:36.937671] start test user 71374 81/568 recall augumented users by random, augumented_users = [105920, 56432, 48543, 33541, 122562, 87575, 111935, 32892, 60005, 72089, 34818, 52792, 134267, 14620, 88623, 39094, 114495, 131549, 105755, 70864, 68975, 326, 77096, 28543, 115903, 6155, 39015, 20849, 44925, 39894, 118917, 20583, 130466, 129407, 117032, 30608, 102137, 77797, 129049, 127459, 49178, 92046, 116789, 113558, 107569, 92499, 66853, 24456, 108219, 90480]
[2024-12-02 18:21:36.953137] user = 71374 Cloud 81/568
[2024-12-02 18:21:36.972103] user = 71374 Local 81/568
[2024-12-02 18:21:37.039477] user = 71374 Local+ 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:39.303113] user = 71374 MPDA- 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5956387362637362
Training on augumented user 105920 0/50 current_auc = 0.5956387362637362
User 105920 AUC after training: 0.595066391941392
User 105920 does not improve AUC. Reverting changes.
Training on augumented user 56432 1/50 current_auc = 0.5956387362637362
User 56432 AUC after training: 0.595867673992674
User 56432 improves AUC. Keeping the model.
Training on augumented user 48543 2/50 current_auc = 0.595867673992674
User 48543 AUC after training: 0.5962110805860806
User 48543 improves AUC. Keeping the model.
Training on augumented user 33541 3/50 current_auc = 0.5962110805860806
User 33541 AUC after training: 0.5967261904761906
User 33541 improves AUC. Keeping the model.
Training on augumented user 122562 4/50 current_auc = 0.5967261904761906
User 122562 AUC after training: 0.5975274725274725
User 122562 improves AUC. Keeping the model.
Training on augumented user 87575 5/50 current_auc = 0.5975274725274725
User 87575 AUC after training: 0.5971840659340659
User 87575 does not improve AUC. Reverting changes.
Training on augumented user 111935 6/50 current_auc = 0.5975274725274725
User 111935 AUC after training: 0.5976419413919415
User 111935 improves AUC. Keeping the model.
Training on augumented user 32892 7/50 current_auc = 0.5976419413919415
User 32892 AUC after training: 0.5973557692307693
User 32892 does not improve AUC. Reverting changes.
Training on augumented user 60005 8/50 current_auc = 0.5976419413919415
User 60005 AUC after training: 0.59375
User 60005 does not improve AUC. Reverting changes.
Training on augumented user 72089 9/50 current_auc = 0.5976419413919415
User 72089 AUC after training: 0.5971840659340659
User 72089 does not improve AUC. Reverting changes.
Training on augumented user 34818 10/50 current_auc = 0.5976419413919415
User 34818 AUC after training: 0.5969551282051282
User 34818 does not improve AUC. Reverting changes.
Training on augumented user 52792 11/50 current_auc = 0.5976419413919415
User 52792 AUC after training: 0.5976991758241758
User 52792 improves AUC. Keeping the model.
Training on augumented user 134267 12/50 current_auc = 0.5976991758241758
User 134267 AUC after training: 0.597470238095238
User 134267 does not improve AUC. Reverting changes.
Training on augumented user 14620 13/50 current_auc = 0.5976991758241758
User 14620 AUC after training: 0.5978136446886447
User 14620 improves AUC. Keeping the model.
Training on augumented user 88623 14/50 current_auc = 0.5978136446886447
User 88623 AUC after training: 0.5966689560439561
User 88623 does not improve AUC. Reverting changes.
Training on augumented user 39094 15/50 current_auc = 0.5978136446886447
User 39094 AUC after training: 0.5973557692307693
User 39094 does not improve AUC. Reverting changes.
Training on augumented user 114495 16/50 current_auc = 0.5978136446886447
User 114495 AUC after training: 0.597470238095238
User 114495 does not improve AUC. Reverting changes.
Training on augumented user 131549 17/50 current_auc = 0.5978136446886447
User 131549 AUC after training: 0.5971268315018315
User 131549 does not improve AUC. Reverting changes.
Training on augumented user 105755 18/50 current_auc = 0.5978136446886447
User 105755 AUC after training: 0.597470238095238
User 105755 does not improve AUC. Reverting changes.
Training on augumented user 70864 19/50 current_auc = 0.5978136446886447
User 70864 AUC after training: 0.597470238095238
User 70864 does not improve AUC. Reverting changes.
Training on augumented user 68975 20/50 current_auc = 0.5978136446886447
User 68975 AUC after training: 0.596783424908425
User 68975 does not improve AUC. Reverting changes.
Training on augumented user 326 21/50 current_auc = 0.5978136446886447
User 326 AUC after training: 0.5973557692307693
User 326 does not improve AUC. Reverting changes.
Training on augumented user 77096 22/50 current_auc = 0.5978136446886447
User 77096 AUC after training: 0.5972413003663003
User 77096 does not improve AUC. Reverting changes.
Training on augumented user 28543 23/50 current_auc = 0.5978136446886447
User 28543 AUC after training: 0.5980425824175825
User 28543 improves AUC. Keeping the model.
Training on augumented user 115903 24/50 current_auc = 0.5980425824175825
User 115903 AUC after training: 0.5971268315018315
User 115903 does not improve AUC. Reverting changes.
Training on augumented user 6155 25/50 current_auc = 0.5980425824175825
User 6155 AUC after training: 0.5978708791208791
User 6155 does not improve AUC. Reverting changes.
Training on augumented user 39015 26/50 current_auc = 0.5980425824175825
User 39015 AUC after training: 0.5971268315018315
User 39015 does not improve AUC. Reverting changes.
Training on augumented user 20849 27/50 current_auc = 0.5980425824175825
User 20849 AUC after training: 0.595867673992674
User 20849 does not improve AUC. Reverting changes.
Training on augumented user 44925 28/50 current_auc = 0.5980425824175825
User 44925 AUC after training: 0.5982142857142857
User 44925 improves AUC. Keeping the model.
Training on augumented user 39894 29/50 current_auc = 0.5982142857142857
User 39894 AUC after training: 0.5982142857142857
User 39894 does not improve AUC. Reverting changes.
Training on augumented user 118917 30/50 current_auc = 0.5982142857142857
User 118917 AUC after training: 0.5974702380952381
User 118917 does not improve AUC. Reverting changes.
Training on augumented user 20583 31/50 current_auc = 0.5982142857142857
User 20583 AUC after training: 0.597985347985348
User 20583 does not improve AUC. Reverting changes.
Training on augumented user 130466 32/50 current_auc = 0.5982142857142857
User 130466 AUC after training: 0.5976419413919414
User 130466 does not improve AUC. Reverting changes.
Training on augumented user 129407 33/50 current_auc = 0.5982142857142857
User 129407 AUC after training: 0.5975274725274725
User 129407 does not improve AUC. Reverting changes.
Training on augumented user 117032 34/50 current_auc = 0.5982142857142857
User 117032 AUC after training: 0.5958104395604396
User 117032 does not improve AUC. Reverting changes.
Training on augumented user 30608 35/50 current_auc = 0.5982142857142857
User 30608 AUC after training: 0.5976991758241758
User 30608 does not improve AUC. Reverting changes.
Training on augumented user 102137 36/50 current_auc = 0.5982142857142857
User 102137 AUC after training: 0.5977564102564102
User 102137 does not improve AUC. Reverting changes.
Training on augumented user 77797 37/50 current_auc = 0.5982142857142857
User 77797 AUC after training: 0.5980425824175825
User 77797 does not improve AUC. Reverting changes.
Training on augumented user 129049 38/50 current_auc = 0.5982142857142857
User 129049 AUC after training: 0.595867673992674
User 129049 does not improve AUC. Reverting changes.
Training on augumented user 127459 39/50 current_auc = 0.5982142857142857
User 127459 AUC after training: 0.5962110805860806
User 127459 does not improve AUC. Reverting changes.
Training on augumented user 49178 40/50 current_auc = 0.5982142857142857
User 49178 AUC after training: 0.597985347985348
User 49178 does not improve AUC. Reverting changes.
Training on augumented user 92046 41/50 current_auc = 0.5982142857142857
User 92046 AUC after training: 0.5967834249084248
User 92046 does not improve AUC. Reverting changes.
Training on augumented user 116789 42/50 current_auc = 0.5982142857142857
User 116789 AUC after training: 0.5989010989010989
User 116789 improves AUC. Keeping the model.
Training on augumented user 113558 43/50 current_auc = 0.5989010989010989
User 113558 AUC after training: 0.5973557692307693
User 113558 does not improve AUC. Reverting changes.
Training on augumented user 107569 44/50 current_auc = 0.5989010989010989
User 107569 AUC after training: 0.5985576923076923
User 107569 does not improve AUC. Reverting changes.
Training on augumented user 92499 45/50 current_auc = 0.5989010989010989
User 92499 AUC after training: 0.5964972527472527
User 92499 does not improve AUC. Reverting changes.
Training on augumented user 66853 46/50 current_auc = 0.5989010989010989
User 66853 AUC after training: 0.5970123626373627
User 66853 does not improve AUC. Reverting changes.
Training on augumented user 24456 47/50 current_auc = 0.5989010989010989
User 24456 AUC after training: 0.5972985347985348
User 24456 does not improve AUC. Reverting changes.
Training on augumented user 108219 48/50 current_auc = 0.5989010989010989
User 108219 AUC after training: 0.5980998168498168
User 108219 does not improve AUC. Reverting changes.
Training on augumented user 90480 49/50 current_auc = 0.5989010989010989
User 90480 AUC after training: 0.5984432234432234
User 90480 does not improve AUC. Reverting changes.
[2024-12-02 18:22:07.434137] start test user 71413 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:07.988122] start test user 71413 82/568 recall augumented users by random, augumented_users = [61069, 23624, 39392, 133197, 57451, 123460, 37789, 122741, 72507, 28590, 134626, 44102, 94080, 17527, 36108, 21664, 123269, 77828, 134194, 121877, 87311, 33366, 50030, 57926, 67117, 52947, 56306, 89171, 93292, 69763, 68612, 66890, 131622, 121279, 79964, 69438, 130771, 108090, 25417, 25131, 126939, 10529, 108746, 36928, 122959, 1665, 19242, 105581, 102706, 137357]
[2024-12-02 18:22:08.003114] user = 71413 Cloud 82/568
[2024-12-02 18:22:08.013405] user = 71413 Local 82/568
[2024-12-02 18:22:08.056404] user = 71413 Local+ 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:11.391633] user = 71413 MPDA- 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.53125
Training on augumented user 61069 0/50 current_auc = 0.53125
User 61069 AUC after training: 0.53125
User 61069 does not improve AUC. Reverting changes.
Training on augumented user 23624 1/50 current_auc = 0.53125
User 23624 AUC after training: 0.53125
User 23624 does not improve AUC. Reverting changes.
Training on augumented user 39392 2/50 current_auc = 0.53125
User 39392 AUC after training: 0.53125
User 39392 does not improve AUC. Reverting changes.
Training on augumented user 133197 3/50 current_auc = 0.53125
User 133197 AUC after training: 0.53125
User 133197 does not improve AUC. Reverting changes.
Training on augumented user 57451 4/50 current_auc = 0.53125
User 57451 AUC after training: 0.5416666666666667
User 57451 improves AUC. Keeping the model.
Training on augumented user 123460 5/50 current_auc = 0.5416666666666667
User 123460 AUC after training: 0.5416666666666667
User 123460 does not improve AUC. Reverting changes.
Training on augumented user 37789 6/50 current_auc = 0.5416666666666667
User 37789 AUC after training: 0.5416666666666667
User 37789 does not improve AUC. Reverting changes.
Training on augumented user 122741 7/50 current_auc = 0.5416666666666667
User 122741 AUC after training: 0.5416666666666667
User 122741 does not improve AUC. Reverting changes.
Training on augumented user 72507 8/50 current_auc = 0.5416666666666667
User 72507 AUC after training: 0.5416666666666667
User 72507 does not improve AUC. Reverting changes.
Training on augumented user 28590 9/50 current_auc = 0.5416666666666667
User 28590 AUC after training: 0.5416666666666667
User 28590 does not improve AUC. Reverting changes.
Training on augumented user 134626 10/50 current_auc = 0.5416666666666667
User 134626 AUC after training: 0.5416666666666667
User 134626 does not improve AUC. Reverting changes.
Training on augumented user 44102 11/50 current_auc = 0.5416666666666667
User 44102 AUC after training: 0.5416666666666667
User 44102 does not improve AUC. Reverting changes.
Training on augumented user 94080 12/50 current_auc = 0.5416666666666667
User 94080 AUC after training: 0.5416666666666667
User 94080 does not improve AUC. Reverting changes.
Training on augumented user 17527 13/50 current_auc = 0.5416666666666667
User 17527 AUC after training: 0.5416666666666667
User 17527 does not improve AUC. Reverting changes.
Training on augumented user 36108 14/50 current_auc = 0.5416666666666667
User 36108 AUC after training: 0.5416666666666667
User 36108 does not improve AUC. Reverting changes.
Training on augumented user 21664 15/50 current_auc = 0.5416666666666667
User 21664 AUC after training: 0.53125
User 21664 does not improve AUC. Reverting changes.
Training on augumented user 123269 16/50 current_auc = 0.5416666666666667
User 123269 AUC after training: 0.53125
User 123269 does not improve AUC. Reverting changes.
Training on augumented user 77828 17/50 current_auc = 0.5416666666666667
User 77828 AUC after training: 0.5416666666666667
User 77828 does not improve AUC. Reverting changes.
Training on augumented user 134194 18/50 current_auc = 0.5416666666666667
User 134194 AUC after training: 0.5416666666666667
User 134194 does not improve AUC. Reverting changes.
Training on augumented user 121877 19/50 current_auc = 0.5416666666666667
User 121877 AUC after training: 0.5416666666666667
User 121877 does not improve AUC. Reverting changes.
Training on augumented user 87311 20/50 current_auc = 0.5416666666666667
User 87311 AUC after training: 0.5416666666666667
User 87311 does not improve AUC. Reverting changes.
Training on augumented user 33366 21/50 current_auc = 0.5416666666666667
User 33366 AUC after training: 0.5416666666666667
User 33366 does not improve AUC. Reverting changes.
Training on augumented user 50030 22/50 current_auc = 0.5416666666666667
User 50030 AUC after training: 0.5416666666666667
User 50030 does not improve AUC. Reverting changes.
Training on augumented user 57926 23/50 current_auc = 0.5416666666666667
User 57926 AUC after training: 0.5416666666666667
User 57926 does not improve AUC. Reverting changes.
Training on augumented user 67117 24/50 current_auc = 0.5416666666666667
User 67117 AUC after training: 0.5416666666666667
User 67117 does not improve AUC. Reverting changes.
Training on augumented user 52947 25/50 current_auc = 0.5416666666666667
User 52947 AUC after training: 0.5416666666666667
User 52947 does not improve AUC. Reverting changes.
Training on augumented user 56306 26/50 current_auc = 0.5416666666666667
User 56306 AUC after training: 0.5416666666666667
User 56306 does not improve AUC. Reverting changes.
Training on augumented user 89171 27/50 current_auc = 0.5416666666666667
User 89171 AUC after training: 0.5416666666666667
User 89171 does not improve AUC. Reverting changes.
Training on augumented user 93292 28/50 current_auc = 0.5416666666666667
User 93292 AUC after training: 0.5416666666666667
User 93292 does not improve AUC. Reverting changes.
Training on augumented user 69763 29/50 current_auc = 0.5416666666666667
User 69763 AUC after training: 0.5416666666666667
User 69763 does not improve AUC. Reverting changes.
Training on augumented user 68612 30/50 current_auc = 0.5416666666666667
User 68612 AUC after training: 0.5416666666666667
User 68612 does not improve AUC. Reverting changes.
Training on augumented user 66890 31/50 current_auc = 0.5416666666666667
User 66890 AUC after training: 0.5416666666666667
User 66890 does not improve AUC. Reverting changes.
Training on augumented user 131622 32/50 current_auc = 0.5416666666666667
User 131622 AUC after training: 0.5416666666666667
User 131622 does not improve AUC. Reverting changes.
Training on augumented user 121279 33/50 current_auc = 0.5416666666666667
User 121279 AUC after training: 0.5416666666666667
User 121279 does not improve AUC. Reverting changes.
Training on augumented user 79964 34/50 current_auc = 0.5416666666666667
User 79964 AUC after training: 0.5416666666666667
User 79964 does not improve AUC. Reverting changes.
Training on augumented user 69438 35/50 current_auc = 0.5416666666666667
User 69438 AUC after training: 0.5416666666666667
User 69438 does not improve AUC. Reverting changes.
Training on augumented user 130771 36/50 current_auc = 0.5416666666666667
User 130771 AUC after training: 0.5416666666666667
User 130771 does not improve AUC. Reverting changes.
Training on augumented user 108090 37/50 current_auc = 0.5416666666666667
User 108090 AUC after training: 0.5416666666666667
User 108090 does not improve AUC. Reverting changes.
Training on augumented user 25417 38/50 current_auc = 0.5416666666666667
User 25417 AUC after training: 0.5416666666666667
User 25417 does not improve AUC. Reverting changes.
Training on augumented user 25131 39/50 current_auc = 0.5416666666666667
User 25131 AUC after training: 0.5416666666666667
User 25131 does not improve AUC. Reverting changes.
Training on augumented user 126939 40/50 current_auc = 0.5416666666666667
User 126939 AUC after training: 0.5416666666666667
User 126939 does not improve AUC. Reverting changes.
Training on augumented user 10529 41/50 current_auc = 0.5416666666666667
User 10529 AUC after training: 0.5416666666666667
User 10529 does not improve AUC. Reverting changes.
Training on augumented user 108746 42/50 current_auc = 0.5416666666666667
User 108746 AUC after training: 0.5416666666666667
User 108746 does not improve AUC. Reverting changes.
Training on augumented user 36928 43/50 current_auc = 0.5416666666666667
User 36928 AUC after training: 0.5416666666666667
User 36928 does not improve AUC. Reverting changes.
Training on augumented user 122959 44/50 current_auc = 0.5416666666666667
User 122959 AUC after training: 0.5416666666666667
User 122959 does not improve AUC. Reverting changes.
Training on augumented user 1665 45/50 current_auc = 0.5416666666666667
User 1665 AUC after training: 0.5520833333333334
User 1665 improves AUC. Keeping the model.
Training on augumented user 19242 46/50 current_auc = 0.5520833333333334
User 19242 AUC after training: 0.5520833333333334
User 19242 does not improve AUC. Reverting changes.
Training on augumented user 105581 47/50 current_auc = 0.5520833333333334
User 105581 AUC after training: 0.5520833333333334
User 105581 does not improve AUC. Reverting changes.
Training on augumented user 102706 48/50 current_auc = 0.5520833333333334
User 102706 AUC after training: 0.5520833333333334
User 102706 does not improve AUC. Reverting changes.
Training on augumented user 137357 49/50 current_auc = 0.5520833333333334
User 137357 AUC after training: 0.5520833333333334
User 137357 does not improve AUC. Reverting changes.
[2024-12-02 18:22:44.864994] start test user 71421 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:45.406118] start test user 71421 83/568 recall augumented users by random, augumented_users = [71341, 100300, 28045, 9361, 71654, 58573, 78824, 124916, 132030, 67493, 26612, 105533, 36628, 111406, 19288, 130444, 35800, 79442, 82813, 120458, 107035, 111401, 109466, 64726, 65972, 117264, 43675, 137136, 62722, 127257, 123507, 56292, 52562, 53778, 5573, 7857, 50494, 90431, 38710, 74064, 83351, 83525, 76645, 73789, 69850, 109175, 65630, 48043, 73229, 116447]
[2024-12-02 18:22:45.421938] user = 71421 Cloud 83/568
[2024-12-02 18:22:45.432159] user = 71421 Local 83/568
[2024-12-02 18:22:45.478671] user = 71421 Local+ 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:48.112214] user = 71421 MPDA- 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3636363636363637
Training on augumented user 71341 0/50 current_auc = 0.3636363636363637
User 71341 AUC after training: 0.3636363636363637
User 71341 does not improve AUC. Reverting changes.
Training on augumented user 100300 1/50 current_auc = 0.3636363636363637
User 100300 AUC after training: 0.3636363636363637
User 100300 does not improve AUC. Reverting changes.
Training on augumented user 28045 2/50 current_auc = 0.3636363636363637
User 28045 AUC after training: 0.3636363636363637
User 28045 does not improve AUC. Reverting changes.
Training on augumented user 9361 3/50 current_auc = 0.3636363636363637
User 9361 AUC after training: 0.3636363636363637
User 9361 does not improve AUC. Reverting changes.
Training on augumented user 71654 4/50 current_auc = 0.3636363636363637
User 71654 AUC after training: 0.3636363636363637
User 71654 does not improve AUC. Reverting changes.
Training on augumented user 58573 5/50 current_auc = 0.3636363636363637
User 58573 AUC after training: 0.3636363636363637
User 58573 does not improve AUC. Reverting changes.
Training on augumented user 78824 6/50 current_auc = 0.3636363636363637
User 78824 AUC after training: 0.3636363636363637
User 78824 does not improve AUC. Reverting changes.
Training on augumented user 124916 7/50 current_auc = 0.3636363636363637
User 124916 AUC after training: 0.3636363636363637
User 124916 does not improve AUC. Reverting changes.
Training on augumented user 132030 8/50 current_auc = 0.3636363636363637
User 132030 AUC after training: 0.3636363636363637
User 132030 does not improve AUC. Reverting changes.
Training on augumented user 67493 9/50 current_auc = 0.3636363636363637
User 67493 AUC after training: 0.3636363636363637
User 67493 does not improve AUC. Reverting changes.
Training on augumented user 26612 10/50 current_auc = 0.3636363636363637
User 26612 AUC after training: 0.3636363636363637
User 26612 does not improve AUC. Reverting changes.
Training on augumented user 105533 11/50 current_auc = 0.3636363636363637
User 105533 AUC after training: 0.3636363636363637
User 105533 does not improve AUC. Reverting changes.
Training on augumented user 36628 12/50 current_auc = 0.3636363636363637
User 36628 AUC after training: 0.3636363636363637
User 36628 does not improve AUC. Reverting changes.
Training on augumented user 111406 13/50 current_auc = 0.3636363636363637
User 111406 AUC after training: 0.3636363636363637
User 111406 does not improve AUC. Reverting changes.
Training on augumented user 19288 14/50 current_auc = 0.3636363636363637
User 19288 AUC after training: 0.3636363636363637
User 19288 does not improve AUC. Reverting changes.
Training on augumented user 130444 15/50 current_auc = 0.3636363636363637
User 130444 AUC after training: 0.3636363636363637
User 130444 does not improve AUC. Reverting changes.
Training on augumented user 35800 16/50 current_auc = 0.3636363636363637
User 35800 AUC after training: 0.3636363636363637
User 35800 does not improve AUC. Reverting changes.
Training on augumented user 79442 17/50 current_auc = 0.3636363636363637
User 79442 AUC after training: 0.3636363636363637
User 79442 does not improve AUC. Reverting changes.
Training on augumented user 82813 18/50 current_auc = 0.3636363636363637
User 82813 AUC after training: 0.3636363636363637
User 82813 does not improve AUC. Reverting changes.
Training on augumented user 120458 19/50 current_auc = 0.3636363636363637
User 120458 AUC after training: 0.35664335664335667
User 120458 does not improve AUC. Reverting changes.
Training on augumented user 107035 20/50 current_auc = 0.3636363636363637
User 107035 AUC after training: 0.3636363636363637
User 107035 does not improve AUC. Reverting changes.
Training on augumented user 111401 21/50 current_auc = 0.3636363636363637
User 111401 AUC after training: 0.3636363636363637
User 111401 does not improve AUC. Reverting changes.
Training on augumented user 109466 22/50 current_auc = 0.3636363636363637
User 109466 AUC after training: 0.3636363636363637
User 109466 does not improve AUC. Reverting changes.
Training on augumented user 64726 23/50 current_auc = 0.3636363636363637
User 64726 AUC after training: 0.3636363636363637
User 64726 does not improve AUC. Reverting changes.
Training on augumented user 65972 24/50 current_auc = 0.3636363636363637
User 65972 AUC after training: 0.3636363636363637
User 65972 does not improve AUC. Reverting changes.
Training on augumented user 117264 25/50 current_auc = 0.3636363636363637
User 117264 AUC after training: 0.3636363636363637
User 117264 does not improve AUC. Reverting changes.
Training on augumented user 43675 26/50 current_auc = 0.3636363636363637
User 43675 AUC after training: 0.3636363636363637
User 43675 does not improve AUC. Reverting changes.
Training on augumented user 137136 27/50 current_auc = 0.3636363636363637
User 137136 AUC after training: 0.3636363636363637
User 137136 does not improve AUC. Reverting changes.
Training on augumented user 62722 28/50 current_auc = 0.3636363636363637
User 62722 AUC after training: 0.3636363636363637
User 62722 does not improve AUC. Reverting changes.
Training on augumented user 127257 29/50 current_auc = 0.3636363636363637
User 127257 AUC after training: 0.3636363636363637
User 127257 does not improve AUC. Reverting changes.
Training on augumented user 123507 30/50 current_auc = 0.3636363636363637
User 123507 AUC after training: 0.35664335664335667
User 123507 does not improve AUC. Reverting changes.
Training on augumented user 56292 31/50 current_auc = 0.3636363636363637
User 56292 AUC after training: 0.3636363636363637
User 56292 does not improve AUC. Reverting changes.
Training on augumented user 52562 32/50 current_auc = 0.3636363636363637
User 52562 AUC after training: 0.3636363636363637
User 52562 does not improve AUC. Reverting changes.
Training on augumented user 53778 33/50 current_auc = 0.3636363636363637
User 53778 AUC after training: 0.3636363636363637
User 53778 does not improve AUC. Reverting changes.
Training on augumented user 5573 34/50 current_auc = 0.3636363636363637
User 5573 AUC after training: 0.3636363636363637
User 5573 does not improve AUC. Reverting changes.
Training on augumented user 7857 35/50 current_auc = 0.3636363636363637
User 7857 AUC after training: 0.3636363636363637
User 7857 does not improve AUC. Reverting changes.
Training on augumented user 50494 36/50 current_auc = 0.3636363636363637
User 50494 AUC after training: 0.3636363636363637
User 50494 does not improve AUC. Reverting changes.
Training on augumented user 90431 37/50 current_auc = 0.3636363636363637
User 90431 AUC after training: 0.3636363636363637
User 90431 does not improve AUC. Reverting changes.
Training on augumented user 38710 38/50 current_auc = 0.3636363636363637
User 38710 AUC after training: 0.3636363636363637
User 38710 does not improve AUC. Reverting changes.
Training on augumented user 74064 39/50 current_auc = 0.3636363636363637
User 74064 AUC after training: 0.3636363636363637
User 74064 does not improve AUC. Reverting changes.
Training on augumented user 83351 40/50 current_auc = 0.3636363636363637
User 83351 AUC after training: 0.3636363636363637
User 83351 does not improve AUC. Reverting changes.
Training on augumented user 83525 41/50 current_auc = 0.3636363636363637
User 83525 AUC after training: 0.3636363636363637
User 83525 does not improve AUC. Reverting changes.
Training on augumented user 76645 42/50 current_auc = 0.3636363636363637
User 76645 AUC after training: 0.3636363636363637
User 76645 does not improve AUC. Reverting changes.
Training on augumented user 73789 43/50 current_auc = 0.3636363636363637
User 73789 AUC after training: 0.3636363636363637
User 73789 does not improve AUC. Reverting changes.
Training on augumented user 69850 44/50 current_auc = 0.3636363636363637
User 69850 AUC after training: 0.3636363636363637
User 69850 does not improve AUC. Reverting changes.
Training on augumented user 109175 45/50 current_auc = 0.3636363636363637
User 109175 AUC after training: 0.3636363636363637
User 109175 does not improve AUC. Reverting changes.
Training on augumented user 65630 46/50 current_auc = 0.3636363636363637
User 65630 AUC after training: 0.3636363636363637
User 65630 does not improve AUC. Reverting changes.
Training on augumented user 48043 47/50 current_auc = 0.3636363636363637
User 48043 AUC after training: 0.35664335664335667
User 48043 does not improve AUC. Reverting changes.
Training on augumented user 73229 48/50 current_auc = 0.3636363636363637
User 73229 AUC after training: 0.35664335664335667
User 73229 does not improve AUC. Reverting changes.
Training on augumented user 116447 49/50 current_auc = 0.3636363636363637
User 116447 AUC after training: 0.3636363636363637
User 116447 does not improve AUC. Reverting changes.
[2024-12-02 18:23:18.083877] start test user 71432 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:18.951750] start test user 71432 84/568 recall augumented users by random, augumented_users = [51625, 7529, 52189, 89343, 100747, 10685, 109449, 9799, 78300, 43029, 47238, 13841, 60579, 81978, 107560, 62107, 42857, 22315, 38662, 115915, 110844, 127944, 50371, 10046, 129602, 19275, 30129, 23285, 31523, 72302, 16713, 82790, 86874, 77277, 12017, 26971, 25870, 73048, 109237, 71907, 24928, 8559, 33133, 97548, 79922, 4410, 76890, 17105, 67016, 92047]
[2024-12-02 18:23:18.969676] user = 71432 Cloud 84/568
[2024-12-02 18:23:18.990294] user = 71432 Local 84/568
[2024-12-02 18:23:19.081885] user = 71432 Local+ 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:22.185324] user = 71432 MPDA- 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6086125808348031
Training on augumented user 51625 0/50 current_auc = 0.6086125808348031
User 51625 AUC after training: 0.6092004703115814
User 51625 improves AUC. Keeping the model.
Training on augumented user 7529 1/50 current_auc = 0.6092004703115814
User 7529 AUC after training: 0.6090534979423868
User 7529 does not improve AUC. Reverting changes.
Training on augumented user 52189 2/50 current_auc = 0.6092004703115814
User 52189 AUC after training: 0.6078777189888301
User 52189 does not improve AUC. Reverting changes.
Training on augumented user 89343 3/50 current_auc = 0.6092004703115814
User 89343 AUC after training: 0.6089065255731922
User 89343 does not improve AUC. Reverting changes.
Training on augumented user 100747 4/50 current_auc = 0.6092004703115814
User 100747 AUC after training: 0.6090534979423867
User 100747 does not improve AUC. Reverting changes.
Training on augumented user 10685 5/50 current_auc = 0.6092004703115814
User 10685 AUC after training: 0.6086125808348031
User 10685 does not improve AUC. Reverting changes.
Training on augumented user 109449 6/50 current_auc = 0.6092004703115814
User 109449 AUC after training: 0.6087595532039975
User 109449 does not improve AUC. Reverting changes.
Training on augumented user 9799 7/50 current_auc = 0.6092004703115814
User 9799 AUC after training: 0.6093474426807761
User 9799 improves AUC. Keeping the model.
Training on augumented user 78300 8/50 current_auc = 0.6093474426807761
User 78300 AUC after training: 0.6094944150499706
User 78300 improves AUC. Keeping the model.
Training on augumented user 43029 9/50 current_auc = 0.6094944150499706
User 43029 AUC after training: 0.6094944150499706
User 43029 does not improve AUC. Reverting changes.
Training on augumented user 47238 10/50 current_auc = 0.6094944150499706
User 47238 AUC after training: 0.6103762492651381
User 47238 improves AUC. Keeping the model.
Training on augumented user 13841 11/50 current_auc = 0.6103762492651381
User 13841 AUC after training: 0.6106701940035273
User 13841 improves AUC. Keeping the model.
Training on augumented user 60579 12/50 current_auc = 0.6106701940035273
User 60579 AUC after training: 0.6109641387419166
User 60579 improves AUC. Keeping the model.
Training on augumented user 81978 13/50 current_auc = 0.6109641387419166
User 81978 AUC after training: 0.6105232216343328
User 81978 does not improve AUC. Reverting changes.
Training on augumented user 107560 14/50 current_auc = 0.6109641387419166
User 107560 AUC after training: 0.6106701940035274
User 107560 does not improve AUC. Reverting changes.
Training on augumented user 62107 15/50 current_auc = 0.6109641387419166
User 62107 AUC after training: 0.6106701940035273
User 62107 does not improve AUC. Reverting changes.
Training on augumented user 42857 16/50 current_auc = 0.6109641387419166
User 42857 AUC after training: 0.6103762492651381
User 42857 does not improve AUC. Reverting changes.
Training on augumented user 22315 17/50 current_auc = 0.6109641387419166
User 22315 AUC after training: 0.6100823045267489
User 22315 does not improve AUC. Reverting changes.
Training on augumented user 38662 18/50 current_auc = 0.6109641387419166
User 38662 AUC after training: 0.6102292768959436
User 38662 does not improve AUC. Reverting changes.
Training on augumented user 115915 19/50 current_auc = 0.6109641387419166
User 115915 AUC after training: 0.6097883597883598
User 115915 does not improve AUC. Reverting changes.
Training on augumented user 110844 20/50 current_auc = 0.6109641387419166
User 110844 AUC after training: 0.6097883597883598
User 110844 does not improve AUC. Reverting changes.
Training on augumented user 127944 21/50 current_auc = 0.6109641387419166
User 127944 AUC after training: 0.6084656084656085
User 127944 does not improve AUC. Reverting changes.
Training on augumented user 50371 22/50 current_auc = 0.6109641387419166
User 50371 AUC after training: 0.6103762492651381
User 50371 does not improve AUC. Reverting changes.
Training on augumented user 10046 23/50 current_auc = 0.6109641387419166
User 10046 AUC after training: 0.6106701940035273
User 10046 does not improve AUC. Reverting changes.
Training on augumented user 129602 24/50 current_auc = 0.6109641387419166
User 129602 AUC after training: 0.6102292768959435
User 129602 does not improve AUC. Reverting changes.
Training on augumented user 19275 25/50 current_auc = 0.6109641387419166
User 19275 AUC after training: 0.6105232216343328
User 19275 does not improve AUC. Reverting changes.
Training on augumented user 30129 26/50 current_auc = 0.6109641387419166
User 30129 AUC after training: 0.6103762492651381
User 30129 does not improve AUC. Reverting changes.
Training on augumented user 23285 27/50 current_auc = 0.6109641387419166
User 23285 AUC after training: 0.6105232216343328
User 23285 does not improve AUC. Reverting changes.
Training on augumented user 31523 28/50 current_auc = 0.6109641387419166
User 31523 AUC after training: 0.6103762492651381
User 31523 does not improve AUC. Reverting changes.
Training on augumented user 72302 29/50 current_auc = 0.6109641387419166
User 72302 AUC after training: 0.6105232216343328
User 72302 does not improve AUC. Reverting changes.
Training on augumented user 16713 30/50 current_auc = 0.6109641387419166
User 16713 AUC after training: 0.6102292768959436
User 16713 does not improve AUC. Reverting changes.
Training on augumented user 82790 31/50 current_auc = 0.6109641387419166
User 82790 AUC after training: 0.6097883597883598
User 82790 does not improve AUC. Reverting changes.
Training on augumented user 86874 32/50 current_auc = 0.6109641387419166
User 86874 AUC after training: 0.6100823045267489
User 86874 does not improve AUC. Reverting changes.
Training on augumented user 77277 33/50 current_auc = 0.6109641387419166
User 77277 AUC after training: 0.6099353321575545
User 77277 does not improve AUC. Reverting changes.
Training on augumented user 12017 34/50 current_auc = 0.6109641387419166
User 12017 AUC after training: 0.6106701940035273
User 12017 does not improve AUC. Reverting changes.
Training on augumented user 26971 35/50 current_auc = 0.6109641387419166
User 26971 AUC after training: 0.6102292768959436
User 26971 does not improve AUC. Reverting changes.
Training on augumented user 25870 36/50 current_auc = 0.6109641387419166
User 25870 AUC after training: 0.6102292768959436
User 25870 does not improve AUC. Reverting changes.
Training on augumented user 73048 37/50 current_auc = 0.6109641387419166
User 73048 AUC after training: 0.6106701940035273
User 73048 does not improve AUC. Reverting changes.
Training on augumented user 109237 38/50 current_auc = 0.6109641387419166
User 109237 AUC after training: 0.6103762492651381
User 109237 does not improve AUC. Reverting changes.
Training on augumented user 71907 39/50 current_auc = 0.6109641387419166
User 71907 AUC after training: 0.6106701940035273
User 71907 does not improve AUC. Reverting changes.
Training on augumented user 24928 40/50 current_auc = 0.6109641387419166
User 24928 AUC after training: 0.6084656084656084
User 24928 does not improve AUC. Reverting changes.
Training on augumented user 8559 41/50 current_auc = 0.6109641387419166
User 8559 AUC after training: 0.6099353321575544
User 8559 does not improve AUC. Reverting changes.
Training on augumented user 33133 42/50 current_auc = 0.6109641387419166
User 33133 AUC after training: 0.6099353321575545
User 33133 does not improve AUC. Reverting changes.
Training on augumented user 97548 43/50 current_auc = 0.6109641387419166
User 97548 AUC after training: 0.6106701940035273
User 97548 does not improve AUC. Reverting changes.
Training on augumented user 79922 44/50 current_auc = 0.6109641387419166
User 79922 AUC after training: 0.6106701940035273
User 79922 does not improve AUC. Reverting changes.
Training on augumented user 4410 45/50 current_auc = 0.6109641387419166
User 4410 AUC after training: 0.6100823045267489
User 4410 does not improve AUC. Reverting changes.
Training on augumented user 76890 46/50 current_auc = 0.6109641387419166
User 76890 AUC after training: 0.6096413874191652
User 76890 does not improve AUC. Reverting changes.
Training on augumented user 17105 47/50 current_auc = 0.6109641387419166
User 17105 AUC after training: 0.6097883597883598
User 17105 does not improve AUC. Reverting changes.
Training on augumented user 67016 48/50 current_auc = 0.6109641387419166
User 67016 AUC after training: 0.6100823045267489
User 67016 does not improve AUC. Reverting changes.
Training on augumented user 92047 49/50 current_auc = 0.6109641387419166
User 92047 AUC after training: 0.6100823045267489
User 92047 does not improve AUC. Reverting changes.
[2024-12-02 18:23:55.816711] start test user 71442 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:56.652207] start test user 71442 85/568 recall augumented users by random, augumented_users = [23316, 79651, 17621, 54443, 80500, 70355, 96898, 120802, 62948, 64830, 120758, 19324, 44551, 128616, 117619, 55263, 52601, 36687, 134758, 135528, 113811, 22607, 18629, 4845, 60342, 111940, 31728, 43414, 59501, 47545, 88490, 101412, 66956, 61248, 54922, 69885, 72658, 117827, 84139, 69394, 27988, 97879, 89442, 47066, 66134, 3633, 124792, 44474, 5041, 29449]
[2024-12-02 18:23:56.670682] user = 71442 Cloud 85/568
[2024-12-02 18:23:56.686084] user = 71442 Local 85/568
[2024-12-02 18:23:56.819218] user = 71442 Local+ 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:59.114097] user = 71442 MPDA- 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6397058823529412
Training on augumented user 23316 0/50 current_auc = 0.6397058823529412
User 23316 AUC after training: 0.6388888888888888
User 23316 does not improve AUC. Reverting changes.
Training on augumented user 79651 1/50 current_auc = 0.6397058823529412
User 79651 AUC after training: 0.6421568627450981
User 79651 improves AUC. Keeping the model.
Training on augumented user 17621 2/50 current_auc = 0.6421568627450981
User 17621 AUC after training: 0.642156862745098
User 17621 does not improve AUC. Reverting changes.
Training on augumented user 54443 3/50 current_auc = 0.6421568627450981
User 54443 AUC after training: 0.6405228758169934
User 54443 does not improve AUC. Reverting changes.
Training on augumented user 80500 4/50 current_auc = 0.6421568627450981
User 80500 AUC after training: 0.6429738562091503
User 80500 improves AUC. Keeping the model.
Training on augumented user 70355 5/50 current_auc = 0.6429738562091503
User 70355 AUC after training: 0.6429738562091504
User 70355 improves AUC. Keeping the model.
Training on augumented user 96898 6/50 current_auc = 0.6429738562091504
User 96898 AUC after training: 0.6429738562091504
User 96898 does not improve AUC. Reverting changes.
Training on augumented user 120802 7/50 current_auc = 0.6429738562091504
User 120802 AUC after training: 0.6429738562091504
User 120802 does not improve AUC. Reverting changes.
Training on augumented user 62948 8/50 current_auc = 0.6429738562091504
User 62948 AUC after training: 0.6429738562091504
User 62948 does not improve AUC. Reverting changes.
Training on augumented user 64830 9/50 current_auc = 0.6429738562091504
User 64830 AUC after training: 0.6437908496732025
User 64830 improves AUC. Keeping the model.
Training on augumented user 120758 10/50 current_auc = 0.6437908496732025
User 120758 AUC after training: 0.6454248366013072
User 120758 improves AUC. Keeping the model.
Training on augumented user 19324 11/50 current_auc = 0.6454248366013072
User 19324 AUC after training: 0.6454248366013072
User 19324 does not improve AUC. Reverting changes.
Training on augumented user 44551 12/50 current_auc = 0.6454248366013072
User 44551 AUC after training: 0.6454248366013071
User 44551 does not improve AUC. Reverting changes.
Training on augumented user 128616 13/50 current_auc = 0.6454248366013072
User 128616 AUC after training: 0.642156862745098
User 128616 does not improve AUC. Reverting changes.
Training on augumented user 117619 14/50 current_auc = 0.6454248366013072
User 117619 AUC after training: 0.6446078431372548
User 117619 does not improve AUC. Reverting changes.
Training on augumented user 55263 15/50 current_auc = 0.6454248366013072
User 55263 AUC after training: 0.6446078431372548
User 55263 does not improve AUC. Reverting changes.
Training on augumented user 52601 16/50 current_auc = 0.6454248366013072
User 52601 AUC after training: 0.6462418300653595
User 52601 improves AUC. Keeping the model.
Training on augumented user 36687 17/50 current_auc = 0.6462418300653595
User 36687 AUC after training: 0.6486928104575163
User 36687 improves AUC. Keeping the model.
Training on augumented user 134758 18/50 current_auc = 0.6486928104575163
User 134758 AUC after training: 0.6462418300653594
User 134758 does not improve AUC. Reverting changes.
Training on augumented user 135528 19/50 current_auc = 0.6486928104575163
User 135528 AUC after training: 0.6486928104575163
User 135528 does not improve AUC. Reverting changes.
Training on augumented user 113811 20/50 current_auc = 0.6486928104575163
User 113811 AUC after training: 0.647875816993464
User 113811 does not improve AUC. Reverting changes.
Training on augumented user 22607 21/50 current_auc = 0.6486928104575163
User 22607 AUC after training: 0.6470588235294118
User 22607 does not improve AUC. Reverting changes.
Training on augumented user 18629 22/50 current_auc = 0.6486928104575163
User 18629 AUC after training: 0.6446078431372548
User 18629 does not improve AUC. Reverting changes.
Training on augumented user 4845 23/50 current_auc = 0.6486928104575163
User 4845 AUC after training: 0.6486928104575163
User 4845 does not improve AUC. Reverting changes.
Training on augumented user 60342 24/50 current_auc = 0.6486928104575163
User 60342 AUC after training: 0.647875816993464
User 60342 does not improve AUC. Reverting changes.
Training on augumented user 111940 25/50 current_auc = 0.6486928104575163
User 111940 AUC after training: 0.6486928104575163
User 111940 does not improve AUC. Reverting changes.
Training on augumented user 31728 26/50 current_auc = 0.6486928104575163
User 31728 AUC after training: 0.6474673202614378
User 31728 does not improve AUC. Reverting changes.
Training on augumented user 43414 27/50 current_auc = 0.6486928104575163
User 43414 AUC after training: 0.6486928104575163
User 43414 does not improve AUC. Reverting changes.
Training on augumented user 59501 28/50 current_auc = 0.6486928104575163
User 59501 AUC after training: 0.647875816993464
User 59501 does not improve AUC. Reverting changes.
Training on augumented user 47545 29/50 current_auc = 0.6486928104575163
User 47545 AUC after training: 0.6450163398692811
User 47545 does not improve AUC. Reverting changes.
Training on augumented user 88490 30/50 current_auc = 0.6486928104575163
User 88490 AUC after training: 0.6495098039215687
User 88490 improves AUC. Keeping the model.
Training on augumented user 101412 31/50 current_auc = 0.6495098039215687
User 101412 AUC after training: 0.647875816993464
User 101412 does not improve AUC. Reverting changes.
Training on augumented user 66956 32/50 current_auc = 0.6495098039215687
User 66956 AUC after training: 0.6486928104575163
User 66956 does not improve AUC. Reverting changes.
Training on augumented user 61248 33/50 current_auc = 0.6495098039215687
User 61248 AUC after training: 0.6474673202614378
User 61248 does not improve AUC. Reverting changes.
Training on augumented user 54922 34/50 current_auc = 0.6495098039215687
User 54922 AUC after training: 0.6503267973856209
User 54922 improves AUC. Keeping the model.
Training on augumented user 69885 35/50 current_auc = 0.6503267973856209
User 69885 AUC after training: 0.6491013071895424
User 69885 does not improve AUC. Reverting changes.
Training on augumented user 72658 36/50 current_auc = 0.6503267973856209
User 72658 AUC after training: 0.6503267973856209
User 72658 does not improve AUC. Reverting changes.
Training on augumented user 117827 37/50 current_auc = 0.6503267973856209
User 117827 AUC after training: 0.647875816993464
User 117827 does not improve AUC. Reverting changes.
Training on augumented user 84139 38/50 current_auc = 0.6503267973856209
User 84139 AUC after training: 0.6511437908496732
User 84139 improves AUC. Keeping the model.
Training on augumented user 69394 39/50 current_auc = 0.6511437908496732
User 69394 AUC after training: 0.6486928104575163
User 69394 does not improve AUC. Reverting changes.
Training on augumented user 27988 40/50 current_auc = 0.6511437908496732
User 27988 AUC after training: 0.6495098039215687
User 27988 does not improve AUC. Reverting changes.
Training on augumented user 97879 41/50 current_auc = 0.6511437908496732
User 97879 AUC after training: 0.6486928104575164
User 97879 does not improve AUC. Reverting changes.
Training on augumented user 89442 42/50 current_auc = 0.6511437908496732
User 89442 AUC after training: 0.645016339869281
User 89442 does not improve AUC. Reverting changes.
Training on augumented user 47066 43/50 current_auc = 0.6511437908496732
User 47066 AUC after training: 0.647875816993464
User 47066 does not improve AUC. Reverting changes.
Training on augumented user 66134 44/50 current_auc = 0.6511437908496732
User 66134 AUC after training: 0.6503267973856208
User 66134 does not improve AUC. Reverting changes.
Training on augumented user 3633 45/50 current_auc = 0.6511437908496732
User 3633 AUC after training: 0.6495098039215687
User 3633 does not improve AUC. Reverting changes.
Training on augumented user 124792 46/50 current_auc = 0.6511437908496732
User 124792 AUC after training: 0.6495098039215687
User 124792 does not improve AUC. Reverting changes.
Training on augumented user 44474 47/50 current_auc = 0.6511437908496732
User 44474 AUC after training: 0.6503267973856208
User 44474 does not improve AUC. Reverting changes.
Training on augumented user 5041 48/50 current_auc = 0.6511437908496732
User 5041 AUC after training: 0.6482843137254901
User 5041 does not improve AUC. Reverting changes.
Training on augumented user 29449 49/50 current_auc = 0.6511437908496732
User 29449 AUC after training: 0.6503267973856209
User 29449 does not improve AUC. Reverting changes.
[2024-12-02 18:24:28.762936] start test user 71444 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:29.219986] start test user 71444 86/568 recall augumented users by random, augumented_users = [49339, 107351, 76378, 111708, 112152, 55591, 104292, 48706, 94183, 43122, 119005, 88546, 103358, 68019, 4955, 35290, 63402, 21387, 3049, 118939, 107794, 17938, 5056, 75085, 37379, 118722, 128641, 130245, 74943, 42119, 103979, 61617, 128978, 75652, 120552, 111881, 22833, 92124, 19719, 63814, 65844, 120060, 28377, 91971, 36870, 78413, 11455, 44033, 46073, 66510]
[2024-12-02 18:24:29.237078] user = 71444 Cloud 86/568
[2024-12-02 18:24:29.261692] user = 71444 Local 86/568
[2024-12-02 18:24:29.365314] user = 71444 Local+ 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:31.569239] user = 71444 MPDA- 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8292112299465241
Training on augumented user 49339 0/50 current_auc = 0.8292112299465241
User 49339 AUC after training: 0.8292112299465242
User 49339 improves AUC. Keeping the model.
Training on augumented user 107351 1/50 current_auc = 0.8292112299465242
User 107351 AUC after training: 0.8298796791443851
User 107351 improves AUC. Keeping the model.
Training on augumented user 76378 2/50 current_auc = 0.8298796791443851
User 76378 AUC after training: 0.8288770053475937
User 76378 does not improve AUC. Reverting changes.
Training on augumented user 111708 3/50 current_auc = 0.8298796791443851
User 111708 AUC after training: 0.8298796791443851
User 111708 does not improve AUC. Reverting changes.
Training on augumented user 112152 4/50 current_auc = 0.8298796791443851
User 112152 AUC after training: 0.8285427807486632
User 112152 does not improve AUC. Reverting changes.
Training on augumented user 55591 5/50 current_auc = 0.8298796791443851
User 55591 AUC after training: 0.8285427807486632
User 55591 does not improve AUC. Reverting changes.
Training on augumented user 104292 6/50 current_auc = 0.8298796791443851
User 104292 AUC after training: 0.8298796791443851
User 104292 does not improve AUC. Reverting changes.
Training on augumented user 48706 7/50 current_auc = 0.8298796791443851
User 48706 AUC after training: 0.8292112299465242
User 48706 does not improve AUC. Reverting changes.
Training on augumented user 94183 8/50 current_auc = 0.8298796791443851
User 94183 AUC after training: 0.8288770053475937
User 94183 does not improve AUC. Reverting changes.
Training on augumented user 43122 9/50 current_auc = 0.8298796791443851
User 43122 AUC after training: 0.8292112299465242
User 43122 does not improve AUC. Reverting changes.
Training on augumented user 119005 10/50 current_auc = 0.8298796791443851
User 119005 AUC after training: 0.8285427807486632
User 119005 does not improve AUC. Reverting changes.
Training on augumented user 88546 11/50 current_auc = 0.8298796791443851
User 88546 AUC after training: 0.8295454545454546
User 88546 does not improve AUC. Reverting changes.
Training on augumented user 103358 12/50 current_auc = 0.8298796791443851
User 103358 AUC after training: 0.8295454545454546
User 103358 does not improve AUC. Reverting changes.
Training on augumented user 68019 13/50 current_auc = 0.8298796791443851
User 68019 AUC after training: 0.8295454545454546
User 68019 does not improve AUC. Reverting changes.
Training on augumented user 4955 14/50 current_auc = 0.8298796791443851
User 4955 AUC after training: 0.8248663101604279
User 4955 does not improve AUC. Reverting changes.
Training on augumented user 35290 15/50 current_auc = 0.8298796791443851
User 35290 AUC after training: 0.830548128342246
User 35290 improves AUC. Keeping the model.
Training on augumented user 63402 16/50 current_auc = 0.830548128342246
User 63402 AUC after training: 0.8308823529411765
User 63402 improves AUC. Keeping the model.
Training on augumented user 21387 17/50 current_auc = 0.8308823529411765
User 21387 AUC after training: 0.8295454545454546
User 21387 does not improve AUC. Reverting changes.
Training on augumented user 3049 18/50 current_auc = 0.8308823529411765
User 3049 AUC after training: 0.8298796791443851
User 3049 does not improve AUC. Reverting changes.
Training on augumented user 118939 19/50 current_auc = 0.8308823529411765
User 118939 AUC after training: 0.830548128342246
User 118939 does not improve AUC. Reverting changes.
Training on augumented user 107794 20/50 current_auc = 0.8308823529411765
User 107794 AUC after training: 0.830548128342246
User 107794 does not improve AUC. Reverting changes.
Training on augumented user 17938 21/50 current_auc = 0.8308823529411765
User 17938 AUC after training: 0.8295454545454546
User 17938 does not improve AUC. Reverting changes.
Training on augumented user 5056 22/50 current_auc = 0.8308823529411765
User 5056 AUC after training: 0.8292112299465241
User 5056 does not improve AUC. Reverting changes.
Training on augumented user 75085 23/50 current_auc = 0.8308823529411765
User 75085 AUC after training: 0.8302139037433155
User 75085 does not improve AUC. Reverting changes.
Training on augumented user 37379 24/50 current_auc = 0.8308823529411765
User 37379 AUC after training: 0.8298796791443851
User 37379 does not improve AUC. Reverting changes.
Training on augumented user 118722 25/50 current_auc = 0.8308823529411765
User 118722 AUC after training: 0.8292112299465241
User 118722 does not improve AUC. Reverting changes.
Training on augumented user 128641 26/50 current_auc = 0.8308823529411765
User 128641 AUC after training: 0.8248663101604279
User 128641 does not improve AUC. Reverting changes.
Training on augumented user 130245 27/50 current_auc = 0.8308823529411765
User 130245 AUC after training: 0.8295454545454546
User 130245 does not improve AUC. Reverting changes.
Training on augumented user 74943 28/50 current_auc = 0.8308823529411765
User 74943 AUC after training: 0.8315508021390374
User 74943 improves AUC. Keeping the model.
Training on augumented user 42119 29/50 current_auc = 0.8315508021390374
User 42119 AUC after training: 0.830548128342246
User 42119 does not improve AUC. Reverting changes.
Training on augumented user 103979 30/50 current_auc = 0.8315508021390374
User 103979 AUC after training: 0.8315508021390375
User 103979 improves AUC. Keeping the model.
Training on augumented user 61617 31/50 current_auc = 0.8315508021390375
User 61617 AUC after training: 0.831216577540107
User 61617 does not improve AUC. Reverting changes.
Training on augumented user 128978 32/50 current_auc = 0.8315508021390375
User 128978 AUC after training: 0.8302139037433156
User 128978 does not improve AUC. Reverting changes.
Training on augumented user 75652 33/50 current_auc = 0.8315508021390375
User 75652 AUC after training: 0.8302139037433156
User 75652 does not improve AUC. Reverting changes.
Training on augumented user 120552 34/50 current_auc = 0.8315508021390375
User 120552 AUC after training: 0.8295454545454546
User 120552 does not improve AUC. Reverting changes.
Training on augumented user 111881 35/50 current_auc = 0.8315508021390375
User 111881 AUC after training: 0.8258689839572193
User 111881 does not improve AUC. Reverting changes.
Training on augumented user 22833 36/50 current_auc = 0.8315508021390375
User 22833 AUC after training: 0.8308823529411764
User 22833 does not improve AUC. Reverting changes.
Training on augumented user 92124 37/50 current_auc = 0.8315508021390375
User 92124 AUC after training: 0.830548128342246
User 92124 does not improve AUC. Reverting changes.
Training on augumented user 19719 38/50 current_auc = 0.8315508021390375
User 19719 AUC after training: 0.830548128342246
User 19719 does not improve AUC. Reverting changes.
Training on augumented user 63814 39/50 current_auc = 0.8315508021390375
User 63814 AUC after training: 0.830548128342246
User 63814 does not improve AUC. Reverting changes.
Training on augumented user 65844 40/50 current_auc = 0.8315508021390375
User 65844 AUC after training: 0.8302139037433155
User 65844 does not improve AUC. Reverting changes.
Training on augumented user 120060 41/50 current_auc = 0.8315508021390375
User 120060 AUC after training: 0.8308823529411765
User 120060 does not improve AUC. Reverting changes.
Training on augumented user 28377 42/50 current_auc = 0.8315508021390375
User 28377 AUC after training: 0.8292112299465241
User 28377 does not improve AUC. Reverting changes.
Training on augumented user 91971 43/50 current_auc = 0.8315508021390375
User 91971 AUC after training: 0.831216577540107
User 91971 does not improve AUC. Reverting changes.
Training on augumented user 36870 44/50 current_auc = 0.8315508021390375
User 36870 AUC after training: 0.8298796791443851
User 36870 does not improve AUC. Reverting changes.
Training on augumented user 78413 45/50 current_auc = 0.8315508021390375
User 78413 AUC after training: 0.8295454545454546
User 78413 does not improve AUC. Reverting changes.
Training on augumented user 11455 46/50 current_auc = 0.8315508021390375
User 11455 AUC after training: 0.8318850267379679
User 11455 improves AUC. Keeping the model.
Training on augumented user 44033 47/50 current_auc = 0.8318850267379679
User 44033 AUC after training: 0.8318850267379679
User 44033 does not improve AUC. Reverting changes.
Training on augumented user 46073 48/50 current_auc = 0.8318850267379679
User 46073 AUC after training: 0.8308823529411765
User 46073 does not improve AUC. Reverting changes.
Training on augumented user 66510 49/50 current_auc = 0.8318850267379679
User 66510 AUC after training: 0.8308823529411765
User 66510 does not improve AUC. Reverting changes.
[2024-12-02 18:25:01.706086] start test user 71467 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:02.375841] start test user 71467 87/568 recall augumented users by random, augumented_users = [104274, 50, 38550, 16542, 48541, 125633, 104428, 14889, 68098, 74385, 110542, 54791, 1081, 116579, 42731, 3688, 67736, 113821, 28816, 118222, 30765, 5994, 70186, 8418, 97513, 10291, 45219, 98875, 23042, 101495, 122507, 3333, 110007, 45762, 131136, 98106, 93459, 49928, 4346, 63627, 6304, 31239, 20919, 46418, 40447, 106109, 115910, 329, 66468, 118123]
[2024-12-02 18:25:02.391980] user = 71467 Cloud 87/568
[2024-12-02 18:25:02.410956] user = 71467 Local 87/568
[2024-12-02 18:25:02.580891] user = 71467 Local+ 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:04.590128] user = 71467 MPDA- 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.555690399137001
Training on augumented user 104274 0/50 current_auc = 0.555690399137001
User 104274 AUC after training: 0.5562297734627832
User 104274 improves AUC. Keeping the model.
Training on augumented user 50 1/50 current_auc = 0.5562297734627832
User 50 AUC after training: 0.5556903991370011
User 50 does not improve AUC. Reverting changes.
Training on augumented user 38550 2/50 current_auc = 0.5562297734627832
User 38550 AUC after training: 0.5574433656957929
User 38550 improves AUC. Keeping the model.
Training on augumented user 16542 3/50 current_auc = 0.5574433656957929
User 16542 AUC after training: 0.5587918015102482
User 16542 improves AUC. Keeping the model.
Training on augumented user 48541 4/50 current_auc = 0.5587918015102482
User 48541 AUC after training: 0.5583872707659115
User 48541 does not improve AUC. Reverting changes.
Training on augumented user 125633 5/50 current_auc = 0.5587918015102482
User 125633 AUC after training: 0.5590614886731392
User 125633 improves AUC. Keeping the model.
Training on augumented user 104428 6/50 current_auc = 0.5590614886731392
User 104428 AUC after training: 0.5593311758360302
User 104428 improves AUC. Keeping the model.
Training on augumented user 14889 7/50 current_auc = 0.5593311758360302
User 14889 AUC after training: 0.5583872707659117
User 14889 does not improve AUC. Reverting changes.
Training on augumented user 68098 8/50 current_auc = 0.5593311758360302
User 68098 AUC after training: 0.5585221143473571
User 68098 does not improve AUC. Reverting changes.
Training on augumented user 74385 9/50 current_auc = 0.5593311758360302
User 74385 AUC after training: 0.5583872707659115
User 74385 does not improve AUC. Reverting changes.
Training on augumented user 110542 10/50 current_auc = 0.5593311758360302
User 110542 AUC after training: 0.558252427184466
User 110542 does not improve AUC. Reverting changes.
Training on augumented user 54791 11/50 current_auc = 0.5593311758360302
User 54791 AUC after training: 0.5587918015102481
User 54791 does not improve AUC. Reverting changes.
Training on augumented user 1081 12/50 current_auc = 0.5593311758360302
User 1081 AUC after training: 0.5586569579288027
User 1081 does not improve AUC. Reverting changes.
Training on augumented user 116579 13/50 current_auc = 0.5593311758360302
User 116579 AUC after training: 0.558252427184466
User 116579 does not improve AUC. Reverting changes.
Training on augumented user 42731 14/50 current_auc = 0.5593311758360302
User 42731 AUC after training: 0.5587918015102481
User 42731 does not improve AUC. Reverting changes.
Training on augumented user 3688 15/50 current_auc = 0.5593311758360302
User 3688 AUC after training: 0.5586569579288027
User 3688 does not improve AUC. Reverting changes.
Training on augumented user 67736 16/50 current_auc = 0.5593311758360302
User 67736 AUC after training: 0.5583872707659117
User 67736 does not improve AUC. Reverting changes.
Training on augumented user 113821 17/50 current_auc = 0.5593311758360302
User 113821 AUC after training: 0.5610841423948221
User 113821 improves AUC. Keeping the model.
Training on augumented user 28816 18/50 current_auc = 0.5610841423948221
User 28816 AUC after training: 0.5610841423948221
User 28816 does not improve AUC. Reverting changes.
Training on augumented user 118222 19/50 current_auc = 0.5610841423948221
User 118222 AUC after training: 0.5602750809061489
User 118222 does not improve AUC. Reverting changes.
Training on augumented user 30765 20/50 current_auc = 0.5610841423948221
User 30765 AUC after training: 0.5628371089536138
User 30765 improves AUC. Keeping the model.
Training on augumented user 5994 21/50 current_auc = 0.5628371089536138
User 5994 AUC after training: 0.5628371089536138
User 5994 does not improve AUC. Reverting changes.
Training on augumented user 70186 22/50 current_auc = 0.5628371089536138
User 70186 AUC after training: 0.5616235167206041
User 70186 does not improve AUC. Reverting changes.
Training on augumented user 8418 23/50 current_auc = 0.5628371089536138
User 8418 AUC after training: 0.5617583603020496
User 8418 does not improve AUC. Reverting changes.
Training on augumented user 97513 24/50 current_auc = 0.5628371089536138
User 97513 AUC after training: 0.5589266450916937
User 97513 does not improve AUC. Reverting changes.
Training on augumented user 10291 25/50 current_auc = 0.5628371089536138
User 10291 AUC after training: 0.5617583603020496
User 10291 does not improve AUC. Reverting changes.
Training on augumented user 45219 26/50 current_auc = 0.5628371089536138
User 45219 AUC after training: 0.5633090614886732
User 45219 improves AUC. Keeping the model.
Training on augumented user 98875 27/50 current_auc = 0.5633090614886732
User 98875 AUC after training: 0.5610841423948221
User 98875 does not improve AUC. Reverting changes.
Training on augumented user 23042 28/50 current_auc = 0.5633090614886732
User 23042 AUC after training: 0.5624325782092772
User 23042 does not improve AUC. Reverting changes.
Training on augumented user 101495 29/50 current_auc = 0.5633090614886732
User 101495 AUC after training: 0.5622977346278317
User 101495 does not improve AUC. Reverting changes.
Training on augumented user 122507 30/50 current_auc = 0.5633090614886732
User 122507 AUC after training: 0.563646170442287
User 122507 improves AUC. Keeping the model.
Training on augumented user 3333 31/50 current_auc = 0.563646170442287
User 3333 AUC after training: 0.5621628910463863
User 3333 does not improve AUC. Reverting changes.
Training on augumented user 110007 32/50 current_auc = 0.563646170442287
User 110007 AUC after training: 0.5636461704422869
User 110007 does not improve AUC. Reverting changes.
Training on augumented user 45762 33/50 current_auc = 0.563646170442287
User 45762 AUC after training: 0.5638484358144552
User 45762 improves AUC. Keeping the model.
Training on augumented user 131136 34/50 current_auc = 0.5638484358144552
User 131136 AUC after training: 0.5632416396979505
User 131136 does not improve AUC. Reverting changes.
Training on augumented user 98106 35/50 current_auc = 0.5638484358144552
User 98106 AUC after training: 0.5625674217907227
User 98106 does not improve AUC. Reverting changes.
Training on augumented user 93459 36/50 current_auc = 0.5638484358144552
User 93459 AUC after training: 0.5648597626752967
User 93459 improves AUC. Keeping the model.
Training on augumented user 49928 37/50 current_auc = 0.5648597626752967
User 49928 AUC after training: 0.5616235167206041
User 49928 does not improve AUC. Reverting changes.
Training on augumented user 4346 38/50 current_auc = 0.5648597626752967
User 4346 AUC after training: 0.5645900755124056
User 4346 does not improve AUC. Reverting changes.
Training on augumented user 63627 39/50 current_auc = 0.5648597626752967
User 63627 AUC after training: 0.5659385113268608
User 63627 improves AUC. Keeping the model.
Training on augumented user 6304 40/50 current_auc = 0.5659385113268608
User 6304 AUC after training: 0.565062028047465
User 6304 does not improve AUC. Reverting changes.
Training on augumented user 31239 41/50 current_auc = 0.5659385113268608
User 31239 AUC after training: 0.5645226537216828
User 31239 does not improve AUC. Reverting changes.
Training on augumented user 20919 42/50 current_auc = 0.5659385113268608
User 20919 AUC after training: 0.5645900755124056
User 20919 does not improve AUC. Reverting changes.
Training on augumented user 46418 43/50 current_auc = 0.5659385113268608
User 46418 AUC after training: 0.5656688241639698
User 46418 does not improve AUC. Reverting changes.
Training on augumented user 40447 44/50 current_auc = 0.5659385113268608
User 40447 AUC after training: 0.564185544768069
User 40447 does not improve AUC. Reverting changes.
Training on augumented user 106109 45/50 current_auc = 0.5659385113268608
User 106109 AUC after training: 0.563915857605178
User 106109 does not improve AUC. Reverting changes.
Training on augumented user 115910 46/50 current_auc = 0.5659385113268608
User 115910 AUC after training: 0.5649946062567421
User 115910 does not improve AUC. Reverting changes.
Training on augumented user 329 47/50 current_auc = 0.5659385113268608
User 329 AUC after training: 0.5652642934196332
User 329 does not improve AUC. Reverting changes.
Training on augumented user 66468 48/50 current_auc = 0.5659385113268608
User 66468 AUC after training: 0.5664778856526429
User 66468 improves AUC. Keeping the model.
Training on augumented user 118123 49/50 current_auc = 0.5664778856526429
User 118123 AUC after training: 0.5651294498381877
User 118123 does not improve AUC. Reverting changes.
[2024-12-02 18:25:35.641862] start test user 71474 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:36.367338] start test user 71474 88/568 recall augumented users by random, augumented_users = [64568, 67540, 31505, 10592, 44241, 4865, 128306, 94549, 114587, 117677, 46021, 98760, 1373, 110308, 125927, 20921, 94113, 43938, 102933, 96152, 64104, 8907, 34518, 64346, 83166, 47940, 14720, 17882, 101089, 59558, 39866, 47648, 7818, 74145, 12223, 67903, 59591, 114311, 30501, 23078, 68140, 94036, 72679, 52487, 52706, 23184, 44987, 83786, 27968, 129411]
[2024-12-02 18:25:36.383297] user = 71474 Cloud 88/568
[2024-12-02 18:25:36.394197] user = 71474 Local 88/568
[2024-12-02 18:25:36.476197] user = 71474 Local+ 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:39.051752] user = 71474 MPDA- 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6904761904761905
Training on augumented user 64568 0/50 current_auc = 0.6904761904761905
User 64568 AUC after training: 0.6968253968253968
User 64568 improves AUC. Keeping the model.
Training on augumented user 67540 1/50 current_auc = 0.6968253968253968
User 67540 AUC after training: 0.6904761904761905
User 67540 does not improve AUC. Reverting changes.
Training on augumented user 31505 2/50 current_auc = 0.6968253968253968
User 31505 AUC after training: 0.6968253968253968
User 31505 does not improve AUC. Reverting changes.
Training on augumented user 10592 3/50 current_auc = 0.6968253968253968
User 10592 AUC after training: 0.6936507936507936
User 10592 does not improve AUC. Reverting changes.
Training on augumented user 44241 4/50 current_auc = 0.6968253968253968
User 44241 AUC after training: 0.7015873015873015
User 44241 improves AUC. Keeping the model.
Training on augumented user 4865 5/50 current_auc = 0.7015873015873015
User 4865 AUC after training: 0.7015873015873015
User 4865 does not improve AUC. Reverting changes.
Training on augumented user 128306 6/50 current_auc = 0.7015873015873015
User 128306 AUC after training: 0.7015873015873015
User 128306 does not improve AUC. Reverting changes.
Training on augumented user 94549 7/50 current_auc = 0.7015873015873015
User 94549 AUC after training: 0.6984126984126984
User 94549 does not improve AUC. Reverting changes.
Training on augumented user 114587 8/50 current_auc = 0.7015873015873015
User 114587 AUC after training: 0.6984126984126984
User 114587 does not improve AUC. Reverting changes.
Training on augumented user 117677 9/50 current_auc = 0.7015873015873015
User 117677 AUC after training: 0.7047619047619047
User 117677 improves AUC. Keeping the model.
Training on augumented user 46021 10/50 current_auc = 0.7047619047619047
User 46021 AUC after training: 0.7047619047619049
User 46021 improves AUC. Keeping the model.
Training on augumented user 98760 11/50 current_auc = 0.7047619047619049
User 98760 AUC after training: 0.7047619047619049
User 98760 does not improve AUC. Reverting changes.
Training on augumented user 1373 12/50 current_auc = 0.7047619047619049
User 1373 AUC after training: 0.7047619047619049
User 1373 does not improve AUC. Reverting changes.
Training on augumented user 110308 13/50 current_auc = 0.7047619047619049
User 110308 AUC after training: 0.7047619047619047
User 110308 does not improve AUC. Reverting changes.
Training on augumented user 125927 14/50 current_auc = 0.7047619047619049
User 125927 AUC after training: 0.7047619047619049
User 125927 does not improve AUC. Reverting changes.
Training on augumented user 20921 15/50 current_auc = 0.7047619047619049
User 20921 AUC after training: 0.6984126984126984
User 20921 does not improve AUC. Reverting changes.
Training on augumented user 94113 16/50 current_auc = 0.7047619047619049
User 94113 AUC after training: 0.7015873015873015
User 94113 does not improve AUC. Reverting changes.
Training on augumented user 43938 17/50 current_auc = 0.7047619047619049
User 43938 AUC after training: 0.7047619047619049
User 43938 does not improve AUC. Reverting changes.
Training on augumented user 102933 18/50 current_auc = 0.7047619047619049
User 102933 AUC after training: 0.7015873015873015
User 102933 does not improve AUC. Reverting changes.
Training on augumented user 96152 19/50 current_auc = 0.7047619047619049
User 96152 AUC after training: 0.7015873015873015
User 96152 does not improve AUC. Reverting changes.
Training on augumented user 64104 20/50 current_auc = 0.7047619047619049
User 64104 AUC after training: 0.7015873015873015
User 64104 does not improve AUC. Reverting changes.
Training on augumented user 8907 21/50 current_auc = 0.7047619047619049
User 8907 AUC after training: 0.7079365079365081
User 8907 improves AUC. Keeping the model.
Training on augumented user 34518 22/50 current_auc = 0.7079365079365081
User 34518 AUC after training: 0.7015873015873015
User 34518 does not improve AUC. Reverting changes.
Training on augumented user 64346 23/50 current_auc = 0.7079365079365081
User 64346 AUC after training: 0.7047619047619047
User 64346 does not improve AUC. Reverting changes.
Training on augumented user 83166 24/50 current_auc = 0.7079365079365081
User 83166 AUC after training: 0.7015873015873015
User 83166 does not improve AUC. Reverting changes.
Training on augumented user 47940 25/50 current_auc = 0.7079365079365081
User 47940 AUC after training: 0.7015873015873015
User 47940 does not improve AUC. Reverting changes.
Training on augumented user 14720 26/50 current_auc = 0.7079365079365081
User 14720 AUC after training: 0.6984126984126984
User 14720 does not improve AUC. Reverting changes.
Training on augumented user 17882 27/50 current_auc = 0.7079365079365081
User 17882 AUC after training: 0.7047619047619049
User 17882 does not improve AUC. Reverting changes.
Training on augumented user 101089 28/50 current_auc = 0.7079365079365081
User 101089 AUC after training: 0.6984126984126984
User 101089 does not improve AUC. Reverting changes.
Training on augumented user 59558 29/50 current_auc = 0.7079365079365081
User 59558 AUC after training: 0.7015873015873015
User 59558 does not improve AUC. Reverting changes.
Training on augumented user 39866 30/50 current_auc = 0.7079365079365081
User 39866 AUC after training: 0.6984126984126984
User 39866 does not improve AUC. Reverting changes.
Training on augumented user 47648 31/50 current_auc = 0.7079365079365081
User 47648 AUC after training: 0.7015873015873015
User 47648 does not improve AUC. Reverting changes.
Training on augumented user 7818 32/50 current_auc = 0.7079365079365081
User 7818 AUC after training: 0.7079365079365079
User 7818 does not improve AUC. Reverting changes.
Training on augumented user 74145 33/50 current_auc = 0.7079365079365081
User 74145 AUC after training: 0.6984126984126984
User 74145 does not improve AUC. Reverting changes.
Training on augumented user 12223 34/50 current_auc = 0.7079365079365081
User 12223 AUC after training: 0.6952380952380952
User 12223 does not improve AUC. Reverting changes.
Training on augumented user 67903 35/50 current_auc = 0.7079365079365081
User 67903 AUC after training: 0.7015873015873015
User 67903 does not improve AUC. Reverting changes.
Training on augumented user 59591 36/50 current_auc = 0.7079365079365081
User 59591 AUC after training: 0.7047619047619047
User 59591 does not improve AUC. Reverting changes.
Training on augumented user 114311 37/50 current_auc = 0.7079365079365081
User 114311 AUC after training: 0.7047619047619047
User 114311 does not improve AUC. Reverting changes.
Training on augumented user 30501 38/50 current_auc = 0.7079365079365081
User 30501 AUC after training: 0.6984126984126984
User 30501 does not improve AUC. Reverting changes.
Training on augumented user 23078 39/50 current_auc = 0.7079365079365081
User 23078 AUC after training: 0.692063492063492
User 23078 does not improve AUC. Reverting changes.
Training on augumented user 68140 40/50 current_auc = 0.7079365079365081
User 68140 AUC after training: 0.6968253968253968
User 68140 does not improve AUC. Reverting changes.
Training on augumented user 94036 41/50 current_auc = 0.7079365079365081
User 94036 AUC after training: 0.7047619047619047
User 94036 does not improve AUC. Reverting changes.
Training on augumented user 72679 42/50 current_auc = 0.7079365079365081
User 72679 AUC after training: 0.7015873015873015
User 72679 does not improve AUC. Reverting changes.
Training on augumented user 52487 43/50 current_auc = 0.7079365079365081
User 52487 AUC after training: 0.6984126984126984
User 52487 does not improve AUC. Reverting changes.
Training on augumented user 52706 44/50 current_auc = 0.7079365079365081
User 52706 AUC after training: 0.7015873015873015
User 52706 does not improve AUC. Reverting changes.
Training on augumented user 23184 45/50 current_auc = 0.7079365079365081
User 23184 AUC after training: 0.7015873015873015
User 23184 does not improve AUC. Reverting changes.
Training on augumented user 44987 46/50 current_auc = 0.7079365079365081
User 44987 AUC after training: 0.7047619047619047
User 44987 does not improve AUC. Reverting changes.
Training on augumented user 83786 47/50 current_auc = 0.7079365079365081
User 83786 AUC after training: 0.6984126984126984
User 83786 does not improve AUC. Reverting changes.
Training on augumented user 27968 48/50 current_auc = 0.7079365079365081
User 27968 AUC after training: 0.6984126984126984
User 27968 does not improve AUC. Reverting changes.
Training on augumented user 129411 49/50 current_auc = 0.7079365079365081
User 129411 AUC after training: 0.7015873015873015
User 129411 does not improve AUC. Reverting changes.
[2024-12-02 18:26:04.492325] start test user 71487 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:04.912534] start test user 71487 89/568 recall augumented users by random, augumented_users = [123926, 123089, 124353, 10567, 9657, 108637, 101466, 93582, 63534, 97754, 24539, 83929, 8865, 57222, 9520, 42409, 132719, 6779, 129413, 50784, 74519, 54890, 129618, 93634, 41405, 101990, 80181, 111191, 34861, 85669, 81209, 114089, 40644, 65518, 89096, 73445, 30924, 87112, 29019, 8380, 129307, 74481, 65017, 22802, 121052, 55367, 35730, 122787, 92379, 3091]
[2024-12-02 18:26:04.927459] user = 71487 Cloud 89/568
[2024-12-02 18:26:04.942537] user = 71487 Local 89/568
[2024-12-02 18:26:04.980425] user = 71487 Local+ 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:06.988598] user = 71487 MPDA- 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7838137472283814
Training on augumented user 123926 0/50 current_auc = 0.7838137472283814
User 123926 AUC after training: 0.7821507760532151
User 123926 does not improve AUC. Reverting changes.
Training on augumented user 123089 1/50 current_auc = 0.7838137472283814
User 123089 AUC after training: 0.7838137472283814
User 123089 does not improve AUC. Reverting changes.
Training on augumented user 124353 2/50 current_auc = 0.7838137472283814
User 124353 AUC after training: 0.7838137472283814
User 124353 does not improve AUC. Reverting changes.
Training on augumented user 10567 3/50 current_auc = 0.7838137472283814
User 10567 AUC after training: 0.783259423503326
User 10567 does not improve AUC. Reverting changes.
Training on augumented user 9657 4/50 current_auc = 0.7838137472283814
User 9657 AUC after training: 0.7843680709534369
User 9657 improves AUC. Keeping the model.
Training on augumented user 108637 5/50 current_auc = 0.7843680709534369
User 108637 AUC after training: 0.7843680709534369
User 108637 does not improve AUC. Reverting changes.
Training on augumented user 101466 6/50 current_auc = 0.7843680709534369
User 101466 AUC after training: 0.7838137472283814
User 101466 does not improve AUC. Reverting changes.
Training on augumented user 93582 7/50 current_auc = 0.7843680709534369
User 93582 AUC after training: 0.7838137472283814
User 93582 does not improve AUC. Reverting changes.
Training on augumented user 63534 8/50 current_auc = 0.7843680709534369
User 63534 AUC after training: 0.7849223946784923
User 63534 improves AUC. Keeping the model.
Training on augumented user 97754 9/50 current_auc = 0.7849223946784923
User 97754 AUC after training: 0.7838137472283815
User 97754 does not improve AUC. Reverting changes.
Training on augumented user 24539 10/50 current_auc = 0.7849223946784923
User 24539 AUC after training: 0.7860310421286032
User 24539 improves AUC. Keeping the model.
Training on augumented user 83929 11/50 current_auc = 0.7860310421286032
User 83929 AUC after training: 0.7854767184035477
User 83929 does not improve AUC. Reverting changes.
Training on augumented user 8865 12/50 current_auc = 0.7860310421286032
User 8865 AUC after training: 0.7860310421286032
User 8865 does not improve AUC. Reverting changes.
Training on augumented user 57222 13/50 current_auc = 0.7860310421286032
User 57222 AUC after training: 0.7854767184035478
User 57222 does not improve AUC. Reverting changes.
Training on augumented user 9520 14/50 current_auc = 0.7860310421286032
User 9520 AUC after training: 0.7849223946784922
User 9520 does not improve AUC. Reverting changes.
Training on augumented user 42409 15/50 current_auc = 0.7860310421286032
User 42409 AUC after training: 0.7854767184035477
User 42409 does not improve AUC. Reverting changes.
Training on augumented user 132719 16/50 current_auc = 0.7860310421286032
User 132719 AUC after training: 0.7860310421286032
User 132719 does not improve AUC. Reverting changes.
Training on augumented user 6779 17/50 current_auc = 0.7860310421286032
User 6779 AUC after training: 0.7854767184035477
User 6779 does not improve AUC. Reverting changes.
Training on augumented user 129413 18/50 current_auc = 0.7860310421286032
User 129413 AUC after training: 0.7849223946784922
User 129413 does not improve AUC. Reverting changes.
Training on augumented user 50784 19/50 current_auc = 0.7860310421286032
User 50784 AUC after training: 0.7860310421286032
User 50784 does not improve AUC. Reverting changes.
Training on augumented user 74519 20/50 current_auc = 0.7860310421286032
User 74519 AUC after training: 0.7854767184035478
User 74519 does not improve AUC. Reverting changes.
Training on augumented user 54890 21/50 current_auc = 0.7860310421286032
User 54890 AUC after training: 0.7860310421286032
User 54890 does not improve AUC. Reverting changes.
Training on augumented user 129618 22/50 current_auc = 0.7860310421286032
User 129618 AUC after training: 0.7854767184035477
User 129618 does not improve AUC. Reverting changes.
Training on augumented user 93634 23/50 current_auc = 0.7860310421286032
User 93634 AUC after training: 0.7849223946784922
User 93634 does not improve AUC. Reverting changes.
Training on augumented user 41405 24/50 current_auc = 0.7860310421286032
User 41405 AUC after training: 0.7854767184035478
User 41405 does not improve AUC. Reverting changes.
Training on augumented user 101990 25/50 current_auc = 0.7860310421286032
User 101990 AUC after training: 0.7854767184035477
User 101990 does not improve AUC. Reverting changes.
Training on augumented user 80181 26/50 current_auc = 0.7860310421286032
User 80181 AUC after training: 0.7849223946784922
User 80181 does not improve AUC. Reverting changes.
Training on augumented user 111191 27/50 current_auc = 0.7860310421286032
User 111191 AUC after training: 0.7849223946784922
User 111191 does not improve AUC. Reverting changes.
Training on augumented user 34861 28/50 current_auc = 0.7860310421286032
User 34861 AUC after training: 0.7849223946784922
User 34861 does not improve AUC. Reverting changes.
Training on augumented user 85669 29/50 current_auc = 0.7860310421286032
User 85669 AUC after training: 0.7860310421286032
User 85669 does not improve AUC. Reverting changes.
Training on augumented user 81209 30/50 current_auc = 0.7860310421286032
User 81209 AUC after training: 0.7849223946784922
User 81209 does not improve AUC. Reverting changes.
Training on augumented user 114089 31/50 current_auc = 0.7860310421286032
User 114089 AUC after training: 0.7854767184035477
User 114089 does not improve AUC. Reverting changes.
Training on augumented user 40644 32/50 current_auc = 0.7860310421286032
User 40644 AUC after training: 0.7854767184035477
User 40644 does not improve AUC. Reverting changes.
Training on augumented user 65518 33/50 current_auc = 0.7860310421286032
User 65518 AUC after training: 0.7860310421286031
User 65518 does not improve AUC. Reverting changes.
Training on augumented user 89096 34/50 current_auc = 0.7860310421286032
User 89096 AUC after training: 0.7860310421286032
User 89096 does not improve AUC. Reverting changes.
Training on augumented user 73445 35/50 current_auc = 0.7860310421286032
User 73445 AUC after training: 0.7854767184035477
User 73445 does not improve AUC. Reverting changes.
Training on augumented user 30924 36/50 current_auc = 0.7860310421286032
User 30924 AUC after training: 0.7854767184035477
User 30924 does not improve AUC. Reverting changes.
Training on augumented user 87112 37/50 current_auc = 0.7860310421286032
User 87112 AUC after training: 0.7860310421286032
User 87112 does not improve AUC. Reverting changes.
Training on augumented user 29019 38/50 current_auc = 0.7860310421286032
User 29019 AUC after training: 0.7860310421286032
User 29019 does not improve AUC. Reverting changes.
Training on augumented user 8380 39/50 current_auc = 0.7860310421286032
User 8380 AUC after training: 0.7849223946784922
User 8380 does not improve AUC. Reverting changes.
Training on augumented user 129307 40/50 current_auc = 0.7860310421286032
User 129307 AUC after training: 0.7849223946784923
User 129307 does not improve AUC. Reverting changes.
Training on augumented user 74481 41/50 current_auc = 0.7860310421286032
User 74481 AUC after training: 0.7860310421286032
User 74481 does not improve AUC. Reverting changes.
Training on augumented user 65017 42/50 current_auc = 0.7860310421286032
User 65017 AUC after training: 0.7854767184035477
User 65017 does not improve AUC. Reverting changes.
Training on augumented user 22802 43/50 current_auc = 0.7860310421286032
User 22802 AUC after training: 0.7860310421286032
User 22802 does not improve AUC. Reverting changes.
Training on augumented user 121052 44/50 current_auc = 0.7860310421286032
User 121052 AUC after training: 0.7838137472283814
User 121052 does not improve AUC. Reverting changes.
Training on augumented user 55367 45/50 current_auc = 0.7860310421286032
User 55367 AUC after training: 0.7860310421286032
User 55367 does not improve AUC. Reverting changes.
Training on augumented user 35730 46/50 current_auc = 0.7860310421286032
User 35730 AUC after training: 0.7854767184035477
User 35730 does not improve AUC. Reverting changes.
Training on augumented user 122787 47/50 current_auc = 0.7860310421286032
User 122787 AUC after training: 0.7849223946784922
User 122787 does not improve AUC. Reverting changes.
Training on augumented user 92379 48/50 current_auc = 0.7860310421286032
User 92379 AUC after training: 0.7860310421286032
User 92379 does not improve AUC. Reverting changes.
Training on augumented user 3091 49/50 current_auc = 0.7860310421286032
User 3091 AUC after training: 0.7849223946784922
User 3091 does not improve AUC. Reverting changes.
[2024-12-02 18:26:39.574924] start test user 71521 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:40.252318] start test user 71521 90/568 recall augumented users by random, augumented_users = [114748, 130527, 134075, 43628, 73255, 13982, 64950, 27909, 64874, 69984, 135352, 54648, 115876, 62043, 88004, 131784, 41788, 32697, 105999, 20748, 21865, 110126, 61661, 61298, 30806, 57397, 77151, 101372, 87430, 83690, 121137, 106863, 54938, 86439, 23581, 2741, 91332, 30168, 91972, 46996, 34506, 43707, 97054, 54752, 114095, 103290, 15880, 23003, 43884, 126503]
[2024-12-02 18:26:40.267326] user = 71521 Cloud 90/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:40.273858] user = 71521 Local 90/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:40.314691] user = 71521 Local+ 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:42.483247] user = 71521 MPDA- 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 114748 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114748 AUC after training: 0.5
User 114748 does not improve AUC. Reverting changes.
Training on augumented user 130527 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130527 AUC after training: 0.5
User 130527 does not improve AUC. Reverting changes.
Training on augumented user 134075 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134075 AUC after training: 0.5
User 134075 does not improve AUC. Reverting changes.
Training on augumented user 43628 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43628 AUC after training: 0.5
User 43628 does not improve AUC. Reverting changes.
Training on augumented user 73255 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73255 AUC after training: 0.5
User 73255 does not improve AUC. Reverting changes.
Training on augumented user 13982 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13982 AUC after training: 0.5
User 13982 does not improve AUC. Reverting changes.
Training on augumented user 64950 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64950 AUC after training: 0.5
User 64950 does not improve AUC. Reverting changes.
Training on augumented user 27909 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27909 AUC after training: 0.5
User 27909 does not improve AUC. Reverting changes.
Training on augumented user 64874 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64874 AUC after training: 0.5
User 64874 does not improve AUC. Reverting changes.
Training on augumented user 69984 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69984 AUC after training: 0.5
User 69984 does not improve AUC. Reverting changes.
Training on augumented user 135352 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135352 AUC after training: 0.5
User 135352 does not improve AUC. Reverting changes.
Training on augumented user 54648 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54648 AUC after training: 0.5
User 54648 does not improve AUC. Reverting changes.
Training on augumented user 115876 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115876 AUC after training: 0.5
User 115876 does not improve AUC. Reverting changes.
Training on augumented user 62043 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62043 AUC after training: 0.5
User 62043 does not improve AUC. Reverting changes.
Training on augumented user 88004 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88004 AUC after training: 0.5
User 88004 does not improve AUC. Reverting changes.
Training on augumented user 131784 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131784 AUC after training: 0.5
User 131784 does not improve AUC. Reverting changes.
Training on augumented user 41788 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41788 AUC after training: 0.5
User 41788 does not improve AUC. Reverting changes.
Training on augumented user 32697 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32697 AUC after training: 0.5
User 32697 does not improve AUC. Reverting changes.
Training on augumented user 105999 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105999 AUC after training: 0.5
User 105999 does not improve AUC. Reverting changes.
Training on augumented user 20748 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20748 AUC after training: 0.5
User 20748 does not improve AUC. Reverting changes.
Training on augumented user 21865 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21865 AUC after training: 0.5
User 21865 does not improve AUC. Reverting changes.
Training on augumented user 110126 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110126 AUC after training: 0.5
User 110126 does not improve AUC. Reverting changes.
Training on augumented user 61661 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61661 AUC after training: 0.5
User 61661 does not improve AUC. Reverting changes.
Training on augumented user 61298 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61298 AUC after training: 0.5
User 61298 does not improve AUC. Reverting changes.
Training on augumented user 30806 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30806 AUC after training: 0.5
User 30806 does not improve AUC. Reverting changes.
Training on augumented user 57397 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57397 AUC after training: 0.5
User 57397 does not improve AUC. Reverting changes.
Training on augumented user 77151 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77151 AUC after training: 0.5
User 77151 does not improve AUC. Reverting changes.
Training on augumented user 101372 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101372 AUC after training: 0.5
User 101372 does not improve AUC. Reverting changes.
Training on augumented user 87430 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87430 AUC after training: 0.5
User 87430 does not improve AUC. Reverting changes.
Training on augumented user 83690 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83690 AUC after training: 0.5
User 83690 does not improve AUC. Reverting changes.
Training on augumented user 121137 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121137 AUC after training: 0.5
User 121137 does not improve AUC. Reverting changes.
Training on augumented user 106863 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106863 AUC after training: 0.5
User 106863 does not improve AUC. Reverting changes.
Training on augumented user 54938 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54938 AUC after training: 0.5
User 54938 does not improve AUC. Reverting changes.
Training on augumented user 86439 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86439 AUC after training: 0.5
User 86439 does not improve AUC. Reverting changes.
Training on augumented user 23581 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23581 AUC after training: 0.5
User 23581 does not improve AUC. Reverting changes.
Training on augumented user 2741 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2741 AUC after training: 0.5
User 2741 does not improve AUC. Reverting changes.
Training on augumented user 91332 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91332 AUC after training: 0.5
User 91332 does not improve AUC. Reverting changes.
Training on augumented user 30168 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30168 AUC after training: 0.5
User 30168 does not improve AUC. Reverting changes.
Training on augumented user 91972 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91972 AUC after training: 0.5
User 91972 does not improve AUC. Reverting changes.
Training on augumented user 46996 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46996 AUC after training: 0.5
User 46996 does not improve AUC. Reverting changes.
Training on augumented user 34506 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34506 AUC after training: 0.5
User 34506 does not improve AUC. Reverting changes.
Training on augumented user 43707 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43707 AUC after training: 0.5
User 43707 does not improve AUC. Reverting changes.
Training on augumented user 97054 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97054 AUC after training: 0.5
User 97054 does not improve AUC. Reverting changes.
Training on augumented user 54752 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54752 AUC after training: 0.5
User 54752 does not improve AUC. Reverting changes.
Training on augumented user 114095 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114095 AUC after training: 0.5
User 114095 does not improve AUC. Reverting changes.
Training on augumented user 103290 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103290 AUC after training: 0.5
User 103290 does not improve AUC. Reverting changes.
Training on augumented user 15880 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15880 AUC after training: 0.5
User 15880 does not improve AUC. Reverting changes.
Training on augumented user 23003 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23003 AUC after training: 0.5
User 23003 does not improve AUC. Reverting changes.
Training on augumented user 43884 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43884 AUC after training: 0.5
User 43884 does not improve AUC. Reverting changes.
Training on augumented user 126503 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126503 AUC after training: 0.5
User 126503 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:07.199523] start test user 71535 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:07.992950] start test user 71535 91/568 recall augumented users by random, augumented_users = [67862, 36869, 12830, 138417, 8897, 118619, 80067, 72800, 44804, 106468, 8609, 136317, 135605, 103008, 31488, 70202, 51766, 2500, 46511, 29551, 121399, 21770, 104895, 10630, 65447, 25931, 1668, 87416, 25492, 61393, 67890, 85146, 78453, 21898, 23144, 5791, 66203, 121421, 17847, 129008, 66480, 101177, 94108, 48448, 68611, 84939, 101263, 62064, 106430, 73217]
[2024-12-02 18:27:08.008571] user = 71535 Cloud 91/568
[2024-12-02 18:27:08.025154] user = 71535 Local 91/568
[2024-12-02 18:27:08.145751] user = 71535 Local+ 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:11.544467] user = 71535 MPDA- 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 67862 0/50 current_auc = 1.0
User 67862 AUC after training: 1.0
User 67862 does not improve AUC. Reverting changes.
Training on augumented user 36869 1/50 current_auc = 1.0
User 36869 AUC after training: 1.0
User 36869 does not improve AUC. Reverting changes.
Training on augumented user 12830 2/50 current_auc = 1.0
User 12830 AUC after training: 1.0
User 12830 does not improve AUC. Reverting changes.
Training on augumented user 138417 3/50 current_auc = 1.0
User 138417 AUC after training: 1.0
User 138417 does not improve AUC. Reverting changes.
Training on augumented user 8897 4/50 current_auc = 1.0
User 8897 AUC after training: 1.0
User 8897 does not improve AUC. Reverting changes.
Training on augumented user 118619 5/50 current_auc = 1.0
User 118619 AUC after training: 1.0
User 118619 does not improve AUC. Reverting changes.
Training on augumented user 80067 6/50 current_auc = 1.0
User 80067 AUC after training: 1.0
User 80067 does not improve AUC. Reverting changes.
Training on augumented user 72800 7/50 current_auc = 1.0
User 72800 AUC after training: 1.0
User 72800 does not improve AUC. Reverting changes.
Training on augumented user 44804 8/50 current_auc = 1.0
User 44804 AUC after training: 1.0
User 44804 does not improve AUC. Reverting changes.
Training on augumented user 106468 9/50 current_auc = 1.0
User 106468 AUC after training: 1.0
User 106468 does not improve AUC. Reverting changes.
Training on augumented user 8609 10/50 current_auc = 1.0
User 8609 AUC after training: 1.0
User 8609 does not improve AUC. Reverting changes.
Training on augumented user 136317 11/50 current_auc = 1.0
User 136317 AUC after training: 1.0
User 136317 does not improve AUC. Reverting changes.
Training on augumented user 135605 12/50 current_auc = 1.0
User 135605 AUC after training: 1.0
User 135605 does not improve AUC. Reverting changes.
Training on augumented user 103008 13/50 current_auc = 1.0
User 103008 AUC after training: 1.0
User 103008 does not improve AUC. Reverting changes.
Training on augumented user 31488 14/50 current_auc = 1.0
User 31488 AUC after training: 1.0
User 31488 does not improve AUC. Reverting changes.
Training on augumented user 70202 15/50 current_auc = 1.0
User 70202 AUC after training: 1.0
User 70202 does not improve AUC. Reverting changes.
Training on augumented user 51766 16/50 current_auc = 1.0
User 51766 AUC after training: 1.0
User 51766 does not improve AUC. Reverting changes.
Training on augumented user 2500 17/50 current_auc = 1.0
User 2500 AUC after training: 1.0
User 2500 does not improve AUC. Reverting changes.
Training on augumented user 46511 18/50 current_auc = 1.0
User 46511 AUC after training: 1.0
User 46511 does not improve AUC. Reverting changes.
Training on augumented user 29551 19/50 current_auc = 1.0
User 29551 AUC after training: 1.0
User 29551 does not improve AUC. Reverting changes.
Training on augumented user 121399 20/50 current_auc = 1.0
User 121399 AUC after training: 1.0
User 121399 does not improve AUC. Reverting changes.
Training on augumented user 21770 21/50 current_auc = 1.0
User 21770 AUC after training: 1.0
User 21770 does not improve AUC. Reverting changes.
Training on augumented user 104895 22/50 current_auc = 1.0
User 104895 AUC after training: 1.0
User 104895 does not improve AUC. Reverting changes.
Training on augumented user 10630 23/50 current_auc = 1.0
User 10630 AUC after training: 1.0
User 10630 does not improve AUC. Reverting changes.
Training on augumented user 65447 24/50 current_auc = 1.0
User 65447 AUC after training: 1.0
User 65447 does not improve AUC. Reverting changes.
Training on augumented user 25931 25/50 current_auc = 1.0
User 25931 AUC after training: 1.0
User 25931 does not improve AUC. Reverting changes.
Training on augumented user 1668 26/50 current_auc = 1.0
User 1668 AUC after training: 1.0
User 1668 does not improve AUC. Reverting changes.
Training on augumented user 87416 27/50 current_auc = 1.0
User 87416 AUC after training: 1.0
User 87416 does not improve AUC. Reverting changes.
Training on augumented user 25492 28/50 current_auc = 1.0
User 25492 AUC after training: 1.0
User 25492 does not improve AUC. Reverting changes.
Training on augumented user 61393 29/50 current_auc = 1.0
User 61393 AUC after training: 1.0
User 61393 does not improve AUC. Reverting changes.
Training on augumented user 67890 30/50 current_auc = 1.0
User 67890 AUC after training: 1.0
User 67890 does not improve AUC. Reverting changes.
Training on augumented user 85146 31/50 current_auc = 1.0
User 85146 AUC after training: 1.0
User 85146 does not improve AUC. Reverting changes.
Training on augumented user 78453 32/50 current_auc = 1.0
User 78453 AUC after training: 1.0
User 78453 does not improve AUC. Reverting changes.
Training on augumented user 21898 33/50 current_auc = 1.0
User 21898 AUC after training: 1.0
User 21898 does not improve AUC. Reverting changes.
Training on augumented user 23144 34/50 current_auc = 1.0
User 23144 AUC after training: 1.0
User 23144 does not improve AUC. Reverting changes.
Training on augumented user 5791 35/50 current_auc = 1.0
User 5791 AUC after training: 1.0
User 5791 does not improve AUC. Reverting changes.
Training on augumented user 66203 36/50 current_auc = 1.0
User 66203 AUC after training: 1.0
User 66203 does not improve AUC. Reverting changes.
Training on augumented user 121421 37/50 current_auc = 1.0
User 121421 AUC after training: 1.0
User 121421 does not improve AUC. Reverting changes.
Training on augumented user 17847 38/50 current_auc = 1.0
User 17847 AUC after training: 1.0
User 17847 does not improve AUC. Reverting changes.
Training on augumented user 129008 39/50 current_auc = 1.0
User 129008 AUC after training: 1.0
User 129008 does not improve AUC. Reverting changes.
Training on augumented user 66480 40/50 current_auc = 1.0
User 66480 AUC after training: 1.0
User 66480 does not improve AUC. Reverting changes.
Training on augumented user 101177 41/50 current_auc = 1.0
User 101177 AUC after training: 1.0
User 101177 does not improve AUC. Reverting changes.
Training on augumented user 94108 42/50 current_auc = 1.0
User 94108 AUC after training: 1.0
User 94108 does not improve AUC. Reverting changes.
Training on augumented user 48448 43/50 current_auc = 1.0
User 48448 AUC after training: 1.0
User 48448 does not improve AUC. Reverting changes.
Training on augumented user 68611 44/50 current_auc = 1.0
User 68611 AUC after training: 1.0
User 68611 does not improve AUC. Reverting changes.
Training on augumented user 84939 45/50 current_auc = 1.0
User 84939 AUC after training: 1.0
User 84939 does not improve AUC. Reverting changes.
Training on augumented user 101263 46/50 current_auc = 1.0
User 101263 AUC after training: 1.0
User 101263 does not improve AUC. Reverting changes.
Training on augumented user 62064 47/50 current_auc = 1.0
User 62064 AUC after training: 1.0
User 62064 does not improve AUC. Reverting changes.
Training on augumented user 106430 48/50 current_auc = 1.0
User 106430 AUC after training: 1.0
User 106430 does not improve AUC. Reverting changes.
Training on augumented user 73217 49/50 current_auc = 1.0
User 73217 AUC after training: 1.0
User 73217 does not improve AUC. Reverting changes.
[2024-12-02 18:27:38.235969] start test user 71563 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:38.862763] start test user 71563 92/568 recall augumented users by random, augumented_users = [90128, 27473, 5822, 77053, 116680, 87851, 113376, 80549, 15060, 39501, 77669, 65857, 56593, 94512, 60905, 80102, 7189, 93723, 55579, 136835, 83452, 72558, 30720, 107757, 6550, 68364, 70411, 77592, 52543, 136174, 112615, 36619, 93554, 102578, 49811, 131111, 142, 57567, 104790, 7164, 51290, 76705, 41816, 90353, 80937, 9231, 98120, 128062, 37605, 7912]
[2024-12-02 18:27:38.907871] user = 71563 Cloud 92/568
[2024-12-02 18:27:38.953372] user = 71563 Local 92/568
[2024-12-02 18:27:39.118062] user = 71563 Local+ 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:42.083708] user = 71563 MPDA- 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.888888888888889
Training on augumented user 90128 0/50 current_auc = 0.888888888888889
User 90128 AUC after training: 0.888888888888889
User 90128 does not improve AUC. Reverting changes.
Training on augumented user 27473 1/50 current_auc = 0.888888888888889
User 27473 AUC after training: 0.888888888888889
User 27473 does not improve AUC. Reverting changes.
Training on augumented user 5822 2/50 current_auc = 0.888888888888889
User 5822 AUC after training: 0.888888888888889
User 5822 does not improve AUC. Reverting changes.
Training on augumented user 77053 3/50 current_auc = 0.888888888888889
User 77053 AUC after training: 0.888888888888889
User 77053 does not improve AUC. Reverting changes.
Training on augumented user 116680 4/50 current_auc = 0.888888888888889
User 116680 AUC after training: 0.888888888888889
User 116680 does not improve AUC. Reverting changes.
Training on augumented user 87851 5/50 current_auc = 0.888888888888889
User 87851 AUC after training: 0.888888888888889
User 87851 does not improve AUC. Reverting changes.
Training on augumented user 113376 6/50 current_auc = 0.888888888888889
User 113376 AUC after training: 0.888888888888889
User 113376 does not improve AUC. Reverting changes.
Training on augumented user 80549 7/50 current_auc = 0.888888888888889
User 80549 AUC after training: 0.888888888888889
User 80549 does not improve AUC. Reverting changes.
Training on augumented user 15060 8/50 current_auc = 0.888888888888889
User 15060 AUC after training: 0.888888888888889
User 15060 does not improve AUC. Reverting changes.
Training on augumented user 39501 9/50 current_auc = 0.888888888888889
User 39501 AUC after training: 0.888888888888889
User 39501 does not improve AUC. Reverting changes.
Training on augumented user 77669 10/50 current_auc = 0.888888888888889
User 77669 AUC after training: 0.888888888888889
User 77669 does not improve AUC. Reverting changes.
Training on augumented user 65857 11/50 current_auc = 0.888888888888889
User 65857 AUC after training: 0.888888888888889
User 65857 does not improve AUC. Reverting changes.
Training on augumented user 56593 12/50 current_auc = 0.888888888888889
User 56593 AUC after training: 0.888888888888889
User 56593 does not improve AUC. Reverting changes.
Training on augumented user 94512 13/50 current_auc = 0.888888888888889
User 94512 AUC after training: 0.888888888888889
User 94512 does not improve AUC. Reverting changes.
Training on augumented user 60905 14/50 current_auc = 0.888888888888889
User 60905 AUC after training: 0.888888888888889
User 60905 does not improve AUC. Reverting changes.
Training on augumented user 80102 15/50 current_auc = 0.888888888888889
User 80102 AUC after training: 0.888888888888889
User 80102 does not improve AUC. Reverting changes.
Training on augumented user 7189 16/50 current_auc = 0.888888888888889
User 7189 AUC after training: 0.888888888888889
User 7189 does not improve AUC. Reverting changes.
Training on augumented user 93723 17/50 current_auc = 0.888888888888889
User 93723 AUC after training: 0.888888888888889
User 93723 does not improve AUC. Reverting changes.
Training on augumented user 55579 18/50 current_auc = 0.888888888888889
User 55579 AUC after training: 0.888888888888889
User 55579 does not improve AUC. Reverting changes.
Training on augumented user 136835 19/50 current_auc = 0.888888888888889
User 136835 AUC after training: 0.888888888888889
User 136835 does not improve AUC. Reverting changes.
Training on augumented user 83452 20/50 current_auc = 0.888888888888889
User 83452 AUC after training: 0.888888888888889
User 83452 does not improve AUC. Reverting changes.
Training on augumented user 72558 21/50 current_auc = 0.888888888888889
User 72558 AUC after training: 0.888888888888889
User 72558 does not improve AUC. Reverting changes.
Training on augumented user 30720 22/50 current_auc = 0.888888888888889
User 30720 AUC after training: 0.888888888888889
User 30720 does not improve AUC. Reverting changes.
Training on augumented user 107757 23/50 current_auc = 0.888888888888889
User 107757 AUC after training: 0.888888888888889
User 107757 does not improve AUC. Reverting changes.
Training on augumented user 6550 24/50 current_auc = 0.888888888888889
User 6550 AUC after training: 0.888888888888889
User 6550 does not improve AUC. Reverting changes.
Training on augumented user 68364 25/50 current_auc = 0.888888888888889
User 68364 AUC after training: 0.888888888888889
User 68364 does not improve AUC. Reverting changes.
Training on augumented user 70411 26/50 current_auc = 0.888888888888889
User 70411 AUC after training: 0.888888888888889
User 70411 does not improve AUC. Reverting changes.
Training on augumented user 77592 27/50 current_auc = 0.888888888888889
User 77592 AUC after training: 0.888888888888889
User 77592 does not improve AUC. Reverting changes.
Training on augumented user 52543 28/50 current_auc = 0.888888888888889
User 52543 AUC after training: 0.888888888888889
User 52543 does not improve AUC. Reverting changes.
Training on augumented user 136174 29/50 current_auc = 0.888888888888889
User 136174 AUC after training: 0.888888888888889
User 136174 does not improve AUC. Reverting changes.
Training on augumented user 112615 30/50 current_auc = 0.888888888888889
User 112615 AUC after training: 0.888888888888889
User 112615 does not improve AUC. Reverting changes.
Training on augumented user 36619 31/50 current_auc = 0.888888888888889
User 36619 AUC after training: 0.888888888888889
User 36619 does not improve AUC. Reverting changes.
Training on augumented user 93554 32/50 current_auc = 0.888888888888889
User 93554 AUC after training: 0.888888888888889
User 93554 does not improve AUC. Reverting changes.
Training on augumented user 102578 33/50 current_auc = 0.888888888888889
User 102578 AUC after training: 0.888888888888889
User 102578 does not improve AUC. Reverting changes.
Training on augumented user 49811 34/50 current_auc = 0.888888888888889
User 49811 AUC after training: 0.888888888888889
User 49811 does not improve AUC. Reverting changes.
Training on augumented user 131111 35/50 current_auc = 0.888888888888889
User 131111 AUC after training: 0.888888888888889
User 131111 does not improve AUC. Reverting changes.
Training on augumented user 142 36/50 current_auc = 0.888888888888889
User 142 AUC after training: 0.888888888888889
User 142 does not improve AUC. Reverting changes.
Training on augumented user 57567 37/50 current_auc = 0.888888888888889
User 57567 AUC after training: 0.888888888888889
User 57567 does not improve AUC. Reverting changes.
Training on augumented user 104790 38/50 current_auc = 0.888888888888889
User 104790 AUC after training: 0.888888888888889
User 104790 does not improve AUC. Reverting changes.
Training on augumented user 7164 39/50 current_auc = 0.888888888888889
User 7164 AUC after training: 0.888888888888889
User 7164 does not improve AUC. Reverting changes.
Training on augumented user 51290 40/50 current_auc = 0.888888888888889
User 51290 AUC after training: 0.888888888888889
User 51290 does not improve AUC. Reverting changes.
Training on augumented user 76705 41/50 current_auc = 0.888888888888889
User 76705 AUC after training: 0.888888888888889
User 76705 does not improve AUC. Reverting changes.
Training on augumented user 41816 42/50 current_auc = 0.888888888888889
User 41816 AUC after training: 0.888888888888889
User 41816 does not improve AUC. Reverting changes.
Training on augumented user 90353 43/50 current_auc = 0.888888888888889
User 90353 AUC after training: 0.888888888888889
User 90353 does not improve AUC. Reverting changes.
Training on augumented user 80937 44/50 current_auc = 0.888888888888889
User 80937 AUC after training: 0.888888888888889
User 80937 does not improve AUC. Reverting changes.
Training on augumented user 9231 45/50 current_auc = 0.888888888888889
User 9231 AUC after training: 0.888888888888889
User 9231 does not improve AUC. Reverting changes.
Training on augumented user 98120 46/50 current_auc = 0.888888888888889
User 98120 AUC after training: 0.888888888888889
User 98120 does not improve AUC. Reverting changes.
Training on augumented user 128062 47/50 current_auc = 0.888888888888889
User 128062 AUC after training: 0.888888888888889
User 128062 does not improve AUC. Reverting changes.
Training on augumented user 37605 48/50 current_auc = 0.888888888888889
User 37605 AUC after training: 0.888888888888889
User 37605 does not improve AUC. Reverting changes.
Training on augumented user 7912 49/50 current_auc = 0.888888888888889
User 7912 AUC after training: 0.888888888888889
User 7912 does not improve AUC. Reverting changes.
[2024-12-02 18:28:08.106634] start test user 71581 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:08.779960] start test user 71581 93/568 recall augumented users by random, augumented_users = [25013, 14634, 23609, 87511, 25605, 69471, 88163, 49387, 64845, 109466, 31023, 47781, 40827, 80431, 50677, 122226, 121952, 56865, 127064, 46049, 64806, 134929, 6064, 71871, 78907, 106613, 91150, 130535, 47130, 87386, 100164, 80362, 41343, 69779, 95474, 66364, 39181, 43326, 9642, 107259, 107506, 100972, 107667, 16471, 129912, 128920, 24674, 9843, 120008, 73474]
[2024-12-02 18:28:08.809073] user = 71581 Cloud 93/568
[2024-12-02 18:28:08.826843] user = 71581 Local 93/568
[2024-12-02 18:28:08.877348] user = 71581 Local+ 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:11.379907] user = 71581 MPDA- 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.38749999999999996
Training on augumented user 25013 0/50 current_auc = 0.38749999999999996
User 25013 AUC after training: 0.375
User 25013 does not improve AUC. Reverting changes.
Training on augumented user 14634 1/50 current_auc = 0.38749999999999996
User 14634 AUC after training: 0.375
User 14634 does not improve AUC. Reverting changes.
Training on augumented user 23609 2/50 current_auc = 0.38749999999999996
User 23609 AUC after training: 0.38749999999999996
User 23609 does not improve AUC. Reverting changes.
Training on augumented user 87511 3/50 current_auc = 0.38749999999999996
User 87511 AUC after training: 0.4
User 87511 improves AUC. Keeping the model.
Training on augumented user 25605 4/50 current_auc = 0.4
User 25605 AUC after training: 0.4
User 25605 does not improve AUC. Reverting changes.
Training on augumented user 69471 5/50 current_auc = 0.4
User 69471 AUC after training: 0.4
User 69471 does not improve AUC. Reverting changes.
Training on augumented user 88163 6/50 current_auc = 0.4
User 88163 AUC after training: 0.3875
User 88163 does not improve AUC. Reverting changes.
Training on augumented user 49387 7/50 current_auc = 0.4
User 49387 AUC after training: 0.4
User 49387 does not improve AUC. Reverting changes.
Training on augumented user 64845 8/50 current_auc = 0.4
User 64845 AUC after training: 0.4
User 64845 does not improve AUC. Reverting changes.
Training on augumented user 109466 9/50 current_auc = 0.4
User 109466 AUC after training: 0.4
User 109466 does not improve AUC. Reverting changes.
Training on augumented user 31023 10/50 current_auc = 0.4
User 31023 AUC after training: 0.4
User 31023 does not improve AUC. Reverting changes.
Training on augumented user 47781 11/50 current_auc = 0.4
User 47781 AUC after training: 0.3875
User 47781 does not improve AUC. Reverting changes.
Training on augumented user 40827 12/50 current_auc = 0.4
User 40827 AUC after training: 0.4
User 40827 does not improve AUC. Reverting changes.
Training on augumented user 80431 13/50 current_auc = 0.4
User 80431 AUC after training: 0.4
User 80431 does not improve AUC. Reverting changes.
Training on augumented user 50677 14/50 current_auc = 0.4
User 50677 AUC after training: 0.3875
User 50677 does not improve AUC. Reverting changes.
Training on augumented user 122226 15/50 current_auc = 0.4
User 122226 AUC after training: 0.4
User 122226 does not improve AUC. Reverting changes.
Training on augumented user 121952 16/50 current_auc = 0.4
User 121952 AUC after training: 0.4
User 121952 does not improve AUC. Reverting changes.
Training on augumented user 56865 17/50 current_auc = 0.4
User 56865 AUC after training: 0.3875
User 56865 does not improve AUC. Reverting changes.
Training on augumented user 127064 18/50 current_auc = 0.4
User 127064 AUC after training: 0.4
User 127064 does not improve AUC. Reverting changes.
Training on augumented user 46049 19/50 current_auc = 0.4
User 46049 AUC after training: 0.3875
User 46049 does not improve AUC. Reverting changes.
Training on augumented user 64806 20/50 current_auc = 0.4
User 64806 AUC after training: 0.4
User 64806 does not improve AUC. Reverting changes.
Training on augumented user 134929 21/50 current_auc = 0.4
User 134929 AUC after training: 0.3875
User 134929 does not improve AUC. Reverting changes.
Training on augumented user 6064 22/50 current_auc = 0.4
User 6064 AUC after training: 0.3875
User 6064 does not improve AUC. Reverting changes.
Training on augumented user 71871 23/50 current_auc = 0.4
User 71871 AUC after training: 0.3875
User 71871 does not improve AUC. Reverting changes.
Training on augumented user 78907 24/50 current_auc = 0.4
User 78907 AUC after training: 0.4
User 78907 does not improve AUC. Reverting changes.
Training on augumented user 106613 25/50 current_auc = 0.4
User 106613 AUC after training: 0.3875
User 106613 does not improve AUC. Reverting changes.
Training on augumented user 91150 26/50 current_auc = 0.4
User 91150 AUC after training: 0.4
User 91150 does not improve AUC. Reverting changes.
Training on augumented user 130535 27/50 current_auc = 0.4
User 130535 AUC after training: 0.4
User 130535 does not improve AUC. Reverting changes.
Training on augumented user 47130 28/50 current_auc = 0.4
User 47130 AUC after training: 0.3875
User 47130 does not improve AUC. Reverting changes.
Training on augumented user 87386 29/50 current_auc = 0.4
User 87386 AUC after training: 0.4
User 87386 does not improve AUC. Reverting changes.
Training on augumented user 100164 30/50 current_auc = 0.4
User 100164 AUC after training: 0.4
User 100164 does not improve AUC. Reverting changes.
Training on augumented user 80362 31/50 current_auc = 0.4
User 80362 AUC after training: 0.4
User 80362 does not improve AUC. Reverting changes.
Training on augumented user 41343 32/50 current_auc = 0.4
User 41343 AUC after training: 0.4
User 41343 does not improve AUC. Reverting changes.
Training on augumented user 69779 33/50 current_auc = 0.4
User 69779 AUC after training: 0.4
User 69779 does not improve AUC. Reverting changes.
Training on augumented user 95474 34/50 current_auc = 0.4
User 95474 AUC after training: 0.4
User 95474 does not improve AUC. Reverting changes.
Training on augumented user 66364 35/50 current_auc = 0.4
User 66364 AUC after training: 0.4
User 66364 does not improve AUC. Reverting changes.
Training on augumented user 39181 36/50 current_auc = 0.4
User 39181 AUC after training: 0.4
User 39181 does not improve AUC. Reverting changes.
Training on augumented user 43326 37/50 current_auc = 0.4
User 43326 AUC after training: 0.3875
User 43326 does not improve AUC. Reverting changes.
Training on augumented user 9642 38/50 current_auc = 0.4
User 9642 AUC after training: 0.3875
User 9642 does not improve AUC. Reverting changes.
Training on augumented user 107259 39/50 current_auc = 0.4
User 107259 AUC after training: 0.4
User 107259 does not improve AUC. Reverting changes.
Training on augumented user 107506 40/50 current_auc = 0.4
User 107506 AUC after training: 0.4
User 107506 does not improve AUC. Reverting changes.
Training on augumented user 100972 41/50 current_auc = 0.4
User 100972 AUC after training: 0.4
User 100972 does not improve AUC. Reverting changes.
Training on augumented user 107667 42/50 current_auc = 0.4
User 107667 AUC after training: 0.4
User 107667 does not improve AUC. Reverting changes.
Training on augumented user 16471 43/50 current_auc = 0.4
User 16471 AUC after training: 0.4
User 16471 does not improve AUC. Reverting changes.
Training on augumented user 129912 44/50 current_auc = 0.4
User 129912 AUC after training: 0.4
User 129912 does not improve AUC. Reverting changes.
Training on augumented user 128920 45/50 current_auc = 0.4
User 128920 AUC after training: 0.4
User 128920 does not improve AUC. Reverting changes.
Training on augumented user 24674 46/50 current_auc = 0.4
User 24674 AUC after training: 0.4
User 24674 does not improve AUC. Reverting changes.
Training on augumented user 9843 47/50 current_auc = 0.4
User 9843 AUC after training: 0.3875
User 9843 does not improve AUC. Reverting changes.
Training on augumented user 120008 48/50 current_auc = 0.4
User 120008 AUC after training: 0.4
User 120008 does not improve AUC. Reverting changes.
Training on augumented user 73474 49/50 current_auc = 0.4
User 73474 AUC after training: 0.4
User 73474 does not improve AUC. Reverting changes.
[2024-12-02 18:28:38.954398] start test user 71631 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:39.401676] start test user 71631 94/568 recall augumented users by random, augumented_users = [117935, 9616, 95935, 130404, 105695, 33101, 81386, 116525, 128757, 94039, 110446, 57105, 75476, 11010, 88599, 15936, 75469, 10592, 126148, 13792, 115329, 49007, 41942, 94101, 96049, 82198, 19388, 116758, 118268, 3928, 26116, 59587, 83177, 131018, 36505, 34473, 78183, 93210, 57318, 60136, 96073, 4574, 59082, 62363, 36901, 64047, 54868, 99819, 76189, 122797]
[2024-12-02 18:28:39.416053] user = 71631 Cloud 94/568
[2024-12-02 18:28:39.425213] user = 71631 Local 94/568
[2024-12-02 18:28:39.450883] user = 71631 Local+ 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:41.085041] user = 71631 MPDA- 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.23636363636363636
Training on augumented user 117935 0/50 current_auc = 0.23636363636363636
User 117935 AUC after training: 0.23636363636363636
User 117935 does not improve AUC. Reverting changes.
Training on augumented user 9616 1/50 current_auc = 0.23636363636363636
User 9616 AUC after training: 0.23636363636363636
User 9616 does not improve AUC. Reverting changes.
Training on augumented user 95935 2/50 current_auc = 0.23636363636363636
User 95935 AUC after training: 0.23636363636363636
User 95935 does not improve AUC. Reverting changes.
Training on augumented user 130404 3/50 current_auc = 0.23636363636363636
User 130404 AUC after training: 0.23636363636363636
User 130404 does not improve AUC. Reverting changes.
Training on augumented user 105695 4/50 current_auc = 0.23636363636363636
User 105695 AUC after training: 0.23636363636363636
User 105695 does not improve AUC. Reverting changes.
Training on augumented user 33101 5/50 current_auc = 0.23636363636363636
User 33101 AUC after training: 0.23636363636363636
User 33101 does not improve AUC. Reverting changes.
Training on augumented user 81386 6/50 current_auc = 0.23636363636363636
User 81386 AUC after training: 0.23636363636363636
User 81386 does not improve AUC. Reverting changes.
Training on augumented user 116525 7/50 current_auc = 0.23636363636363636
User 116525 AUC after training: 0.23636363636363636
User 116525 does not improve AUC. Reverting changes.
Training on augumented user 128757 8/50 current_auc = 0.23636363636363636
User 128757 AUC after training: 0.23636363636363636
User 128757 does not improve AUC. Reverting changes.
Training on augumented user 94039 9/50 current_auc = 0.23636363636363636
User 94039 AUC after training: 0.23636363636363636
User 94039 does not improve AUC. Reverting changes.
Training on augumented user 110446 10/50 current_auc = 0.23636363636363636
User 110446 AUC after training: 0.23636363636363636
User 110446 does not improve AUC. Reverting changes.
Training on augumented user 57105 11/50 current_auc = 0.23636363636363636
User 57105 AUC after training: 0.23636363636363636
User 57105 does not improve AUC. Reverting changes.
Training on augumented user 75476 12/50 current_auc = 0.23636363636363636
User 75476 AUC after training: 0.23636363636363636
User 75476 does not improve AUC. Reverting changes.
Training on augumented user 11010 13/50 current_auc = 0.23636363636363636
User 11010 AUC after training: 0.23636363636363636
User 11010 does not improve AUC. Reverting changes.
Training on augumented user 88599 14/50 current_auc = 0.23636363636363636
User 88599 AUC after training: 0.23636363636363636
User 88599 does not improve AUC. Reverting changes.
Training on augumented user 15936 15/50 current_auc = 0.23636363636363636
User 15936 AUC after training: 0.23636363636363636
User 15936 does not improve AUC. Reverting changes.
Training on augumented user 75469 16/50 current_auc = 0.23636363636363636
User 75469 AUC after training: 0.23636363636363636
User 75469 does not improve AUC. Reverting changes.
Training on augumented user 10592 17/50 current_auc = 0.23636363636363636
User 10592 AUC after training: 0.23636363636363636
User 10592 does not improve AUC. Reverting changes.
Training on augumented user 126148 18/50 current_auc = 0.23636363636363636
User 126148 AUC after training: 0.23636363636363636
User 126148 does not improve AUC. Reverting changes.
Training on augumented user 13792 19/50 current_auc = 0.23636363636363636
User 13792 AUC after training: 0.23636363636363636
User 13792 does not improve AUC. Reverting changes.
Training on augumented user 115329 20/50 current_auc = 0.23636363636363636
User 115329 AUC after training: 0.23636363636363636
User 115329 does not improve AUC. Reverting changes.
Training on augumented user 49007 21/50 current_auc = 0.23636363636363636
User 49007 AUC after training: 0.23636363636363636
User 49007 does not improve AUC. Reverting changes.
Training on augumented user 41942 22/50 current_auc = 0.23636363636363636
User 41942 AUC after training: 0.23636363636363636
User 41942 does not improve AUC. Reverting changes.
Training on augumented user 94101 23/50 current_auc = 0.23636363636363636
User 94101 AUC after training: 0.23636363636363636
User 94101 does not improve AUC. Reverting changes.
Training on augumented user 96049 24/50 current_auc = 0.23636363636363636
User 96049 AUC after training: 0.23636363636363636
User 96049 does not improve AUC. Reverting changes.
Training on augumented user 82198 25/50 current_auc = 0.23636363636363636
User 82198 AUC after training: 0.23636363636363636
User 82198 does not improve AUC. Reverting changes.
Training on augumented user 19388 26/50 current_auc = 0.23636363636363636
User 19388 AUC after training: 0.23636363636363636
User 19388 does not improve AUC. Reverting changes.
Training on augumented user 116758 27/50 current_auc = 0.23636363636363636
User 116758 AUC after training: 0.23636363636363636
User 116758 does not improve AUC. Reverting changes.
Training on augumented user 118268 28/50 current_auc = 0.23636363636363636
User 118268 AUC after training: 0.23636363636363636
User 118268 does not improve AUC. Reverting changes.
Training on augumented user 3928 29/50 current_auc = 0.23636363636363636
User 3928 AUC after training: 0.23636363636363636
User 3928 does not improve AUC. Reverting changes.
Training on augumented user 26116 30/50 current_auc = 0.23636363636363636
User 26116 AUC after training: 0.23636363636363636
User 26116 does not improve AUC. Reverting changes.
Training on augumented user 59587 31/50 current_auc = 0.23636363636363636
User 59587 AUC after training: 0.23636363636363636
User 59587 does not improve AUC. Reverting changes.
Training on augumented user 83177 32/50 current_auc = 0.23636363636363636
User 83177 AUC after training: 0.23636363636363636
User 83177 does not improve AUC. Reverting changes.
Training on augumented user 131018 33/50 current_auc = 0.23636363636363636
User 131018 AUC after training: 0.23636363636363636
User 131018 does not improve AUC. Reverting changes.
Training on augumented user 36505 34/50 current_auc = 0.23636363636363636
User 36505 AUC after training: 0.23636363636363636
User 36505 does not improve AUC. Reverting changes.
Training on augumented user 34473 35/50 current_auc = 0.23636363636363636
User 34473 AUC after training: 0.23636363636363636
User 34473 does not improve AUC. Reverting changes.
Training on augumented user 78183 36/50 current_auc = 0.23636363636363636
User 78183 AUC after training: 0.23636363636363636
User 78183 does not improve AUC. Reverting changes.
Training on augumented user 93210 37/50 current_auc = 0.23636363636363636
User 93210 AUC after training: 0.23636363636363636
User 93210 does not improve AUC. Reverting changes.
Training on augumented user 57318 38/50 current_auc = 0.23636363636363636
User 57318 AUC after training: 0.23636363636363636
User 57318 does not improve AUC. Reverting changes.
Training on augumented user 60136 39/50 current_auc = 0.23636363636363636
User 60136 AUC after training: 0.23636363636363636
User 60136 does not improve AUC. Reverting changes.
Training on augumented user 96073 40/50 current_auc = 0.23636363636363636
User 96073 AUC after training: 0.23636363636363636
User 96073 does not improve AUC. Reverting changes.
Training on augumented user 4574 41/50 current_auc = 0.23636363636363636
User 4574 AUC after training: 0.23636363636363636
User 4574 does not improve AUC. Reverting changes.
Training on augumented user 59082 42/50 current_auc = 0.23636363636363636
User 59082 AUC after training: 0.23636363636363636
User 59082 does not improve AUC. Reverting changes.
Training on augumented user 62363 43/50 current_auc = 0.23636363636363636
User 62363 AUC after training: 0.23636363636363636
User 62363 does not improve AUC. Reverting changes.
Training on augumented user 36901 44/50 current_auc = 0.23636363636363636
User 36901 AUC after training: 0.23636363636363636
User 36901 does not improve AUC. Reverting changes.
Training on augumented user 64047 45/50 current_auc = 0.23636363636363636
User 64047 AUC after training: 0.23636363636363636
User 64047 does not improve AUC. Reverting changes.
Training on augumented user 54868 46/50 current_auc = 0.23636363636363636
User 54868 AUC after training: 0.23636363636363636
User 54868 does not improve AUC. Reverting changes.
Training on augumented user 99819 47/50 current_auc = 0.23636363636363636
User 99819 AUC after training: 0.23636363636363636
User 99819 does not improve AUC. Reverting changes.
Training on augumented user 76189 48/50 current_auc = 0.23636363636363636
User 76189 AUC after training: 0.23636363636363636
User 76189 does not improve AUC. Reverting changes.
Training on augumented user 122797 49/50 current_auc = 0.23636363636363636
User 122797 AUC after training: 0.23636363636363636
User 122797 does not improve AUC. Reverting changes.
[2024-12-02 18:29:09.702171] start test user 71650 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:10.230361] start test user 71650 95/568 recall augumented users by random, augumented_users = [110336, 130347, 123977, 108719, 11368, 127054, 56278, 57297, 90593, 81992, 11481, 116868, 32172, 22414, 6090, 59889, 106121, 10779, 10960, 111083, 21725, 9466, 11320, 116015, 92803, 29245, 122965, 57516, 104436, 50398, 49314, 46876, 16788, 73289, 69001, 96629, 87539, 57053, 17326, 67420, 89902, 54289, 123204, 84770, 52163, 114071, 97424, 58226, 120762, 87244]
[2024-12-02 18:29:10.245107] user = 71650 Cloud 95/568
[2024-12-02 18:29:10.255168] user = 71650 Local 95/568
[2024-12-02 18:29:10.297027] user = 71650 Local+ 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:12.683112] user = 71650 MPDA- 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6160714285714286
Training on augumented user 110336 0/50 current_auc = 0.6160714285714286
User 110336 AUC after training: 0.6160714285714286
User 110336 does not improve AUC. Reverting changes.
Training on augumented user 130347 1/50 current_auc = 0.6160714285714286
User 130347 AUC after training: 0.6160714285714286
User 130347 does not improve AUC. Reverting changes.
Training on augumented user 123977 2/50 current_auc = 0.6160714285714286
User 123977 AUC after training: 0.6160714285714286
User 123977 does not improve AUC. Reverting changes.
Training on augumented user 108719 3/50 current_auc = 0.6160714285714286
User 108719 AUC after training: 0.6160714285714286
User 108719 does not improve AUC. Reverting changes.
Training on augumented user 11368 4/50 current_auc = 0.6160714285714286
User 11368 AUC after training: 0.6160714285714286
User 11368 does not improve AUC. Reverting changes.
Training on augumented user 127054 5/50 current_auc = 0.6160714285714286
User 127054 AUC after training: 0.6160714285714286
User 127054 does not improve AUC. Reverting changes.
Training on augumented user 56278 6/50 current_auc = 0.6160714285714286
User 56278 AUC after training: 0.6160714285714286
User 56278 does not improve AUC. Reverting changes.
Training on augumented user 57297 7/50 current_auc = 0.6160714285714286
User 57297 AUC after training: 0.6160714285714286
User 57297 does not improve AUC. Reverting changes.
Training on augumented user 90593 8/50 current_auc = 0.6160714285714286
User 90593 AUC after training: 0.5892857142857142
User 90593 does not improve AUC. Reverting changes.
Training on augumented user 81992 9/50 current_auc = 0.6160714285714286
User 81992 AUC after training: 0.6160714285714286
User 81992 does not improve AUC. Reverting changes.
Training on augumented user 11481 10/50 current_auc = 0.6160714285714286
User 11481 AUC after training: 0.6160714285714286
User 11481 does not improve AUC. Reverting changes.
Training on augumented user 116868 11/50 current_auc = 0.6160714285714286
User 116868 AUC after training: 0.6071428571428572
User 116868 does not improve AUC. Reverting changes.
Training on augumented user 32172 12/50 current_auc = 0.6160714285714286
User 32172 AUC after training: 0.6160714285714286
User 32172 does not improve AUC. Reverting changes.
Training on augumented user 22414 13/50 current_auc = 0.6160714285714286
User 22414 AUC after training: 0.6160714285714286
User 22414 does not improve AUC. Reverting changes.
Training on augumented user 6090 14/50 current_auc = 0.6160714285714286
User 6090 AUC after training: 0.6160714285714286
User 6090 does not improve AUC. Reverting changes.
Training on augumented user 59889 15/50 current_auc = 0.6160714285714286
User 59889 AUC after training: 0.5982142857142857
User 59889 does not improve AUC. Reverting changes.
Training on augumented user 106121 16/50 current_auc = 0.6160714285714286
User 106121 AUC after training: 0.6160714285714286
User 106121 does not improve AUC. Reverting changes.
Training on augumented user 10779 17/50 current_auc = 0.6160714285714286
User 10779 AUC after training: 0.5892857142857142
User 10779 does not improve AUC. Reverting changes.
Training on augumented user 10960 18/50 current_auc = 0.6160714285714286
User 10960 AUC after training: 0.5982142857142857
User 10960 does not improve AUC. Reverting changes.
Training on augumented user 111083 19/50 current_auc = 0.6160714285714286
User 111083 AUC after training: 0.6160714285714286
User 111083 does not improve AUC. Reverting changes.
Training on augumented user 21725 20/50 current_auc = 0.6160714285714286
User 21725 AUC after training: 0.6160714285714286
User 21725 does not improve AUC. Reverting changes.
Training on augumented user 9466 21/50 current_auc = 0.6160714285714286
User 9466 AUC after training: 0.6160714285714286
User 9466 does not improve AUC. Reverting changes.
Training on augumented user 11320 22/50 current_auc = 0.6160714285714286
User 11320 AUC after training: 0.5892857142857142
User 11320 does not improve AUC. Reverting changes.
Training on augumented user 116015 23/50 current_auc = 0.6160714285714286
User 116015 AUC after training: 0.6160714285714286
User 116015 does not improve AUC. Reverting changes.
Training on augumented user 92803 24/50 current_auc = 0.6160714285714286
User 92803 AUC after training: 0.6071428571428572
User 92803 does not improve AUC. Reverting changes.
Training on augumented user 29245 25/50 current_auc = 0.6160714285714286
User 29245 AUC after training: 0.6160714285714286
User 29245 does not improve AUC. Reverting changes.
Training on augumented user 122965 26/50 current_auc = 0.6160714285714286
User 122965 AUC after training: 0.6160714285714286
User 122965 does not improve AUC. Reverting changes.
Training on augumented user 57516 27/50 current_auc = 0.6160714285714286
User 57516 AUC after training: 0.6071428571428571
User 57516 does not improve AUC. Reverting changes.
Training on augumented user 104436 28/50 current_auc = 0.6160714285714286
User 104436 AUC after training: 0.6160714285714286
User 104436 does not improve AUC. Reverting changes.
Training on augumented user 50398 29/50 current_auc = 0.6160714285714286
User 50398 AUC after training: 0.6160714285714286
User 50398 does not improve AUC. Reverting changes.
Training on augumented user 49314 30/50 current_auc = 0.6160714285714286
User 49314 AUC after training: 0.6160714285714286
User 49314 does not improve AUC. Reverting changes.
Training on augumented user 46876 31/50 current_auc = 0.6160714285714286
User 46876 AUC after training: 0.5982142857142857
User 46876 does not improve AUC. Reverting changes.
Training on augumented user 16788 32/50 current_auc = 0.6160714285714286
User 16788 AUC after training: 0.6160714285714286
User 16788 does not improve AUC. Reverting changes.
Training on augumented user 73289 33/50 current_auc = 0.6160714285714286
User 73289 AUC after training: 0.5892857142857142
User 73289 does not improve AUC. Reverting changes.
Training on augumented user 69001 34/50 current_auc = 0.6160714285714286
User 69001 AUC after training: 0.5803571428571428
User 69001 does not improve AUC. Reverting changes.
Training on augumented user 96629 35/50 current_auc = 0.6160714285714286
User 96629 AUC after training: 0.6160714285714286
User 96629 does not improve AUC. Reverting changes.
Training on augumented user 87539 36/50 current_auc = 0.6160714285714286
User 87539 AUC after training: 0.6160714285714286
User 87539 does not improve AUC. Reverting changes.
Training on augumented user 57053 37/50 current_auc = 0.6160714285714286
User 57053 AUC after training: 0.6160714285714286
User 57053 does not improve AUC. Reverting changes.
Training on augumented user 17326 38/50 current_auc = 0.6160714285714286
User 17326 AUC after training: 0.6071428571428572
User 17326 does not improve AUC. Reverting changes.
Training on augumented user 67420 39/50 current_auc = 0.6160714285714286
User 67420 AUC after training: 0.6160714285714286
User 67420 does not improve AUC. Reverting changes.
Training on augumented user 89902 40/50 current_auc = 0.6160714285714286
User 89902 AUC after training: 0.6160714285714286
User 89902 does not improve AUC. Reverting changes.
Training on augumented user 54289 41/50 current_auc = 0.6160714285714286
User 54289 AUC after training: 0.6071428571428572
User 54289 does not improve AUC. Reverting changes.
Training on augumented user 123204 42/50 current_auc = 0.6160714285714286
User 123204 AUC after training: 0.6160714285714286
User 123204 does not improve AUC. Reverting changes.
Training on augumented user 84770 43/50 current_auc = 0.6160714285714286
User 84770 AUC after training: 0.6071428571428572
User 84770 does not improve AUC. Reverting changes.
Training on augumented user 52163 44/50 current_auc = 0.6160714285714286
User 52163 AUC after training: 0.6160714285714286
User 52163 does not improve AUC. Reverting changes.
Training on augumented user 114071 45/50 current_auc = 0.6160714285714286
User 114071 AUC after training: 0.6160714285714286
User 114071 does not improve AUC. Reverting changes.
Training on augumented user 97424 46/50 current_auc = 0.6160714285714286
User 97424 AUC after training: 0.6071428571428572
User 97424 does not improve AUC. Reverting changes.
Training on augumented user 58226 47/50 current_auc = 0.6160714285714286
User 58226 AUC after training: 0.6071428571428572
User 58226 does not improve AUC. Reverting changes.
Training on augumented user 120762 48/50 current_auc = 0.6160714285714286
User 120762 AUC after training: 0.6160714285714286
User 120762 does not improve AUC. Reverting changes.
Training on augumented user 87244 49/50 current_auc = 0.6160714285714286
User 87244 AUC after training: 0.6160714285714286
User 87244 does not improve AUC. Reverting changes.
[2024-12-02 18:29:40.372856] start test user 71651 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:40.991975] start test user 71651 96/568 recall augumented users by random, augumented_users = [22303, 22462, 103215, 28281, 57903, 23341, 89882, 124883, 83090, 29820, 70240, 1007, 80609, 103496, 63284, 7110, 102816, 126514, 58448, 64390, 75555, 64063, 109298, 6746, 18936, 130959, 70333, 91098, 137833, 30886, 80286, 45306, 3819, 98231, 50597, 75240, 79351, 117911, 64360, 12360, 78003, 37049, 120020, 101549, 31313, 6471, 109652, 135364, 132287, 61015]
[2024-12-02 18:29:41.008956] user = 71651 Cloud 96/568
[2024-12-02 18:29:41.021018] user = 71651 Local 96/568
[2024-12-02 18:29:41.045878] user = 71651 Local+ 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:44.884634] user = 71651 MPDA- 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5366666666666666
Training on augumented user 22303 0/50 current_auc = 0.5366666666666666
User 22303 AUC after training: 0.5333333333333334
User 22303 does not improve AUC. Reverting changes.
Training on augumented user 22462 1/50 current_auc = 0.5366666666666666
User 22462 AUC after training: 0.5333333333333333
User 22462 does not improve AUC. Reverting changes.
Training on augumented user 103215 2/50 current_auc = 0.5366666666666666
User 103215 AUC after training: 0.53
User 103215 does not improve AUC. Reverting changes.
Training on augumented user 28281 3/50 current_auc = 0.5366666666666666
User 28281 AUC after training: 0.5366666666666666
User 28281 does not improve AUC. Reverting changes.
Training on augumented user 57903 4/50 current_auc = 0.5366666666666666
User 57903 AUC after training: 0.5333333333333333
User 57903 does not improve AUC. Reverting changes.
Training on augumented user 23341 5/50 current_auc = 0.5366666666666666
User 23341 AUC after training: 0.5366666666666666
User 23341 does not improve AUC. Reverting changes.
Training on augumented user 89882 6/50 current_auc = 0.5366666666666666
User 89882 AUC after training: 0.5366666666666666
User 89882 does not improve AUC. Reverting changes.
Training on augumented user 124883 7/50 current_auc = 0.5366666666666666
User 124883 AUC after training: 0.5366666666666666
User 124883 does not improve AUC. Reverting changes.
Training on augumented user 83090 8/50 current_auc = 0.5366666666666666
User 83090 AUC after training: 0.5333333333333333
User 83090 does not improve AUC. Reverting changes.
Training on augumented user 29820 9/50 current_auc = 0.5366666666666666
User 29820 AUC after training: 0.5366666666666666
User 29820 does not improve AUC. Reverting changes.
Training on augumented user 70240 10/50 current_auc = 0.5366666666666666
User 70240 AUC after training: 0.5366666666666666
User 70240 does not improve AUC. Reverting changes.
Training on augumented user 1007 11/50 current_auc = 0.5366666666666666
User 1007 AUC after training: 0.5433333333333333
User 1007 improves AUC. Keeping the model.
Training on augumented user 80609 12/50 current_auc = 0.5433333333333333
User 80609 AUC after training: 0.54
User 80609 does not improve AUC. Reverting changes.
Training on augumented user 103496 13/50 current_auc = 0.5433333333333333
User 103496 AUC after training: 0.5433333333333333
User 103496 does not improve AUC. Reverting changes.
Training on augumented user 63284 14/50 current_auc = 0.5433333333333333
User 63284 AUC after training: 0.54
User 63284 does not improve AUC. Reverting changes.
Training on augumented user 7110 15/50 current_auc = 0.5433333333333333
User 7110 AUC after training: 0.5433333333333333
User 7110 does not improve AUC. Reverting changes.
Training on augumented user 102816 16/50 current_auc = 0.5433333333333333
User 102816 AUC after training: 0.5433333333333333
User 102816 does not improve AUC. Reverting changes.
Training on augumented user 126514 17/50 current_auc = 0.5433333333333333
User 126514 AUC after training: 0.5433333333333333
User 126514 does not improve AUC. Reverting changes.
Training on augumented user 58448 18/50 current_auc = 0.5433333333333333
User 58448 AUC after training: 0.5433333333333333
User 58448 does not improve AUC. Reverting changes.
Training on augumented user 64390 19/50 current_auc = 0.5433333333333333
User 64390 AUC after training: 0.5433333333333333
User 64390 does not improve AUC. Reverting changes.
Training on augumented user 75555 20/50 current_auc = 0.5433333333333333
User 75555 AUC after training: 0.5433333333333333
User 75555 does not improve AUC. Reverting changes.
Training on augumented user 64063 21/50 current_auc = 0.5433333333333333
User 64063 AUC after training: 0.54
User 64063 does not improve AUC. Reverting changes.
Training on augumented user 109298 22/50 current_auc = 0.5433333333333333
User 109298 AUC after training: 0.5433333333333333
User 109298 does not improve AUC. Reverting changes.
Training on augumented user 6746 23/50 current_auc = 0.5433333333333333
User 6746 AUC after training: 0.5433333333333333
User 6746 does not improve AUC. Reverting changes.
Training on augumented user 18936 24/50 current_auc = 0.5433333333333333
User 18936 AUC after training: 0.5433333333333333
User 18936 does not improve AUC. Reverting changes.
Training on augumented user 130959 25/50 current_auc = 0.5433333333333333
User 130959 AUC after training: 0.5433333333333333
User 130959 does not improve AUC. Reverting changes.
Training on augumented user 70333 26/50 current_auc = 0.5433333333333333
User 70333 AUC after training: 0.54
User 70333 does not improve AUC. Reverting changes.
Training on augumented user 91098 27/50 current_auc = 0.5433333333333333
User 91098 AUC after training: 0.54
User 91098 does not improve AUC. Reverting changes.
Training on augumented user 137833 28/50 current_auc = 0.5433333333333333
User 137833 AUC after training: 0.5433333333333333
User 137833 does not improve AUC. Reverting changes.
Training on augumented user 30886 29/50 current_auc = 0.5433333333333333
User 30886 AUC after training: 0.54
User 30886 does not improve AUC. Reverting changes.
Training on augumented user 80286 30/50 current_auc = 0.5433333333333333
User 80286 AUC after training: 0.5333333333333333
User 80286 does not improve AUC. Reverting changes.
Training on augumented user 45306 31/50 current_auc = 0.5433333333333333
User 45306 AUC after training: 0.5466666666666666
User 45306 improves AUC. Keeping the model.
Training on augumented user 3819 32/50 current_auc = 0.5466666666666666
User 3819 AUC after training: 0.5466666666666666
User 3819 does not improve AUC. Reverting changes.
Training on augumented user 98231 33/50 current_auc = 0.5466666666666666
User 98231 AUC after training: 0.5433333333333333
User 98231 does not improve AUC. Reverting changes.
Training on augumented user 50597 34/50 current_auc = 0.5466666666666666
User 50597 AUC after training: 0.54
User 50597 does not improve AUC. Reverting changes.
Training on augumented user 75240 35/50 current_auc = 0.5466666666666666
User 75240 AUC after training: 0.5433333333333333
User 75240 does not improve AUC. Reverting changes.
Training on augumented user 79351 36/50 current_auc = 0.5466666666666666
User 79351 AUC after training: 0.5433333333333333
User 79351 does not improve AUC. Reverting changes.
Training on augumented user 117911 37/50 current_auc = 0.5466666666666666
User 117911 AUC after training: 0.5466666666666666
User 117911 does not improve AUC. Reverting changes.
Training on augumented user 64360 38/50 current_auc = 0.5466666666666666
User 64360 AUC after training: 0.54
User 64360 does not improve AUC. Reverting changes.
Training on augumented user 12360 39/50 current_auc = 0.5466666666666666
User 12360 AUC after training: 0.5333333333333334
User 12360 does not improve AUC. Reverting changes.
Training on augumented user 78003 40/50 current_auc = 0.5466666666666666
User 78003 AUC after training: 0.5466666666666666
User 78003 does not improve AUC. Reverting changes.
Training on augumented user 37049 41/50 current_auc = 0.5466666666666666
User 37049 AUC after training: 0.5433333333333333
User 37049 does not improve AUC. Reverting changes.
Training on augumented user 120020 42/50 current_auc = 0.5466666666666666
User 120020 AUC after training: 0.5433333333333333
User 120020 does not improve AUC. Reverting changes.
Training on augumented user 101549 43/50 current_auc = 0.5466666666666666
User 101549 AUC after training: 0.54
User 101549 does not improve AUC. Reverting changes.
Training on augumented user 31313 44/50 current_auc = 0.5466666666666666
User 31313 AUC after training: 0.5466666666666666
User 31313 does not improve AUC. Reverting changes.
Training on augumented user 6471 45/50 current_auc = 0.5466666666666666
User 6471 AUC after training: 0.5466666666666666
User 6471 does not improve AUC. Reverting changes.
Training on augumented user 109652 46/50 current_auc = 0.5466666666666666
User 109652 AUC after training: 0.5433333333333333
User 109652 does not improve AUC. Reverting changes.
Training on augumented user 135364 47/50 current_auc = 0.5466666666666666
User 135364 AUC after training: 0.5366666666666667
User 135364 does not improve AUC. Reverting changes.
Training on augumented user 132287 48/50 current_auc = 0.5466666666666666
User 132287 AUC after training: 0.5433333333333333
User 132287 does not improve AUC. Reverting changes.
Training on augumented user 61015 49/50 current_auc = 0.5466666666666666
User 61015 AUC after training: 0.54
User 61015 does not improve AUC. Reverting changes.
[2024-12-02 18:30:16.891913] start test user 71671 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:17.299771] start test user 71671 97/568 recall augumented users by random, augumented_users = [57871, 39816, 30801, 48608, 76572, 29542, 34497, 22790, 14918, 123661, 89631, 78153, 99276, 40982, 37084, 33321, 83838, 11524, 52802, 36703, 30329, 52790, 15520, 77679, 57953, 131862, 91679, 16598, 71278, 125956, 3550, 1676, 8394, 84398, 107488, 696, 115953, 43735, 107281, 10934, 71254, 114152, 85030, 38632, 68966, 16880, 84371, 66783, 33879, 127867]
[2024-12-02 18:30:17.315047] user = 71671 Cloud 97/568
[2024-12-02 18:30:17.338473] user = 71671 Local 97/568
[2024-12-02 18:30:17.449221] user = 71671 Local+ 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:19.945518] user = 71671 MPDA- 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6983296163124117
Training on augumented user 57871 0/50 current_auc = 0.6983296163124117
User 57871 AUC after training: 0.6984661599381002
User 57871 improves AUC. Keeping the model.
Training on augumented user 39816 1/50 current_auc = 0.6984661599381002
User 39816 AUC after training: 0.6974648400163853
User 39816 does not improve AUC. Reverting changes.
Training on augumented user 30801 2/50 current_auc = 0.6984661599381002
User 30801 AUC after training: 0.6980565290610351
User 30801 does not improve AUC. Reverting changes.
Training on augumented user 48608 3/50 current_auc = 0.6984661599381002
User 48608 AUC after training: 0.698693732647581
User 48608 improves AUC. Keeping the model.
Training on augumented user 76572 4/50 current_auc = 0.698693732647581
User 76572 AUC after training: 0.6982841017705157
User 76572 does not improve AUC. Reverting changes.
Training on augumented user 29542 5/50 current_auc = 0.698693732647581
User 29542 AUC after training: 0.6980110145191389
User 29542 does not improve AUC. Reverting changes.
Training on augumented user 34497 6/50 current_auc = 0.698693732647581
User 34497 AUC after training: 0.698102043602931
User 34497 does not improve AUC. Reverting changes.
Training on augumented user 22790 7/50 current_auc = 0.698693732647581
User 22790 AUC after training: 0.6985571890218925
User 22790 does not improve AUC. Reverting changes.
Training on augumented user 14918 8/50 current_auc = 0.698693732647581
User 14918 AUC after training: 0.6981475581448273
User 14918 does not improve AUC. Reverting changes.
Training on augumented user 123661 9/50 current_auc = 0.698693732647581
User 123661 AUC after training: 0.6985116744799964
User 123661 does not improve AUC. Reverting changes.
Training on augumented user 89631 10/50 current_auc = 0.698693732647581
User 89631 AUC after training: 0.6977834418096582
User 89631 does not improve AUC. Reverting changes.
Training on augumented user 78153 11/50 current_auc = 0.698693732647581
User 78153 AUC after training: 0.6985116744799964
User 78153 does not improve AUC. Reverting changes.
Training on augumented user 99276 12/50 current_auc = 0.698693732647581
User 99276 AUC after training: 0.6971917527650084
User 99276 does not improve AUC. Reverting changes.
Training on augumented user 40982 13/50 current_auc = 0.698693732647581
User 40982 AUC after training: 0.6981930726867234
User 40982 does not improve AUC. Reverting changes.
Training on augumented user 37084 14/50 current_auc = 0.698693732647581
User 37084 AUC after training: 0.6985571890218925
User 37084 does not improve AUC. Reverting changes.
Training on augumented user 33321 15/50 current_auc = 0.698693732647581
User 33321 AUC after training: 0.6982841017705157
User 33321 does not improve AUC. Reverting changes.
Training on augumented user 83838 16/50 current_auc = 0.698693732647581
User 83838 AUC after training: 0.6983296163124117
User 83838 does not improve AUC. Reverting changes.
Training on augumented user 11524 17/50 current_auc = 0.698693732647581
User 11524 AUC after training: 0.6987847617313732
User 11524 improves AUC. Keeping the model.
Training on augumented user 52802 18/50 current_auc = 0.6987847617313732
User 52802 AUC after training: 0.6985116744799965
User 52802 does not improve AUC. Reverting changes.
Training on augumented user 36703 19/50 current_auc = 0.6987847617313732
User 36703 AUC after training: 0.6987847617313732
User 36703 does not improve AUC. Reverting changes.
Training on augumented user 30329 20/50 current_auc = 0.6987847617313732
User 30329 AUC after training: 0.7002412270720495
User 30329 improves AUC. Keeping the model.
Training on augumented user 52790 21/50 current_auc = 0.7002412270720495
User 52790 AUC after training: 0.6989668198989577
User 52790 does not improve AUC. Reverting changes.
Training on augumented user 15520 22/50 current_auc = 0.7002412270720495
User 15520 AUC after training: 0.7003777706977379
User 15520 improves AUC. Keeping the model.
Training on augumented user 77679 23/50 current_auc = 0.7003777706977379
User 77679 AUC after training: 0.6976468981839699
User 77679 does not improve AUC. Reverting changes.
Training on augumented user 57953 24/50 current_auc = 0.7003777706977379
User 57953 AUC after training: 0.700377770697738
User 57953 improves AUC. Keeping the model.
Training on augumented user 131862 25/50 current_auc = 0.700377770697738
User 131862 AUC after training: 0.6992854216922306
User 131862 does not improve AUC. Reverting changes.
Training on augumented user 91679 26/50 current_auc = 0.700377770697738
User 91679 AUC after training: 0.7004687997815302
User 91679 improves AUC. Keeping the model.
Training on augumented user 16598 27/50 current_auc = 0.7004687997815302
User 16598 AUC after training: 0.7002867416139457
User 16598 does not improve AUC. Reverting changes.
Training on augumented user 71278 28/50 current_auc = 0.7004687997815302
User 71278 AUC after training: 0.699740567111192
User 71278 does not improve AUC. Reverting changes.
Training on augumented user 125956 29/50 current_auc = 0.7004687997815302
User 125956 AUC after training: 0.7004687997815301
User 125956 does not improve AUC. Reverting changes.
Training on augumented user 3550 30/50 current_auc = 0.7004687997815302
User 3550 AUC after training: 0.6986027035637885
User 3550 does not improve AUC. Reverting changes.
Training on augumented user 1676 31/50 current_auc = 0.7004687997815302
User 1676 AUC after training: 0.7001957125301534
User 1676 does not improve AUC. Reverting changes.
Training on augumented user 8394 32/50 current_auc = 0.7004687997815302
User 8394 AUC after training: 0.7002867416139458
User 8394 does not improve AUC. Reverting changes.
Training on augumented user 84398 33/50 current_auc = 0.7004687997815302
User 84398 AUC after training: 0.7003777706977379
User 84398 does not improve AUC. Reverting changes.
Training on augumented user 107488 34/50 current_auc = 0.7004687997815302
User 107488 AUC after training: 0.7004687997815302
User 107488 does not improve AUC. Reverting changes.
Training on augumented user 696 35/50 current_auc = 0.7004687997815302
User 696 AUC after training: 0.6996040234855037
User 696 does not improve AUC. Reverting changes.
Training on augumented user 115953 36/50 current_auc = 0.7004687997815302
User 115953 AUC after training: 0.6999226252787766
User 115953 does not improve AUC. Reverting changes.
Training on augumented user 43735 37/50 current_auc = 0.7004687997815302
User 43735 AUC after training: 0.7001957125301534
User 43735 does not improve AUC. Reverting changes.
Training on augumented user 107281 38/50 current_auc = 0.7004687997815302
User 107281 AUC after training: 0.6998315961949844
User 107281 does not improve AUC. Reverting changes.
Training on augumented user 10934 39/50 current_auc = 0.7004687997815302
User 10934 AUC after training: 0.699695052569296
User 10934 does not improve AUC. Reverting changes.
Training on augumented user 71254 40/50 current_auc = 0.7004687997815302
User 71254 AUC after training: 0.6989668198989577
User 71254 does not improve AUC. Reverting changes.
Training on augumented user 114152 41/50 current_auc = 0.7004687997815302
User 114152 AUC after training: 0.7001957125301534
User 114152 does not improve AUC. Reverting changes.
Training on augumented user 85030 42/50 current_auc = 0.7004687997815302
User 85030 AUC after training: 0.7002412270720495
User 85030 does not improve AUC. Reverting changes.
Training on augumented user 38632 43/50 current_auc = 0.7004687997815302
User 38632 AUC after training: 0.69905784898275
User 38632 does not improve AUC. Reverting changes.
Training on augumented user 68966 44/50 current_auc = 0.7004687997815302
User 68966 AUC after training: 0.7001957125301533
User 68966 does not improve AUC. Reverting changes.
Training on augumented user 16880 45/50 current_auc = 0.7004687997815302
User 16880 AUC after training: 0.7001957125301534
User 16880 does not improve AUC. Reverting changes.
Training on augumented user 84371 46/50 current_auc = 0.7004687997815302
User 84371 AUC after training: 0.7001957125301533
User 84371 does not improve AUC. Reverting changes.
Training on augumented user 66783 47/50 current_auc = 0.7004687997815302
User 66783 AUC after training: 0.7001046834463611
User 66783 does not improve AUC. Reverting changes.
Training on augumented user 33879 48/50 current_auc = 0.7004687997815302
User 33879 AUC after training: 0.700059168904465
User 33879 does not improve AUC. Reverting changes.
Training on augumented user 127867 49/50 current_auc = 0.7004687997815302
User 127867 AUC after training: 0.6997860816530881
User 127867 does not improve AUC. Reverting changes.
[2024-12-02 18:30:53.288139] start test user 71680 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:53.955308] start test user 71680 98/568 recall augumented users by random, augumented_users = [123400, 80481, 99315, 95244, 70098, 134284, 75592, 9013, 108500, 121159, 12282, 21745, 7822, 7790, 34821, 90190, 26449, 87672, 74213, 10321, 133328, 91270, 109845, 93544, 60485, 61401, 72723, 83131, 82897, 14071, 2444, 109047, 35467, 86374, 99753, 59217, 98843, 6715, 22382, 134434, 27925, 74239, 12781, 94675, 73026, 44474, 102452, 62291, 70335, 8358]
[2024-12-02 18:30:53.997569] user = 71680 Cloud 98/568
[2024-12-02 18:30:54.069272] user = 71680 Local 98/568
[2024-12-02 18:30:54.259539] user = 71680 Local+ 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:57.553091] user = 71680 MPDA- 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5624493106244931
Training on augumented user 123400 0/50 current_auc = 0.5624493106244931
User 123400 AUC after training: 0.562043795620438
User 123400 does not improve AUC. Reverting changes.
Training on augumented user 80481 1/50 current_auc = 0.5624493106244931
User 80481 AUC after training: 0.5622175877650331
User 80481 does not improve AUC. Reverting changes.
Training on augumented user 99315 2/50 current_auc = 0.5624493106244931
User 99315 AUC after training: 0.5624493106244931
User 99315 does not improve AUC. Reverting changes.
Training on augumented user 95244 3/50 current_auc = 0.5624493106244931
User 95244 AUC after training: 0.5624782759819256
User 95244 improves AUC. Keeping the model.
Training on augumented user 70098 4/50 current_auc = 0.5624782759819256
User 70098 AUC after training: 0.5624493106244931
User 70098 does not improve AUC. Reverting changes.
Training on augumented user 134284 5/50 current_auc = 0.5624782759819256
User 134284 AUC after training: 0.5630865484880083
User 134284 improves AUC. Keeping the model.
Training on augumented user 75592 6/50 current_auc = 0.5630865484880083
User 75592 AUC after training: 0.5623913799096281
User 75592 does not improve AUC. Reverting changes.
Training on augumented user 9013 7/50 current_auc = 0.5630865484880083
User 9013 AUC after training: 0.5642451627853088
User 9013 improves AUC. Keeping the model.
Training on augumented user 108500 8/50 current_auc = 0.5642451627853088
User 108500 AUC after training: 0.5638975784961187
User 108500 does not improve AUC. Reverting changes.
Training on augumented user 121159 9/50 current_auc = 0.5642451627853088
User 121159 AUC after training: 0.5645348163596339
User 121159 improves AUC. Keeping the model.
Training on augumented user 12282 10/50 current_auc = 0.5645348163596339
User 12282 AUC after training: 0.5634341327771986
User 12282 does not improve AUC. Reverting changes.
Training on augumented user 21745 11/50 current_auc = 0.5645348163596339
User 21745 AUC after training: 0.5632603406326033
User 21745 does not improve AUC. Reverting changes.
Training on augumented user 7822 12/50 current_auc = 0.5645348163596339
User 7822 AUC after training: 0.5642451627853088
User 7822 does not improve AUC. Reverting changes.
Training on augumented user 7790 13/50 current_auc = 0.5645348163596339
User 7790 AUC after training: 0.5644189549299038
User 7790 does not improve AUC. Reverting changes.
Training on augumented user 34821 14/50 current_auc = 0.5645348163596339
User 34821 AUC after training: 0.5634341327771984
User 34821 does not improve AUC. Reverting changes.
Training on augumented user 90190 15/50 current_auc = 0.5645348163596339
User 90190 AUC after training: 0.564708608504229
User 90190 improves AUC. Keeping the model.
Training on augumented user 26449 16/50 current_auc = 0.564708608504229
User 26449 AUC after training: 0.5645927470744989
User 26449 does not improve AUC. Reverting changes.
Training on augumented user 87672 17/50 current_auc = 0.564708608504229
User 87672 AUC after training: 0.5647665392190939
User 87672 improves AUC. Keeping the model.
Training on augumented user 74213 18/50 current_auc = 0.5647665392190939
User 74213 AUC after training: 0.5644768856447688
User 74213 does not improve AUC. Reverting changes.
Training on augumented user 10321 19/50 current_auc = 0.5647665392190939
User 10321 AUC after training: 0.5639555092109837
User 10321 does not improve AUC. Reverting changes.
Training on augumented user 133328 20/50 current_auc = 0.5647665392190939
User 133328 AUC after training: 0.5649982620785541
User 133328 improves AUC. Keeping the model.
Training on augumented user 91270 21/50 current_auc = 0.5649982620785541
User 91270 AUC after training: 0.5643610242150388
User 91270 does not improve AUC. Reverting changes.
Training on augumented user 109845 22/50 current_auc = 0.5649982620785541
User 109845 AUC after training: 0.5633762020623334
User 109845 does not improve AUC. Reverting changes.
Training on augumented user 93544 23/50 current_auc = 0.5649982620785541
User 93544 AUC after training: 0.5644768856447688
User 93544 does not improve AUC. Reverting changes.
Training on augumented user 60485 24/50 current_auc = 0.5649982620785541
User 60485 AUC after training: 0.5653458463677441
User 60485 improves AUC. Keeping the model.
Training on augumented user 61401 25/50 current_auc = 0.5653458463677441
User 61401 AUC after training: 0.5652879156528793
User 61401 does not improve AUC. Reverting changes.
Training on augumented user 72723 26/50 current_auc = 0.5653458463677441
User 72723 AUC after training: 0.5655775692272044
User 72723 improves AUC. Keeping the model.
Training on augumented user 83131 27/50 current_auc = 0.5655775692272044
User 83131 AUC after training: 0.5654617077974743
User 83131 does not improve AUC. Reverting changes.
Training on augumented user 82897 28/50 current_auc = 0.5655775692272044
User 82897 AUC after training: 0.5652299849380141
User 82897 does not improve AUC. Reverting changes.
Training on augumented user 14071 29/50 current_auc = 0.5655775692272044
User 14071 AUC after training: 0.5629706870582784
User 14071 does not improve AUC. Reverting changes.
Training on augumented user 2444 30/50 current_auc = 0.5655775692272044
User 2444 AUC after training: 0.5610010427528676
User 2444 does not improve AUC. Reverting changes.
Training on augumented user 109047 31/50 current_auc = 0.5655775692272044
User 109047 AUC after training: 0.565114123508284
User 109047 does not improve AUC. Reverting changes.
Training on augumented user 35467 32/50 current_auc = 0.5655775692272044
User 35467 AUC after training: 0.5654617077974742
User 35467 does not improve AUC. Reverting changes.
Training on augumented user 86374 33/50 current_auc = 0.5655775692272044
User 86374 AUC after training: 0.5654037770826092
User 86374 does not improve AUC. Reverting changes.
Training on augumented user 99753 34/50 current_auc = 0.5655775692272044
User 99753 AUC after training: 0.5642451627853088
User 99753 does not improve AUC. Reverting changes.
Training on augumented user 59217 35/50 current_auc = 0.5655775692272044
User 59217 AUC after training: 0.5644189549299039
User 59217 does not improve AUC. Reverting changes.
Training on augumented user 98843 36/50 current_auc = 0.5655775692272044
User 98843 AUC after training: 0.5662727378055845
User 98843 improves AUC. Keeping the model.
Training on augumented user 6715 37/50 current_auc = 0.5662727378055845
User 6715 AUC after training: 0.5645927470744989
User 6715 does not improve AUC. Reverting changes.
Training on augumented user 22382 38/50 current_auc = 0.5662727378055845
User 22382 AUC after training: 0.5638975784961187
User 22382 does not improve AUC. Reverting changes.
Training on augumented user 134434 39/50 current_auc = 0.5662727378055845
User 134434 AUC after training: 0.564650677789364
User 134434 does not improve AUC. Reverting changes.
Training on augumented user 27925 40/50 current_auc = 0.5662727378055845
User 27925 AUC after training: 0.5656934306569343
User 27925 does not improve AUC. Reverting changes.
Training on augumented user 74239 41/50 current_auc = 0.5662727378055845
User 74239 AUC after training: 0.5656934306569342
User 74239 does not improve AUC. Reverting changes.
Training on augumented user 12781 42/50 current_auc = 0.5662727378055845
User 12781 AUC after training: 0.5666203220947745
User 12781 improves AUC. Keeping the model.
Training on augumented user 94675 43/50 current_auc = 0.5666203220947745
User 94675 AUC after training: 0.5654617077974742
User 94675 does not improve AUC. Reverting changes.
Training on augumented user 73026 44/50 current_auc = 0.5666203220947745
User 73026 AUC after training: 0.5615224191866528
User 73026 does not improve AUC. Reverting changes.
Training on augumented user 44474 45/50 current_auc = 0.5666203220947745
User 44474 AUC after training: 0.5649403313636889
User 44474 does not improve AUC. Reverting changes.
Training on augumented user 102452 46/50 current_auc = 0.5666203220947745
User 102452 AUC after training: 0.5655775692272043
User 102452 does not improve AUC. Reverting changes.
Training on augumented user 62291 47/50 current_auc = 0.5666203220947745
User 62291 AUC after training: 0.5666782528096397
User 62291 improves AUC. Keeping the model.
Training on augumented user 70335 48/50 current_auc = 0.5666782528096397
User 70335 AUC after training: 0.5658092920866643
User 70335 does not improve AUC. Reverting changes.
Training on augumented user 8358 49/50 current_auc = 0.5666782528096397
User 8358 AUC after training: 0.5666782528096397
User 8358 does not improve AUC. Reverting changes.
[2024-12-02 18:31:27.719142] start test user 71689 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:28.232909] start test user 71689 99/568 recall augumented users by random, augumented_users = [21326, 81007, 21478, 40128, 27869, 12854, 113186, 11275, 134376, 109092, 14785, 37931, 60853, 101864, 5136, 84830, 32842, 50237, 133831, 13180, 87726, 63536, 83034, 81608, 90394, 133771, 8130, 107759, 125491, 129948, 46957, 80877, 108335, 122881, 64599, 74927, 89215, 10312, 128961, 61222, 107131, 113889, 56837, 132060, 15986, 20024, 108104, 21659, 1032, 26356]
[2024-12-02 18:31:28.249070] user = 71689 Cloud 99/568
[2024-12-02 18:31:28.259238] user = 71689 Local 99/568
[2024-12-02 18:31:28.320298] user = 71689 Local+ 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:30.126335] user = 71689 MPDA- 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 21326 0/50 current_auc = 0.6666666666666666
User 21326 AUC after training: 0.6666666666666666
User 21326 does not improve AUC. Reverting changes.
Training on augumented user 81007 1/50 current_auc = 0.6666666666666666
User 81007 AUC after training: 0.6666666666666666
User 81007 does not improve AUC. Reverting changes.
Training on augumented user 21478 2/50 current_auc = 0.6666666666666666
User 21478 AUC after training: 0.6666666666666666
User 21478 does not improve AUC. Reverting changes.
Training on augumented user 40128 3/50 current_auc = 0.6666666666666666
User 40128 AUC after training: 0.6666666666666666
User 40128 does not improve AUC. Reverting changes.
Training on augumented user 27869 4/50 current_auc = 0.6666666666666666
User 27869 AUC after training: 0.6666666666666666
User 27869 does not improve AUC. Reverting changes.
Training on augumented user 12854 5/50 current_auc = 0.6666666666666666
User 12854 AUC after training: 0.6666666666666666
User 12854 does not improve AUC. Reverting changes.
Training on augumented user 113186 6/50 current_auc = 0.6666666666666666
User 113186 AUC after training: 0.6666666666666666
User 113186 does not improve AUC. Reverting changes.
Training on augumented user 11275 7/50 current_auc = 0.6666666666666666
User 11275 AUC after training: 0.6666666666666666
User 11275 does not improve AUC. Reverting changes.
Training on augumented user 134376 8/50 current_auc = 0.6666666666666666
User 134376 AUC after training: 0.6666666666666666
User 134376 does not improve AUC. Reverting changes.
Training on augumented user 109092 9/50 current_auc = 0.6666666666666666
User 109092 AUC after training: 0.6666666666666666
User 109092 does not improve AUC. Reverting changes.
Training on augumented user 14785 10/50 current_auc = 0.6666666666666666
User 14785 AUC after training: 0.6666666666666666
User 14785 does not improve AUC. Reverting changes.
Training on augumented user 37931 11/50 current_auc = 0.6666666666666666
User 37931 AUC after training: 0.6666666666666666
User 37931 does not improve AUC. Reverting changes.
Training on augumented user 60853 12/50 current_auc = 0.6666666666666666
User 60853 AUC after training: 0.6666666666666666
User 60853 does not improve AUC. Reverting changes.
Training on augumented user 101864 13/50 current_auc = 0.6666666666666666
User 101864 AUC after training: 0.6666666666666666
User 101864 does not improve AUC. Reverting changes.
Training on augumented user 5136 14/50 current_auc = 0.6666666666666666
User 5136 AUC after training: 0.6666666666666666
User 5136 does not improve AUC. Reverting changes.
Training on augumented user 84830 15/50 current_auc = 0.6666666666666666
User 84830 AUC after training: 0.6666666666666666
User 84830 does not improve AUC. Reverting changes.
Training on augumented user 32842 16/50 current_auc = 0.6666666666666666
User 32842 AUC after training: 0.6666666666666666
User 32842 does not improve AUC. Reverting changes.
Training on augumented user 50237 17/50 current_auc = 0.6666666666666666
User 50237 AUC after training: 0.6666666666666666
User 50237 does not improve AUC. Reverting changes.
Training on augumented user 133831 18/50 current_auc = 0.6666666666666666
User 133831 AUC after training: 0.6666666666666666
User 133831 does not improve AUC. Reverting changes.
Training on augumented user 13180 19/50 current_auc = 0.6666666666666666
User 13180 AUC after training: 0.6666666666666666
User 13180 does not improve AUC. Reverting changes.
Training on augumented user 87726 20/50 current_auc = 0.6666666666666666
User 87726 AUC after training: 0.6666666666666666
User 87726 does not improve AUC. Reverting changes.
Training on augumented user 63536 21/50 current_auc = 0.6666666666666666
User 63536 AUC after training: 0.6666666666666666
User 63536 does not improve AUC. Reverting changes.
Training on augumented user 83034 22/50 current_auc = 0.6666666666666666
User 83034 AUC after training: 0.6666666666666666
User 83034 does not improve AUC. Reverting changes.
Training on augumented user 81608 23/50 current_auc = 0.6666666666666666
User 81608 AUC after training: 0.6666666666666666
User 81608 does not improve AUC. Reverting changes.
Training on augumented user 90394 24/50 current_auc = 0.6666666666666666
User 90394 AUC after training: 0.6666666666666666
User 90394 does not improve AUC. Reverting changes.
Training on augumented user 133771 25/50 current_auc = 0.6666666666666666
User 133771 AUC after training: 0.6666666666666666
User 133771 does not improve AUC. Reverting changes.
Training on augumented user 8130 26/50 current_auc = 0.6666666666666666
User 8130 AUC after training: 0.6666666666666666
User 8130 does not improve AUC. Reverting changes.
Training on augumented user 107759 27/50 current_auc = 0.6666666666666666
User 107759 AUC after training: 0.6666666666666666
User 107759 does not improve AUC. Reverting changes.
Training on augumented user 125491 28/50 current_auc = 0.6666666666666666
User 125491 AUC after training: 0.6666666666666666
User 125491 does not improve AUC. Reverting changes.
Training on augumented user 129948 29/50 current_auc = 0.6666666666666666
User 129948 AUC after training: 0.6666666666666666
User 129948 does not improve AUC. Reverting changes.
Training on augumented user 46957 30/50 current_auc = 0.6666666666666666
User 46957 AUC after training: 0.6666666666666666
User 46957 does not improve AUC. Reverting changes.
Training on augumented user 80877 31/50 current_auc = 0.6666666666666666
User 80877 AUC after training: 0.6666666666666666
User 80877 does not improve AUC. Reverting changes.
Training on augumented user 108335 32/50 current_auc = 0.6666666666666666
User 108335 AUC after training: 0.6666666666666666
User 108335 does not improve AUC. Reverting changes.
Training on augumented user 122881 33/50 current_auc = 0.6666666666666666
User 122881 AUC after training: 0.6666666666666666
User 122881 does not improve AUC. Reverting changes.
Training on augumented user 64599 34/50 current_auc = 0.6666666666666666
User 64599 AUC after training: 0.6666666666666666
User 64599 does not improve AUC. Reverting changes.
Training on augumented user 74927 35/50 current_auc = 0.6666666666666666
User 74927 AUC after training: 0.6666666666666666
User 74927 does not improve AUC. Reverting changes.
Training on augumented user 89215 36/50 current_auc = 0.6666666666666666
User 89215 AUC after training: 0.6666666666666666
User 89215 does not improve AUC. Reverting changes.
Training on augumented user 10312 37/50 current_auc = 0.6666666666666666
User 10312 AUC after training: 0.6666666666666666
User 10312 does not improve AUC. Reverting changes.
Training on augumented user 128961 38/50 current_auc = 0.6666666666666666
User 128961 AUC after training: 0.6666666666666666
User 128961 does not improve AUC. Reverting changes.
Training on augumented user 61222 39/50 current_auc = 0.6666666666666666
User 61222 AUC after training: 0.6666666666666666
User 61222 does not improve AUC. Reverting changes.
Training on augumented user 107131 40/50 current_auc = 0.6666666666666666
User 107131 AUC after training: 0.6666666666666666
User 107131 does not improve AUC. Reverting changes.
Training on augumented user 113889 41/50 current_auc = 0.6666666666666666
User 113889 AUC after training: 0.6666666666666666
User 113889 does not improve AUC. Reverting changes.
Training on augumented user 56837 42/50 current_auc = 0.6666666666666666
User 56837 AUC after training: 0.6666666666666666
User 56837 does not improve AUC. Reverting changes.
Training on augumented user 132060 43/50 current_auc = 0.6666666666666666
User 132060 AUC after training: 0.6666666666666666
User 132060 does not improve AUC. Reverting changes.
Training on augumented user 15986 44/50 current_auc = 0.6666666666666666
User 15986 AUC after training: 0.6666666666666666
User 15986 does not improve AUC. Reverting changes.
Training on augumented user 20024 45/50 current_auc = 0.6666666666666666
User 20024 AUC after training: 0.6666666666666666
User 20024 does not improve AUC. Reverting changes.
Training on augumented user 108104 46/50 current_auc = 0.6666666666666666
User 108104 AUC after training: 0.6666666666666666
User 108104 does not improve AUC. Reverting changes.
Training on augumented user 21659 47/50 current_auc = 0.6666666666666666
User 21659 AUC after training: 0.6666666666666666
User 21659 does not improve AUC. Reverting changes.
Training on augumented user 1032 48/50 current_auc = 0.6666666666666666
User 1032 AUC after training: 0.6666666666666666
User 1032 does not improve AUC. Reverting changes.
Training on augumented user 26356 49/50 current_auc = 0.6666666666666666
User 26356 AUC after training: 0.6666666666666666
User 26356 does not improve AUC. Reverting changes.
[2024-12-02 18:31:56.343903] start test user 71720 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:56.996688] start test user 71720 100/568 recall augumented users by random, augumented_users = [16594, 83760, 14721, 123951, 87726, 72138, 92970, 28905, 119881, 65410, 86669, 6983, 53708, 27842, 51296, 114396, 54352, 84761, 46118, 3627, 51718, 133450, 92794, 117070, 61502, 8077, 104532, 67167, 90620, 102331, 26409, 125234, 44410, 82959, 43702, 65480, 112779, 117414, 136420, 101800, 99244, 24277, 85609, 88774, 32847, 66616, 52962, 56676, 45105, 114182]
[2024-12-02 18:31:57.011279] user = 71720 Cloud 100/568
[2024-12-02 18:31:57.026144] user = 71720 Local 100/568
[2024-12-02 18:31:57.091307] user = 71720 Local+ 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:59.096210] user = 71720 MPDA- 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6154320987654321
Training on augumented user 16594 0/50 current_auc = 0.6154320987654321
User 16594 AUC after training: 0.615432098765432
User 16594 does not improve AUC. Reverting changes.
Training on augumented user 83760 1/50 current_auc = 0.6154320987654321
User 83760 AUC after training: 0.6117283950617284
User 83760 does not improve AUC. Reverting changes.
Training on augumented user 14721 2/50 current_auc = 0.6154320987654321
User 14721 AUC after training: 0.6141975308641976
User 14721 does not improve AUC. Reverting changes.
Training on augumented user 123951 3/50 current_auc = 0.6154320987654321
User 123951 AUC after training: 0.615432098765432
User 123951 does not improve AUC. Reverting changes.
Training on augumented user 87726 4/50 current_auc = 0.6154320987654321
User 87726 AUC after training: 0.6172839506172839
User 87726 improves AUC. Keeping the model.
Training on augumented user 72138 5/50 current_auc = 0.6172839506172839
User 72138 AUC after training: 0.6185185185185186
User 72138 improves AUC. Keeping the model.
Training on augumented user 92970 6/50 current_auc = 0.6185185185185186
User 92970 AUC after training: 0.6197530864197531
User 92970 improves AUC. Keeping the model.
Training on augumented user 28905 7/50 current_auc = 0.6197530864197531
User 28905 AUC after training: 0.6179012345679012
User 28905 does not improve AUC. Reverting changes.
Training on augumented user 119881 8/50 current_auc = 0.6197530864197531
User 119881 AUC after training: 0.617283950617284
User 119881 does not improve AUC. Reverting changes.
Training on augumented user 65410 9/50 current_auc = 0.6197530864197531
User 65410 AUC after training: 0.6197530864197531
User 65410 does not improve AUC. Reverting changes.
Training on augumented user 86669 10/50 current_auc = 0.6197530864197531
User 86669 AUC after training: 0.6203703703703703
User 86669 improves AUC. Keeping the model.
Training on augumented user 6983 11/50 current_auc = 0.6203703703703703
User 6983 AUC after training: 0.6216049382716049
User 6983 improves AUC. Keeping the model.
Training on augumented user 53708 12/50 current_auc = 0.6216049382716049
User 53708 AUC after training: 0.6166666666666667
User 53708 does not improve AUC. Reverting changes.
Training on augumented user 27842 13/50 current_auc = 0.6216049382716049
User 27842 AUC after training: 0.6092592592592593
User 27842 does not improve AUC. Reverting changes.
Training on augumented user 51296 14/50 current_auc = 0.6216049382716049
User 51296 AUC after training: 0.6197530864197531
User 51296 does not improve AUC. Reverting changes.
Training on augumented user 114396 15/50 current_auc = 0.6216049382716049
User 114396 AUC after training: 0.6172839506172839
User 114396 does not improve AUC. Reverting changes.
Training on augumented user 54352 16/50 current_auc = 0.6216049382716049
User 54352 AUC after training: 0.6191358024691358
User 54352 does not improve AUC. Reverting changes.
Training on augumented user 84761 17/50 current_auc = 0.6216049382716049
User 84761 AUC after training: 0.6179012345679012
User 84761 does not improve AUC. Reverting changes.
Training on augumented user 46118 18/50 current_auc = 0.6216049382716049
User 46118 AUC after training: 0.6197530864197531
User 46118 does not improve AUC. Reverting changes.
Training on augumented user 3627 19/50 current_auc = 0.6216049382716049
User 3627 AUC after training: 0.6209876543209877
User 3627 does not improve AUC. Reverting changes.
Training on augumented user 51718 20/50 current_auc = 0.6216049382716049
User 51718 AUC after training: 0.6191358024691358
User 51718 does not improve AUC. Reverting changes.
Training on augumented user 133450 21/50 current_auc = 0.6216049382716049
User 133450 AUC after training: 0.6222222222222222
User 133450 improves AUC. Keeping the model.
Training on augumented user 92794 22/50 current_auc = 0.6222222222222222
User 92794 AUC after training: 0.6191358024691358
User 92794 does not improve AUC. Reverting changes.
Training on augumented user 117070 23/50 current_auc = 0.6222222222222222
User 117070 AUC after training: 0.6203703703703703
User 117070 does not improve AUC. Reverting changes.
Training on augumented user 61502 24/50 current_auc = 0.6222222222222222
User 61502 AUC after training: 0.6197530864197531
User 61502 does not improve AUC. Reverting changes.
Training on augumented user 8077 25/50 current_auc = 0.6222222222222222
User 8077 AUC after training: 0.621604938271605
User 8077 does not improve AUC. Reverting changes.
Training on augumented user 104532 26/50 current_auc = 0.6222222222222222
User 104532 AUC after training: 0.6209876543209877
User 104532 does not improve AUC. Reverting changes.
Training on augumented user 67167 27/50 current_auc = 0.6222222222222222
User 67167 AUC after training: 0.6185185185185186
User 67167 does not improve AUC. Reverting changes.
Training on augumented user 90620 28/50 current_auc = 0.6222222222222222
User 90620 AUC after training: 0.6197530864197531
User 90620 does not improve AUC. Reverting changes.
Training on augumented user 102331 29/50 current_auc = 0.6222222222222222
User 102331 AUC after training: 0.6209876543209877
User 102331 does not improve AUC. Reverting changes.
Training on augumented user 26409 30/50 current_auc = 0.6222222222222222
User 26409 AUC after training: 0.6203703703703703
User 26409 does not improve AUC. Reverting changes.
Training on augumented user 125234 31/50 current_auc = 0.6222222222222222
User 125234 AUC after training: 0.6197530864197531
User 125234 does not improve AUC. Reverting changes.
Training on augumented user 44410 32/50 current_auc = 0.6222222222222222
User 44410 AUC after training: 0.621604938271605
User 44410 does not improve AUC. Reverting changes.
Training on augumented user 82959 33/50 current_auc = 0.6222222222222222
User 82959 AUC after training: 0.6222222222222222
User 82959 does not improve AUC. Reverting changes.
Training on augumented user 43702 34/50 current_auc = 0.6222222222222222
User 43702 AUC after training: 0.6209876543209877
User 43702 does not improve AUC. Reverting changes.
Training on augumented user 65480 35/50 current_auc = 0.6222222222222222
User 65480 AUC after training: 0.6209876543209877
User 65480 does not improve AUC. Reverting changes.
Training on augumented user 112779 36/50 current_auc = 0.6222222222222222
User 112779 AUC after training: 0.6172839506172839
User 112779 does not improve AUC. Reverting changes.
Training on augumented user 117414 37/50 current_auc = 0.6222222222222222
User 117414 AUC after training: 0.6123456790123457
User 117414 does not improve AUC. Reverting changes.
Training on augumented user 136420 38/50 current_auc = 0.6222222222222222
User 136420 AUC after training: 0.617283950617284
User 136420 does not improve AUC. Reverting changes.
Training on augumented user 101800 39/50 current_auc = 0.6222222222222222
User 101800 AUC after training: 0.6203703703703703
User 101800 does not improve AUC. Reverting changes.
Training on augumented user 99244 40/50 current_auc = 0.6222222222222222
User 99244 AUC after training: 0.621604938271605
User 99244 does not improve AUC. Reverting changes.
Training on augumented user 24277 41/50 current_auc = 0.6222222222222222
User 24277 AUC after training: 0.6191358024691358
User 24277 does not improve AUC. Reverting changes.
Training on augumented user 85609 42/50 current_auc = 0.6222222222222222
User 85609 AUC after training: 0.6197530864197531
User 85609 does not improve AUC. Reverting changes.
Training on augumented user 88774 43/50 current_auc = 0.6222222222222222
User 88774 AUC after training: 0.6185185185185186
User 88774 does not improve AUC. Reverting changes.
Training on augumented user 32847 44/50 current_auc = 0.6222222222222222
User 32847 AUC after training: 0.6203703703703703
User 32847 does not improve AUC. Reverting changes.
Training on augumented user 66616 45/50 current_auc = 0.6222222222222222
User 66616 AUC after training: 0.6197530864197531
User 66616 does not improve AUC. Reverting changes.
Training on augumented user 52962 46/50 current_auc = 0.6222222222222222
User 52962 AUC after training: 0.6216049382716049
User 52962 does not improve AUC. Reverting changes.
Training on augumented user 56676 47/50 current_auc = 0.6222222222222222
User 56676 AUC after training: 0.6216049382716049
User 56676 does not improve AUC. Reverting changes.
Training on augumented user 45105 48/50 current_auc = 0.6222222222222222
User 45105 AUC after training: 0.6222222222222222
User 45105 does not improve AUC. Reverting changes.
Training on augumented user 114182 49/50 current_auc = 0.6222222222222222
User 114182 AUC after training: 0.6185185185185185
User 114182 does not improve AUC. Reverting changes.
[2024-12-02 18:32:24.205543] start test user 71721 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:24.944773] start test user 71721 101/568 recall augumented users by random, augumented_users = [28143, 81725, 41324, 58739, 101539, 88564, 37830, 110387, 96755, 31319, 134879, 61690, 27123, 119100, 89154, 8668, 123657, 42235, 57620, 116265, 82966, 49584, 97844, 34263, 61784, 132514, 28541, 90175, 131503, 134841, 113611, 9248, 88938, 3131, 41546, 102578, 128083, 131345, 56116, 19698, 84710, 33282, 59135, 131465, 92596, 68268, 127519, 133920, 13642, 95963]
[2024-12-02 18:32:24.985453] user = 71721 Cloud 101/568
[2024-12-02 18:32:25.034921] user = 71721 Local 101/568
[2024-12-02 18:32:25.111274] user = 71721 Local+ 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:27.333787] user = 71721 MPDA- 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6551724137931034
Training on augumented user 28143 0/50 current_auc = 0.6551724137931034
User 28143 AUC after training: 0.6551724137931034
User 28143 does not improve AUC. Reverting changes.
Training on augumented user 81725 1/50 current_auc = 0.6551724137931034
User 81725 AUC after training: 0.6551724137931034
User 81725 does not improve AUC. Reverting changes.
Training on augumented user 41324 2/50 current_auc = 0.6551724137931034
User 41324 AUC after training: 0.6551724137931034
User 41324 does not improve AUC. Reverting changes.
Training on augumented user 58739 3/50 current_auc = 0.6551724137931034
User 58739 AUC after training: 0.6551724137931034
User 58739 does not improve AUC. Reverting changes.
Training on augumented user 101539 4/50 current_auc = 0.6551724137931034
User 101539 AUC after training: 0.6551724137931034
User 101539 does not improve AUC. Reverting changes.
Training on augumented user 88564 5/50 current_auc = 0.6551724137931034
User 88564 AUC after training: 0.6551724137931034
User 88564 does not improve AUC. Reverting changes.
Training on augumented user 37830 6/50 current_auc = 0.6551724137931034
User 37830 AUC after training: 0.6551724137931034
User 37830 does not improve AUC. Reverting changes.
Training on augumented user 110387 7/50 current_auc = 0.6551724137931034
User 110387 AUC after training: 0.6551724137931034
User 110387 does not improve AUC. Reverting changes.
Training on augumented user 96755 8/50 current_auc = 0.6551724137931034
User 96755 AUC after training: 0.6551724137931034
User 96755 does not improve AUC. Reverting changes.
Training on augumented user 31319 9/50 current_auc = 0.6551724137931034
User 31319 AUC after training: 0.6551724137931034
User 31319 does not improve AUC. Reverting changes.
Training on augumented user 134879 10/50 current_auc = 0.6551724137931034
User 134879 AUC after training: 0.6551724137931034
User 134879 does not improve AUC. Reverting changes.
Training on augumented user 61690 11/50 current_auc = 0.6551724137931034
User 61690 AUC after training: 0.6551724137931034
User 61690 does not improve AUC. Reverting changes.
Training on augumented user 27123 12/50 current_auc = 0.6551724137931034
User 27123 AUC after training: 0.6551724137931034
User 27123 does not improve AUC. Reverting changes.
Training on augumented user 119100 13/50 current_auc = 0.6551724137931034
User 119100 AUC after training: 0.6551724137931034
User 119100 does not improve AUC. Reverting changes.
Training on augumented user 89154 14/50 current_auc = 0.6551724137931034
User 89154 AUC after training: 0.6551724137931034
User 89154 does not improve AUC. Reverting changes.
Training on augumented user 8668 15/50 current_auc = 0.6551724137931034
User 8668 AUC after training: 0.6551724137931034
User 8668 does not improve AUC. Reverting changes.
Training on augumented user 123657 16/50 current_auc = 0.6551724137931034
User 123657 AUC after training: 0.6551724137931034
User 123657 does not improve AUC. Reverting changes.
Training on augumented user 42235 17/50 current_auc = 0.6551724137931034
User 42235 AUC after training: 0.6551724137931034
User 42235 does not improve AUC. Reverting changes.
Training on augumented user 57620 18/50 current_auc = 0.6551724137931034
User 57620 AUC after training: 0.6551724137931034
User 57620 does not improve AUC. Reverting changes.
Training on augumented user 116265 19/50 current_auc = 0.6551724137931034
User 116265 AUC after training: 0.6551724137931034
User 116265 does not improve AUC. Reverting changes.
Training on augumented user 82966 20/50 current_auc = 0.6551724137931034
User 82966 AUC after training: 0.6551724137931034
User 82966 does not improve AUC. Reverting changes.
Training on augumented user 49584 21/50 current_auc = 0.6551724137931034
User 49584 AUC after training: 0.6551724137931034
User 49584 does not improve AUC. Reverting changes.
Training on augumented user 97844 22/50 current_auc = 0.6551724137931034
User 97844 AUC after training: 0.6551724137931034
User 97844 does not improve AUC. Reverting changes.
Training on augumented user 34263 23/50 current_auc = 0.6551724137931034
User 34263 AUC after training: 0.6551724137931034
User 34263 does not improve AUC. Reverting changes.
Training on augumented user 61784 24/50 current_auc = 0.6551724137931034
User 61784 AUC after training: 0.6551724137931034
User 61784 does not improve AUC. Reverting changes.
Training on augumented user 132514 25/50 current_auc = 0.6551724137931034
User 132514 AUC after training: 0.6551724137931034
User 132514 does not improve AUC. Reverting changes.
Training on augumented user 28541 26/50 current_auc = 0.6551724137931034
User 28541 AUC after training: 0.6551724137931034
User 28541 does not improve AUC. Reverting changes.
Training on augumented user 90175 27/50 current_auc = 0.6551724137931034
User 90175 AUC after training: 0.6551724137931034
User 90175 does not improve AUC. Reverting changes.
Training on augumented user 131503 28/50 current_auc = 0.6551724137931034
User 131503 AUC after training: 0.6551724137931034
User 131503 does not improve AUC. Reverting changes.
Training on augumented user 134841 29/50 current_auc = 0.6551724137931034
User 134841 AUC after training: 0.6551724137931034
User 134841 does not improve AUC. Reverting changes.
Training on augumented user 113611 30/50 current_auc = 0.6551724137931034
User 113611 AUC after training: 0.6551724137931034
User 113611 does not improve AUC. Reverting changes.
Training on augumented user 9248 31/50 current_auc = 0.6551724137931034
User 9248 AUC after training: 0.6551724137931034
User 9248 does not improve AUC. Reverting changes.
Training on augumented user 88938 32/50 current_auc = 0.6551724137931034
User 88938 AUC after training: 0.6551724137931034
User 88938 does not improve AUC. Reverting changes.
Training on augumented user 3131 33/50 current_auc = 0.6551724137931034
User 3131 AUC after training: 0.6551724137931034
User 3131 does not improve AUC. Reverting changes.
Training on augumented user 41546 34/50 current_auc = 0.6551724137931034
User 41546 AUC after training: 0.6551724137931034
User 41546 does not improve AUC. Reverting changes.
Training on augumented user 102578 35/50 current_auc = 0.6551724137931034
User 102578 AUC after training: 0.6551724137931034
User 102578 does not improve AUC. Reverting changes.
Training on augumented user 128083 36/50 current_auc = 0.6551724137931034
User 128083 AUC after training: 0.6551724137931034
User 128083 does not improve AUC. Reverting changes.
Training on augumented user 131345 37/50 current_auc = 0.6551724137931034
User 131345 AUC after training: 0.6551724137931034
User 131345 does not improve AUC. Reverting changes.
Training on augumented user 56116 38/50 current_auc = 0.6551724137931034
User 56116 AUC after training: 0.6551724137931034
User 56116 does not improve AUC. Reverting changes.
Training on augumented user 19698 39/50 current_auc = 0.6551724137931034
User 19698 AUC after training: 0.6551724137931034
User 19698 does not improve AUC. Reverting changes.
Training on augumented user 84710 40/50 current_auc = 0.6551724137931034
User 84710 AUC after training: 0.6551724137931034
User 84710 does not improve AUC. Reverting changes.
Training on augumented user 33282 41/50 current_auc = 0.6551724137931034
User 33282 AUC after training: 0.6551724137931034
User 33282 does not improve AUC. Reverting changes.
Training on augumented user 59135 42/50 current_auc = 0.6551724137931034
User 59135 AUC after training: 0.6551724137931034
User 59135 does not improve AUC. Reverting changes.
Training on augumented user 131465 43/50 current_auc = 0.6551724137931034
User 131465 AUC after training: 0.6551724137931034
User 131465 does not improve AUC. Reverting changes.
Training on augumented user 92596 44/50 current_auc = 0.6551724137931034
User 92596 AUC after training: 0.6551724137931034
User 92596 does not improve AUC. Reverting changes.
Training on augumented user 68268 45/50 current_auc = 0.6551724137931034
User 68268 AUC after training: 0.6551724137931034
User 68268 does not improve AUC. Reverting changes.
Training on augumented user 127519 46/50 current_auc = 0.6551724137931034
User 127519 AUC after training: 0.6551724137931034
User 127519 does not improve AUC. Reverting changes.
Training on augumented user 133920 47/50 current_auc = 0.6551724137931034
User 133920 AUC after training: 0.6551724137931034
User 133920 does not improve AUC. Reverting changes.
Training on augumented user 13642 48/50 current_auc = 0.6551724137931034
User 13642 AUC after training: 0.6551724137931034
User 13642 does not improve AUC. Reverting changes.
Training on augumented user 95963 49/50 current_auc = 0.6551724137931034
User 95963 AUC after training: 0.6551724137931034
User 95963 does not improve AUC. Reverting changes.
[2024-12-02 18:32:57.523323] start test user 71747 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:58.348463] start test user 71747 102/568 recall augumented users by random, augumented_users = [51037, 14065, 93324, 137398, 49833, 115881, 90157, 30117, 35203, 10280, 1565, 103681, 5552, 119669, 40612, 20033, 62756, 68469, 41362, 2596, 24065, 59080, 87644, 438, 135068, 60953, 8788, 30698, 63216, 71827, 113103, 119736, 104704, 10176, 1910, 98989, 10701, 80103, 138238, 22586, 102465, 32287, 9226, 96761, 63854, 79569, 123151, 51806, 18050, 35601]
[2024-12-02 18:32:58.371730] user = 71747 Cloud 102/568
[2024-12-02 18:32:58.383503] user = 71747 Local 102/568
[2024-12-02 18:32:58.464459] user = 71747 Local+ 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:00.853312] user = 71747 MPDA- 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8349875930521091
Training on augumented user 51037 0/50 current_auc = 0.8349875930521091
User 51037 AUC after training: 0.8374689826302729
User 51037 improves AUC. Keeping the model.
Training on augumented user 14065 1/50 current_auc = 0.8374689826302729
User 14065 AUC after training: 0.8374689826302729
User 14065 does not improve AUC. Reverting changes.
Training on augumented user 93324 2/50 current_auc = 0.8374689826302729
User 93324 AUC after training: 0.8374689826302729
User 93324 does not improve AUC. Reverting changes.
Training on augumented user 137398 3/50 current_auc = 0.8374689826302729
User 137398 AUC after training: 0.8387096774193548
User 137398 improves AUC. Keeping the model.
Training on augumented user 49833 4/50 current_auc = 0.8387096774193548
User 49833 AUC after training: 0.8387096774193548
User 49833 does not improve AUC. Reverting changes.
Training on augumented user 115881 5/50 current_auc = 0.8387096774193548
User 115881 AUC after training: 0.8349875930521091
User 115881 does not improve AUC. Reverting changes.
Training on augumented user 90157 6/50 current_auc = 0.8387096774193548
User 90157 AUC after training: 0.8349875930521091
User 90157 does not improve AUC. Reverting changes.
Training on augumented user 30117 7/50 current_auc = 0.8387096774193548
User 30117 AUC after training: 0.8387096774193548
User 30117 does not improve AUC. Reverting changes.
Training on augumented user 35203 8/50 current_auc = 0.8387096774193548
User 35203 AUC after training: 0.8387096774193548
User 35203 does not improve AUC. Reverting changes.
Training on augumented user 10280 9/50 current_auc = 0.8387096774193548
User 10280 AUC after training: 0.8374689826302729
User 10280 does not improve AUC. Reverting changes.
Training on augumented user 1565 10/50 current_auc = 0.8387096774193548
User 1565 AUC after training: 0.8374689826302729
User 1565 does not improve AUC. Reverting changes.
Training on augumented user 103681 11/50 current_auc = 0.8387096774193548
User 103681 AUC after training: 0.8374689826302729
User 103681 does not improve AUC. Reverting changes.
Training on augumented user 5552 12/50 current_auc = 0.8387096774193548
User 5552 AUC after training: 0.8374689826302729
User 5552 does not improve AUC. Reverting changes.
Training on augumented user 119669 13/50 current_auc = 0.8387096774193548
User 119669 AUC after training: 0.8387096774193548
User 119669 does not improve AUC. Reverting changes.
Training on augumented user 40612 14/50 current_auc = 0.8387096774193548
User 40612 AUC after training: 0.8349875930521091
User 40612 does not improve AUC. Reverting changes.
Training on augumented user 20033 15/50 current_auc = 0.8387096774193548
User 20033 AUC after training: 0.8387096774193548
User 20033 does not improve AUC. Reverting changes.
Training on augumented user 62756 16/50 current_auc = 0.8387096774193548
User 62756 AUC after training: 0.8387096774193548
User 62756 does not improve AUC. Reverting changes.
Training on augumented user 68469 17/50 current_auc = 0.8387096774193548
User 68469 AUC after training: 0.8387096774193548
User 68469 does not improve AUC. Reverting changes.
Training on augumented user 41362 18/50 current_auc = 0.8387096774193548
User 41362 AUC after training: 0.8387096774193548
User 41362 does not improve AUC. Reverting changes.
Training on augumented user 2596 19/50 current_auc = 0.8387096774193548
User 2596 AUC after training: 0.8387096774193548
User 2596 does not improve AUC. Reverting changes.
Training on augumented user 24065 20/50 current_auc = 0.8387096774193548
User 24065 AUC after training: 0.8374689826302729
User 24065 does not improve AUC. Reverting changes.
Training on augumented user 59080 21/50 current_auc = 0.8387096774193548
User 59080 AUC after training: 0.8349875930521091
User 59080 does not improve AUC. Reverting changes.
Training on augumented user 87644 22/50 current_auc = 0.8387096774193548
User 87644 AUC after training: 0.8387096774193548
User 87644 does not improve AUC. Reverting changes.
Training on augumented user 438 23/50 current_auc = 0.8387096774193548
User 438 AUC after training: 0.8387096774193548
User 438 does not improve AUC. Reverting changes.
Training on augumented user 135068 24/50 current_auc = 0.8387096774193548
User 135068 AUC after training: 0.8387096774193548
User 135068 does not improve AUC. Reverting changes.
Training on augumented user 60953 25/50 current_auc = 0.8387096774193548
User 60953 AUC after training: 0.8374689826302729
User 60953 does not improve AUC. Reverting changes.
Training on augumented user 8788 26/50 current_auc = 0.8387096774193548
User 8788 AUC after training: 0.8387096774193548
User 8788 does not improve AUC. Reverting changes.
Training on augumented user 30698 27/50 current_auc = 0.8387096774193548
User 30698 AUC after training: 0.8387096774193548
User 30698 does not improve AUC. Reverting changes.
Training on augumented user 63216 28/50 current_auc = 0.8387096774193548
User 63216 AUC after training: 0.8387096774193548
User 63216 does not improve AUC. Reverting changes.
Training on augumented user 71827 29/50 current_auc = 0.8387096774193548
User 71827 AUC after training: 0.8387096774193548
User 71827 does not improve AUC. Reverting changes.
Training on augumented user 113103 30/50 current_auc = 0.8387096774193548
User 113103 AUC after training: 0.8349875930521091
User 113103 does not improve AUC. Reverting changes.
Training on augumented user 119736 31/50 current_auc = 0.8387096774193548
User 119736 AUC after training: 0.8374689826302729
User 119736 does not improve AUC. Reverting changes.
Training on augumented user 104704 32/50 current_auc = 0.8387096774193548
User 104704 AUC after training: 0.8387096774193548
User 104704 does not improve AUC. Reverting changes.
Training on augumented user 10176 33/50 current_auc = 0.8387096774193548
User 10176 AUC after training: 0.8387096774193548
User 10176 does not improve AUC. Reverting changes.
Training on augumented user 1910 34/50 current_auc = 0.8387096774193548
User 1910 AUC after training: 0.8387096774193548
User 1910 does not improve AUC. Reverting changes.
Training on augumented user 98989 35/50 current_auc = 0.8387096774193548
User 98989 AUC after training: 0.8374689826302729
User 98989 does not improve AUC. Reverting changes.
Training on augumented user 10701 36/50 current_auc = 0.8387096774193548
User 10701 AUC after training: 0.8374689826302729
User 10701 does not improve AUC. Reverting changes.
Training on augumented user 80103 37/50 current_auc = 0.8387096774193548
User 80103 AUC after training: 0.8337468982630273
User 80103 does not improve AUC. Reverting changes.
Training on augumented user 138238 38/50 current_auc = 0.8387096774193548
User 138238 AUC after training: 0.8387096774193548
User 138238 does not improve AUC. Reverting changes.
Training on augumented user 22586 39/50 current_auc = 0.8387096774193548
User 22586 AUC after training: 0.8387096774193548
User 22586 does not improve AUC. Reverting changes.
Training on augumented user 102465 40/50 current_auc = 0.8387096774193548
User 102465 AUC after training: 0.8387096774193548
User 102465 does not improve AUC. Reverting changes.
Training on augumented user 32287 41/50 current_auc = 0.8387096774193548
User 32287 AUC after training: 0.8374689826302729
User 32287 does not improve AUC. Reverting changes.
Training on augumented user 9226 42/50 current_auc = 0.8387096774193548
User 9226 AUC after training: 0.8349875930521091
User 9226 does not improve AUC. Reverting changes.
Training on augumented user 96761 43/50 current_auc = 0.8387096774193548
User 96761 AUC after training: 0.8387096774193548
User 96761 does not improve AUC. Reverting changes.
Training on augumented user 63854 44/50 current_auc = 0.8387096774193548
User 63854 AUC after training: 0.8374689826302729
User 63854 does not improve AUC. Reverting changes.
Training on augumented user 79569 45/50 current_auc = 0.8387096774193548
User 79569 AUC after training: 0.8374689826302729
User 79569 does not improve AUC. Reverting changes.
Training on augumented user 123151 46/50 current_auc = 0.8387096774193548
User 123151 AUC after training: 0.8387096774193548
User 123151 does not improve AUC. Reverting changes.
Training on augumented user 51806 47/50 current_auc = 0.8387096774193548
User 51806 AUC after training: 0.8387096774193548
User 51806 does not improve AUC. Reverting changes.
Training on augumented user 18050 48/50 current_auc = 0.8387096774193548
User 18050 AUC after training: 0.8337468982630272
User 18050 does not improve AUC. Reverting changes.
Training on augumented user 35601 49/50 current_auc = 0.8387096774193548
User 35601 AUC after training: 0.8374689826302729
User 35601 does not improve AUC. Reverting changes.
[2024-12-02 18:33:28.763100] start test user 71764 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:29.202901] start test user 71764 103/568 recall augumented users by random, augumented_users = [158, 10887, 45500, 95050, 103161, 86939, 125723, 69219, 132556, 106780, 105368, 73924, 4209, 127068, 126539, 132041, 130976, 98844, 135557, 5321, 87710, 120686, 123765, 115511, 24334, 78780, 43619, 134934, 112597, 118917, 92835, 88056, 71803, 23293, 82951, 15472, 67967, 76098, 30707, 104965, 137803, 12307, 125895, 42914, 56139, 22853, 51191, 82878, 104974, 78184]
[2024-12-02 18:33:29.219428] user = 71764 Cloud 103/568
[2024-12-02 18:33:29.233976] user = 71764 Local 103/568
[2024-12-02 18:33:29.298966] user = 71764 Local+ 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:31.876353] user = 71764 MPDA- 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6629720853858785
Training on augumented user 158 0/50 current_auc = 0.6629720853858785
User 158 AUC after training: 0.6605090311986863
User 158 does not improve AUC. Reverting changes.
Training on augumented user 10887 1/50 current_auc = 0.6629720853858785
User 10887 AUC after training: 0.6609195402298851
User 10887 does not improve AUC. Reverting changes.
Training on augumented user 45500 2/50 current_auc = 0.6629720853858785
User 45500 AUC after training: 0.6629720853858785
User 45500 does not improve AUC. Reverting changes.
Training on augumented user 95050 3/50 current_auc = 0.6629720853858785
User 95050 AUC after training: 0.6629720853858785
User 95050 does not improve AUC. Reverting changes.
Training on augumented user 103161 4/50 current_auc = 0.6629720853858785
User 103161 AUC after training: 0.6621510673234812
User 103161 does not improve AUC. Reverting changes.
Training on augumented user 86939 5/50 current_auc = 0.6629720853858785
User 86939 AUC after training: 0.6625615763546798
User 86939 does not improve AUC. Reverting changes.
Training on augumented user 125723 6/50 current_auc = 0.6629720853858785
User 125723 AUC after training: 0.6646141215106732
User 125723 improves AUC. Keeping the model.
Training on augumented user 69219 7/50 current_auc = 0.6646141215106732
User 69219 AUC after training: 0.6621510673234812
User 69219 does not improve AUC. Reverting changes.
Training on augumented user 132556 8/50 current_auc = 0.6646141215106732
User 132556 AUC after training: 0.6642036124794746
User 132556 does not improve AUC. Reverting changes.
Training on augumented user 106780 9/50 current_auc = 0.6646141215106732
User 106780 AUC after training: 0.6629720853858785
User 106780 does not improve AUC. Reverting changes.
Training on augumented user 105368 10/50 current_auc = 0.6646141215106732
User 105368 AUC after training: 0.6637931034482758
User 105368 does not improve AUC. Reverting changes.
Training on augumented user 73924 11/50 current_auc = 0.6646141215106732
User 73924 AUC after training: 0.6642036124794746
User 73924 does not improve AUC. Reverting changes.
Training on augumented user 4209 12/50 current_auc = 0.6646141215106732
User 4209 AUC after training: 0.6642036124794746
User 4209 does not improve AUC. Reverting changes.
Training on augumented user 127068 13/50 current_auc = 0.6646141215106732
User 127068 AUC after training: 0.6642036124794746
User 127068 does not improve AUC. Reverting changes.
Training on augumented user 126539 14/50 current_auc = 0.6646141215106732
User 126539 AUC after training: 0.6654351395730707
User 126539 improves AUC. Keeping the model.
Training on augumented user 132041 15/50 current_auc = 0.6654351395730707
User 132041 AUC after training: 0.6625615763546797
User 132041 does not improve AUC. Reverting changes.
Training on augumented user 130976 16/50 current_auc = 0.6654351395730707
User 130976 AUC after training: 0.6609195402298851
User 130976 does not improve AUC. Reverting changes.
Training on augumented user 98844 17/50 current_auc = 0.6654351395730707
User 98844 AUC after training: 0.6658456486042693
User 98844 improves AUC. Keeping the model.
Training on augumented user 135557 18/50 current_auc = 0.6658456486042693
User 135557 AUC after training: 0.6650246305418719
User 135557 does not improve AUC. Reverting changes.
Training on augumented user 5321 19/50 current_auc = 0.6658456486042693
User 5321 AUC after training: 0.6654351395730707
User 5321 does not improve AUC. Reverting changes.
Training on augumented user 87710 20/50 current_auc = 0.6658456486042693
User 87710 AUC after training: 0.6646141215106732
User 87710 does not improve AUC. Reverting changes.
Training on augumented user 120686 21/50 current_auc = 0.6658456486042693
User 120686 AUC after training: 0.6625615763546798
User 120686 does not improve AUC. Reverting changes.
Training on augumented user 123765 22/50 current_auc = 0.6658456486042693
User 123765 AUC after training: 0.6654351395730707
User 123765 does not improve AUC. Reverting changes.
Training on augumented user 115511 23/50 current_auc = 0.6658456486042693
User 115511 AUC after training: 0.6670771756978653
User 115511 improves AUC. Keeping the model.
Training on augumented user 24334 24/50 current_auc = 0.6670771756978653
User 24334 AUC after training: 0.666256157635468
User 24334 does not improve AUC. Reverting changes.
Training on augumented user 78780 25/50 current_auc = 0.6670771756978653
User 78780 AUC after training: 0.666256157635468
User 78780 does not improve AUC. Reverting changes.
Training on augumented user 43619 26/50 current_auc = 0.6670771756978653
User 43619 AUC after training: 0.6654351395730705
User 43619 does not improve AUC. Reverting changes.
Training on augumented user 134934 27/50 current_auc = 0.6670771756978653
User 134934 AUC after training: 0.6674876847290641
User 134934 improves AUC. Keeping the model.
Training on augumented user 112597 28/50 current_auc = 0.6674876847290641
User 112597 AUC after training: 0.6650246305418719
User 112597 does not improve AUC. Reverting changes.
Training on augumented user 118917 29/50 current_auc = 0.6674876847290641
User 118917 AUC after training: 0.666256157635468
User 118917 does not improve AUC. Reverting changes.
Training on augumented user 92835 30/50 current_auc = 0.6674876847290641
User 92835 AUC after training: 0.6670771756978653
User 92835 does not improve AUC. Reverting changes.
Training on augumented user 88056 31/50 current_auc = 0.6674876847290641
User 88056 AUC after training: 0.6654351395730707
User 88056 does not improve AUC. Reverting changes.
Training on augumented user 71803 32/50 current_auc = 0.6674876847290641
User 71803 AUC after training: 0.6633825944170771
User 71803 does not improve AUC. Reverting changes.
Training on augumented user 23293 33/50 current_auc = 0.6674876847290641
User 23293 AUC after training: 0.6674876847290641
User 23293 does not improve AUC. Reverting changes.
Training on augumented user 82951 34/50 current_auc = 0.6674876847290641
User 82951 AUC after training: 0.6666666666666666
User 82951 does not improve AUC. Reverting changes.
Training on augumented user 15472 35/50 current_auc = 0.6674876847290641
User 15472 AUC after training: 0.6654351395730705
User 15472 does not improve AUC. Reverting changes.
Training on augumented user 67967 36/50 current_auc = 0.6674876847290641
User 67967 AUC after training: 0.6646141215106731
User 67967 does not improve AUC. Reverting changes.
Training on augumented user 76098 37/50 current_auc = 0.6674876847290641
User 76098 AUC after training: 0.6646141215106732
User 76098 does not improve AUC. Reverting changes.
Training on augumented user 30707 38/50 current_auc = 0.6674876847290641
User 30707 AUC after training: 0.6613300492610837
User 30707 does not improve AUC. Reverting changes.
Training on augumented user 104965 39/50 current_auc = 0.6674876847290641
User 104965 AUC after training: 0.6670771756978653
User 104965 does not improve AUC. Reverting changes.
Training on augumented user 137803 40/50 current_auc = 0.6674876847290641
User 137803 AUC after training: 0.6670771756978654
User 137803 does not improve AUC. Reverting changes.
Training on augumented user 12307 41/50 current_auc = 0.6674876847290641
User 12307 AUC after training: 0.6654351395730707
User 12307 does not improve AUC. Reverting changes.
Training on augumented user 125895 42/50 current_auc = 0.6674876847290641
User 125895 AUC after training: 0.6666666666666666
User 125895 does not improve AUC. Reverting changes.
Training on augumented user 42914 43/50 current_auc = 0.6674876847290641
User 42914 AUC after training: 0.6666666666666667
User 42914 does not improve AUC. Reverting changes.
Training on augumented user 56139 44/50 current_auc = 0.6674876847290641
User 56139 AUC after training: 0.6654351395730707
User 56139 does not improve AUC. Reverting changes.
Training on augumented user 22853 45/50 current_auc = 0.6674876847290641
User 22853 AUC after training: 0.6658456486042693
User 22853 does not improve AUC. Reverting changes.
Training on augumented user 51191 46/50 current_auc = 0.6674876847290641
User 51191 AUC after training: 0.6666666666666666
User 51191 does not improve AUC. Reverting changes.
Training on augumented user 82878 47/50 current_auc = 0.6674876847290641
User 82878 AUC after training: 0.6666666666666666
User 82878 does not improve AUC. Reverting changes.
Training on augumented user 104974 48/50 current_auc = 0.6674876847290641
User 104974 AUC after training: 0.6670771756978653
User 104974 does not improve AUC. Reverting changes.
Training on augumented user 78184 49/50 current_auc = 0.6674876847290641
User 78184 AUC after training: 0.666256157635468
User 78184 does not improve AUC. Reverting changes.
[2024-12-02 18:34:02.143624] start test user 71768 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:02.816233] start test user 71768 104/568 recall augumented users by random, augumented_users = [94590, 77152, 81150, 39622, 119711, 41394, 58699, 69036, 102161, 54614, 36217, 127013, 124210, 86207, 119004, 3803, 43406, 28014, 59113, 75831, 32586, 106829, 134333, 59342, 9545, 78204, 137767, 30054, 134388, 118601, 44921, 51830, 39811, 52704, 42881, 8823, 60133, 94974, 63695, 4474, 8236, 115127, 131870, 15530, 93999, 93479, 31605, 46364, 95603, 134897]
[2024-12-02 18:34:02.832293] user = 71768 Cloud 104/568
[2024-12-02 18:34:02.901347] user = 71768 Local 104/568
[2024-12-02 18:34:03.155678] user = 71768 Local+ 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:05.924474] user = 71768 MPDA- 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6844919786096257
Training on augumented user 94590 0/50 current_auc = 0.6844919786096257
User 94590 AUC after training: 0.6831550802139038
User 94590 does not improve AUC. Reverting changes.
Training on augumented user 77152 1/50 current_auc = 0.6844919786096257
User 77152 AUC after training: 0.6804812834224598
User 77152 does not improve AUC. Reverting changes.
Training on augumented user 81150 2/50 current_auc = 0.6844919786096257
User 81150 AUC after training: 0.6831550802139037
User 81150 does not improve AUC. Reverting changes.
Training on augumented user 39622 3/50 current_auc = 0.6844919786096257
User 39622 AUC after training: 0.6818181818181819
User 39622 does not improve AUC. Reverting changes.
Training on augumented user 119711 4/50 current_auc = 0.6844919786096257
User 119711 AUC after training: 0.6831550802139037
User 119711 does not improve AUC. Reverting changes.
Training on augumented user 41394 5/50 current_auc = 0.6844919786096257
User 41394 AUC after training: 0.6818181818181819
User 41394 does not improve AUC. Reverting changes.
Training on augumented user 58699 6/50 current_auc = 0.6844919786096257
User 58699 AUC after training: 0.6818181818181819
User 58699 does not improve AUC. Reverting changes.
Training on augumented user 69036 7/50 current_auc = 0.6844919786096257
User 69036 AUC after training: 0.679144385026738
User 69036 does not improve AUC. Reverting changes.
Training on augumented user 102161 8/50 current_auc = 0.6844919786096257
User 102161 AUC after training: 0.6831550802139038
User 102161 does not improve AUC. Reverting changes.
Training on augumented user 54614 9/50 current_auc = 0.6844919786096257
User 54614 AUC after training: 0.6844919786096257
User 54614 does not improve AUC. Reverting changes.
Training on augumented user 36217 10/50 current_auc = 0.6844919786096257
User 36217 AUC after training: 0.6831550802139037
User 36217 does not improve AUC. Reverting changes.
Training on augumented user 127013 11/50 current_auc = 0.6844919786096257
User 127013 AUC after training: 0.6818181818181819
User 127013 does not improve AUC. Reverting changes.
Training on augumented user 124210 12/50 current_auc = 0.6844919786096257
User 124210 AUC after training: 0.6831550802139038
User 124210 does not improve AUC. Reverting changes.
Training on augumented user 86207 13/50 current_auc = 0.6844919786096257
User 86207 AUC after training: 0.6858288770053477
User 86207 improves AUC. Keeping the model.
Training on augumented user 119004 14/50 current_auc = 0.6858288770053477
User 119004 AUC after training: 0.6871657754010696
User 119004 improves AUC. Keeping the model.
Training on augumented user 3803 15/50 current_auc = 0.6871657754010696
User 3803 AUC after training: 0.6858288770053477
User 3803 does not improve AUC. Reverting changes.
Training on augumented user 43406 16/50 current_auc = 0.6871657754010696
User 43406 AUC after training: 0.6871657754010696
User 43406 does not improve AUC. Reverting changes.
Training on augumented user 28014 17/50 current_auc = 0.6871657754010696
User 28014 AUC after training: 0.6844919786096257
User 28014 does not improve AUC. Reverting changes.
Training on augumented user 59113 18/50 current_auc = 0.6871657754010696
User 59113 AUC after training: 0.6798128342245989
User 59113 does not improve AUC. Reverting changes.
Training on augumented user 75831 19/50 current_auc = 0.6871657754010696
User 75831 AUC after training: 0.6871657754010696
User 75831 does not improve AUC. Reverting changes.
Training on augumented user 32586 20/50 current_auc = 0.6871657754010696
User 32586 AUC after training: 0.6851604278074866
User 32586 does not improve AUC. Reverting changes.
Training on augumented user 106829 21/50 current_auc = 0.6871657754010696
User 106829 AUC after training: 0.6844919786096257
User 106829 does not improve AUC. Reverting changes.
Training on augumented user 134333 22/50 current_auc = 0.6871657754010696
User 134333 AUC after training: 0.6831550802139038
User 134333 does not improve AUC. Reverting changes.
Training on augumented user 59342 23/50 current_auc = 0.6871657754010696
User 59342 AUC after training: 0.6831550802139038
User 59342 does not improve AUC. Reverting changes.
Training on augumented user 9545 24/50 current_auc = 0.6871657754010696
User 9545 AUC after training: 0.6844919786096257
User 9545 does not improve AUC. Reverting changes.
Training on augumented user 78204 25/50 current_auc = 0.6871657754010696
User 78204 AUC after training: 0.6818181818181819
User 78204 does not improve AUC. Reverting changes.
Training on augumented user 137767 26/50 current_auc = 0.6871657754010696
User 137767 AUC after training: 0.6858288770053477
User 137767 does not improve AUC. Reverting changes.
Training on augumented user 30054 27/50 current_auc = 0.6871657754010696
User 30054 AUC after training: 0.6858288770053476
User 30054 does not improve AUC. Reverting changes.
Training on augumented user 134388 28/50 current_auc = 0.6871657754010696
User 134388 AUC after training: 0.6858288770053476
User 134388 does not improve AUC. Reverting changes.
Training on augumented user 118601 29/50 current_auc = 0.6871657754010696
User 118601 AUC after training: 0.6844919786096257
User 118601 does not improve AUC. Reverting changes.
Training on augumented user 44921 30/50 current_auc = 0.6871657754010696
User 44921 AUC after training: 0.6804812834224598
User 44921 does not improve AUC. Reverting changes.
Training on augumented user 51830 31/50 current_auc = 0.6871657754010696
User 51830 AUC after training: 0.6831550802139037
User 51830 does not improve AUC. Reverting changes.
Training on augumented user 39811 32/50 current_auc = 0.6871657754010696
User 39811 AUC after training: 0.6831550802139038
User 39811 does not improve AUC. Reverting changes.
Training on augumented user 52704 33/50 current_auc = 0.6871657754010696
User 52704 AUC after training: 0.6838235294117647
User 52704 does not improve AUC. Reverting changes.
Training on augumented user 42881 34/50 current_auc = 0.6871657754010696
User 42881 AUC after training: 0.6844919786096257
User 42881 does not improve AUC. Reverting changes.
Training on augumented user 8823 35/50 current_auc = 0.6871657754010696
User 8823 AUC after training: 0.6851604278074866
User 8823 does not improve AUC. Reverting changes.
Training on augumented user 60133 36/50 current_auc = 0.6871657754010696
User 60133 AUC after training: 0.6871657754010696
User 60133 does not improve AUC. Reverting changes.
Training on augumented user 94974 37/50 current_auc = 0.6871657754010696
User 94974 AUC after training: 0.6778074866310161
User 94974 does not improve AUC. Reverting changes.
Training on augumented user 63695 38/50 current_auc = 0.6871657754010696
User 63695 AUC after training: 0.6858288770053476
User 63695 does not improve AUC. Reverting changes.
Training on augumented user 4474 39/50 current_auc = 0.6871657754010696
User 4474 AUC after training: 0.6818181818181819
User 4474 does not improve AUC. Reverting changes.
Training on augumented user 8236 40/50 current_auc = 0.6871657754010696
User 8236 AUC after training: 0.6844919786096257
User 8236 does not improve AUC. Reverting changes.
Training on augumented user 115127 41/50 current_auc = 0.6871657754010696
User 115127 AUC after training: 0.6831550802139037
User 115127 does not improve AUC. Reverting changes.
Training on augumented user 131870 42/50 current_auc = 0.6871657754010696
User 131870 AUC after training: 0.678475935828877
User 131870 does not improve AUC. Reverting changes.
Training on augumented user 15530 43/50 current_auc = 0.6871657754010696
User 15530 AUC after training: 0.6831550802139038
User 15530 does not improve AUC. Reverting changes.
Training on augumented user 93999 44/50 current_auc = 0.6871657754010696
User 93999 AUC after training: 0.6831550802139038
User 93999 does not improve AUC. Reverting changes.
Training on augumented user 93479 45/50 current_auc = 0.6871657754010696
User 93479 AUC after training: 0.6858288770053476
User 93479 does not improve AUC. Reverting changes.
Training on augumented user 31605 46/50 current_auc = 0.6871657754010696
User 31605 AUC after training: 0.6844919786096257
User 31605 does not improve AUC. Reverting changes.
Training on augumented user 46364 47/50 current_auc = 0.6871657754010696
User 46364 AUC after training: 0.6858288770053476
User 46364 does not improve AUC. Reverting changes.
Training on augumented user 95603 48/50 current_auc = 0.6871657754010696
User 95603 AUC after training: 0.6844919786096256
User 95603 does not improve AUC. Reverting changes.
Training on augumented user 134897 49/50 current_auc = 0.6871657754010696
User 134897 AUC after training: 0.6791443850267379
User 134897 does not improve AUC. Reverting changes.
[2024-12-02 18:34:35.807541] start test user 71798 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:36.211291] start test user 71798 105/568 recall augumented users by random, augumented_users = [67199, 27742, 10150, 70923, 97597, 116173, 113197, 129196, 48893, 38166, 89218, 85151, 120718, 117693, 68892, 29452, 4084, 46216, 29253, 82607, 115416, 16927, 104720, 71087, 15077, 6677, 130183, 2542, 20503, 108948, 32186, 92289, 10951, 43315, 92299, 71126, 119629, 133995, 138454, 41846, 78998, 78385, 134136, 100430, 1404, 113040, 81191, 74453, 26692, 135537]
[2024-12-02 18:34:36.226479] user = 71798 Cloud 105/568
[2024-12-02 18:34:36.235750] user = 71798 Local 105/568
[2024-12-02 18:34:36.286706] user = 71798 Local+ 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:38.511397] user = 71798 MPDA- 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 67199 0/50 current_auc = 0.75
User 67199 AUC after training: 0.75
User 67199 does not improve AUC. Reverting changes.
Training on augumented user 27742 1/50 current_auc = 0.75
User 27742 AUC after training: 0.75
User 27742 does not improve AUC. Reverting changes.
Training on augumented user 10150 2/50 current_auc = 0.75
User 10150 AUC after training: 0.75
User 10150 does not improve AUC. Reverting changes.
Training on augumented user 70923 3/50 current_auc = 0.75
User 70923 AUC after training: 0.75
User 70923 does not improve AUC. Reverting changes.
Training on augumented user 97597 4/50 current_auc = 0.75
User 97597 AUC after training: 0.75
User 97597 does not improve AUC. Reverting changes.
Training on augumented user 116173 5/50 current_auc = 0.75
User 116173 AUC after training: 0.75
User 116173 does not improve AUC. Reverting changes.
Training on augumented user 113197 6/50 current_auc = 0.75
User 113197 AUC after training: 0.75
User 113197 does not improve AUC. Reverting changes.
Training on augumented user 129196 7/50 current_auc = 0.75
User 129196 AUC after training: 0.75
User 129196 does not improve AUC. Reverting changes.
Training on augumented user 48893 8/50 current_auc = 0.75
User 48893 AUC after training: 0.75
User 48893 does not improve AUC. Reverting changes.
Training on augumented user 38166 9/50 current_auc = 0.75
User 38166 AUC after training: 0.75
User 38166 does not improve AUC. Reverting changes.
Training on augumented user 89218 10/50 current_auc = 0.75
User 89218 AUC after training: 0.75
User 89218 does not improve AUC. Reverting changes.
Training on augumented user 85151 11/50 current_auc = 0.75
User 85151 AUC after training: 0.75
User 85151 does not improve AUC. Reverting changes.
Training on augumented user 120718 12/50 current_auc = 0.75
User 120718 AUC after training: 0.75
User 120718 does not improve AUC. Reverting changes.
Training on augumented user 117693 13/50 current_auc = 0.75
User 117693 AUC after training: 0.75
User 117693 does not improve AUC. Reverting changes.
Training on augumented user 68892 14/50 current_auc = 0.75
User 68892 AUC after training: 0.75
User 68892 does not improve AUC. Reverting changes.
Training on augumented user 29452 15/50 current_auc = 0.75
User 29452 AUC after training: 0.75
User 29452 does not improve AUC. Reverting changes.
Training on augumented user 4084 16/50 current_auc = 0.75
User 4084 AUC after training: 0.7857142857142857
User 4084 improves AUC. Keeping the model.
Training on augumented user 46216 17/50 current_auc = 0.7857142857142857
User 46216 AUC after training: 0.7857142857142857
User 46216 does not improve AUC. Reverting changes.
Training on augumented user 29253 18/50 current_auc = 0.7857142857142857
User 29253 AUC after training: 0.7857142857142857
User 29253 does not improve AUC. Reverting changes.
Training on augumented user 82607 19/50 current_auc = 0.7857142857142857
User 82607 AUC after training: 0.75
User 82607 does not improve AUC. Reverting changes.
Training on augumented user 115416 20/50 current_auc = 0.7857142857142857
User 115416 AUC after training: 0.75
User 115416 does not improve AUC. Reverting changes.
Training on augumented user 16927 21/50 current_auc = 0.7857142857142857
User 16927 AUC after training: 0.75
User 16927 does not improve AUC. Reverting changes.
Training on augumented user 104720 22/50 current_auc = 0.7857142857142857
User 104720 AUC after training: 0.7857142857142857
User 104720 does not improve AUC. Reverting changes.
Training on augumented user 71087 23/50 current_auc = 0.7857142857142857
User 71087 AUC after training: 0.7857142857142857
User 71087 does not improve AUC. Reverting changes.
Training on augumented user 15077 24/50 current_auc = 0.7857142857142857
User 15077 AUC after training: 0.75
User 15077 does not improve AUC. Reverting changes.
Training on augumented user 6677 25/50 current_auc = 0.7857142857142857
User 6677 AUC after training: 0.75
User 6677 does not improve AUC. Reverting changes.
Training on augumented user 130183 26/50 current_auc = 0.7857142857142857
User 130183 AUC after training: 0.7857142857142857
User 130183 does not improve AUC. Reverting changes.
Training on augumented user 2542 27/50 current_auc = 0.7857142857142857
User 2542 AUC after training: 0.75
User 2542 does not improve AUC. Reverting changes.
Training on augumented user 20503 28/50 current_auc = 0.7857142857142857
User 20503 AUC after training: 0.7857142857142857
User 20503 does not improve AUC. Reverting changes.
Training on augumented user 108948 29/50 current_auc = 0.7857142857142857
User 108948 AUC after training: 0.75
User 108948 does not improve AUC. Reverting changes.
Training on augumented user 32186 30/50 current_auc = 0.7857142857142857
User 32186 AUC after training: 0.7857142857142857
User 32186 does not improve AUC. Reverting changes.
Training on augumented user 92289 31/50 current_auc = 0.7857142857142857
User 92289 AUC after training: 0.75
User 92289 does not improve AUC. Reverting changes.
Training on augumented user 10951 32/50 current_auc = 0.7857142857142857
User 10951 AUC after training: 0.75
User 10951 does not improve AUC. Reverting changes.
Training on augumented user 43315 33/50 current_auc = 0.7857142857142857
User 43315 AUC after training: 0.7857142857142857
User 43315 does not improve AUC. Reverting changes.
Training on augumented user 92299 34/50 current_auc = 0.7857142857142857
User 92299 AUC after training: 0.7857142857142857
User 92299 does not improve AUC. Reverting changes.
Training on augumented user 71126 35/50 current_auc = 0.7857142857142857
User 71126 AUC after training: 0.7857142857142857
User 71126 does not improve AUC. Reverting changes.
Training on augumented user 119629 36/50 current_auc = 0.7857142857142857
User 119629 AUC after training: 0.75
User 119629 does not improve AUC. Reverting changes.
Training on augumented user 133995 37/50 current_auc = 0.7857142857142857
User 133995 AUC after training: 0.75
User 133995 does not improve AUC. Reverting changes.
Training on augumented user 138454 38/50 current_auc = 0.7857142857142857
User 138454 AUC after training: 0.7857142857142857
User 138454 does not improve AUC. Reverting changes.
Training on augumented user 41846 39/50 current_auc = 0.7857142857142857
User 41846 AUC after training: 0.75
User 41846 does not improve AUC. Reverting changes.
Training on augumented user 78998 40/50 current_auc = 0.7857142857142857
User 78998 AUC after training: 0.7857142857142857
User 78998 does not improve AUC. Reverting changes.
Training on augumented user 78385 41/50 current_auc = 0.7857142857142857
User 78385 AUC after training: 0.75
User 78385 does not improve AUC. Reverting changes.
Training on augumented user 134136 42/50 current_auc = 0.7857142857142857
User 134136 AUC after training: 0.7857142857142857
User 134136 does not improve AUC. Reverting changes.
Training on augumented user 100430 43/50 current_auc = 0.7857142857142857
User 100430 AUC after training: 0.7857142857142857
User 100430 does not improve AUC. Reverting changes.
Training on augumented user 1404 44/50 current_auc = 0.7857142857142857
User 1404 AUC after training: 0.7857142857142857
User 1404 does not improve AUC. Reverting changes.
Training on augumented user 113040 45/50 current_auc = 0.7857142857142857
User 113040 AUC after training: 0.75
User 113040 does not improve AUC. Reverting changes.
Training on augumented user 81191 46/50 current_auc = 0.7857142857142857
User 81191 AUC after training: 0.75
User 81191 does not improve AUC. Reverting changes.
Training on augumented user 74453 47/50 current_auc = 0.7857142857142857
User 74453 AUC after training: 0.75
User 74453 does not improve AUC. Reverting changes.
Training on augumented user 26692 48/50 current_auc = 0.7857142857142857
User 26692 AUC after training: 0.7857142857142857
User 26692 does not improve AUC. Reverting changes.
Training on augumented user 135537 49/50 current_auc = 0.7857142857142857
User 135537 AUC after training: 0.7857142857142857
User 135537 does not improve AUC. Reverting changes.
[2024-12-02 18:35:06.852690] start test user 71799 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:07.569819] start test user 71799 106/568 recall augumented users by random, augumented_users = [125105, 130886, 65397, 83455, 118107, 37916, 75332, 121009, 91880, 24870, 42571, 16929, 44837, 80595, 72540, 78239, 94358, 133921, 124079, 121448, 89765, 67089, 85643, 13091, 47214, 101382, 69603, 1245, 113756, 18120, 43484, 86415, 82599, 110343, 69883, 16143, 63556, 45701, 52825, 39512, 38462, 20220, 96383, 67796, 40777, 92466, 60703, 74844, 102838, 119591]
[2024-12-02 18:35:07.610084] user = 71799 Cloud 106/568
[2024-12-02 18:35:07.620021] user = 71799 Local 106/568
[2024-12-02 18:35:07.721641] user = 71799 Local+ 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:09.912815] user = 71799 MPDA- 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6
Training on augumented user 125105 0/50 current_auc = 0.6
User 125105 AUC after training: 0.6
User 125105 does not improve AUC. Reverting changes.
Training on augumented user 130886 1/50 current_auc = 0.6
User 130886 AUC after training: 0.6
User 130886 does not improve AUC. Reverting changes.
Training on augumented user 65397 2/50 current_auc = 0.6
User 65397 AUC after training: 0.6
User 65397 does not improve AUC. Reverting changes.
Training on augumented user 83455 3/50 current_auc = 0.6
User 83455 AUC after training: 0.6
User 83455 does not improve AUC. Reverting changes.
Training on augumented user 118107 4/50 current_auc = 0.6
User 118107 AUC after training: 0.6
User 118107 does not improve AUC. Reverting changes.
Training on augumented user 37916 5/50 current_auc = 0.6
User 37916 AUC after training: 0.6
User 37916 does not improve AUC. Reverting changes.
Training on augumented user 75332 6/50 current_auc = 0.6
User 75332 AUC after training: 0.6
User 75332 does not improve AUC. Reverting changes.
Training on augumented user 121009 7/50 current_auc = 0.6
User 121009 AUC after training: 0.6
User 121009 does not improve AUC. Reverting changes.
Training on augumented user 91880 8/50 current_auc = 0.6
User 91880 AUC after training: 0.6
User 91880 does not improve AUC. Reverting changes.
Training on augumented user 24870 9/50 current_auc = 0.6
User 24870 AUC after training: 0.6
User 24870 does not improve AUC. Reverting changes.
Training on augumented user 42571 10/50 current_auc = 0.6
User 42571 AUC after training: 0.6
User 42571 does not improve AUC. Reverting changes.
Training on augumented user 16929 11/50 current_auc = 0.6
User 16929 AUC after training: 0.6
User 16929 does not improve AUC. Reverting changes.
Training on augumented user 44837 12/50 current_auc = 0.6
User 44837 AUC after training: 0.6
User 44837 does not improve AUC. Reverting changes.
Training on augumented user 80595 13/50 current_auc = 0.6
User 80595 AUC after training: 0.6
User 80595 does not improve AUC. Reverting changes.
Training on augumented user 72540 14/50 current_auc = 0.6
User 72540 AUC after training: 0.6
User 72540 does not improve AUC. Reverting changes.
Training on augumented user 78239 15/50 current_auc = 0.6
User 78239 AUC after training: 0.6
User 78239 does not improve AUC. Reverting changes.
Training on augumented user 94358 16/50 current_auc = 0.6
User 94358 AUC after training: 0.6
User 94358 does not improve AUC. Reverting changes.
Training on augumented user 133921 17/50 current_auc = 0.6
User 133921 AUC after training: 0.6
User 133921 does not improve AUC. Reverting changes.
Training on augumented user 124079 18/50 current_auc = 0.6
User 124079 AUC after training: 0.6
User 124079 does not improve AUC. Reverting changes.
Training on augumented user 121448 19/50 current_auc = 0.6
User 121448 AUC after training: 0.6
User 121448 does not improve AUC. Reverting changes.
Training on augumented user 89765 20/50 current_auc = 0.6
User 89765 AUC after training: 0.6
User 89765 does not improve AUC. Reverting changes.
Training on augumented user 67089 21/50 current_auc = 0.6
User 67089 AUC after training: 0.6
User 67089 does not improve AUC. Reverting changes.
Training on augumented user 85643 22/50 current_auc = 0.6
User 85643 AUC after training: 0.6
User 85643 does not improve AUC. Reverting changes.
Training on augumented user 13091 23/50 current_auc = 0.6
User 13091 AUC after training: 0.6
User 13091 does not improve AUC. Reverting changes.
Training on augumented user 47214 24/50 current_auc = 0.6
User 47214 AUC after training: 0.6
User 47214 does not improve AUC. Reverting changes.
Training on augumented user 101382 25/50 current_auc = 0.6
User 101382 AUC after training: 0.6
User 101382 does not improve AUC. Reverting changes.
Training on augumented user 69603 26/50 current_auc = 0.6
User 69603 AUC after training: 0.6
User 69603 does not improve AUC. Reverting changes.
Training on augumented user 1245 27/50 current_auc = 0.6
User 1245 AUC after training: 0.6
User 1245 does not improve AUC. Reverting changes.
Training on augumented user 113756 28/50 current_auc = 0.6
User 113756 AUC after training: 0.6
User 113756 does not improve AUC. Reverting changes.
Training on augumented user 18120 29/50 current_auc = 0.6
User 18120 AUC after training: 0.6
User 18120 does not improve AUC. Reverting changes.
Training on augumented user 43484 30/50 current_auc = 0.6
User 43484 AUC after training: 0.6
User 43484 does not improve AUC. Reverting changes.
Training on augumented user 86415 31/50 current_auc = 0.6
User 86415 AUC after training: 0.6
User 86415 does not improve AUC. Reverting changes.
Training on augumented user 82599 32/50 current_auc = 0.6
User 82599 AUC after training: 0.6
User 82599 does not improve AUC. Reverting changes.
Training on augumented user 110343 33/50 current_auc = 0.6
User 110343 AUC after training: 0.6
User 110343 does not improve AUC. Reverting changes.
Training on augumented user 69883 34/50 current_auc = 0.6
User 69883 AUC after training: 0.6
User 69883 does not improve AUC. Reverting changes.
Training on augumented user 16143 35/50 current_auc = 0.6
User 16143 AUC after training: 0.6
User 16143 does not improve AUC. Reverting changes.
Training on augumented user 63556 36/50 current_auc = 0.6
User 63556 AUC after training: 0.6
User 63556 does not improve AUC. Reverting changes.
Training on augumented user 45701 37/50 current_auc = 0.6
User 45701 AUC after training: 0.6
User 45701 does not improve AUC. Reverting changes.
Training on augumented user 52825 38/50 current_auc = 0.6
User 52825 AUC after training: 0.6
User 52825 does not improve AUC. Reverting changes.
Training on augumented user 39512 39/50 current_auc = 0.6
User 39512 AUC after training: 0.6
User 39512 does not improve AUC. Reverting changes.
Training on augumented user 38462 40/50 current_auc = 0.6
User 38462 AUC after training: 0.6
User 38462 does not improve AUC. Reverting changes.
Training on augumented user 20220 41/50 current_auc = 0.6
User 20220 AUC after training: 0.6
User 20220 does not improve AUC. Reverting changes.
Training on augumented user 96383 42/50 current_auc = 0.6
User 96383 AUC after training: 0.6
User 96383 does not improve AUC. Reverting changes.
Training on augumented user 67796 43/50 current_auc = 0.6
User 67796 AUC after training: 0.6
User 67796 does not improve AUC. Reverting changes.
Training on augumented user 40777 44/50 current_auc = 0.6
User 40777 AUC after training: 0.6
User 40777 does not improve AUC. Reverting changes.
Training on augumented user 92466 45/50 current_auc = 0.6
User 92466 AUC after training: 0.6
User 92466 does not improve AUC. Reverting changes.
Training on augumented user 60703 46/50 current_auc = 0.6
User 60703 AUC after training: 0.6
User 60703 does not improve AUC. Reverting changes.
Training on augumented user 74844 47/50 current_auc = 0.6
User 74844 AUC after training: 0.6
User 74844 does not improve AUC. Reverting changes.
Training on augumented user 102838 48/50 current_auc = 0.6
User 102838 AUC after training: 0.6
User 102838 does not improve AUC. Reverting changes.
Training on augumented user 119591 49/50 current_auc = 0.6
User 119591 AUC after training: 0.6
User 119591 does not improve AUC. Reverting changes.
[2024-12-02 18:35:40.027762] start test user 71825 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:40.615330] start test user 71825 107/568 recall augumented users by random, augumented_users = [97118, 4923, 43053, 38369, 138197, 124268, 57456, 109522, 12216, 74292, 109363, 62638, 73190, 104410, 18860, 134953, 100450, 23247, 66390, 52706, 19460, 138332, 43582, 1727, 15071, 74225, 55934, 77387, 92180, 55184, 46606, 68805, 77279, 127264, 100644, 730, 123834, 127499, 43340, 14866, 100120, 109805, 128282, 82144, 35728, 4036, 106829, 20918, 104789, 7177]
[2024-12-02 18:35:40.633222] user = 71825 Cloud 107/568
[2024-12-02 18:35:40.655983] user = 71825 Local 107/568
[2024-12-02 18:35:40.733730] user = 71825 Local+ 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:43.698457] user = 71825 MPDA- 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6752244897959183
Training on augumented user 97118 0/50 current_auc = 0.6752244897959183
User 97118 AUC after training: 0.6751836734693878
User 97118 does not improve AUC. Reverting changes.
Training on augumented user 4923 1/50 current_auc = 0.6752244897959183
User 4923 AUC after training: 0.6755918367346939
User 4923 improves AUC. Keeping the model.
Training on augumented user 43053 2/50 current_auc = 0.6755918367346939
User 43053 AUC after training: 0.6762857142857144
User 43053 improves AUC. Keeping the model.
Training on augumented user 38369 3/50 current_auc = 0.6762857142857144
User 38369 AUC after training: 0.6761224489795918
User 38369 does not improve AUC. Reverting changes.
Training on augumented user 138197 4/50 current_auc = 0.6762857142857144
User 138197 AUC after training: 0.6762857142857143
User 138197 does not improve AUC. Reverting changes.
Training on augumented user 124268 5/50 current_auc = 0.6762857142857144
User 124268 AUC after training: 0.6768979591836735
User 124268 improves AUC. Keeping the model.
Training on augumented user 57456 6/50 current_auc = 0.6768979591836735
User 57456 AUC after training: 0.6766122448979592
User 57456 does not improve AUC. Reverting changes.
Training on augumented user 109522 7/50 current_auc = 0.6768979591836735
User 109522 AUC after training: 0.677469387755102
User 109522 improves AUC. Keeping the model.
Training on augumented user 12216 8/50 current_auc = 0.677469387755102
User 12216 AUC after training: 0.6771428571428572
User 12216 does not improve AUC. Reverting changes.
Training on augumented user 74292 9/50 current_auc = 0.677469387755102
User 74292 AUC after training: 0.677469387755102
User 74292 does not improve AUC. Reverting changes.
Training on augumented user 109363 10/50 current_auc = 0.677469387755102
User 109363 AUC after training: 0.6769795918367346
User 109363 does not improve AUC. Reverting changes.
Training on augumented user 62638 11/50 current_auc = 0.677469387755102
User 62638 AUC after training: 0.6773877551020407
User 62638 does not improve AUC. Reverting changes.
Training on augumented user 73190 12/50 current_auc = 0.677469387755102
User 73190 AUC after training: 0.6777959183673469
User 73190 improves AUC. Keeping the model.
Training on augumented user 104410 13/50 current_auc = 0.6777959183673469
User 104410 AUC after training: 0.6780408163265306
User 104410 improves AUC. Keeping the model.
Training on augumented user 18860 14/50 current_auc = 0.6780408163265306
User 18860 AUC after training: 0.6775102040816326
User 18860 does not improve AUC. Reverting changes.
Training on augumented user 134953 15/50 current_auc = 0.6780408163265306
User 134953 AUC after training: 0.6782857142857143
User 134953 improves AUC. Keeping the model.
Training on augumented user 100450 16/50 current_auc = 0.6782857142857143
User 100450 AUC after training: 0.6779591836734694
User 100450 does not improve AUC. Reverting changes.
Training on augumented user 23247 17/50 current_auc = 0.6782857142857143
User 23247 AUC after training: 0.6778775510204081
User 23247 does not improve AUC. Reverting changes.
Training on augumented user 66390 18/50 current_auc = 0.6782857142857143
User 66390 AUC after training: 0.6781224489795918
User 66390 does not improve AUC. Reverting changes.
Training on augumented user 52706 19/50 current_auc = 0.6782857142857143
User 52706 AUC after training: 0.6783673469387754
User 52706 improves AUC. Keeping the model.
Training on augumented user 19460 20/50 current_auc = 0.6783673469387754
User 19460 AUC after training: 0.6781224489795918
User 19460 does not improve AUC. Reverting changes.
Training on augumented user 138332 21/50 current_auc = 0.6783673469387754
User 138332 AUC after training: 0.6783673469387755
User 138332 improves AUC. Keeping the model.
Training on augumented user 43582 22/50 current_auc = 0.6783673469387755
User 43582 AUC after training: 0.6791836734693878
User 43582 improves AUC. Keeping the model.
Training on augumented user 1727 23/50 current_auc = 0.6791836734693878
User 1727 AUC after training: 0.6791428571428572
User 1727 does not improve AUC. Reverting changes.
Training on augumented user 15071 24/50 current_auc = 0.6791836734693878
User 15071 AUC after training: 0.6791428571428572
User 15071 does not improve AUC. Reverting changes.
Training on augumented user 74225 25/50 current_auc = 0.6791836734693878
User 74225 AUC after training: 0.6791020408163265
User 74225 does not improve AUC. Reverting changes.
Training on augumented user 55934 26/50 current_auc = 0.6791836734693878
User 55934 AUC after training: 0.6792244897959184
User 55934 improves AUC. Keeping the model.
Training on augumented user 77387 27/50 current_auc = 0.6792244897959184
User 77387 AUC after training: 0.679061224489796
User 77387 does not improve AUC. Reverting changes.
Training on augumented user 92180 28/50 current_auc = 0.6792244897959184
User 92180 AUC after training: 0.6786122448979592
User 92180 does not improve AUC. Reverting changes.
Training on augumented user 55184 29/50 current_auc = 0.6792244897959184
User 55184 AUC after training: 0.6791428571428572
User 55184 does not improve AUC. Reverting changes.
Training on augumented user 46606 30/50 current_auc = 0.6792244897959184
User 46606 AUC after training: 0.6778775510204081
User 46606 does not improve AUC. Reverting changes.
Training on augumented user 68805 31/50 current_auc = 0.6792244897959184
User 68805 AUC after training: 0.6789795918367347
User 68805 does not improve AUC. Reverting changes.
Training on augumented user 77279 32/50 current_auc = 0.6792244897959184
User 77279 AUC after training: 0.6790612244897959
User 77279 does not improve AUC. Reverting changes.
Training on augumented user 127264 33/50 current_auc = 0.6792244897959184
User 127264 AUC after training: 0.6786530612244898
User 127264 does not improve AUC. Reverting changes.
Training on augumented user 100644 34/50 current_auc = 0.6792244897959184
User 100644 AUC after training: 0.6792244897959183
User 100644 does not improve AUC. Reverting changes.
Training on augumented user 730 35/50 current_auc = 0.6792244897959184
User 730 AUC after training: 0.6790204081632654
User 730 does not improve AUC. Reverting changes.
Training on augumented user 123834 36/50 current_auc = 0.6792244897959184
User 123834 AUC after training: 0.6777142857142858
User 123834 does not improve AUC. Reverting changes.
Training on augumented user 127499 37/50 current_auc = 0.6792244897959184
User 127499 AUC after training: 0.6791836734693877
User 127499 does not improve AUC. Reverting changes.
Training on augumented user 43340 38/50 current_auc = 0.6792244897959184
User 43340 AUC after training: 0.6793469387755102
User 43340 improves AUC. Keeping the model.
Training on augumented user 14866 39/50 current_auc = 0.6793469387755102
User 14866 AUC after training: 0.6767755102040816
User 14866 does not improve AUC. Reverting changes.
Training on augumented user 100120 40/50 current_auc = 0.6793469387755102
User 100120 AUC after training: 0.6793469387755102
User 100120 does not improve AUC. Reverting changes.
Training on augumented user 109805 41/50 current_auc = 0.6793469387755102
User 109805 AUC after training: 0.6792244897959184
User 109805 does not improve AUC. Reverting changes.
Training on augumented user 128282 42/50 current_auc = 0.6793469387755102
User 128282 AUC after training: 0.6794285714285716
User 128282 improves AUC. Keeping the model.
Training on augumented user 82144 43/50 current_auc = 0.6794285714285716
User 82144 AUC after training: 0.678734693877551
User 82144 does not improve AUC. Reverting changes.
Training on augumented user 35728 44/50 current_auc = 0.6794285714285716
User 35728 AUC after training: 0.6794285714285715
User 35728 does not improve AUC. Reverting changes.
Training on augumented user 4036 45/50 current_auc = 0.6794285714285716
User 4036 AUC after training: 0.6795918367346938
User 4036 improves AUC. Keeping the model.
Training on augumented user 106829 46/50 current_auc = 0.6795918367346938
User 106829 AUC after training: 0.6797551020408164
User 106829 improves AUC. Keeping the model.
Training on augumented user 20918 47/50 current_auc = 0.6797551020408164
User 20918 AUC after training: 0.6796734693877552
User 20918 does not improve AUC. Reverting changes.
Training on augumented user 104789 48/50 current_auc = 0.6797551020408164
User 104789 AUC after training: 0.6794285714285714
User 104789 does not improve AUC. Reverting changes.
Training on augumented user 7177 49/50 current_auc = 0.6797551020408164
User 7177 AUC after training: 0.679265306122449
User 7177 does not improve AUC. Reverting changes.
[2024-12-02 18:36:16.424862] start test user 71826 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:17.208527] start test user 71826 108/568 recall augumented users by random, augumented_users = [135938, 745, 133553, 70089, 82355, 19549, 122660, 49728, 126267, 57721, 13299, 58450, 37195, 98455, 2409, 58628, 30795, 31692, 94323, 107280, 7884, 16291, 9605, 48988, 79837, 65607, 46915, 84443, 55906, 63784, 119257, 75671, 27753, 35847, 6396, 125834, 11391, 16078, 64033, 99760, 57886, 338, 31242, 138056, 30073, 90720, 65249, 57780, 55856, 25876]
[2024-12-02 18:36:17.233044] user = 71826 Cloud 108/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:36:17.250485] user = 71826 Local 108/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:36:17.301850] user = 71826 Local+ 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:36:19.377524] user = 71826 MPDA- 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 135938 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135938 AUC after training: 0.5
User 135938 does not improve AUC. Reverting changes.
Training on augumented user 745 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 745 AUC after training: 0.5
User 745 does not improve AUC. Reverting changes.
Training on augumented user 133553 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133553 AUC after training: 0.5
User 133553 does not improve AUC. Reverting changes.
Training on augumented user 70089 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70089 AUC after training: 0.5
User 70089 does not improve AUC. Reverting changes.
Training on augumented user 82355 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82355 AUC after training: 0.5
User 82355 does not improve AUC. Reverting changes.
Training on augumented user 19549 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19549 AUC after training: 0.5
User 19549 does not improve AUC. Reverting changes.
Training on augumented user 122660 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122660 AUC after training: 0.5
User 122660 does not improve AUC. Reverting changes.
Training on augumented user 49728 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49728 AUC after training: 0.5
User 49728 does not improve AUC. Reverting changes.
Training on augumented user 126267 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126267 AUC after training: 0.5
User 126267 does not improve AUC. Reverting changes.
Training on augumented user 57721 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57721 AUC after training: 0.5
User 57721 does not improve AUC. Reverting changes.
Training on augumented user 13299 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13299 AUC after training: 0.5
User 13299 does not improve AUC. Reverting changes.
Training on augumented user 58450 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58450 AUC after training: 0.5
User 58450 does not improve AUC. Reverting changes.
Training on augumented user 37195 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37195 AUC after training: 0.5
User 37195 does not improve AUC. Reverting changes.
Training on augumented user 98455 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98455 AUC after training: 0.5
User 98455 does not improve AUC. Reverting changes.
Training on augumented user 2409 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2409 AUC after training: 0.5
User 2409 does not improve AUC. Reverting changes.
Training on augumented user 58628 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58628 AUC after training: 0.5
User 58628 does not improve AUC. Reverting changes.
Training on augumented user 30795 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30795 AUC after training: 0.5
User 30795 does not improve AUC. Reverting changes.
Training on augumented user 31692 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31692 AUC after training: 0.5
User 31692 does not improve AUC. Reverting changes.
Training on augumented user 94323 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94323 AUC after training: 0.5
User 94323 does not improve AUC. Reverting changes.
Training on augumented user 107280 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107280 AUC after training: 0.5
User 107280 does not improve AUC. Reverting changes.
Training on augumented user 7884 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7884 AUC after training: 0.5
User 7884 does not improve AUC. Reverting changes.
Training on augumented user 16291 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16291 AUC after training: 0.5
User 16291 does not improve AUC. Reverting changes.
Training on augumented user 9605 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9605 AUC after training: 0.5
User 9605 does not improve AUC. Reverting changes.
Training on augumented user 48988 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48988 AUC after training: 0.5
User 48988 does not improve AUC. Reverting changes.
Training on augumented user 79837 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79837 AUC after training: 0.5
User 79837 does not improve AUC. Reverting changes.
Training on augumented user 65607 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65607 AUC after training: 0.5
User 65607 does not improve AUC. Reverting changes.
Training on augumented user 46915 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46915 AUC after training: 0.5
User 46915 does not improve AUC. Reverting changes.
Training on augumented user 84443 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84443 AUC after training: 0.5
User 84443 does not improve AUC. Reverting changes.
Training on augumented user 55906 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55906 AUC after training: 0.5
User 55906 does not improve AUC. Reverting changes.
Training on augumented user 63784 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63784 AUC after training: 0.5
User 63784 does not improve AUC. Reverting changes.
Training on augumented user 119257 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119257 AUC after training: 0.5
User 119257 does not improve AUC. Reverting changes.
Training on augumented user 75671 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75671 AUC after training: 0.5
User 75671 does not improve AUC. Reverting changes.
Training on augumented user 27753 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27753 AUC after training: 0.5
User 27753 does not improve AUC. Reverting changes.
Training on augumented user 35847 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35847 AUC after training: 0.5
User 35847 does not improve AUC. Reverting changes.
Training on augumented user 6396 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6396 AUC after training: 0.5
User 6396 does not improve AUC. Reverting changes.
Training on augumented user 125834 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125834 AUC after training: 0.5
User 125834 does not improve AUC. Reverting changes.
Training on augumented user 11391 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11391 AUC after training: 0.5
User 11391 does not improve AUC. Reverting changes.
Training on augumented user 16078 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16078 AUC after training: 0.5
User 16078 does not improve AUC. Reverting changes.
Training on augumented user 64033 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64033 AUC after training: 0.5
User 64033 does not improve AUC. Reverting changes.
Training on augumented user 99760 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99760 AUC after training: 0.5
User 99760 does not improve AUC. Reverting changes.
Training on augumented user 57886 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57886 AUC after training: 0.5
User 57886 does not improve AUC. Reverting changes.
Training on augumented user 338 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 338 AUC after training: 0.5
User 338 does not improve AUC. Reverting changes.
Training on augumented user 31242 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31242 AUC after training: 0.5
User 31242 does not improve AUC. Reverting changes.
Training on augumented user 138056 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138056 AUC after training: 0.5
User 138056 does not improve AUC. Reverting changes.
Training on augumented user 30073 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30073 AUC after training: 0.5
User 30073 does not improve AUC. Reverting changes.
Training on augumented user 90720 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90720 AUC after training: 0.5
User 90720 does not improve AUC. Reverting changes.
Training on augumented user 65249 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65249 AUC after training: 0.5
User 65249 does not improve AUC. Reverting changes.
Training on augumented user 57780 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57780 AUC after training: 0.5
User 57780 does not improve AUC. Reverting changes.
Training on augumented user 55856 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55856 AUC after training: 0.5
User 55856 does not improve AUC. Reverting changes.
Training on augumented user 25876 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25876 AUC after training: 0.5
User 25876 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:36:47.047128] start test user 71841 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:47.647472] start test user 71841 109/568 recall augumented users by random, augumented_users = [79597, 60746, 100108, 107340, 96377, 73855, 41593, 123216, 41717, 44270, 62700, 126255, 47497, 8933, 83210, 17633, 87919, 90022, 78473, 121717, 7603, 99898, 3096, 26110, 16710, 45475, 109497, 82905, 127096, 17620, 133692, 73106, 37967, 68427, 42661, 31634, 61473, 106650, 63192, 99897, 52235, 19040, 99843, 13714, 68332, 116954, 9605, 118138, 101477, 56680]
[2024-12-02 18:36:47.667712] user = 71841 Cloud 109/568
[2024-12-02 18:36:47.692006] user = 71841 Local 109/568
[2024-12-02 18:36:47.773717] user = 71841 Local+ 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:50.668903] user = 71841 MPDA- 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5324074074074073
Training on augumented user 79597 0/50 current_auc = 0.5324074074074073
User 79597 AUC after training: 0.5324074074074073
User 79597 does not improve AUC. Reverting changes.
Training on augumented user 60746 1/50 current_auc = 0.5324074074074073
User 60746 AUC after training: 0.5354938271604939
User 60746 improves AUC. Keeping the model.
Training on augumented user 100108 2/50 current_auc = 0.5354938271604939
User 100108 AUC after training: 0.5354938271604939
User 100108 does not improve AUC. Reverting changes.
Training on augumented user 107340 3/50 current_auc = 0.5354938271604939
User 107340 AUC after training: 0.5354938271604939
User 107340 does not improve AUC. Reverting changes.
Training on augumented user 96377 4/50 current_auc = 0.5354938271604939
User 96377 AUC after training: 0.5308641975308642
User 96377 does not improve AUC. Reverting changes.
Training on augumented user 73855 5/50 current_auc = 0.5354938271604939
User 73855 AUC after training: 0.5354938271604939
User 73855 does not improve AUC. Reverting changes.
Training on augumented user 41593 6/50 current_auc = 0.5354938271604939
User 41593 AUC after training: 0.5354938271604939
User 41593 does not improve AUC. Reverting changes.
Training on augumented user 123216 7/50 current_auc = 0.5354938271604939
User 123216 AUC after training: 0.5354938271604939
User 123216 does not improve AUC. Reverting changes.
Training on augumented user 41717 8/50 current_auc = 0.5354938271604939
User 41717 AUC after training: 0.5324074074074073
User 41717 does not improve AUC. Reverting changes.
Training on augumented user 44270 9/50 current_auc = 0.5354938271604939
User 44270 AUC after training: 0.5354938271604939
User 44270 does not improve AUC. Reverting changes.
Training on augumented user 62700 10/50 current_auc = 0.5354938271604939
User 62700 AUC after training: 0.529320987654321
User 62700 does not improve AUC. Reverting changes.
Training on augumented user 126255 11/50 current_auc = 0.5354938271604939
User 126255 AUC after training: 0.5354938271604939
User 126255 does not improve AUC. Reverting changes.
Training on augumented user 47497 12/50 current_auc = 0.5354938271604939
User 47497 AUC after training: 0.5354938271604939
User 47497 does not improve AUC. Reverting changes.
Training on augumented user 8933 13/50 current_auc = 0.5354938271604939
User 8933 AUC after training: 0.5354938271604939
User 8933 does not improve AUC. Reverting changes.
Training on augumented user 83210 14/50 current_auc = 0.5354938271604939
User 83210 AUC after training: 0.5324074074074073
User 83210 does not improve AUC. Reverting changes.
Training on augumented user 17633 15/50 current_auc = 0.5354938271604939
User 17633 AUC after training: 0.5354938271604939
User 17633 does not improve AUC. Reverting changes.
Training on augumented user 87919 16/50 current_auc = 0.5354938271604939
User 87919 AUC after training: 0.5354938271604939
User 87919 does not improve AUC. Reverting changes.
Training on augumented user 90022 17/50 current_auc = 0.5354938271604939
User 90022 AUC after training: 0.5308641975308642
User 90022 does not improve AUC. Reverting changes.
Training on augumented user 78473 18/50 current_auc = 0.5354938271604939
User 78473 AUC after training: 0.5354938271604938
User 78473 does not improve AUC. Reverting changes.
Training on augumented user 121717 19/50 current_auc = 0.5354938271604939
User 121717 AUC after training: 0.5324074074074074
User 121717 does not improve AUC. Reverting changes.
Training on augumented user 7603 20/50 current_auc = 0.5354938271604939
User 7603 AUC after training: 0.5354938271604939
User 7603 does not improve AUC. Reverting changes.
Training on augumented user 99898 21/50 current_auc = 0.5354938271604939
User 99898 AUC after training: 0.5354938271604939
User 99898 does not improve AUC. Reverting changes.
Training on augumented user 3096 22/50 current_auc = 0.5354938271604939
User 3096 AUC after training: 0.5354938271604939
User 3096 does not improve AUC. Reverting changes.
Training on augumented user 26110 23/50 current_auc = 0.5354938271604939
User 26110 AUC after training: 0.5324074074074074
User 26110 does not improve AUC. Reverting changes.
Training on augumented user 16710 24/50 current_auc = 0.5354938271604939
User 16710 AUC after training: 0.5354938271604939
User 16710 does not improve AUC. Reverting changes.
Training on augumented user 45475 25/50 current_auc = 0.5354938271604939
User 45475 AUC after training: 0.529320987654321
User 45475 does not improve AUC. Reverting changes.
Training on augumented user 109497 26/50 current_auc = 0.5354938271604939
User 109497 AUC after training: 0.5324074074074074
User 109497 does not improve AUC. Reverting changes.
Training on augumented user 82905 27/50 current_auc = 0.5354938271604939
User 82905 AUC after training: 0.5354938271604939
User 82905 does not improve AUC. Reverting changes.
Training on augumented user 127096 28/50 current_auc = 0.5354938271604939
User 127096 AUC after training: 0.5324074074074074
User 127096 does not improve AUC. Reverting changes.
Training on augumented user 17620 29/50 current_auc = 0.5354938271604939
User 17620 AUC after training: 0.5354938271604939
User 17620 does not improve AUC. Reverting changes.
Training on augumented user 133692 30/50 current_auc = 0.5354938271604939
User 133692 AUC after training: 0.529320987654321
User 133692 does not improve AUC. Reverting changes.
Training on augumented user 73106 31/50 current_auc = 0.5354938271604939
User 73106 AUC after training: 0.529320987654321
User 73106 does not improve AUC. Reverting changes.
Training on augumented user 37967 32/50 current_auc = 0.5354938271604939
User 37967 AUC after training: 0.5354938271604939
User 37967 does not improve AUC. Reverting changes.
Training on augumented user 68427 33/50 current_auc = 0.5354938271604939
User 68427 AUC after training: 0.5277777777777778
User 68427 does not improve AUC. Reverting changes.
Training on augumented user 42661 34/50 current_auc = 0.5354938271604939
User 42661 AUC after training: 0.5354938271604939
User 42661 does not improve AUC. Reverting changes.
Training on augumented user 31634 35/50 current_auc = 0.5354938271604939
User 31634 AUC after training: 0.5354938271604939
User 31634 does not improve AUC. Reverting changes.
Training on augumented user 61473 36/50 current_auc = 0.5354938271604939
User 61473 AUC after training: 0.5324074074074074
User 61473 does not improve AUC. Reverting changes.
Training on augumented user 106650 37/50 current_auc = 0.5354938271604939
User 106650 AUC after training: 0.5324074074074073
User 106650 does not improve AUC. Reverting changes.
Training on augumented user 63192 38/50 current_auc = 0.5354938271604939
User 63192 AUC after training: 0.5354938271604939
User 63192 does not improve AUC. Reverting changes.
Training on augumented user 99897 39/50 current_auc = 0.5354938271604939
User 99897 AUC after training: 0.5354938271604939
User 99897 does not improve AUC. Reverting changes.
Training on augumented user 52235 40/50 current_auc = 0.5354938271604939
User 52235 AUC after training: 0.5354938271604939
User 52235 does not improve AUC. Reverting changes.
Training on augumented user 19040 41/50 current_auc = 0.5354938271604939
User 19040 AUC after training: 0.5354938271604939
User 19040 does not improve AUC. Reverting changes.
Training on augumented user 99843 42/50 current_auc = 0.5354938271604939
User 99843 AUC after training: 0.5262345679012346
User 99843 does not improve AUC. Reverting changes.
Training on augumented user 13714 43/50 current_auc = 0.5354938271604939
User 13714 AUC after training: 0.5324074074074074
User 13714 does not improve AUC. Reverting changes.
Training on augumented user 68332 44/50 current_auc = 0.5354938271604939
User 68332 AUC after training: 0.5324074074074074
User 68332 does not improve AUC. Reverting changes.
Training on augumented user 116954 45/50 current_auc = 0.5354938271604939
User 116954 AUC after training: 0.5324074074074074
User 116954 does not improve AUC. Reverting changes.
Training on augumented user 9605 46/50 current_auc = 0.5354938271604939
User 9605 AUC after training: 0.5354938271604939
User 9605 does not improve AUC. Reverting changes.
Training on augumented user 118138 47/50 current_auc = 0.5354938271604939
User 118138 AUC after training: 0.5277777777777778
User 118138 does not improve AUC. Reverting changes.
Training on augumented user 101477 48/50 current_auc = 0.5354938271604939
User 101477 AUC after training: 0.5354938271604939
User 101477 does not improve AUC. Reverting changes.
Training on augumented user 56680 49/50 current_auc = 0.5354938271604939
User 56680 AUC after training: 0.5324074074074073
User 56680 does not improve AUC. Reverting changes.
[2024-12-02 18:37:20.899550] start test user 71884 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:21.599635] start test user 71884 110/568 recall augumented users by random, augumented_users = [90984, 70965, 118635, 98334, 11769, 67631, 10057, 57635, 26936, 120000, 30344, 23053, 138145, 25158, 22674, 51840, 62326, 16901, 89490, 55403, 71362, 43310, 126927, 9616, 13360, 136205, 62967, 36927, 108836, 13644, 61712, 66430, 133951, 134597, 62210, 30613, 89600, 114611, 47183, 134884, 41166, 95989, 120821, 9369, 29506, 127495, 82146, 54002, 61000, 69006]
[2024-12-02 18:37:21.627029] user = 71884 Cloud 110/568
[2024-12-02 18:37:21.644226] user = 71884 Local 110/568
[2024-12-02 18:37:21.680526] user = 71884 Local+ 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:24.495483] user = 71884 MPDA- 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 90984 0/50 current_auc = 1.0
User 90984 AUC after training: 1.0
User 90984 does not improve AUC. Reverting changes.
Training on augumented user 70965 1/50 current_auc = 1.0
User 70965 AUC after training: 1.0
User 70965 does not improve AUC. Reverting changes.
Training on augumented user 118635 2/50 current_auc = 1.0
User 118635 AUC after training: 1.0
User 118635 does not improve AUC. Reverting changes.
Training on augumented user 98334 3/50 current_auc = 1.0
User 98334 AUC after training: 1.0
User 98334 does not improve AUC. Reverting changes.
Training on augumented user 11769 4/50 current_auc = 1.0
User 11769 AUC after training: 1.0
User 11769 does not improve AUC. Reverting changes.
Training on augumented user 67631 5/50 current_auc = 1.0
User 67631 AUC after training: 1.0
User 67631 does not improve AUC. Reverting changes.
Training on augumented user 10057 6/50 current_auc = 1.0
User 10057 AUC after training: 1.0
User 10057 does not improve AUC. Reverting changes.
Training on augumented user 57635 7/50 current_auc = 1.0
User 57635 AUC after training: 1.0
User 57635 does not improve AUC. Reverting changes.
Training on augumented user 26936 8/50 current_auc = 1.0
User 26936 AUC after training: 1.0
User 26936 does not improve AUC. Reverting changes.
Training on augumented user 120000 9/50 current_auc = 1.0
User 120000 AUC after training: 1.0
User 120000 does not improve AUC. Reverting changes.
Training on augumented user 30344 10/50 current_auc = 1.0
User 30344 AUC after training: 1.0
User 30344 does not improve AUC. Reverting changes.
Training on augumented user 23053 11/50 current_auc = 1.0
User 23053 AUC after training: 1.0
User 23053 does not improve AUC. Reverting changes.
Training on augumented user 138145 12/50 current_auc = 1.0
User 138145 AUC after training: 1.0
User 138145 does not improve AUC. Reverting changes.
Training on augumented user 25158 13/50 current_auc = 1.0
User 25158 AUC after training: 1.0
User 25158 does not improve AUC. Reverting changes.
Training on augumented user 22674 14/50 current_auc = 1.0
User 22674 AUC after training: 1.0
User 22674 does not improve AUC. Reverting changes.
Training on augumented user 51840 15/50 current_auc = 1.0
User 51840 AUC after training: 1.0
User 51840 does not improve AUC. Reverting changes.
Training on augumented user 62326 16/50 current_auc = 1.0
User 62326 AUC after training: 1.0
User 62326 does not improve AUC. Reverting changes.
Training on augumented user 16901 17/50 current_auc = 1.0
User 16901 AUC after training: 1.0
User 16901 does not improve AUC. Reverting changes.
Training on augumented user 89490 18/50 current_auc = 1.0
User 89490 AUC after training: 1.0
User 89490 does not improve AUC. Reverting changes.
Training on augumented user 55403 19/50 current_auc = 1.0
User 55403 AUC after training: 1.0
User 55403 does not improve AUC. Reverting changes.
Training on augumented user 71362 20/50 current_auc = 1.0
User 71362 AUC after training: 1.0
User 71362 does not improve AUC. Reverting changes.
Training on augumented user 43310 21/50 current_auc = 1.0
User 43310 AUC after training: 1.0
User 43310 does not improve AUC. Reverting changes.
Training on augumented user 126927 22/50 current_auc = 1.0
User 126927 AUC after training: 1.0
User 126927 does not improve AUC. Reverting changes.
Training on augumented user 9616 23/50 current_auc = 1.0
User 9616 AUC after training: 1.0
User 9616 does not improve AUC. Reverting changes.
Training on augumented user 13360 24/50 current_auc = 1.0
User 13360 AUC after training: 1.0
User 13360 does not improve AUC. Reverting changes.
Training on augumented user 136205 25/50 current_auc = 1.0
User 136205 AUC after training: 1.0
User 136205 does not improve AUC. Reverting changes.
Training on augumented user 62967 26/50 current_auc = 1.0
User 62967 AUC after training: 1.0
User 62967 does not improve AUC. Reverting changes.
Training on augumented user 36927 27/50 current_auc = 1.0
User 36927 AUC after training: 1.0
User 36927 does not improve AUC. Reverting changes.
Training on augumented user 108836 28/50 current_auc = 1.0
User 108836 AUC after training: 1.0
User 108836 does not improve AUC. Reverting changes.
Training on augumented user 13644 29/50 current_auc = 1.0
User 13644 AUC after training: 1.0
User 13644 does not improve AUC. Reverting changes.
Training on augumented user 61712 30/50 current_auc = 1.0
User 61712 AUC after training: 1.0
User 61712 does not improve AUC. Reverting changes.
Training on augumented user 66430 31/50 current_auc = 1.0
User 66430 AUC after training: 1.0
User 66430 does not improve AUC. Reverting changes.
Training on augumented user 133951 32/50 current_auc = 1.0
User 133951 AUC after training: 1.0
User 133951 does not improve AUC. Reverting changes.
Training on augumented user 134597 33/50 current_auc = 1.0
User 134597 AUC after training: 1.0
User 134597 does not improve AUC. Reverting changes.
Training on augumented user 62210 34/50 current_auc = 1.0
User 62210 AUC after training: 1.0
User 62210 does not improve AUC. Reverting changes.
Training on augumented user 30613 35/50 current_auc = 1.0
User 30613 AUC after training: 1.0
User 30613 does not improve AUC. Reverting changes.
Training on augumented user 89600 36/50 current_auc = 1.0
User 89600 AUC after training: 1.0
User 89600 does not improve AUC. Reverting changes.
Training on augumented user 114611 37/50 current_auc = 1.0
User 114611 AUC after training: 1.0
User 114611 does not improve AUC. Reverting changes.
Training on augumented user 47183 38/50 current_auc = 1.0
User 47183 AUC after training: 1.0
User 47183 does not improve AUC. Reverting changes.
Training on augumented user 134884 39/50 current_auc = 1.0
User 134884 AUC after training: 1.0
User 134884 does not improve AUC. Reverting changes.
Training on augumented user 41166 40/50 current_auc = 1.0
User 41166 AUC after training: 1.0
User 41166 does not improve AUC. Reverting changes.
Training on augumented user 95989 41/50 current_auc = 1.0
User 95989 AUC after training: 1.0
User 95989 does not improve AUC. Reverting changes.
Training on augumented user 120821 42/50 current_auc = 1.0
User 120821 AUC after training: 1.0
User 120821 does not improve AUC. Reverting changes.
Training on augumented user 9369 43/50 current_auc = 1.0
User 9369 AUC after training: 1.0
User 9369 does not improve AUC. Reverting changes.
Training on augumented user 29506 44/50 current_auc = 1.0
User 29506 AUC after training: 1.0
User 29506 does not improve AUC. Reverting changes.
Training on augumented user 127495 45/50 current_auc = 1.0
User 127495 AUC after training: 1.0
User 127495 does not improve AUC. Reverting changes.
Training on augumented user 82146 46/50 current_auc = 1.0
User 82146 AUC after training: 1.0
User 82146 does not improve AUC. Reverting changes.
Training on augumented user 54002 47/50 current_auc = 1.0
User 54002 AUC after training: 1.0
User 54002 does not improve AUC. Reverting changes.
Training on augumented user 61000 48/50 current_auc = 1.0
User 61000 AUC after training: 1.0
User 61000 does not improve AUC. Reverting changes.
Training on augumented user 69006 49/50 current_auc = 1.0
User 69006 AUC after training: 1.0
User 69006 does not improve AUC. Reverting changes.
[2024-12-02 18:37:56.670161] start test user 71900 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:57.096055] start test user 71900 111/568 recall augumented users by random, augumented_users = [76074, 55756, 49894, 59840, 123409, 128632, 10179, 47874, 42117, 137261, 128992, 79204, 82901, 56435, 107432, 1858, 100635, 37894, 61618, 131135, 22760, 65097, 38832, 134036, 14342, 85345, 36295, 64755, 102232, 35250, 25279, 72215, 120305, 66688, 40499, 11951, 103788, 31428, 26848, 18362, 121078, 80335, 40849, 22035, 24822, 84553, 79696, 120580, 129913, 91328]
[2024-12-02 18:37:57.110547] user = 71900 Cloud 111/568
[2024-12-02 18:37:57.122775] user = 71900 Local 111/568
[2024-12-02 18:37:57.153842] user = 71900 Local+ 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:59.941842] user = 71900 MPDA- 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.775
Training on augumented user 76074 0/50 current_auc = 0.775
User 76074 AUC after training: 0.775
User 76074 does not improve AUC. Reverting changes.
Training on augumented user 55756 1/50 current_auc = 0.775
User 55756 AUC after training: 0.775
User 55756 does not improve AUC. Reverting changes.
Training on augumented user 49894 2/50 current_auc = 0.775
User 49894 AUC after training: 0.775
User 49894 does not improve AUC. Reverting changes.
Training on augumented user 59840 3/50 current_auc = 0.775
User 59840 AUC after training: 0.775
User 59840 does not improve AUC. Reverting changes.
Training on augumented user 123409 4/50 current_auc = 0.775
User 123409 AUC after training: 0.775
User 123409 does not improve AUC. Reverting changes.
Training on augumented user 128632 5/50 current_auc = 0.775
User 128632 AUC after training: 0.775
User 128632 does not improve AUC. Reverting changes.
Training on augumented user 10179 6/50 current_auc = 0.775
User 10179 AUC after training: 0.775
User 10179 does not improve AUC. Reverting changes.
Training on augumented user 47874 7/50 current_auc = 0.775
User 47874 AUC after training: 0.775
User 47874 does not improve AUC. Reverting changes.
Training on augumented user 42117 8/50 current_auc = 0.775
User 42117 AUC after training: 0.775
User 42117 does not improve AUC. Reverting changes.
Training on augumented user 137261 9/50 current_auc = 0.775
User 137261 AUC after training: 0.775
User 137261 does not improve AUC. Reverting changes.
Training on augumented user 128992 10/50 current_auc = 0.775
User 128992 AUC after training: 0.775
User 128992 does not improve AUC. Reverting changes.
Training on augumented user 79204 11/50 current_auc = 0.775
User 79204 AUC after training: 0.775
User 79204 does not improve AUC. Reverting changes.
Training on augumented user 82901 12/50 current_auc = 0.775
User 82901 AUC after training: 0.8
User 82901 improves AUC. Keeping the model.
Training on augumented user 56435 13/50 current_auc = 0.8
User 56435 AUC after training: 0.8
User 56435 does not improve AUC. Reverting changes.
Training on augumented user 107432 14/50 current_auc = 0.8
User 107432 AUC after training: 0.8
User 107432 does not improve AUC. Reverting changes.
Training on augumented user 1858 15/50 current_auc = 0.8
User 1858 AUC after training: 0.8
User 1858 does not improve AUC. Reverting changes.
Training on augumented user 100635 16/50 current_auc = 0.8
User 100635 AUC after training: 0.8125
User 100635 improves AUC. Keeping the model.
Training on augumented user 37894 17/50 current_auc = 0.8125
User 37894 AUC after training: 0.8
User 37894 does not improve AUC. Reverting changes.
Training on augumented user 61618 18/50 current_auc = 0.8125
User 61618 AUC after training: 0.8125
User 61618 does not improve AUC. Reverting changes.
Training on augumented user 131135 19/50 current_auc = 0.8125
User 131135 AUC after training: 0.8125
User 131135 does not improve AUC. Reverting changes.
Training on augumented user 22760 20/50 current_auc = 0.8125
User 22760 AUC after training: 0.8125
User 22760 does not improve AUC. Reverting changes.
Training on augumented user 65097 21/50 current_auc = 0.8125
User 65097 AUC after training: 0.8125
User 65097 does not improve AUC. Reverting changes.
Training on augumented user 38832 22/50 current_auc = 0.8125
User 38832 AUC after training: 0.8125
User 38832 does not improve AUC. Reverting changes.
Training on augumented user 134036 23/50 current_auc = 0.8125
User 134036 AUC after training: 0.8
User 134036 does not improve AUC. Reverting changes.
Training on augumented user 14342 24/50 current_auc = 0.8125
User 14342 AUC after training: 0.8125
User 14342 does not improve AUC. Reverting changes.
Training on augumented user 85345 25/50 current_auc = 0.8125
User 85345 AUC after training: 0.8125
User 85345 does not improve AUC. Reverting changes.
Training on augumented user 36295 26/50 current_auc = 0.8125
User 36295 AUC after training: 0.8125
User 36295 does not improve AUC. Reverting changes.
Training on augumented user 64755 27/50 current_auc = 0.8125
User 64755 AUC after training: 0.8
User 64755 does not improve AUC. Reverting changes.
Training on augumented user 102232 28/50 current_auc = 0.8125
User 102232 AUC after training: 0.8125
User 102232 does not improve AUC. Reverting changes.
Training on augumented user 35250 29/50 current_auc = 0.8125
User 35250 AUC after training: 0.8125
User 35250 does not improve AUC. Reverting changes.
Training on augumented user 25279 30/50 current_auc = 0.8125
User 25279 AUC after training: 0.8125
User 25279 does not improve AUC. Reverting changes.
Training on augumented user 72215 31/50 current_auc = 0.8125
User 72215 AUC after training: 0.8125
User 72215 does not improve AUC. Reverting changes.
Training on augumented user 120305 32/50 current_auc = 0.8125
User 120305 AUC after training: 0.8125
User 120305 does not improve AUC. Reverting changes.
Training on augumented user 66688 33/50 current_auc = 0.8125
User 66688 AUC after training: 0.8125
User 66688 does not improve AUC. Reverting changes.
Training on augumented user 40499 34/50 current_auc = 0.8125
User 40499 AUC after training: 0.8125
User 40499 does not improve AUC. Reverting changes.
Training on augumented user 11951 35/50 current_auc = 0.8125
User 11951 AUC after training: 0.8125
User 11951 does not improve AUC. Reverting changes.
Training on augumented user 103788 36/50 current_auc = 0.8125
User 103788 AUC after training: 0.8
User 103788 does not improve AUC. Reverting changes.
Training on augumented user 31428 37/50 current_auc = 0.8125
User 31428 AUC after training: 0.8125
User 31428 does not improve AUC. Reverting changes.
Training on augumented user 26848 38/50 current_auc = 0.8125
User 26848 AUC after training: 0.8
User 26848 does not improve AUC. Reverting changes.
Training on augumented user 18362 39/50 current_auc = 0.8125
User 18362 AUC after training: 0.8125
User 18362 does not improve AUC. Reverting changes.
Training on augumented user 121078 40/50 current_auc = 0.8125
User 121078 AUC after training: 0.8125
User 121078 does not improve AUC. Reverting changes.
Training on augumented user 80335 41/50 current_auc = 0.8125
User 80335 AUC after training: 0.8125
User 80335 does not improve AUC. Reverting changes.
Training on augumented user 40849 42/50 current_auc = 0.8125
User 40849 AUC after training: 0.8125
User 40849 does not improve AUC. Reverting changes.
Training on augumented user 22035 43/50 current_auc = 0.8125
User 22035 AUC after training: 0.8125
User 22035 does not improve AUC. Reverting changes.
Training on augumented user 24822 44/50 current_auc = 0.8125
User 24822 AUC after training: 0.8
User 24822 does not improve AUC. Reverting changes.
Training on augumented user 84553 45/50 current_auc = 0.8125
User 84553 AUC after training: 0.8125
User 84553 does not improve AUC. Reverting changes.
Training on augumented user 79696 46/50 current_auc = 0.8125
User 79696 AUC after training: 0.8125
User 79696 does not improve AUC. Reverting changes.
Training on augumented user 120580 47/50 current_auc = 0.8125
User 120580 AUC after training: 0.8125
User 120580 does not improve AUC. Reverting changes.
Training on augumented user 129913 48/50 current_auc = 0.8125
User 129913 AUC after training: 0.8125
User 129913 does not improve AUC. Reverting changes.
Training on augumented user 91328 49/50 current_auc = 0.8125
User 91328 AUC after training: 0.8125
User 91328 does not improve AUC. Reverting changes.
[2024-12-02 18:38:29.321266] start test user 71926 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:29.925634] start test user 71926 112/568 recall augumented users by random, augumented_users = [78016, 95590, 49995, 113716, 22841, 90595, 42166, 135628, 91186, 72235, 87213, 23962, 23327, 41769, 17740, 75944, 120810, 70926, 13612, 124422, 116788, 9303, 113891, 15486, 82873, 119656, 52452, 120286, 45196, 137253, 43644, 128659, 136142, 59607, 104917, 98599, 67975, 138002, 77381, 102719, 120728, 129139, 110863, 137563, 108838, 77909, 30212, 111212, 34246, 122141]
[2024-12-02 18:38:29.940521] user = 71926 Cloud 112/568
[2024-12-02 18:38:29.951172] user = 71926 Local 112/568
[2024-12-02 18:38:29.985980] user = 71926 Local+ 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:32.482382] user = 71926 MPDA- 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 78016 0/50 current_auc = 1.0
User 78016 AUC after training: 1.0
User 78016 does not improve AUC. Reverting changes.
Training on augumented user 95590 1/50 current_auc = 1.0
User 95590 AUC after training: 1.0
User 95590 does not improve AUC. Reverting changes.
Training on augumented user 49995 2/50 current_auc = 1.0
User 49995 AUC after training: 1.0
User 49995 does not improve AUC. Reverting changes.
Training on augumented user 113716 3/50 current_auc = 1.0
User 113716 AUC after training: 1.0
User 113716 does not improve AUC. Reverting changes.
Training on augumented user 22841 4/50 current_auc = 1.0
User 22841 AUC after training: 1.0
User 22841 does not improve AUC. Reverting changes.
Training on augumented user 90595 5/50 current_auc = 1.0
User 90595 AUC after training: 1.0
User 90595 does not improve AUC. Reverting changes.
Training on augumented user 42166 6/50 current_auc = 1.0
User 42166 AUC after training: 1.0
User 42166 does not improve AUC. Reverting changes.
Training on augumented user 135628 7/50 current_auc = 1.0
User 135628 AUC after training: 1.0
User 135628 does not improve AUC. Reverting changes.
Training on augumented user 91186 8/50 current_auc = 1.0
User 91186 AUC after training: 1.0
User 91186 does not improve AUC. Reverting changes.
Training on augumented user 72235 9/50 current_auc = 1.0
User 72235 AUC after training: 1.0
User 72235 does not improve AUC. Reverting changes.
Training on augumented user 87213 10/50 current_auc = 1.0
User 87213 AUC after training: 1.0
User 87213 does not improve AUC. Reverting changes.
Training on augumented user 23962 11/50 current_auc = 1.0
User 23962 AUC after training: 1.0
User 23962 does not improve AUC. Reverting changes.
Training on augumented user 23327 12/50 current_auc = 1.0
User 23327 AUC after training: 1.0
User 23327 does not improve AUC. Reverting changes.
Training on augumented user 41769 13/50 current_auc = 1.0
User 41769 AUC after training: 1.0
User 41769 does not improve AUC. Reverting changes.
Training on augumented user 17740 14/50 current_auc = 1.0
User 17740 AUC after training: 1.0
User 17740 does not improve AUC. Reverting changes.
Training on augumented user 75944 15/50 current_auc = 1.0
User 75944 AUC after training: 1.0
User 75944 does not improve AUC. Reverting changes.
Training on augumented user 120810 16/50 current_auc = 1.0
User 120810 AUC after training: 1.0
User 120810 does not improve AUC. Reverting changes.
Training on augumented user 70926 17/50 current_auc = 1.0
User 70926 AUC after training: 1.0
User 70926 does not improve AUC. Reverting changes.
Training on augumented user 13612 18/50 current_auc = 1.0
User 13612 AUC after training: 1.0
User 13612 does not improve AUC. Reverting changes.
Training on augumented user 124422 19/50 current_auc = 1.0
User 124422 AUC after training: 1.0
User 124422 does not improve AUC. Reverting changes.
Training on augumented user 116788 20/50 current_auc = 1.0
User 116788 AUC after training: 1.0
User 116788 does not improve AUC. Reverting changes.
Training on augumented user 9303 21/50 current_auc = 1.0
User 9303 AUC after training: 1.0
User 9303 does not improve AUC. Reverting changes.
Training on augumented user 113891 22/50 current_auc = 1.0
User 113891 AUC after training: 1.0
User 113891 does not improve AUC. Reverting changes.
Training on augumented user 15486 23/50 current_auc = 1.0
User 15486 AUC after training: 1.0
User 15486 does not improve AUC. Reverting changes.
Training on augumented user 82873 24/50 current_auc = 1.0
User 82873 AUC after training: 1.0
User 82873 does not improve AUC. Reverting changes.
Training on augumented user 119656 25/50 current_auc = 1.0
User 119656 AUC after training: 1.0
User 119656 does not improve AUC. Reverting changes.
Training on augumented user 52452 26/50 current_auc = 1.0
User 52452 AUC after training: 1.0
User 52452 does not improve AUC. Reverting changes.
Training on augumented user 120286 27/50 current_auc = 1.0
User 120286 AUC after training: 1.0
User 120286 does not improve AUC. Reverting changes.
Training on augumented user 45196 28/50 current_auc = 1.0
User 45196 AUC after training: 1.0
User 45196 does not improve AUC. Reverting changes.
Training on augumented user 137253 29/50 current_auc = 1.0
User 137253 AUC after training: 1.0
User 137253 does not improve AUC. Reverting changes.
Training on augumented user 43644 30/50 current_auc = 1.0
User 43644 AUC after training: 1.0
User 43644 does not improve AUC. Reverting changes.
Training on augumented user 128659 31/50 current_auc = 1.0
User 128659 AUC after training: 1.0
User 128659 does not improve AUC. Reverting changes.
Training on augumented user 136142 32/50 current_auc = 1.0
User 136142 AUC after training: 1.0
User 136142 does not improve AUC. Reverting changes.
Training on augumented user 59607 33/50 current_auc = 1.0
User 59607 AUC after training: 1.0
User 59607 does not improve AUC. Reverting changes.
Training on augumented user 104917 34/50 current_auc = 1.0
User 104917 AUC after training: 1.0
User 104917 does not improve AUC. Reverting changes.
Training on augumented user 98599 35/50 current_auc = 1.0
User 98599 AUC after training: 1.0
User 98599 does not improve AUC. Reverting changes.
Training on augumented user 67975 36/50 current_auc = 1.0
User 67975 AUC after training: 1.0
User 67975 does not improve AUC. Reverting changes.
Training on augumented user 138002 37/50 current_auc = 1.0
User 138002 AUC after training: 1.0
User 138002 does not improve AUC. Reverting changes.
Training on augumented user 77381 38/50 current_auc = 1.0
User 77381 AUC after training: 1.0
User 77381 does not improve AUC. Reverting changes.
Training on augumented user 102719 39/50 current_auc = 1.0
User 102719 AUC after training: 1.0
User 102719 does not improve AUC. Reverting changes.
Training on augumented user 120728 40/50 current_auc = 1.0
User 120728 AUC after training: 1.0
User 120728 does not improve AUC. Reverting changes.
Training on augumented user 129139 41/50 current_auc = 1.0
User 129139 AUC after training: 1.0
User 129139 does not improve AUC. Reverting changes.
Training on augumented user 110863 42/50 current_auc = 1.0
User 110863 AUC after training: 1.0
User 110863 does not improve AUC. Reverting changes.
Training on augumented user 137563 43/50 current_auc = 1.0
User 137563 AUC after training: 1.0
User 137563 does not improve AUC. Reverting changes.
Training on augumented user 108838 44/50 current_auc = 1.0
User 108838 AUC after training: 1.0
User 108838 does not improve AUC. Reverting changes.
Training on augumented user 77909 45/50 current_auc = 1.0
User 77909 AUC after training: 1.0
User 77909 does not improve AUC. Reverting changes.
Training on augumented user 30212 46/50 current_auc = 1.0
User 30212 AUC after training: 1.0
User 30212 does not improve AUC. Reverting changes.
Training on augumented user 111212 47/50 current_auc = 1.0
User 111212 AUC after training: 1.0
User 111212 does not improve AUC. Reverting changes.
Training on augumented user 34246 48/50 current_auc = 1.0
User 34246 AUC after training: 1.0
User 34246 does not improve AUC. Reverting changes.
Training on augumented user 122141 49/50 current_auc = 1.0
User 122141 AUC after training: 1.0
User 122141 does not improve AUC. Reverting changes.
[2024-12-02 18:39:00.030063] start test user 71928 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:00.465538] start test user 71928 113/568 recall augumented users by random, augumented_users = [101672, 64574, 50686, 103161, 73125, 83486, 61552, 86291, 126553, 78773, 120439, 73878, 115923, 103042, 46091, 31290, 62810, 88917, 19451, 17025, 20121, 10062, 120993, 51293, 35493, 77927, 71822, 36288, 104643, 122532, 34088, 108247, 51808, 32310, 70910, 69327, 97637, 73506, 666, 16299, 48560, 77797, 94161, 16202, 40179, 100413, 96620, 11495, 102372, 133206]
[2024-12-02 18:39:00.502824] user = 71928 Cloud 113/568
[2024-12-02 18:39:00.534203] user = 71928 Local 113/568
[2024-12-02 18:39:00.700736] user = 71928 Local+ 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:02.749240] user = 71928 MPDA- 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6384082585850008
Training on augumented user 101672 0/50 current_auc = 0.6384082585850008
User 101672 AUC after training: 0.6388859402367179
User 101672 improves AUC. Keeping the model.
Training on augumented user 64574 1/50 current_auc = 0.6388859402367179
User 64574 AUC after training: 0.638700175149939
User 64574 does not improve AUC. Reverting changes.
Training on augumented user 50686 2/50 current_auc = 0.6388859402367179
User 50686 AUC after training: 0.6381163420200626
User 50686 does not improve AUC. Reverting changes.
Training on augumented user 103161 3/50 current_auc = 0.6388859402367179
User 103161 AUC after training: 0.6390186295844169
User 103161 improves AUC. Keeping the model.
Training on augumented user 73125 4/50 current_auc = 0.6390186295844169
User 73125 AUC after training: 0.6391513189321161
User 73125 improves AUC. Keeping the model.
Training on augumented user 83486 5/50 current_auc = 0.6391513189321161
User 83486 AUC after training: 0.6390982431930365
User 83486 does not improve AUC. Reverting changes.
Training on augumented user 61552 6/50 current_auc = 0.6391513189321161
User 61552 AUC after training: 0.6370680961732391
User 61552 does not improve AUC. Reverting changes.
Training on augumented user 86291 7/50 current_auc = 0.6391513189321161
User 86291 AUC after training: 0.6390982431930365
User 86291 does not improve AUC. Reverting changes.
Training on augumented user 126553 8/50 current_auc = 0.6391513189321161
User 126553 AUC after training: 0.6387001751499389
User 126553 does not improve AUC. Reverting changes.
Training on augumented user 78773 9/50 current_auc = 0.6391513189321161
User 78773 AUC after training: 0.6378642322594341
User 78773 does not improve AUC. Reverting changes.
Training on augumented user 120439 10/50 current_auc = 0.6391513189321161
User 120439 AUC after training: 0.6388063266280983
User 120439 does not improve AUC. Reverting changes.
Training on augumented user 73878 11/50 current_auc = 0.6391513189321161
User 73878 AUC after training: 0.6387267130194788
User 73878 does not improve AUC. Reverting changes.
Training on augumented user 115923 12/50 current_auc = 0.6391513189321161
User 115923 AUC after training: 0.6394432354970543
User 115923 improves AUC. Keeping the model.
Training on augumented user 103042 13/50 current_auc = 0.6394432354970543
User 103042 AUC after training: 0.6391247810625762
User 103042 does not improve AUC. Reverting changes.
Training on augumented user 46091 14/50 current_auc = 0.6394432354970543
User 46091 AUC after training: 0.6392840082798154
User 46091 does not improve AUC. Reverting changes.
Training on augumented user 31290 15/50 current_auc = 0.6394432354970543
User 31290 AUC after training: 0.6392840082798152
User 31290 does not improve AUC. Reverting changes.
Training on augumented user 62810 16/50 current_auc = 0.6394432354970543
User 62810 AUC after training: 0.6394166976275145
User 62810 does not improve AUC. Reverting changes.
Training on augumented user 88917 17/50 current_auc = 0.6394432354970543
User 88917 AUC after training: 0.6392840082798152
User 88917 does not improve AUC. Reverting changes.
Training on augumented user 19451 18/50 current_auc = 0.6394432354970543
User 19451 AUC after training: 0.6391513189321162
User 19451 does not improve AUC. Reverting changes.
Training on augumented user 17025 19/50 current_auc = 0.6394432354970543
User 17025 AUC after training: 0.639018629584417
User 17025 does not improve AUC. Reverting changes.
Training on augumented user 20121 20/50 current_auc = 0.6394432354970543
User 20121 AUC after training: 0.6392043946711957
User 20121 does not improve AUC. Reverting changes.
Training on augumented user 10062 21/50 current_auc = 0.6394432354970543
User 10062 AUC after training: 0.6392309325407357
User 10062 does not improve AUC. Reverting changes.
Training on augumented user 120993 22/50 current_auc = 0.6394432354970543
User 120993 AUC after training: 0.6391778568016561
User 120993 does not improve AUC. Reverting changes.
Training on augumented user 51293 23/50 current_auc = 0.6394432354970543
User 51293 AUC after training: 0.6383419139111512
User 51293 does not improve AUC. Reverting changes.
Training on augumented user 35493 24/50 current_auc = 0.6394432354970543
User 35493 AUC after training: 0.6387001751499389
User 35493 does not improve AUC. Reverting changes.
Training on augumented user 77927 25/50 current_auc = 0.6394432354970543
User 77927 AUC after training: 0.6390186295844169
User 77927 does not improve AUC. Reverting changes.
Training on augumented user 71822 26/50 current_auc = 0.6394432354970543
User 71822 AUC after training: 0.6395493869752138
User 71822 improves AUC. Keeping the model.
Training on augumented user 36288 27/50 current_auc = 0.6395493869752138
User 36288 AUC after training: 0.6394432354970543
User 36288 does not improve AUC. Reverting changes.
Training on augumented user 104643 28/50 current_auc = 0.6395493869752138
User 104643 AUC after training: 0.6395493869752136
User 104643 does not improve AUC. Reverting changes.
Training on augumented user 122532 29/50 current_auc = 0.6395493869752138
User 122532 AUC after training: 0.6394166976275145
User 122532 does not improve AUC. Reverting changes.
Training on augumented user 34088 30/50 current_auc = 0.6395493869752138
User 34088 AUC after training: 0.6392840082798154
User 34088 does not improve AUC. Reverting changes.
Training on augumented user 108247 31/50 current_auc = 0.6395493869752138
User 108247 AUC after training: 0.6396555384533731
User 108247 improves AUC. Keeping the model.
Training on augumented user 51808 32/50 current_auc = 0.6396555384533731
User 51808 AUC after training: 0.6393636218884349
User 51808 does not improve AUC. Reverting changes.
Training on augumented user 32310 33/50 current_auc = 0.6396555384533731
User 32310 AUC after training: 0.6396820763229127
User 32310 improves AUC. Keeping the model.
Training on augumented user 70910 34/50 current_auc = 0.6396820763229127
User 70910 AUC after training: 0.6393636218884349
User 70910 does not improve AUC. Reverting changes.
Training on augumented user 69327 35/50 current_auc = 0.6396820763229127
User 69327 AUC after training: 0.6392574704102755
User 69327 does not improve AUC. Reverting changes.
Training on augumented user 97637 36/50 current_auc = 0.6396820763229127
User 97637 AUC after training: 0.6397351520619925
User 97637 improves AUC. Keeping the model.
Training on augumented user 73506 37/50 current_auc = 0.6397351520619925
User 73506 AUC after training: 0.6393901597579748
User 73506 does not improve AUC. Reverting changes.
Training on augumented user 666 38/50 current_auc = 0.6397351520619925
User 666 AUC after training: 0.6388328644976382
User 666 does not improve AUC. Reverting changes.
Training on augumented user 16299 39/50 current_auc = 0.6397351520619925
User 16299 AUC after training: 0.639469773366594
User 16299 does not improve AUC. Reverting changes.
Training on augumented user 48560 40/50 current_auc = 0.6397351520619925
User 48560 AUC after training: 0.6395228491056738
User 48560 does not improve AUC. Reverting changes.
Training on augumented user 77797 41/50 current_auc = 0.6397351520619925
User 77797 AUC after training: 0.6399209171487713
User 77797 improves AUC. Keeping the model.
Training on augumented user 94161 42/50 current_auc = 0.6399209171487713
User 94161 AUC after training: 0.6401597579746298
User 94161 improves AUC. Keeping the model.
Training on augumented user 16202 43/50 current_auc = 0.6401597579746298
User 16202 AUC after training: 0.6400270686269307
User 16202 does not improve AUC. Reverting changes.
Training on augumented user 40179 44/50 current_auc = 0.6401597579746298
User 40179 AUC after training: 0.6403720609309485
User 40179 improves AUC. Keeping the model.
Training on augumented user 100413 45/50 current_auc = 0.6403720609309485
User 100413 AUC after training: 0.6401995647789396
User 100413 does not improve AUC. Reverting changes.
Training on augumented user 96620 46/50 current_auc = 0.6403720609309485
User 96620 AUC after training: 0.6398678414096916
User 96620 does not improve AUC. Reverting changes.
Training on augumented user 11495 47/50 current_auc = 0.6403720609309485
User 11495 AUC after training: 0.6392707393450454
User 11495 does not improve AUC. Reverting changes.
Training on augumented user 102372 48/50 current_auc = 0.6403720609309485
User 102372 AUC after training: 0.6400270686269307
User 102372 does not improve AUC. Reverting changes.
Training on augumented user 133206 49/50 current_auc = 0.6403720609309485
User 133206 AUC after training: 0.6401464890398599
User 133206 does not improve AUC. Reverting changes.
[2024-12-02 18:39:28.926649] start test user 71970 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:29.401939] start test user 71970 114/568 recall augumented users by random, augumented_users = [112832, 25438, 129815, 14997, 43288, 7959, 62575, 81075, 126365, 25861, 14075, 17711, 21544, 99376, 6407, 15160, 49302, 51273, 102654, 59775, 117670, 10865, 107759, 94339, 47458, 133986, 98241, 47255, 9730, 126541, 110170, 123696, 4509, 41037, 23064, 66585, 87935, 116517, 108156, 60110, 37850, 82536, 4375, 101737, 115547, 31173, 21152, 97300, 117972, 79513]
[2024-12-02 18:39:29.418543] user = 71970 Cloud 114/568
[2024-12-02 18:39:29.456118] user = 71970 Local 114/568
[2024-12-02 18:39:29.554659] user = 71970 Local+ 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:32.062087] user = 71970 MPDA- 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7344523668053079
Training on augumented user 112832 0/50 current_auc = 0.7344523668053079
User 112832 AUC after training: 0.7361853832442068
User 112832 improves AUC. Keeping the model.
Training on augumented user 25438 1/50 current_auc = 0.7361853832442068
User 25438 AUC after training: 0.7364329570211923
User 25438 improves AUC. Keeping the model.
Training on augumented user 129815 2/50 current_auc = 0.7364329570211923
User 129815 AUC after training: 0.7364329570211923
User 129815 does not improve AUC. Reverting changes.
Training on augumented user 14997 3/50 current_auc = 0.7364329570211923
User 14997 AUC after training: 0.7362348979996038
User 14997 does not improve AUC. Reverting changes.
Training on augumented user 43288 4/50 current_auc = 0.7364329570211923
User 43288 AUC after training: 0.7361853832442068
User 43288 does not improve AUC. Reverting changes.
Training on augumented user 7959 5/50 current_auc = 0.7364329570211923
User 7959 AUC after training: 0.735888294711824
User 7959 does not improve AUC. Reverting changes.
Training on augumented user 62575 6/50 current_auc = 0.7364329570211923
User 62575 AUC after training: 0.7374232521291345
User 62575 improves AUC. Keeping the model.
Training on augumented user 81075 7/50 current_auc = 0.7374232521291345
User 81075 AUC after training: 0.7369776193305605
User 81075 does not improve AUC. Reverting changes.
Training on augumented user 126365 8/50 current_auc = 0.7374232521291345
User 126365 AUC after training: 0.7371756783521489
User 126365 does not improve AUC. Reverting changes.
Training on augumented user 25861 9/50 current_auc = 0.7374232521291345
User 25861 AUC after training: 0.7369776193305604
User 25861 does not improve AUC. Reverting changes.
Training on augumented user 14075 10/50 current_auc = 0.7374232521291345
User 14075 AUC after training: 0.7372747078629431
User 14075 does not improve AUC. Reverting changes.
Training on augumented user 17711 11/50 current_auc = 0.7374232521291345
User 17711 AUC after training: 0.7370271340859577
User 17711 does not improve AUC. Reverting changes.
Training on augumented user 21544 12/50 current_auc = 0.7374232521291345
User 21544 AUC after training: 0.737720340661517
User 21544 improves AUC. Keeping the model.
Training on augumented user 99376 13/50 current_auc = 0.737720340661517
User 99376 AUC after training: 0.7374727668845317
User 99376 does not improve AUC. Reverting changes.
Training on augumented user 6407 14/50 current_auc = 0.737720340661517
User 6407 AUC after training: 0.7376213111507229
User 6407 does not improve AUC. Reverting changes.
Training on augumented user 15160 15/50 current_auc = 0.737720340661517
User 15160 AUC after training: 0.7375222816399287
User 15160 does not improve AUC. Reverting changes.
Training on augumented user 49302 16/50 current_auc = 0.737720340661517
User 49302 AUC after training: 0.737720340661517
User 49302 does not improve AUC. Reverting changes.
Training on augumented user 51273 17/50 current_auc = 0.737720340661517
User 51273 AUC after training: 0.7376213111507228
User 51273 does not improve AUC. Reverting changes.
Training on augumented user 102654 18/50 current_auc = 0.737720340661517
User 102654 AUC after training: 0.7374727668845316
User 102654 does not improve AUC. Reverting changes.
Training on augumented user 59775 19/50 current_auc = 0.737720340661517
User 59775 AUC after training: 0.7375222816399287
User 59775 does not improve AUC. Reverting changes.
Training on augumented user 117670 20/50 current_auc = 0.737720340661517
User 117670 AUC after training: 0.7377203406615171
User 117670 improves AUC. Keeping the model.
Training on augumented user 10865 21/50 current_auc = 0.7377203406615171
User 10865 AUC after training: 0.7372747078629431
User 10865 does not improve AUC. Reverting changes.
Training on augumented user 107759 22/50 current_auc = 0.7377203406615171
User 107759 AUC after training: 0.7377203406615171
User 107759 does not improve AUC. Reverting changes.
Training on augumented user 94339 23/50 current_auc = 0.7377203406615171
User 94339 AUC after training: 0.7379183996831056
User 94339 improves AUC. Keeping the model.
Training on augumented user 47458 24/50 current_auc = 0.7379183996831056
User 47458 AUC after training: 0.7378193701723114
User 47458 does not improve AUC. Reverting changes.
Training on augumented user 133986 25/50 current_auc = 0.7379183996831056
User 133986 AUC after training: 0.7377203406615171
User 133986 does not improve AUC. Reverting changes.
Training on augumented user 98241 26/50 current_auc = 0.7379183996831056
User 98241 AUC after training: 0.7379183996831056
User 98241 does not improve AUC. Reverting changes.
Training on augumented user 47255 27/50 current_auc = 0.7379183996831056
User 47255 AUC after training: 0.7377698554169142
User 47255 does not improve AUC. Reverting changes.
Training on augumented user 9730 28/50 current_auc = 0.7379183996831056
User 9730 AUC after training: 0.7379679144385026
User 9730 improves AUC. Keeping the model.
Training on augumented user 126541 29/50 current_auc = 0.7379679144385026
User 126541 AUC after training: 0.7376213111507229
User 126541 does not improve AUC. Reverting changes.
Training on augumented user 110170 30/50 current_auc = 0.7379679144385026
User 110170 AUC after training: 0.7377203406615171
User 110170 does not improve AUC. Reverting changes.
Training on augumented user 123696 31/50 current_auc = 0.7379679144385026
User 123696 AUC after training: 0.7379183996831056
User 123696 does not improve AUC. Reverting changes.
Training on augumented user 4509 32/50 current_auc = 0.7379679144385026
User 4509 AUC after training: 0.7373242226183403
User 4509 does not improve AUC. Reverting changes.
Training on augumented user 41037 33/50 current_auc = 0.7379679144385026
User 41037 AUC after training: 0.7377203406615171
User 41037 does not improve AUC. Reverting changes.
Training on augumented user 23064 34/50 current_auc = 0.7379679144385026
User 23064 AUC after training: 0.7378193701723114
User 23064 does not improve AUC. Reverting changes.
Training on augumented user 66585 35/50 current_auc = 0.7379679144385026
User 66585 AUC after training: 0.7378193701723114
User 66585 does not improve AUC. Reverting changes.
Training on augumented user 87935 36/50 current_auc = 0.7379679144385026
User 87935 AUC after training: 0.7375222816399287
User 87935 does not improve AUC. Reverting changes.
Training on augumented user 116517 37/50 current_auc = 0.7379679144385026
User 116517 AUC after training: 0.73767082590612
User 116517 does not improve AUC. Reverting changes.
Training on augumented user 108156 38/50 current_auc = 0.7379679144385026
User 108156 AUC after training: 0.73767082590612
User 108156 does not improve AUC. Reverting changes.
Training on augumented user 60110 39/50 current_auc = 0.7379679144385026
User 60110 AUC after training: 0.7377698554169143
User 60110 does not improve AUC. Reverting changes.
Training on augumented user 37850 40/50 current_auc = 0.7379679144385026
User 37850 AUC after training: 0.7376213111507229
User 37850 does not improve AUC. Reverting changes.
Training on augumented user 82536 41/50 current_auc = 0.7379679144385026
User 82536 AUC after training: 0.7374232521291344
User 82536 does not improve AUC. Reverting changes.
Training on augumented user 4375 42/50 current_auc = 0.7379679144385026
User 4375 AUC after training: 0.73767082590612
User 4375 does not improve AUC. Reverting changes.
Training on augumented user 101737 43/50 current_auc = 0.7379679144385026
User 101737 AUC after training: 0.7378688849277084
User 101737 does not improve AUC. Reverting changes.
Training on augumented user 115547 44/50 current_auc = 0.7379679144385026
User 115547 AUC after training: 0.7377698554169142
User 115547 does not improve AUC. Reverting changes.
Training on augumented user 31173 45/50 current_auc = 0.7379679144385026
User 31173 AUC after training: 0.7385125767478709
User 31173 improves AUC. Keeping the model.
Training on augumented user 21152 46/50 current_auc = 0.7385125767478709
User 21152 AUC after training: 0.7388096652802535
User 21152 improves AUC. Keeping the model.
Training on augumented user 97300 47/50 current_auc = 0.7388096652802535
User 97300 AUC after training: 0.7389086947910477
User 97300 improves AUC. Keeping the model.
Training on augumented user 117972 48/50 current_auc = 0.7389086947910477
User 117972 AUC after training: 0.7387106357694593
User 117972 does not improve AUC. Reverting changes.
Training on augumented user 79513 49/50 current_auc = 0.7389086947910477
User 79513 AUC after training: 0.7385125767478709
User 79513 does not improve AUC. Reverting changes.
[2024-12-02 18:39:58.938860] start test user 71975 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:59.344555] start test user 71975 115/568 recall augumented users by random, augumented_users = [129051, 12724, 121411, 132766, 18820, 24593, 96529, 27553, 114007, 61835, 104208, 74153, 29333, 87113, 87347, 23081, 2605, 27665, 18056, 55171, 76257, 97759, 128128, 22062, 13291, 82141, 56435, 58889, 57610, 74080, 60518, 19326, 72534, 12793, 117862, 10180, 50098, 28753, 40399, 43140, 136193, 128702, 75436, 26799, 24721, 81646, 95265, 125677, 73037, 72615]
[2024-12-02 18:39:59.367085] user = 71975 Cloud 115/568
[2024-12-02 18:39:59.403301] user = 71975 Local 115/568
[2024-12-02 18:40:00.400842] user = 71975 Local+ 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:03.825117] user = 71975 MPDA- 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5763344295471793
Training on augumented user 129051 0/50 current_auc = 0.5763344295471793
User 129051 AUC after training: 0.576545239902184
User 129051 improves AUC. Keeping the model.
Training on augumented user 12724 1/50 current_auc = 0.576545239902184
User 12724 AUC after training: 0.5769879416476937
User 12724 improves AUC. Keeping the model.
Training on augumented user 121411 2/50 current_auc = 0.5769879416476937
User 121411 AUC after training: 0.5768825364701914
User 121411 does not improve AUC. Reverting changes.
Training on augumented user 132766 3/50 current_auc = 0.5769879416476937
User 132766 AUC after training: 0.5773357787334514
User 132766 improves AUC. Keeping the model.
Training on augumented user 18820 4/50 current_auc = 0.5773357787334514
User 18820 AUC after training: 0.5777679399612109
User 18820 improves AUC. Keeping the model.
Training on augumented user 24593 5/50 current_auc = 0.5777679399612109
User 24593 AUC after training: 0.5779787503162155
User 24593 improves AUC. Keeping the model.
Training on augumented user 96529 6/50 current_auc = 0.5779787503162155
User 96529 AUC after training: 0.5792436124462433
User 96529 improves AUC. Keeping the model.
Training on augumented user 27553 7/50 current_auc = 0.5792436124462433
User 27553 AUC after training: 0.5791803693397419
User 27553 does not improve AUC. Reverting changes.
Training on augumented user 114007 8/50 current_auc = 0.5792436124462433
User 114007 AUC after training: 0.5780841554937178
User 114007 does not improve AUC. Reverting changes.
Training on augumented user 61835 9/50 current_auc = 0.5792436124462433
User 61835 AUC after training: 0.5788009107007337
User 61835 does not improve AUC. Reverting changes.
Training on augumented user 104208 10/50 current_auc = 0.5792436124462433
User 104208 AUC after training: 0.5788852348427355
User 104208 does not improve AUC. Reverting changes.
Training on augumented user 74153 11/50 current_auc = 0.5792436124462433
User 74153 AUC after training: 0.5786955055232312
User 74153 does not improve AUC. Reverting changes.
Training on augumented user 29333 12/50 current_auc = 0.5792436124462433
User 29333 AUC after training: 0.5773568597689518
User 29333 does not improve AUC. Reverting changes.
Training on augumented user 87113 13/50 current_auc = 0.5792436124462433
User 87113 AUC after training: 0.5792014503752425
User 87113 does not improve AUC. Reverting changes.
Training on augumented user 87347 14/50 current_auc = 0.5792436124462433
User 87347 AUC after training: 0.5792857745172443
User 87347 improves AUC. Keeping the model.
Training on augumented user 23081 15/50 current_auc = 0.5792857745172443
User 23081 AUC after training: 0.5795703684965006
User 23081 improves AUC. Keeping the model.
Training on augumented user 2605 16/50 current_auc = 0.5795703684965006
User 2605 AUC after training: 0.5793490176237457
User 2605 does not improve AUC. Reverting changes.
Training on augumented user 27665 17/50 current_auc = 0.5795703684965006
User 27665 AUC after training: 0.5791276667509908
User 27665 does not improve AUC. Reverting changes.
Training on augumented user 18056 18/50 current_auc = 0.5795703684965006
User 18056 AUC after training: 0.5795492874610001
User 18056 does not improve AUC. Reverting changes.
Training on augumented user 55171 19/50 current_auc = 0.5795703684965006
User 55171 AUC after training: 0.5782633442954719
User 55171 does not improve AUC. Reverting changes.
Training on augumented user 76257 20/50 current_auc = 0.5795703684965006
User 76257 AUC after training: 0.5794017202124968
User 76257 does not improve AUC. Reverting changes.
Training on augumented user 97759 21/50 current_auc = 0.5795703684965006
User 97759 AUC after training: 0.5798338814402563
User 97759 improves AUC. Keeping the model.
Training on augumented user 128128 22/50 current_auc = 0.5798338814402563
User 128128 AUC after training: 0.5797600978160047
User 128128 does not improve AUC. Reverting changes.
Training on augumented user 22062 23/50 current_auc = 0.5798338814402563
User 22062 AUC after training: 0.5796441521207523
User 22062 does not improve AUC. Reverting changes.
Training on augumented user 13291 24/50 current_auc = 0.5798338814402563
User 13291 AUC after training: 0.5794228012479973
User 13291 does not improve AUC. Reverting changes.
Training on augumented user 82141 25/50 current_auc = 0.5798338814402563
User 82141 AUC after training: 0.5801711780082637
User 82141 improves AUC. Keeping the model.
Training on augumented user 56435 26/50 current_auc = 0.5801711780082637
User 56435 AUC after training: 0.5800236107597606
User 56435 does not improve AUC. Reverting changes.
Training on augumented user 58889 27/50 current_auc = 0.5801711780082637
User 58889 AUC after training: 0.5799603676532592
User 58889 does not improve AUC. Reverting changes.
Training on augumented user 57610 28/50 current_auc = 0.5801711780082637
User 57610 AUC after training: 0.5802555021502657
User 57610 improves AUC. Keeping the model.
Training on augumented user 74080 29/50 current_auc = 0.5802555021502657
User 74080 AUC after training: 0.5801711780082638
User 74080 does not improve AUC. Reverting changes.
Training on augumented user 60518 30/50 current_auc = 0.5802555021502657
User 60518 AUC after training: 0.5810987435702842
User 60518 improves AUC. Keeping the model.
Training on augumented user 19326 31/50 current_auc = 0.5810987435702842
User 19326 AUC after training: 0.5810776625347838
User 19326 does not improve AUC. Reverting changes.
Training on augumented user 72534 32/50 current_auc = 0.5810987435702842
User 72534 AUC after training: 0.5813095539252888
User 72534 improves AUC. Keeping the model.
Training on augumented user 12793 33/50 current_auc = 0.5813095539252888
User 12793 AUC after training: 0.5812673918542879
User 12793 does not improve AUC. Reverting changes.
Training on augumented user 117862 34/50 current_auc = 0.5813095539252888
User 117862 AUC after training: 0.5810565814992833
User 117862 does not improve AUC. Reverting changes.
Training on augumented user 10180 35/50 current_auc = 0.5813095539252888
User 10180 AUC after training: 0.5815836073867948
User 10180 improves AUC. Keeping the model.
Training on augumented user 50098 36/50 current_auc = 0.5815836073867948
User 50098 AUC after training: 0.5819419849903027
User 50098 improves AUC. Keeping the model.
Training on augumented user 28753 37/50 current_auc = 0.5819419849903027
User 28753 AUC after training: 0.5819841470613036
User 28753 improves AUC. Keeping the model.
Training on augumented user 40399 38/50 current_auc = 0.5819841470613036
User 40399 AUC after training: 0.582321443629311
User 40399 improves AUC. Keeping the model.
Training on augumented user 43140 39/50 current_auc = 0.582321443629311
User 43140 AUC after training: 0.5823425246648115
User 43140 improves AUC. Keeping the model.
Training on augumented user 136193 40/50 current_auc = 0.5823425246648115
User 136193 AUC after training: 0.5821633358630576
User 136193 does not improve AUC. Reverting changes.
Training on augumented user 128702 41/50 current_auc = 0.5823425246648115
User 128702 AUC after training: 0.5813833375495403
User 128702 does not improve AUC. Reverting changes.
Training on augumented user 75436 42/50 current_auc = 0.5823425246648115
User 75436 AUC after training: 0.5819419849903027
User 75436 does not improve AUC. Reverting changes.
Training on augumented user 26799 43/50 current_auc = 0.5823425246648115
User 26799 AUC after training: 0.5823003625938106
User 26799 does not improve AUC. Reverting changes.
Training on augumented user 24721 44/50 current_auc = 0.5823425246648115
User 24721 AUC after training: 0.5804452314697698
User 24721 does not improve AUC. Reverting changes.
Training on augumented user 81646 45/50 current_auc = 0.5823425246648115
User 81646 AUC after training: 0.582321443629311
User 81646 does not improve AUC. Reverting changes.
Training on augumented user 95265 46/50 current_auc = 0.5823425246648115
User 95265 AUC after training: 0.5819630660258032
User 95265 does not improve AUC. Reverting changes.
Training on augumented user 125677 47/50 current_auc = 0.5823425246648115
User 125677 AUC after training: 0.5818154987772999
User 125677 does not improve AUC. Reverting changes.
Training on augumented user 73037 48/50 current_auc = 0.5823425246648115
User 73037 AUC after training: 0.5821738763808078
User 73037 does not improve AUC. Reverting changes.
Training on augumented user 72615 49/50 current_auc = 0.5823425246648115
User 72615 AUC after training: 0.5824057677713129
User 72615 improves AUC. Keeping the model.
[2024-12-02 18:40:33.171072] start test user 71992 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:33.800112] start test user 71992 116/568 recall augumented users by random, augumented_users = [73864, 117914, 119547, 69875, 36058, 87387, 134029, 125815, 84179, 72607, 40155, 30925, 94812, 64372, 33019, 46860, 26224, 137221, 42742, 71189, 109063, 76199, 39829, 98538, 34156, 122843, 135200, 115989, 78021, 48465, 103433, 136809, 95912, 70104, 22981, 50510, 74426, 89864, 43043, 38005, 85108, 104283, 53702, 120455, 100387, 63374, 136722, 16787, 128521, 23044]
[2024-12-02 18:40:33.817747] user = 71992 Cloud 116/568
[2024-12-02 18:40:33.845789] user = 71992 Local 116/568
[2024-12-02 18:40:33.991509] user = 71992 Local+ 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:36.426257] user = 71992 MPDA- 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4952134434446772
Training on augumented user 73864 0/50 current_auc = 0.4952134434446772
User 73864 AUC after training: 0.49599408356957964
User 73864 improves AUC. Keeping the model.
Training on augumented user 117914 1/50 current_auc = 0.49599408356957964
User 117914 AUC after training: 0.4966514647273922
User 117914 improves AUC. Keeping the model.
Training on augumented user 119547 2/50 current_auc = 0.4966514647273922
User 119547 AUC after training: 0.49619951518139604
User 119547 does not improve AUC. Reverting changes.
Training on augumented user 69875 3/50 current_auc = 0.4966514647273922
User 69875 AUC after training: 0.49615842885903283
User 69875 does not improve AUC. Reverting changes.
Training on augumented user 36058 4/50 current_auc = 0.4966514647273922
User 36058 AUC after training: 0.4962816878261227
User 36058 does not improve AUC. Reverting changes.
Training on augumented user 87387 5/50 current_auc = 0.4966514647273922
User 87387 AUC after training: 0.49607625621430623
User 87387 does not improve AUC. Reverting changes.
Training on augumented user 134029 6/50 current_auc = 0.4966514647273922
User 134029 AUC after training: 0.4956653929906734
User 134029 does not improve AUC. Reverting changes.
Training on augumented user 125815 7/50 current_auc = 0.4966514647273922
User 125815 AUC after training: 0.4965898352438473
User 125815 does not improve AUC. Reverting changes.
Training on augumented user 84179 8/50 current_auc = 0.4966514647273922
User 84179 AUC after training: 0.49624060150375937
User 84179 does not improve AUC. Reverting changes.
Training on augumented user 72607 9/50 current_auc = 0.4966514647273922
User 72607 AUC after training: 0.4965282057603024
User 72607 does not improve AUC. Reverting changes.
Training on augumented user 40155 10/50 current_auc = 0.4966514647273922
User 40155 AUC after training: 0.49615842885903283
User 40155 does not improve AUC. Reverting changes.
Training on augumented user 30925 11/50 current_auc = 0.4966514647273922
User 30925 AUC after training: 0.4953367024117672
User 30925 does not improve AUC. Reverting changes.
Training on augumented user 94812 12/50 current_auc = 0.4966514647273922
User 94812 AUC after training: 0.49585028144130816
User 94812 does not improve AUC. Reverting changes.
Training on augumented user 64372 13/50 current_auc = 0.4966514647273922
User 64372 AUC after training: 0.49695961214511686
User 64372 improves AUC. Keeping the model.
Training on augumented user 33019 14/50 current_auc = 0.49695961214511686
User 33019 AUC after training: 0.4961789720202145
User 33019 does not improve AUC. Reverting changes.
Training on augumented user 46860 15/50 current_auc = 0.49695961214511686
User 46860 AUC after training: 0.4968568963392087
User 46860 does not improve AUC. Reverting changes.
Training on augumented user 26224 16/50 current_auc = 0.49695961214511686
User 26224 AUC after training: 0.4965282057603024
User 26224 does not improve AUC. Reverting changes.
Training on augumented user 137221 17/50 current_auc = 0.49695961214511686
User 137221 AUC after training: 0.49630223098730425
User 137221 does not improve AUC. Reverting changes.
Training on augumented user 42742 18/50 current_auc = 0.49695961214511686
User 42742 AUC after training: 0.49714450059575166
User 42742 improves AUC. Keeping the model.
Training on augumented user 71189 19/50 current_auc = 0.49714450059575166
User 71189 AUC after training: 0.4966103784050289
User 71189 does not improve AUC. Reverting changes.
Training on augumented user 109063 20/50 current_auc = 0.49714450059575166
User 109063 AUC after training: 0.49722667324047826
User 109063 improves AUC. Keeping the model.
Training on augumented user 76199 21/50 current_auc = 0.49722667324047826
User 76199 AUC after training: 0.49732938904638646
User 76199 improves AUC. Keeping the model.
Training on augumented user 39829 22/50 current_auc = 0.49732938904638646
User 39829 AUC after training: 0.49617897202021444
User 39829 does not improve AUC. Reverting changes.
Training on augumented user 98538 23/50 current_auc = 0.49732938904638646
User 98538 AUC after training: 0.4968568963392087
User 98538 does not improve AUC. Reverting changes.
Training on augumented user 34156 24/50 current_auc = 0.49732938904638646
User 34156 AUC after training: 0.4969185258227536
User 34156 does not improve AUC. Reverting changes.
Training on augumented user 122843 25/50 current_auc = 0.49732938904638646
User 122843 AUC after training: 0.4966925510497555
User 122843 does not improve AUC. Reverting changes.
Training on augumented user 135200 26/50 current_auc = 0.49732938904638646
User 135200 AUC after training: 0.49728830272402313
User 135200 does not improve AUC. Reverting changes.
Training on augumented user 115989 27/50 current_auc = 0.49732938904638646
User 115989 AUC after training: 0.497411561691113
User 115989 improves AUC. Keeping the model.
Training on augumented user 78021 28/50 current_auc = 0.497411561691113
User 78021 AUC after training: 0.49626114466494103
User 78021 does not improve AUC. Reverting changes.
Training on augumented user 48465 29/50 current_auc = 0.497411561691113
User 48465 AUC after training: 0.49755536381938453
User 48465 improves AUC. Keeping the model.
Training on augumented user 103433 30/50 current_auc = 0.49755536381938453
User 103433 AUC after training: 0.49718558691811493
User 103433 does not improve AUC. Reverting changes.
Training on augumented user 136809 31/50 current_auc = 0.49755536381938453
User 136809 AUC after training: 0.4973499322075681
User 136809 does not improve AUC. Reverting changes.
Training on augumented user 95912 32/50 current_auc = 0.49755536381938453
User 95912 AUC after training: 0.4967336373721188
User 95912 does not improve AUC. Reverting changes.
Training on augumented user 70104 33/50 current_auc = 0.49755536381938453
User 70104 AUC after training: 0.49739101852993145
User 70104 does not improve AUC. Reverting changes.
Training on augumented user 22981 34/50 current_auc = 0.49755536381938453
User 22981 AUC after training: 0.4971034142733884
User 22981 does not improve AUC. Reverting changes.
Training on augumented user 50510 35/50 current_auc = 0.49755536381938453
User 50510 AUC after training: 0.49790459755947236
User 50510 improves AUC. Keeping the model.
Training on augumented user 74426 36/50 current_auc = 0.49790459755947236
User 74426 AUC after training: 0.4977813385923826
User 74426 does not improve AUC. Reverting changes.
Training on augumented user 89864 37/50 current_auc = 0.49790459755947236
User 89864 AUC after training: 0.4959529972472164
User 89864 does not improve AUC. Reverting changes.
Training on augumented user 43043 38/50 current_auc = 0.49790459755947236
User 43043 AUC after training: 0.4980894860101073
User 43043 improves AUC. Keeping the model.
Training on augumented user 38005 39/50 current_auc = 0.4980894860101073
User 38005 AUC after training: 0.49751427749702126
User 38005 does not improve AUC. Reverting changes.
Training on augumented user 85108 40/50 current_auc = 0.4980894860101073
User 85108 AUC after training: 0.49858252187846663
User 85108 improves AUC. Keeping the model.
Training on augumented user 104283 41/50 current_auc = 0.49858252187846663
User 104283 AUC after training: 0.4987057808455565
User 104283 improves AUC. Keeping the model.
Training on augumented user 53702 42/50 current_auc = 0.4987057808455565
User 53702 AUC after training: 0.4982127449771971
User 53702 does not improve AUC. Reverting changes.
Training on augumented user 120455 43/50 current_auc = 0.4987057808455565
User 120455 AUC after training: 0.49673363737211884
User 120455 does not improve AUC. Reverting changes.
Training on augumented user 100387 44/50 current_auc = 0.4987057808455565
User 100387 AUC after training: 0.4987879534902831
User 100387 improves AUC. Keeping the model.
Training on augumented user 63374 45/50 current_auc = 0.4987879534902831
User 63374 AUC after training: 0.49880849665146476
User 63374 improves AUC. Keeping the model.
Training on augumented user 136722 46/50 current_auc = 0.49880849665146476
User 136722 AUC after training: 0.4974731911746579
User 136722 does not improve AUC. Reverting changes.
Training on augumented user 16787 47/50 current_auc = 0.49880849665146476
User 16787 AUC after training: 0.4982332881383787
User 16787 does not improve AUC. Reverting changes.
Training on augumented user 128521 48/50 current_auc = 0.49880849665146476
User 128521 AUC after training: 0.49827437446074196
User 128521 does not improve AUC. Reverting changes.
Training on augumented user 23044 49/50 current_auc = 0.49880849665146476
User 23044 AUC after training: 0.4985414355561034
User 23044 does not improve AUC. Reverting changes.
[2024-12-02 18:41:05.600514] start test user 72008 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:06.043225] start test user 72008 117/568 recall augumented users by random, augumented_users = [20072, 97908, 59055, 60883, 73096, 103371, 37561, 138305, 20436, 135133, 82884, 87641, 89398, 77945, 8819, 10166, 37923, 2816, 16183, 46821, 47166, 93958, 72573, 36228, 52263, 106211, 12629, 112830, 20358, 4318, 67918, 128170, 58401, 114216, 83095, 119669, 110036, 35264, 90956, 121641, 46461, 78968, 2351, 35653, 57868, 7995, 35516, 42588, 86769, 53088]
[2024-12-02 18:41:06.060813] user = 72008 Cloud 117/568
[2024-12-02 18:41:06.119399] user = 72008 Local 117/568
[2024-12-02 18:41:06.434293] user = 72008 Local+ 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:08.794889] user = 72008 MPDA- 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5503506165115611
Training on augumented user 20072 0/50 current_auc = 0.5503506165115611
User 20072 AUC after training: 0.5502202758009438
User 20072 does not improve AUC. Reverting changes.
Training on augumented user 97908 1/50 current_auc = 0.5503506165115611
User 97908 AUC after training: 0.5506112979327964
User 97908 improves AUC. Keeping the model.
Training on augumented user 59055 2/50 current_auc = 0.5506112979327964
User 59055 AUC after training: 0.5512265060869111
User 59055 improves AUC. Keeping the model.
Training on augumented user 60883 3/50 current_auc = 0.5512265060869111
User 60883 AUC after training: 0.551737441672532
User 60883 improves AUC. Keeping the model.
Training on augumented user 73096 4/50 current_auc = 0.551737441672532
User 73096 AUC after training: 0.5506530069601939
User 73096 does not improve AUC. Reverting changes.
Training on augumented user 103371 5/50 current_auc = 0.551737441672532
User 103371 AUC after training: 0.5522900862855504
User 103371 improves AUC. Keeping the model.
Training on augumented user 37561 6/50 current_auc = 0.5522900862855504
User 37561 AUC after training: 0.5530382419644951
User 37561 improves AUC. Keeping the model.
Training on augumented user 138305 7/50 current_auc = 0.5530382419644951
User 138305 AUC after training: 0.5539454133103934
User 138305 improves AUC. Keeping the model.
Training on augumented user 20436 8/50 current_auc = 0.5539454133103934
User 20436 AUC after training: 0.5546049373061183
User 20436 improves AUC. Keeping the model.
Training on augumented user 135133 9/50 current_auc = 0.5546049373061183
User 135133 AUC after training: 0.555220145460233
User 135133 improves AUC. Keeping the model.
Training on augumented user 82884 10/50 current_auc = 0.555220145460233
User 82884 AUC after training: 0.5542921196006361
User 82884 does not improve AUC. Reverting changes.
Training on augumented user 87641 11/50 current_auc = 0.555220145460233
User 87641 AUC after training: 0.5552670681160554
User 87641 improves AUC. Keeping the model.
Training on augumented user 89398 12/50 current_auc = 0.5552670681160554
User 89398 AUC after training: 0.5551523682907118
User 89398 does not improve AUC. Reverting changes.
Training on augumented user 77945 13/50 current_auc = 0.5552670681160554
User 77945 AUC after training: 0.5555329631657151
User 77945 improves AUC. Keeping the model.
Training on augumented user 8819 14/50 current_auc = 0.5555329631657151
User 8819 AUC after training: 0.5554365110398581
User 8819 does not improve AUC. Reverting changes.
Training on augumented user 10166 15/50 current_auc = 0.5555329631657151
User 10166 AUC after training: 0.5545528010218711
User 10166 does not improve AUC. Reverting changes.
Training on augumented user 37923 16/50 current_auc = 0.5555329631657151
User 37923 AUC after training: 0.5559813352102395
User 37923 improves AUC. Keeping the model.
Training on augumented user 2816 17/50 current_auc = 0.5559813352102395
User 2816 AUC after training: 0.555501681395167
User 2816 does not improve AUC. Reverting changes.
Training on augumented user 16183 18/50 current_auc = 0.5559813352102395
User 16183 AUC after training: 0.5555642449362634
User 16183 does not improve AUC. Reverting changes.
Training on augumented user 46821 19/50 current_auc = 0.5559813352102395
User 46821 AUC after training: 0.5549021141263262
User 46821 does not improve AUC. Reverting changes.
Training on augumented user 47166 20/50 current_auc = 0.5559813352102395
User 47166 AUC after training: 0.5546622872187899
User 47166 does not improve AUC. Reverting changes.
Training on augumented user 93958 21/50 current_auc = 0.5559813352102395
User 93958 AUC after training: 0.5548760459842028
User 93958 does not improve AUC. Reverting changes.
Training on augumented user 72573 22/50 current_auc = 0.5559813352102395
User 72573 AUC after training: 0.555501681395167
User 72573 does not improve AUC. Reverting changes.
Training on augumented user 36228 23/50 current_auc = 0.5559813352102395
User 36228 AUC after training: 0.5560543260081854
User 36228 improves AUC. Keeping the model.
Training on augumented user 52263 24/50 current_auc = 0.5560543260081854
User 52263 AUC after training: 0.5561533849482547
User 52263 improves AUC. Keeping the model.
Training on augumented user 106211 25/50 current_auc = 0.5561533849482547
User 106211 AUC after training: 0.5555590313078387
User 106211 does not improve AUC. Reverting changes.
Training on augumented user 12629 26/50 current_auc = 0.5561533849482547
User 12629 AUC after training: 0.5551002320064649
User 12629 does not improve AUC. Reverting changes.
Training on augumented user 112830 27/50 current_auc = 0.5561533849482547
User 112830 AUC after training: 0.5540236177367639
User 112830 does not improve AUC. Reverting changes.
Training on augumented user 20358 28/50 current_auc = 0.5561533849482547
User 20358 AUC after training: 0.5548108756288939
User 20358 does not improve AUC. Reverting changes.
Training on augumented user 4318 29/50 current_auc = 0.5561533849482547
User 4318 AUC after training: 0.5554286905972212
User 4318 does not improve AUC. Reverting changes.
Training on augumented user 67918 30/50 current_auc = 0.5561533849482547
User 67918 AUC after training: 0.5554234769687965
User 67918 does not improve AUC. Reverting changes.
Training on augumented user 128170 31/50 current_auc = 0.5561533849482547
User 128170 AUC after training: 0.555079377492766
User 128170 does not improve AUC. Reverting changes.
Training on augumented user 58401 32/50 current_auc = 0.5561533849482547
User 58401 AUC after training: 0.5554182633403717
User 58401 does not improve AUC. Reverting changes.
Training on augumented user 114216 33/50 current_auc = 0.5561533849482547
User 114216 AUC after training: 0.5563254346862698
User 114216 improves AUC. Keeping the model.
Training on augumented user 83095 34/50 current_auc = 0.5563254346862698
User 83095 AUC after training: 0.555605953963661
User 83095 does not improve AUC. Reverting changes.
Training on augumented user 119669 35/50 current_auc = 0.5563254346862698
User 119669 AUC after training: 0.5557884309585256
User 119669 does not improve AUC. Reverting changes.
Training on augumented user 110036 36/50 current_auc = 0.5563254346862698
User 110036 AUC after training: 0.5563358619431193
User 110036 improves AUC. Keeping the model.
Training on augumented user 35264 37/50 current_auc = 0.5563358619431193
User 35264 AUC after training: 0.5544954511091995
User 35264 does not improve AUC. Reverting changes.
Training on augumented user 90956 38/50 current_auc = 0.5563358619431193
User 90956 AUC after training: 0.5553921951982481
User 90956 does not improve AUC. Reverting changes.
Training on augumented user 121641 39/50 current_auc = 0.5563358619431193
User 121641 AUC after training: 0.5553713406845494
User 121641 does not improve AUC. Reverting changes.
Training on augumented user 46461 40/50 current_auc = 0.5563358619431193
User 46461 AUC after training: 0.5544850238523501
User 46461 does not improve AUC. Reverting changes.
Training on augumented user 78968 41/50 current_auc = 0.5563358619431193
User 78968 AUC after training: 0.55544954511092
User 78968 does not improve AUC. Reverting changes.
Training on augumented user 2351 42/50 current_auc = 0.5563358619431193
User 2351 AUC after training: 0.5538489611845363
User 2351 does not improve AUC. Reverting changes.
Training on augumented user 35653 43/50 current_auc = 0.5563358619431193
User 35653 AUC after training: 0.5545736555355699
User 35653 does not improve AUC. Reverting changes.
Training on augumented user 57868 44/50 current_auc = 0.5563358619431193
User 57868 AUC after training: 0.556518338937984
User 57868 improves AUC. Keeping the model.
Training on augumented user 7995 45/50 current_auc = 0.556518338937984
User 7995 AUC after training: 0.5564531685826751
User 7995 does not improve AUC. Reverting changes.
Training on augumented user 35516 46/50 current_auc = 0.556518338937984
User 35516 AUC after training: 0.5553139907718777
User 35516 does not improve AUC. Reverting changes.
Training on augumented user 42588 47/50 current_auc = 0.556518338937984
User 42588 AUC after training: 0.5561585985766795
User 42588 does not improve AUC. Reverting changes.
Training on augumented user 86769 48/50 current_auc = 0.556518338937984
User 86769 AUC after training: 0.5559135580407184
User 86769 does not improve AUC. Reverting changes.
Training on augumented user 53088 49/50 current_auc = 0.556518338937984
User 53088 AUC after training: 0.554766559787284
User 53088 does not improve AUC. Reverting changes.
[2024-12-02 18:41:46.830288] start test user 72024 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:47.410960] start test user 72024 118/568 recall augumented users by random, augumented_users = [21157, 102176, 64354, 78618, 68319, 76657, 81809, 109801, 47009, 96140, 84141, 53070, 77573, 81220, 90119, 120258, 23071, 3773, 9713, 85361, 33948, 9054, 135222, 31132, 31014, 73306, 11999, 89291, 45704, 7994, 118379, 37268, 20269, 112856, 80558, 20036, 125383, 20620, 25998, 75289, 21658, 53135, 96104, 46307, 28959, 53162, 131865, 115319, 74158, 15073]
[2024-12-02 18:41:47.425646] user = 72024 Cloud 118/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:47.431618] user = 72024 Local 118/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:47.466072] user = 72024 Local+ 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:49.334857] user = 72024 MPDA- 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 21157 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21157 AUC after training: 0.5
User 21157 does not improve AUC. Reverting changes.
Training on augumented user 102176 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102176 AUC after training: 0.5
User 102176 does not improve AUC. Reverting changes.
Training on augumented user 64354 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64354 AUC after training: 0.5
User 64354 does not improve AUC. Reverting changes.
Training on augumented user 78618 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78618 AUC after training: 0.5
User 78618 does not improve AUC. Reverting changes.
Training on augumented user 68319 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68319 AUC after training: 0.5
User 68319 does not improve AUC. Reverting changes.
Training on augumented user 76657 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76657 AUC after training: 0.5
User 76657 does not improve AUC. Reverting changes.
Training on augumented user 81809 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81809 AUC after training: 0.5
User 81809 does not improve AUC. Reverting changes.
Training on augumented user 109801 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109801 AUC after training: 0.5
User 109801 does not improve AUC. Reverting changes.
Training on augumented user 47009 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47009 AUC after training: 0.5
User 47009 does not improve AUC. Reverting changes.
Training on augumented user 96140 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96140 AUC after training: 0.5
User 96140 does not improve AUC. Reverting changes.
Training on augumented user 84141 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84141 AUC after training: 0.5
User 84141 does not improve AUC. Reverting changes.
Training on augumented user 53070 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53070 AUC after training: 0.5
User 53070 does not improve AUC. Reverting changes.
Training on augumented user 77573 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77573 AUC after training: 0.5
User 77573 does not improve AUC. Reverting changes.
Training on augumented user 81220 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81220 AUC after training: 0.5
User 81220 does not improve AUC. Reverting changes.
Training on augumented user 90119 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90119 AUC after training: 0.5
User 90119 does not improve AUC. Reverting changes.
Training on augumented user 120258 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120258 AUC after training: 0.5
User 120258 does not improve AUC. Reverting changes.
Training on augumented user 23071 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23071 AUC after training: 0.5
User 23071 does not improve AUC. Reverting changes.
Training on augumented user 3773 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3773 AUC after training: 0.5
User 3773 does not improve AUC. Reverting changes.
Training on augumented user 9713 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9713 AUC after training: 0.5
User 9713 does not improve AUC. Reverting changes.
Training on augumented user 85361 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85361 AUC after training: 0.5
User 85361 does not improve AUC. Reverting changes.
Training on augumented user 33948 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33948 AUC after training: 0.5
User 33948 does not improve AUC. Reverting changes.
Training on augumented user 9054 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9054 AUC after training: 0.5
User 9054 does not improve AUC. Reverting changes.
Training on augumented user 135222 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135222 AUC after training: 0.5
User 135222 does not improve AUC. Reverting changes.
Training on augumented user 31132 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31132 AUC after training: 0.5
User 31132 does not improve AUC. Reverting changes.
Training on augumented user 31014 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31014 AUC after training: 0.5
User 31014 does not improve AUC. Reverting changes.
Training on augumented user 73306 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73306 AUC after training: 0.5
User 73306 does not improve AUC. Reverting changes.
Training on augumented user 11999 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11999 AUC after training: 0.5
User 11999 does not improve AUC. Reverting changes.
Training on augumented user 89291 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89291 AUC after training: 0.5
User 89291 does not improve AUC. Reverting changes.
Training on augumented user 45704 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45704 AUC after training: 0.5
User 45704 does not improve AUC. Reverting changes.
Training on augumented user 7994 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7994 AUC after training: 0.5
User 7994 does not improve AUC. Reverting changes.
Training on augumented user 118379 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118379 AUC after training: 0.5
User 118379 does not improve AUC. Reverting changes.
Training on augumented user 37268 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37268 AUC after training: 0.5
User 37268 does not improve AUC. Reverting changes.
Training on augumented user 20269 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20269 AUC after training: 0.5
User 20269 does not improve AUC. Reverting changes.
Training on augumented user 112856 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112856 AUC after training: 0.5
User 112856 does not improve AUC. Reverting changes.
Training on augumented user 80558 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80558 AUC after training: 0.5
User 80558 does not improve AUC. Reverting changes.
Training on augumented user 20036 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20036 AUC after training: 0.5
User 20036 does not improve AUC. Reverting changes.
Training on augumented user 125383 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125383 AUC after training: 0.5
User 125383 does not improve AUC. Reverting changes.
Training on augumented user 20620 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20620 AUC after training: 0.5
User 20620 does not improve AUC. Reverting changes.
Training on augumented user 25998 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25998 AUC after training: 0.5
User 25998 does not improve AUC. Reverting changes.
Training on augumented user 75289 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75289 AUC after training: 0.5
User 75289 does not improve AUC. Reverting changes.
Training on augumented user 21658 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21658 AUC after training: 0.5
User 21658 does not improve AUC. Reverting changes.
Training on augumented user 53135 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53135 AUC after training: 0.5
User 53135 does not improve AUC. Reverting changes.
Training on augumented user 96104 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96104 AUC after training: 0.5
User 96104 does not improve AUC. Reverting changes.
Training on augumented user 46307 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46307 AUC after training: 0.5
User 46307 does not improve AUC. Reverting changes.
Training on augumented user 28959 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28959 AUC after training: 0.5
User 28959 does not improve AUC. Reverting changes.
Training on augumented user 53162 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53162 AUC after training: 0.5
User 53162 does not improve AUC. Reverting changes.
Training on augumented user 131865 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131865 AUC after training: 0.5
User 131865 does not improve AUC. Reverting changes.
Training on augumented user 115319 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115319 AUC after training: 0.5
User 115319 does not improve AUC. Reverting changes.
Training on augumented user 74158 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74158 AUC after training: 0.5
User 74158 does not improve AUC. Reverting changes.
Training on augumented user 15073 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15073 AUC after training: 0.5
User 15073 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:42:16.138586] start test user 72059 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:16.755066] start test user 72059 119/568 recall augumented users by random, augumented_users = [115842, 81808, 11145, 68793, 22985, 20181, 74214, 100680, 9197, 105358, 33449, 111971, 85653, 113578, 35659, 119420, 101482, 103902, 65183, 56733, 34724, 4327, 24823, 133254, 35042, 19943, 93891, 44185, 29216, 88979, 2352, 111244, 3756, 111896, 99235, 119894, 122720, 93103, 60449, 128705, 124051, 2607, 3604, 108657, 114295, 80724, 91921, 131122, 67789, 61309]
[2024-12-02 18:42:16.770381] user = 72059 Cloud 119/568
[2024-12-02 18:42:16.781874] user = 72059 Local 119/568
[2024-12-02 18:42:16.853027] user = 72059 Local+ 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:19.544614] user = 72059 MPDA- 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8400000000000001
Training on augumented user 115842 0/50 current_auc = 0.8400000000000001
User 115842 AUC after training: 0.8400000000000001
User 115842 does not improve AUC. Reverting changes.
Training on augumented user 81808 1/50 current_auc = 0.8400000000000001
User 81808 AUC after training: 0.8400000000000001
User 81808 does not improve AUC. Reverting changes.
Training on augumented user 11145 2/50 current_auc = 0.8400000000000001
User 11145 AUC after training: 0.8400000000000001
User 11145 does not improve AUC. Reverting changes.
Training on augumented user 68793 3/50 current_auc = 0.8400000000000001
User 68793 AUC after training: 0.8400000000000001
User 68793 does not improve AUC. Reverting changes.
Training on augumented user 22985 4/50 current_auc = 0.8400000000000001
User 22985 AUC after training: 0.8400000000000001
User 22985 does not improve AUC. Reverting changes.
Training on augumented user 20181 5/50 current_auc = 0.8400000000000001
User 20181 AUC after training: 0.8400000000000001
User 20181 does not improve AUC. Reverting changes.
Training on augumented user 74214 6/50 current_auc = 0.8400000000000001
User 74214 AUC after training: 0.8400000000000001
User 74214 does not improve AUC. Reverting changes.
Training on augumented user 100680 7/50 current_auc = 0.8400000000000001
User 100680 AUC after training: 0.8400000000000001
User 100680 does not improve AUC. Reverting changes.
Training on augumented user 9197 8/50 current_auc = 0.8400000000000001
User 9197 AUC after training: 0.8320000000000001
User 9197 does not improve AUC. Reverting changes.
Training on augumented user 105358 9/50 current_auc = 0.8400000000000001
User 105358 AUC after training: 0.8400000000000001
User 105358 does not improve AUC. Reverting changes.
Training on augumented user 33449 10/50 current_auc = 0.8400000000000001
User 33449 AUC after training: 0.8400000000000001
User 33449 does not improve AUC. Reverting changes.
Training on augumented user 111971 11/50 current_auc = 0.8400000000000001
User 111971 AUC after training: 0.8400000000000001
User 111971 does not improve AUC. Reverting changes.
Training on augumented user 85653 12/50 current_auc = 0.8400000000000001
User 85653 AUC after training: 0.8400000000000001
User 85653 does not improve AUC. Reverting changes.
Training on augumented user 113578 13/50 current_auc = 0.8400000000000001
User 113578 AUC after training: 0.8400000000000001
User 113578 does not improve AUC. Reverting changes.
Training on augumented user 35659 14/50 current_auc = 0.8400000000000001
User 35659 AUC after training: 0.8400000000000001
User 35659 does not improve AUC. Reverting changes.
Training on augumented user 119420 15/50 current_auc = 0.8400000000000001
User 119420 AUC after training: 0.8480000000000001
User 119420 improves AUC. Keeping the model.
Training on augumented user 101482 16/50 current_auc = 0.8480000000000001
User 101482 AUC after training: 0.8400000000000001
User 101482 does not improve AUC. Reverting changes.
Training on augumented user 103902 17/50 current_auc = 0.8480000000000001
User 103902 AUC after training: 0.8480000000000001
User 103902 does not improve AUC. Reverting changes.
Training on augumented user 65183 18/50 current_auc = 0.8480000000000001
User 65183 AUC after training: 0.8400000000000001
User 65183 does not improve AUC. Reverting changes.
Training on augumented user 56733 19/50 current_auc = 0.8480000000000001
User 56733 AUC after training: 0.8400000000000001
User 56733 does not improve AUC. Reverting changes.
Training on augumented user 34724 20/50 current_auc = 0.8480000000000001
User 34724 AUC after training: 0.8480000000000001
User 34724 does not improve AUC. Reverting changes.
Training on augumented user 4327 21/50 current_auc = 0.8480000000000001
User 4327 AUC after training: 0.8400000000000001
User 4327 does not improve AUC. Reverting changes.
Training on augumented user 24823 22/50 current_auc = 0.8480000000000001
User 24823 AUC after training: 0.8400000000000001
User 24823 does not improve AUC. Reverting changes.
Training on augumented user 133254 23/50 current_auc = 0.8480000000000001
User 133254 AUC after training: 0.8320000000000001
User 133254 does not improve AUC. Reverting changes.
Training on augumented user 35042 24/50 current_auc = 0.8480000000000001
User 35042 AUC after training: 0.8400000000000001
User 35042 does not improve AUC. Reverting changes.
Training on augumented user 19943 25/50 current_auc = 0.8480000000000001
User 19943 AUC after training: 0.8480000000000001
User 19943 does not improve AUC. Reverting changes.
Training on augumented user 93891 26/50 current_auc = 0.8480000000000001
User 93891 AUC after training: 0.8480000000000001
User 93891 does not improve AUC. Reverting changes.
Training on augumented user 44185 27/50 current_auc = 0.8480000000000001
User 44185 AUC after training: 0.8320000000000001
User 44185 does not improve AUC. Reverting changes.
Training on augumented user 29216 28/50 current_auc = 0.8480000000000001
User 29216 AUC after training: 0.8480000000000001
User 29216 does not improve AUC. Reverting changes.
Training on augumented user 88979 29/50 current_auc = 0.8480000000000001
User 88979 AUC after training: 0.8480000000000001
User 88979 does not improve AUC. Reverting changes.
Training on augumented user 2352 30/50 current_auc = 0.8480000000000001
User 2352 AUC after training: 0.8240000000000001
User 2352 does not improve AUC. Reverting changes.
Training on augumented user 111244 31/50 current_auc = 0.8480000000000001
User 111244 AUC after training: 0.8400000000000001
User 111244 does not improve AUC. Reverting changes.
Training on augumented user 3756 32/50 current_auc = 0.8480000000000001
User 3756 AUC after training: 0.8480000000000001
User 3756 does not improve AUC. Reverting changes.
Training on augumented user 111896 33/50 current_auc = 0.8480000000000001
User 111896 AUC after training: 0.8320000000000001
User 111896 does not improve AUC. Reverting changes.
Training on augumented user 99235 34/50 current_auc = 0.8480000000000001
User 99235 AUC after training: 0.8400000000000001
User 99235 does not improve AUC. Reverting changes.
Training on augumented user 119894 35/50 current_auc = 0.8480000000000001
User 119894 AUC after training: 0.8400000000000001
User 119894 does not improve AUC. Reverting changes.
Training on augumented user 122720 36/50 current_auc = 0.8480000000000001
User 122720 AUC after training: 0.8400000000000001
User 122720 does not improve AUC. Reverting changes.
Training on augumented user 93103 37/50 current_auc = 0.8480000000000001
User 93103 AUC after training: 0.8480000000000001
User 93103 does not improve AUC. Reverting changes.
Training on augumented user 60449 38/50 current_auc = 0.8480000000000001
User 60449 AUC after training: 0.8400000000000001
User 60449 does not improve AUC. Reverting changes.
Training on augumented user 128705 39/50 current_auc = 0.8480000000000001
User 128705 AUC after training: 0.8480000000000001
User 128705 does not improve AUC. Reverting changes.
Training on augumented user 124051 40/50 current_auc = 0.8480000000000001
User 124051 AUC after training: 0.8480000000000001
User 124051 does not improve AUC. Reverting changes.
Training on augumented user 2607 41/50 current_auc = 0.8480000000000001
User 2607 AUC after training: 0.8480000000000001
User 2607 does not improve AUC. Reverting changes.
Training on augumented user 3604 42/50 current_auc = 0.8480000000000001
User 3604 AUC after training: 0.8400000000000001
User 3604 does not improve AUC. Reverting changes.
Training on augumented user 108657 43/50 current_auc = 0.8480000000000001
User 108657 AUC after training: 0.8480000000000001
User 108657 does not improve AUC. Reverting changes.
Training on augumented user 114295 44/50 current_auc = 0.8480000000000001
User 114295 AUC after training: 0.8400000000000001
User 114295 does not improve AUC. Reverting changes.
Training on augumented user 80724 45/50 current_auc = 0.8480000000000001
User 80724 AUC after training: 0.8400000000000001
User 80724 does not improve AUC. Reverting changes.
Training on augumented user 91921 46/50 current_auc = 0.8480000000000001
User 91921 AUC after training: 0.8400000000000001
User 91921 does not improve AUC. Reverting changes.
Training on augumented user 131122 47/50 current_auc = 0.8480000000000001
User 131122 AUC after training: 0.8400000000000001
User 131122 does not improve AUC. Reverting changes.
Training on augumented user 67789 48/50 current_auc = 0.8480000000000001
User 67789 AUC after training: 0.8400000000000001
User 67789 does not improve AUC. Reverting changes.
Training on augumented user 61309 49/50 current_auc = 0.8480000000000001
User 61309 AUC after training: 0.8480000000000001
User 61309 does not improve AUC. Reverting changes.
[2024-12-02 18:42:46.959124] start test user 72078 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:47.550543] start test user 72078 120/568 recall augumented users by random, augumented_users = [108537, 44259, 61353, 6902, 76131, 100181, 52149, 78541, 112751, 137744, 33643, 73005, 28127, 30731, 63207, 71057, 110587, 130916, 113606, 104147, 19038, 127670, 69284, 102727, 110721, 16365, 29169, 81171, 45019, 57283, 85257, 49529, 117679, 104710, 29229, 60799, 87359, 88446, 136309, 29439, 24752, 19078, 40075, 110540, 95117, 11747, 117570, 41216, 29224, 114157]
[2024-12-02 18:42:47.567722] user = 72078 Cloud 120/568
[2024-12-02 18:42:47.578622] user = 72078 Local 120/568
[2024-12-02 18:42:47.616697] user = 72078 Local+ 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:49.997214] user = 72078 MPDA- 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4920634920634921
Training on augumented user 108537 0/50 current_auc = 0.4920634920634921
User 108537 AUC after training: 0.4920634920634921
User 108537 does not improve AUC. Reverting changes.
Training on augumented user 44259 1/50 current_auc = 0.4920634920634921
User 44259 AUC after training: 0.4920634920634921
User 44259 does not improve AUC. Reverting changes.
Training on augumented user 61353 2/50 current_auc = 0.4920634920634921
User 61353 AUC after training: 0.4920634920634921
User 61353 does not improve AUC. Reverting changes.
Training on augumented user 6902 3/50 current_auc = 0.4920634920634921
User 6902 AUC after training: 0.4920634920634921
User 6902 does not improve AUC. Reverting changes.
Training on augumented user 76131 4/50 current_auc = 0.4920634920634921
User 76131 AUC after training: 0.4920634920634921
User 76131 does not improve AUC. Reverting changes.
Training on augumented user 100181 5/50 current_auc = 0.4920634920634921
User 100181 AUC after training: 0.4920634920634921
User 100181 does not improve AUC. Reverting changes.
Training on augumented user 52149 6/50 current_auc = 0.4920634920634921
User 52149 AUC after training: 0.4920634920634921
User 52149 does not improve AUC. Reverting changes.
Training on augumented user 78541 7/50 current_auc = 0.4920634920634921
User 78541 AUC after training: 0.4920634920634921
User 78541 does not improve AUC. Reverting changes.
Training on augumented user 112751 8/50 current_auc = 0.4920634920634921
User 112751 AUC after training: 0.4920634920634921
User 112751 does not improve AUC. Reverting changes.
Training on augumented user 137744 9/50 current_auc = 0.4920634920634921
User 137744 AUC after training: 0.4841269841269842
User 137744 does not improve AUC. Reverting changes.
Training on augumented user 33643 10/50 current_auc = 0.4920634920634921
User 33643 AUC after training: 0.4761904761904762
User 33643 does not improve AUC. Reverting changes.
Training on augumented user 73005 11/50 current_auc = 0.4920634920634921
User 73005 AUC after training: 0.4920634920634921
User 73005 does not improve AUC. Reverting changes.
Training on augumented user 28127 12/50 current_auc = 0.4920634920634921
User 28127 AUC after training: 0.4841269841269842
User 28127 does not improve AUC. Reverting changes.
Training on augumented user 30731 13/50 current_auc = 0.4920634920634921
User 30731 AUC after training: 0.4920634920634921
User 30731 does not improve AUC. Reverting changes.
Training on augumented user 63207 14/50 current_auc = 0.4920634920634921
User 63207 AUC after training: 0.4920634920634921
User 63207 does not improve AUC. Reverting changes.
Training on augumented user 71057 15/50 current_auc = 0.4920634920634921
User 71057 AUC after training: 0.46031746031746035
User 71057 does not improve AUC. Reverting changes.
Training on augumented user 110587 16/50 current_auc = 0.4920634920634921
User 110587 AUC after training: 0.4920634920634921
User 110587 does not improve AUC. Reverting changes.
Training on augumented user 130916 17/50 current_auc = 0.4920634920634921
User 130916 AUC after training: 0.46031746031746035
User 130916 does not improve AUC. Reverting changes.
Training on augumented user 113606 18/50 current_auc = 0.4920634920634921
User 113606 AUC after training: 0.4841269841269842
User 113606 does not improve AUC. Reverting changes.
Training on augumented user 104147 19/50 current_auc = 0.4920634920634921
User 104147 AUC after training: 0.4920634920634921
User 104147 does not improve AUC. Reverting changes.
Training on augumented user 19038 20/50 current_auc = 0.4920634920634921
User 19038 AUC after training: 0.4920634920634921
User 19038 does not improve AUC. Reverting changes.
Training on augumented user 127670 21/50 current_auc = 0.4920634920634921
User 127670 AUC after training: 0.4920634920634921
User 127670 does not improve AUC. Reverting changes.
Training on augumented user 69284 22/50 current_auc = 0.4920634920634921
User 69284 AUC after training: 0.4920634920634921
User 69284 does not improve AUC. Reverting changes.
Training on augumented user 102727 23/50 current_auc = 0.4920634920634921
User 102727 AUC after training: 0.4841269841269842
User 102727 does not improve AUC. Reverting changes.
Training on augumented user 110721 24/50 current_auc = 0.4920634920634921
User 110721 AUC after training: 0.4841269841269842
User 110721 does not improve AUC. Reverting changes.
Training on augumented user 16365 25/50 current_auc = 0.4920634920634921
User 16365 AUC after training: 0.4920634920634921
User 16365 does not improve AUC. Reverting changes.
Training on augumented user 29169 26/50 current_auc = 0.4920634920634921
User 29169 AUC after training: 0.4920634920634921
User 29169 does not improve AUC. Reverting changes.
Training on augumented user 81171 27/50 current_auc = 0.4920634920634921
User 81171 AUC after training: 0.4920634920634921
User 81171 does not improve AUC. Reverting changes.
Training on augumented user 45019 28/50 current_auc = 0.4920634920634921
User 45019 AUC after training: 0.4920634920634921
User 45019 does not improve AUC. Reverting changes.
Training on augumented user 57283 29/50 current_auc = 0.4920634920634921
User 57283 AUC after training: 0.4920634920634921
User 57283 does not improve AUC. Reverting changes.
Training on augumented user 85257 30/50 current_auc = 0.4920634920634921
User 85257 AUC after training: 0.4920634920634921
User 85257 does not improve AUC. Reverting changes.
Training on augumented user 49529 31/50 current_auc = 0.4920634920634921
User 49529 AUC after training: 0.4920634920634921
User 49529 does not improve AUC. Reverting changes.
Training on augumented user 117679 32/50 current_auc = 0.4920634920634921
User 117679 AUC after training: 0.4761904761904762
User 117679 does not improve AUC. Reverting changes.
Training on augumented user 104710 33/50 current_auc = 0.4920634920634921
User 104710 AUC after training: 0.4920634920634921
User 104710 does not improve AUC. Reverting changes.
Training on augumented user 29229 34/50 current_auc = 0.4920634920634921
User 29229 AUC after training: 0.46825396825396826
User 29229 does not improve AUC. Reverting changes.
Training on augumented user 60799 35/50 current_auc = 0.4920634920634921
User 60799 AUC after training: 0.4920634920634921
User 60799 does not improve AUC. Reverting changes.
Training on augumented user 87359 36/50 current_auc = 0.4920634920634921
User 87359 AUC after training: 0.4920634920634921
User 87359 does not improve AUC. Reverting changes.
Training on augumented user 88446 37/50 current_auc = 0.4920634920634921
User 88446 AUC after training: 0.4920634920634921
User 88446 does not improve AUC. Reverting changes.
Training on augumented user 136309 38/50 current_auc = 0.4920634920634921
User 136309 AUC after training: 0.4920634920634921
User 136309 does not improve AUC. Reverting changes.
Training on augumented user 29439 39/50 current_auc = 0.4920634920634921
User 29439 AUC after training: 0.4920634920634921
User 29439 does not improve AUC. Reverting changes.
Training on augumented user 24752 40/50 current_auc = 0.4920634920634921
User 24752 AUC after training: 0.4920634920634921
User 24752 does not improve AUC. Reverting changes.
Training on augumented user 19078 41/50 current_auc = 0.4920634920634921
User 19078 AUC after training: 0.4920634920634921
User 19078 does not improve AUC. Reverting changes.
Training on augumented user 40075 42/50 current_auc = 0.4920634920634921
User 40075 AUC after training: 0.46031746031746035
User 40075 does not improve AUC. Reverting changes.
Training on augumented user 110540 43/50 current_auc = 0.4920634920634921
User 110540 AUC after training: 0.4920634920634921
User 110540 does not improve AUC. Reverting changes.
Training on augumented user 95117 44/50 current_auc = 0.4920634920634921
User 95117 AUC after training: 0.4920634920634921
User 95117 does not improve AUC. Reverting changes.
Training on augumented user 11747 45/50 current_auc = 0.4920634920634921
User 11747 AUC after training: 0.5079365079365079
User 11747 improves AUC. Keeping the model.
Training on augumented user 117570 46/50 current_auc = 0.5079365079365079
User 117570 AUC after training: 0.5079365079365079
User 117570 does not improve AUC. Reverting changes.
Training on augumented user 41216 47/50 current_auc = 0.5079365079365079
User 41216 AUC after training: 0.4920634920634921
User 41216 does not improve AUC. Reverting changes.
Training on augumented user 29224 48/50 current_auc = 0.5079365079365079
User 29224 AUC after training: 0.5079365079365079
User 29224 does not improve AUC. Reverting changes.
Training on augumented user 114157 49/50 current_auc = 0.5079365079365079
User 114157 AUC after training: 0.4920634920634921
User 114157 does not improve AUC. Reverting changes.
[2024-12-02 18:43:15.945454] start test user 72167 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:16.400666] start test user 72167 121/568 recall augumented users by random, augumented_users = [30035, 128808, 97873, 20975, 40317, 109784, 51220, 124202, 90013, 34228, 47675, 30392, 63092, 132156, 25641, 27613, 103517, 55778, 35720, 43090, 75568, 102404, 73453, 23329, 73, 127456, 26578, 55411, 97737, 5939, 118466, 158, 128173, 45329, 47307, 19121, 59350, 12924, 136334, 1564, 72193, 84408, 27140, 69425, 67200, 21404, 55149, 86648, 70039, 78662]
[2024-12-02 18:43:16.417356] user = 72167 Cloud 121/568
[2024-12-02 18:43:16.432521] user = 72167 Local 121/568
[2024-12-02 18:43:16.496134] user = 72167 Local+ 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:18.161577] user = 72167 MPDA- 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5825396825396826
Training on augumented user 30035 0/50 current_auc = 0.5825396825396826
User 30035 AUC after training: 0.5825396825396826
User 30035 does not improve AUC. Reverting changes.
Training on augumented user 128808 1/50 current_auc = 0.5825396825396826
User 128808 AUC after training: 0.582936507936508
User 128808 improves AUC. Keeping the model.
Training on augumented user 97873 2/50 current_auc = 0.582936507936508
User 97873 AUC after training: 0.582936507936508
User 97873 does not improve AUC. Reverting changes.
Training on augumented user 20975 3/50 current_auc = 0.582936507936508
User 20975 AUC after training: 0.5825396825396826
User 20975 does not improve AUC. Reverting changes.
Training on augumented user 40317 4/50 current_auc = 0.582936507936508
User 40317 AUC after training: 0.5825396825396826
User 40317 does not improve AUC. Reverting changes.
Training on augumented user 109784 5/50 current_auc = 0.582936507936508
User 109784 AUC after training: 0.5817460317460318
User 109784 does not improve AUC. Reverting changes.
Training on augumented user 51220 6/50 current_auc = 0.582936507936508
User 51220 AUC after training: 0.5825396825396826
User 51220 does not improve AUC. Reverting changes.
Training on augumented user 124202 7/50 current_auc = 0.582936507936508
User 124202 AUC after training: 0.5833333333333334
User 124202 improves AUC. Keeping the model.
Training on augumented user 90013 8/50 current_auc = 0.5833333333333334
User 90013 AUC after training: 0.5829365079365079
User 90013 does not improve AUC. Reverting changes.
Training on augumented user 34228 9/50 current_auc = 0.5833333333333334
User 34228 AUC after training: 0.5825396825396825
User 34228 does not improve AUC. Reverting changes.
Training on augumented user 47675 10/50 current_auc = 0.5833333333333334
User 47675 AUC after training: 0.5833333333333333
User 47675 does not improve AUC. Reverting changes.
Training on augumented user 30392 11/50 current_auc = 0.5833333333333334
User 30392 AUC after training: 0.5837301587301588
User 30392 improves AUC. Keeping the model.
Training on augumented user 63092 12/50 current_auc = 0.5837301587301588
User 63092 AUC after training: 0.5837301587301588
User 63092 does not improve AUC. Reverting changes.
Training on augumented user 132156 13/50 current_auc = 0.5837301587301588
User 132156 AUC after training: 0.5821428571428572
User 132156 does not improve AUC. Reverting changes.
Training on augumented user 25641 14/50 current_auc = 0.5837301587301588
User 25641 AUC after training: 0.5825396825396825
User 25641 does not improve AUC. Reverting changes.
Training on augumented user 27613 15/50 current_auc = 0.5837301587301588
User 27613 AUC after training: 0.5833333333333333
User 27613 does not improve AUC. Reverting changes.
Training on augumented user 103517 16/50 current_auc = 0.5837301587301588
User 103517 AUC after training: 0.582936507936508
User 103517 does not improve AUC. Reverting changes.
Training on augumented user 55778 17/50 current_auc = 0.5837301587301588
User 55778 AUC after training: 0.5825396825396825
User 55778 does not improve AUC. Reverting changes.
Training on augumented user 35720 18/50 current_auc = 0.5837301587301588
User 35720 AUC after training: 0.5841269841269842
User 35720 improves AUC. Keeping the model.
Training on augumented user 43090 19/50 current_auc = 0.5841269841269842
User 43090 AUC after training: 0.5845238095238096
User 43090 improves AUC. Keeping the model.
Training on augumented user 75568 20/50 current_auc = 0.5845238095238096
User 75568 AUC after training: 0.5841269841269842
User 75568 does not improve AUC. Reverting changes.
Training on augumented user 102404 21/50 current_auc = 0.5845238095238096
User 102404 AUC after training: 0.5841269841269842
User 102404 does not improve AUC. Reverting changes.
Training on augumented user 73453 22/50 current_auc = 0.5845238095238096
User 73453 AUC after training: 0.584126984126984
User 73453 does not improve AUC. Reverting changes.
Training on augumented user 23329 23/50 current_auc = 0.5845238095238096
User 23329 AUC after training: 0.5841269841269842
User 23329 does not improve AUC. Reverting changes.
Training on augumented user 73 24/50 current_auc = 0.5845238095238096
User 73 AUC after training: 0.5833333333333334
User 73 does not improve AUC. Reverting changes.
Training on augumented user 127456 25/50 current_auc = 0.5845238095238096
User 127456 AUC after training: 0.584920634920635
User 127456 improves AUC. Keeping the model.
Training on augumented user 26578 26/50 current_auc = 0.584920634920635
User 26578 AUC after training: 0.584920634920635
User 26578 does not improve AUC. Reverting changes.
Training on augumented user 55411 27/50 current_auc = 0.584920634920635
User 55411 AUC after training: 0.5841269841269842
User 55411 does not improve AUC. Reverting changes.
Training on augumented user 97737 28/50 current_auc = 0.584920634920635
User 97737 AUC after training: 0.5845238095238096
User 97737 does not improve AUC. Reverting changes.
Training on augumented user 5939 29/50 current_auc = 0.584920634920635
User 5939 AUC after training: 0.5845238095238096
User 5939 does not improve AUC. Reverting changes.
Training on augumented user 118466 30/50 current_auc = 0.584920634920635
User 118466 AUC after training: 0.5837301587301588
User 118466 does not improve AUC. Reverting changes.
Training on augumented user 158 31/50 current_auc = 0.584920634920635
User 158 AUC after training: 0.5821428571428572
User 158 does not improve AUC. Reverting changes.
Training on augumented user 128173 32/50 current_auc = 0.584920634920635
User 128173 AUC after training: 0.5831349206349207
User 128173 does not improve AUC. Reverting changes.
Training on augumented user 45329 33/50 current_auc = 0.584920634920635
User 45329 AUC after training: 0.5841269841269842
User 45329 does not improve AUC. Reverting changes.
Training on augumented user 47307 34/50 current_auc = 0.584920634920635
User 47307 AUC after training: 0.5841269841269842
User 47307 does not improve AUC. Reverting changes.
Training on augumented user 19121 35/50 current_auc = 0.584920634920635
User 19121 AUC after training: 0.5845238095238096
User 19121 does not improve AUC. Reverting changes.
Training on augumented user 59350 36/50 current_auc = 0.584920634920635
User 59350 AUC after training: 0.5845238095238096
User 59350 does not improve AUC. Reverting changes.
Training on augumented user 12924 37/50 current_auc = 0.584920634920635
User 12924 AUC after training: 0.5841269841269842
User 12924 does not improve AUC. Reverting changes.
Training on augumented user 136334 38/50 current_auc = 0.584920634920635
User 136334 AUC after training: 0.5841269841269842
User 136334 does not improve AUC. Reverting changes.
Training on augumented user 1564 39/50 current_auc = 0.584920634920635
User 1564 AUC after training: 0.5833333333333334
User 1564 does not improve AUC. Reverting changes.
Training on augumented user 72193 40/50 current_auc = 0.584920634920635
User 72193 AUC after training: 0.5841269841269842
User 72193 does not improve AUC. Reverting changes.
Training on augumented user 84408 41/50 current_auc = 0.584920634920635
User 84408 AUC after training: 0.582936507936508
User 84408 does not improve AUC. Reverting changes.
Training on augumented user 27140 42/50 current_auc = 0.584920634920635
User 27140 AUC after training: 0.5841269841269842
User 27140 does not improve AUC. Reverting changes.
Training on augumented user 69425 43/50 current_auc = 0.584920634920635
User 69425 AUC after training: 0.5841269841269842
User 69425 does not improve AUC. Reverting changes.
Training on augumented user 67200 44/50 current_auc = 0.584920634920635
User 67200 AUC after training: 0.5841269841269842
User 67200 does not improve AUC. Reverting changes.
Training on augumented user 21404 45/50 current_auc = 0.584920634920635
User 21404 AUC after training: 0.5845238095238094
User 21404 does not improve AUC. Reverting changes.
Training on augumented user 55149 46/50 current_auc = 0.584920634920635
User 55149 AUC after training: 0.584920634920635
User 55149 does not improve AUC. Reverting changes.
Training on augumented user 86648 47/50 current_auc = 0.584920634920635
User 86648 AUC after training: 0.5813492063492064
User 86648 does not improve AUC. Reverting changes.
Training on augumented user 70039 48/50 current_auc = 0.584920634920635
User 70039 AUC after training: 0.5837301587301588
User 70039 does not improve AUC. Reverting changes.
Training on augumented user 78662 49/50 current_auc = 0.584920634920635
User 78662 AUC after training: 0.5841269841269842
User 78662 does not improve AUC. Reverting changes.
[2024-12-02 18:43:45.049383] start test user 72190 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:45.519017] start test user 72190 122/568 recall augumented users by random, augumented_users = [25147, 86532, 9550, 543, 119570, 21023, 120069, 18702, 70918, 102522, 134572, 75605, 104817, 1682, 30417, 62100, 23826, 7436, 94313, 61611, 15678, 97198, 88252, 78581, 12501, 129618, 100132, 26491, 137296, 41050, 69180, 10395, 108980, 125774, 105754, 86736, 62491, 74429, 76807, 96392, 20458, 107818, 69436, 43012, 23464, 51945, 94993, 86377, 97895, 133255]
[2024-12-02 18:43:45.533378] user = 72190 Cloud 122/568
[2024-12-02 18:43:45.553230] user = 72190 Local 122/568
[2024-12-02 18:43:45.573528] user = 72190 Local+ 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:48.216871] user = 72190 MPDA- 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 25147 0/50 current_auc = 1.0
User 25147 AUC after training: 1.0
User 25147 does not improve AUC. Reverting changes.
Training on augumented user 86532 1/50 current_auc = 1.0
User 86532 AUC after training: 1.0
User 86532 does not improve AUC. Reverting changes.
Training on augumented user 9550 2/50 current_auc = 1.0
User 9550 AUC after training: 1.0
User 9550 does not improve AUC. Reverting changes.
Training on augumented user 543 3/50 current_auc = 1.0
User 543 AUC after training: 1.0
User 543 does not improve AUC. Reverting changes.
Training on augumented user 119570 4/50 current_auc = 1.0
User 119570 AUC after training: 1.0
User 119570 does not improve AUC. Reverting changes.
Training on augumented user 21023 5/50 current_auc = 1.0
User 21023 AUC after training: 1.0
User 21023 does not improve AUC. Reverting changes.
Training on augumented user 120069 6/50 current_auc = 1.0
User 120069 AUC after training: 1.0
User 120069 does not improve AUC. Reverting changes.
Training on augumented user 18702 7/50 current_auc = 1.0
User 18702 AUC after training: 1.0
User 18702 does not improve AUC. Reverting changes.
Training on augumented user 70918 8/50 current_auc = 1.0
User 70918 AUC after training: 1.0
User 70918 does not improve AUC. Reverting changes.
Training on augumented user 102522 9/50 current_auc = 1.0
User 102522 AUC after training: 1.0
User 102522 does not improve AUC. Reverting changes.
Training on augumented user 134572 10/50 current_auc = 1.0
User 134572 AUC after training: 1.0
User 134572 does not improve AUC. Reverting changes.
Training on augumented user 75605 11/50 current_auc = 1.0
User 75605 AUC after training: 1.0
User 75605 does not improve AUC. Reverting changes.
Training on augumented user 104817 12/50 current_auc = 1.0
User 104817 AUC after training: 1.0
User 104817 does not improve AUC. Reverting changes.
Training on augumented user 1682 13/50 current_auc = 1.0
User 1682 AUC after training: 1.0
User 1682 does not improve AUC. Reverting changes.
Training on augumented user 30417 14/50 current_auc = 1.0
User 30417 AUC after training: 1.0
User 30417 does not improve AUC. Reverting changes.
Training on augumented user 62100 15/50 current_auc = 1.0
User 62100 AUC after training: 1.0
User 62100 does not improve AUC. Reverting changes.
Training on augumented user 23826 16/50 current_auc = 1.0
User 23826 AUC after training: 1.0
User 23826 does not improve AUC. Reverting changes.
Training on augumented user 7436 17/50 current_auc = 1.0
User 7436 AUC after training: 1.0
User 7436 does not improve AUC. Reverting changes.
Training on augumented user 94313 18/50 current_auc = 1.0
User 94313 AUC after training: 1.0
User 94313 does not improve AUC. Reverting changes.
Training on augumented user 61611 19/50 current_auc = 1.0
User 61611 AUC after training: 1.0
User 61611 does not improve AUC. Reverting changes.
Training on augumented user 15678 20/50 current_auc = 1.0
User 15678 AUC after training: 1.0
User 15678 does not improve AUC. Reverting changes.
Training on augumented user 97198 21/50 current_auc = 1.0
User 97198 AUC after training: 1.0
User 97198 does not improve AUC. Reverting changes.
Training on augumented user 88252 22/50 current_auc = 1.0
User 88252 AUC after training: 1.0
User 88252 does not improve AUC. Reverting changes.
Training on augumented user 78581 23/50 current_auc = 1.0
User 78581 AUC after training: 1.0
User 78581 does not improve AUC. Reverting changes.
Training on augumented user 12501 24/50 current_auc = 1.0
User 12501 AUC after training: 1.0
User 12501 does not improve AUC. Reverting changes.
Training on augumented user 129618 25/50 current_auc = 1.0
User 129618 AUC after training: 1.0
User 129618 does not improve AUC. Reverting changes.
Training on augumented user 100132 26/50 current_auc = 1.0
User 100132 AUC after training: 1.0
User 100132 does not improve AUC. Reverting changes.
Training on augumented user 26491 27/50 current_auc = 1.0
User 26491 AUC after training: 1.0
User 26491 does not improve AUC. Reverting changes.
Training on augumented user 137296 28/50 current_auc = 1.0
User 137296 AUC after training: 1.0
User 137296 does not improve AUC. Reverting changes.
Training on augumented user 41050 29/50 current_auc = 1.0
User 41050 AUC after training: 1.0
User 41050 does not improve AUC. Reverting changes.
Training on augumented user 69180 30/50 current_auc = 1.0
User 69180 AUC after training: 1.0
User 69180 does not improve AUC. Reverting changes.
Training on augumented user 10395 31/50 current_auc = 1.0
User 10395 AUC after training: 1.0
User 10395 does not improve AUC. Reverting changes.
Training on augumented user 108980 32/50 current_auc = 1.0
User 108980 AUC after training: 1.0
User 108980 does not improve AUC. Reverting changes.
Training on augumented user 125774 33/50 current_auc = 1.0
User 125774 AUC after training: 1.0
User 125774 does not improve AUC. Reverting changes.
Training on augumented user 105754 34/50 current_auc = 1.0
User 105754 AUC after training: 1.0
User 105754 does not improve AUC. Reverting changes.
Training on augumented user 86736 35/50 current_auc = 1.0
User 86736 AUC after training: 1.0
User 86736 does not improve AUC. Reverting changes.
Training on augumented user 62491 36/50 current_auc = 1.0
User 62491 AUC after training: 1.0
User 62491 does not improve AUC. Reverting changes.
Training on augumented user 74429 37/50 current_auc = 1.0
User 74429 AUC after training: 1.0
User 74429 does not improve AUC. Reverting changes.
Training on augumented user 76807 38/50 current_auc = 1.0
User 76807 AUC after training: 1.0
User 76807 does not improve AUC. Reverting changes.
Training on augumented user 96392 39/50 current_auc = 1.0
User 96392 AUC after training: 1.0
User 96392 does not improve AUC. Reverting changes.
Training on augumented user 20458 40/50 current_auc = 1.0
User 20458 AUC after training: 1.0
User 20458 does not improve AUC. Reverting changes.
Training on augumented user 107818 41/50 current_auc = 1.0
User 107818 AUC after training: 1.0
User 107818 does not improve AUC. Reverting changes.
Training on augumented user 69436 42/50 current_auc = 1.0
User 69436 AUC after training: 1.0
User 69436 does not improve AUC. Reverting changes.
Training on augumented user 43012 43/50 current_auc = 1.0
User 43012 AUC after training: 1.0
User 43012 does not improve AUC. Reverting changes.
Training on augumented user 23464 44/50 current_auc = 1.0
User 23464 AUC after training: 1.0
User 23464 does not improve AUC. Reverting changes.
Training on augumented user 51945 45/50 current_auc = 1.0
User 51945 AUC after training: 1.0
User 51945 does not improve AUC. Reverting changes.
Training on augumented user 94993 46/50 current_auc = 1.0
User 94993 AUC after training: 1.0
User 94993 does not improve AUC. Reverting changes.
Training on augumented user 86377 47/50 current_auc = 1.0
User 86377 AUC after training: 1.0
User 86377 does not improve AUC. Reverting changes.
Training on augumented user 97895 48/50 current_auc = 1.0
User 97895 AUC after training: 1.0
User 97895 does not improve AUC. Reverting changes.
Training on augumented user 133255 49/50 current_auc = 1.0
User 133255 AUC after training: 1.0
User 133255 does not improve AUC. Reverting changes.
[2024-12-02 18:44:16.272410] start test user 72229 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:16.770112] start test user 72229 123/568 recall augumented users by random, augumented_users = [135360, 22048, 4700, 85421, 114117, 81901, 28036, 84927, 66524, 37834, 71793, 113664, 8408, 61798, 77634, 37320, 2182, 116779, 23093, 61313, 38700, 50357, 61840, 49005, 61296, 19019, 94427, 96408, 112017, 59348, 95415, 81458, 75215, 97686, 112899, 88451, 114586, 21972, 83959, 52906, 20814, 3457, 118798, 76449, 117339, 98566, 83962, 32141, 45742, 9900]
[2024-12-02 18:44:16.800667] user = 72229 Cloud 123/568
[2024-12-02 18:44:16.842771] user = 72229 Local 123/568
[2024-12-02 18:44:17.028367] user = 72229 Local+ 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:19.848536] user = 72229 MPDA- 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6840956340956341
Training on augumented user 135360 0/50 current_auc = 0.6840956340956341
User 135360 AUC after training: 0.6834719334719335
User 135360 does not improve AUC. Reverting changes.
Training on augumented user 22048 1/50 current_auc = 0.6840956340956341
User 22048 AUC after training: 0.6840956340956341
User 22048 does not improve AUC. Reverting changes.
Training on augumented user 4700 2/50 current_auc = 0.6840956340956341
User 4700 AUC after training: 0.6835758835758835
User 4700 does not improve AUC. Reverting changes.
Training on augumented user 85421 3/50 current_auc = 0.6840956340956341
User 85421 AUC after training: 0.6838357588357589
User 85421 does not improve AUC. Reverting changes.
Training on augumented user 114117 4/50 current_auc = 0.6840956340956341
User 114117 AUC after training: 0.6838877338877339
User 114117 does not improve AUC. Reverting changes.
Training on augumented user 81901 5/50 current_auc = 0.6840956340956341
User 81901 AUC after training: 0.6841995841995843
User 81901 improves AUC. Keeping the model.
Training on augumented user 28036 6/50 current_auc = 0.6841995841995843
User 28036 AUC after training: 0.6839916839916841
User 28036 does not improve AUC. Reverting changes.
Training on augumented user 84927 7/50 current_auc = 0.6841995841995843
User 84927 AUC after training: 0.6833679833679833
User 84927 does not improve AUC. Reverting changes.
Training on augumented user 66524 8/50 current_auc = 0.6841995841995843
User 66524 AUC after training: 0.6833679833679834
User 66524 does not improve AUC. Reverting changes.
Training on augumented user 37834 9/50 current_auc = 0.6841995841995843
User 37834 AUC after training: 0.6835758835758836
User 37834 does not improve AUC. Reverting changes.
Training on augumented user 71793 10/50 current_auc = 0.6841995841995843
User 71793 AUC after training: 0.6841995841995843
User 71793 does not improve AUC. Reverting changes.
Training on augumented user 113664 11/50 current_auc = 0.6841995841995843
User 113664 AUC after training: 0.6838877338877339
User 113664 does not improve AUC. Reverting changes.
Training on augumented user 8408 12/50 current_auc = 0.6841995841995843
User 8408 AUC after training: 0.683056133056133
User 8408 does not improve AUC. Reverting changes.
Training on augumented user 61798 13/50 current_auc = 0.6841995841995843
User 61798 AUC after training: 0.6840956340956341
User 61798 does not improve AUC. Reverting changes.
Training on augumented user 77634 14/50 current_auc = 0.6841995841995843
User 77634 AUC after training: 0.6840436590436592
User 77634 does not improve AUC. Reverting changes.
Training on augumented user 37320 15/50 current_auc = 0.6841995841995843
User 37320 AUC after training: 0.6839916839916841
User 37320 does not improve AUC. Reverting changes.
Training on augumented user 2182 16/50 current_auc = 0.6841995841995843
User 2182 AUC after training: 0.6833679833679833
User 2182 does not improve AUC. Reverting changes.
Training on augumented user 116779 17/50 current_auc = 0.6841995841995843
User 116779 AUC after training: 0.6838877338877338
User 116779 does not improve AUC. Reverting changes.
Training on augumented user 23093 18/50 current_auc = 0.6841995841995843
User 23093 AUC after training: 0.6834719334719335
User 23093 does not improve AUC. Reverting changes.
Training on augumented user 61313 19/50 current_auc = 0.6841995841995843
User 61313 AUC after training: 0.683160083160083
User 61313 does not improve AUC. Reverting changes.
Training on augumented user 38700 20/50 current_auc = 0.6841995841995843
User 38700 AUC after training: 0.6833679833679834
User 38700 does not improve AUC. Reverting changes.
Training on augumented user 50357 21/50 current_auc = 0.6841995841995843
User 50357 AUC after training: 0.6836798336798338
User 50357 does not improve AUC. Reverting changes.
Training on augumented user 61840 22/50 current_auc = 0.6841995841995843
User 61840 AUC after training: 0.6833679833679833
User 61840 does not improve AUC. Reverting changes.
Training on augumented user 49005 23/50 current_auc = 0.6841995841995843
User 49005 AUC after training: 0.6830561330561331
User 49005 does not improve AUC. Reverting changes.
Training on augumented user 61296 24/50 current_auc = 0.6841995841995843
User 61296 AUC after training: 0.6838877338877339
User 61296 does not improve AUC. Reverting changes.
Training on augumented user 19019 25/50 current_auc = 0.6841995841995843
User 19019 AUC after training: 0.6830561330561331
User 19019 does not improve AUC. Reverting changes.
Training on augumented user 94427 26/50 current_auc = 0.6841995841995843
User 94427 AUC after training: 0.6835758835758836
User 94427 does not improve AUC. Reverting changes.
Training on augumented user 96408 27/50 current_auc = 0.6841995841995843
User 96408 AUC after training: 0.6825363825363826
User 96408 does not improve AUC. Reverting changes.
Training on augumented user 112017 28/50 current_auc = 0.6841995841995843
User 112017 AUC after training: 0.6836798336798338
User 112017 does not improve AUC. Reverting changes.
Training on augumented user 59348 29/50 current_auc = 0.6841995841995843
User 59348 AUC after training: 0.6835758835758835
User 59348 does not improve AUC. Reverting changes.
Training on augumented user 95415 30/50 current_auc = 0.6841995841995843
User 95415 AUC after training: 0.6839916839916841
User 95415 does not improve AUC. Reverting changes.
Training on augumented user 81458 31/50 current_auc = 0.6841995841995843
User 81458 AUC after training: 0.683991683991684
User 81458 does not improve AUC. Reverting changes.
Training on augumented user 75215 32/50 current_auc = 0.6841995841995843
User 75215 AUC after training: 0.6844074844074844
User 75215 improves AUC. Keeping the model.
Training on augumented user 97686 33/50 current_auc = 0.6844074844074844
User 97686 AUC after training: 0.685031185031185
User 97686 improves AUC. Keeping the model.
Training on augumented user 112899 34/50 current_auc = 0.685031185031185
User 112899 AUC after training: 0.6845114345114346
User 112899 does not improve AUC. Reverting changes.
Training on augumented user 88451 35/50 current_auc = 0.685031185031185
User 88451 AUC after training: 0.6847193347193347
User 88451 does not improve AUC. Reverting changes.
Training on augumented user 114586 36/50 current_auc = 0.685031185031185
User 114586 AUC after training: 0.684927234927235
User 114586 does not improve AUC. Reverting changes.
Training on augumented user 21972 37/50 current_auc = 0.685031185031185
User 21972 AUC after training: 0.6848232848232848
User 21972 does not improve AUC. Reverting changes.
Training on augumented user 83959 38/50 current_auc = 0.685031185031185
User 83959 AUC after training: 0.6844074844074844
User 83959 does not improve AUC. Reverting changes.
Training on augumented user 52906 39/50 current_auc = 0.685031185031185
User 52906 AUC after training: 0.6853430353430353
User 52906 improves AUC. Keeping the model.
Training on augumented user 20814 40/50 current_auc = 0.6853430353430353
User 20814 AUC after training: 0.6852390852390853
User 20814 does not improve AUC. Reverting changes.
Training on augumented user 3457 41/50 current_auc = 0.6853430353430353
User 3457 AUC after training: 0.6841995841995843
User 3457 does not improve AUC. Reverting changes.
Training on augumented user 118798 42/50 current_auc = 0.6853430353430353
User 118798 AUC after training: 0.685031185031185
User 118798 does not improve AUC. Reverting changes.
Training on augumented user 76449 43/50 current_auc = 0.6853430353430353
User 76449 AUC after training: 0.6848232848232849
User 76449 does not improve AUC. Reverting changes.
Training on augumented user 117339 44/50 current_auc = 0.6853430353430353
User 117339 AUC after training: 0.6838877338877338
User 117339 does not improve AUC. Reverting changes.
Training on augumented user 98566 45/50 current_auc = 0.6853430353430353
User 98566 AUC after training: 0.6848232848232848
User 98566 does not improve AUC. Reverting changes.
Training on augumented user 83962 46/50 current_auc = 0.6853430353430353
User 83962 AUC after training: 0.6858627858627858
User 83962 improves AUC. Keeping the model.
Training on augumented user 32141 47/50 current_auc = 0.6858627858627858
User 32141 AUC after training: 0.6858627858627859
User 32141 improves AUC. Keeping the model.
Training on augumented user 45742 48/50 current_auc = 0.6858627858627859
User 45742 AUC after training: 0.6856548856548856
User 45742 does not improve AUC. Reverting changes.
Training on augumented user 9900 49/50 current_auc = 0.6858627858627859
User 9900 AUC after training: 0.6856548856548856
User 9900 does not improve AUC. Reverting changes.
[2024-12-02 18:44:51.088620] start test user 72232 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:51.569110] start test user 72232 124/568 recall augumented users by random, augumented_users = [130560, 105998, 123624, 132079, 79542, 130486, 85171, 75990, 20949, 3104, 127281, 131652, 54557, 89476, 56815, 115927, 56434, 24961, 28879, 134297, 67303, 13191, 116835, 81656, 39340, 70243, 68151, 28677, 126833, 90267, 119813, 64374, 68722, 129459, 38113, 115463, 22267, 9286, 109446, 20434, 19389, 101349, 95859, 24975, 65757, 127721, 15621, 74224, 14216, 133931]
[2024-12-02 18:44:51.586151] user = 72232 Cloud 124/568
[2024-12-02 18:44:51.660095] user = 72232 Local 124/568
[2024-12-02 18:44:51.760214] user = 72232 Local+ 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:54.375241] user = 72232 MPDA- 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8128480169439416
Training on augumented user 130560 0/50 current_auc = 0.8128480169439416
User 130560 AUC after training: 0.8126601304956786
User 130560 does not improve AUC. Reverting changes.
Training on augumented user 105998 1/50 current_auc = 0.8128480169439416
User 105998 AUC after training: 0.8135141598059645
User 105998 improves AUC. Keeping the model.
Training on augumented user 123624 2/50 current_auc = 0.8135141598059645
User 123624 AUC after training: 0.81269429166809
User 123624 does not improve AUC. Reverting changes.
Training on augumented user 132079 3/50 current_auc = 0.8135141598059645
User 132079 AUC after training: 0.8125234858060328
User 132079 does not improve AUC. Reverting changes.
Training on augumented user 79542 4/50 current_auc = 0.8135141598059645
User 79542 AUC after training: 0.8131042257370273
User 79542 does not improve AUC. Reverting changes.
Training on augumented user 130486 5/50 current_auc = 0.8135141598059645
User 130486 AUC after training: 0.8146414784955419
User 130486 improves AUC. Keeping the model.
Training on augumented user 85171 6/50 current_auc = 0.8146414784955419
User 85171 AUC after training: 0.8161274894954395
User 85171 improves AUC. Keeping the model.
Training on augumented user 75990 7/50 current_auc = 0.8161274894954395
User 75990 AUC after training: 0.8153759437023878
User 75990 does not improve AUC. Reverting changes.
Training on augumented user 20949 8/50 current_auc = 0.8161274894954395
User 20949 AUC after training: 0.8158883612885595
User 20949 does not improve AUC. Reverting changes.
Training on augumented user 3104 9/50 current_auc = 0.8161274894954395
User 3104 AUC after training: 0.8155809107368566
User 3104 does not improve AUC. Reverting changes.
Training on augumented user 127281 10/50 current_auc = 0.8161274894954395
User 127281 AUC after training: 0.8155809107368566
User 127281 does not improve AUC. Reverting changes.
Training on augumented user 131652 11/50 current_auc = 0.8161274894954395
User 131652 AUC after training: 0.8162982953574967
User 131652 improves AUC. Keeping the model.
Training on augumented user 54557 12/50 current_auc = 0.8162982953574967
User 54557 AUC after training: 0.8159054418747652
User 54557 does not improve AUC. Reverting changes.
Training on augumented user 89476 13/50 current_auc = 0.8162982953574967
User 89476 AUC after training: 0.8145219143921019
User 89476 does not improve AUC. Reverting changes.
Training on augumented user 56815 14/50 current_auc = 0.8162982953574967
User 56815 AUC after training: 0.8152392990127421
User 56815 does not improve AUC. Reverting changes.
Training on augumented user 115927 15/50 current_auc = 0.8162982953574967
User 115927 AUC after training: 0.8164520206333481
User 115927 improves AUC. Keeping the model.
Training on augumented user 56434 16/50 current_auc = 0.8164520206333481
User 56434 AUC after training: 0.8174768558056912
User 56434 improves AUC. Keeping the model.
Training on augumented user 24961 17/50 current_auc = 0.8174768558056912
User 24961 AUC after training: 0.8180917569090971
User 24961 improves AUC. Keeping the model.
Training on augumented user 28879 18/50 current_auc = 0.8180917569090971
User 28879 AUC after training: 0.8160420865644109
User 28879 does not improve AUC. Reverting changes.
Training on augumented user 134297 19/50 current_auc = 0.8180917569090971
User 134297 AUC after training: 0.8186724968400916
User 134297 improves AUC. Keeping the model.
Training on augumented user 67303 20/50 current_auc = 0.8186724968400916
User 67303 AUC after training: 0.815119734909302
User 67303 does not improve AUC. Reverting changes.
Training on augumented user 13191 21/50 current_auc = 0.8186724968400916
User 13191 AUC after training: 0.8184333686332115
User 13191 does not improve AUC. Reverting changes.
Training on augumented user 116835 22/50 current_auc = 0.8186724968400916
User 116835 AUC after training: 0.8197314931848461
User 116835 improves AUC. Keeping the model.
Training on augumented user 81656 23/50 current_auc = 0.8197314931848461
User 81656 AUC after training: 0.8194923649779661
User 81656 does not improve AUC. Reverting changes.
Training on augumented user 39340 24/50 current_auc = 0.8197314931848461
User 39340 AUC after training: 0.8199706213917262
User 39340 improves AUC. Keeping the model.
Training on augumented user 70243 25/50 current_auc = 0.8199706213917262
User 70243 AUC after training: 0.8188603832883544
User 70243 does not improve AUC. Reverting changes.
Training on augumented user 68151 26/50 current_auc = 0.8199706213917262
User 68151 AUC after training: 0.8199706213917262
User 68151 does not improve AUC. Reverting changes.
Training on augumented user 28677 27/50 current_auc = 0.8199706213917262
User 28677 AUC after training: 0.8199022990469034
User 28677 does not improve AUC. Reverting changes.
Training on augumented user 126833 28/50 current_auc = 0.8199706213917262
User 126833 AUC after training: 0.8195265261503775
User 126833 does not improve AUC. Reverting changes.
Training on augumented user 90267 29/50 current_auc = 0.8199706213917262
User 90267 AUC after training: 0.8203122331158406
User 90267 improves AUC. Keeping the model.
Training on augumented user 119813 30/50 current_auc = 0.8203122331158406
User 119813 AUC after training: 0.8200731049089605
User 119813 does not improve AUC. Reverting changes.
Training on augumented user 64374 31/50 current_auc = 0.8203122331158406
User 64374 AUC after training: 0.8198681378744919
User 64374 does not improve AUC. Reverting changes.
Training on augumented user 68722 32/50 current_auc = 0.8203122331158406
User 68722 AUC after training: 0.819253236771086
User 68722 does not improve AUC. Reverting changes.
Training on augumented user 129459 33/50 current_auc = 0.8203122331158406
User 129459 AUC after training: 0.8205513613227206
User 129459 improves AUC. Keeping the model.
Training on augumented user 38113 34/50 current_auc = 0.8205513613227206
User 38113 AUC after training: 0.8201755884261948
User 38113 does not improve AUC. Reverting changes.
Training on augumented user 115463 35/50 current_auc = 0.8205513613227206
User 115463 AUC after training: 0.8209271342192463
User 115463 improves AUC. Keeping the model.
Training on augumented user 22267 36/50 current_auc = 0.8209271342192463
User 22267 AUC after training: 0.8207563283571893
User 22267 does not improve AUC. Reverting changes.
Training on augumented user 9286 37/50 current_auc = 0.8209271342192463
User 9286 AUC after training: 0.8198339767020805
User 9286 does not improve AUC. Reverting changes.
Training on augumented user 109446 38/50 current_auc = 0.8209271342192463
User 109446 AUC after training: 0.8214737129778293
User 109446 improves AUC. Keeping the model.
Training on augumented user 20434 39/50 current_auc = 0.8214737129778293
User 20434 AUC after training: 0.8209271342192465
User 20434 does not improve AUC. Reverting changes.
Training on augumented user 19389 40/50 current_auc = 0.8214737129778293
User 19389 AUC after training: 0.8214907935640351
User 19389 improves AUC. Keeping the model.
Training on augumented user 101349 41/50 current_auc = 0.8214907935640351
User 101349 AUC after training: 0.8211321012537149
User 101349 does not improve AUC. Reverting changes.
Training on augumented user 95859 42/50 current_auc = 0.8214907935640351
User 95859 AUC after training: 0.8233525774604584
User 95859 improves AUC. Keeping the model.
Training on augumented user 24975 43/50 current_auc = 0.8233525774604584
User 24975 AUC after training: 0.8232159327708126
User 24975 does not improve AUC. Reverting changes.
Training on augumented user 65757 44/50 current_auc = 0.8233525774604584
User 65757 AUC after training: 0.8214737129778295
User 65757 does not improve AUC. Reverting changes.
Training on augumented user 127721 45/50 current_auc = 0.8233525774604584
User 127721 AUC after training: 0.8231476104259898
User 127721 does not improve AUC. Reverting changes.
Training on augumented user 15621 46/50 current_auc = 0.8233525774604584
User 15621 AUC after training: 0.8218836470467666
User 15621 does not improve AUC. Reverting changes.
Training on augumented user 74224 47/50 current_auc = 0.8233525774604584
User 74224 AUC after training: 0.8237966727018071
User 74224 improves AUC. Keeping the model.
Training on augumented user 14216 48/50 current_auc = 0.8237966727018071
User 14216 AUC after training: 0.8230622074949612
User 14216 does not improve AUC. Reverting changes.
Training on augumented user 133931 49/50 current_auc = 0.8237966727018071
User 133931 AUC after training: 0.8233867386328699
User 133931 does not improve AUC. Reverting changes.
[2024-12-02 18:45:22.776438] start test user 72237 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:23.217431] start test user 72237 125/568 recall augumented users by random, augumented_users = [8866, 77449, 128947, 118289, 70716, 118785, 75485, 52087, 17530, 106407, 75219, 95881, 7816, 120724, 35897, 129292, 95546, 128231, 36525, 106751, 42510, 123029, 38856, 73445, 115583, 102706, 60679, 43797, 129031, 65950, 132244, 14545, 122935, 4857, 58779, 85312, 18477, 84161, 84490, 66197, 84666, 5206, 66364, 26895, 86849, 21264, 16622, 133298, 26166, 48597]
[2024-12-02 18:45:23.234496] user = 72237 Cloud 125/568
[2024-12-02 18:45:23.278249] user = 72237 Local 125/568
[2024-12-02 18:45:23.372530] user = 72237 Local+ 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:26.055439] user = 72237 MPDA- 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6006819517930628
Training on augumented user 8866 0/50 current_auc = 0.6006819517930628
User 8866 AUC after training: 0.6009876543209876
User 8866 improves AUC. Keeping the model.
Training on augumented user 77449 1/50 current_auc = 0.6009876543209876
User 77449 AUC after training: 0.6007995296884185
User 77449 does not improve AUC. Reverting changes.
Training on augumented user 128947 2/50 current_auc = 0.6009876543209876
User 128947 AUC after training: 0.6006584362139918
User 128947 does not improve AUC. Reverting changes.
Training on augumented user 118289 3/50 current_auc = 0.6009876543209876
User 118289 AUC after training: 0.600517342739565
User 118289 does not improve AUC. Reverting changes.
Training on augumented user 70716 4/50 current_auc = 0.6009876543209876
User 70716 AUC after training: 0.6009406231628455
User 70716 does not improve AUC. Reverting changes.
Training on augumented user 118785 5/50 current_auc = 0.6009876543209876
User 118785 AUC after training: 0.6008465608465609
User 118785 does not improve AUC. Reverting changes.
Training on augumented user 75485 6/50 current_auc = 0.6009876543209876
User 75485 AUC after training: 0.6006114050558494
User 75485 does not improve AUC. Reverting changes.
Training on augumented user 52087 7/50 current_auc = 0.6009876543209876
User 52087 AUC after training: 0.6008935920047032
User 52087 does not improve AUC. Reverting changes.
Training on augumented user 17530 8/50 current_auc = 0.6009876543209876
User 17530 AUC after training: 0.6009406231628454
User 17530 does not improve AUC. Reverting changes.
Training on augumented user 106407 9/50 current_auc = 0.6009876543209876
User 106407 AUC after training: 0.6006937095825985
User 106407 does not improve AUC. Reverting changes.
Training on augumented user 75219 10/50 current_auc = 0.6009876543209876
User 75219 AUC after training: 0.6007524985302763
User 75219 does not improve AUC. Reverting changes.
Training on augumented user 95881 11/50 current_auc = 0.6009876543209876
User 95881 AUC after training: 0.6010817166372722
User 95881 improves AUC. Keeping the model.
Training on augumented user 7816 12/50 current_auc = 0.6010817166372722
User 7816 AUC after training: 0.6009171075837743
User 7816 does not improve AUC. Reverting changes.
Training on augumented user 120724 13/50 current_auc = 0.6010817166372722
User 120724 AUC after training: 0.6007995296884185
User 120724 does not improve AUC. Reverting changes.
Training on augumented user 35897 14/50 current_auc = 0.6010817166372722
User 35897 AUC after training: 0.6006584362139918
User 35897 does not improve AUC. Reverting changes.
Training on augumented user 129292 15/50 current_auc = 0.6010817166372722
User 129292 AUC after training: 0.6008935920047032
User 129292 does not improve AUC. Reverting changes.
Training on augumented user 95546 16/50 current_auc = 0.6010817166372722
User 95546 AUC after training: 0.6006466784244562
User 95546 does not improve AUC. Reverting changes.
Training on augumented user 128231 17/50 current_auc = 0.6010817166372722
User 128231 AUC after training: 0.6008230452674896
User 128231 does not improve AUC. Reverting changes.
Training on augumented user 36525 18/50 current_auc = 0.6010817166372722
User 36525 AUC after training: 0.6007995296884185
User 36525 does not improve AUC. Reverting changes.
Training on augumented user 106751 19/50 current_auc = 0.6010817166372722
User 106751 AUC after training: 0.6011992945326279
User 106751 improves AUC. Keeping the model.
Training on augumented user 42510 20/50 current_auc = 0.6011992945326279
User 42510 AUC after training: 0.6010464432686655
User 42510 does not improve AUC. Reverting changes.
Training on augumented user 123029 21/50 current_auc = 0.6011992945326279
User 123029 AUC after training: 0.6011522633744857
User 123029 does not improve AUC. Reverting changes.
Training on augumented user 38856 22/50 current_auc = 0.6011992945326279
User 38856 AUC after training: 0.6009523809523809
User 38856 does not improve AUC. Reverting changes.
Training on augumented user 73445 23/50 current_auc = 0.6011992945326279
User 73445 AUC after training: 0.6007524985302762
User 73445 does not improve AUC. Reverting changes.
Training on augumented user 115583 24/50 current_auc = 0.6011992945326279
User 115583 AUC after training: 0.6011052322163433
User 115583 does not improve AUC. Reverting changes.
Training on augumented user 102706 25/50 current_auc = 0.6011992945326279
User 102706 AUC after training: 0.6007995296884185
User 102706 does not improve AUC. Reverting changes.
Training on augumented user 60679 26/50 current_auc = 0.6011992945326279
User 60679 AUC after training: 0.6010934744268077
User 60679 does not improve AUC. Reverting changes.
Training on augumented user 43797 27/50 current_auc = 0.6011992945326279
User 43797 AUC after training: 0.6011522633744856
User 43797 does not improve AUC. Reverting changes.
Training on augumented user 129031 28/50 current_auc = 0.6011992945326279
User 129031 AUC after training: 0.6007642563198119
User 129031 does not improve AUC. Reverting changes.
Training on augumented user 65950 29/50 current_auc = 0.6011992945326279
User 65950 AUC after training: 0.6014226925338036
User 65950 improves AUC. Keeping the model.
Training on augumented user 132244 30/50 current_auc = 0.6014226925338036
User 132244 AUC after training: 0.6006114050558495
User 132244 does not improve AUC. Reverting changes.
Training on augumented user 14545 31/50 current_auc = 0.6014226925338036
User 14545 AUC after training: 0.6011287477954144
User 14545 does not improve AUC. Reverting changes.
Training on augumented user 122935 32/50 current_auc = 0.6014226925338036
User 122935 AUC after training: 0.6010346854791299
User 122935 does not improve AUC. Reverting changes.
Training on augumented user 4857 33/50 current_auc = 0.6014226925338036
User 4857 AUC after training: 0.600975896531452
User 4857 does not improve AUC. Reverting changes.
Training on augumented user 58779 34/50 current_auc = 0.6014226925338036
User 58779 AUC after training: 0.6012110523221634
User 58779 does not improve AUC. Reverting changes.
Training on augumented user 85312 35/50 current_auc = 0.6014226925338036
User 85312 AUC after training: 0.6010346854791299
User 85312 does not improve AUC. Reverting changes.
Training on augumented user 18477 36/50 current_auc = 0.6014226925338036
User 18477 AUC after training: 0.6011287477954144
User 18477 does not improve AUC. Reverting changes.
Training on augumented user 84161 37/50 current_auc = 0.6014226925338036
User 84161 AUC after training: 0.6005643738977072
User 84161 does not improve AUC. Reverting changes.
Training on augumented user 84490 38/50 current_auc = 0.6014226925338036
User 84490 AUC after training: 0.6011522633744856
User 84490 does not improve AUC. Reverting changes.
Training on augumented user 66197 39/50 current_auc = 0.6014226925338036
User 66197 AUC after training: 0.6009641387419165
User 66197 does not improve AUC. Reverting changes.
Training on augumented user 84666 40/50 current_auc = 0.6014226925338036
User 84666 AUC after training: 0.6013168724279835
User 84666 does not improve AUC. Reverting changes.
Training on augumented user 5206 41/50 current_auc = 0.6014226925338036
User 5206 AUC after training: 0.601222810111699
User 5206 does not improve AUC. Reverting changes.
Training on augumented user 66364 42/50 current_auc = 0.6014226925338036
User 66364 AUC after training: 0.60103468547913
User 66364 does not improve AUC. Reverting changes.
Training on augumented user 26895 43/50 current_auc = 0.6014226925338036
User 26895 AUC after training: 0.6011287477954145
User 26895 does not improve AUC. Reverting changes.
Training on augumented user 86849 44/50 current_auc = 0.6014226925338036
User 86849 AUC after training: 0.6012110523221634
User 86849 does not improve AUC. Reverting changes.
Training on augumented user 21264 45/50 current_auc = 0.6014226925338036
User 21264 AUC after training: 0.6007642563198119
User 21264 does not improve AUC. Reverting changes.
Training on augumented user 16622 46/50 current_auc = 0.6014226925338036
User 16622 AUC after training: 0.6010111699000588
User 16622 does not improve AUC. Reverting changes.
Training on augumented user 133298 47/50 current_auc = 0.6014226925338036
User 133298 AUC after training: 0.6011522633744857
User 133298 does not improve AUC. Reverting changes.
Training on augumented user 26166 48/50 current_auc = 0.6014226925338036
User 26166 AUC after training: 0.6012110523221634
User 26166 does not improve AUC. Reverting changes.
Training on augumented user 48597 49/50 current_auc = 0.6014226925338036
User 48597 AUC after training: 0.6010229276895943
User 48597 does not improve AUC. Reverting changes.
[2024-12-02 18:45:58.157300] start test user 72269 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:58.609510] start test user 72269 126/568 recall augumented users by random, augumented_users = [75744, 23336, 24462, 41795, 123805, 30678, 101479, 42861, 135028, 119234, 92982, 137825, 26130, 7649, 3932, 117577, 30018, 113, 41299, 3329, 119151, 94828, 107072, 97641, 130178, 99221, 53039, 88371, 47219, 137217, 119324, 48025, 46237, 46052, 42686, 13882, 81341, 13406, 112929, 100783, 112564, 111288, 106589, 21954, 78201, 109282, 101330, 129110, 38510, 48882]
[2024-12-02 18:45:58.627133] user = 72269 Cloud 126/568
[2024-12-02 18:45:58.651618] user = 72269 Local 126/568
[2024-12-02 18:45:58.698809] user = 72269 Local+ 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:01.647483] user = 72269 MPDA- 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49523809523809526
Training on augumented user 75744 0/50 current_auc = 0.49523809523809526
User 75744 AUC after training: 0.49523809523809526
User 75744 does not improve AUC. Reverting changes.
Training on augumented user 23336 1/50 current_auc = 0.49523809523809526
User 23336 AUC after training: 0.49523809523809526
User 23336 does not improve AUC. Reverting changes.
Training on augumented user 24462 2/50 current_auc = 0.49523809523809526
User 24462 AUC after training: 0.49523809523809526
User 24462 does not improve AUC. Reverting changes.
Training on augumented user 41795 3/50 current_auc = 0.49523809523809526
User 41795 AUC after training: 0.49523809523809526
User 41795 does not improve AUC. Reverting changes.
Training on augumented user 123805 4/50 current_auc = 0.49523809523809526
User 123805 AUC after training: 0.49523809523809526
User 123805 does not improve AUC. Reverting changes.
Training on augumented user 30678 5/50 current_auc = 0.49523809523809526
User 30678 AUC after training: 0.49523809523809526
User 30678 does not improve AUC. Reverting changes.
Training on augumented user 101479 6/50 current_auc = 0.49523809523809526
User 101479 AUC after training: 0.49523809523809526
User 101479 does not improve AUC. Reverting changes.
Training on augumented user 42861 7/50 current_auc = 0.49523809523809526
User 42861 AUC after training: 0.49523809523809526
User 42861 does not improve AUC. Reverting changes.
Training on augumented user 135028 8/50 current_auc = 0.49523809523809526
User 135028 AUC after training: 0.49523809523809526
User 135028 does not improve AUC. Reverting changes.
Training on augumented user 119234 9/50 current_auc = 0.49523809523809526
User 119234 AUC after training: 0.49523809523809526
User 119234 does not improve AUC. Reverting changes.
Training on augumented user 92982 10/50 current_auc = 0.49523809523809526
User 92982 AUC after training: 0.49523809523809526
User 92982 does not improve AUC. Reverting changes.
Training on augumented user 137825 11/50 current_auc = 0.49523809523809526
User 137825 AUC after training: 0.49523809523809526
User 137825 does not improve AUC. Reverting changes.
Training on augumented user 26130 12/50 current_auc = 0.49523809523809526
User 26130 AUC after training: 0.49523809523809526
User 26130 does not improve AUC. Reverting changes.
Training on augumented user 7649 13/50 current_auc = 0.49523809523809526
User 7649 AUC after training: 0.49523809523809526
User 7649 does not improve AUC. Reverting changes.
Training on augumented user 3932 14/50 current_auc = 0.49523809523809526
User 3932 AUC after training: 0.49523809523809526
User 3932 does not improve AUC. Reverting changes.
Training on augumented user 117577 15/50 current_auc = 0.49523809523809526
User 117577 AUC after training: 0.49523809523809526
User 117577 does not improve AUC. Reverting changes.
Training on augumented user 30018 16/50 current_auc = 0.49523809523809526
User 30018 AUC after training: 0.49523809523809526
User 30018 does not improve AUC. Reverting changes.
Training on augumented user 113 17/50 current_auc = 0.49523809523809526
User 113 AUC after training: 0.49523809523809526
User 113 does not improve AUC. Reverting changes.
Training on augumented user 41299 18/50 current_auc = 0.49523809523809526
User 41299 AUC after training: 0.49523809523809526
User 41299 does not improve AUC. Reverting changes.
Training on augumented user 3329 19/50 current_auc = 0.49523809523809526
User 3329 AUC after training: 0.49523809523809526
User 3329 does not improve AUC. Reverting changes.
Training on augumented user 119151 20/50 current_auc = 0.49523809523809526
User 119151 AUC after training: 0.49523809523809526
User 119151 does not improve AUC. Reverting changes.
Training on augumented user 94828 21/50 current_auc = 0.49523809523809526
User 94828 AUC after training: 0.49523809523809526
User 94828 does not improve AUC. Reverting changes.
Training on augumented user 107072 22/50 current_auc = 0.49523809523809526
User 107072 AUC after training: 0.49523809523809526
User 107072 does not improve AUC. Reverting changes.
Training on augumented user 97641 23/50 current_auc = 0.49523809523809526
User 97641 AUC after training: 0.49523809523809526
User 97641 does not improve AUC. Reverting changes.
Training on augumented user 130178 24/50 current_auc = 0.49523809523809526
User 130178 AUC after training: 0.49523809523809526
User 130178 does not improve AUC. Reverting changes.
Training on augumented user 99221 25/50 current_auc = 0.49523809523809526
User 99221 AUC after training: 0.49523809523809526
User 99221 does not improve AUC. Reverting changes.
Training on augumented user 53039 26/50 current_auc = 0.49523809523809526
User 53039 AUC after training: 0.49523809523809526
User 53039 does not improve AUC. Reverting changes.
Training on augumented user 88371 27/50 current_auc = 0.49523809523809526
User 88371 AUC after training: 0.49523809523809526
User 88371 does not improve AUC. Reverting changes.
Training on augumented user 47219 28/50 current_auc = 0.49523809523809526
User 47219 AUC after training: 0.48571428571428577
User 47219 does not improve AUC. Reverting changes.
Training on augumented user 137217 29/50 current_auc = 0.49523809523809526
User 137217 AUC after training: 0.49523809523809526
User 137217 does not improve AUC. Reverting changes.
Training on augumented user 119324 30/50 current_auc = 0.49523809523809526
User 119324 AUC after training: 0.49523809523809526
User 119324 does not improve AUC. Reverting changes.
Training on augumented user 48025 31/50 current_auc = 0.49523809523809526
User 48025 AUC after training: 0.49523809523809526
User 48025 does not improve AUC. Reverting changes.
Training on augumented user 46237 32/50 current_auc = 0.49523809523809526
User 46237 AUC after training: 0.49523809523809526
User 46237 does not improve AUC. Reverting changes.
Training on augumented user 46052 33/50 current_auc = 0.49523809523809526
User 46052 AUC after training: 0.49523809523809526
User 46052 does not improve AUC. Reverting changes.
Training on augumented user 42686 34/50 current_auc = 0.49523809523809526
User 42686 AUC after training: 0.49523809523809526
User 42686 does not improve AUC. Reverting changes.
Training on augumented user 13882 35/50 current_auc = 0.49523809523809526
User 13882 AUC after training: 0.49523809523809526
User 13882 does not improve AUC. Reverting changes.
Training on augumented user 81341 36/50 current_auc = 0.49523809523809526
User 81341 AUC after training: 0.49523809523809526
User 81341 does not improve AUC. Reverting changes.
Training on augumented user 13406 37/50 current_auc = 0.49523809523809526
User 13406 AUC after training: 0.49523809523809526
User 13406 does not improve AUC. Reverting changes.
Training on augumented user 112929 38/50 current_auc = 0.49523809523809526
User 112929 AUC after training: 0.49523809523809526
User 112929 does not improve AUC. Reverting changes.
Training on augumented user 100783 39/50 current_auc = 0.49523809523809526
User 100783 AUC after training: 0.49523809523809526
User 100783 does not improve AUC. Reverting changes.
Training on augumented user 112564 40/50 current_auc = 0.49523809523809526
User 112564 AUC after training: 0.49523809523809526
User 112564 does not improve AUC. Reverting changes.
Training on augumented user 111288 41/50 current_auc = 0.49523809523809526
User 111288 AUC after training: 0.49523809523809526
User 111288 does not improve AUC. Reverting changes.
Training on augumented user 106589 42/50 current_auc = 0.49523809523809526
User 106589 AUC after training: 0.49523809523809526
User 106589 does not improve AUC. Reverting changes.
Training on augumented user 21954 43/50 current_auc = 0.49523809523809526
User 21954 AUC after training: 0.49523809523809526
User 21954 does not improve AUC. Reverting changes.
Training on augumented user 78201 44/50 current_auc = 0.49523809523809526
User 78201 AUC after training: 0.49523809523809526
User 78201 does not improve AUC. Reverting changes.
Training on augumented user 109282 45/50 current_auc = 0.49523809523809526
User 109282 AUC after training: 0.49523809523809526
User 109282 does not improve AUC. Reverting changes.
Training on augumented user 101330 46/50 current_auc = 0.49523809523809526
User 101330 AUC after training: 0.49523809523809526
User 101330 does not improve AUC. Reverting changes.
Training on augumented user 129110 47/50 current_auc = 0.49523809523809526
User 129110 AUC after training: 0.49523809523809526
User 129110 does not improve AUC. Reverting changes.
Training on augumented user 38510 48/50 current_auc = 0.49523809523809526
User 38510 AUC after training: 0.49523809523809526
User 38510 does not improve AUC. Reverting changes.
Training on augumented user 48882 49/50 current_auc = 0.49523809523809526
User 48882 AUC after training: 0.49523809523809526
User 48882 does not improve AUC. Reverting changes.
[2024-12-02 18:46:32.399983] start test user 72276 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:32.973660] start test user 72276 127/568 recall augumented users by random, augumented_users = [78260, 61812, 36871, 130078, 22688, 9373, 18980, 115825, 59799, 1540, 93346, 128147, 126941, 100303, 27352, 128930, 77365, 134154, 129049, 107206, 95305, 69710, 28676, 29052, 75352, 114669, 118947, 117177, 132559, 21412, 137242, 76339, 55151, 122995, 30942, 10550, 17334, 61948, 128705, 25331, 47082, 79897, 72460, 45637, 56955, 74277, 92304, 59472, 39488, 60497]
[2024-12-02 18:46:33.014200] user = 72276 Cloud 127/568
[2024-12-02 18:46:33.074040] user = 72276 Local 127/568
[2024-12-02 18:46:33.263734] user = 72276 Local+ 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:36.979277] user = 72276 MPDA- 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7296126949973104
Training on augumented user 78260 0/50 current_auc = 0.7296126949973104
User 78260 AUC after training: 0.7298009682625067
User 78260 improves AUC. Keeping the model.
Training on augumented user 61812 1/50 current_auc = 0.7298009682625067
User 61812 AUC after training: 0.7296093329747176
User 61812 does not improve AUC. Reverting changes.
Training on augumented user 36871 2/50 current_auc = 0.7298009682625067
User 36871 AUC after training: 0.7292428725121033
User 36871 does not improve AUC. Reverting changes.
Training on augumented user 130078 3/50 current_auc = 0.7298009682625067
User 130078 AUC after training: 0.7297337278106508
User 130078 does not improve AUC. Reverting changes.
Training on augumented user 22688 4/50 current_auc = 0.7298009682625067
User 22688 AUC after training: 0.7296261430876815
User 22688 does not improve AUC. Reverting changes.
Training on augumented user 9373 5/50 current_auc = 0.7298009682625067
User 9373 AUC after training: 0.7295925228617537
User 9373 does not improve AUC. Reverting changes.
Training on augumented user 18980 6/50 current_auc = 0.7298009682625067
User 18980 AUC after training: 0.7294479558902636
User 18980 does not improve AUC. Reverting changes.
Training on augumented user 115825 7/50 current_auc = 0.7298009682625067
User 115825 AUC after training: 0.7296866594943519
User 115825 does not improve AUC. Reverting changes.
Training on augumented user 59799 8/50 current_auc = 0.7298009682625067
User 59799 AUC after training: 0.7295925228617537
User 59799 does not improve AUC. Reverting changes.
Training on augumented user 1540 9/50 current_auc = 0.7298009682625067
User 1540 AUC after training: 0.729632867132867
User 1540 does not improve AUC. Reverting changes.
Training on augumented user 93346 10/50 current_auc = 0.7298009682625067
User 93346 AUC after training: 0.7297135556750942
User 93346 does not improve AUC. Reverting changes.
Training on augumented user 128147 11/50 current_auc = 0.7298009682625067
User 128147 AUC after training: 0.729891742872512
User 128147 improves AUC. Keeping the model.
Training on augumented user 126941 12/50 current_auc = 0.729891742872512
User 126941 AUC after training: 0.7292966648735879
User 126941 does not improve AUC. Reverting changes.
Training on augumented user 100303 13/50 current_auc = 0.729891742872512
User 100303 AUC after training: 0.7298513986013986
User 100303 does not improve AUC. Reverting changes.
Training on augumented user 27352 14/50 current_auc = 0.729891742872512
User 27352 AUC after training: 0.7295286444324905
User 27352 does not improve AUC. Reverting changes.
Training on augumented user 128930 15/50 current_auc = 0.729891742872512
User 128930 AUC after training: 0.7297370898332436
User 128930 does not improve AUC. Reverting changes.
Training on augumented user 77365 16/50 current_auc = 0.729891742872512
User 77365 AUC after training: 0.729844674556213
User 77365 does not improve AUC. Reverting changes.
Training on augumented user 134154 17/50 current_auc = 0.729891742872512
User 134154 AUC after training: 0.7298144163528779
User 134154 does not improve AUC. Reverting changes.
Training on augumented user 129049 18/50 current_auc = 0.729891742872512
User 129049 AUC after training: 0.7295757127487896
User 129049 does not improve AUC. Reverting changes.
Training on augumented user 107206 19/50 current_auc = 0.729891742872512
User 107206 AUC after training: 0.7298413125336202
User 107206 does not improve AUC. Reverting changes.
Training on augumented user 95305 20/50 current_auc = 0.729891742872512
User 95305 AUC after training: 0.7297001075847229
User 95305 does not improve AUC. Reverting changes.
Training on augumented user 69710 21/50 current_auc = 0.729891742872512
User 69710 AUC after training: 0.7298110543302851
User 69710 does not improve AUC. Reverting changes.
Training on augumented user 28676 22/50 current_auc = 0.729891742872512
User 28676 AUC after training: 0.729666487358795
User 28676 does not improve AUC. Reverting changes.
Training on augumented user 29052 23/50 current_auc = 0.729891742872512
User 29052 AUC after training: 0.7291689080150618
User 29052 does not improve AUC. Reverting changes.
Training on augumented user 75352 24/50 current_auc = 0.729891742872512
User 75352 AUC after training: 0.7298043302850995
User 75352 does not improve AUC. Reverting changes.
Training on augumented user 114669 25/50 current_auc = 0.729891742872512
User 114669 AUC after training: 0.7297034696073158
User 114669 does not improve AUC. Reverting changes.
Training on augumented user 118947 26/50 current_auc = 0.729891742872512
User 118947 AUC after training: 0.7296664873587949
User 118947 does not improve AUC. Reverting changes.
Training on augumented user 117177 27/50 current_auc = 0.729891742872512
User 117177 AUC after training: 0.7297202797202798
User 117177 does not improve AUC. Reverting changes.
Training on augumented user 132559 28/50 current_auc = 0.729891742872512
User 132559 AUC after training: 0.7295420925228617
User 132559 does not improve AUC. Reverting changes.
Training on augumented user 21412 29/50 current_auc = 0.729891742872512
User 21412 AUC after training: 0.7295656266810112
User 21412 does not improve AUC. Reverting changes.
Training on augumented user 137242 30/50 current_auc = 0.729891742872512
User 137242 AUC after training: 0.7291083916083916
User 137242 does not improve AUC. Reverting changes.
Training on augumented user 76339 31/50 current_auc = 0.729891742872512
User 76339 AUC after training: 0.7297169176976869
User 76339 does not improve AUC. Reverting changes.
Training on augumented user 55151 32/50 current_auc = 0.729891742872512
User 55151 AUC after training: 0.7296194190424959
User 55151 does not improve AUC. Reverting changes.
Training on augumented user 122995 33/50 current_auc = 0.729891742872512
User 122995 AUC after training: 0.729135287789134
User 122995 does not improve AUC. Reverting changes.
Training on augumented user 30942 34/50 current_auc = 0.729891742872512
User 30942 AUC after training: 0.7301607046799354
User 30942 improves AUC. Keeping the model.
Training on augumented user 10550 35/50 current_auc = 0.7301607046799354
User 10550 AUC after training: 0.7300968262506724
User 10550 does not improve AUC. Reverting changes.
Training on augumented user 17334 36/50 current_auc = 0.7301607046799354
User 17334 AUC after training: 0.729989241527703
User 17334 does not improve AUC. Reverting changes.
Training on augumented user 61948 37/50 current_auc = 0.7301607046799354
User 61948 AUC after training: 0.7297740720817645
User 61948 does not improve AUC. Reverting changes.
Training on augumented user 128705 38/50 current_auc = 0.7301607046799354
User 128705 AUC after training: 0.7299556213017752
User 128705 does not improve AUC. Reverting changes.
Training on augumented user 25331 39/50 current_auc = 0.7301607046799354
User 25331 AUC after training: 0.7298614846691769
User 25331 does not improve AUC. Reverting changes.
Training on augumented user 47082 40/50 current_auc = 0.7301607046799354
User 47082 AUC after training: 0.7298917428725121
User 47082 does not improve AUC. Reverting changes.
Training on augumented user 79897 41/50 current_auc = 0.7301607046799354
User 79897 AUC after training: 0.7298648466917698
User 79897 does not improve AUC. Reverting changes.
Training on augumented user 72460 42/50 current_auc = 0.7301607046799354
User 72460 AUC after training: 0.7298211403980635
User 72460 does not improve AUC. Reverting changes.
Training on augumented user 45637 43/50 current_auc = 0.7301607046799354
User 45637 AUC after training: 0.7301304464766004
User 45637 does not improve AUC. Reverting changes.
Training on augumented user 56955 44/50 current_auc = 0.7301607046799354
User 56955 AUC after training: 0.7301607046799353
User 56955 does not improve AUC. Reverting changes.
Training on augumented user 74277 45/50 current_auc = 0.7301607046799354
User 74277 AUC after training: 0.7296395911780527
User 74277 does not improve AUC. Reverting changes.
Training on augumented user 92304 46/50 current_auc = 0.7301607046799354
User 92304 AUC after training: 0.7301169983862292
User 92304 does not improve AUC. Reverting changes.
Training on augumented user 59472 47/50 current_auc = 0.7301607046799354
User 59472 AUC after training: 0.7299186390532545
User 59472 does not improve AUC. Reverting changes.
Training on augumented user 39488 48/50 current_auc = 0.7301607046799354
User 39488 AUC after training: 0.7301909628832705
User 39488 improves AUC. Keeping the model.
Training on augumented user 60497 49/50 current_auc = 0.7301909628832705
User 60497 AUC after training: 0.7299152770306616
User 60497 does not improve AUC. Reverting changes.
[2024-12-02 18:47:10.943094] start test user 72280 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:11.557235] start test user 72280 128/568 recall augumented users by random, augumented_users = [9015, 95162, 124025, 115763, 49086, 90946, 135811, 82463, 23611, 108002, 68665, 54285, 113101, 35674, 132720, 120167, 91797, 4819, 69836, 59265, 77549, 61016, 36711, 58826, 70779, 6907, 15242, 127506, 119012, 56830, 92068, 101906, 114675, 92, 7070, 85559, 108433, 2169, 52241, 124038, 135729, 38233, 131301, 126412, 126285, 120793, 38612, 32498, 44232, 72918]
[2024-12-02 18:47:11.572556] user = 72280 Cloud 128/568
[2024-12-02 18:47:11.594386] user = 72280 Local 128/568
[2024-12-02 18:47:11.805593] user = 72280 Local+ 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:14.021538] user = 72280 MPDA- 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8593196314670446
Training on augumented user 9015 0/50 current_auc = 0.8593196314670446
User 9015 AUC after training: 0.8586109142452162
User 9015 does not improve AUC. Reverting changes.
Training on augumented user 95162 1/50 current_auc = 0.8593196314670446
User 95162 AUC after training: 0.8589652728561303
User 95162 does not improve AUC. Reverting changes.
Training on augumented user 124025 2/50 current_auc = 0.8593196314670446
User 124025 AUC after training: 0.8589652728561303
User 124025 does not improve AUC. Reverting changes.
Training on augumented user 115763 3/50 current_auc = 0.8593196314670446
User 115763 AUC after training: 0.8586109142452161
User 115763 does not improve AUC. Reverting changes.
Training on augumented user 49086 4/50 current_auc = 0.8593196314670446
User 49086 AUC after training: 0.8591424521615875
User 49086 does not improve AUC. Reverting changes.
Training on augumented user 90946 5/50 current_auc = 0.8593196314670446
User 90946 AUC after training: 0.8588766832034018
User 90946 does not improve AUC. Reverting changes.
Training on augumented user 135811 6/50 current_auc = 0.8593196314670446
User 135811 AUC after training: 0.8587880935506733
User 135811 does not improve AUC. Reverting changes.
Training on augumented user 82463 7/50 current_auc = 0.8593196314670446
User 82463 AUC after training: 0.8593196314670446
User 82463 does not improve AUC. Reverting changes.
Training on augumented user 23611 8/50 current_auc = 0.8593196314670446
User 23611 AUC after training: 0.8593196314670446
User 23611 does not improve AUC. Reverting changes.
Training on augumented user 108002 9/50 current_auc = 0.8593196314670446
User 108002 AUC after training: 0.8594968107725017
User 108002 improves AUC. Keeping the model.
Training on augumented user 68665 10/50 current_auc = 0.8594968107725017
User 68665 AUC after training: 0.8589652728561303
User 68665 does not improve AUC. Reverting changes.
Training on augumented user 54285 11/50 current_auc = 0.8594968107725017
User 54285 AUC after training: 0.8593196314670446
User 54285 does not improve AUC. Reverting changes.
Training on augumented user 113101 12/50 current_auc = 0.8594968107725017
User 113101 AUC after training: 0.8591424521615876
User 113101 does not improve AUC. Reverting changes.
Training on augumented user 35674 13/50 current_auc = 0.8594968107725017
User 35674 AUC after training: 0.8587880935506733
User 35674 does not improve AUC. Reverting changes.
Training on augumented user 132720 14/50 current_auc = 0.8594968107725017
User 132720 AUC after training: 0.8593196314670446
User 132720 does not improve AUC. Reverting changes.
Training on augumented user 120167 15/50 current_auc = 0.8594968107725017
User 120167 AUC after training: 0.8593196314670446
User 120167 does not improve AUC. Reverting changes.
Training on augumented user 91797 16/50 current_auc = 0.8594968107725017
User 91797 AUC after training: 0.859851169383416
User 91797 improves AUC. Keeping the model.
Training on augumented user 4819 17/50 current_auc = 0.859851169383416
User 4819 AUC after training: 0.8596739900779589
User 4819 does not improve AUC. Reverting changes.
Training on augumented user 69836 18/50 current_auc = 0.859851169383416
User 69836 AUC after training: 0.8601169383416017
User 69836 improves AUC. Keeping the model.
Training on augumented user 59265 19/50 current_auc = 0.8601169383416017
User 59265 AUC after training: 0.8602941176470589
User 59265 improves AUC. Keeping the model.
Training on augumented user 77549 20/50 current_auc = 0.8602941176470589
User 77549 AUC after training: 0.8597625797306875
User 77549 does not improve AUC. Reverting changes.
Training on augumented user 61016 21/50 current_auc = 0.8602941176470589
User 61016 AUC after training: 0.859053862508859
User 61016 does not improve AUC. Reverting changes.
Training on augumented user 36711 22/50 current_auc = 0.8602941176470589
User 36711 AUC after training: 0.8599397590361446
User 36711 does not improve AUC. Reverting changes.
Training on augumented user 58826 23/50 current_auc = 0.8602941176470589
User 58826 AUC after training: 0.8602941176470589
User 58826 does not improve AUC. Reverting changes.
Training on augumented user 70779 24/50 current_auc = 0.8602941176470589
User 70779 AUC after training: 0.8595854004252305
User 70779 does not improve AUC. Reverting changes.
Training on augumented user 6907 25/50 current_auc = 0.8602941176470589
User 6907 AUC after training: 0.8597625797306874
User 6907 does not improve AUC. Reverting changes.
Training on augumented user 15242 26/50 current_auc = 0.8602941176470589
User 15242 AUC after training: 0.8602055279943304
User 15242 does not improve AUC. Reverting changes.
Training on augumented user 127506 27/50 current_auc = 0.8602941176470589
User 127506 AUC after training: 0.8602941176470588
User 127506 does not improve AUC. Reverting changes.
Training on augumented user 119012 28/50 current_auc = 0.8602941176470589
User 119012 AUC after training: 0.8599397590361446
User 119012 does not improve AUC. Reverting changes.
Training on augumented user 56830 29/50 current_auc = 0.8602941176470589
User 56830 AUC after training: 0.8599397590361446
User 56830 does not improve AUC. Reverting changes.
Training on augumented user 92068 30/50 current_auc = 0.8602941176470589
User 92068 AUC after training: 0.8601169383416016
User 92068 does not improve AUC. Reverting changes.
Training on augumented user 101906 31/50 current_auc = 0.8602941176470589
User 101906 AUC after training: 0.860648476257973
User 101906 improves AUC. Keeping the model.
Training on augumented user 114675 32/50 current_auc = 0.860648476257973
User 114675 AUC after training: 0.8602941176470589
User 114675 does not improve AUC. Reverting changes.
Training on augumented user 92 33/50 current_auc = 0.860648476257973
User 92 AUC after training: 0.8606484762579731
User 92 improves AUC. Keeping the model.
Training on augumented user 7070 34/50 current_auc = 0.8606484762579731
User 7070 AUC after training: 0.8602941176470589
User 7070 does not improve AUC. Reverting changes.
Training on augumented user 85559 35/50 current_auc = 0.8606484762579731
User 85559 AUC after training: 0.8608256555634302
User 85559 improves AUC. Keeping the model.
Training on augumented user 108433 36/50 current_auc = 0.8608256555634302
User 108433 AUC after training: 0.8610028348688874
User 108433 improves AUC. Keeping the model.
Training on augumented user 2169 37/50 current_auc = 0.8610028348688874
User 2169 AUC after training: 0.8615343727852587
User 2169 improves AUC. Keeping the model.
Training on augumented user 52241 38/50 current_auc = 0.8615343727852587
User 52241 AUC after training: 0.8613571934798017
User 52241 does not improve AUC. Reverting changes.
Training on augumented user 124038 39/50 current_auc = 0.8615343727852587
User 124038 AUC after training: 0.8613571934798016
User 124038 does not improve AUC. Reverting changes.
Training on augumented user 135729 40/50 current_auc = 0.8615343727852587
User 135729 AUC after training: 0.8610028348688874
User 135729 does not improve AUC. Reverting changes.
Training on augumented user 38233 41/50 current_auc = 0.8615343727852587
User 38233 AUC after training: 0.860471296952516
User 38233 does not improve AUC. Reverting changes.
Training on augumented user 131301 42/50 current_auc = 0.8615343727852587
User 131301 AUC after training: 0.8610028348688873
User 131301 does not improve AUC. Reverting changes.
Training on augumented user 126412 43/50 current_auc = 0.8615343727852587
User 126412 AUC after training: 0.8615343727852587
User 126412 does not improve AUC. Reverting changes.
Training on augumented user 126285 44/50 current_auc = 0.8615343727852587
User 126285 AUC after training: 0.8615343727852587
User 126285 does not improve AUC. Reverting changes.
Training on augumented user 120793 45/50 current_auc = 0.8615343727852587
User 120793 AUC after training: 0.8613571934798016
User 120793 does not improve AUC. Reverting changes.
Training on augumented user 38612 46/50 current_auc = 0.8615343727852587
User 38612 AUC after training: 0.8610028348688874
User 38612 does not improve AUC. Reverting changes.
Training on augumented user 32498 47/50 current_auc = 0.8615343727852587
User 32498 AUC after training: 0.8615343727852587
User 32498 does not improve AUC. Reverting changes.
Training on augumented user 44232 48/50 current_auc = 0.8615343727852587
User 44232 AUC after training: 0.8610028348688874
User 44232 does not improve AUC. Reverting changes.
Training on augumented user 72918 49/50 current_auc = 0.8615343727852587
User 72918 AUC after training: 0.8613571934798017
User 72918 does not improve AUC. Reverting changes.
[2024-12-02 18:47:43.037989] start test user 72309 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:43.491830] start test user 72309 129/568 recall augumented users by random, augumented_users = [67353, 75553, 7839, 132864, 50413, 103792, 94394, 35745, 59576, 33996, 129475, 87581, 34268, 38322, 42453, 12581, 2624, 27585, 58737, 57966, 19030, 37008, 128397, 45244, 8153, 76871, 46948, 51151, 117379, 81079, 92816, 96740, 26676, 51501, 37032, 82234, 130527, 93000, 31986, 110670, 87375, 108792, 94978, 101145, 125526, 134216, 101884, 80106, 117790, 107490]
[2024-12-02 18:47:43.509829] user = 72309 Cloud 129/568
[2024-12-02 18:47:43.532817] user = 72309 Local 129/568
[2024-12-02 18:47:43.559800] user = 72309 Local+ 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:45.839627] user = 72309 MPDA- 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7544642857142857
Training on augumented user 67353 0/50 current_auc = 0.7544642857142857
User 67353 AUC after training: 0.75
User 67353 does not improve AUC. Reverting changes.
Training on augumented user 75553 1/50 current_auc = 0.7544642857142857
User 75553 AUC after training: 0.7544642857142857
User 75553 does not improve AUC. Reverting changes.
Training on augumented user 7839 2/50 current_auc = 0.7544642857142857
User 7839 AUC after training: 0.75
User 7839 does not improve AUC. Reverting changes.
Training on augumented user 132864 3/50 current_auc = 0.7544642857142857
User 132864 AUC after training: 0.75
User 132864 does not improve AUC. Reverting changes.
Training on augumented user 50413 4/50 current_auc = 0.7544642857142857
User 50413 AUC after training: 0.7589285714285714
User 50413 improves AUC. Keeping the model.
Training on augumented user 103792 5/50 current_auc = 0.7589285714285714
User 103792 AUC after training: 0.7589285714285714
User 103792 does not improve AUC. Reverting changes.
Training on augumented user 94394 6/50 current_auc = 0.7589285714285714
User 94394 AUC after training: 0.7544642857142857
User 94394 does not improve AUC. Reverting changes.
Training on augumented user 35745 7/50 current_auc = 0.7589285714285714
User 35745 AUC after training: 0.7589285714285714
User 35745 does not improve AUC. Reverting changes.
Training on augumented user 59576 8/50 current_auc = 0.7589285714285714
User 59576 AUC after training: 0.7589285714285714
User 59576 does not improve AUC. Reverting changes.
Training on augumented user 33996 9/50 current_auc = 0.7589285714285714
User 33996 AUC after training: 0.7589285714285714
User 33996 does not improve AUC. Reverting changes.
Training on augumented user 129475 10/50 current_auc = 0.7589285714285714
User 129475 AUC after training: 0.7589285714285714
User 129475 does not improve AUC. Reverting changes.
Training on augumented user 87581 11/50 current_auc = 0.7589285714285714
User 87581 AUC after training: 0.7589285714285714
User 87581 does not improve AUC. Reverting changes.
Training on augumented user 34268 12/50 current_auc = 0.7589285714285714
User 34268 AUC after training: 0.7544642857142857
User 34268 does not improve AUC. Reverting changes.
Training on augumented user 38322 13/50 current_auc = 0.7589285714285714
User 38322 AUC after training: 0.7589285714285714
User 38322 does not improve AUC. Reverting changes.
Training on augumented user 42453 14/50 current_auc = 0.7589285714285714
User 42453 AUC after training: 0.7589285714285714
User 42453 does not improve AUC. Reverting changes.
Training on augumented user 12581 15/50 current_auc = 0.7589285714285714
User 12581 AUC after training: 0.7589285714285714
User 12581 does not improve AUC. Reverting changes.
Training on augumented user 2624 16/50 current_auc = 0.7589285714285714
User 2624 AUC after training: 0.7589285714285714
User 2624 does not improve AUC. Reverting changes.
Training on augumented user 27585 17/50 current_auc = 0.7589285714285714
User 27585 AUC after training: 0.7589285714285714
User 27585 does not improve AUC. Reverting changes.
Training on augumented user 58737 18/50 current_auc = 0.7589285714285714
User 58737 AUC after training: 0.7544642857142857
User 58737 does not improve AUC. Reverting changes.
Training on augumented user 57966 19/50 current_auc = 0.7589285714285714
User 57966 AUC after training: 0.7589285714285714
User 57966 does not improve AUC. Reverting changes.
Training on augumented user 19030 20/50 current_auc = 0.7589285714285714
User 19030 AUC after training: 0.7589285714285714
User 19030 does not improve AUC. Reverting changes.
Training on augumented user 37008 21/50 current_auc = 0.7589285714285714
User 37008 AUC after training: 0.7589285714285714
User 37008 does not improve AUC. Reverting changes.
Training on augumented user 128397 22/50 current_auc = 0.7589285714285714
User 128397 AUC after training: 0.7544642857142857
User 128397 does not improve AUC. Reverting changes.
Training on augumented user 45244 23/50 current_auc = 0.7589285714285714
User 45244 AUC after training: 0.7589285714285714
User 45244 does not improve AUC. Reverting changes.
Training on augumented user 8153 24/50 current_auc = 0.7589285714285714
User 8153 AUC after training: 0.7544642857142857
User 8153 does not improve AUC. Reverting changes.
Training on augumented user 76871 25/50 current_auc = 0.7589285714285714
User 76871 AUC after training: 0.7589285714285714
User 76871 does not improve AUC. Reverting changes.
Training on augumented user 46948 26/50 current_auc = 0.7589285714285714
User 46948 AUC after training: 0.7589285714285714
User 46948 does not improve AUC. Reverting changes.
Training on augumented user 51151 27/50 current_auc = 0.7589285714285714
User 51151 AUC after training: 0.7544642857142857
User 51151 does not improve AUC. Reverting changes.
Training on augumented user 117379 28/50 current_auc = 0.7589285714285714
User 117379 AUC after training: 0.7589285714285714
User 117379 does not improve AUC. Reverting changes.
Training on augumented user 81079 29/50 current_auc = 0.7589285714285714
User 81079 AUC after training: 0.7589285714285714
User 81079 does not improve AUC. Reverting changes.
Training on augumented user 92816 30/50 current_auc = 0.7589285714285714
User 92816 AUC after training: 0.7589285714285714
User 92816 does not improve AUC. Reverting changes.
Training on augumented user 96740 31/50 current_auc = 0.7589285714285714
User 96740 AUC after training: 0.7544642857142857
User 96740 does not improve AUC. Reverting changes.
Training on augumented user 26676 32/50 current_auc = 0.7589285714285714
User 26676 AUC after training: 0.7589285714285714
User 26676 does not improve AUC. Reverting changes.
Training on augumented user 51501 33/50 current_auc = 0.7589285714285714
User 51501 AUC after training: 0.7589285714285714
User 51501 does not improve AUC. Reverting changes.
Training on augumented user 37032 34/50 current_auc = 0.7589285714285714
User 37032 AUC after training: 0.7589285714285714
User 37032 does not improve AUC. Reverting changes.
Training on augumented user 82234 35/50 current_auc = 0.7589285714285714
User 82234 AUC after training: 0.7589285714285714
User 82234 does not improve AUC. Reverting changes.
Training on augumented user 130527 36/50 current_auc = 0.7589285714285714
User 130527 AUC after training: 0.7544642857142857
User 130527 does not improve AUC. Reverting changes.
Training on augumented user 93000 37/50 current_auc = 0.7589285714285714
User 93000 AUC after training: 0.7544642857142857
User 93000 does not improve AUC. Reverting changes.
Training on augumented user 31986 38/50 current_auc = 0.7589285714285714
User 31986 AUC after training: 0.7589285714285714
User 31986 does not improve AUC. Reverting changes.
Training on augumented user 110670 39/50 current_auc = 0.7589285714285714
User 110670 AUC after training: 0.7589285714285714
User 110670 does not improve AUC. Reverting changes.
Training on augumented user 87375 40/50 current_auc = 0.7589285714285714
User 87375 AUC after training: 0.7589285714285714
User 87375 does not improve AUC. Reverting changes.
Training on augumented user 108792 41/50 current_auc = 0.7589285714285714
User 108792 AUC after training: 0.7589285714285714
User 108792 does not improve AUC. Reverting changes.
Training on augumented user 94978 42/50 current_auc = 0.7589285714285714
User 94978 AUC after training: 0.7589285714285714
User 94978 does not improve AUC. Reverting changes.
Training on augumented user 101145 43/50 current_auc = 0.7589285714285714
User 101145 AUC after training: 0.7589285714285714
User 101145 does not improve AUC. Reverting changes.
Training on augumented user 125526 44/50 current_auc = 0.7589285714285714
User 125526 AUC after training: 0.7589285714285714
User 125526 does not improve AUC. Reverting changes.
Training on augumented user 134216 45/50 current_auc = 0.7589285714285714
User 134216 AUC after training: 0.7589285714285714
User 134216 does not improve AUC. Reverting changes.
Training on augumented user 101884 46/50 current_auc = 0.7589285714285714
User 101884 AUC after training: 0.7589285714285714
User 101884 does not improve AUC. Reverting changes.
Training on augumented user 80106 47/50 current_auc = 0.7589285714285714
User 80106 AUC after training: 0.7589285714285714
User 80106 does not improve AUC. Reverting changes.
Training on augumented user 117790 48/50 current_auc = 0.7589285714285714
User 117790 AUC after training: 0.7589285714285714
User 117790 does not improve AUC. Reverting changes.
Training on augumented user 107490 49/50 current_auc = 0.7589285714285714
User 107490 AUC after training: 0.7589285714285714
User 107490 does not improve AUC. Reverting changes.
[2024-12-02 18:48:18.068129] start test user 72343 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:18.902759] start test user 72343 130/568 recall augumented users by random, augumented_users = [12639, 73027, 133632, 124596, 85163, 26073, 76698, 137396, 38137, 6483, 11385, 78865, 40064, 104011, 3559, 136771, 52743, 1047, 82353, 40435, 24434, 117595, 105908, 133537, 112790, 89030, 83556, 53803, 84826, 47550, 40505, 35525, 100248, 104378, 68291, 38567, 18916, 28795, 27184, 14722, 70164, 39946, 41055, 97335, 108800, 103484, 116461, 98740, 96948, 110903]
[2024-12-02 18:48:18.919867] user = 72343 Cloud 130/568
[2024-12-02 18:48:18.935419] user = 72343 Local 130/568
[2024-12-02 18:48:19.111717] user = 72343 Local+ 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:21.580397] user = 72343 MPDA- 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5169491525423728
Training on augumented user 12639 0/50 current_auc = 0.5169491525423728
User 12639 AUC after training: 0.5190677966101696
User 12639 improves AUC. Keeping the model.
Training on augumented user 73027 1/50 current_auc = 0.5190677966101696
User 73027 AUC after training: 0.5190677966101694
User 73027 does not improve AUC. Reverting changes.
Training on augumented user 133632 2/50 current_auc = 0.5190677966101696
User 133632 AUC after training: 0.5190677966101696
User 133632 does not improve AUC. Reverting changes.
Training on augumented user 124596 3/50 current_auc = 0.5190677966101696
User 124596 AUC after training: 0.5201271186440678
User 124596 improves AUC. Keeping the model.
Training on augumented user 85163 4/50 current_auc = 0.5201271186440678
User 85163 AUC after training: 0.5190677966101696
User 85163 does not improve AUC. Reverting changes.
Training on augumented user 26073 5/50 current_auc = 0.5201271186440678
User 26073 AUC after training: 0.5201271186440678
User 26073 does not improve AUC. Reverting changes.
Training on augumented user 76698 6/50 current_auc = 0.5201271186440678
User 76698 AUC after training: 0.5190677966101694
User 76698 does not improve AUC. Reverting changes.
Training on augumented user 137396 7/50 current_auc = 0.5201271186440678
User 137396 AUC after training: 0.5180084745762712
User 137396 does not improve AUC. Reverting changes.
Training on augumented user 38137 8/50 current_auc = 0.5201271186440678
User 38137 AUC after training: 0.5201271186440678
User 38137 does not improve AUC. Reverting changes.
Training on augumented user 6483 9/50 current_auc = 0.5201271186440678
User 6483 AUC after training: 0.5190677966101694
User 6483 does not improve AUC. Reverting changes.
Training on augumented user 11385 10/50 current_auc = 0.5201271186440678
User 11385 AUC after training: 0.5201271186440678
User 11385 does not improve AUC. Reverting changes.
Training on augumented user 78865 11/50 current_auc = 0.5201271186440678
User 78865 AUC after training: 0.5201271186440678
User 78865 does not improve AUC. Reverting changes.
Training on augumented user 40064 12/50 current_auc = 0.5201271186440678
User 40064 AUC after training: 0.5190677966101694
User 40064 does not improve AUC. Reverting changes.
Training on augumented user 104011 13/50 current_auc = 0.5201271186440678
User 104011 AUC after training: 0.521186440677966
User 104011 improves AUC. Keeping the model.
Training on augumented user 3559 14/50 current_auc = 0.521186440677966
User 3559 AUC after training: 0.5201271186440678
User 3559 does not improve AUC. Reverting changes.
Training on augumented user 136771 15/50 current_auc = 0.521186440677966
User 136771 AUC after training: 0.5201271186440678
User 136771 does not improve AUC. Reverting changes.
Training on augumented user 52743 16/50 current_auc = 0.521186440677966
User 52743 AUC after training: 0.5201271186440678
User 52743 does not improve AUC. Reverting changes.
Training on augumented user 1047 17/50 current_auc = 0.521186440677966
User 1047 AUC after training: 0.5201271186440678
User 1047 does not improve AUC. Reverting changes.
Training on augumented user 82353 18/50 current_auc = 0.521186440677966
User 82353 AUC after training: 0.5201271186440678
User 82353 does not improve AUC. Reverting changes.
Training on augumented user 40435 19/50 current_auc = 0.521186440677966
User 40435 AUC after training: 0.5201271186440678
User 40435 does not improve AUC. Reverting changes.
Training on augumented user 24434 20/50 current_auc = 0.521186440677966
User 24434 AUC after training: 0.521186440677966
User 24434 does not improve AUC. Reverting changes.
Training on augumented user 117595 21/50 current_auc = 0.521186440677966
User 117595 AUC after training: 0.521186440677966
User 117595 does not improve AUC. Reverting changes.
Training on augumented user 105908 22/50 current_auc = 0.521186440677966
User 105908 AUC after training: 0.5201271186440678
User 105908 does not improve AUC. Reverting changes.
Training on augumented user 133537 23/50 current_auc = 0.521186440677966
User 133537 AUC after training: 0.521186440677966
User 133537 does not improve AUC. Reverting changes.
Training on augumented user 112790 24/50 current_auc = 0.521186440677966
User 112790 AUC after training: 0.521186440677966
User 112790 does not improve AUC. Reverting changes.
Training on augumented user 89030 25/50 current_auc = 0.521186440677966
User 89030 AUC after training: 0.521186440677966
User 89030 does not improve AUC. Reverting changes.
Training on augumented user 83556 26/50 current_auc = 0.521186440677966
User 83556 AUC after training: 0.5180084745762712
User 83556 does not improve AUC. Reverting changes.
Training on augumented user 53803 27/50 current_auc = 0.521186440677966
User 53803 AUC after training: 0.5201271186440678
User 53803 does not improve AUC. Reverting changes.
Training on augumented user 84826 28/50 current_auc = 0.521186440677966
User 84826 AUC after training: 0.5201271186440678
User 84826 does not improve AUC. Reverting changes.
Training on augumented user 47550 29/50 current_auc = 0.521186440677966
User 47550 AUC after training: 0.521186440677966
User 47550 does not improve AUC. Reverting changes.
Training on augumented user 40505 30/50 current_auc = 0.521186440677966
User 40505 AUC after training: 0.5201271186440678
User 40505 does not improve AUC. Reverting changes.
Training on augumented user 35525 31/50 current_auc = 0.521186440677966
User 35525 AUC after training: 0.5201271186440678
User 35525 does not improve AUC. Reverting changes.
Training on augumented user 100248 32/50 current_auc = 0.521186440677966
User 100248 AUC after training: 0.5222457627118644
User 100248 improves AUC. Keeping the model.
Training on augumented user 104378 33/50 current_auc = 0.5222457627118644
User 104378 AUC after training: 0.5201271186440678
User 104378 does not improve AUC. Reverting changes.
Training on augumented user 68291 34/50 current_auc = 0.5222457627118644
User 68291 AUC after training: 0.5180084745762712
User 68291 does not improve AUC. Reverting changes.
Training on augumented user 38567 35/50 current_auc = 0.5222457627118644
User 38567 AUC after training: 0.5148305084745763
User 38567 does not improve AUC. Reverting changes.
Training on augumented user 18916 36/50 current_auc = 0.5222457627118644
User 18916 AUC after training: 0.5201271186440678
User 18916 does not improve AUC. Reverting changes.
Training on augumented user 28795 37/50 current_auc = 0.5222457627118644
User 28795 AUC after training: 0.5201271186440678
User 28795 does not improve AUC. Reverting changes.
Training on augumented user 27184 38/50 current_auc = 0.5222457627118644
User 27184 AUC after training: 0.510063559322034
User 27184 does not improve AUC. Reverting changes.
Training on augumented user 14722 39/50 current_auc = 0.5222457627118644
User 14722 AUC after training: 0.521186440677966
User 14722 does not improve AUC. Reverting changes.
Training on augumented user 70164 40/50 current_auc = 0.5222457627118644
User 70164 AUC after training: 0.521186440677966
User 70164 does not improve AUC. Reverting changes.
Training on augumented user 39946 41/50 current_auc = 0.5222457627118644
User 39946 AUC after training: 0.5190677966101696
User 39946 does not improve AUC. Reverting changes.
Training on augumented user 41055 42/50 current_auc = 0.5222457627118644
User 41055 AUC after training: 0.5158898305084747
User 41055 does not improve AUC. Reverting changes.
Training on augumented user 97335 43/50 current_auc = 0.5222457627118644
User 97335 AUC after training: 0.513771186440678
User 97335 does not improve AUC. Reverting changes.
Training on augumented user 108800 44/50 current_auc = 0.5222457627118644
User 108800 AUC after training: 0.5222457627118644
User 108800 does not improve AUC. Reverting changes.
Training on augumented user 103484 45/50 current_auc = 0.5222457627118644
User 103484 AUC after training: 0.5201271186440678
User 103484 does not improve AUC. Reverting changes.
Training on augumented user 116461 46/50 current_auc = 0.5222457627118644
User 116461 AUC after training: 0.521186440677966
User 116461 does not improve AUC. Reverting changes.
Training on augumented user 98740 47/50 current_auc = 0.5222457627118644
User 98740 AUC after training: 0.5158898305084746
User 98740 does not improve AUC. Reverting changes.
Training on augumented user 96948 48/50 current_auc = 0.5222457627118644
User 96948 AUC after training: 0.521186440677966
User 96948 does not improve AUC. Reverting changes.
Training on augumented user 110903 49/50 current_auc = 0.5222457627118644
User 110903 AUC after training: 0.5158898305084747
User 110903 does not improve AUC. Reverting changes.
[2024-12-02 18:48:55.765521] start test user 72364 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:56.295707] start test user 72364 131/568 recall augumented users by random, augumented_users = [107928, 120069, 127190, 69350, 86993, 108096, 9329, 56785, 72067, 129280, 29182, 117393, 82424, 53230, 86652, 95612, 90098, 139, 124824, 34770, 3767, 114695, 40778, 94637, 78780, 71117, 123167, 94788, 44573, 125443, 25425, 33627, 90620, 15097, 33102, 62868, 110880, 79290, 70752, 49140, 94127, 54865, 37638, 73083, 94022, 16230, 56747, 16786, 6861, 94123]
[2024-12-02 18:48:56.311497] user = 72364 Cloud 131/568
[2024-12-02 18:48:56.330268] user = 72364 Local 131/568
[2024-12-02 18:48:56.356898] user = 72364 Local+ 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:58.125733] user = 72364 MPDA- 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7494673295454545
Training on augumented user 107928 0/50 current_auc = 0.7494673295454545
User 107928 AUC after training: 0.7492897727272727
User 107928 does not improve AUC. Reverting changes.
Training on augumented user 120069 1/50 current_auc = 0.7494673295454545
User 120069 AUC after training: 0.7496448863636362
User 120069 improves AUC. Keeping the model.
Training on augumented user 127190 2/50 current_auc = 0.7496448863636362
User 127190 AUC after training: 0.7494673295454546
User 127190 does not improve AUC. Reverting changes.
Training on augumented user 69350 3/50 current_auc = 0.7496448863636362
User 69350 AUC after training: 0.7496448863636364
User 69350 improves AUC. Keeping the model.
Training on augumented user 86993 4/50 current_auc = 0.7496448863636364
User 86993 AUC after training: 0.75
User 86993 improves AUC. Keeping the model.
Training on augumented user 108096 5/50 current_auc = 0.75
User 108096 AUC after training: 0.7501775568181819
User 108096 improves AUC. Keeping the model.
Training on augumented user 9329 6/50 current_auc = 0.7501775568181819
User 9329 AUC after training: 0.7501775568181819
User 9329 does not improve AUC. Reverting changes.
Training on augumented user 56785 7/50 current_auc = 0.7501775568181819
User 56785 AUC after training: 0.7505326704545454
User 56785 improves AUC. Keeping the model.
Training on augumented user 72067 8/50 current_auc = 0.7505326704545454
User 72067 AUC after training: 0.7505326704545454
User 72067 does not improve AUC. Reverting changes.
Training on augumented user 129280 9/50 current_auc = 0.7505326704545454
User 129280 AUC after training: 0.7508877840909091
User 129280 improves AUC. Keeping the model.
Training on augumented user 29182 10/50 current_auc = 0.7508877840909091
User 29182 AUC after training: 0.7505326704545454
User 29182 does not improve AUC. Reverting changes.
Training on augumented user 117393 11/50 current_auc = 0.7508877840909091
User 117393 AUC after training: 0.7505326704545454
User 117393 does not improve AUC. Reverting changes.
Training on augumented user 82424 12/50 current_auc = 0.7508877840909091
User 82424 AUC after training: 0.7510653409090908
User 82424 improves AUC. Keeping the model.
Training on augumented user 53230 13/50 current_auc = 0.7510653409090908
User 53230 AUC after training: 0.7508877840909091
User 53230 does not improve AUC. Reverting changes.
Training on augumented user 86652 14/50 current_auc = 0.7510653409090908
User 86652 AUC after training: 0.7503551136363636
User 86652 does not improve AUC. Reverting changes.
Training on augumented user 95612 15/50 current_auc = 0.7510653409090908
User 95612 AUC after training: 0.7498224431818181
User 95612 does not improve AUC. Reverting changes.
Training on augumented user 90098 16/50 current_auc = 0.7510653409090908
User 90098 AUC after training: 0.7514204545454545
User 90098 improves AUC. Keeping the model.
Training on augumented user 139 17/50 current_auc = 0.7514204545454545
User 139 AUC after training: 0.7508877840909091
User 139 does not improve AUC. Reverting changes.
Training on augumented user 124824 18/50 current_auc = 0.7514204545454545
User 124824 AUC after training: 0.7510653409090908
User 124824 does not improve AUC. Reverting changes.
Training on augumented user 34770 19/50 current_auc = 0.7514204545454545
User 34770 AUC after training: 0.7499999999999999
User 34770 does not improve AUC. Reverting changes.
Training on augumented user 3767 20/50 current_auc = 0.7514204545454545
User 3767 AUC after training: 0.751953125
User 3767 improves AUC. Keeping the model.
Training on augumented user 114695 21/50 current_auc = 0.751953125
User 114695 AUC after training: 0.7524857954545454
User 114695 improves AUC. Keeping the model.
Training on augumented user 40778 22/50 current_auc = 0.7524857954545454
User 40778 AUC after training: 0.7517755681818182
User 40778 does not improve AUC. Reverting changes.
Training on augumented user 94637 23/50 current_auc = 0.7524857954545454
User 94637 AUC after training: 0.7517755681818182
User 94637 does not improve AUC. Reverting changes.
Training on augumented user 78780 24/50 current_auc = 0.7524857954545454
User 78780 AUC after training: 0.7521306818181818
User 78780 does not improve AUC. Reverting changes.
Training on augumented user 71117 25/50 current_auc = 0.7524857954545454
User 71117 AUC after training: 0.7521306818181818
User 71117 does not improve AUC. Reverting changes.
Training on augumented user 123167 26/50 current_auc = 0.7524857954545454
User 123167 AUC after training: 0.7523082386363636
User 123167 does not improve AUC. Reverting changes.
Training on augumented user 94788 27/50 current_auc = 0.7524857954545454
User 94788 AUC after training: 0.7521306818181818
User 94788 does not improve AUC. Reverting changes.
Training on augumented user 44573 28/50 current_auc = 0.7524857954545454
User 44573 AUC after training: 0.7524857954545455
User 44573 improves AUC. Keeping the model.
Training on augumented user 125443 29/50 current_auc = 0.7524857954545455
User 125443 AUC after training: 0.7521306818181818
User 125443 does not improve AUC. Reverting changes.
Training on augumented user 25425 30/50 current_auc = 0.7524857954545455
User 25425 AUC after training: 0.7523082386363636
User 25425 does not improve AUC. Reverting changes.
Training on augumented user 33627 31/50 current_auc = 0.7524857954545455
User 33627 AUC after training: 0.7524857954545455
User 33627 does not improve AUC. Reverting changes.
Training on augumented user 90620 32/50 current_auc = 0.7524857954545455
User 90620 AUC after training: 0.7523082386363635
User 90620 does not improve AUC. Reverting changes.
Training on augumented user 15097 33/50 current_auc = 0.7524857954545455
User 15097 AUC after training: 0.7521306818181819
User 15097 does not improve AUC. Reverting changes.
Training on augumented user 33102 34/50 current_auc = 0.7524857954545455
User 33102 AUC after training: 0.7521306818181818
User 33102 does not improve AUC. Reverting changes.
Training on augumented user 62868 35/50 current_auc = 0.7524857954545455
User 62868 AUC after training: 0.7524857954545455
User 62868 does not improve AUC. Reverting changes.
Training on augumented user 110880 36/50 current_auc = 0.7524857954545455
User 110880 AUC after training: 0.7524857954545455
User 110880 does not improve AUC. Reverting changes.
Training on augumented user 79290 37/50 current_auc = 0.7524857954545455
User 79290 AUC after training: 0.7517755681818181
User 79290 does not improve AUC. Reverting changes.
Training on augumented user 70752 38/50 current_auc = 0.7524857954545455
User 70752 AUC after training: 0.7526633522727273
User 70752 improves AUC. Keeping the model.
Training on augumented user 49140 39/50 current_auc = 0.7526633522727273
User 49140 AUC after training: 0.7526633522727273
User 49140 does not improve AUC. Reverting changes.
Training on augumented user 94127 40/50 current_auc = 0.7526633522727273
User 94127 AUC after training: 0.7523082386363635
User 94127 does not improve AUC. Reverting changes.
Training on augumented user 54865 41/50 current_auc = 0.7526633522727273
User 54865 AUC after training: 0.7524857954545454
User 54865 does not improve AUC. Reverting changes.
Training on augumented user 37638 42/50 current_auc = 0.7526633522727273
User 37638 AUC after training: 0.7528409090909092
User 37638 improves AUC. Keeping the model.
Training on augumented user 73083 43/50 current_auc = 0.7528409090909092
User 73083 AUC after training: 0.7530184659090909
User 73083 improves AUC. Keeping the model.
Training on augumented user 94022 44/50 current_auc = 0.7530184659090909
User 94022 AUC after training: 0.7530184659090909
User 94022 does not improve AUC. Reverting changes.
Training on augumented user 16230 45/50 current_auc = 0.7530184659090909
User 16230 AUC after training: 0.7526633522727272
User 16230 does not improve AUC. Reverting changes.
Training on augumented user 56747 46/50 current_auc = 0.7530184659090909
User 56747 AUC after training: 0.7531960227272727
User 56747 improves AUC. Keeping the model.
Training on augumented user 16786 47/50 current_auc = 0.7531960227272727
User 16786 AUC after training: 0.7530184659090909
User 16786 does not improve AUC. Reverting changes.
Training on augumented user 6861 48/50 current_auc = 0.7531960227272727
User 6861 AUC after training: 0.7521306818181818
User 6861 does not improve AUC. Reverting changes.
Training on augumented user 94123 49/50 current_auc = 0.7531960227272727
User 94123 AUC after training: 0.7530184659090908
User 94123 does not improve AUC. Reverting changes.
[2024-12-02 18:49:32.168086] start test user 72375 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:32.979885] start test user 72375 132/568 recall augumented users by random, augumented_users = [62768, 62697, 86501, 83709, 41977, 122296, 100473, 8767, 2373, 96581, 2494, 41796, 32386, 47885, 41792, 113891, 95596, 9631, 17022, 114061, 128442, 63966, 54417, 131681, 21482, 55431, 124532, 16973, 17923, 24723, 38044, 14687, 69845, 44290, 67922, 94881, 24890, 41300, 33829, 129061, 88794, 36634, 44444, 36425, 17562, 32550, 7333, 35101, 95019, 74350]
[2024-12-02 18:49:33.007826] user = 72375 Cloud 132/568
[2024-12-02 18:49:33.046289] user = 72375 Local 132/568
[2024-12-02 18:49:33.242311] user = 72375 Local+ 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:35.425481] user = 72375 MPDA- 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7619047619047619
Training on augumented user 62768 0/50 current_auc = 0.7619047619047619
User 62768 AUC after training: 0.7619047619047619
User 62768 does not improve AUC. Reverting changes.
Training on augumented user 62697 1/50 current_auc = 0.7619047619047619
User 62697 AUC after training: 0.7559523809523809
User 62697 does not improve AUC. Reverting changes.
Training on augumented user 86501 2/50 current_auc = 0.7619047619047619
User 86501 AUC after training: 0.7619047619047619
User 86501 does not improve AUC. Reverting changes.
Training on augumented user 83709 3/50 current_auc = 0.7619047619047619
User 83709 AUC after training: 0.7619047619047619
User 83709 does not improve AUC. Reverting changes.
Training on augumented user 41977 4/50 current_auc = 0.7619047619047619
User 41977 AUC after training: 0.7619047619047619
User 41977 does not improve AUC. Reverting changes.
Training on augumented user 122296 5/50 current_auc = 0.7619047619047619
User 122296 AUC after training: 0.7619047619047619
User 122296 does not improve AUC. Reverting changes.
Training on augumented user 100473 6/50 current_auc = 0.7619047619047619
User 100473 AUC after training: 0.7619047619047619
User 100473 does not improve AUC. Reverting changes.
Training on augumented user 8767 7/50 current_auc = 0.7619047619047619
User 8767 AUC after training: 0.7559523809523809
User 8767 does not improve AUC. Reverting changes.
Training on augumented user 2373 8/50 current_auc = 0.7619047619047619
User 2373 AUC after training: 0.7559523809523809
User 2373 does not improve AUC. Reverting changes.
Training on augumented user 96581 9/50 current_auc = 0.7619047619047619
User 96581 AUC after training: 0.7559523809523809
User 96581 does not improve AUC. Reverting changes.
Training on augumented user 2494 10/50 current_auc = 0.7619047619047619
User 2494 AUC after training: 0.7619047619047619
User 2494 does not improve AUC. Reverting changes.
Training on augumented user 41796 11/50 current_auc = 0.7619047619047619
User 41796 AUC after training: 0.7619047619047619
User 41796 does not improve AUC. Reverting changes.
Training on augumented user 32386 12/50 current_auc = 0.7619047619047619
User 32386 AUC after training: 0.7559523809523809
User 32386 does not improve AUC. Reverting changes.
Training on augumented user 47885 13/50 current_auc = 0.7619047619047619
User 47885 AUC after training: 0.7619047619047619
User 47885 does not improve AUC. Reverting changes.
Training on augumented user 41792 14/50 current_auc = 0.7619047619047619
User 41792 AUC after training: 0.7619047619047619
User 41792 does not improve AUC. Reverting changes.
Training on augumented user 113891 15/50 current_auc = 0.7619047619047619
User 113891 AUC after training: 0.7559523809523809
User 113891 does not improve AUC. Reverting changes.
Training on augumented user 95596 16/50 current_auc = 0.7619047619047619
User 95596 AUC after training: 0.7559523809523809
User 95596 does not improve AUC. Reverting changes.
Training on augumented user 9631 17/50 current_auc = 0.7619047619047619
User 9631 AUC after training: 0.7559523809523809
User 9631 does not improve AUC. Reverting changes.
Training on augumented user 17022 18/50 current_auc = 0.7619047619047619
User 17022 AUC after training: 0.7559523809523809
User 17022 does not improve AUC. Reverting changes.
Training on augumented user 114061 19/50 current_auc = 0.7619047619047619
User 114061 AUC after training: 0.7559523809523809
User 114061 does not improve AUC. Reverting changes.
Training on augumented user 128442 20/50 current_auc = 0.7619047619047619
User 128442 AUC after training: 0.7559523809523809
User 128442 does not improve AUC. Reverting changes.
Training on augumented user 63966 21/50 current_auc = 0.7619047619047619
User 63966 AUC after training: 0.7619047619047619
User 63966 does not improve AUC. Reverting changes.
Training on augumented user 54417 22/50 current_auc = 0.7619047619047619
User 54417 AUC after training: 0.7559523809523809
User 54417 does not improve AUC. Reverting changes.
Training on augumented user 131681 23/50 current_auc = 0.7619047619047619
User 131681 AUC after training: 0.7619047619047619
User 131681 does not improve AUC. Reverting changes.
Training on augumented user 21482 24/50 current_auc = 0.7619047619047619
User 21482 AUC after training: 0.7559523809523809
User 21482 does not improve AUC. Reverting changes.
Training on augumented user 55431 25/50 current_auc = 0.7619047619047619
User 55431 AUC after training: 0.7559523809523809
User 55431 does not improve AUC. Reverting changes.
Training on augumented user 124532 26/50 current_auc = 0.7619047619047619
User 124532 AUC after training: 0.7559523809523809
User 124532 does not improve AUC. Reverting changes.
Training on augumented user 16973 27/50 current_auc = 0.7619047619047619
User 16973 AUC after training: 0.7559523809523809
User 16973 does not improve AUC. Reverting changes.
Training on augumented user 17923 28/50 current_auc = 0.7619047619047619
User 17923 AUC after training: 0.7559523809523809
User 17923 does not improve AUC. Reverting changes.
Training on augumented user 24723 29/50 current_auc = 0.7619047619047619
User 24723 AUC after training: 0.7559523809523809
User 24723 does not improve AUC. Reverting changes.
Training on augumented user 38044 30/50 current_auc = 0.7619047619047619
User 38044 AUC after training: 0.7559523809523809
User 38044 does not improve AUC. Reverting changes.
Training on augumented user 14687 31/50 current_auc = 0.7619047619047619
User 14687 AUC after training: 0.7619047619047619
User 14687 does not improve AUC. Reverting changes.
Training on augumented user 69845 32/50 current_auc = 0.7619047619047619
User 69845 AUC after training: 0.7619047619047619
User 69845 does not improve AUC. Reverting changes.
Training on augumented user 44290 33/50 current_auc = 0.7619047619047619
User 44290 AUC after training: 0.7559523809523809
User 44290 does not improve AUC. Reverting changes.
Training on augumented user 67922 34/50 current_auc = 0.7619047619047619
User 67922 AUC after training: 0.7619047619047619
User 67922 does not improve AUC. Reverting changes.
Training on augumented user 94881 35/50 current_auc = 0.7619047619047619
User 94881 AUC after training: 0.7559523809523809
User 94881 does not improve AUC. Reverting changes.
Training on augumented user 24890 36/50 current_auc = 0.7619047619047619
User 24890 AUC after training: 0.7559523809523809
User 24890 does not improve AUC. Reverting changes.
Training on augumented user 41300 37/50 current_auc = 0.7619047619047619
User 41300 AUC after training: 0.7619047619047619
User 41300 does not improve AUC. Reverting changes.
Training on augumented user 33829 38/50 current_auc = 0.7619047619047619
User 33829 AUC after training: 0.7559523809523809
User 33829 does not improve AUC. Reverting changes.
Training on augumented user 129061 39/50 current_auc = 0.7619047619047619
User 129061 AUC after training: 0.7559523809523809
User 129061 does not improve AUC. Reverting changes.
Training on augumented user 88794 40/50 current_auc = 0.7619047619047619
User 88794 AUC after training: 0.7559523809523809
User 88794 does not improve AUC. Reverting changes.
Training on augumented user 36634 41/50 current_auc = 0.7619047619047619
User 36634 AUC after training: 0.7559523809523809
User 36634 does not improve AUC. Reverting changes.
Training on augumented user 44444 42/50 current_auc = 0.7619047619047619
User 44444 AUC after training: 0.7559523809523809
User 44444 does not improve AUC. Reverting changes.
Training on augumented user 36425 43/50 current_auc = 0.7619047619047619
User 36425 AUC after training: 0.7619047619047619
User 36425 does not improve AUC. Reverting changes.
Training on augumented user 17562 44/50 current_auc = 0.7619047619047619
User 17562 AUC after training: 0.7559523809523809
User 17562 does not improve AUC. Reverting changes.
Training on augumented user 32550 45/50 current_auc = 0.7619047619047619
User 32550 AUC after training: 0.7619047619047619
User 32550 does not improve AUC. Reverting changes.
Training on augumented user 7333 46/50 current_auc = 0.7619047619047619
User 7333 AUC after training: 0.7559523809523809
User 7333 does not improve AUC. Reverting changes.
Training on augumented user 35101 47/50 current_auc = 0.7619047619047619
User 35101 AUC after training: 0.7619047619047619
User 35101 does not improve AUC. Reverting changes.
Training on augumented user 95019 48/50 current_auc = 0.7619047619047619
User 95019 AUC after training: 0.7559523809523809
User 95019 does not improve AUC. Reverting changes.
Training on augumented user 74350 49/50 current_auc = 0.7619047619047619
User 74350 AUC after training: 0.7559523809523809
User 74350 does not improve AUC. Reverting changes.
[2024-12-02 18:50:03.225635] start test user 72381 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:03.704636] start test user 72381 133/568 recall augumented users by random, augumented_users = [42374, 127141, 53072, 134818, 101761, 116467, 27724, 58030, 19406, 44279, 71974, 119140, 32946, 37449, 43593, 28579, 123269, 68490, 46004, 82990, 73173, 11688, 21778, 41893, 99936, 135391, 62649, 92893, 131922, 43666, 114060, 82075, 72597, 107090, 26918, 64240, 124347, 111774, 70260, 17520, 116756, 90524, 80185, 69529, 62681, 36011, 43659, 51231, 82518, 60843]
[2024-12-02 18:50:03.734849] user = 72381 Cloud 133/568
[2024-12-02 18:50:03.828897] user = 72381 Local 133/568
[2024-12-02 18:50:03.959200] user = 72381 Local+ 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:06.523018] user = 72381 MPDA- 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6690151601939893
Training on augumented user 42374 0/50 current_auc = 0.6690151601939893
User 42374 AUC after training: 0.66890059953412
User 42374 does not improve AUC. Reverting changes.
Training on augumented user 127141 1/50 current_auc = 0.6690151601939893
User 127141 AUC after training: 0.6688815060908084
User 127141 does not improve AUC. Reverting changes.
Training on augumented user 53072 2/50 current_auc = 0.6690151601939893
User 53072 AUC after training: 0.6693397487302861
User 53072 improves AUC. Keeping the model.
Training on augumented user 134818 3/50 current_auc = 0.6693397487302861
User 134818 AUC after training: 0.6689196929774317
User 134818 does not improve AUC. Reverting changes.
Training on augumented user 101761 4/50 current_auc = 0.6693397487302861
User 101761 AUC after training: 0.6690151601939894
User 101761 does not improve AUC. Reverting changes.
Training on augumented user 116467 5/50 current_auc = 0.6693397487302861
User 116467 AUC after training: 0.6690342536373008
User 116467 does not improve AUC. Reverting changes.
Training on augumented user 27724 6/50 current_auc = 0.6693397487302861
User 27724 AUC after training: 0.6689960667506778
User 27724 does not improve AUC. Reverting changes.
Training on augumented user 58030 7/50 current_auc = 0.6693397487302861
User 58030 AUC after training: 0.6689769733073663
User 58030 does not improve AUC. Reverting changes.
Training on augumented user 19406 8/50 current_auc = 0.6693397487302861
User 19406 AUC after training: 0.6690915339672356
User 19406 does not improve AUC. Reverting changes.
Training on augumented user 44279 9/50 current_auc = 0.6693397487302861
User 44279 AUC after training: 0.6689578798640547
User 44279 does not improve AUC. Reverting changes.
Training on augumented user 71974 10/50 current_auc = 0.6693397487302861
User 71974 AUC after training: 0.6687860388742506
User 71974 does not improve AUC. Reverting changes.
Training on augumented user 119140 11/50 current_auc = 0.6693397487302861
User 119140 AUC after training: 0.6693015618436629
User 119140 does not improve AUC. Reverting changes.
Training on augumented user 32946 12/50 current_auc = 0.6693397487302861
User 32946 AUC after training: 0.6689960667506778
User 32946 does not improve AUC. Reverting changes.
Training on augumented user 37449 13/50 current_auc = 0.6693397487302861
User 37449 AUC after training: 0.6691297208538589
User 37449 does not improve AUC. Reverting changes.
Training on augumented user 43593 14/50 current_auc = 0.6693397487302861
User 43593 AUC after training: 0.6691488142971704
User 43593 does not improve AUC. Reverting changes.
Training on augumented user 28579 15/50 current_auc = 0.6693397487302861
User 28579 AUC after training: 0.6680032076984763
User 28579 does not improve AUC. Reverting changes.
Training on augumented user 123269 16/50 current_auc = 0.6693397487302861
User 123269 AUC after training: 0.6693015618436629
User 123269 does not improve AUC. Reverting changes.
Training on augumented user 68490 17/50 current_auc = 0.6693397487302861
User 68490 AUC after training: 0.668938786420743
User 68490 does not improve AUC. Reverting changes.
Training on augumented user 46004 18/50 current_auc = 0.6693397487302861
User 46004 AUC after training: 0.6689960667506777
User 46004 does not improve AUC. Reverting changes.
Training on augumented user 82990 19/50 current_auc = 0.6693397487302861
User 82990 AUC after training: 0.6684232634513309
User 82990 does not improve AUC. Reverting changes.
Training on augumented user 73173 20/50 current_auc = 0.6693397487302861
User 73173 AUC after training: 0.6689769733073663
User 73173 does not improve AUC. Reverting changes.
Training on augumented user 11688 21/50 current_auc = 0.6693397487302861
User 11688 AUC after training: 0.6690915339672356
User 11688 does not improve AUC. Reverting changes.
Training on augumented user 21778 22/50 current_auc = 0.6693397487302861
User 21778 AUC after training: 0.6693588421735976
User 21778 improves AUC. Keeping the model.
Training on augumented user 41893 23/50 current_auc = 0.6693588421735976
User 41893 AUC after training: 0.6688624126474969
User 41893 does not improve AUC. Reverting changes.
Training on augumented user 99936 24/50 current_auc = 0.6693588421735976
User 99936 AUC after training: 0.6689769733073663
User 99936 does not improve AUC. Reverting changes.
Training on augumented user 135391 25/50 current_auc = 0.6693588421735976
User 135391 AUC after training: 0.6686523847710696
User 135391 does not improve AUC. Reverting changes.
Training on augumented user 62649 26/50 current_auc = 0.6693588421735976
User 62649 AUC after training: 0.6691488142971703
User 62649 does not improve AUC. Reverting changes.
Training on augumented user 92893 27/50 current_auc = 0.6693588421735976
User 92893 AUC after training: 0.667621338832245
User 92893 does not improve AUC. Reverting changes.
Training on augumented user 131922 28/50 current_auc = 0.6693588421735976
User 131922 AUC after training: 0.6690151601939893
User 131922 does not improve AUC. Reverting changes.
Training on augumented user 43666 29/50 current_auc = 0.6693588421735976
User 43666 AUC after training: 0.669339748730286
User 43666 does not improve AUC. Reverting changes.
Training on augumented user 114060 30/50 current_auc = 0.6693588421735976
User 114060 AUC after training: 0.6690724405239241
User 114060 does not improve AUC. Reverting changes.
Training on augumented user 82075 31/50 current_auc = 0.6693588421735976
User 82075 AUC after training: 0.6690915339672356
User 82075 does not improve AUC. Reverting changes.
Training on augumented user 72597 32/50 current_auc = 0.6693588421735976
User 72597 AUC after training: 0.6687096651010043
User 72597 does not improve AUC. Reverting changes.
Training on augumented user 107090 33/50 current_auc = 0.6693588421735976
User 107090 AUC after training: 0.6685569175545117
User 107090 does not improve AUC. Reverting changes.
Training on augumented user 26918 34/50 current_auc = 0.6693588421735976
User 26918 AUC after training: 0.6691488142971703
User 26918 does not improve AUC. Reverting changes.
Training on augumented user 64240 35/50 current_auc = 0.6693588421735976
User 64240 AUC after training: 0.6690724405239241
User 64240 does not improve AUC. Reverting changes.
Training on augumented user 124347 36/50 current_auc = 0.6693588421735976
User 124347 AUC after training: 0.6681368618016573
User 124347 does not improve AUC. Reverting changes.
Training on augumented user 111774 37/50 current_auc = 0.6693588421735976
User 111774 AUC after training: 0.669034253637301
User 111774 does not improve AUC. Reverting changes.
Training on augumented user 70260 38/50 current_auc = 0.6693588421735976
User 70260 AUC after training: 0.6678504601519839
User 70260 does not improve AUC. Reverting changes.
Training on augumented user 17520 39/50 current_auc = 0.6693588421735976
User 17520 AUC after training: 0.6689196929774316
User 17520 does not improve AUC. Reverting changes.
Training on augumented user 116756 40/50 current_auc = 0.6693588421735976
User 116756 AUC after training: 0.6693588421735976
User 116756 does not improve AUC. Reverting changes.
Training on augumented user 90524 41/50 current_auc = 0.6693588421735976
User 90524 AUC after training: 0.6692633749570397
User 90524 does not improve AUC. Reverting changes.
Training on augumented user 80185 42/50 current_auc = 0.6693588421735976
User 80185 AUC after training: 0.6698361782563866
User 80185 improves AUC. Keeping the model.
Training on augumented user 69529 43/50 current_auc = 0.6698361782563866
User 69529 AUC after training: 0.6699889258028793
User 69529 improves AUC. Keeping the model.
Training on augumented user 62681 44/50 current_auc = 0.6699889258028793
User 62681 AUC after training: 0.669740711039829
User 62681 does not improve AUC. Reverting changes.
Training on augumented user 36011 45/50 current_auc = 0.6699889258028793
User 36011 AUC after training: 0.6699507389162561
User 36011 does not improve AUC. Reverting changes.
Training on augumented user 43659 46/50 current_auc = 0.6699889258028793
User 43659 AUC after training: 0.6702180471226181
User 43659 improves AUC. Keeping the model.
Training on augumented user 51231 47/50 current_auc = 0.6702180471226181
User 51231 AUC after training: 0.6699316454729445
User 51231 does not improve AUC. Reverting changes.
Training on augumented user 82518 48/50 current_auc = 0.6702180471226181
User 82518 AUC after training: 0.6697598044831405
User 82518 does not improve AUC. Reverting changes.
Training on augumented user 60843 49/50 current_auc = 0.6702180471226181
User 60843 AUC after training: 0.6701225799060604
User 60843 does not improve AUC. Reverting changes.
[2024-12-02 18:50:40.932684] start test user 72401 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:41.432361] start test user 72401 134/568 recall augumented users by random, augumented_users = [94449, 47187, 131987, 112104, 121132, 15718, 108213, 99751, 3720, 78373, 131501, 911, 62620, 75966, 27490, 121204, 124240, 7055, 7232, 74950, 2450, 89203, 51993, 12798, 83589, 107512, 89886, 48739, 35709, 15665, 61260, 125200, 47317, 50363, 99868, 38952, 93852, 90973, 111710, 108861, 122130, 19347, 122975, 120429, 115218, 89273, 16858, 20228, 1579, 38993]
[2024-12-02 18:50:41.451604] user = 72401 Cloud 134/568
[2024-12-02 18:50:41.505688] user = 72401 Local 134/568
[2024-12-02 18:50:41.880744] user = 72401 Local+ 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:44.528527] user = 72401 MPDA- 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4574575416176223
Training on augumented user 94449 0/50 current_auc = 0.4574575416176223
User 94449 AUC after training: 0.45846645367412137
User 94449 improves AUC. Keeping the model.
Training on augumented user 47187 1/50 current_auc = 0.45846645367412137
User 47187 AUC after training: 0.458634605683538
User 47187 improves AUC. Keeping the model.
Training on augumented user 131987 2/50 current_auc = 0.458634605683538
User 131987 AUC after training: 0.45972759374474526
User 131987 improves AUC. Keeping the model.
Training on augumented user 112104 3/50 current_auc = 0.45972759374474526
User 112104 AUC after training: 0.4606524297965361
User 112104 improves AUC. Keeping the model.
Training on augumented user 121132 4/50 current_auc = 0.4606524297965361
User 121132 AUC after training: 0.45989574575416176
User 121132 does not improve AUC. Reverting changes.
Training on augumented user 15718 5/50 current_auc = 0.4606524297965361
User 15718 AUC after training: 0.4540104254245838
User 15718 does not improve AUC. Reverting changes.
Training on augumented user 108213 6/50 current_auc = 0.4606524297965361
User 108213 AUC after training: 0.46031612577770303
User 108213 does not improve AUC. Reverting changes.
Training on augumented user 99751 7/50 current_auc = 0.4606524297965361
User 99751 AUC after training: 0.4609887338153691
User 99751 improves AUC. Keeping the model.
Training on augumented user 3720 8/50 current_auc = 0.4609887338153691
User 3720 AUC after training: 0.4625021019001177
User 3720 improves AUC. Keeping the model.
Training on augumented user 78373 9/50 current_auc = 0.4625021019001177
User 78373 AUC after training: 0.4627543299142425
User 78373 improves AUC. Keeping the model.
Training on augumented user 131501 10/50 current_auc = 0.4627543299142425
User 131501 AUC after training: 0.45997982175887
User 131501 does not improve AUC. Reverting changes.
Training on augumented user 911 11/50 current_auc = 0.4627543299142425
User 911 AUC after training: 0.46283840591895076
User 911 improves AUC. Keeping the model.
Training on augumented user 62620 12/50 current_auc = 0.46283840591895076
User 62620 AUC after training: 0.4619135698671599
User 62620 does not improve AUC. Reverting changes.
Training on augumented user 75966 13/50 current_auc = 0.46283840591895076
User 75966 AUC after training: 0.4609046578106608
User 75966 does not improve AUC. Reverting changes.
Training on augumented user 27490 14/50 current_auc = 0.46283840591895076
User 27490 AUC after training: 0.4623339498907012
User 27490 does not improve AUC. Reverting changes.
Training on augumented user 121204 15/50 current_auc = 0.46283840591895076
User 121204 AUC after training: 0.4620817218765764
User 121204 does not improve AUC. Reverting changes.
Training on augumented user 124240 16/50 current_auc = 0.46283840591895076
User 124240 AUC after training: 0.4617454178577434
User 124240 does not improve AUC. Reverting changes.
Training on augumented user 7055 17/50 current_auc = 0.46283840591895076
User 7055 AUC after training: 0.46283840591895076
User 7055 does not improve AUC. Reverting changes.
Training on augumented user 7232 18/50 current_auc = 0.46283840591895076
User 7232 AUC after training: 0.4609887338153691
User 7232 does not improve AUC. Reverting changes.
Training on augumented user 74950 19/50 current_auc = 0.46283840591895076
User 74950 AUC after training: 0.46367916596603326
User 74950 improves AUC. Keeping the model.
Training on augumented user 2450 20/50 current_auc = 0.46367916596603326
User 2450 AUC after training: 0.46334286194720026
User 2450 does not improve AUC. Reverting changes.
Training on augumented user 89203 21/50 current_auc = 0.46367916596603326
User 89203 AUC after training: 0.4640995459895746
User 89203 improves AUC. Keeping the model.
Training on augumented user 51993 22/50 current_auc = 0.4640995459895746
User 51993 AUC after training: 0.4601479737682865
User 51993 does not improve AUC. Reverting changes.
Training on augumented user 12798 23/50 current_auc = 0.4640995459895746
User 12798 AUC after training: 0.4640154699848663
User 12798 does not improve AUC. Reverting changes.
Training on augumented user 83589 24/50 current_auc = 0.4640995459895746
User 83589 AUC after training: 0.46250210190011765
User 83589 does not improve AUC. Reverting changes.
Training on augumented user 107512 25/50 current_auc = 0.4640995459895746
User 107512 AUC after training: 0.4622498738859929
User 107512 does not improve AUC. Reverting changes.
Training on augumented user 89886 26/50 current_auc = 0.4640995459895746
User 89886 AUC after training: 0.4627543299142425
User 89886 does not improve AUC. Reverting changes.
Training on augumented user 48739 27/50 current_auc = 0.4640995459895746
User 48739 AUC after training: 0.46384731797544976
User 48739 does not improve AUC. Reverting changes.
Training on augumented user 35709 28/50 current_auc = 0.4640995459895746
User 35709 AUC after training: 0.46384731797544976
User 35709 does not improve AUC. Reverting changes.
Training on augumented user 15665 29/50 current_auc = 0.4640995459895746
User 15665 AUC after training: 0.46216579788128465
User 15665 does not improve AUC. Reverting changes.
Training on augumented user 61260 30/50 current_auc = 0.4640995459895746
User 61260 AUC after training: 0.46393139398015804
User 61260 does not improve AUC. Reverting changes.
Training on augumented user 125200 31/50 current_auc = 0.4640995459895746
User 125200 AUC after training: 0.4640995459895746
User 125200 does not improve AUC. Reverting changes.
Training on augumented user 47317 32/50 current_auc = 0.4640995459895746
User 47317 AUC after training: 0.4647721540272406
User 47317 improves AUC. Keeping the model.
Training on augumented user 50363 33/50 current_auc = 0.4647721540272406
User 50363 AUC after training: 0.46451992601311587
User 50363 does not improve AUC. Reverting changes.
Training on augumented user 99868 34/50 current_auc = 0.4647721540272406
User 99868 AUC after training: 0.46418362199428276
User 99868 does not improve AUC. Reverting changes.
Training on augumented user 38952 35/50 current_auc = 0.4647721540272406
User 38952 AUC after training: 0.4643517740036993
User 38952 does not improve AUC. Reverting changes.
Training on augumented user 93852 36/50 current_auc = 0.4647721540272406
User 93852 AUC after training: 0.46536068606019837
User 93852 improves AUC. Keeping the model.
Training on augumented user 90973 37/50 current_auc = 0.46536068606019837
User 90973 AUC after training: 0.46578106608373965
User 90973 improves AUC. Keeping the model.
Training on augumented user 111710 38/50 current_auc = 0.46578106608373965
User 111710 AUC after training: 0.46451992601311587
User 111710 does not improve AUC. Reverting changes.
Training on augumented user 108861 39/50 current_auc = 0.46578106608373965
User 108861 AUC after training: 0.46527661005549015
User 108861 does not improve AUC. Reverting changes.
Training on augumented user 122130 40/50 current_auc = 0.46578106608373965
User 122130 AUC after training: 0.46611737010257276
User 122130 improves AUC. Keeping the model.
Training on augumented user 19347 41/50 current_auc = 0.46611737010257276
User 19347 AUC after training: 0.46561291407432326
User 19347 does not improve AUC. Reverting changes.
Training on augumented user 122975 42/50 current_auc = 0.46611737010257276
User 122975 AUC after training: 0.46451992601311587
User 122975 does not improve AUC. Reverting changes.
Training on augumented user 120429 43/50 current_auc = 0.46611737010257276
User 120429 AUC after training: 0.46409954598957454
User 120429 does not improve AUC. Reverting changes.
Training on augumented user 115218 44/50 current_auc = 0.46611737010257276
User 115218 AUC after training: 0.46527661005549015
User 115218 does not improve AUC. Reverting changes.
Training on augumented user 89273 45/50 current_auc = 0.46611737010257276
User 89273 AUC after training: 0.46485623003194887
User 89273 does not improve AUC. Reverting changes.
Training on augumented user 16858 46/50 current_auc = 0.46611737010257276
User 16858 AUC after training: 0.4656129140743232
User 16858 does not improve AUC. Reverting changes.
Training on augumented user 20228 47/50 current_auc = 0.46611737010257276
User 20228 AUC after training: 0.4661173701025727
User 20228 does not improve AUC. Reverting changes.
Training on augumented user 1579 48/50 current_auc = 0.46611737010257276
User 1579 AUC after training: 0.4656969900790314
User 1579 does not improve AUC. Reverting changes.
Training on augumented user 38993 49/50 current_auc = 0.46611737010257276
User 38993 AUC after training: 0.46544476206490665
User 38993 does not improve AUC. Reverting changes.
[2024-12-02 18:51:16.286051] start test user 72464 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:16.775055] start test user 72464 135/568 recall augumented users by random, augumented_users = [81659, 14401, 76170, 73878, 53359, 36675, 33631, 120338, 98461, 67309, 37573, 68347, 54337, 399, 32799, 105228, 45588, 23035, 3568, 101905, 94820, 26142, 76292, 68726, 65994, 54886, 49390, 90881, 101632, 29718, 16437, 34840, 112603, 97836, 103886, 17654, 28633, 35889, 12408, 21592, 80825, 23665, 68633, 68785, 112459, 98646, 54592, 136529, 11976, 68540]
[2024-12-02 18:51:16.804323] user = 72464 Cloud 135/568
[2024-12-02 18:51:16.818630] user = 72464 Local 135/568
[2024-12-02 18:51:16.899464] user = 72464 Local+ 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:20.045646] user = 72464 MPDA- 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5685096153846154
Training on augumented user 81659 0/50 current_auc = 0.5685096153846154
User 81659 AUC after training: 0.5688100961538461
User 81659 improves AUC. Keeping the model.
Training on augumented user 14401 1/50 current_auc = 0.5688100961538461
User 14401 AUC after training: 0.5700120192307692
User 14401 improves AUC. Keeping the model.
Training on augumented user 76170 2/50 current_auc = 0.5700120192307692
User 76170 AUC after training: 0.5700120192307692
User 76170 does not improve AUC. Reverting changes.
Training on augumented user 73878 3/50 current_auc = 0.5700120192307692
User 73878 AUC after training: 0.5706129807692308
User 73878 improves AUC. Keeping the model.
Training on augumented user 53359 4/50 current_auc = 0.5706129807692308
User 53359 AUC after training: 0.5673076923076923
User 53359 does not improve AUC. Reverting changes.
Training on augumented user 36675 5/50 current_auc = 0.5706129807692308
User 36675 AUC after training: 0.5688100961538461
User 36675 does not improve AUC. Reverting changes.
Training on augumented user 33631 6/50 current_auc = 0.5706129807692308
User 33631 AUC after training: 0.5694110576923077
User 33631 does not improve AUC. Reverting changes.
Training on augumented user 120338 7/50 current_auc = 0.5706129807692308
User 120338 AUC after training: 0.5694110576923077
User 120338 does not improve AUC. Reverting changes.
Training on augumented user 98461 8/50 current_auc = 0.5706129807692308
User 98461 AUC after training: 0.5706129807692308
User 98461 does not improve AUC. Reverting changes.
Training on augumented user 67309 9/50 current_auc = 0.5706129807692308
User 67309 AUC after training: 0.5676081730769231
User 67309 does not improve AUC. Reverting changes.
Training on augumented user 37573 10/50 current_auc = 0.5706129807692308
User 37573 AUC after training: 0.5700120192307693
User 37573 does not improve AUC. Reverting changes.
Training on augumented user 68347 11/50 current_auc = 0.5706129807692308
User 68347 AUC after training: 0.5712139423076923
User 68347 improves AUC. Keeping the model.
Training on augumented user 54337 12/50 current_auc = 0.5712139423076923
User 54337 AUC after training: 0.5703125
User 54337 does not improve AUC. Reverting changes.
Training on augumented user 399 13/50 current_auc = 0.5712139423076923
User 399 AUC after training: 0.5721153846153846
User 399 improves AUC. Keeping the model.
Training on augumented user 32799 14/50 current_auc = 0.5721153846153846
User 32799 AUC after training: 0.5703125
User 32799 does not improve AUC. Reverting changes.
Training on augumented user 105228 15/50 current_auc = 0.5721153846153846
User 105228 AUC after training: 0.5691105769230769
User 105228 does not improve AUC. Reverting changes.
Training on augumented user 45588 16/50 current_auc = 0.5721153846153846
User 45588 AUC after training: 0.5712139423076923
User 45588 does not improve AUC. Reverting changes.
Training on augumented user 23035 17/50 current_auc = 0.5721153846153846
User 23035 AUC after training: 0.5646033653846153
User 23035 does not improve AUC. Reverting changes.
Training on augumented user 3568 18/50 current_auc = 0.5721153846153846
User 3568 AUC after training: 0.5721153846153846
User 3568 does not improve AUC. Reverting changes.
Training on augumented user 101905 19/50 current_auc = 0.5721153846153846
User 101905 AUC after training: 0.5691105769230769
User 101905 does not improve AUC. Reverting changes.
Training on augumented user 94820 20/50 current_auc = 0.5721153846153846
User 94820 AUC after training: 0.5658052884615385
User 94820 does not improve AUC. Reverting changes.
Training on augumented user 26142 21/50 current_auc = 0.5721153846153846
User 26142 AUC after training: 0.5709134615384616
User 26142 does not improve AUC. Reverting changes.
Training on augumented user 76292 22/50 current_auc = 0.5721153846153846
User 76292 AUC after training: 0.5700120192307692
User 76292 does not improve AUC. Reverting changes.
Training on augumented user 68726 23/50 current_auc = 0.5721153846153846
User 68726 AUC after training: 0.5691105769230769
User 68726 does not improve AUC. Reverting changes.
Training on augumented user 65994 24/50 current_auc = 0.5721153846153846
User 65994 AUC after training: 0.5697115384615384
User 65994 does not improve AUC. Reverting changes.
Training on augumented user 54886 25/50 current_auc = 0.5721153846153846
User 54886 AUC after training: 0.5697115384615384
User 54886 does not improve AUC. Reverting changes.
Training on augumented user 49390 26/50 current_auc = 0.5721153846153846
User 49390 AUC after training: 0.5724158653846154
User 49390 improves AUC. Keeping the model.
Training on augumented user 90881 27/50 current_auc = 0.5724158653846154
User 90881 AUC after training: 0.5700120192307693
User 90881 does not improve AUC. Reverting changes.
Training on augumented user 101632 28/50 current_auc = 0.5724158653846154
User 101632 AUC after training: 0.5706129807692308
User 101632 does not improve AUC. Reverting changes.
Training on augumented user 29718 29/50 current_auc = 0.5724158653846154
User 29718 AUC after training: 0.5709134615384615
User 29718 does not improve AUC. Reverting changes.
Training on augumented user 16437 30/50 current_auc = 0.5724158653846154
User 16437 AUC after training: 0.5715144230769231
User 16437 does not improve AUC. Reverting changes.
Training on augumented user 34840 31/50 current_auc = 0.5724158653846154
User 34840 AUC after training: 0.5712139423076923
User 34840 does not improve AUC. Reverting changes.
Training on augumented user 112603 32/50 current_auc = 0.5724158653846154
User 112603 AUC after training: 0.5712139423076923
User 112603 does not improve AUC. Reverting changes.
Training on augumented user 97836 33/50 current_auc = 0.5724158653846154
User 97836 AUC after training: 0.5694110576923077
User 97836 does not improve AUC. Reverting changes.
Training on augumented user 103886 34/50 current_auc = 0.5724158653846154
User 103886 AUC after training: 0.56640625
User 103886 does not improve AUC. Reverting changes.
Training on augumented user 17654 35/50 current_auc = 0.5724158653846154
User 17654 AUC after training: 0.5700120192307693
User 17654 does not improve AUC. Reverting changes.
Training on augumented user 28633 36/50 current_auc = 0.5724158653846154
User 28633 AUC after training: 0.5691105769230769
User 28633 does not improve AUC. Reverting changes.
Training on augumented user 35889 37/50 current_auc = 0.5724158653846154
User 35889 AUC after training: 0.5715144230769231
User 35889 does not improve AUC. Reverting changes.
Training on augumented user 12408 38/50 current_auc = 0.5724158653846154
User 12408 AUC after training: 0.5712139423076923
User 12408 does not improve AUC. Reverting changes.
Training on augumented user 21592 39/50 current_auc = 0.5724158653846154
User 21592 AUC after training: 0.5691105769230769
User 21592 does not improve AUC. Reverting changes.
Training on augumented user 80825 40/50 current_auc = 0.5724158653846154
User 80825 AUC after training: 0.571814903846154
User 80825 does not improve AUC. Reverting changes.
Training on augumented user 23665 41/50 current_auc = 0.5724158653846154
User 23665 AUC after training: 0.5736177884615385
User 23665 improves AUC. Keeping the model.
Training on augumented user 68633 42/50 current_auc = 0.5736177884615385
User 68633 AUC after training: 0.5724158653846154
User 68633 does not improve AUC. Reverting changes.
Training on augumented user 68785 43/50 current_auc = 0.5736177884615385
User 68785 AUC after training: 0.5730168269230769
User 68785 does not improve AUC. Reverting changes.
Training on augumented user 112459 44/50 current_auc = 0.5736177884615385
User 112459 AUC after training: 0.5718149038461539
User 112459 does not improve AUC. Reverting changes.
Training on augumented user 98646 45/50 current_auc = 0.5736177884615385
User 98646 AUC after training: 0.573016826923077
User 98646 does not improve AUC. Reverting changes.
Training on augumented user 54592 46/50 current_auc = 0.5736177884615385
User 54592 AUC after training: 0.5712139423076923
User 54592 does not improve AUC. Reverting changes.
Training on augumented user 136529 47/50 current_auc = 0.5736177884615385
User 136529 AUC after training: 0.5697115384615384
User 136529 does not improve AUC. Reverting changes.
Training on augumented user 11976 48/50 current_auc = 0.5736177884615385
User 11976 AUC after training: 0.5703125
User 11976 does not improve AUC. Reverting changes.
Training on augumented user 68540 49/50 current_auc = 0.5736177884615385
User 68540 AUC after training: 0.5721153846153846
User 68540 does not improve AUC. Reverting changes.
[2024-12-02 18:51:47.554635] start test user 72504 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:47.988309] start test user 72504 136/568 recall augumented users by random, augumented_users = [67879, 81083, 71320, 85837, 63929, 138373, 14186, 66412, 57963, 9375, 76666, 31527, 29893, 26852, 56101, 68377, 6480, 53797, 136072, 26819, 135259, 100257, 4696, 69442, 48151, 124426, 83220, 34233, 107720, 92937, 110643, 4940, 112950, 96163, 68057, 115459, 37371, 26010, 2043, 5905, 92987, 106538, 19503, 88574, 1582, 104908, 97304, 8265, 71518, 7660]
[2024-12-02 18:51:48.004032] user = 72504 Cloud 136/568
[2024-12-02 18:51:48.014585] user = 72504 Local 136/568
[2024-12-02 18:51:48.059656] user = 72504 Local+ 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:50.641589] user = 72504 MPDA- 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8173913043478261
Training on augumented user 67879 0/50 current_auc = 0.8173913043478261
User 67879 AUC after training: 0.8173913043478261
User 67879 does not improve AUC. Reverting changes.
Training on augumented user 81083 1/50 current_auc = 0.8173913043478261
User 81083 AUC after training: 0.8165217391304347
User 81083 does not improve AUC. Reverting changes.
Training on augumented user 71320 2/50 current_auc = 0.8173913043478261
User 71320 AUC after training: 0.8173913043478261
User 71320 does not improve AUC. Reverting changes.
Training on augumented user 85837 3/50 current_auc = 0.8173913043478261
User 85837 AUC after training: 0.8165217391304347
User 85837 does not improve AUC. Reverting changes.
Training on augumented user 63929 4/50 current_auc = 0.8173913043478261
User 63929 AUC after training: 0.8165217391304347
User 63929 does not improve AUC. Reverting changes.
Training on augumented user 138373 5/50 current_auc = 0.8173913043478261
User 138373 AUC after training: 0.8173913043478261
User 138373 does not improve AUC. Reverting changes.
Training on augumented user 14186 6/50 current_auc = 0.8173913043478261
User 14186 AUC after training: 0.8173913043478261
User 14186 does not improve AUC. Reverting changes.
Training on augumented user 66412 7/50 current_auc = 0.8173913043478261
User 66412 AUC after training: 0.8173913043478261
User 66412 does not improve AUC. Reverting changes.
Training on augumented user 57963 8/50 current_auc = 0.8173913043478261
User 57963 AUC after training: 0.8173913043478261
User 57963 does not improve AUC. Reverting changes.
Training on augumented user 9375 9/50 current_auc = 0.8173913043478261
User 9375 AUC after training: 0.8165217391304347
User 9375 does not improve AUC. Reverting changes.
Training on augumented user 76666 10/50 current_auc = 0.8173913043478261
User 76666 AUC after training: 0.8173913043478261
User 76666 does not improve AUC. Reverting changes.
Training on augumented user 31527 11/50 current_auc = 0.8173913043478261
User 31527 AUC after training: 0.8173913043478261
User 31527 does not improve AUC. Reverting changes.
Training on augumented user 29893 12/50 current_auc = 0.8173913043478261
User 29893 AUC after training: 0.8165217391304347
User 29893 does not improve AUC. Reverting changes.
Training on augumented user 26852 13/50 current_auc = 0.8173913043478261
User 26852 AUC after training: 0.8191304347826087
User 26852 improves AUC. Keeping the model.
Training on augumented user 56101 14/50 current_auc = 0.8191304347826087
User 56101 AUC after training: 0.8208695652173912
User 56101 improves AUC. Keeping the model.
Training on augumented user 68377 15/50 current_auc = 0.8208695652173912
User 68377 AUC after training: 0.8208695652173912
User 68377 does not improve AUC. Reverting changes.
Training on augumented user 6480 16/50 current_auc = 0.8208695652173912
User 6480 AUC after training: 0.8208695652173912
User 6480 does not improve AUC. Reverting changes.
Training on augumented user 53797 17/50 current_auc = 0.8208695652173912
User 53797 AUC after training: 0.8208695652173912
User 53797 does not improve AUC. Reverting changes.
Training on augumented user 136072 18/50 current_auc = 0.8208695652173912
User 136072 AUC after training: 0.8182608695652174
User 136072 does not improve AUC. Reverting changes.
Training on augumented user 26819 19/50 current_auc = 0.8208695652173912
User 26819 AUC after training: 0.8208695652173912
User 26819 does not improve AUC. Reverting changes.
Training on augumented user 135259 20/50 current_auc = 0.8208695652173912
User 135259 AUC after training: 0.8208695652173912
User 135259 does not improve AUC. Reverting changes.
Training on augumented user 100257 21/50 current_auc = 0.8208695652173912
User 100257 AUC after training: 0.8208695652173912
User 100257 does not improve AUC. Reverting changes.
Training on augumented user 4696 22/50 current_auc = 0.8208695652173912
User 4696 AUC after training: 0.8217391304347825
User 4696 improves AUC. Keeping the model.
Training on augumented user 69442 23/50 current_auc = 0.8217391304347825
User 69442 AUC after training: 0.8208695652173912
User 69442 does not improve AUC. Reverting changes.
Training on augumented user 48151 24/50 current_auc = 0.8217391304347825
User 48151 AUC after training: 0.8226086956521739
User 48151 improves AUC. Keeping the model.
Training on augumented user 124426 25/50 current_auc = 0.8226086956521739
User 124426 AUC after training: 0.8234782608695651
User 124426 improves AUC. Keeping the model.
Training on augumented user 83220 26/50 current_auc = 0.8234782608695651
User 83220 AUC after training: 0.8234782608695651
User 83220 does not improve AUC. Reverting changes.
Training on augumented user 34233 27/50 current_auc = 0.8234782608695651
User 34233 AUC after training: 0.8234782608695651
User 34233 does not improve AUC. Reverting changes.
Training on augumented user 107720 28/50 current_auc = 0.8234782608695651
User 107720 AUC after training: 0.8165217391304347
User 107720 does not improve AUC. Reverting changes.
Training on augumented user 92937 29/50 current_auc = 0.8234782608695651
User 92937 AUC after training: 0.8234782608695651
User 92937 does not improve AUC. Reverting changes.
Training on augumented user 110643 30/50 current_auc = 0.8234782608695651
User 110643 AUC after training: 0.8234782608695651
User 110643 does not improve AUC. Reverting changes.
Training on augumented user 4940 31/50 current_auc = 0.8234782608695651
User 4940 AUC after training: 0.8234782608695651
User 4940 does not improve AUC. Reverting changes.
Training on augumented user 112950 32/50 current_auc = 0.8234782608695651
User 112950 AUC after training: 0.8234782608695651
User 112950 does not improve AUC. Reverting changes.
Training on augumented user 96163 33/50 current_auc = 0.8234782608695651
User 96163 AUC after training: 0.8234782608695651
User 96163 does not improve AUC. Reverting changes.
Training on augumented user 68057 34/50 current_auc = 0.8234782608695651
User 68057 AUC after training: 0.8234782608695651
User 68057 does not improve AUC. Reverting changes.
Training on augumented user 115459 35/50 current_auc = 0.8234782608695651
User 115459 AUC after training: 0.8269565217391304
User 115459 improves AUC. Keeping the model.
Training on augumented user 37371 36/50 current_auc = 0.8269565217391304
User 37371 AUC after training: 0.8278260869565216
User 37371 improves AUC. Keeping the model.
Training on augumented user 26010 37/50 current_auc = 0.8278260869565216
User 26010 AUC after training: 0.8269565217391304
User 26010 does not improve AUC. Reverting changes.
Training on augumented user 2043 38/50 current_auc = 0.8278260869565216
User 2043 AUC after training: 0.8278260869565216
User 2043 does not improve AUC. Reverting changes.
Training on augumented user 5905 39/50 current_auc = 0.8278260869565216
User 5905 AUC after training: 0.8269565217391304
User 5905 does not improve AUC. Reverting changes.
Training on augumented user 92987 40/50 current_auc = 0.8278260869565216
User 92987 AUC after training: 0.8278260869565216
User 92987 does not improve AUC. Reverting changes.
Training on augumented user 106538 41/50 current_auc = 0.8278260869565216
User 106538 AUC after training: 0.8278260869565216
User 106538 does not improve AUC. Reverting changes.
Training on augumented user 19503 42/50 current_auc = 0.8278260869565216
User 19503 AUC after training: 0.8269565217391304
User 19503 does not improve AUC. Reverting changes.
Training on augumented user 88574 43/50 current_auc = 0.8278260869565216
User 88574 AUC after training: 0.8278260869565216
User 88574 does not improve AUC. Reverting changes.
Training on augumented user 1582 44/50 current_auc = 0.8278260869565216
User 1582 AUC after training: 0.8269565217391304
User 1582 does not improve AUC. Reverting changes.
Training on augumented user 104908 45/50 current_auc = 0.8278260869565216
User 104908 AUC after training: 0.8269565217391304
User 104908 does not improve AUC. Reverting changes.
Training on augumented user 97304 46/50 current_auc = 0.8278260869565216
User 97304 AUC after training: 0.8278260869565216
User 97304 does not improve AUC. Reverting changes.
Training on augumented user 8265 47/50 current_auc = 0.8278260869565216
User 8265 AUC after training: 0.8269565217391304
User 8265 does not improve AUC. Reverting changes.
Training on augumented user 71518 48/50 current_auc = 0.8278260869565216
User 71518 AUC after training: 0.8278260869565216
User 71518 does not improve AUC. Reverting changes.
Training on augumented user 7660 49/50 current_auc = 0.8278260869565216
User 7660 AUC after training: 0.8269565217391304
User 7660 does not improve AUC. Reverting changes.
[2024-12-02 18:52:15.383089] start test user 72508 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:16.070112] start test user 72508 137/568 recall augumented users by random, augumented_users = [26319, 57251, 20940, 132790, 18140, 57271, 78954, 55877, 379, 111060, 28264, 120828, 82108, 133940, 40226, 110375, 48538, 117583, 119474, 35671, 54383, 38945, 65627, 104550, 69156, 115181, 85400, 90655, 71556, 21530, 107278, 16846, 68425, 36596, 109607, 15261, 64490, 42631, 68097, 7128, 64697, 126919, 77617, 60984, 40675, 63033, 118674, 22277, 88284, 101193]
[2024-12-02 18:52:16.111639] user = 72508 Cloud 137/568
[2024-12-02 18:52:16.127602] user = 72508 Local 137/568
[2024-12-02 18:52:16.176861] user = 72508 Local+ 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:18.539301] user = 72508 MPDA- 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6545454545454545
Training on augumented user 26319 0/50 current_auc = 0.6545454545454545
User 26319 AUC after training: 0.6545454545454545
User 26319 does not improve AUC. Reverting changes.
Training on augumented user 57251 1/50 current_auc = 0.6545454545454545
User 57251 AUC after training: 0.6545454545454545
User 57251 does not improve AUC. Reverting changes.
Training on augumented user 20940 2/50 current_auc = 0.6545454545454545
User 20940 AUC after training: 0.6545454545454545
User 20940 does not improve AUC. Reverting changes.
Training on augumented user 132790 3/50 current_auc = 0.6545454545454545
User 132790 AUC after training: 0.6545454545454545
User 132790 does not improve AUC. Reverting changes.
Training on augumented user 18140 4/50 current_auc = 0.6545454545454545
User 18140 AUC after training: 0.6545454545454545
User 18140 does not improve AUC. Reverting changes.
Training on augumented user 57271 5/50 current_auc = 0.6545454545454545
User 57271 AUC after training: 0.6545454545454545
User 57271 does not improve AUC. Reverting changes.
Training on augumented user 78954 6/50 current_auc = 0.6545454545454545
User 78954 AUC after training: 0.6545454545454545
User 78954 does not improve AUC. Reverting changes.
Training on augumented user 55877 7/50 current_auc = 0.6545454545454545
User 55877 AUC after training: 0.6545454545454545
User 55877 does not improve AUC. Reverting changes.
Training on augumented user 379 8/50 current_auc = 0.6545454545454545
User 379 AUC after training: 0.6545454545454545
User 379 does not improve AUC. Reverting changes.
Training on augumented user 111060 9/50 current_auc = 0.6545454545454545
User 111060 AUC after training: 0.6545454545454545
User 111060 does not improve AUC. Reverting changes.
Training on augumented user 28264 10/50 current_auc = 0.6545454545454545
User 28264 AUC after training: 0.6363636363636364
User 28264 does not improve AUC. Reverting changes.
Training on augumented user 120828 11/50 current_auc = 0.6545454545454545
User 120828 AUC after training: 0.6545454545454545
User 120828 does not improve AUC. Reverting changes.
Training on augumented user 82108 12/50 current_auc = 0.6545454545454545
User 82108 AUC after training: 0.6545454545454545
User 82108 does not improve AUC. Reverting changes.
Training on augumented user 133940 13/50 current_auc = 0.6545454545454545
User 133940 AUC after training: 0.6545454545454545
User 133940 does not improve AUC. Reverting changes.
Training on augumented user 40226 14/50 current_auc = 0.6545454545454545
User 40226 AUC after training: 0.6545454545454545
User 40226 does not improve AUC. Reverting changes.
Training on augumented user 110375 15/50 current_auc = 0.6545454545454545
User 110375 AUC after training: 0.6545454545454545
User 110375 does not improve AUC. Reverting changes.
Training on augumented user 48538 16/50 current_auc = 0.6545454545454545
User 48538 AUC after training: 0.6545454545454545
User 48538 does not improve AUC. Reverting changes.
Training on augumented user 117583 17/50 current_auc = 0.6545454545454545
User 117583 AUC after training: 0.6545454545454545
User 117583 does not improve AUC. Reverting changes.
Training on augumented user 119474 18/50 current_auc = 0.6545454545454545
User 119474 AUC after training: 0.6545454545454545
User 119474 does not improve AUC. Reverting changes.
Training on augumented user 35671 19/50 current_auc = 0.6545454545454545
User 35671 AUC after training: 0.6545454545454545
User 35671 does not improve AUC. Reverting changes.
Training on augumented user 54383 20/50 current_auc = 0.6545454545454545
User 54383 AUC after training: 0.6545454545454545
User 54383 does not improve AUC. Reverting changes.
Training on augumented user 38945 21/50 current_auc = 0.6545454545454545
User 38945 AUC after training: 0.6363636363636364
User 38945 does not improve AUC. Reverting changes.
Training on augumented user 65627 22/50 current_auc = 0.6545454545454545
User 65627 AUC after training: 0.6545454545454545
User 65627 does not improve AUC. Reverting changes.
Training on augumented user 104550 23/50 current_auc = 0.6545454545454545
User 104550 AUC after training: 0.6545454545454545
User 104550 does not improve AUC. Reverting changes.
Training on augumented user 69156 24/50 current_auc = 0.6545454545454545
User 69156 AUC after training: 0.6545454545454545
User 69156 does not improve AUC. Reverting changes.
Training on augumented user 115181 25/50 current_auc = 0.6545454545454545
User 115181 AUC after training: 0.6545454545454545
User 115181 does not improve AUC. Reverting changes.
Training on augumented user 85400 26/50 current_auc = 0.6545454545454545
User 85400 AUC after training: 0.6545454545454545
User 85400 does not improve AUC. Reverting changes.
Training on augumented user 90655 27/50 current_auc = 0.6545454545454545
User 90655 AUC after training: 0.6545454545454545
User 90655 does not improve AUC. Reverting changes.
Training on augumented user 71556 28/50 current_auc = 0.6545454545454545
User 71556 AUC after training: 0.6545454545454545
User 71556 does not improve AUC. Reverting changes.
Training on augumented user 21530 29/50 current_auc = 0.6545454545454545
User 21530 AUC after training: 0.6545454545454545
User 21530 does not improve AUC. Reverting changes.
Training on augumented user 107278 30/50 current_auc = 0.6545454545454545
User 107278 AUC after training: 0.6545454545454545
User 107278 does not improve AUC. Reverting changes.
Training on augumented user 16846 31/50 current_auc = 0.6545454545454545
User 16846 AUC after training: 0.6545454545454545
User 16846 does not improve AUC. Reverting changes.
Training on augumented user 68425 32/50 current_auc = 0.6545454545454545
User 68425 AUC after training: 0.6545454545454545
User 68425 does not improve AUC. Reverting changes.
Training on augumented user 36596 33/50 current_auc = 0.6545454545454545
User 36596 AUC after training: 0.6545454545454545
User 36596 does not improve AUC. Reverting changes.
Training on augumented user 109607 34/50 current_auc = 0.6545454545454545
User 109607 AUC after training: 0.6545454545454545
User 109607 does not improve AUC. Reverting changes.
Training on augumented user 15261 35/50 current_auc = 0.6545454545454545
User 15261 AUC after training: 0.6363636363636364
User 15261 does not improve AUC. Reverting changes.
Training on augumented user 64490 36/50 current_auc = 0.6545454545454545
User 64490 AUC after training: 0.6545454545454545
User 64490 does not improve AUC. Reverting changes.
Training on augumented user 42631 37/50 current_auc = 0.6545454545454545
User 42631 AUC after training: 0.6545454545454545
User 42631 does not improve AUC. Reverting changes.
Training on augumented user 68097 38/50 current_auc = 0.6545454545454545
User 68097 AUC after training: 0.6545454545454545
User 68097 does not improve AUC. Reverting changes.
Training on augumented user 7128 39/50 current_auc = 0.6545454545454545
User 7128 AUC after training: 0.6545454545454545
User 7128 does not improve AUC. Reverting changes.
Training on augumented user 64697 40/50 current_auc = 0.6545454545454545
User 64697 AUC after training: 0.6545454545454545
User 64697 does not improve AUC. Reverting changes.
Training on augumented user 126919 41/50 current_auc = 0.6545454545454545
User 126919 AUC after training: 0.6545454545454545
User 126919 does not improve AUC. Reverting changes.
Training on augumented user 77617 42/50 current_auc = 0.6545454545454545
User 77617 AUC after training: 0.6545454545454545
User 77617 does not improve AUC. Reverting changes.
Training on augumented user 60984 43/50 current_auc = 0.6545454545454545
User 60984 AUC after training: 0.6545454545454545
User 60984 does not improve AUC. Reverting changes.
Training on augumented user 40675 44/50 current_auc = 0.6545454545454545
User 40675 AUC after training: 0.6545454545454545
User 40675 does not improve AUC. Reverting changes.
Training on augumented user 63033 45/50 current_auc = 0.6545454545454545
User 63033 AUC after training: 0.6545454545454545
User 63033 does not improve AUC. Reverting changes.
Training on augumented user 118674 46/50 current_auc = 0.6545454545454545
User 118674 AUC after training: 0.6545454545454545
User 118674 does not improve AUC. Reverting changes.
Training on augumented user 22277 47/50 current_auc = 0.6545454545454545
User 22277 AUC after training: 0.6363636363636364
User 22277 does not improve AUC. Reverting changes.
Training on augumented user 88284 48/50 current_auc = 0.6545454545454545
User 88284 AUC after training: 0.6545454545454545
User 88284 does not improve AUC. Reverting changes.
Training on augumented user 101193 49/50 current_auc = 0.6545454545454545
User 101193 AUC after training: 0.6545454545454545
User 101193 does not improve AUC. Reverting changes.
[2024-12-02 18:52:48.763679] start test user 72515 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:49.503392] start test user 72515 138/568 recall augumented users by random, augumented_users = [469, 44135, 55672, 38090, 5649, 114044, 126546, 136761, 110077, 56658, 54279, 86279, 3701, 98902, 116132, 32062, 102854, 65966, 99932, 84574, 46057, 95887, 23557, 87317, 18741, 44084, 95614, 108513, 53210, 108996, 25568, 72490, 759, 47093, 56953, 75503, 69573, 33214, 112597, 72154, 41551, 45945, 13066, 72742, 52073, 43999, 35544, 89816, 70664, 96768]
[2024-12-02 18:52:49.550849] user = 72515 Cloud 138/568
[2024-12-02 18:52:49.569048] user = 72515 Local 138/568
[2024-12-02 18:52:49.663796] user = 72515 Local+ 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:52.252955] user = 72515 MPDA- 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 469 0/50 current_auc = 0.6666666666666666
User 469 AUC after training: 0.6666666666666666
User 469 does not improve AUC. Reverting changes.
Training on augumented user 44135 1/50 current_auc = 0.6666666666666666
User 44135 AUC after training: 0.6666666666666666
User 44135 does not improve AUC. Reverting changes.
Training on augumented user 55672 2/50 current_auc = 0.6666666666666666
User 55672 AUC after training: 0.6666666666666666
User 55672 does not improve AUC. Reverting changes.
Training on augumented user 38090 3/50 current_auc = 0.6666666666666666
User 38090 AUC after training: 0.6666666666666666
User 38090 does not improve AUC. Reverting changes.
Training on augumented user 5649 4/50 current_auc = 0.6666666666666666
User 5649 AUC after training: 0.6666666666666666
User 5649 does not improve AUC. Reverting changes.
Training on augumented user 114044 5/50 current_auc = 0.6666666666666666
User 114044 AUC after training: 0.6666666666666666
User 114044 does not improve AUC. Reverting changes.
Training on augumented user 126546 6/50 current_auc = 0.6666666666666666
User 126546 AUC after training: 0.6666666666666666
User 126546 does not improve AUC. Reverting changes.
Training on augumented user 136761 7/50 current_auc = 0.6666666666666666
User 136761 AUC after training: 0.6666666666666666
User 136761 does not improve AUC. Reverting changes.
Training on augumented user 110077 8/50 current_auc = 0.6666666666666666
User 110077 AUC after training: 0.6666666666666666
User 110077 does not improve AUC. Reverting changes.
Training on augumented user 56658 9/50 current_auc = 0.6666666666666666
User 56658 AUC after training: 0.6666666666666666
User 56658 does not improve AUC. Reverting changes.
Training on augumented user 54279 10/50 current_auc = 0.6666666666666666
User 54279 AUC after training: 0.6666666666666666
User 54279 does not improve AUC. Reverting changes.
Training on augumented user 86279 11/50 current_auc = 0.6666666666666666
User 86279 AUC after training: 0.6666666666666666
User 86279 does not improve AUC. Reverting changes.
Training on augumented user 3701 12/50 current_auc = 0.6666666666666666
User 3701 AUC after training: 0.6666666666666666
User 3701 does not improve AUC. Reverting changes.
Training on augumented user 98902 13/50 current_auc = 0.6666666666666666
User 98902 AUC after training: 0.6666666666666666
User 98902 does not improve AUC. Reverting changes.
Training on augumented user 116132 14/50 current_auc = 0.6666666666666666
User 116132 AUC after training: 0.6666666666666666
User 116132 does not improve AUC. Reverting changes.
Training on augumented user 32062 15/50 current_auc = 0.6666666666666666
User 32062 AUC after training: 0.6666666666666666
User 32062 does not improve AUC. Reverting changes.
Training on augumented user 102854 16/50 current_auc = 0.6666666666666666
User 102854 AUC after training: 0.6666666666666666
User 102854 does not improve AUC. Reverting changes.
Training on augumented user 65966 17/50 current_auc = 0.6666666666666666
User 65966 AUC after training: 0.6666666666666666
User 65966 does not improve AUC. Reverting changes.
Training on augumented user 99932 18/50 current_auc = 0.6666666666666666
User 99932 AUC after training: 0.6666666666666666
User 99932 does not improve AUC. Reverting changes.
Training on augumented user 84574 19/50 current_auc = 0.6666666666666666
User 84574 AUC after training: 0.6666666666666666
User 84574 does not improve AUC. Reverting changes.
Training on augumented user 46057 20/50 current_auc = 0.6666666666666666
User 46057 AUC after training: 0.6666666666666666
User 46057 does not improve AUC. Reverting changes.
Training on augumented user 95887 21/50 current_auc = 0.6666666666666666
User 95887 AUC after training: 0.6666666666666666
User 95887 does not improve AUC. Reverting changes.
Training on augumented user 23557 22/50 current_auc = 0.6666666666666666
User 23557 AUC after training: 0.6666666666666666
User 23557 does not improve AUC. Reverting changes.
Training on augumented user 87317 23/50 current_auc = 0.6666666666666666
User 87317 AUC after training: 0.6666666666666666
User 87317 does not improve AUC. Reverting changes.
Training on augumented user 18741 24/50 current_auc = 0.6666666666666666
User 18741 AUC after training: 0.6666666666666666
User 18741 does not improve AUC. Reverting changes.
Training on augumented user 44084 25/50 current_auc = 0.6666666666666666
User 44084 AUC after training: 0.6666666666666666
User 44084 does not improve AUC. Reverting changes.
Training on augumented user 95614 26/50 current_auc = 0.6666666666666666
User 95614 AUC after training: 0.6666666666666666
User 95614 does not improve AUC. Reverting changes.
Training on augumented user 108513 27/50 current_auc = 0.6666666666666666
User 108513 AUC after training: 0.6666666666666666
User 108513 does not improve AUC. Reverting changes.
Training on augumented user 53210 28/50 current_auc = 0.6666666666666666
User 53210 AUC after training: 0.6666666666666666
User 53210 does not improve AUC. Reverting changes.
Training on augumented user 108996 29/50 current_auc = 0.6666666666666666
User 108996 AUC after training: 0.6666666666666666
User 108996 does not improve AUC. Reverting changes.
Training on augumented user 25568 30/50 current_auc = 0.6666666666666666
User 25568 AUC after training: 0.6666666666666666
User 25568 does not improve AUC. Reverting changes.
Training on augumented user 72490 31/50 current_auc = 0.6666666666666666
User 72490 AUC after training: 0.6666666666666666
User 72490 does not improve AUC. Reverting changes.
Training on augumented user 759 32/50 current_auc = 0.6666666666666666
User 759 AUC after training: 0.6666666666666666
User 759 does not improve AUC. Reverting changes.
Training on augumented user 47093 33/50 current_auc = 0.6666666666666666
User 47093 AUC after training: 0.6666666666666666
User 47093 does not improve AUC. Reverting changes.
Training on augumented user 56953 34/50 current_auc = 0.6666666666666666
User 56953 AUC after training: 0.6666666666666666
User 56953 does not improve AUC. Reverting changes.
Training on augumented user 75503 35/50 current_auc = 0.6666666666666666
User 75503 AUC after training: 0.6666666666666666
User 75503 does not improve AUC. Reverting changes.
Training on augumented user 69573 36/50 current_auc = 0.6666666666666666
User 69573 AUC after training: 0.6666666666666666
User 69573 does not improve AUC. Reverting changes.
Training on augumented user 33214 37/50 current_auc = 0.6666666666666666
User 33214 AUC after training: 0.6666666666666666
User 33214 does not improve AUC. Reverting changes.
Training on augumented user 112597 38/50 current_auc = 0.6666666666666666
User 112597 AUC after training: 0.6666666666666666
User 112597 does not improve AUC. Reverting changes.
Training on augumented user 72154 39/50 current_auc = 0.6666666666666666
User 72154 AUC after training: 0.6666666666666666
User 72154 does not improve AUC. Reverting changes.
Training on augumented user 41551 40/50 current_auc = 0.6666666666666666
User 41551 AUC after training: 0.6666666666666666
User 41551 does not improve AUC. Reverting changes.
Training on augumented user 45945 41/50 current_auc = 0.6666666666666666
User 45945 AUC after training: 0.6666666666666666
User 45945 does not improve AUC. Reverting changes.
Training on augumented user 13066 42/50 current_auc = 0.6666666666666666
User 13066 AUC after training: 0.6666666666666666
User 13066 does not improve AUC. Reverting changes.
Training on augumented user 72742 43/50 current_auc = 0.6666666666666666
User 72742 AUC after training: 0.6666666666666666
User 72742 does not improve AUC. Reverting changes.
Training on augumented user 52073 44/50 current_auc = 0.6666666666666666
User 52073 AUC after training: 0.6666666666666666
User 52073 does not improve AUC. Reverting changes.
Training on augumented user 43999 45/50 current_auc = 0.6666666666666666
User 43999 AUC after training: 0.6666666666666666
User 43999 does not improve AUC. Reverting changes.
Training on augumented user 35544 46/50 current_auc = 0.6666666666666666
User 35544 AUC after training: 0.6666666666666666
User 35544 does not improve AUC. Reverting changes.
Training on augumented user 89816 47/50 current_auc = 0.6666666666666666
User 89816 AUC after training: 0.6666666666666666
User 89816 does not improve AUC. Reverting changes.
Training on augumented user 70664 48/50 current_auc = 0.6666666666666666
User 70664 AUC after training: 0.6666666666666666
User 70664 does not improve AUC. Reverting changes.
Training on augumented user 96768 49/50 current_auc = 0.6666666666666666
User 96768 AUC after training: 0.6666666666666666
User 96768 does not improve AUC. Reverting changes.
[2024-12-02 18:53:19.236238] start test user 72519 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:19.660927] start test user 72519 139/568 recall augumented users by random, augumented_users = [28751, 114331, 4018, 4554, 132126, 105220, 56607, 61253, 8237, 21569, 46321, 71099, 102002, 91207, 18454, 106628, 58537, 38668, 28720, 74509, 30397, 124479, 36619, 77531, 105063, 132779, 15509, 53400, 74366, 35459, 80496, 41292, 136027, 79230, 108524, 40021, 18740, 30970, 22485, 124594, 88002, 16962, 105022, 23941, 24130, 74027, 112941, 65459, 97485, 94040]
[2024-12-02 18:53:19.675619] user = 72519 Cloud 139/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:19.682136] user = 72519 Local 139/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:19.713543] user = 72519 Local+ 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:21.423302] user = 72519 MPDA- 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 28751 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28751 AUC after training: 0.5
User 28751 does not improve AUC. Reverting changes.
Training on augumented user 114331 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114331 AUC after training: 0.5
User 114331 does not improve AUC. Reverting changes.
Training on augumented user 4018 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4018 AUC after training: 0.5
User 4018 does not improve AUC. Reverting changes.
Training on augumented user 4554 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4554 AUC after training: 0.5
User 4554 does not improve AUC. Reverting changes.
Training on augumented user 132126 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132126 AUC after training: 0.5
User 132126 does not improve AUC. Reverting changes.
Training on augumented user 105220 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105220 AUC after training: 0.5
User 105220 does not improve AUC. Reverting changes.
Training on augumented user 56607 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56607 AUC after training: 0.5
User 56607 does not improve AUC. Reverting changes.
Training on augumented user 61253 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61253 AUC after training: 0.5
User 61253 does not improve AUC. Reverting changes.
Training on augumented user 8237 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8237 AUC after training: 0.5
User 8237 does not improve AUC. Reverting changes.
Training on augumented user 21569 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21569 AUC after training: 0.5
User 21569 does not improve AUC. Reverting changes.
Training on augumented user 46321 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46321 AUC after training: 0.5
User 46321 does not improve AUC. Reverting changes.
Training on augumented user 71099 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71099 AUC after training: 0.5
User 71099 does not improve AUC. Reverting changes.
Training on augumented user 102002 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102002 AUC after training: 0.5
User 102002 does not improve AUC. Reverting changes.
Training on augumented user 91207 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91207 AUC after training: 0.5
User 91207 does not improve AUC. Reverting changes.
Training on augumented user 18454 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18454 AUC after training: 0.5
User 18454 does not improve AUC. Reverting changes.
Training on augumented user 106628 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106628 AUC after training: 0.5
User 106628 does not improve AUC. Reverting changes.
Training on augumented user 58537 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58537 AUC after training: 0.5
User 58537 does not improve AUC. Reverting changes.
Training on augumented user 38668 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38668 AUC after training: 0.5
User 38668 does not improve AUC. Reverting changes.
Training on augumented user 28720 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28720 AUC after training: 0.5
User 28720 does not improve AUC. Reverting changes.
Training on augumented user 74509 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74509 AUC after training: 0.5
User 74509 does not improve AUC. Reverting changes.
Training on augumented user 30397 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30397 AUC after training: 0.5
User 30397 does not improve AUC. Reverting changes.
Training on augumented user 124479 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124479 AUC after training: 0.5
User 124479 does not improve AUC. Reverting changes.
Training on augumented user 36619 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36619 AUC after training: 0.5
User 36619 does not improve AUC. Reverting changes.
Training on augumented user 77531 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77531 AUC after training: 0.5
User 77531 does not improve AUC. Reverting changes.
Training on augumented user 105063 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105063 AUC after training: 0.5
User 105063 does not improve AUC. Reverting changes.
Training on augumented user 132779 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132779 AUC after training: 0.5
User 132779 does not improve AUC. Reverting changes.
Training on augumented user 15509 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15509 AUC after training: 0.5
User 15509 does not improve AUC. Reverting changes.
Training on augumented user 53400 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53400 AUC after training: 0.5
User 53400 does not improve AUC. Reverting changes.
Training on augumented user 74366 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74366 AUC after training: 0.5
User 74366 does not improve AUC. Reverting changes.
Training on augumented user 35459 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35459 AUC after training: 0.5
User 35459 does not improve AUC. Reverting changes.
Training on augumented user 80496 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80496 AUC after training: 0.5
User 80496 does not improve AUC. Reverting changes.
Training on augumented user 41292 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41292 AUC after training: 0.5
User 41292 does not improve AUC. Reverting changes.
Training on augumented user 136027 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136027 AUC after training: 0.5
User 136027 does not improve AUC. Reverting changes.
Training on augumented user 79230 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79230 AUC after training: 0.5
User 79230 does not improve AUC. Reverting changes.
Training on augumented user 108524 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108524 AUC after training: 0.5
User 108524 does not improve AUC. Reverting changes.
Training on augumented user 40021 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40021 AUC after training: 0.5
User 40021 does not improve AUC. Reverting changes.
Training on augumented user 18740 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18740 AUC after training: 0.5
User 18740 does not improve AUC. Reverting changes.
Training on augumented user 30970 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30970 AUC after training: 0.5
User 30970 does not improve AUC. Reverting changes.
Training on augumented user 22485 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22485 AUC after training: 0.5
User 22485 does not improve AUC. Reverting changes.
Training on augumented user 124594 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124594 AUC after training: 0.5
User 124594 does not improve AUC. Reverting changes.
Training on augumented user 88002 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88002 AUC after training: 0.5
User 88002 does not improve AUC. Reverting changes.
Training on augumented user 16962 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16962 AUC after training: 0.5
User 16962 does not improve AUC. Reverting changes.
Training on augumented user 105022 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105022 AUC after training: 0.5
User 105022 does not improve AUC. Reverting changes.
Training on augumented user 23941 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23941 AUC after training: 0.5
User 23941 does not improve AUC. Reverting changes.
Training on augumented user 24130 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24130 AUC after training: 0.5
User 24130 does not improve AUC. Reverting changes.
Training on augumented user 74027 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74027 AUC after training: 0.5
User 74027 does not improve AUC. Reverting changes.
Training on augumented user 112941 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112941 AUC after training: 0.5
User 112941 does not improve AUC. Reverting changes.
Training on augumented user 65459 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65459 AUC after training: 0.5
User 65459 does not improve AUC. Reverting changes.
Training on augumented user 97485 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97485 AUC after training: 0.5
User 97485 does not improve AUC. Reverting changes.
Training on augumented user 94040 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94040 AUC after training: 0.5
User 94040 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:50.749430] start test user 72527 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:51.412220] start test user 72527 140/568 recall augumented users by random, augumented_users = [129861, 62457, 86298, 38046, 133603, 120800, 79408, 94293, 47218, 83979, 69004, 111732, 23285, 88344, 8515, 60786, 14129, 24815, 32471, 30150, 6062, 73700, 118565, 75060, 48873, 122317, 111239, 38411, 120113, 51265, 53361, 28806, 3179, 132381, 111316, 22102, 10801, 19576, 106173, 68167, 29669, 66754, 108935, 75260, 106413, 5367, 106536, 137449, 105638, 99866]
[2024-12-02 18:53:51.427052] user = 72527 Cloud 140/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:51.433552] user = 72527 Local 140/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:51.495900] user = 72527 Local+ 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:54.452642] user = 72527 MPDA- 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 129861 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129861 AUC after training: 0.5
User 129861 does not improve AUC. Reverting changes.
Training on augumented user 62457 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62457 AUC after training: 0.5
User 62457 does not improve AUC. Reverting changes.
Training on augumented user 86298 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86298 AUC after training: 0.5
User 86298 does not improve AUC. Reverting changes.
Training on augumented user 38046 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38046 AUC after training: 0.5
User 38046 does not improve AUC. Reverting changes.
Training on augumented user 133603 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133603 AUC after training: 0.5
User 133603 does not improve AUC. Reverting changes.
Training on augumented user 120800 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120800 AUC after training: 0.5
User 120800 does not improve AUC. Reverting changes.
Training on augumented user 79408 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79408 AUC after training: 0.5
User 79408 does not improve AUC. Reverting changes.
Training on augumented user 94293 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94293 AUC after training: 0.5
User 94293 does not improve AUC. Reverting changes.
Training on augumented user 47218 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47218 AUC after training: 0.5
User 47218 does not improve AUC. Reverting changes.
Training on augumented user 83979 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83979 AUC after training: 0.5
User 83979 does not improve AUC. Reverting changes.
Training on augumented user 69004 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69004 AUC after training: 0.5
User 69004 does not improve AUC. Reverting changes.
Training on augumented user 111732 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111732 AUC after training: 0.5
User 111732 does not improve AUC. Reverting changes.
Training on augumented user 23285 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23285 AUC after training: 0.5
User 23285 does not improve AUC. Reverting changes.
Training on augumented user 88344 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88344 AUC after training: 0.5
User 88344 does not improve AUC. Reverting changes.
Training on augumented user 8515 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8515 AUC after training: 0.5
User 8515 does not improve AUC. Reverting changes.
Training on augumented user 60786 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60786 AUC after training: 0.5
User 60786 does not improve AUC. Reverting changes.
Training on augumented user 14129 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14129 AUC after training: 0.5
User 14129 does not improve AUC. Reverting changes.
Training on augumented user 24815 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24815 AUC after training: 0.5
User 24815 does not improve AUC. Reverting changes.
Training on augumented user 32471 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32471 AUC after training: 0.5
User 32471 does not improve AUC. Reverting changes.
Training on augumented user 30150 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30150 AUC after training: 0.5
User 30150 does not improve AUC. Reverting changes.
Training on augumented user 6062 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6062 AUC after training: 0.5
User 6062 does not improve AUC. Reverting changes.
Training on augumented user 73700 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73700 AUC after training: 0.5
User 73700 does not improve AUC. Reverting changes.
Training on augumented user 118565 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118565 AUC after training: 0.5
User 118565 does not improve AUC. Reverting changes.
Training on augumented user 75060 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75060 AUC after training: 0.5
User 75060 does not improve AUC. Reverting changes.
Training on augumented user 48873 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48873 AUC after training: 0.5
User 48873 does not improve AUC. Reverting changes.
Training on augumented user 122317 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122317 AUC after training: 0.5
User 122317 does not improve AUC. Reverting changes.
Training on augumented user 111239 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111239 AUC after training: 0.5
User 111239 does not improve AUC. Reverting changes.
Training on augumented user 38411 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38411 AUC after training: 0.5
User 38411 does not improve AUC. Reverting changes.
Training on augumented user 120113 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120113 AUC after training: 0.5
User 120113 does not improve AUC. Reverting changes.
Training on augumented user 51265 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51265 AUC after training: 0.5
User 51265 does not improve AUC. Reverting changes.
Training on augumented user 53361 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53361 AUC after training: 0.5
User 53361 does not improve AUC. Reverting changes.
Training on augumented user 28806 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28806 AUC after training: 0.5
User 28806 does not improve AUC. Reverting changes.
Training on augumented user 3179 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3179 AUC after training: 0.5
User 3179 does not improve AUC. Reverting changes.
Training on augumented user 132381 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132381 AUC after training: 0.5
User 132381 does not improve AUC. Reverting changes.
Training on augumented user 111316 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111316 AUC after training: 0.5
User 111316 does not improve AUC. Reverting changes.
Training on augumented user 22102 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22102 AUC after training: 0.5
User 22102 does not improve AUC. Reverting changes.
Training on augumented user 10801 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10801 AUC after training: 0.5
User 10801 does not improve AUC. Reverting changes.
Training on augumented user 19576 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19576 AUC after training: 0.5
User 19576 does not improve AUC. Reverting changes.
Training on augumented user 106173 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106173 AUC after training: 0.5
User 106173 does not improve AUC. Reverting changes.
Training on augumented user 68167 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68167 AUC after training: 0.5
User 68167 does not improve AUC. Reverting changes.
Training on augumented user 29669 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29669 AUC after training: 0.5
User 29669 does not improve AUC. Reverting changes.
Training on augumented user 66754 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66754 AUC after training: 0.5
User 66754 does not improve AUC. Reverting changes.
Training on augumented user 108935 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108935 AUC after training: 0.5
User 108935 does not improve AUC. Reverting changes.
Training on augumented user 75260 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75260 AUC after training: 0.5
User 75260 does not improve AUC. Reverting changes.
Training on augumented user 106413 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106413 AUC after training: 0.5
User 106413 does not improve AUC. Reverting changes.
Training on augumented user 5367 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5367 AUC after training: 0.5
User 5367 does not improve AUC. Reverting changes.
Training on augumented user 106536 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106536 AUC after training: 0.5
User 106536 does not improve AUC. Reverting changes.
Training on augumented user 137449 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137449 AUC after training: 0.5
User 137449 does not improve AUC. Reverting changes.
Training on augumented user 105638 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105638 AUC after training: 0.5
User 105638 does not improve AUC. Reverting changes.
Training on augumented user 99866 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99866 AUC after training: 0.5
User 99866 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:25.188350] start test user 72549 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:25.774357] start test user 72549 141/568 recall augumented users by random, augumented_users = [11481, 129858, 10613, 88963, 104715, 16061, 6804, 61294, 1493, 116930, 110104, 107482, 11044, 95688, 2254, 136974, 89464, 107224, 7454, 112670, 14537, 113343, 119451, 28711, 9033, 30956, 27289, 19582, 99786, 118105, 26537, 78956, 113607, 24370, 125460, 41255, 126600, 19441, 38960, 10275, 74697, 78837, 81282, 27298, 112827, 121619, 137582, 125720, 75142, 83494]
[2024-12-02 18:54:25.796029] user = 72549 Cloud 141/568
[2024-12-02 18:54:25.807788] user = 72549 Local 141/568
[2024-12-02 18:54:25.849807] user = 72549 Local+ 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:28.128855] user = 72549 MPDA- 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6361111111111111
Training on augumented user 11481 0/50 current_auc = 0.6361111111111111
User 11481 AUC after training: 0.637962962962963
User 11481 improves AUC. Keeping the model.
Training on augumented user 129858 1/50 current_auc = 0.637962962962963
User 129858 AUC after training: 0.638888888888889
User 129858 improves AUC. Keeping the model.
Training on augumented user 10613 2/50 current_auc = 0.638888888888889
User 10613 AUC after training: 0.6398148148148148
User 10613 improves AUC. Keeping the model.
Training on augumented user 88963 3/50 current_auc = 0.6398148148148148
User 88963 AUC after training: 0.6398148148148148
User 88963 does not improve AUC. Reverting changes.
Training on augumented user 104715 4/50 current_auc = 0.6398148148148148
User 104715 AUC after training: 0.6398148148148148
User 104715 does not improve AUC. Reverting changes.
Training on augumented user 16061 5/50 current_auc = 0.6398148148148148
User 16061 AUC after training: 0.6351851851851852
User 16061 does not improve AUC. Reverting changes.
Training on augumented user 6804 6/50 current_auc = 0.6398148148148148
User 6804 AUC after training: 0.6416666666666666
User 6804 improves AUC. Keeping the model.
Training on augumented user 61294 7/50 current_auc = 0.6416666666666666
User 61294 AUC after training: 0.6388888888888888
User 61294 does not improve AUC. Reverting changes.
Training on augumented user 1493 8/50 current_auc = 0.6416666666666666
User 1493 AUC after training: 0.6388888888888888
User 1493 does not improve AUC. Reverting changes.
Training on augumented user 116930 9/50 current_auc = 0.6416666666666666
User 116930 AUC after training: 0.6388888888888888
User 116930 does not improve AUC. Reverting changes.
Training on augumented user 110104 10/50 current_auc = 0.6416666666666666
User 110104 AUC after training: 0.6388888888888888
User 110104 does not improve AUC. Reverting changes.
Training on augumented user 107482 11/50 current_auc = 0.6416666666666666
User 107482 AUC after training: 0.6416666666666666
User 107482 does not improve AUC. Reverting changes.
Training on augumented user 11044 12/50 current_auc = 0.6416666666666666
User 11044 AUC after training: 0.6388888888888888
User 11044 does not improve AUC. Reverting changes.
Training on augumented user 95688 13/50 current_auc = 0.6416666666666666
User 95688 AUC after training: 0.6416666666666666
User 95688 does not improve AUC. Reverting changes.
Training on augumented user 2254 14/50 current_auc = 0.6416666666666666
User 2254 AUC after training: 0.6370370370370371
User 2254 does not improve AUC. Reverting changes.
Training on augumented user 136974 15/50 current_auc = 0.6416666666666666
User 136974 AUC after training: 0.6388888888888888
User 136974 does not improve AUC. Reverting changes.
Training on augumented user 89464 16/50 current_auc = 0.6416666666666666
User 89464 AUC after training: 0.638888888888889
User 89464 does not improve AUC. Reverting changes.
Training on augumented user 107224 17/50 current_auc = 0.6416666666666666
User 107224 AUC after training: 0.6388888888888888
User 107224 does not improve AUC. Reverting changes.
Training on augumented user 7454 18/50 current_auc = 0.6416666666666666
User 7454 AUC after training: 0.6416666666666666
User 7454 does not improve AUC. Reverting changes.
Training on augumented user 112670 19/50 current_auc = 0.6416666666666666
User 112670 AUC after training: 0.6351851851851852
User 112670 does not improve AUC. Reverting changes.
Training on augumented user 14537 20/50 current_auc = 0.6416666666666666
User 14537 AUC after training: 0.6342592592592593
User 14537 does not improve AUC. Reverting changes.
Training on augumented user 113343 21/50 current_auc = 0.6416666666666666
User 113343 AUC after training: 0.6416666666666666
User 113343 does not improve AUC. Reverting changes.
Training on augumented user 119451 22/50 current_auc = 0.6416666666666666
User 119451 AUC after training: 0.6416666666666666
User 119451 does not improve AUC. Reverting changes.
Training on augumented user 28711 23/50 current_auc = 0.6416666666666666
User 28711 AUC after training: 0.6416666666666666
User 28711 does not improve AUC. Reverting changes.
Training on augumented user 9033 24/50 current_auc = 0.6416666666666666
User 9033 AUC after training: 0.6388888888888888
User 9033 does not improve AUC. Reverting changes.
Training on augumented user 30956 25/50 current_auc = 0.6416666666666666
User 30956 AUC after training: 0.6361111111111111
User 30956 does not improve AUC. Reverting changes.
Training on augumented user 27289 26/50 current_auc = 0.6416666666666666
User 27289 AUC after training: 0.6388888888888888
User 27289 does not improve AUC. Reverting changes.
Training on augumented user 19582 27/50 current_auc = 0.6416666666666666
User 19582 AUC after training: 0.6388888888888888
User 19582 does not improve AUC. Reverting changes.
Training on augumented user 99786 28/50 current_auc = 0.6416666666666666
User 99786 AUC after training: 0.6388888888888888
User 99786 does not improve AUC. Reverting changes.
Training on augumented user 118105 29/50 current_auc = 0.6416666666666666
User 118105 AUC after training: 0.6416666666666666
User 118105 does not improve AUC. Reverting changes.
Training on augumented user 26537 30/50 current_auc = 0.6416666666666666
User 26537 AUC after training: 0.6388888888888888
User 26537 does not improve AUC. Reverting changes.
Training on augumented user 78956 31/50 current_auc = 0.6416666666666666
User 78956 AUC after training: 0.6342592592592592
User 78956 does not improve AUC. Reverting changes.
Training on augumented user 113607 32/50 current_auc = 0.6416666666666666
User 113607 AUC after training: 0.6398148148148148
User 113607 does not improve AUC. Reverting changes.
Training on augumented user 24370 33/50 current_auc = 0.6416666666666666
User 24370 AUC after training: 0.637962962962963
User 24370 does not improve AUC. Reverting changes.
Training on augumented user 125460 34/50 current_auc = 0.6416666666666666
User 125460 AUC after training: 0.6416666666666666
User 125460 does not improve AUC. Reverting changes.
Training on augumented user 41255 35/50 current_auc = 0.6416666666666666
User 41255 AUC after training: 0.6416666666666666
User 41255 does not improve AUC. Reverting changes.
Training on augumented user 126600 36/50 current_auc = 0.6416666666666666
User 126600 AUC after training: 0.6388888888888888
User 126600 does not improve AUC. Reverting changes.
Training on augumented user 19441 37/50 current_auc = 0.6416666666666666
User 19441 AUC after training: 0.6388888888888888
User 19441 does not improve AUC. Reverting changes.
Training on augumented user 38960 38/50 current_auc = 0.6416666666666666
User 38960 AUC after training: 0.6351851851851852
User 38960 does not improve AUC. Reverting changes.
Training on augumented user 10275 39/50 current_auc = 0.6416666666666666
User 10275 AUC after training: 0.6388888888888888
User 10275 does not improve AUC. Reverting changes.
Training on augumented user 74697 40/50 current_auc = 0.6416666666666666
User 74697 AUC after training: 0.6416666666666666
User 74697 does not improve AUC. Reverting changes.
Training on augumented user 78837 41/50 current_auc = 0.6416666666666666
User 78837 AUC after training: 0.6416666666666666
User 78837 does not improve AUC. Reverting changes.
Training on augumented user 81282 42/50 current_auc = 0.6416666666666666
User 81282 AUC after training: 0.6370370370370371
User 81282 does not improve AUC. Reverting changes.
Training on augumented user 27298 43/50 current_auc = 0.6416666666666666
User 27298 AUC after training: 0.6398148148148148
User 27298 does not improve AUC. Reverting changes.
Training on augumented user 112827 44/50 current_auc = 0.6416666666666666
User 112827 AUC after training: 0.6398148148148148
User 112827 does not improve AUC. Reverting changes.
Training on augumented user 121619 45/50 current_auc = 0.6416666666666666
User 121619 AUC after training: 0.6370370370370371
User 121619 does not improve AUC. Reverting changes.
Training on augumented user 137582 46/50 current_auc = 0.6416666666666666
User 137582 AUC after training: 0.6351851851851852
User 137582 does not improve AUC. Reverting changes.
Training on augumented user 125720 47/50 current_auc = 0.6416666666666666
User 125720 AUC after training: 0.6416666666666666
User 125720 does not improve AUC. Reverting changes.
Training on augumented user 75142 48/50 current_auc = 0.6416666666666666
User 75142 AUC after training: 0.6370370370370371
User 75142 does not improve AUC. Reverting changes.
Training on augumented user 83494 49/50 current_auc = 0.6416666666666666
User 83494 AUC after training: 0.6398148148148148
User 83494 does not improve AUC. Reverting changes.
[2024-12-02 18:54:57.062709] start test user 72562 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:57.479972] start test user 72562 142/568 recall augumented users by random, augumented_users = [134310, 78430, 5431, 38046, 105304, 19001, 17347, 19607, 90422, 78574, 113925, 28508, 5079, 130460, 80388, 83452, 109863, 65555, 81094, 46875, 130130, 104930, 111922, 135754, 49932, 124037, 60891, 2708, 32123, 29060, 128703, 79293, 63358, 112174, 76734, 9792, 66727, 112299, 3772, 93901, 124676, 31008, 51176, 26816, 52925, 113612, 117417, 86423, 124745, 24761]
[2024-12-02 18:54:57.495425] user = 72562 Cloud 142/568
[2024-12-02 18:54:57.506409] user = 72562 Local 142/568
[2024-12-02 18:54:57.534763] user = 72562 Local+ 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:59.936099] user = 72562 MPDA- 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 134310 0/50 current_auc = 0.8333333333333334
User 134310 AUC after training: 0.8333333333333334
User 134310 does not improve AUC. Reverting changes.
Training on augumented user 78430 1/50 current_auc = 0.8333333333333334
User 78430 AUC after training: 0.8333333333333334
User 78430 does not improve AUC. Reverting changes.
Training on augumented user 5431 2/50 current_auc = 0.8333333333333334
User 5431 AUC after training: 0.8333333333333334
User 5431 does not improve AUC. Reverting changes.
Training on augumented user 38046 3/50 current_auc = 0.8333333333333334
User 38046 AUC after training: 0.8333333333333334
User 38046 does not improve AUC. Reverting changes.
Training on augumented user 105304 4/50 current_auc = 0.8333333333333334
User 105304 AUC after training: 0.8333333333333334
User 105304 does not improve AUC. Reverting changes.
Training on augumented user 19001 5/50 current_auc = 0.8333333333333334
User 19001 AUC after training: 0.8333333333333334
User 19001 does not improve AUC. Reverting changes.
Training on augumented user 17347 6/50 current_auc = 0.8333333333333334
User 17347 AUC after training: 0.8333333333333334
User 17347 does not improve AUC. Reverting changes.
Training on augumented user 19607 7/50 current_auc = 0.8333333333333334
User 19607 AUC after training: 0.8333333333333334
User 19607 does not improve AUC. Reverting changes.
Training on augumented user 90422 8/50 current_auc = 0.8333333333333334
User 90422 AUC after training: 0.8333333333333334
User 90422 does not improve AUC. Reverting changes.
Training on augumented user 78574 9/50 current_auc = 0.8333333333333334
User 78574 AUC after training: 0.8333333333333334
User 78574 does not improve AUC. Reverting changes.
Training on augumented user 113925 10/50 current_auc = 0.8333333333333334
User 113925 AUC after training: 0.8333333333333334
User 113925 does not improve AUC. Reverting changes.
Training on augumented user 28508 11/50 current_auc = 0.8333333333333334
User 28508 AUC after training: 0.8333333333333334
User 28508 does not improve AUC. Reverting changes.
Training on augumented user 5079 12/50 current_auc = 0.8333333333333334
User 5079 AUC after training: 0.8333333333333334
User 5079 does not improve AUC. Reverting changes.
Training on augumented user 130460 13/50 current_auc = 0.8333333333333334
User 130460 AUC after training: 0.8333333333333334
User 130460 does not improve AUC. Reverting changes.
Training on augumented user 80388 14/50 current_auc = 0.8333333333333334
User 80388 AUC after training: 0.8333333333333334
User 80388 does not improve AUC. Reverting changes.
Training on augumented user 83452 15/50 current_auc = 0.8333333333333334
User 83452 AUC after training: 0.8333333333333334
User 83452 does not improve AUC. Reverting changes.
Training on augumented user 109863 16/50 current_auc = 0.8333333333333334
User 109863 AUC after training: 0.8333333333333334
User 109863 does not improve AUC. Reverting changes.
Training on augumented user 65555 17/50 current_auc = 0.8333333333333334
User 65555 AUC after training: 0.8333333333333334
User 65555 does not improve AUC. Reverting changes.
Training on augumented user 81094 18/50 current_auc = 0.8333333333333334
User 81094 AUC after training: 0.8333333333333334
User 81094 does not improve AUC. Reverting changes.
Training on augumented user 46875 19/50 current_auc = 0.8333333333333334
User 46875 AUC after training: 0.8333333333333334
User 46875 does not improve AUC. Reverting changes.
Training on augumented user 130130 20/50 current_auc = 0.8333333333333334
User 130130 AUC after training: 0.8333333333333334
User 130130 does not improve AUC. Reverting changes.
Training on augumented user 104930 21/50 current_auc = 0.8333333333333334
User 104930 AUC after training: 0.8333333333333334
User 104930 does not improve AUC. Reverting changes.
Training on augumented user 111922 22/50 current_auc = 0.8333333333333334
User 111922 AUC after training: 0.8333333333333334
User 111922 does not improve AUC. Reverting changes.
Training on augumented user 135754 23/50 current_auc = 0.8333333333333334
User 135754 AUC after training: 0.8333333333333334
User 135754 does not improve AUC. Reverting changes.
Training on augumented user 49932 24/50 current_auc = 0.8333333333333334
User 49932 AUC after training: 0.8333333333333334
User 49932 does not improve AUC. Reverting changes.
Training on augumented user 124037 25/50 current_auc = 0.8333333333333334
User 124037 AUC after training: 0.8333333333333334
User 124037 does not improve AUC. Reverting changes.
Training on augumented user 60891 26/50 current_auc = 0.8333333333333334
User 60891 AUC after training: 0.8333333333333334
User 60891 does not improve AUC. Reverting changes.
Training on augumented user 2708 27/50 current_auc = 0.8333333333333334
User 2708 AUC after training: 0.8333333333333334
User 2708 does not improve AUC. Reverting changes.
Training on augumented user 32123 28/50 current_auc = 0.8333333333333334
User 32123 AUC after training: 0.8333333333333334
User 32123 does not improve AUC. Reverting changes.
Training on augumented user 29060 29/50 current_auc = 0.8333333333333334
User 29060 AUC after training: 0.8333333333333334
User 29060 does not improve AUC. Reverting changes.
Training on augumented user 128703 30/50 current_auc = 0.8333333333333334
User 128703 AUC after training: 0.8333333333333334
User 128703 does not improve AUC. Reverting changes.
Training on augumented user 79293 31/50 current_auc = 0.8333333333333334
User 79293 AUC after training: 0.8333333333333334
User 79293 does not improve AUC. Reverting changes.
Training on augumented user 63358 32/50 current_auc = 0.8333333333333334
User 63358 AUC after training: 0.8333333333333334
User 63358 does not improve AUC. Reverting changes.
Training on augumented user 112174 33/50 current_auc = 0.8333333333333334
User 112174 AUC after training: 0.8333333333333334
User 112174 does not improve AUC. Reverting changes.
Training on augumented user 76734 34/50 current_auc = 0.8333333333333334
User 76734 AUC after training: 0.8333333333333334
User 76734 does not improve AUC. Reverting changes.
Training on augumented user 9792 35/50 current_auc = 0.8333333333333334
User 9792 AUC after training: 0.8333333333333334
User 9792 does not improve AUC. Reverting changes.
Training on augumented user 66727 36/50 current_auc = 0.8333333333333334
User 66727 AUC after training: 0.8333333333333334
User 66727 does not improve AUC. Reverting changes.
Training on augumented user 112299 37/50 current_auc = 0.8333333333333334
User 112299 AUC after training: 0.8333333333333334
User 112299 does not improve AUC. Reverting changes.
Training on augumented user 3772 38/50 current_auc = 0.8333333333333334
User 3772 AUC after training: 0.8333333333333334
User 3772 does not improve AUC. Reverting changes.
Training on augumented user 93901 39/50 current_auc = 0.8333333333333334
User 93901 AUC after training: 0.8333333333333334
User 93901 does not improve AUC. Reverting changes.
Training on augumented user 124676 40/50 current_auc = 0.8333333333333334
User 124676 AUC after training: 0.8333333333333334
User 124676 does not improve AUC. Reverting changes.
Training on augumented user 31008 41/50 current_auc = 0.8333333333333334
User 31008 AUC after training: 0.8333333333333334
User 31008 does not improve AUC. Reverting changes.
Training on augumented user 51176 42/50 current_auc = 0.8333333333333334
User 51176 AUC after training: 0.8333333333333334
User 51176 does not improve AUC. Reverting changes.
Training on augumented user 26816 43/50 current_auc = 0.8333333333333334
User 26816 AUC after training: 0.8333333333333334
User 26816 does not improve AUC. Reverting changes.
Training on augumented user 52925 44/50 current_auc = 0.8333333333333334
User 52925 AUC after training: 0.8333333333333334
User 52925 does not improve AUC. Reverting changes.
Training on augumented user 113612 45/50 current_auc = 0.8333333333333334
User 113612 AUC after training: 0.8333333333333334
User 113612 does not improve AUC. Reverting changes.
Training on augumented user 117417 46/50 current_auc = 0.8333333333333334
User 117417 AUC after training: 0.8333333333333334
User 117417 does not improve AUC. Reverting changes.
Training on augumented user 86423 47/50 current_auc = 0.8333333333333334
User 86423 AUC after training: 0.8333333333333334
User 86423 does not improve AUC. Reverting changes.
Training on augumented user 124745 48/50 current_auc = 0.8333333333333334
User 124745 AUC after training: 0.8333333333333334
User 124745 does not improve AUC. Reverting changes.
Training on augumented user 24761 49/50 current_auc = 0.8333333333333334
User 24761 AUC after training: 0.8333333333333334
User 24761 does not improve AUC. Reverting changes.
[2024-12-02 18:55:23.629242] start test user 72573 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:24.037526] start test user 72573 143/568 recall augumented users by random, augumented_users = [102993, 92682, 65124, 131349, 102330, 27264, 41841, 135848, 89368, 51273, 47203, 26744, 124778, 105936, 65098, 83681, 101848, 48403, 8773, 94786, 102684, 124330, 31549, 18379, 4286, 12466, 3127, 7722, 24259, 97018, 42731, 109766, 115091, 46320, 51293, 80489, 64841, 125033, 115031, 37051, 109081, 69694, 56686, 118301, 112453, 72390, 102957, 39876, 12351, 95173]
[2024-12-02 18:55:24.052235] user = 72573 Cloud 143/568
[2024-12-02 18:55:24.062904] user = 72573 Local 143/568
[2024-12-02 18:55:24.105233] user = 72573 Local+ 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:25.852964] user = 72573 MPDA- 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8346774193548386
Training on augumented user 102993 0/50 current_auc = 0.8346774193548386
User 102993 AUC after training: 0.8387096774193548
User 102993 improves AUC. Keeping the model.
Training on augumented user 92682 1/50 current_auc = 0.8387096774193548
User 92682 AUC after training: 0.8387096774193548
User 92682 does not improve AUC. Reverting changes.
Training on augumented user 65124 2/50 current_auc = 0.8387096774193548
User 65124 AUC after training: 0.8387096774193548
User 65124 does not improve AUC. Reverting changes.
Training on augumented user 131349 3/50 current_auc = 0.8387096774193548
User 131349 AUC after training: 0.8387096774193548
User 131349 does not improve AUC. Reverting changes.
Training on augumented user 102330 4/50 current_auc = 0.8387096774193548
User 102330 AUC after training: 0.8387096774193548
User 102330 does not improve AUC. Reverting changes.
Training on augumented user 27264 5/50 current_auc = 0.8387096774193548
User 27264 AUC after training: 0.8387096774193548
User 27264 does not improve AUC. Reverting changes.
Training on augumented user 41841 6/50 current_auc = 0.8387096774193548
User 41841 AUC after training: 0.8387096774193548
User 41841 does not improve AUC. Reverting changes.
Training on augumented user 135848 7/50 current_auc = 0.8387096774193548
User 135848 AUC after training: 0.8346774193548386
User 135848 does not improve AUC. Reverting changes.
Training on augumented user 89368 8/50 current_auc = 0.8387096774193548
User 89368 AUC after training: 0.8387096774193548
User 89368 does not improve AUC. Reverting changes.
Training on augumented user 51273 9/50 current_auc = 0.8387096774193548
User 51273 AUC after training: 0.8387096774193548
User 51273 does not improve AUC. Reverting changes.
Training on augumented user 47203 10/50 current_auc = 0.8387096774193548
User 47203 AUC after training: 0.8387096774193548
User 47203 does not improve AUC. Reverting changes.
Training on augumented user 26744 11/50 current_auc = 0.8387096774193548
User 26744 AUC after training: 0.8387096774193548
User 26744 does not improve AUC. Reverting changes.
Training on augumented user 124778 12/50 current_auc = 0.8387096774193548
User 124778 AUC after training: 0.8387096774193548
User 124778 does not improve AUC. Reverting changes.
Training on augumented user 105936 13/50 current_auc = 0.8387096774193548
User 105936 AUC after training: 0.8387096774193548
User 105936 does not improve AUC. Reverting changes.
Training on augumented user 65098 14/50 current_auc = 0.8387096774193548
User 65098 AUC after training: 0.8387096774193548
User 65098 does not improve AUC. Reverting changes.
Training on augumented user 83681 15/50 current_auc = 0.8387096774193548
User 83681 AUC after training: 0.8387096774193548
User 83681 does not improve AUC. Reverting changes.
Training on augumented user 101848 16/50 current_auc = 0.8387096774193548
User 101848 AUC after training: 0.8387096774193548
User 101848 does not improve AUC. Reverting changes.
Training on augumented user 48403 17/50 current_auc = 0.8387096774193548
User 48403 AUC after training: 0.8387096774193548
User 48403 does not improve AUC. Reverting changes.
Training on augumented user 8773 18/50 current_auc = 0.8387096774193548
User 8773 AUC after training: 0.8387096774193548
User 8773 does not improve AUC. Reverting changes.
Training on augumented user 94786 19/50 current_auc = 0.8387096774193548
User 94786 AUC after training: 0.8387096774193548
User 94786 does not improve AUC. Reverting changes.
Training on augumented user 102684 20/50 current_auc = 0.8387096774193548
User 102684 AUC after training: 0.8387096774193548
User 102684 does not improve AUC. Reverting changes.
Training on augumented user 124330 21/50 current_auc = 0.8387096774193548
User 124330 AUC after training: 0.8387096774193548
User 124330 does not improve AUC. Reverting changes.
Training on augumented user 31549 22/50 current_auc = 0.8387096774193548
User 31549 AUC after training: 0.8387096774193548
User 31549 does not improve AUC. Reverting changes.
Training on augumented user 18379 23/50 current_auc = 0.8387096774193548
User 18379 AUC after training: 0.8387096774193548
User 18379 does not improve AUC. Reverting changes.
Training on augumented user 4286 24/50 current_auc = 0.8387096774193548
User 4286 AUC after training: 0.8387096774193548
User 4286 does not improve AUC. Reverting changes.
Training on augumented user 12466 25/50 current_auc = 0.8387096774193548
User 12466 AUC after training: 0.8387096774193548
User 12466 does not improve AUC. Reverting changes.
Training on augumented user 3127 26/50 current_auc = 0.8387096774193548
User 3127 AUC after training: 0.8387096774193548
User 3127 does not improve AUC. Reverting changes.
Training on augumented user 7722 27/50 current_auc = 0.8387096774193548
User 7722 AUC after training: 0.8387096774193548
User 7722 does not improve AUC. Reverting changes.
Training on augumented user 24259 28/50 current_auc = 0.8387096774193548
User 24259 AUC after training: 0.8387096774193548
User 24259 does not improve AUC. Reverting changes.
Training on augumented user 97018 29/50 current_auc = 0.8387096774193548
User 97018 AUC after training: 0.8387096774193548
User 97018 does not improve AUC. Reverting changes.
Training on augumented user 42731 30/50 current_auc = 0.8387096774193548
User 42731 AUC after training: 0.8387096774193548
User 42731 does not improve AUC. Reverting changes.
Training on augumented user 109766 31/50 current_auc = 0.8387096774193548
User 109766 AUC after training: 0.8387096774193548
User 109766 does not improve AUC. Reverting changes.
Training on augumented user 115091 32/50 current_auc = 0.8387096774193548
User 115091 AUC after training: 0.8387096774193548
User 115091 does not improve AUC. Reverting changes.
Training on augumented user 46320 33/50 current_auc = 0.8387096774193548
User 46320 AUC after training: 0.8387096774193548
User 46320 does not improve AUC. Reverting changes.
Training on augumented user 51293 34/50 current_auc = 0.8387096774193548
User 51293 AUC after training: 0.8387096774193548
User 51293 does not improve AUC. Reverting changes.
Training on augumented user 80489 35/50 current_auc = 0.8387096774193548
User 80489 AUC after training: 0.8387096774193548
User 80489 does not improve AUC. Reverting changes.
Training on augumented user 64841 36/50 current_auc = 0.8387096774193548
User 64841 AUC after training: 0.8427419354838709
User 64841 improves AUC. Keeping the model.
Training on augumented user 125033 37/50 current_auc = 0.8427419354838709
User 125033 AUC after training: 0.846774193548387
User 125033 improves AUC. Keeping the model.
Training on augumented user 115031 38/50 current_auc = 0.846774193548387
User 115031 AUC after training: 0.8548387096774193
User 115031 improves AUC. Keeping the model.
Training on augumented user 37051 39/50 current_auc = 0.8548387096774193
User 37051 AUC after training: 0.8346774193548386
User 37051 does not improve AUC. Reverting changes.
Training on augumented user 109081 40/50 current_auc = 0.8548387096774193
User 109081 AUC after training: 0.8548387096774193
User 109081 does not improve AUC. Reverting changes.
Training on augumented user 69694 41/50 current_auc = 0.8548387096774193
User 69694 AUC after training: 0.8548387096774193
User 69694 does not improve AUC. Reverting changes.
Training on augumented user 56686 42/50 current_auc = 0.8548387096774193
User 56686 AUC after training: 0.8548387096774193
User 56686 does not improve AUC. Reverting changes.
Training on augumented user 118301 43/50 current_auc = 0.8548387096774193
User 118301 AUC after training: 0.8548387096774193
User 118301 does not improve AUC. Reverting changes.
Training on augumented user 112453 44/50 current_auc = 0.8548387096774193
User 112453 AUC after training: 0.8508064516129031
User 112453 does not improve AUC. Reverting changes.
Training on augumented user 72390 45/50 current_auc = 0.8548387096774193
User 72390 AUC after training: 0.8548387096774193
User 72390 does not improve AUC. Reverting changes.
Training on augumented user 102957 46/50 current_auc = 0.8548387096774193
User 102957 AUC after training: 0.8548387096774193
User 102957 does not improve AUC. Reverting changes.
Training on augumented user 39876 47/50 current_auc = 0.8548387096774193
User 39876 AUC after training: 0.8548387096774193
User 39876 does not improve AUC. Reverting changes.
Training on augumented user 12351 48/50 current_auc = 0.8548387096774193
User 12351 AUC after training: 0.8548387096774193
User 12351 does not improve AUC. Reverting changes.
Training on augumented user 95173 49/50 current_auc = 0.8548387096774193
User 95173 AUC after training: 0.8548387096774193
User 95173 does not improve AUC. Reverting changes.
[2024-12-02 18:56:00.034323] start test user 72604 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:00.629250] start test user 72604 144/568 recall augumented users by random, augumented_users = [45918, 136801, 78901, 87766, 125388, 133868, 84197, 86218, 12816, 75839, 138370, 115130, 43058, 14020, 76356, 13317, 65753, 102585, 51249, 92591, 10510, 38355, 26197, 138037, 21448, 33556, 47771, 30716, 14341, 90010, 26025, 104928, 102206, 70837, 85133, 42456, 116342, 61014, 87015, 106611, 103171, 64140, 122655, 76045, 58137, 130427, 15071, 56360, 32151, 3984]
[2024-12-02 18:56:00.644194] user = 72604 Cloud 144/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:56:00.650403] user = 72604 Local 144/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:56:00.772429] user = 72604 Local+ 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:56:02.341436] user = 72604 MPDA- 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 45918 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45918 AUC after training: 0.5
User 45918 does not improve AUC. Reverting changes.
Training on augumented user 136801 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136801 AUC after training: 0.5
User 136801 does not improve AUC. Reverting changes.
Training on augumented user 78901 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78901 AUC after training: 0.5
User 78901 does not improve AUC. Reverting changes.
Training on augumented user 87766 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87766 AUC after training: 0.5
User 87766 does not improve AUC. Reverting changes.
Training on augumented user 125388 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125388 AUC after training: 0.5
User 125388 does not improve AUC. Reverting changes.
Training on augumented user 133868 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133868 AUC after training: 0.5
User 133868 does not improve AUC. Reverting changes.
Training on augumented user 84197 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84197 AUC after training: 0.5
User 84197 does not improve AUC. Reverting changes.
Training on augumented user 86218 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86218 AUC after training: 0.5
User 86218 does not improve AUC. Reverting changes.
Training on augumented user 12816 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12816 AUC after training: 0.5
User 12816 does not improve AUC. Reverting changes.
Training on augumented user 75839 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75839 AUC after training: 0.5
User 75839 does not improve AUC. Reverting changes.
Training on augumented user 138370 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138370 AUC after training: 0.5
User 138370 does not improve AUC. Reverting changes.
Training on augumented user 115130 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115130 AUC after training: 0.5
User 115130 does not improve AUC. Reverting changes.
Training on augumented user 43058 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43058 AUC after training: 0.5
User 43058 does not improve AUC. Reverting changes.
Training on augumented user 14020 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14020 AUC after training: 0.5
User 14020 does not improve AUC. Reverting changes.
Training on augumented user 76356 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76356 AUC after training: 0.5
User 76356 does not improve AUC. Reverting changes.
Training on augumented user 13317 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13317 AUC after training: 0.5
User 13317 does not improve AUC. Reverting changes.
Training on augumented user 65753 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65753 AUC after training: 0.5
User 65753 does not improve AUC. Reverting changes.
Training on augumented user 102585 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102585 AUC after training: 0.5
User 102585 does not improve AUC. Reverting changes.
Training on augumented user 51249 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51249 AUC after training: 0.5
User 51249 does not improve AUC. Reverting changes.
Training on augumented user 92591 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92591 AUC after training: 0.5
User 92591 does not improve AUC. Reverting changes.
Training on augumented user 10510 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10510 AUC after training: 0.5
User 10510 does not improve AUC. Reverting changes.
Training on augumented user 38355 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38355 AUC after training: 0.5
User 38355 does not improve AUC. Reverting changes.
Training on augumented user 26197 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26197 AUC after training: 0.5
User 26197 does not improve AUC. Reverting changes.
Training on augumented user 138037 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138037 AUC after training: 0.5
User 138037 does not improve AUC. Reverting changes.
Training on augumented user 21448 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21448 AUC after training: 0.5
User 21448 does not improve AUC. Reverting changes.
Training on augumented user 33556 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33556 AUC after training: 0.5
User 33556 does not improve AUC. Reverting changes.
Training on augumented user 47771 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47771 AUC after training: 0.5
User 47771 does not improve AUC. Reverting changes.
Training on augumented user 30716 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30716 AUC after training: 0.5
User 30716 does not improve AUC. Reverting changes.
Training on augumented user 14341 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14341 AUC after training: 0.5
User 14341 does not improve AUC. Reverting changes.
Training on augumented user 90010 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90010 AUC after training: 0.5
User 90010 does not improve AUC. Reverting changes.
Training on augumented user 26025 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26025 AUC after training: 0.5
User 26025 does not improve AUC. Reverting changes.
Training on augumented user 104928 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104928 AUC after training: 0.5
User 104928 does not improve AUC. Reverting changes.
Training on augumented user 102206 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102206 AUC after training: 0.5
User 102206 does not improve AUC. Reverting changes.
Training on augumented user 70837 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70837 AUC after training: 0.5
User 70837 does not improve AUC. Reverting changes.
Training on augumented user 85133 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85133 AUC after training: 0.5
User 85133 does not improve AUC. Reverting changes.
Training on augumented user 42456 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42456 AUC after training: 0.5
User 42456 does not improve AUC. Reverting changes.
Training on augumented user 116342 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116342 AUC after training: 0.5
User 116342 does not improve AUC. Reverting changes.
Training on augumented user 61014 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61014 AUC after training: 0.5
User 61014 does not improve AUC. Reverting changes.
Training on augumented user 87015 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87015 AUC after training: 0.5
User 87015 does not improve AUC. Reverting changes.
Training on augumented user 106611 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106611 AUC after training: 0.5
User 106611 does not improve AUC. Reverting changes.
Training on augumented user 103171 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103171 AUC after training: 0.5
User 103171 does not improve AUC. Reverting changes.
Training on augumented user 64140 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64140 AUC after training: 0.5
User 64140 does not improve AUC. Reverting changes.
Training on augumented user 122655 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122655 AUC after training: 0.5
User 122655 does not improve AUC. Reverting changes.
Training on augumented user 76045 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76045 AUC after training: 0.5
User 76045 does not improve AUC. Reverting changes.
Training on augumented user 58137 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58137 AUC after training: 0.5
User 58137 does not improve AUC. Reverting changes.
Training on augumented user 130427 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130427 AUC after training: 0.5
User 130427 does not improve AUC. Reverting changes.
Training on augumented user 15071 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15071 AUC after training: 0.5
User 15071 does not improve AUC. Reverting changes.
Training on augumented user 56360 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56360 AUC after training: 0.5
User 56360 does not improve AUC. Reverting changes.
Training on augumented user 32151 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32151 AUC after training: 0.5
User 32151 does not improve AUC. Reverting changes.
Training on augumented user 3984 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3984 AUC after training: 0.5
User 3984 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:56:25.874994] start test user 72614 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:26.283131] start test user 72614 145/568 recall augumented users by random, augumented_users = [18048, 96608, 123998, 106639, 74447, 107208, 99155, 25792, 33239, 66341, 36749, 128779, 73146, 136530, 91184, 31161, 131177, 9713, 133972, 103063, 98577, 60282, 74033, 123300, 131844, 45415, 64481, 92543, 72952, 15113, 128092, 115356, 35932, 115832, 83623, 32017, 25323, 122700, 34107, 56701, 47021, 73705, 111176, 123492, 117194, 110638, 41023, 52928, 40642, 2231]
[2024-12-02 18:56:26.297671] user = 72614 Cloud 145/568
[2024-12-02 18:56:26.308356] user = 72614 Local 145/568
[2024-12-02 18:56:26.377559] user = 72614 Local+ 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:28.763765] user = 72614 MPDA- 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5740740740740742
Training on augumented user 18048 0/50 current_auc = 0.5740740740740742
User 18048 AUC after training: 0.5720164609053499
User 18048 does not improve AUC. Reverting changes.
Training on augumented user 96608 1/50 current_auc = 0.5740740740740742
User 96608 AUC after training: 0.5720164609053497
User 96608 does not improve AUC. Reverting changes.
Training on augumented user 123998 2/50 current_auc = 0.5740740740740742
User 123998 AUC after training: 0.5740740740740742
User 123998 does not improve AUC. Reverting changes.
Training on augumented user 106639 3/50 current_auc = 0.5740740740740742
User 106639 AUC after training: 0.5720164609053499
User 106639 does not improve AUC. Reverting changes.
Training on augumented user 74447 4/50 current_auc = 0.5740740740740742
User 74447 AUC after training: 0.5740740740740742
User 74447 does not improve AUC. Reverting changes.
Training on augumented user 107208 5/50 current_auc = 0.5740740740740742
User 107208 AUC after training: 0.5740740740740742
User 107208 does not improve AUC. Reverting changes.
Training on augumented user 99155 6/50 current_auc = 0.5740740740740742
User 99155 AUC after training: 0.5720164609053499
User 99155 does not improve AUC. Reverting changes.
Training on augumented user 25792 7/50 current_auc = 0.5740740740740742
User 25792 AUC after training: 0.5740740740740741
User 25792 does not improve AUC. Reverting changes.
Training on augumented user 33239 8/50 current_auc = 0.5740740740740742
User 33239 AUC after training: 0.5740740740740742
User 33239 does not improve AUC. Reverting changes.
Training on augumented user 66341 9/50 current_auc = 0.5740740740740742
User 66341 AUC after training: 0.5740740740740742
User 66341 does not improve AUC. Reverting changes.
Training on augumented user 36749 10/50 current_auc = 0.5740740740740742
User 36749 AUC after training: 0.5720164609053497
User 36749 does not improve AUC. Reverting changes.
Training on augumented user 128779 11/50 current_auc = 0.5740740740740742
User 128779 AUC after training: 0.5761316872427984
User 128779 improves AUC. Keeping the model.
Training on augumented user 73146 12/50 current_auc = 0.5761316872427984
User 73146 AUC after training: 0.5781893004115226
User 73146 improves AUC. Keeping the model.
Training on augumented user 136530 13/50 current_auc = 0.5781893004115226
User 136530 AUC after training: 0.5781893004115226
User 136530 does not improve AUC. Reverting changes.
Training on augumented user 91184 14/50 current_auc = 0.5781893004115226
User 91184 AUC after training: 0.5781893004115227
User 91184 improves AUC. Keeping the model.
Training on augumented user 31161 15/50 current_auc = 0.5781893004115227
User 31161 AUC after training: 0.5781893004115227
User 31161 does not improve AUC. Reverting changes.
Training on augumented user 131177 16/50 current_auc = 0.5781893004115227
User 131177 AUC after training: 0.5761316872427984
User 131177 does not improve AUC. Reverting changes.
Training on augumented user 9713 17/50 current_auc = 0.5781893004115227
User 9713 AUC after training: 0.5781893004115227
User 9713 does not improve AUC. Reverting changes.
Training on augumented user 133972 18/50 current_auc = 0.5781893004115227
User 133972 AUC after training: 0.5781893004115227
User 133972 does not improve AUC. Reverting changes.
Training on augumented user 103063 19/50 current_auc = 0.5781893004115227
User 103063 AUC after training: 0.5740740740740741
User 103063 does not improve AUC. Reverting changes.
Training on augumented user 98577 20/50 current_auc = 0.5781893004115227
User 98577 AUC after training: 0.580246913580247
User 98577 improves AUC. Keeping the model.
Training on augumented user 60282 21/50 current_auc = 0.580246913580247
User 60282 AUC after training: 0.5761316872427984
User 60282 does not improve AUC. Reverting changes.
Training on augumented user 74033 22/50 current_auc = 0.580246913580247
User 74033 AUC after training: 0.5781893004115227
User 74033 does not improve AUC. Reverting changes.
Training on augumented user 123300 23/50 current_auc = 0.580246913580247
User 123300 AUC after training: 0.5781893004115226
User 123300 does not improve AUC. Reverting changes.
Training on augumented user 131844 24/50 current_auc = 0.580246913580247
User 131844 AUC after training: 0.5781893004115227
User 131844 does not improve AUC. Reverting changes.
Training on augumented user 45415 25/50 current_auc = 0.580246913580247
User 45415 AUC after training: 0.5781893004115227
User 45415 does not improve AUC. Reverting changes.
Training on augumented user 64481 26/50 current_auc = 0.580246913580247
User 64481 AUC after training: 0.580246913580247
User 64481 does not improve AUC. Reverting changes.
Training on augumented user 92543 27/50 current_auc = 0.580246913580247
User 92543 AUC after training: 0.5720164609053497
User 92543 does not improve AUC. Reverting changes.
Training on augumented user 72952 28/50 current_auc = 0.580246913580247
User 72952 AUC after training: 0.5781893004115227
User 72952 does not improve AUC. Reverting changes.
Training on augumented user 15113 29/50 current_auc = 0.580246913580247
User 15113 AUC after training: 0.5781893004115227
User 15113 does not improve AUC. Reverting changes.
Training on augumented user 128092 30/50 current_auc = 0.580246913580247
User 128092 AUC after training: 0.580246913580247
User 128092 does not improve AUC. Reverting changes.
Training on augumented user 115356 31/50 current_auc = 0.580246913580247
User 115356 AUC after training: 0.580246913580247
User 115356 does not improve AUC. Reverting changes.
Training on augumented user 35932 32/50 current_auc = 0.580246913580247
User 35932 AUC after training: 0.580246913580247
User 35932 does not improve AUC. Reverting changes.
Training on augumented user 115832 33/50 current_auc = 0.580246913580247
User 115832 AUC after training: 0.580246913580247
User 115832 does not improve AUC. Reverting changes.
Training on augumented user 83623 34/50 current_auc = 0.580246913580247
User 83623 AUC after training: 0.5761316872427984
User 83623 does not improve AUC. Reverting changes.
Training on augumented user 32017 35/50 current_auc = 0.580246913580247
User 32017 AUC after training: 0.580246913580247
User 32017 does not improve AUC. Reverting changes.
Training on augumented user 25323 36/50 current_auc = 0.580246913580247
User 25323 AUC after training: 0.5740740740740741
User 25323 does not improve AUC. Reverting changes.
Training on augumented user 122700 37/50 current_auc = 0.580246913580247
User 122700 AUC after training: 0.580246913580247
User 122700 does not improve AUC. Reverting changes.
Training on augumented user 34107 38/50 current_auc = 0.580246913580247
User 34107 AUC after training: 0.580246913580247
User 34107 does not improve AUC. Reverting changes.
Training on augumented user 56701 39/50 current_auc = 0.580246913580247
User 56701 AUC after training: 0.580246913580247
User 56701 does not improve AUC. Reverting changes.
Training on augumented user 47021 40/50 current_auc = 0.580246913580247
User 47021 AUC after training: 0.580246913580247
User 47021 does not improve AUC. Reverting changes.
Training on augumented user 73705 41/50 current_auc = 0.580246913580247
User 73705 AUC after training: 0.580246913580247
User 73705 does not improve AUC. Reverting changes.
Training on augumented user 111176 42/50 current_auc = 0.580246913580247
User 111176 AUC after training: 0.5823045267489713
User 111176 improves AUC. Keeping the model.
Training on augumented user 123492 43/50 current_auc = 0.5823045267489713
User 123492 AUC after training: 0.5823045267489713
User 123492 does not improve AUC. Reverting changes.
Training on augumented user 117194 44/50 current_auc = 0.5823045267489713
User 117194 AUC after training: 0.5823045267489713
User 117194 does not improve AUC. Reverting changes.
Training on augumented user 110638 45/50 current_auc = 0.5823045267489713
User 110638 AUC after training: 0.5823045267489713
User 110638 does not improve AUC. Reverting changes.
Training on augumented user 41023 46/50 current_auc = 0.5823045267489713
User 41023 AUC after training: 0.5823045267489713
User 41023 does not improve AUC. Reverting changes.
Training on augumented user 52928 47/50 current_auc = 0.5823045267489713
User 52928 AUC after training: 0.5823045267489713
User 52928 does not improve AUC. Reverting changes.
Training on augumented user 40642 48/50 current_auc = 0.5823045267489713
User 40642 AUC after training: 0.5823045267489713
User 40642 does not improve AUC. Reverting changes.
Training on augumented user 2231 49/50 current_auc = 0.5823045267489713
User 2231 AUC after training: 0.5823045267489713
User 2231 does not improve AUC. Reverting changes.
[2024-12-02 18:56:53.292318] start test user 72615 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:53.704401] start test user 72615 146/568 recall augumented users by random, augumented_users = [36870, 129830, 108224, 15108, 39098, 63416, 129426, 77665, 128280, 123637, 3805, 120027, 83560, 4158, 75141, 126651, 51798, 23166, 109588, 22968, 130876, 129624, 98690, 41180, 110104, 123886, 120775, 51427, 49832, 48541, 3799, 44301, 82934, 35006, 92978, 40365, 59913, 26681, 87340, 136757, 85045, 62744, 95145, 84102, 73909, 557, 58980, 1604, 90010, 44510]
[2024-12-02 18:56:53.719086] user = 72615 Cloud 146/568
[2024-12-02 18:56:53.733108] user = 72615 Local 146/568
[2024-12-02 18:56:53.761295] user = 72615 Local+ 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:55.630895] user = 72615 MPDA- 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7109717868338558
Training on augumented user 36870 0/50 current_auc = 0.7109717868338558
User 36870 AUC after training: 0.7115987460815046
User 36870 improves AUC. Keeping the model.
Training on augumented user 129830 1/50 current_auc = 0.7115987460815046
User 129830 AUC after training: 0.7122257053291535
User 129830 improves AUC. Keeping the model.
Training on augumented user 108224 2/50 current_auc = 0.7122257053291535
User 108224 AUC after training: 0.7122257053291535
User 108224 does not improve AUC. Reverting changes.
Training on augumented user 15108 3/50 current_auc = 0.7122257053291535
User 15108 AUC after training: 0.7115987460815046
User 15108 does not improve AUC. Reverting changes.
Training on augumented user 39098 4/50 current_auc = 0.7122257053291535
User 39098 AUC after training: 0.7122257053291535
User 39098 does not improve AUC. Reverting changes.
Training on augumented user 63416 5/50 current_auc = 0.7122257053291535
User 63416 AUC after training: 0.7122257053291535
User 63416 does not improve AUC. Reverting changes.
Training on augumented user 129426 6/50 current_auc = 0.7122257053291535
User 129426 AUC after training: 0.7122257053291535
User 129426 does not improve AUC. Reverting changes.
Training on augumented user 77665 7/50 current_auc = 0.7122257053291535
User 77665 AUC after training: 0.7090909090909091
User 77665 does not improve AUC. Reverting changes.
Training on augumented user 128280 8/50 current_auc = 0.7122257053291535
User 128280 AUC after training: 0.7122257053291535
User 128280 does not improve AUC. Reverting changes.
Training on augumented user 123637 9/50 current_auc = 0.7122257053291535
User 123637 AUC after training: 0.7115987460815046
User 123637 does not improve AUC. Reverting changes.
Training on augumented user 3805 10/50 current_auc = 0.7122257053291535
User 3805 AUC after training: 0.7109717868338558
User 3805 does not improve AUC. Reverting changes.
Training on augumented user 120027 11/50 current_auc = 0.7122257053291535
User 120027 AUC after training: 0.7115987460815046
User 120027 does not improve AUC. Reverting changes.
Training on augumented user 83560 12/50 current_auc = 0.7122257053291535
User 83560 AUC after training: 0.7122257053291535
User 83560 does not improve AUC. Reverting changes.
Training on augumented user 4158 13/50 current_auc = 0.7122257053291535
User 4158 AUC after training: 0.7128526645768024
User 4158 improves AUC. Keeping the model.
Training on augumented user 75141 14/50 current_auc = 0.7128526645768024
User 75141 AUC after training: 0.7122257053291535
User 75141 does not improve AUC. Reverting changes.
Training on augumented user 126651 15/50 current_auc = 0.7128526645768024
User 126651 AUC after training: 0.7134796238244514
User 126651 improves AUC. Keeping the model.
Training on augumented user 51798 16/50 current_auc = 0.7134796238244514
User 51798 AUC after training: 0.7128526645768025
User 51798 does not improve AUC. Reverting changes.
Training on augumented user 23166 17/50 current_auc = 0.7134796238244514
User 23166 AUC after training: 0.7122257053291535
User 23166 does not improve AUC. Reverting changes.
Training on augumented user 109588 18/50 current_auc = 0.7134796238244514
User 109588 AUC after training: 0.7122257053291535
User 109588 does not improve AUC. Reverting changes.
Training on augumented user 22968 19/50 current_auc = 0.7134796238244514
User 22968 AUC after training: 0.7122257053291535
User 22968 does not improve AUC. Reverting changes.
Training on augumented user 130876 20/50 current_auc = 0.7134796238244514
User 130876 AUC after training: 0.7122257053291535
User 130876 does not improve AUC. Reverting changes.
Training on augumented user 129624 21/50 current_auc = 0.7134796238244514
User 129624 AUC after training: 0.7122257053291535
User 129624 does not improve AUC. Reverting changes.
Training on augumented user 98690 22/50 current_auc = 0.7134796238244514
User 98690 AUC after training: 0.7115987460815046
User 98690 does not improve AUC. Reverting changes.
Training on augumented user 41180 23/50 current_auc = 0.7134796238244514
User 41180 AUC after training: 0.7128526645768024
User 41180 does not improve AUC. Reverting changes.
Training on augumented user 110104 24/50 current_auc = 0.7134796238244514
User 110104 AUC after training: 0.7122257053291535
User 110104 does not improve AUC. Reverting changes.
Training on augumented user 123886 25/50 current_auc = 0.7134796238244514
User 123886 AUC after training: 0.7122257053291535
User 123886 does not improve AUC. Reverting changes.
Training on augumented user 120775 26/50 current_auc = 0.7134796238244514
User 120775 AUC after training: 0.7122257053291535
User 120775 does not improve AUC. Reverting changes.
Training on augumented user 51427 27/50 current_auc = 0.7134796238244514
User 51427 AUC after training: 0.7128526645768024
User 51427 does not improve AUC. Reverting changes.
Training on augumented user 49832 28/50 current_auc = 0.7134796238244514
User 49832 AUC after training: 0.7122257053291535
User 49832 does not improve AUC. Reverting changes.
Training on augumented user 48541 29/50 current_auc = 0.7134796238244514
User 48541 AUC after training: 0.7115987460815046
User 48541 does not improve AUC. Reverting changes.
Training on augumented user 3799 30/50 current_auc = 0.7134796238244514
User 3799 AUC after training: 0.7122257053291535
User 3799 does not improve AUC. Reverting changes.
Training on augumented user 44301 31/50 current_auc = 0.7134796238244514
User 44301 AUC after training: 0.7128526645768024
User 44301 does not improve AUC. Reverting changes.
Training on augumented user 82934 32/50 current_auc = 0.7134796238244514
User 82934 AUC after training: 0.7122257053291535
User 82934 does not improve AUC. Reverting changes.
Training on augumented user 35006 33/50 current_auc = 0.7134796238244514
User 35006 AUC after training: 0.7122257053291535
User 35006 does not improve AUC. Reverting changes.
Training on augumented user 92978 34/50 current_auc = 0.7134796238244514
User 92978 AUC after training: 0.7115987460815046
User 92978 does not improve AUC. Reverting changes.
Training on augumented user 40365 35/50 current_auc = 0.7134796238244514
User 40365 AUC after training: 0.7128526645768025
User 40365 does not improve AUC. Reverting changes.
Training on augumented user 59913 36/50 current_auc = 0.7134796238244514
User 59913 AUC after training: 0.7128526645768025
User 59913 does not improve AUC. Reverting changes.
Training on augumented user 26681 37/50 current_auc = 0.7134796238244514
User 26681 AUC after training: 0.7115987460815046
User 26681 does not improve AUC. Reverting changes.
Training on augumented user 87340 38/50 current_auc = 0.7134796238244514
User 87340 AUC after training: 0.7122257053291536
User 87340 does not improve AUC. Reverting changes.
Training on augumented user 136757 39/50 current_auc = 0.7134796238244514
User 136757 AUC after training: 0.7122257053291535
User 136757 does not improve AUC. Reverting changes.
Training on augumented user 85045 40/50 current_auc = 0.7134796238244514
User 85045 AUC after training: 0.7128526645768025
User 85045 does not improve AUC. Reverting changes.
Training on augumented user 62744 41/50 current_auc = 0.7134796238244514
User 62744 AUC after training: 0.7122257053291535
User 62744 does not improve AUC. Reverting changes.
Training on augumented user 95145 42/50 current_auc = 0.7134796238244514
User 95145 AUC after training: 0.7134796238244514
User 95145 does not improve AUC. Reverting changes.
Training on augumented user 84102 43/50 current_auc = 0.7134796238244514
User 84102 AUC after training: 0.7128526645768024
User 84102 does not improve AUC. Reverting changes.
Training on augumented user 73909 44/50 current_auc = 0.7134796238244514
User 73909 AUC after training: 0.7128526645768024
User 73909 does not improve AUC. Reverting changes.
Training on augumented user 557 45/50 current_auc = 0.7134796238244514
User 557 AUC after training: 0.7128526645768024
User 557 does not improve AUC. Reverting changes.
Training on augumented user 58980 46/50 current_auc = 0.7134796238244514
User 58980 AUC after training: 0.7122257053291535
User 58980 does not improve AUC. Reverting changes.
Training on augumented user 1604 47/50 current_auc = 0.7134796238244514
User 1604 AUC after training: 0.7134796238244514
User 1604 does not improve AUC. Reverting changes.
Training on augumented user 90010 48/50 current_auc = 0.7134796238244514
User 90010 AUC after training: 0.7122257053291535
User 90010 does not improve AUC. Reverting changes.
Training on augumented user 44510 49/50 current_auc = 0.7134796238244514
User 44510 AUC after training: 0.7115987460815046
User 44510 does not improve AUC. Reverting changes.
[2024-12-02 18:57:25.292286] start test user 72629 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:26.352539] start test user 72629 147/568 recall augumented users by random, augumented_users = [110516, 10085, 69956, 56060, 76351, 117171, 105965, 77868, 66407, 73382, 113539, 124512, 74936, 33783, 76653, 96162, 39605, 98937, 122454, 8830, 90045, 52623, 28904, 49946, 113633, 28445, 87933, 1261, 129290, 25086, 83246, 40579, 76162, 15763, 57826, 135424, 56540, 121738, 35438, 115599, 28877, 23564, 80997, 136942, 104375, 21988, 131468, 71186, 26228, 40352]
[2024-12-02 18:57:26.377833] user = 72629 Cloud 147/568
[2024-12-02 18:57:26.403367] user = 72629 Local 147/568
[2024-12-02 18:57:26.440544] user = 72629 Local+ 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:28.878443] user = 72629 MPDA- 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5930243902439024
Training on augumented user 110516 0/50 current_auc = 0.5930243902439024
User 110516 AUC after training: 0.5929756097560975
User 110516 does not improve AUC. Reverting changes.
Training on augumented user 10085 1/50 current_auc = 0.5930243902439024
User 10085 AUC after training: 0.5920975609756097
User 10085 does not improve AUC. Reverting changes.
Training on augumented user 69956 2/50 current_auc = 0.5930243902439024
User 69956 AUC after training: 0.5929756097560975
User 69956 does not improve AUC. Reverting changes.
Training on augumented user 56060 3/50 current_auc = 0.5930243902439024
User 56060 AUC after training: 0.5928780487804878
User 56060 does not improve AUC. Reverting changes.
Training on augumented user 76351 4/50 current_auc = 0.5930243902439024
User 76351 AUC after training: 0.5926829268292683
User 76351 does not improve AUC. Reverting changes.
Training on augumented user 117171 5/50 current_auc = 0.5930243902439024
User 117171 AUC after training: 0.5920975609756098
User 117171 does not improve AUC. Reverting changes.
Training on augumented user 105965 6/50 current_auc = 0.5930243902439024
User 105965 AUC after training: 0.5926829268292683
User 105965 does not improve AUC. Reverting changes.
Training on augumented user 77868 7/50 current_auc = 0.5930243902439024
User 77868 AUC after training: 0.593170731707317
User 77868 improves AUC. Keeping the model.
Training on augumented user 66407 8/50 current_auc = 0.593170731707317
User 66407 AUC after training: 0.592780487804878
User 66407 does not improve AUC. Reverting changes.
Training on augumented user 73382 9/50 current_auc = 0.593170731707317
User 73382 AUC after training: 0.5918048780487805
User 73382 does not improve AUC. Reverting changes.
Training on augumented user 113539 10/50 current_auc = 0.593170731707317
User 113539 AUC after training: 0.5920975609756097
User 113539 does not improve AUC. Reverting changes.
Training on augumented user 124512 11/50 current_auc = 0.593170731707317
User 124512 AUC after training: 0.5925853658536585
User 124512 does not improve AUC. Reverting changes.
Training on augumented user 74936 12/50 current_auc = 0.593170731707317
User 74936 AUC after training: 0.5929756097560975
User 74936 does not improve AUC. Reverting changes.
Training on augumented user 33783 13/50 current_auc = 0.593170731707317
User 33783 AUC after training: 0.5924390243902439
User 33783 does not improve AUC. Reverting changes.
Training on augumented user 76653 14/50 current_auc = 0.593170731707317
User 76653 AUC after training: 0.5922926829268292
User 76653 does not improve AUC. Reverting changes.
Training on augumented user 96162 15/50 current_auc = 0.593170731707317
User 96162 AUC after training: 0.592780487804878
User 96162 does not improve AUC. Reverting changes.
Training on augumented user 39605 16/50 current_auc = 0.593170731707317
User 39605 AUC after training: 0.5929756097560975
User 39605 does not improve AUC. Reverting changes.
Training on augumented user 98937 17/50 current_auc = 0.593170731707317
User 98937 AUC after training: 0.5921951219512195
User 98937 does not improve AUC. Reverting changes.
Training on augumented user 122454 18/50 current_auc = 0.593170731707317
User 122454 AUC after training: 0.5928292682926829
User 122454 does not improve AUC. Reverting changes.
Training on augumented user 8830 19/50 current_auc = 0.593170731707317
User 8830 AUC after training: 0.5924878048780488
User 8830 does not improve AUC. Reverting changes.
Training on augumented user 90045 20/50 current_auc = 0.593170731707317
User 90045 AUC after training: 0.5925853658536586
User 90045 does not improve AUC. Reverting changes.
Training on augumented user 52623 21/50 current_auc = 0.593170731707317
User 52623 AUC after training: 0.591609756097561
User 52623 does not improve AUC. Reverting changes.
Training on augumented user 28904 22/50 current_auc = 0.593170731707317
User 28904 AUC after training: 0.5924878048780488
User 28904 does not improve AUC. Reverting changes.
Training on augumented user 49946 23/50 current_auc = 0.593170731707317
User 49946 AUC after training: 0.5929756097560975
User 49946 does not improve AUC. Reverting changes.
Training on augumented user 113633 24/50 current_auc = 0.593170731707317
User 113633 AUC after training: 0.5924878048780488
User 113633 does not improve AUC. Reverting changes.
Training on augumented user 28445 25/50 current_auc = 0.593170731707317
User 28445 AUC after training: 0.5924878048780488
User 28445 does not improve AUC. Reverting changes.
Training on augumented user 87933 26/50 current_auc = 0.593170731707317
User 87933 AUC after training: 0.5932682926829268
User 87933 improves AUC. Keeping the model.
Training on augumented user 1261 27/50 current_auc = 0.5932682926829268
User 1261 AUC after training: 0.5915609756097561
User 1261 does not improve AUC. Reverting changes.
Training on augumented user 129290 28/50 current_auc = 0.5932682926829268
User 129290 AUC after training: 0.5928780487804878
User 129290 does not improve AUC. Reverting changes.
Training on augumented user 25086 29/50 current_auc = 0.5932682926829268
User 25086 AUC after training: 0.5929756097560975
User 25086 does not improve AUC. Reverting changes.
Training on augumented user 83246 30/50 current_auc = 0.5932682926829268
User 83246 AUC after training: 0.5918536585365853
User 83246 does not improve AUC. Reverting changes.
Training on augumented user 40579 31/50 current_auc = 0.5932682926829268
User 40579 AUC after training: 0.5922926829268292
User 40579 does not improve AUC. Reverting changes.
Training on augumented user 76162 32/50 current_auc = 0.5932682926829268
User 76162 AUC after training: 0.5926829268292684
User 76162 does not improve AUC. Reverting changes.
Training on augumented user 15763 33/50 current_auc = 0.5932682926829268
User 15763 AUC after training: 0.5926341463414634
User 15763 does not improve AUC. Reverting changes.
Training on augumented user 57826 34/50 current_auc = 0.5932682926829268
User 57826 AUC after training: 0.5926829268292683
User 57826 does not improve AUC. Reverting changes.
Training on augumented user 135424 35/50 current_auc = 0.5932682926829268
User 135424 AUC after training: 0.5926829268292683
User 135424 does not improve AUC. Reverting changes.
Training on augumented user 56540 36/50 current_auc = 0.5932682926829268
User 56540 AUC after training: 0.5924878048780488
User 56540 does not improve AUC. Reverting changes.
Training on augumented user 121738 37/50 current_auc = 0.5932682926829268
User 121738 AUC after training: 0.5923414634146341
User 121738 does not improve AUC. Reverting changes.
Training on augumented user 35438 38/50 current_auc = 0.5932682926829268
User 35438 AUC after training: 0.5926341463414634
User 35438 does not improve AUC. Reverting changes.
Training on augumented user 115599 39/50 current_auc = 0.5932682926829268
User 115599 AUC after training: 0.5926829268292683
User 115599 does not improve AUC. Reverting changes.
Training on augumented user 28877 40/50 current_auc = 0.5932682926829268
User 28877 AUC after training: 0.5929268292682927
User 28877 does not improve AUC. Reverting changes.
Training on augumented user 23564 41/50 current_auc = 0.5932682926829268
User 23564 AUC after training: 0.5928292682926829
User 23564 does not improve AUC. Reverting changes.
Training on augumented user 80997 42/50 current_auc = 0.5932682926829268
User 80997 AUC after training: 0.592341463414634
User 80997 does not improve AUC. Reverting changes.
Training on augumented user 136942 43/50 current_auc = 0.5932682926829268
User 136942 AUC after training: 0.5928780487804878
User 136942 does not improve AUC. Reverting changes.
Training on augumented user 104375 44/50 current_auc = 0.5932682926829268
User 104375 AUC after training: 0.5926829268292682
User 104375 does not improve AUC. Reverting changes.
Training on augumented user 21988 45/50 current_auc = 0.5932682926829268
User 21988 AUC after training: 0.5929756097560975
User 21988 does not improve AUC. Reverting changes.
Training on augumented user 131468 46/50 current_auc = 0.5932682926829268
User 131468 AUC after training: 0.5924878048780488
User 131468 does not improve AUC. Reverting changes.
Training on augumented user 71186 47/50 current_auc = 0.5932682926829268
User 71186 AUC after training: 0.5933658536585366
User 71186 improves AUC. Keeping the model.
Training on augumented user 26228 48/50 current_auc = 0.5933658536585366
User 26228 AUC after training: 0.5932195121951219
User 26228 does not improve AUC. Reverting changes.
Training on augumented user 40352 49/50 current_auc = 0.5933658536585366
User 40352 AUC after training: 0.592780487804878
User 40352 does not improve AUC. Reverting changes.
[2024-12-02 18:57:58.928619] start test user 72643 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:59.759799] start test user 72643 148/568 recall augumented users by random, augumented_users = [92402, 89051, 29686, 48760, 1537, 37998, 72343, 54354, 39902, 772, 119964, 134434, 120718, 124422, 99976, 135593, 58371, 111020, 62342, 80210, 110825, 113634, 119647, 6666, 83542, 110180, 97012, 13416, 10948, 40116, 114966, 43936, 121269, 22684, 105122, 104999, 61510, 88760, 40796, 58062, 116982, 122186, 91030, 100654, 118267, 38566, 131465, 131133, 132775, 34057]
[2024-12-02 18:57:59.777335] user = 72643 Cloud 148/568
[2024-12-02 18:57:59.796080] user = 72643 Local 148/568
[2024-12-02 18:57:59.844617] user = 72643 Local+ 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:02.661663] user = 72643 MPDA- 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555124223602484
Training on augumented user 92402 0/50 current_auc = 0.5555124223602484
User 92402 AUC after training: 0.5539596273291926
User 92402 does not improve AUC. Reverting changes.
Training on augumented user 89051 1/50 current_auc = 0.5555124223602484
User 89051 AUC after training: 0.5578416149068323
User 89051 improves AUC. Keeping the model.
Training on augumented user 29686 2/50 current_auc = 0.5578416149068323
User 29686 AUC after training: 0.5562888198757764
User 29686 does not improve AUC. Reverting changes.
Training on augumented user 48760 3/50 current_auc = 0.5578416149068323
User 48760 AUC after training: 0.5586180124223602
User 48760 improves AUC. Keeping the model.
Training on augumented user 1537 4/50 current_auc = 0.5586180124223602
User 1537 AUC after training: 0.5562888198757764
User 1537 does not improve AUC. Reverting changes.
Training on augumented user 37998 5/50 current_auc = 0.5586180124223602
User 37998 AUC after training: 0.5597826086956522
User 37998 improves AUC. Keeping the model.
Training on augumented user 72343 6/50 current_auc = 0.5597826086956522
User 72343 AUC after training: 0.5609472049689441
User 72343 improves AUC. Keeping the model.
Training on augumented user 54354 7/50 current_auc = 0.5609472049689441
User 54354 AUC after training: 0.5590062111801243
User 54354 does not improve AUC. Reverting changes.
Training on augumented user 39902 8/50 current_auc = 0.5609472049689441
User 39902 AUC after training: 0.5574534161490683
User 39902 does not improve AUC. Reverting changes.
Training on augumented user 772 9/50 current_auc = 0.5609472049689441
User 772 AUC after training: 0.5590062111801243
User 772 does not improve AUC. Reverting changes.
Training on augumented user 119964 10/50 current_auc = 0.5609472049689441
User 119964 AUC after training: 0.5605590062111802
User 119964 does not improve AUC. Reverting changes.
Training on augumented user 134434 11/50 current_auc = 0.5609472049689441
User 134434 AUC after training: 0.5632763975155279
User 134434 improves AUC. Keeping the model.
Training on augumented user 120718 12/50 current_auc = 0.5632763975155279
User 120718 AUC after training: 0.5648291925465839
User 120718 improves AUC. Keeping the model.
Training on augumented user 124422 13/50 current_auc = 0.5648291925465839
User 124422 AUC after training: 0.562888198757764
User 124422 does not improve AUC. Reverting changes.
Training on augumented user 99976 14/50 current_auc = 0.5648291925465839
User 99976 AUC after training: 0.5644409937888198
User 99976 does not improve AUC. Reverting changes.
Training on augumented user 135593 15/50 current_auc = 0.5648291925465839
User 135593 AUC after training: 0.5640527950310559
User 135593 does not improve AUC. Reverting changes.
Training on augumented user 58371 16/50 current_auc = 0.5648291925465839
User 58371 AUC after training: 0.562888198757764
User 58371 does not improve AUC. Reverting changes.
Training on augumented user 111020 17/50 current_auc = 0.5648291925465839
User 111020 AUC after training: 0.5625
User 111020 does not improve AUC. Reverting changes.
Training on augumented user 62342 18/50 current_auc = 0.5648291925465839
User 62342 AUC after training: 0.5648291925465839
User 62342 does not improve AUC. Reverting changes.
Training on augumented user 80210 19/50 current_auc = 0.5648291925465839
User 80210 AUC after training: 0.5644409937888198
User 80210 does not improve AUC. Reverting changes.
Training on augumented user 110825 20/50 current_auc = 0.5648291925465839
User 110825 AUC after training: 0.5617236024844721
User 110825 does not improve AUC. Reverting changes.
Training on augumented user 113634 21/50 current_auc = 0.5648291925465839
User 113634 AUC after training: 0.5652173913043478
User 113634 improves AUC. Keeping the model.
Training on augumented user 119647 22/50 current_auc = 0.5652173913043478
User 119647 AUC after training: 0.5644409937888198
User 119647 does not improve AUC. Reverting changes.
Training on augumented user 6666 23/50 current_auc = 0.5652173913043478
User 6666 AUC after training: 0.5597826086956522
User 6666 does not improve AUC. Reverting changes.
Training on augumented user 83542 24/50 current_auc = 0.5652173913043478
User 83542 AUC after training: 0.5636645962732919
User 83542 does not improve AUC. Reverting changes.
Training on augumented user 110180 25/50 current_auc = 0.5652173913043478
User 110180 AUC after training: 0.5625
User 110180 does not improve AUC. Reverting changes.
Training on augumented user 97012 26/50 current_auc = 0.5652173913043478
User 97012 AUC after training: 0.5559006211180124
User 97012 does not improve AUC. Reverting changes.
Training on augumented user 13416 27/50 current_auc = 0.5652173913043478
User 13416 AUC after training: 0.562888198757764
User 13416 does not improve AUC. Reverting changes.
Training on augumented user 10948 28/50 current_auc = 0.5652173913043478
User 10948 AUC after training: 0.5625
User 10948 does not improve AUC. Reverting changes.
Training on augumented user 40116 29/50 current_auc = 0.5652173913043478
User 40116 AUC after training: 0.5648291925465839
User 40116 does not improve AUC. Reverting changes.
Training on augumented user 114966 30/50 current_auc = 0.5652173913043478
User 114966 AUC after training: 0.5547360248447205
User 114966 does not improve AUC. Reverting changes.
Training on augumented user 43936 31/50 current_auc = 0.5652173913043478
User 43936 AUC after training: 0.5597826086956522
User 43936 does not improve AUC. Reverting changes.
Training on augumented user 121269 32/50 current_auc = 0.5652173913043478
User 121269 AUC after training: 0.5644409937888198
User 121269 does not improve AUC. Reverting changes.
Training on augumented user 22684 33/50 current_auc = 0.5652173913043478
User 22684 AUC after training: 0.5640527950310559
User 22684 does not improve AUC. Reverting changes.
Training on augumented user 105122 34/50 current_auc = 0.5652173913043478
User 105122 AUC after training: 0.562111801242236
User 105122 does not improve AUC. Reverting changes.
Training on augumented user 104999 35/50 current_auc = 0.5652173913043478
User 104999 AUC after training: 0.563276397515528
User 104999 does not improve AUC. Reverting changes.
Training on augumented user 61510 36/50 current_auc = 0.5652173913043478
User 61510 AUC after training: 0.5632763975155279
User 61510 does not improve AUC. Reverting changes.
Training on augumented user 88760 37/50 current_auc = 0.5652173913043478
User 88760 AUC after training: 0.5582298136645963
User 88760 does not improve AUC. Reverting changes.
Training on augumented user 40796 38/50 current_auc = 0.5652173913043478
User 40796 AUC after training: 0.5586180124223602
User 40796 does not improve AUC. Reverting changes.
Training on augumented user 58062 39/50 current_auc = 0.5652173913043478
User 58062 AUC after training: 0.5636645962732919
User 58062 does not improve AUC. Reverting changes.
Training on augumented user 116982 40/50 current_auc = 0.5652173913043478
User 116982 AUC after training: 0.5617236024844721
User 116982 does not improve AUC. Reverting changes.
Training on augumented user 122186 41/50 current_auc = 0.5652173913043478
User 122186 AUC after training: 0.5632763975155279
User 122186 does not improve AUC. Reverting changes.
Training on augumented user 91030 42/50 current_auc = 0.5652173913043478
User 91030 AUC after training: 0.5593944099378881
User 91030 does not improve AUC. Reverting changes.
Training on augumented user 100654 43/50 current_auc = 0.5652173913043478
User 100654 AUC after training: 0.5632763975155279
User 100654 does not improve AUC. Reverting changes.
Training on augumented user 118267 44/50 current_auc = 0.5652173913043478
User 118267 AUC after training: 0.5648291925465839
User 118267 does not improve AUC. Reverting changes.
Training on augumented user 38566 45/50 current_auc = 0.5652173913043478
User 38566 AUC after training: 0.5648291925465838
User 38566 does not improve AUC. Reverting changes.
Training on augumented user 131465 46/50 current_auc = 0.5652173913043478
User 131465 AUC after training: 0.5625
User 131465 does not improve AUC. Reverting changes.
Training on augumented user 131133 47/50 current_auc = 0.5652173913043478
User 131133 AUC after training: 0.562888198757764
User 131133 does not improve AUC. Reverting changes.
Training on augumented user 132775 48/50 current_auc = 0.5652173913043478
User 132775 AUC after training: 0.5632763975155279
User 132775 does not improve AUC. Reverting changes.
Training on augumented user 34057 49/50 current_auc = 0.5652173913043478
User 34057 AUC after training: 0.564052795031056
User 34057 does not improve AUC. Reverting changes.
[2024-12-02 18:58:31.665821] start test user 72657 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:32.074950] start test user 72657 149/568 recall augumented users by random, augumented_users = [102759, 40012, 113816, 19978, 25791, 133477, 45951, 114303, 5345, 92292, 46235, 103233, 73566, 19382, 32600, 125905, 111695, 2507, 88094, 19325, 77739, 80991, 110011, 120333, 100591, 54530, 98375, 74173, 39537, 35053, 10914, 105007, 8135, 30120, 76730, 7415, 19344, 75440, 19704, 81821, 74257, 16290, 84242, 106714, 59627, 29330, 69755, 113563, 90848, 71444]
[2024-12-02 18:58:32.089300] user = 72657 Cloud 149/568
[2024-12-02 18:58:32.102562] user = 72657 Local 149/568
[2024-12-02 18:58:32.139030] user = 72657 Local+ 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:34.644747] user = 72657 MPDA- 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7737313432835821
Training on augumented user 102759 0/50 current_auc = 0.7737313432835821
User 102759 AUC after training: 0.7737313432835821
User 102759 does not improve AUC. Reverting changes.
Training on augumented user 40012 1/50 current_auc = 0.7737313432835821
User 40012 AUC after training: 0.7740298507462686
User 40012 improves AUC. Keeping the model.
Training on augumented user 113816 2/50 current_auc = 0.7740298507462686
User 113816 AUC after training: 0.7740298507462686
User 113816 does not improve AUC. Reverting changes.
Training on augumented user 19978 3/50 current_auc = 0.7740298507462686
User 19978 AUC after training: 0.7740298507462686
User 19978 does not improve AUC. Reverting changes.
Training on augumented user 25791 4/50 current_auc = 0.7740298507462686
User 25791 AUC after training: 0.7740298507462686
User 25791 does not improve AUC. Reverting changes.
Training on augumented user 133477 5/50 current_auc = 0.7740298507462686
User 133477 AUC after training: 0.7740298507462686
User 133477 does not improve AUC. Reverting changes.
Training on augumented user 45951 6/50 current_auc = 0.7740298507462686
User 45951 AUC after training: 0.7749253731343284
User 45951 improves AUC. Keeping the model.
Training on augumented user 114303 7/50 current_auc = 0.7749253731343284
User 114303 AUC after training: 0.7761194029850746
User 114303 improves AUC. Keeping the model.
Training on augumented user 5345 8/50 current_auc = 0.7761194029850746
User 5345 AUC after training: 0.7761194029850746
User 5345 does not improve AUC. Reverting changes.
Training on augumented user 92292 9/50 current_auc = 0.7761194029850746
User 92292 AUC after training: 0.7755223880597015
User 92292 does not improve AUC. Reverting changes.
Training on augumented user 46235 10/50 current_auc = 0.7761194029850746
User 46235 AUC after training: 0.7764179104477612
User 46235 improves AUC. Keeping the model.
Training on augumented user 103233 11/50 current_auc = 0.7764179104477612
User 103233 AUC after training: 0.7758208955223881
User 103233 does not improve AUC. Reverting changes.
Training on augumented user 73566 12/50 current_auc = 0.7764179104477612
User 73566 AUC after training: 0.7755223880597015
User 73566 does not improve AUC. Reverting changes.
Training on augumented user 19382 13/50 current_auc = 0.7764179104477612
User 19382 AUC after training: 0.7764179104477612
User 19382 does not improve AUC. Reverting changes.
Training on augumented user 32600 14/50 current_auc = 0.7764179104477612
User 32600 AUC after training: 0.7749253731343283
User 32600 does not improve AUC. Reverting changes.
Training on augumented user 125905 15/50 current_auc = 0.7764179104477612
User 125905 AUC after training: 0.7770149253731344
User 125905 improves AUC. Keeping the model.
Training on augumented user 111695 16/50 current_auc = 0.7770149253731344
User 111695 AUC after training: 0.7770149253731343
User 111695 does not improve AUC. Reverting changes.
Training on augumented user 2507 17/50 current_auc = 0.7770149253731344
User 2507 AUC after training: 0.7764179104477612
User 2507 does not improve AUC. Reverting changes.
Training on augumented user 88094 18/50 current_auc = 0.7770149253731344
User 88094 AUC after training: 0.7770149253731343
User 88094 does not improve AUC. Reverting changes.
Training on augumented user 19325 19/50 current_auc = 0.7770149253731344
User 19325 AUC after training: 0.7764179104477612
User 19325 does not improve AUC. Reverting changes.
Training on augumented user 77739 20/50 current_auc = 0.7770149253731344
User 77739 AUC after training: 0.7770149253731344
User 77739 does not improve AUC. Reverting changes.
Training on augumented user 80991 21/50 current_auc = 0.7770149253731344
User 80991 AUC after training: 0.7764179104477612
User 80991 does not improve AUC. Reverting changes.
Training on augumented user 110011 22/50 current_auc = 0.7770149253731344
User 110011 AUC after training: 0.7776119402985074
User 110011 improves AUC. Keeping the model.
Training on augumented user 120333 23/50 current_auc = 0.7776119402985074
User 120333 AUC after training: 0.7770149253731343
User 120333 does not improve AUC. Reverting changes.
Training on augumented user 100591 24/50 current_auc = 0.7776119402985074
User 100591 AUC after training: 0.7764179104477612
User 100591 does not improve AUC. Reverting changes.
Training on augumented user 54530 25/50 current_auc = 0.7776119402985074
User 54530 AUC after training: 0.7770149253731343
User 54530 does not improve AUC. Reverting changes.
Training on augumented user 98375 26/50 current_auc = 0.7776119402985074
User 98375 AUC after training: 0.775223880597015
User 98375 does not improve AUC. Reverting changes.
Training on augumented user 74173 27/50 current_auc = 0.7776119402985074
User 74173 AUC after training: 0.7770149253731344
User 74173 does not improve AUC. Reverting changes.
Training on augumented user 39537 28/50 current_auc = 0.7776119402985074
User 39537 AUC after training: 0.7770149253731344
User 39537 does not improve AUC. Reverting changes.
Training on augumented user 35053 29/50 current_auc = 0.7776119402985074
User 35053 AUC after training: 0.7770149253731344
User 35053 does not improve AUC. Reverting changes.
Training on augumented user 10914 30/50 current_auc = 0.7776119402985074
User 10914 AUC after training: 0.7776119402985074
User 10914 does not improve AUC. Reverting changes.
Training on augumented user 105007 31/50 current_auc = 0.7776119402985074
User 105007 AUC after training: 0.7770149253731344
User 105007 does not improve AUC. Reverting changes.
Training on augumented user 8135 32/50 current_auc = 0.7776119402985074
User 8135 AUC after training: 0.7761194029850746
User 8135 does not improve AUC. Reverting changes.
Training on augumented user 30120 33/50 current_auc = 0.7776119402985074
User 30120 AUC after training: 0.775223880597015
User 30120 does not improve AUC. Reverting changes.
Training on augumented user 76730 34/50 current_auc = 0.7776119402985074
User 76730 AUC after training: 0.7770149253731344
User 76730 does not improve AUC. Reverting changes.
Training on augumented user 7415 35/50 current_auc = 0.7776119402985074
User 7415 AUC after training: 0.7764179104477612
User 7415 does not improve AUC. Reverting changes.
Training on augumented user 19344 36/50 current_auc = 0.7776119402985074
User 19344 AUC after training: 0.7764179104477612
User 19344 does not improve AUC. Reverting changes.
Training on augumented user 75440 37/50 current_auc = 0.7776119402985074
User 75440 AUC after training: 0.7764179104477612
User 75440 does not improve AUC. Reverting changes.
Training on augumented user 19704 38/50 current_auc = 0.7776119402985074
User 19704 AUC after training: 0.7764179104477612
User 19704 does not improve AUC. Reverting changes.
Training on augumented user 81821 39/50 current_auc = 0.7776119402985074
User 81821 AUC after training: 0.7764179104477612
User 81821 does not improve AUC. Reverting changes.
Training on augumented user 74257 40/50 current_auc = 0.7776119402985074
User 74257 AUC after training: 0.7770149253731343
User 74257 does not improve AUC. Reverting changes.
Training on augumented user 16290 41/50 current_auc = 0.7776119402985074
User 16290 AUC after training: 0.7764179104477612
User 16290 does not improve AUC. Reverting changes.
Training on augumented user 84242 42/50 current_auc = 0.7776119402985074
User 84242 AUC after training: 0.7761194029850746
User 84242 does not improve AUC. Reverting changes.
Training on augumented user 106714 43/50 current_auc = 0.7776119402985074
User 106714 AUC after training: 0.7770149253731344
User 106714 does not improve AUC. Reverting changes.
Training on augumented user 59627 44/50 current_auc = 0.7776119402985074
User 59627 AUC after training: 0.7770149253731343
User 59627 does not improve AUC. Reverting changes.
Training on augumented user 29330 45/50 current_auc = 0.7776119402985074
User 29330 AUC after training: 0.7776119402985074
User 29330 does not improve AUC. Reverting changes.
Training on augumented user 69755 46/50 current_auc = 0.7776119402985074
User 69755 AUC after training: 0.7770149253731343
User 69755 does not improve AUC. Reverting changes.
Training on augumented user 113563 47/50 current_auc = 0.7776119402985074
User 113563 AUC after training: 0.7755223880597015
User 113563 does not improve AUC. Reverting changes.
Training on augumented user 90848 48/50 current_auc = 0.7776119402985074
User 90848 AUC after training: 0.7770149253731343
User 90848 does not improve AUC. Reverting changes.
Training on augumented user 71444 49/50 current_auc = 0.7776119402985074
User 71444 AUC after training: 0.7722388059701493
User 71444 does not improve AUC. Reverting changes.
[2024-12-02 18:59:05.362243] start test user 72659 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:06.276612] start test user 72659 150/568 recall augumented users by random, augumented_users = [36342, 30117, 46336, 29220, 12620, 8344, 1168, 41793, 73061, 45045, 11830, 10560, 35141, 88081, 115818, 93999, 43299, 13328, 13092, 17108, 1652, 130987, 88318, 27513, 91296, 53728, 66462, 108688, 104580, 23988, 57358, 18931, 32439, 59895, 109941, 29068, 56502, 85053, 68952, 58072, 34441, 120595, 65444, 28304, 74201, 90432, 109539, 2620, 16456, 100930]
[2024-12-02 18:59:06.315411] user = 72659 Cloud 150/568
[2024-12-02 18:59:06.622836] user = 72659 Local 150/568
[2024-12-02 18:59:07.309632] user = 72659 Local+ 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:12.676938] user = 72659 MPDA- 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7870206489675518
Training on augumented user 36342 0/50 current_auc = 0.7870206489675518
User 36342 AUC after training: 0.7867937372362152
User 36342 does not improve AUC. Reverting changes.
Training on augumented user 30117 1/50 current_auc = 0.7870206489675518
User 30117 AUC after training: 0.7871567960063536
User 30117 improves AUC. Keeping the model.
Training on augumented user 46336 2/50 current_auc = 0.7871567960063536
User 46336 AUC after training: 0.7874744724302246
User 46336 improves AUC. Keeping the model.
Training on augumented user 29220 3/50 current_auc = 0.7874744724302246
User 29220 AUC after training: 0.7874290900839573
User 29220 does not improve AUC. Reverting changes.
Training on augumented user 12620 4/50 current_auc = 0.7874744724302246
User 12620 AUC after training: 0.7867937372362149
User 12620 does not improve AUC. Reverting changes.
Training on augumented user 8344 5/50 current_auc = 0.7874744724302246
User 8344 AUC after training: 0.7875652371227593
User 8344 improves AUC. Keeping the model.
Training on augumented user 1168 6/50 current_auc = 0.7875652371227593
User 1168 AUC after training: 0.7878375312003632
User 1168 improves AUC. Keeping the model.
Training on augumented user 41793 7/50 current_auc = 0.7878375312003632
User 41793 AUC after training: 0.7877921488540958
User 41793 does not improve AUC. Reverting changes.
Training on augumented user 73061 8/50 current_auc = 0.7878375312003632
User 73061 AUC after training: 0.7875652371227593
User 73061 does not improve AUC. Reverting changes.
Training on augumented user 45045 9/50 current_auc = 0.7878375312003632
User 45045 AUC after training: 0.787837531200363
User 45045 does not improve AUC. Reverting changes.
Training on augumented user 11830 10/50 current_auc = 0.7878375312003632
User 11830 AUC after training: 0.787837531200363
User 11830 does not improve AUC. Reverting changes.
Training on augumented user 10560 11/50 current_auc = 0.7878375312003632
User 10560 AUC after training: 0.7872929430451553
User 10560 does not improve AUC. Reverting changes.
Training on augumented user 35141 12/50 current_auc = 0.7878375312003632
User 35141 AUC after training: 0.7876560018152937
User 35141 does not improve AUC. Reverting changes.
Training on augumented user 88081 13/50 current_auc = 0.7878375312003632
User 88081 AUC after training: 0.7879282958928977
User 88081 improves AUC. Keeping the model.
Training on augumented user 115818 14/50 current_auc = 0.7879282958928977
User 115818 AUC after training: 0.787247560698888
User 115818 does not improve AUC. Reverting changes.
Training on augumented user 93999 15/50 current_auc = 0.7879282958928977
User 93999 AUC after training: 0.7872475606988881
User 93999 does not improve AUC. Reverting changes.
Training on augumented user 43299 16/50 current_auc = 0.7879282958928977
User 43299 AUC after training: 0.7877921488540958
User 43299 does not improve AUC. Reverting changes.
Training on augumented user 13328 17/50 current_auc = 0.7879282958928977
User 13328 AUC after training: 0.7877467665078284
User 13328 does not improve AUC. Reverting changes.
Training on augumented user 13092 18/50 current_auc = 0.7879282958928977
User 13092 AUC after training: 0.78738370773769
User 13092 does not improve AUC. Reverting changes.
Training on augumented user 17108 19/50 current_auc = 0.7879282958928977
User 17108 AUC after training: 0.7877013841615611
User 17108 does not improve AUC. Reverting changes.
Training on augumented user 1652 20/50 current_auc = 0.7879282958928977
User 1652 AUC after training: 0.7876560018152938
User 1652 does not improve AUC. Reverting changes.
Training on augumented user 130987 21/50 current_auc = 0.7879282958928977
User 130987 AUC after training: 0.787837531200363
User 130987 does not improve AUC. Reverting changes.
Training on augumented user 88318 22/50 current_auc = 0.7879282958928977
User 88318 AUC after training: 0.7879282958928977
User 88318 does not improve AUC. Reverting changes.
Training on augumented user 27513 23/50 current_auc = 0.7879282958928977
User 27513 AUC after training: 0.7877467665078283
User 27513 does not improve AUC. Reverting changes.
Training on augumented user 91296 24/50 current_auc = 0.7879282958928977
User 91296 AUC after training: 0.7874744724302246
User 91296 does not improve AUC. Reverting changes.
Training on augumented user 53728 25/50 current_auc = 0.7879282958928977
User 53728 AUC after training: 0.7877921488540958
User 53728 does not improve AUC. Reverting changes.
Training on augumented user 66462 26/50 current_auc = 0.7879282958928977
User 66462 AUC after training: 0.7879282958928977
User 66462 does not improve AUC. Reverting changes.
Training on augumented user 108688 27/50 current_auc = 0.7879282958928977
User 108688 AUC after training: 0.7877467665078285
User 108688 does not improve AUC. Reverting changes.
Training on augumented user 104580 28/50 current_auc = 0.7879282958928977
User 104580 AUC after training: 0.787247560698888
User 104580 does not improve AUC. Reverting changes.
Training on augumented user 23988 29/50 current_auc = 0.7879282958928977
User 23988 AUC after training: 0.7879736782391648
User 23988 improves AUC. Keeping the model.
Training on augumented user 57358 30/50 current_auc = 0.7879736782391648
User 57358 AUC after training: 0.7876106194690267
User 57358 does not improve AUC. Reverting changes.
Training on augumented user 18931 31/50 current_auc = 0.7879736782391648
User 18931 AUC after training: 0.7876560018152937
User 18931 does not improve AUC. Reverting changes.
Training on augumented user 32439 32/50 current_auc = 0.7879736782391648
User 32439 AUC after training: 0.787973678239165
User 32439 improves AUC. Keeping the model.
Training on augumented user 59895 33/50 current_auc = 0.787973678239165
User 59895 AUC after training: 0.7869752666212843
User 59895 does not improve AUC. Reverting changes.
Training on augumented user 109941 34/50 current_auc = 0.787973678239165
User 109941 AUC after training: 0.7876560018152938
User 109941 does not improve AUC. Reverting changes.
Training on augumented user 29068 35/50 current_auc = 0.787973678239165
User 29068 AUC after training: 0.7876106194690266
User 29068 does not improve AUC. Reverting changes.
Training on augumented user 56502 36/50 current_auc = 0.787973678239165
User 56502 AUC after training: 0.7880190605854323
User 56502 improves AUC. Keeping the model.
Training on augumented user 85053 37/50 current_auc = 0.7880190605854323
User 85053 AUC after training: 0.7879282958928977
User 85053 does not improve AUC. Reverting changes.
Training on augumented user 68952 38/50 current_auc = 0.7880190605854323
User 68952 AUC after training: 0.7881098252779668
User 68952 improves AUC. Keeping the model.
Training on augumented user 58072 39/50 current_auc = 0.7881098252779668
User 58072 AUC after training: 0.7880190605854323
User 58072 does not improve AUC. Reverting changes.
Training on augumented user 34441 40/50 current_auc = 0.7881098252779668
User 34441 AUC after training: 0.7876560018152938
User 34441 does not improve AUC. Reverting changes.
Training on augumented user 120595 41/50 current_auc = 0.7881098252779668
User 120595 AUC after training: 0.7877921488540958
User 120595 does not improve AUC. Reverting changes.
Training on augumented user 65444 42/50 current_auc = 0.7881098252779668
User 65444 AUC after training: 0.788291354663036
User 65444 improves AUC. Keeping the model.
Training on augumented user 28304 43/50 current_auc = 0.788291354663036
User 28304 AUC after training: 0.7880190605854323
User 28304 does not improve AUC. Reverting changes.
Training on augumented user 74201 44/50 current_auc = 0.788291354663036
User 74201 AUC after training: 0.7872929430451554
User 74201 does not improve AUC. Reverting changes.
Training on augumented user 90432 45/50 current_auc = 0.788291354663036
User 90432 AUC after training: 0.7883367370093034
User 90432 improves AUC. Keeping the model.
Training on augumented user 109539 46/50 current_auc = 0.7883367370093034
User 109539 AUC after training: 0.7877921488540958
User 109539 does not improve AUC. Reverting changes.
Training on augumented user 2620 47/50 current_auc = 0.7883367370093034
User 2620 AUC after training: 0.7879282958928977
User 2620 does not improve AUC. Reverting changes.
Training on augumented user 16456 48/50 current_auc = 0.7883367370093034
User 16456 AUC after training: 0.7881552076242342
User 16456 does not improve AUC. Reverting changes.
Training on augumented user 100930 49/50 current_auc = 0.7883367370093034
User 100930 AUC after training: 0.7872929430451555
User 100930 does not improve AUC. Reverting changes.
[2024-12-02 18:59:46.920148] start test user 72667 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:47.344621] start test user 72667 151/568 recall augumented users by random, augumented_users = [123077, 102038, 130003, 46067, 134580, 67663, 104157, 104808, 116234, 4670, 35287, 92564, 3330, 113671, 83317, 20249, 91450, 93992, 114581, 123769, 114343, 116808, 20593, 35365, 120805, 122690, 12679, 48497, 118580, 119748, 91902, 117206, 57359, 70505, 28976, 129193, 68061, 81160, 50251, 116385, 102560, 6967, 86858, 38937, 54720, 55455, 138117, 116509, 77240, 63604]
[2024-12-02 18:59:47.359312] user = 72667 Cloud 151/568
[2024-12-02 18:59:47.369668] user = 72667 Local 151/568
[2024-12-02 18:59:47.408314] user = 72667 Local+ 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:49.558711] user = 72667 MPDA- 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.771551724137931
Training on augumented user 123077 0/50 current_auc = 0.771551724137931
User 123077 AUC after training: 0.7758620689655172
User 123077 improves AUC. Keeping the model.
Training on augumented user 102038 1/50 current_auc = 0.7758620689655172
User 102038 AUC after training: 0.771551724137931
User 102038 does not improve AUC. Reverting changes.
Training on augumented user 130003 2/50 current_auc = 0.7758620689655172
User 130003 AUC after training: 0.771551724137931
User 130003 does not improve AUC. Reverting changes.
Training on augumented user 46067 3/50 current_auc = 0.7758620689655172
User 46067 AUC after training: 0.771551724137931
User 46067 does not improve AUC. Reverting changes.
Training on augumented user 134580 4/50 current_auc = 0.7758620689655172
User 134580 AUC after training: 0.7758620689655172
User 134580 does not improve AUC. Reverting changes.
Training on augumented user 67663 5/50 current_auc = 0.7758620689655172
User 67663 AUC after training: 0.771551724137931
User 67663 does not improve AUC. Reverting changes.
Training on augumented user 104157 6/50 current_auc = 0.7758620689655172
User 104157 AUC after training: 0.771551724137931
User 104157 does not improve AUC. Reverting changes.
Training on augumented user 104808 7/50 current_auc = 0.7758620689655172
User 104808 AUC after training: 0.7758620689655172
User 104808 does not improve AUC. Reverting changes.
Training on augumented user 116234 8/50 current_auc = 0.7758620689655172
User 116234 AUC after training: 0.7758620689655172
User 116234 does not improve AUC. Reverting changes.
Training on augumented user 4670 9/50 current_auc = 0.7758620689655172
User 4670 AUC after training: 0.7758620689655172
User 4670 does not improve AUC. Reverting changes.
Training on augumented user 35287 10/50 current_auc = 0.7758620689655172
User 35287 AUC after training: 0.771551724137931
User 35287 does not improve AUC. Reverting changes.
Training on augumented user 92564 11/50 current_auc = 0.7758620689655172
User 92564 AUC after training: 0.771551724137931
User 92564 does not improve AUC. Reverting changes.
Training on augumented user 3330 12/50 current_auc = 0.7758620689655172
User 3330 AUC after training: 0.7758620689655172
User 3330 does not improve AUC. Reverting changes.
Training on augumented user 113671 13/50 current_auc = 0.7758620689655172
User 113671 AUC after training: 0.771551724137931
User 113671 does not improve AUC. Reverting changes.
Training on augumented user 83317 14/50 current_auc = 0.7758620689655172
User 83317 AUC after training: 0.7758620689655172
User 83317 does not improve AUC. Reverting changes.
Training on augumented user 20249 15/50 current_auc = 0.7758620689655172
User 20249 AUC after training: 0.771551724137931
User 20249 does not improve AUC. Reverting changes.
Training on augumented user 91450 16/50 current_auc = 0.7758620689655172
User 91450 AUC after training: 0.7758620689655172
User 91450 does not improve AUC. Reverting changes.
Training on augumented user 93992 17/50 current_auc = 0.7758620689655172
User 93992 AUC after training: 0.7758620689655172
User 93992 does not improve AUC. Reverting changes.
Training on augumented user 114581 18/50 current_auc = 0.7758620689655172
User 114581 AUC after training: 0.771551724137931
User 114581 does not improve AUC. Reverting changes.
Training on augumented user 123769 19/50 current_auc = 0.7758620689655172
User 123769 AUC after training: 0.7758620689655172
User 123769 does not improve AUC. Reverting changes.
Training on augumented user 114343 20/50 current_auc = 0.7758620689655172
User 114343 AUC after training: 0.771551724137931
User 114343 does not improve AUC. Reverting changes.
Training on augumented user 116808 21/50 current_auc = 0.7758620689655172
User 116808 AUC after training: 0.771551724137931
User 116808 does not improve AUC. Reverting changes.
Training on augumented user 20593 22/50 current_auc = 0.7758620689655172
User 20593 AUC after training: 0.7758620689655172
User 20593 does not improve AUC. Reverting changes.
Training on augumented user 35365 23/50 current_auc = 0.7758620689655172
User 35365 AUC after training: 0.7758620689655172
User 35365 does not improve AUC. Reverting changes.
Training on augumented user 120805 24/50 current_auc = 0.7758620689655172
User 120805 AUC after training: 0.7758620689655172
User 120805 does not improve AUC. Reverting changes.
Training on augumented user 122690 25/50 current_auc = 0.7758620689655172
User 122690 AUC after training: 0.7758620689655172
User 122690 does not improve AUC. Reverting changes.
Training on augumented user 12679 26/50 current_auc = 0.7758620689655172
User 12679 AUC after training: 0.7758620689655172
User 12679 does not improve AUC. Reverting changes.
Training on augumented user 48497 27/50 current_auc = 0.7758620689655172
User 48497 AUC after training: 0.7758620689655172
User 48497 does not improve AUC. Reverting changes.
Training on augumented user 118580 28/50 current_auc = 0.7758620689655172
User 118580 AUC after training: 0.771551724137931
User 118580 does not improve AUC. Reverting changes.
Training on augumented user 119748 29/50 current_auc = 0.7758620689655172
User 119748 AUC after training: 0.7758620689655172
User 119748 does not improve AUC. Reverting changes.
Training on augumented user 91902 30/50 current_auc = 0.7758620689655172
User 91902 AUC after training: 0.771551724137931
User 91902 does not improve AUC. Reverting changes.
Training on augumented user 117206 31/50 current_auc = 0.7758620689655172
User 117206 AUC after training: 0.7758620689655172
User 117206 does not improve AUC. Reverting changes.
Training on augumented user 57359 32/50 current_auc = 0.7758620689655172
User 57359 AUC after training: 0.7758620689655172
User 57359 does not improve AUC. Reverting changes.
Training on augumented user 70505 33/50 current_auc = 0.7758620689655172
User 70505 AUC after training: 0.7758620689655172
User 70505 does not improve AUC. Reverting changes.
Training on augumented user 28976 34/50 current_auc = 0.7758620689655172
User 28976 AUC after training: 0.771551724137931
User 28976 does not improve AUC. Reverting changes.
Training on augumented user 129193 35/50 current_auc = 0.7758620689655172
User 129193 AUC after training: 0.7758620689655172
User 129193 does not improve AUC. Reverting changes.
Training on augumented user 68061 36/50 current_auc = 0.7758620689655172
User 68061 AUC after training: 0.771551724137931
User 68061 does not improve AUC. Reverting changes.
Training on augumented user 81160 37/50 current_auc = 0.7758620689655172
User 81160 AUC after training: 0.771551724137931
User 81160 does not improve AUC. Reverting changes.
Training on augumented user 50251 38/50 current_auc = 0.7758620689655172
User 50251 AUC after training: 0.7758620689655172
User 50251 does not improve AUC. Reverting changes.
Training on augumented user 116385 39/50 current_auc = 0.7758620689655172
User 116385 AUC after training: 0.771551724137931
User 116385 does not improve AUC. Reverting changes.
Training on augumented user 102560 40/50 current_auc = 0.7758620689655172
User 102560 AUC after training: 0.7758620689655172
User 102560 does not improve AUC. Reverting changes.
Training on augumented user 6967 41/50 current_auc = 0.7758620689655172
User 6967 AUC after training: 0.771551724137931
User 6967 does not improve AUC. Reverting changes.
Training on augumented user 86858 42/50 current_auc = 0.7758620689655172
User 86858 AUC after training: 0.7758620689655172
User 86858 does not improve AUC. Reverting changes.
Training on augumented user 38937 43/50 current_auc = 0.7758620689655172
User 38937 AUC after training: 0.7758620689655172
User 38937 does not improve AUC. Reverting changes.
Training on augumented user 54720 44/50 current_auc = 0.7758620689655172
User 54720 AUC after training: 0.7758620689655172
User 54720 does not improve AUC. Reverting changes.
Training on augumented user 55455 45/50 current_auc = 0.7758620689655172
User 55455 AUC after training: 0.7758620689655172
User 55455 does not improve AUC. Reverting changes.
Training on augumented user 138117 46/50 current_auc = 0.7758620689655172
User 138117 AUC after training: 0.7758620689655172
User 138117 does not improve AUC. Reverting changes.
Training on augumented user 116509 47/50 current_auc = 0.7758620689655172
User 116509 AUC after training: 0.771551724137931
User 116509 does not improve AUC. Reverting changes.
Training on augumented user 77240 48/50 current_auc = 0.7758620689655172
User 77240 AUC after training: 0.771551724137931
User 77240 does not improve AUC. Reverting changes.
Training on augumented user 63604 49/50 current_auc = 0.7758620689655172
User 63604 AUC after training: 0.7758620689655172
User 63604 does not improve AUC. Reverting changes.
[2024-12-02 19:00:21.744002] start test user 72679 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:22.319535] start test user 72679 152/568 recall augumented users by random, augumented_users = [15156, 29997, 26457, 103398, 21562, 82736, 99452, 106707, 47333, 71274, 56620, 131057, 123185, 129189, 118178, 77407, 44580, 45745, 47520, 89863, 111495, 1533, 12870, 47401, 85170, 23268, 96138, 8445, 65506, 67007, 43104, 133389, 14815, 75639, 95327, 15736, 6685, 120415, 8429, 32441, 5583, 133876, 138310, 49851, 123101, 133316, 116604, 50360, 124961, 111626]
[2024-12-02 19:00:22.336615] user = 72679 Cloud 152/568
[2024-12-02 19:00:22.359850] user = 72679 Local 152/568
[2024-12-02 19:00:22.400036] user = 72679 Local+ 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:25.047860] user = 72679 MPDA- 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5296495956873315
Training on augumented user 15156 0/50 current_auc = 0.5296495956873315
User 15156 AUC after training: 0.5303234501347709
User 15156 improves AUC. Keeping the model.
Training on augumented user 29997 1/50 current_auc = 0.5303234501347709
User 29997 AUC after training: 0.5319407008086253
User 29997 improves AUC. Keeping the model.
Training on augumented user 26457 2/50 current_auc = 0.5319407008086253
User 26457 AUC after training: 0.5308625336927224
User 26457 does not improve AUC. Reverting changes.
Training on augumented user 103398 3/50 current_auc = 0.5319407008086253
User 103398 AUC after training: 0.532345013477089
User 103398 improves AUC. Keeping the model.
Training on augumented user 21562 4/50 current_auc = 0.532345013477089
User 21562 AUC after training: 0.5270889487870619
User 21562 does not improve AUC. Reverting changes.
Training on augumented user 82736 5/50 current_auc = 0.532345013477089
User 82736 AUC after training: 0.5315363881401617
User 82736 does not improve AUC. Reverting changes.
Training on augumented user 99452 6/50 current_auc = 0.532345013477089
User 99452 AUC after training: 0.5296495956873316
User 99452 does not improve AUC. Reverting changes.
Training on augumented user 106707 7/50 current_auc = 0.532345013477089
User 106707 AUC after training: 0.5324797843665768
User 106707 improves AUC. Keeping the model.
Training on augumented user 47333 8/50 current_auc = 0.5324797843665768
User 47333 AUC after training: 0.533288409703504
User 47333 improves AUC. Keeping the model.
Training on augumented user 71274 9/50 current_auc = 0.533288409703504
User 71274 AUC after training: 0.5332884097035041
User 71274 improves AUC. Keeping the model.
Training on augumented user 56620 10/50 current_auc = 0.5332884097035041
User 56620 AUC after training: 0.5328840970350405
User 56620 does not improve AUC. Reverting changes.
Training on augumented user 131057 11/50 current_auc = 0.5332884097035041
User 131057 AUC after training: 0.5334231805929919
User 131057 improves AUC. Keeping the model.
Training on augumented user 123185 12/50 current_auc = 0.5334231805929919
User 123185 AUC after training: 0.534366576819407
User 123185 improves AUC. Keeping the model.
Training on augumented user 129189 13/50 current_auc = 0.534366576819407
User 129189 AUC after training: 0.5338274932614555
User 129189 does not improve AUC. Reverting changes.
Training on augumented user 118178 14/50 current_auc = 0.534366576819407
User 118178 AUC after training: 0.5396226415094338
User 118178 improves AUC. Keeping the model.
Training on augumented user 77407 15/50 current_auc = 0.5396226415094338
User 77407 AUC after training: 0.5382749326145553
User 77407 does not improve AUC. Reverting changes.
Training on augumented user 44580 16/50 current_auc = 0.5396226415094338
User 44580 AUC after training: 0.5376010781671159
User 44580 does not improve AUC. Reverting changes.
Training on augumented user 45745 17/50 current_auc = 0.5396226415094338
User 45745 AUC after training: 0.5370619946091644
User 45745 does not improve AUC. Reverting changes.
Training on augumented user 47520 18/50 current_auc = 0.5396226415094338
User 47520 AUC after training: 0.5390835579514824
User 47520 does not improve AUC. Reverting changes.
Training on augumented user 89863 19/50 current_auc = 0.5396226415094338
User 89863 AUC after training: 0.5401617250673854
User 89863 improves AUC. Keeping the model.
Training on augumented user 111495 20/50 current_auc = 0.5401617250673854
User 111495 AUC after training: 0.5415768194070081
User 111495 improves AUC. Keeping the model.
Training on augumented user 1533 21/50 current_auc = 0.5415768194070081
User 1533 AUC after training: 0.5411051212938005
User 1533 does not improve AUC. Reverting changes.
Training on augumented user 12870 22/50 current_auc = 0.5415768194070081
User 12870 AUC after training: 0.539622641509434
User 12870 does not improve AUC. Reverting changes.
Training on augumented user 47401 23/50 current_auc = 0.5415768194070081
User 47401 AUC after training: 0.5412398921832884
User 47401 does not improve AUC. Reverting changes.
Training on augumented user 85170 24/50 current_auc = 0.5415768194070081
User 85170 AUC after training: 0.5403638814016173
User 85170 does not improve AUC. Reverting changes.
Training on augumented user 23268 25/50 current_auc = 0.5415768194070081
User 23268 AUC after training: 0.5386792452830188
User 23268 does not improve AUC. Reverting changes.
Training on augumented user 96138 26/50 current_auc = 0.5415768194070081
User 96138 AUC after training: 0.5411725067385444
User 96138 does not improve AUC. Reverting changes.
Training on augumented user 8445 27/50 current_auc = 0.5415768194070081
User 8445 AUC after training: 0.5388140161725067
User 8445 does not improve AUC. Reverting changes.
Training on augumented user 65506 28/50 current_auc = 0.5415768194070081
User 65506 AUC after training: 0.5388140161725067
User 65506 does not improve AUC. Reverting changes.
Training on augumented user 67007 29/50 current_auc = 0.5415768194070081
User 67007 AUC after training: 0.5404312668463611
User 67007 does not improve AUC. Reverting changes.
Training on augumented user 43104 30/50 current_auc = 0.5415768194070081
User 43104 AUC after training: 0.5425876010781671
User 43104 improves AUC. Keeping the model.
Training on augumented user 133389 31/50 current_auc = 0.5425876010781671
User 133389 AUC after training: 0.537466307277628
User 133389 does not improve AUC. Reverting changes.
Training on augumented user 14815 32/50 current_auc = 0.5425876010781671
User 14815 AUC after training: 0.5397574123989218
User 14815 does not improve AUC. Reverting changes.
Training on augumented user 75639 33/50 current_auc = 0.5425876010781671
User 75639 AUC after training: 0.5433962264150943
User 75639 improves AUC. Keeping the model.
Training on augumented user 95327 34/50 current_auc = 0.5433962264150943
User 95327 AUC after training: 0.5351752021563343
User 95327 does not improve AUC. Reverting changes.
Training on augumented user 15736 35/50 current_auc = 0.5433962264150943
User 15736 AUC after training: 0.5424528301886792
User 15736 does not improve AUC. Reverting changes.
Training on augumented user 6685 36/50 current_auc = 0.5433962264150943
User 6685 AUC after training: 0.5400269541778976
User 6685 does not improve AUC. Reverting changes.
Training on augumented user 120415 37/50 current_auc = 0.5433962264150943
User 120415 AUC after training: 0.5318059299191374
User 120415 does not improve AUC. Reverting changes.
Training on augumented user 8429 38/50 current_auc = 0.5433962264150943
User 8429 AUC after training: 0.5425876010781671
User 8429 does not improve AUC. Reverting changes.
Training on augumented user 32441 39/50 current_auc = 0.5433962264150943
User 32441 AUC after training: 0.5415094339622641
User 32441 does not improve AUC. Reverting changes.
Training on augumented user 5583 40/50 current_auc = 0.5433962264150943
User 5583 AUC after training: 0.5412398921832884
User 5583 does not improve AUC. Reverting changes.
Training on augumented user 133876 41/50 current_auc = 0.5433962264150943
User 133876 AUC after training: 0.5390835579514824
User 133876 does not improve AUC. Reverting changes.
Training on augumented user 138310 42/50 current_auc = 0.5433962264150943
User 138310 AUC after training: 0.5435309973045823
User 138310 improves AUC. Keeping the model.
Training on augumented user 49851 43/50 current_auc = 0.5435309973045823
User 49851 AUC after training: 0.5434636118598383
User 49851 does not improve AUC. Reverting changes.
Training on augumented user 123101 44/50 current_auc = 0.5435309973045823
User 123101 AUC after training: 0.5436657681940701
User 123101 improves AUC. Keeping the model.
Training on augumented user 133316 45/50 current_auc = 0.5436657681940701
User 133316 AUC after training: 0.5425876010781672
User 133316 does not improve AUC. Reverting changes.
Training on augumented user 116604 46/50 current_auc = 0.5436657681940701
User 116604 AUC after training: 0.5448113207547169
User 116604 improves AUC. Keeping the model.
Training on augumented user 50360 47/50 current_auc = 0.5448113207547169
User 50360 AUC after training: 0.5400269541778976
User 50360 does not improve AUC. Reverting changes.
Training on augumented user 124961 48/50 current_auc = 0.5448113207547169
User 124961 AUC after training: 0.5445417789757412
User 124961 does not improve AUC. Reverting changes.
Training on augumented user 111626 49/50 current_auc = 0.5448113207547169
User 111626 AUC after training: 0.5440700808625337
User 111626 does not improve AUC. Reverting changes.
[2024-12-02 19:00:57.503357] start test user 72715 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:58.327143] start test user 72715 153/568 recall augumented users by random, augumented_users = [39892, 55888, 131141, 121106, 135637, 96728, 82910, 95493, 113942, 55930, 134705, 77827, 104051, 87915, 75634, 24830, 121739, 104931, 2900, 74489, 58084, 103393, 92959, 138334, 53416, 20473, 64165, 108857, 102485, 1789, 8852, 136488, 90310, 53573, 65176, 101573, 32687, 76841, 66682, 53644, 130495, 90499, 18568, 2660, 136207, 24675, 5150, 603, 112004, 10962]
[2024-12-02 19:00:58.344995] user = 72715 Cloud 153/568
[2024-12-02 19:00:58.508826] user = 72715 Local 153/568
[2024-12-02 19:00:58.867952] user = 72715 Local+ 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:03.533641] user = 72715 MPDA- 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6365867928367928
Training on augumented user 39892 0/50 current_auc = 0.6365867928367928
User 39892 AUC after training: 0.6369683557183559
User 39892 improves AUC. Keeping the model.
Training on augumented user 55888 1/50 current_auc = 0.6369683557183559
User 55888 AUC after training: 0.6367775742775742
User 55888 does not improve AUC. Reverting changes.
Training on augumented user 131141 2/50 current_auc = 0.6369683557183559
User 131141 AUC after training: 0.6376170126170126
User 131141 improves AUC. Keeping the model.
Training on augumented user 121106 3/50 current_auc = 0.6376170126170126
User 121106 AUC after training: 0.6376806064306064
User 121106 improves AUC. Keeping the model.
Training on augumented user 135637 4/50 current_auc = 0.6376806064306064
User 135637 AUC after training: 0.6373880748880749
User 135637 does not improve AUC. Reverting changes.
Training on augumented user 96728 5/50 current_auc = 0.6376806064306064
User 96728 AUC after training: 0.6373626373626373
User 96728 does not improve AUC. Reverting changes.
Training on augumented user 82910 6/50 current_auc = 0.6376806064306064
User 82910 AUC after training: 0.637922262922263
User 82910 improves AUC. Keeping the model.
Training on augumented user 95493 7/50 current_auc = 0.637922262922263
User 95493 AUC after training: 0.6383038258038258
User 95493 improves AUC. Keeping the model.
Training on augumented user 113942 8/50 current_auc = 0.6383038258038258
User 113942 AUC after training: 0.6383547008547008
User 113942 improves AUC. Keeping the model.
Training on augumented user 55930 9/50 current_auc = 0.6383547008547008
User 55930 AUC after training: 0.6388380138380139
User 55930 improves AUC. Keeping the model.
Training on augumented user 134705 10/50 current_auc = 0.6388380138380139
User 134705 AUC after training: 0.6387362637362638
User 134705 does not improve AUC. Reverting changes.
Training on augumented user 77827 11/50 current_auc = 0.6388380138380139
User 77827 AUC after training: 0.6383038258038258
User 77827 does not improve AUC. Reverting changes.
Training on augumented user 104051 12/50 current_auc = 0.6388380138380139
User 104051 AUC after training: 0.6382275132275133
User 104051 does not improve AUC. Reverting changes.
Training on augumented user 87915 13/50 current_auc = 0.6388380138380139
User 87915 AUC after training: 0.6389524827024828
User 87915 improves AUC. Keeping the model.
Training on augumented user 75634 14/50 current_auc = 0.6389524827024828
User 75634 AUC after training: 0.6393594831094832
User 75634 improves AUC. Keeping the model.
Training on augumented user 24830 15/50 current_auc = 0.6393594831094832
User 24830 AUC after training: 0.6387362637362637
User 24830 does not improve AUC. Reverting changes.
Training on augumented user 121739 16/50 current_auc = 0.6393594831094832
User 121739 AUC after training: 0.6386853886853887
User 121739 does not improve AUC. Reverting changes.
Training on augumented user 104931 17/50 current_auc = 0.6393594831094832
User 104931 AUC after training: 0.6391178266178266
User 104931 does not improve AUC. Reverting changes.
Training on augumented user 2900 18/50 current_auc = 0.6393594831094832
User 2900 AUC after training: 0.6388888888888888
User 2900 does not improve AUC. Reverting changes.
Training on augumented user 74489 19/50 current_auc = 0.6393594831094832
User 74489 AUC after training: 0.6393213268213268
User 74489 does not improve AUC. Reverting changes.
Training on augumented user 58084 20/50 current_auc = 0.6393594831094832
User 58084 AUC after training: 0.639308608058608
User 58084 does not improve AUC. Reverting changes.
Training on augumented user 103393 21/50 current_auc = 0.6393594831094832
User 103393 AUC after training: 0.6390923890923892
User 103393 does not improve AUC. Reverting changes.
Training on augumented user 92959 22/50 current_auc = 0.6393594831094832
User 92959 AUC after training: 0.6394993894993894
User 92959 improves AUC. Keeping the model.
Training on augumented user 138334 23/50 current_auc = 0.6394993894993894
User 138334 AUC after training: 0.6395248270248272
User 138334 improves AUC. Keeping the model.
Training on augumented user 53416 24/50 current_auc = 0.6395248270248272
User 53416 AUC after training: 0.6389016076516076
User 53416 does not improve AUC. Reverting changes.
Training on augumented user 20473 25/50 current_auc = 0.6395248270248272
User 20473 AUC after training: 0.6392450142450142
User 20473 does not improve AUC. Reverting changes.
Training on augumented user 64165 26/50 current_auc = 0.6395248270248272
User 64165 AUC after training: 0.6399572649572649
User 64165 improves AUC. Keeping the model.
Training on augumented user 108857 27/50 current_auc = 0.6399572649572649
User 108857 AUC after training: 0.6396011396011396
User 108857 does not improve AUC. Reverting changes.
Training on augumented user 102485 28/50 current_auc = 0.6399572649572649
User 102485 AUC after training: 0.6392704517704517
User 102485 does not improve AUC. Reverting changes.
Training on augumented user 1789 29/50 current_auc = 0.6399572649572649
User 1789 AUC after training: 0.639575702075702
User 1789 does not improve AUC. Reverting changes.
Training on augumented user 8852 30/50 current_auc = 0.6399572649572649
User 8852 AUC after training: 0.6399954212454212
User 8852 improves AUC. Keeping the model.
Training on augumented user 136488 31/50 current_auc = 0.6399954212454212
User 136488 AUC after training: 0.6399445461945461
User 136488 does not improve AUC. Reverting changes.
Training on augumented user 90310 32/50 current_auc = 0.6399954212454212
User 90310 AUC after training: 0.6397792022792024
User 90310 does not improve AUC. Reverting changes.
Training on augumented user 53573 33/50 current_auc = 0.6399954212454212
User 53573 AUC after training: 0.6399827024827025
User 53573 does not improve AUC. Reverting changes.
Training on augumented user 65176 34/50 current_auc = 0.6399954212454212
User 65176 AUC after training: 0.6400590150590151
User 65176 improves AUC. Keeping the model.
Training on augumented user 101573 35/50 current_auc = 0.6400590150590151
User 101573 AUC after training: 0.6397283272283272
User 101573 does not improve AUC. Reverting changes.
Training on augumented user 32687 36/50 current_auc = 0.6400590150590151
User 32687 AUC after training: 0.6403133903133904
User 32687 improves AUC. Keeping the model.
Training on augumented user 76841 37/50 current_auc = 0.6403133903133904
User 76841 AUC after training: 0.639575702075702
User 76841 does not improve AUC. Reverting changes.
Training on augumented user 66682 38/50 current_auc = 0.6403133903133904
User 66682 AUC after training: 0.6405932030932031
User 66682 improves AUC. Keeping the model.
Training on augumented user 53644 39/50 current_auc = 0.6405932030932031
User 53644 AUC after training: 0.640275234025234
User 53644 does not improve AUC. Reverting changes.
Training on augumented user 130495 40/50 current_auc = 0.6405932030932031
User 130495 AUC after training: 0.6405932030932031
User 130495 does not improve AUC. Reverting changes.
Training on augumented user 90499 41/50 current_auc = 0.6405932030932031
User 90499 AUC after training: 0.6401607651607653
User 90499 does not improve AUC. Reverting changes.
Training on augumented user 18568 42/50 current_auc = 0.6405932030932031
User 18568 AUC after training: 0.6403133903133904
User 18568 does not improve AUC. Reverting changes.
Training on augumented user 2660 43/50 current_auc = 0.6405932030932031
User 2660 AUC after training: 0.6405932030932031
User 2660 does not improve AUC. Reverting changes.
Training on augumented user 136207 44/50 current_auc = 0.6405932030932031
User 136207 AUC after training: 0.640593203093203
User 136207 does not improve AUC. Reverting changes.
Training on augumented user 24675 45/50 current_auc = 0.6405932030932031
User 24675 AUC after training: 0.6402625152625153
User 24675 does not improve AUC. Reverting changes.
Training on augumented user 5150 46/50 current_auc = 0.6405932030932031
User 5150 AUC after training: 0.6403897028897029
User 5150 does not improve AUC. Reverting changes.
Training on augumented user 603 47/50 current_auc = 0.6405932030932031
User 603 AUC after training: 0.6401098901098901
User 603 does not improve AUC. Reverting changes.
Training on augumented user 112004 48/50 current_auc = 0.6405932030932031
User 112004 AUC after training: 0.6402370777370777
User 112004 does not improve AUC. Reverting changes.
Training on augumented user 10962 49/50 current_auc = 0.6405932030932031
User 10962 AUC after training: 0.6406695156695157
User 10962 improves AUC. Keeping the model.
[2024-12-02 19:01:40.478994] start test user 72754 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:40.975443] start test user 72754 154/568 recall augumented users by random, augumented_users = [54280, 9767, 113147, 26969, 87797, 97463, 80231, 135930, 20074, 51558, 4128, 49900, 44147, 101393, 1259, 43283, 79292, 38432, 112741, 82190, 41503, 15874, 96395, 99452, 6672, 107359, 130309, 81692, 111999, 117832, 93536, 82365, 82464, 70680, 6695, 95783, 2263, 2553, 27487, 9136, 84762, 61202, 95669, 40839, 17191, 106372, 126806, 54482, 62038, 26424]
[2024-12-02 19:01:40.990221] user = 72754 Cloud 154/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:01:40.996306] user = 72754 Local 154/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:01:41.011839] user = 72754 Local+ 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:01:43.350108] user = 72754 MPDA- 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 54280 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54280 AUC after training: 0.5
User 54280 does not improve AUC. Reverting changes.
Training on augumented user 9767 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9767 AUC after training: 0.5
User 9767 does not improve AUC. Reverting changes.
Training on augumented user 113147 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113147 AUC after training: 0.5
User 113147 does not improve AUC. Reverting changes.
Training on augumented user 26969 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26969 AUC after training: 0.5
User 26969 does not improve AUC. Reverting changes.
Training on augumented user 87797 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87797 AUC after training: 0.5
User 87797 does not improve AUC. Reverting changes.
Training on augumented user 97463 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97463 AUC after training: 0.5
User 97463 does not improve AUC. Reverting changes.
Training on augumented user 80231 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80231 AUC after training: 0.5
User 80231 does not improve AUC. Reverting changes.
Training on augumented user 135930 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135930 AUC after training: 0.5
User 135930 does not improve AUC. Reverting changes.
Training on augumented user 20074 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20074 AUC after training: 0.5
User 20074 does not improve AUC. Reverting changes.
Training on augumented user 51558 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51558 AUC after training: 0.5
User 51558 does not improve AUC. Reverting changes.
Training on augumented user 4128 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4128 AUC after training: 0.5
User 4128 does not improve AUC. Reverting changes.
Training on augumented user 49900 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49900 AUC after training: 0.5
User 49900 does not improve AUC. Reverting changes.
Training on augumented user 44147 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44147 AUC after training: 0.5
User 44147 does not improve AUC. Reverting changes.
Training on augumented user 101393 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101393 AUC after training: 0.5
User 101393 does not improve AUC. Reverting changes.
Training on augumented user 1259 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1259 AUC after training: 0.5
User 1259 does not improve AUC. Reverting changes.
Training on augumented user 43283 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43283 AUC after training: 0.5
User 43283 does not improve AUC. Reverting changes.
Training on augumented user 79292 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79292 AUC after training: 0.5
User 79292 does not improve AUC. Reverting changes.
Training on augumented user 38432 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38432 AUC after training: 0.5
User 38432 does not improve AUC. Reverting changes.
Training on augumented user 112741 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112741 AUC after training: 0.5
User 112741 does not improve AUC. Reverting changes.
Training on augumented user 82190 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82190 AUC after training: 0.5
User 82190 does not improve AUC. Reverting changes.
Training on augumented user 41503 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41503 AUC after training: 0.5
User 41503 does not improve AUC. Reverting changes.
Training on augumented user 15874 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15874 AUC after training: 0.5
User 15874 does not improve AUC. Reverting changes.
Training on augumented user 96395 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96395 AUC after training: 0.5
User 96395 does not improve AUC. Reverting changes.
Training on augumented user 99452 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99452 AUC after training: 0.5
User 99452 does not improve AUC. Reverting changes.
Training on augumented user 6672 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6672 AUC after training: 0.5
User 6672 does not improve AUC. Reverting changes.
Training on augumented user 107359 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107359 AUC after training: 0.5
User 107359 does not improve AUC. Reverting changes.
Training on augumented user 130309 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130309 AUC after training: 0.5
User 130309 does not improve AUC. Reverting changes.
Training on augumented user 81692 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81692 AUC after training: 0.5
User 81692 does not improve AUC. Reverting changes.
Training on augumented user 111999 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111999 AUC after training: 0.5
User 111999 does not improve AUC. Reverting changes.
Training on augumented user 117832 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117832 AUC after training: 0.5
User 117832 does not improve AUC. Reverting changes.
Training on augumented user 93536 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93536 AUC after training: 0.5
User 93536 does not improve AUC. Reverting changes.
Training on augumented user 82365 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82365 AUC after training: 0.5
User 82365 does not improve AUC. Reverting changes.
Training on augumented user 82464 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82464 AUC after training: 0.5
User 82464 does not improve AUC. Reverting changes.
Training on augumented user 70680 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70680 AUC after training: 0.5
User 70680 does not improve AUC. Reverting changes.
Training on augumented user 6695 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6695 AUC after training: 0.5
User 6695 does not improve AUC. Reverting changes.
Training on augumented user 95783 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95783 AUC after training: 0.5
User 95783 does not improve AUC. Reverting changes.
Training on augumented user 2263 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2263 AUC after training: 0.5
User 2263 does not improve AUC. Reverting changes.
Training on augumented user 2553 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2553 AUC after training: 0.5
User 2553 does not improve AUC. Reverting changes.
Training on augumented user 27487 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27487 AUC after training: 0.5
User 27487 does not improve AUC. Reverting changes.
Training on augumented user 9136 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9136 AUC after training: 0.5
User 9136 does not improve AUC. Reverting changes.
Training on augumented user 84762 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84762 AUC after training: 0.5
User 84762 does not improve AUC. Reverting changes.
Training on augumented user 61202 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61202 AUC after training: 0.5
User 61202 does not improve AUC. Reverting changes.
Training on augumented user 95669 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95669 AUC after training: 0.5
User 95669 does not improve AUC. Reverting changes.
Training on augumented user 40839 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40839 AUC after training: 0.5
User 40839 does not improve AUC. Reverting changes.
Training on augumented user 17191 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17191 AUC after training: 0.5
User 17191 does not improve AUC. Reverting changes.
Training on augumented user 106372 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106372 AUC after training: 0.5
User 106372 does not improve AUC. Reverting changes.
Training on augumented user 126806 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126806 AUC after training: 0.5
User 126806 does not improve AUC. Reverting changes.
Training on augumented user 54482 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54482 AUC after training: 0.5
User 54482 does not improve AUC. Reverting changes.
Training on augumented user 62038 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62038 AUC after training: 0.5
User 62038 does not improve AUC. Reverting changes.
Training on augumented user 26424 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26424 AUC after training: 0.5
User 26424 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:13.075781] start test user 72766 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:13.557480] start test user 72766 155/568 recall augumented users by random, augumented_users = [53690, 100457, 1793, 128165, 42447, 91226, 117807, 9410, 113159, 104331, 32414, 54836, 52349, 128797, 98790, 63466, 68460, 134152, 24291, 135754, 84493, 113004, 107670, 12063, 86754, 9427, 100989, 102361, 79964, 71766, 59551, 110232, 40173, 74185, 16161, 16849, 12182, 18966, 80125, 134717, 27998, 2231, 30861, 98269, 17116, 70340, 89306, 87877, 61424, 105184]
[2024-12-02 19:02:13.576275] user = 72766 Cloud 155/568
[2024-12-02 19:02:13.751228] user = 72766 Local 155/568
[2024-12-02 19:02:14.227347] user = 72766 Local+ 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:17.826444] user = 72766 MPDA- 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6217832548024647
Training on augumented user 53690 0/50 current_auc = 0.6217832548024647
User 53690 AUC after training: 0.6218557448350852
User 53690 improves AUC. Keeping the model.
Training on augumented user 100457 1/50 current_auc = 0.6218557448350852
User 100457 AUC after training: 0.6226531351939109
User 100457 improves AUC. Keeping the model.
Training on augumented user 1793 2/50 current_auc = 0.6226531351939109
User 1793 AUC after training: 0.6223631750634288
User 1793 does not improve AUC. Reverting changes.
Training on augumented user 128165 3/50 current_auc = 0.6226531351939109
User 128165 AUC after training: 0.6222544400144979
User 128165 does not improve AUC. Reverting changes.
Training on augumented user 42447 4/50 current_auc = 0.6226531351939109
User 42447 AUC after training: 0.6223631750634288
User 42447 does not improve AUC. Reverting changes.
Training on augumented user 91226 5/50 current_auc = 0.6226531351939109
User 91226 AUC after training: 0.6221819499818775
User 91226 does not improve AUC. Reverting changes.
Training on augumented user 117807 6/50 current_auc = 0.6226531351939109
User 117807 AUC after training: 0.6226531351939109
User 117807 does not improve AUC. Reverting changes.
Training on augumented user 9410 7/50 current_auc = 0.6226531351939109
User 9410 AUC after training: 0.6201159840521928
User 9410 does not improve AUC. Reverting changes.
Training on augumented user 113159 8/50 current_auc = 0.6226531351939109
User 113159 AUC after training: 0.6200797390358825
User 113159 does not improve AUC. Reverting changes.
Training on augumented user 104331 9/50 current_auc = 0.6226531351939109
User 104331 AUC after training: 0.6205871692642262
User 104331 does not improve AUC. Reverting changes.
Training on augumented user 32414 10/50 current_auc = 0.6226531351939109
User 32414 AUC after training: 0.62254440014498
User 32414 does not improve AUC. Reverting changes.
Training on augumented user 54836 11/50 current_auc = 0.6226531351939109
User 54836 AUC after training: 0.6227981152591519
User 54836 improves AUC. Keeping the model.
Training on augumented user 52349 12/50 current_auc = 0.6227981152591519
User 52349 AUC after training: 0.6221819499818775
User 52349 does not improve AUC. Reverting changes.
Training on augumented user 128797 13/50 current_auc = 0.6227981152591519
User 128797 AUC after training: 0.6204059441826749
User 128797 does not improve AUC. Reverting changes.
Training on augumented user 98790 14/50 current_auc = 0.6227981152591519
User 98790 AUC after training: 0.6221457049655672
User 98790 does not improve AUC. Reverting changes.
Training on augumented user 63466 15/50 current_auc = 0.6227981152591519
User 63466 AUC after training: 0.6214208046393621
User 63466 does not improve AUC. Reverting changes.
Training on augumented user 68460 16/50 current_auc = 0.6227981152591519
User 68460 AUC after training: 0.6231243204059441
User 68460 improves AUC. Keeping the model.
Training on augumented user 134152 17/50 current_auc = 0.6231243204059441
User 134152 AUC after training: 0.6225806451612903
User 134152 does not improve AUC. Reverting changes.
Training on augumented user 24291 18/50 current_auc = 0.6231243204059441
User 24291 AUC after training: 0.6223269300471186
User 24291 does not improve AUC. Reverting changes.
Training on augumented user 135754 19/50 current_auc = 0.6231243204059441
User 135754 AUC after training: 0.6222181949981878
User 135754 does not improve AUC. Reverting changes.
Training on augumented user 84493 20/50 current_auc = 0.6231243204059441
User 84493 AUC after training: 0.6225081551286697
User 84493 does not improve AUC. Reverting changes.
Training on augumented user 113004 21/50 current_auc = 0.6231243204059441
User 113004 AUC after training: 0.6229430953243928
User 113004 does not improve AUC. Reverting changes.
Training on augumented user 107670 22/50 current_auc = 0.6231243204059441
User 107670 AUC after training: 0.6228343602754621
User 107670 does not improve AUC. Reverting changes.
Training on augumented user 12063 23/50 current_auc = 0.6231243204059441
User 12063 AUC after training: 0.6230880753896338
User 12063 does not improve AUC. Reverting changes.
Training on augumented user 86754 24/50 current_auc = 0.6231243204059441
User 86754 AUC after training: 0.6210402319681043
User 86754 does not improve AUC. Reverting changes.
Training on augumented user 9427 25/50 current_auc = 0.6231243204059441
User 9427 AUC after training: 0.6227618702428416
User 9427 does not improve AUC. Reverting changes.
Training on augumented user 100989 26/50 current_auc = 0.6231243204059441
User 100989 AUC after training: 0.6227618702428416
User 100989 does not improve AUC. Reverting changes.
Training on augumented user 102361 27/50 current_auc = 0.6231243204059441
User 102361 AUC after training: 0.6229430953243928
User 102361 does not improve AUC. Reverting changes.
Training on augumented user 79964 28/50 current_auc = 0.6231243204059441
User 79964 AUC after training: 0.6229793403407031
User 79964 does not improve AUC. Reverting changes.
Training on augumented user 71766 29/50 current_auc = 0.6231243204059441
User 71766 AUC after training: 0.6230518303733237
User 71766 does not improve AUC. Reverting changes.
Training on augumented user 59551 30/50 current_auc = 0.6231243204059441
User 59551 AUC after training: 0.6225806451612903
User 59551 does not improve AUC. Reverting changes.
Training on augumented user 110232 31/50 current_auc = 0.6231243204059441
User 110232 AUC after training: 0.6228706052917724
User 110232 does not improve AUC. Reverting changes.
Training on augumented user 40173 32/50 current_auc = 0.6231243204059441
User 40173 AUC after training: 0.6229793403407031
User 40173 does not improve AUC. Reverting changes.
Training on augumented user 74185 33/50 current_auc = 0.6231243204059441
User 74185 AUC after training: 0.623233055454875
User 74185 improves AUC. Keeping the model.
Training on augumented user 16161 34/50 current_auc = 0.623233055454875
User 16161 AUC after training: 0.6210945994925697
User 16161 does not improve AUC. Reverting changes.
Training on augumented user 16849 35/50 current_auc = 0.623233055454875
User 16849 AUC after training: 0.6233417905038057
User 16849 improves AUC. Keeping the model.
Training on augumented user 12182 36/50 current_auc = 0.6233417905038057
User 12182 AUC after training: 0.6220732149329466
User 12182 does not improve AUC. Reverting changes.
Training on augumented user 18966 37/50 current_auc = 0.6233417905038057
User 18966 AUC after training: 0.6231605654222544
User 18966 does not improve AUC. Reverting changes.
Training on augumented user 80125 38/50 current_auc = 0.6233417905038057
User 80125 AUC after training: 0.6227256252265314
User 80125 does not improve AUC. Reverting changes.
Training on augumented user 134717 39/50 current_auc = 0.6233417905038057
User 134717 AUC after training: 0.6234505255527365
User 134717 improves AUC. Keeping the model.
Training on augumented user 27998 40/50 current_auc = 0.6234505255527365
User 27998 AUC after training: 0.6235955056179775
User 27998 improves AUC. Keeping the model.
Training on augumented user 2231 41/50 current_auc = 0.6235955056179775
User 2231 AUC after training: 0.6229430953243928
User 2231 does not improve AUC. Reverting changes.
Training on augumented user 30861 42/50 current_auc = 0.6235955056179775
User 30861 AUC after training: 0.6227981152591519
User 30861 does not improve AUC. Reverting changes.
Training on augumented user 98269 43/50 current_auc = 0.6235955056179775
User 98269 AUC after training: 0.6223631750634288
User 98269 does not improve AUC. Reverting changes.
Training on augumented user 17116 44/50 current_auc = 0.6235955056179775
User 17116 AUC after training: 0.6233055454874954
User 17116 does not improve AUC. Reverting changes.
Training on augumented user 70340 45/50 current_auc = 0.6235955056179775
User 70340 AUC after training: 0.6220369699166364
User 70340 does not improve AUC. Reverting changes.
Training on augumented user 89306 46/50 current_auc = 0.6235955056179775
User 89306 AUC after training: 0.6237042406669082
User 89306 improves AUC. Keeping the model.
Training on augumented user 87877 47/50 current_auc = 0.6237042406669082
User 87877 AUC after training: 0.623812975715839
User 87877 improves AUC. Keeping the model.
Training on augumented user 61424 48/50 current_auc = 0.623812975715839
User 61424 AUC after training: 0.6223269300471186
User 61424 does not improve AUC. Reverting changes.
Training on augumented user 105184 49/50 current_auc = 0.623812975715839
User 105184 AUC after training: 0.6239217107647699
User 105184 improves AUC. Keeping the model.
[2024-12-02 19:02:51.109819] start test user 72778 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:51.695042] start test user 72778 156/568 recall augumented users by random, augumented_users = [28060, 78841, 75485, 77248, 43466, 79716, 104456, 7287, 62267, 70851, 78898, 95200, 37091, 40610, 4352, 117108, 89666, 75569, 75286, 119012, 10572, 87211, 136882, 117925, 104316, 117684, 135476, 115111, 44778, 56267, 68158, 138482, 1682, 16465, 97985, 72745, 73776, 92291, 34976, 67135, 123990, 64133, 87373, 50613, 106761, 76750, 53885, 86585, 97076, 21113]
[2024-12-02 19:02:51.710647] user = 72778 Cloud 156/568
[2024-12-02 19:02:51.720771] user = 72778 Local 156/568
[2024-12-02 19:02:51.754454] user = 72778 Local+ 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:54.355238] user = 72778 MPDA- 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333333
Training on augumented user 28060 0/50 current_auc = 0.5833333333333333
User 28060 AUC after training: 0.5916666666666667
User 28060 improves AUC. Keeping the model.
Training on augumented user 78841 1/50 current_auc = 0.5916666666666667
User 78841 AUC after training: 0.5833333333333333
User 78841 does not improve AUC. Reverting changes.
Training on augumented user 75485 2/50 current_auc = 0.5916666666666667
User 75485 AUC after training: 0.575
User 75485 does not improve AUC. Reverting changes.
Training on augumented user 77248 3/50 current_auc = 0.5916666666666667
User 77248 AUC after training: 0.5791666666666666
User 77248 does not improve AUC. Reverting changes.
Training on augumented user 43466 4/50 current_auc = 0.5916666666666667
User 43466 AUC after training: 0.5833333333333333
User 43466 does not improve AUC. Reverting changes.
Training on augumented user 79716 5/50 current_auc = 0.5916666666666667
User 79716 AUC after training: 0.575
User 79716 does not improve AUC. Reverting changes.
Training on augumented user 104456 6/50 current_auc = 0.5916666666666667
User 104456 AUC after training: 0.5833333333333333
User 104456 does not improve AUC. Reverting changes.
Training on augumented user 7287 7/50 current_auc = 0.5916666666666667
User 7287 AUC after training: 0.6083333333333334
User 7287 improves AUC. Keeping the model.
Training on augumented user 62267 8/50 current_auc = 0.6083333333333334
User 62267 AUC after training: 0.6083333333333334
User 62267 does not improve AUC. Reverting changes.
Training on augumented user 70851 9/50 current_auc = 0.6083333333333334
User 70851 AUC after training: 0.6083333333333334
User 70851 does not improve AUC. Reverting changes.
Training on augumented user 78898 10/50 current_auc = 0.6083333333333334
User 78898 AUC after training: 0.6166666666666667
User 78898 improves AUC. Keeping the model.
Training on augumented user 95200 11/50 current_auc = 0.6166666666666667
User 95200 AUC after training: 0.6166666666666667
User 95200 does not improve AUC. Reverting changes.
Training on augumented user 37091 12/50 current_auc = 0.6166666666666667
User 37091 AUC after training: 0.6166666666666667
User 37091 does not improve AUC. Reverting changes.
Training on augumented user 40610 13/50 current_auc = 0.6166666666666667
User 40610 AUC after training: 0.6
User 40610 does not improve AUC. Reverting changes.
Training on augumented user 4352 14/50 current_auc = 0.6166666666666667
User 4352 AUC after training: 0.6
User 4352 does not improve AUC. Reverting changes.
Training on augumented user 117108 15/50 current_auc = 0.6166666666666667
User 117108 AUC after training: 0.6083333333333334
User 117108 does not improve AUC. Reverting changes.
Training on augumented user 89666 16/50 current_auc = 0.6166666666666667
User 89666 AUC after training: 0.6166666666666667
User 89666 does not improve AUC. Reverting changes.
Training on augumented user 75569 17/50 current_auc = 0.6166666666666667
User 75569 AUC after training: 0.5958333333333333
User 75569 does not improve AUC. Reverting changes.
Training on augumented user 75286 18/50 current_auc = 0.6166666666666667
User 75286 AUC after training: 0.6083333333333334
User 75286 does not improve AUC. Reverting changes.
Training on augumented user 119012 19/50 current_auc = 0.6166666666666667
User 119012 AUC after training: 0.6083333333333334
User 119012 does not improve AUC. Reverting changes.
Training on augumented user 10572 20/50 current_auc = 0.6166666666666667
User 10572 AUC after training: 0.6041666666666666
User 10572 does not improve AUC. Reverting changes.
Training on augumented user 87211 21/50 current_auc = 0.6166666666666667
User 87211 AUC after training: 0.5958333333333333
User 87211 does not improve AUC. Reverting changes.
Training on augumented user 136882 22/50 current_auc = 0.6166666666666667
User 136882 AUC after training: 0.6166666666666667
User 136882 does not improve AUC. Reverting changes.
Training on augumented user 117925 23/50 current_auc = 0.6166666666666667
User 117925 AUC after training: 0.5916666666666667
User 117925 does not improve AUC. Reverting changes.
Training on augumented user 104316 24/50 current_auc = 0.6166666666666667
User 104316 AUC after training: 0.6166666666666667
User 104316 does not improve AUC. Reverting changes.
Training on augumented user 117684 25/50 current_auc = 0.6166666666666667
User 117684 AUC after training: 0.5791666666666667
User 117684 does not improve AUC. Reverting changes.
Training on augumented user 135476 26/50 current_auc = 0.6166666666666667
User 135476 AUC after training: 0.6166666666666667
User 135476 does not improve AUC. Reverting changes.
Training on augumented user 115111 27/50 current_auc = 0.6166666666666667
User 115111 AUC after training: 0.6
User 115111 does not improve AUC. Reverting changes.
Training on augumented user 44778 28/50 current_auc = 0.6166666666666667
User 44778 AUC after training: 0.6125
User 44778 does not improve AUC. Reverting changes.
Training on augumented user 56267 29/50 current_auc = 0.6166666666666667
User 56267 AUC after training: 0.6166666666666667
User 56267 does not improve AUC. Reverting changes.
Training on augumented user 68158 30/50 current_auc = 0.6166666666666667
User 68158 AUC after training: 0.6166666666666667
User 68158 does not improve AUC. Reverting changes.
Training on augumented user 138482 31/50 current_auc = 0.6166666666666667
User 138482 AUC after training: 0.6166666666666667
User 138482 does not improve AUC. Reverting changes.
Training on augumented user 1682 32/50 current_auc = 0.6166666666666667
User 1682 AUC after training: 0.6
User 1682 does not improve AUC. Reverting changes.
Training on augumented user 16465 33/50 current_auc = 0.6166666666666667
User 16465 AUC after training: 0.6083333333333334
User 16465 does not improve AUC. Reverting changes.
Training on augumented user 97985 34/50 current_auc = 0.6166666666666667
User 97985 AUC after training: 0.6083333333333334
User 97985 does not improve AUC. Reverting changes.
Training on augumented user 72745 35/50 current_auc = 0.6166666666666667
User 72745 AUC after training: 0.6083333333333334
User 72745 does not improve AUC. Reverting changes.
Training on augumented user 73776 36/50 current_auc = 0.6166666666666667
User 73776 AUC after training: 0.5833333333333334
User 73776 does not improve AUC. Reverting changes.
Training on augumented user 92291 37/50 current_auc = 0.6166666666666667
User 92291 AUC after training: 0.6083333333333334
User 92291 does not improve AUC. Reverting changes.
Training on augumented user 34976 38/50 current_auc = 0.6166666666666667
User 34976 AUC after training: 0.6083333333333334
User 34976 does not improve AUC. Reverting changes.
Training on augumented user 67135 39/50 current_auc = 0.6166666666666667
User 67135 AUC after training: 0.6166666666666667
User 67135 does not improve AUC. Reverting changes.
Training on augumented user 123990 40/50 current_auc = 0.6166666666666667
User 123990 AUC after training: 0.6166666666666667
User 123990 does not improve AUC. Reverting changes.
Training on augumented user 64133 41/50 current_auc = 0.6166666666666667
User 64133 AUC after training: 0.6
User 64133 does not improve AUC. Reverting changes.
Training on augumented user 87373 42/50 current_auc = 0.6166666666666667
User 87373 AUC after training: 0.6125
User 87373 does not improve AUC. Reverting changes.
Training on augumented user 50613 43/50 current_auc = 0.6166666666666667
User 50613 AUC after training: 0.6166666666666667
User 50613 does not improve AUC. Reverting changes.
Training on augumented user 106761 44/50 current_auc = 0.6166666666666667
User 106761 AUC after training: 0.6166666666666667
User 106761 does not improve AUC. Reverting changes.
Training on augumented user 76750 45/50 current_auc = 0.6166666666666667
User 76750 AUC after training: 0.6083333333333334
User 76750 does not improve AUC. Reverting changes.
Training on augumented user 53885 46/50 current_auc = 0.6166666666666667
User 53885 AUC after training: 0.6083333333333334
User 53885 does not improve AUC. Reverting changes.
Training on augumented user 86585 47/50 current_auc = 0.6166666666666667
User 86585 AUC after training: 0.575
User 86585 does not improve AUC. Reverting changes.
Training on augumented user 97076 48/50 current_auc = 0.6166666666666667
User 97076 AUC after training: 0.6
User 97076 does not improve AUC. Reverting changes.
Training on augumented user 21113 49/50 current_auc = 0.6166666666666667
User 21113 AUC after training: 0.6083333333333334
User 21113 does not improve AUC. Reverting changes.
[2024-12-02 19:03:20.490005] start test user 72834 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:21.244519] start test user 72834 157/568 recall augumented users by random, augumented_users = [20939, 33076, 35821, 14611, 18821, 8900, 40228, 33729, 16816, 128732, 78434, 2515, 22506, 34584, 44127, 69648, 30324, 82500, 73553, 26109, 94078, 128697, 29856, 59246, 29547, 122849, 24095, 15729, 13219, 101073, 70259, 89604, 55196, 14242, 26116, 128691, 102720, 64079, 67214, 69419, 22831, 92750, 47636, 87100, 35594, 92929, 116404, 92702, 48439, 103392]
[2024-12-02 19:03:21.263058] user = 72834 Cloud 157/568
[2024-12-02 19:03:21.292913] user = 72834 Local 157/568
[2024-12-02 19:03:21.559991] user = 72834 Local+ 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:23.857255] user = 72834 MPDA- 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6057392389270119
Training on augumented user 20939 0/50 current_auc = 0.6057392389270119
User 20939 AUC after training: 0.6067789561239342
User 20939 improves AUC. Keeping the model.
Training on augumented user 33076 1/50 current_auc = 0.6067789561239342
User 33076 AUC after training: 0.6071948430027033
User 33076 improves AUC. Keeping the model.
Training on augumented user 35821 2/50 current_auc = 0.6071948430027033
User 35821 AUC after training: 0.6067789561239342
User 35821 does not improve AUC. Reverting changes.
Training on augumented user 14611 3/50 current_auc = 0.6071948430027033
User 14611 AUC after training: 0.6067789561239342
User 14611 does not improve AUC. Reverting changes.
Training on augumented user 18821 4/50 current_auc = 0.6071948430027033
User 18821 AUC after training: 0.6061551258057808
User 18821 does not improve AUC. Reverting changes.
Training on augumented user 8900 5/50 current_auc = 0.6071948430027033
User 8900 AUC after training: 0.6046995217300893
User 8900 does not improve AUC. Reverting changes.
Training on augumented user 40228 6/50 current_auc = 0.6071948430027033
User 40228 AUC after training: 0.6071948430027033
User 40228 does not improve AUC. Reverting changes.
Training on augumented user 33729 7/50 current_auc = 0.6071948430027033
User 33729 AUC after training: 0.6074027864420878
User 33729 improves AUC. Keeping the model.
Training on augumented user 16816 8/50 current_auc = 0.6074027864420878
User 16816 AUC after training: 0.6076107298814722
User 16816 improves AUC. Keeping the model.
Training on augumented user 128732 9/50 current_auc = 0.6076107298814722
User 128732 AUC after training: 0.6084425036390102
User 128732 improves AUC. Keeping the model.
Training on augumented user 78434 10/50 current_auc = 0.6084425036390102
User 78434 AUC after training: 0.6084425036390102
User 78434 does not improve AUC. Reverting changes.
Training on augumented user 2515 11/50 current_auc = 0.6084425036390102
User 2515 AUC after training: 0.6078186733208567
User 2515 does not improve AUC. Reverting changes.
Training on augumented user 22506 12/50 current_auc = 0.6084425036390102
User 22506 AUC after training: 0.6082345601996257
User 22506 does not improve AUC. Reverting changes.
Training on augumented user 34584 13/50 current_auc = 0.6084425036390102
User 34584 AUC after training: 0.6051154086088584
User 34584 does not improve AUC. Reverting changes.
Training on augumented user 44127 14/50 current_auc = 0.6084425036390102
User 44127 AUC after training: 0.6084425036390102
User 44127 does not improve AUC. Reverting changes.
Training on augumented user 69648 15/50 current_auc = 0.6084425036390102
User 69648 AUC after training: 0.6084425036390102
User 69648 does not improve AUC. Reverting changes.
Training on augumented user 30324 16/50 current_auc = 0.6084425036390102
User 30324 AUC after training: 0.6084425036390102
User 30324 does not improve AUC. Reverting changes.
Training on augumented user 82500 17/50 current_auc = 0.6084425036390102
User 82500 AUC after training: 0.6084425036390101
User 82500 does not improve AUC. Reverting changes.
Training on augumented user 73553 18/50 current_auc = 0.6084425036390102
User 73553 AUC after training: 0.6086504470783947
User 73553 improves AUC. Keeping the model.
Training on augumented user 26109 19/50 current_auc = 0.6086504470783947
User 26109 AUC after training: 0.6067789561239343
User 26109 does not improve AUC. Reverting changes.
Training on augumented user 94078 20/50 current_auc = 0.6086504470783947
User 94078 AUC after training: 0.6082345601996257
User 94078 does not improve AUC. Reverting changes.
Training on augumented user 128697 21/50 current_auc = 0.6086504470783947
User 128697 AUC after training: 0.6090663339571636
User 128697 improves AUC. Keeping the model.
Training on augumented user 29856 22/50 current_auc = 0.6090663339571636
User 29856 AUC after training: 0.6092742773965482
User 29856 improves AUC. Keeping the model.
Training on augumented user 59246 23/50 current_auc = 0.6092742773965482
User 59246 AUC after training: 0.6092742773965482
User 59246 does not improve AUC. Reverting changes.
Training on augumented user 29547 24/50 current_auc = 0.6092742773965482
User 29547 AUC after training: 0.6082345601996256
User 29547 does not improve AUC. Reverting changes.
Training on augumented user 122849 25/50 current_auc = 0.6092742773965482
User 122849 AUC after training: 0.6092742773965482
User 122849 does not improve AUC. Reverting changes.
Training on augumented user 24095 26/50 current_auc = 0.6092742773965482
User 24095 AUC after training: 0.6086504470783947
User 24095 does not improve AUC. Reverting changes.
Training on augumented user 15729 27/50 current_auc = 0.6092742773965482
User 15729 AUC after training: 0.6088583905177791
User 15729 does not improve AUC. Reverting changes.
Training on augumented user 13219 28/50 current_auc = 0.6092742773965482
User 13219 AUC after training: 0.6098981077147015
User 13219 improves AUC. Keeping the model.
Training on augumented user 101073 29/50 current_auc = 0.6098981077147015
User 101073 AUC after training: 0.6094822208359326
User 101073 does not improve AUC. Reverting changes.
Training on augumented user 70259 30/50 current_auc = 0.6098981077147015
User 70259 AUC after training: 0.6103139945934706
User 70259 improves AUC. Keeping the model.
Training on augumented user 89604 31/50 current_auc = 0.6103139945934706
User 89604 AUC after training: 0.610106051154086
User 89604 does not improve AUC. Reverting changes.
Training on augumented user 55196 32/50 current_auc = 0.6103139945934706
User 55196 AUC after training: 0.6076107298814722
User 55196 does not improve AUC. Reverting changes.
Training on augumented user 14242 33/50 current_auc = 0.6103139945934706
User 14242 AUC after training: 0.610521938032855
User 14242 improves AUC. Keeping the model.
Training on augumented user 26116 34/50 current_auc = 0.610521938032855
User 26116 AUC after training: 0.610106051154086
User 26116 does not improve AUC. Reverting changes.
Training on augumented user 128691 35/50 current_auc = 0.610521938032855
User 128691 AUC after training: 0.6103139945934706
User 128691 does not improve AUC. Reverting changes.
Training on augumented user 102720 36/50 current_auc = 0.610521938032855
User 102720 AUC after training: 0.6109378249116241
User 102720 improves AUC. Keeping the model.
Training on augumented user 64079 37/50 current_auc = 0.6109378249116241
User 64079 AUC after training: 0.6107298814722396
User 64079 does not improve AUC. Reverting changes.
Training on augumented user 67214 38/50 current_auc = 0.6109378249116241
User 67214 AUC after training: 0.610521938032855
User 67214 does not improve AUC. Reverting changes.
Training on augumented user 69419 39/50 current_auc = 0.6109378249116241
User 69419 AUC after training: 0.610521938032855
User 69419 does not improve AUC. Reverting changes.
Training on augumented user 22831 40/50 current_auc = 0.6109378249116241
User 22831 AUC after training: 0.610106051154086
User 22831 does not improve AUC. Reverting changes.
Training on augumented user 92750 41/50 current_auc = 0.6109378249116241
User 92750 AUC after training: 0.6090663339571637
User 92750 does not improve AUC. Reverting changes.
Training on augumented user 47636 42/50 current_auc = 0.6109378249116241
User 47636 AUC after training: 0.610521938032855
User 47636 does not improve AUC. Reverting changes.
Training on augumented user 87100 43/50 current_auc = 0.6109378249116241
User 87100 AUC after training: 0.611353711790393
User 87100 improves AUC. Keeping the model.
Training on augumented user 35594 44/50 current_auc = 0.611353711790393
User 35594 AUC after training: 0.6109378249116241
User 35594 does not improve AUC. Reverting changes.
Training on augumented user 92929 45/50 current_auc = 0.611353711790393
User 92929 AUC after training: 0.6107298814722396
User 92929 does not improve AUC. Reverting changes.
Training on augumented user 116404 46/50 current_auc = 0.611353711790393
User 116404 AUC after training: 0.610521938032855
User 116404 does not improve AUC. Reverting changes.
Training on augumented user 92702 47/50 current_auc = 0.611353711790393
User 92702 AUC after training: 0.6078186733208567
User 92702 does not improve AUC. Reverting changes.
Training on augumented user 48439 48/50 current_auc = 0.611353711790393
User 48439 AUC after training: 0.6111457683510085
User 48439 does not improve AUC. Reverting changes.
Training on augumented user 103392 49/50 current_auc = 0.611353711790393
User 103392 AUC after training: 0.6111457683510085
User 103392 does not improve AUC. Reverting changes.
[2024-12-02 19:03:57.644697] start test user 72838 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:58.149692] start test user 72838 158/568 recall augumented users by random, augumented_users = [16480, 94874, 83724, 125268, 79345, 90193, 89013, 96443, 25383, 94322, 136742, 128469, 11010, 41353, 113474, 48004, 49530, 8374, 102209, 39062, 30947, 101119, 28650, 124457, 3227, 19331, 110446, 102193, 35274, 22101, 16846, 119859, 3809, 38028, 102891, 21465, 137503, 43581, 33375, 81454, 47730, 33306, 30311, 49153, 84535, 9279, 84400, 99962, 48687, 55111]
[2024-12-02 19:03:58.175168] user = 72838 Cloud 158/568
[2024-12-02 19:03:58.185217] user = 72838 Local 158/568
[2024-12-02 19:03:58.342438] user = 72838 Local+ 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:00.275146] user = 72838 MPDA- 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7602040816326531
Training on augumented user 16480 0/50 current_auc = 0.7602040816326531
User 16480 AUC after training: 0.7602040816326531
User 16480 does not improve AUC. Reverting changes.
Training on augumented user 94874 1/50 current_auc = 0.7602040816326531
User 94874 AUC after training: 0.7602040816326531
User 94874 does not improve AUC. Reverting changes.
Training on augumented user 83724 2/50 current_auc = 0.7602040816326531
User 83724 AUC after training: 0.7602040816326531
User 83724 does not improve AUC. Reverting changes.
Training on augumented user 125268 3/50 current_auc = 0.7602040816326531
User 125268 AUC after training: 0.7602040816326531
User 125268 does not improve AUC. Reverting changes.
Training on augumented user 79345 4/50 current_auc = 0.7602040816326531
User 79345 AUC after training: 0.7602040816326531
User 79345 does not improve AUC. Reverting changes.
Training on augumented user 90193 5/50 current_auc = 0.7602040816326531
User 90193 AUC after training: 0.7602040816326531
User 90193 does not improve AUC. Reverting changes.
Training on augumented user 89013 6/50 current_auc = 0.7602040816326531
User 89013 AUC after training: 0.7602040816326531
User 89013 does not improve AUC. Reverting changes.
Training on augumented user 96443 7/50 current_auc = 0.7602040816326531
User 96443 AUC after training: 0.7602040816326531
User 96443 does not improve AUC. Reverting changes.
Training on augumented user 25383 8/50 current_auc = 0.7602040816326531
User 25383 AUC after training: 0.7602040816326531
User 25383 does not improve AUC. Reverting changes.
Training on augumented user 94322 9/50 current_auc = 0.7602040816326531
User 94322 AUC after training: 0.7602040816326531
User 94322 does not improve AUC. Reverting changes.
Training on augumented user 136742 10/50 current_auc = 0.7602040816326531
User 136742 AUC after training: 0.7602040816326531
User 136742 does not improve AUC. Reverting changes.
Training on augumented user 128469 11/50 current_auc = 0.7602040816326531
User 128469 AUC after training: 0.7602040816326531
User 128469 does not improve AUC. Reverting changes.
Training on augumented user 11010 12/50 current_auc = 0.7602040816326531
User 11010 AUC after training: 0.7602040816326531
User 11010 does not improve AUC. Reverting changes.
Training on augumented user 41353 13/50 current_auc = 0.7602040816326531
User 41353 AUC after training: 0.7602040816326531
User 41353 does not improve AUC. Reverting changes.
Training on augumented user 113474 14/50 current_auc = 0.7602040816326531
User 113474 AUC after training: 0.7602040816326531
User 113474 does not improve AUC. Reverting changes.
Training on augumented user 48004 15/50 current_auc = 0.7602040816326531
User 48004 AUC after training: 0.7602040816326531
User 48004 does not improve AUC. Reverting changes.
Training on augumented user 49530 16/50 current_auc = 0.7602040816326531
User 49530 AUC after training: 0.7602040816326531
User 49530 does not improve AUC. Reverting changes.
Training on augumented user 8374 17/50 current_auc = 0.7602040816326531
User 8374 AUC after training: 0.7602040816326531
User 8374 does not improve AUC. Reverting changes.
Training on augumented user 102209 18/50 current_auc = 0.7602040816326531
User 102209 AUC after training: 0.7602040816326531
User 102209 does not improve AUC. Reverting changes.
Training on augumented user 39062 19/50 current_auc = 0.7602040816326531
User 39062 AUC after training: 0.7602040816326531
User 39062 does not improve AUC. Reverting changes.
Training on augumented user 30947 20/50 current_auc = 0.7602040816326531
User 30947 AUC after training: 0.7602040816326531
User 30947 does not improve AUC. Reverting changes.
Training on augumented user 101119 21/50 current_auc = 0.7602040816326531
User 101119 AUC after training: 0.7602040816326531
User 101119 does not improve AUC. Reverting changes.
Training on augumented user 28650 22/50 current_auc = 0.7602040816326531
User 28650 AUC after training: 0.7602040816326531
User 28650 does not improve AUC. Reverting changes.
Training on augumented user 124457 23/50 current_auc = 0.7602040816326531
User 124457 AUC after training: 0.7602040816326531
User 124457 does not improve AUC. Reverting changes.
Training on augumented user 3227 24/50 current_auc = 0.7602040816326531
User 3227 AUC after training: 0.7602040816326531
User 3227 does not improve AUC. Reverting changes.
Training on augumented user 19331 25/50 current_auc = 0.7602040816326531
User 19331 AUC after training: 0.7602040816326531
User 19331 does not improve AUC. Reverting changes.
Training on augumented user 110446 26/50 current_auc = 0.7602040816326531
User 110446 AUC after training: 0.7602040816326531
User 110446 does not improve AUC. Reverting changes.
Training on augumented user 102193 27/50 current_auc = 0.7602040816326531
User 102193 AUC after training: 0.7602040816326531
User 102193 does not improve AUC. Reverting changes.
Training on augumented user 35274 28/50 current_auc = 0.7602040816326531
User 35274 AUC after training: 0.7602040816326531
User 35274 does not improve AUC. Reverting changes.
Training on augumented user 22101 29/50 current_auc = 0.7602040816326531
User 22101 AUC after training: 0.7551020408163265
User 22101 does not improve AUC. Reverting changes.
Training on augumented user 16846 30/50 current_auc = 0.7602040816326531
User 16846 AUC after training: 0.7602040816326531
User 16846 does not improve AUC. Reverting changes.
Training on augumented user 119859 31/50 current_auc = 0.7602040816326531
User 119859 AUC after training: 0.7602040816326531
User 119859 does not improve AUC. Reverting changes.
Training on augumented user 3809 32/50 current_auc = 0.7602040816326531
User 3809 AUC after training: 0.7602040816326531
User 3809 does not improve AUC. Reverting changes.
Training on augumented user 38028 33/50 current_auc = 0.7602040816326531
User 38028 AUC after training: 0.7602040816326531
User 38028 does not improve AUC. Reverting changes.
Training on augumented user 102891 34/50 current_auc = 0.7602040816326531
User 102891 AUC after training: 0.7602040816326531
User 102891 does not improve AUC. Reverting changes.
Training on augumented user 21465 35/50 current_auc = 0.7602040816326531
User 21465 AUC after training: 0.7602040816326531
User 21465 does not improve AUC. Reverting changes.
Training on augumented user 137503 36/50 current_auc = 0.7602040816326531
User 137503 AUC after training: 0.7602040816326531
User 137503 does not improve AUC. Reverting changes.
Training on augumented user 43581 37/50 current_auc = 0.7602040816326531
User 43581 AUC after training: 0.7602040816326531
User 43581 does not improve AUC. Reverting changes.
Training on augumented user 33375 38/50 current_auc = 0.7602040816326531
User 33375 AUC after training: 0.7602040816326531
User 33375 does not improve AUC. Reverting changes.
Training on augumented user 81454 39/50 current_auc = 0.7602040816326531
User 81454 AUC after training: 0.7602040816326531
User 81454 does not improve AUC. Reverting changes.
Training on augumented user 47730 40/50 current_auc = 0.7602040816326531
User 47730 AUC after training: 0.7602040816326531
User 47730 does not improve AUC. Reverting changes.
Training on augumented user 33306 41/50 current_auc = 0.7602040816326531
User 33306 AUC after training: 0.7602040816326531
User 33306 does not improve AUC. Reverting changes.
Training on augumented user 30311 42/50 current_auc = 0.7602040816326531
User 30311 AUC after training: 0.7602040816326531
User 30311 does not improve AUC. Reverting changes.
Training on augumented user 49153 43/50 current_auc = 0.7602040816326531
User 49153 AUC after training: 0.7602040816326531
User 49153 does not improve AUC. Reverting changes.
Training on augumented user 84535 44/50 current_auc = 0.7602040816326531
User 84535 AUC after training: 0.7602040816326531
User 84535 does not improve AUC. Reverting changes.
Training on augumented user 9279 45/50 current_auc = 0.7602040816326531
User 9279 AUC after training: 0.7602040816326531
User 9279 does not improve AUC. Reverting changes.
Training on augumented user 84400 46/50 current_auc = 0.7602040816326531
User 84400 AUC after training: 0.7602040816326531
User 84400 does not improve AUC. Reverting changes.
Training on augumented user 99962 47/50 current_auc = 0.7602040816326531
User 99962 AUC after training: 0.7602040816326531
User 99962 does not improve AUC. Reverting changes.
Training on augumented user 48687 48/50 current_auc = 0.7602040816326531
User 48687 AUC after training: 0.7602040816326531
User 48687 does not improve AUC. Reverting changes.
Training on augumented user 55111 49/50 current_auc = 0.7602040816326531
User 55111 AUC after training: 0.7602040816326531
User 55111 does not improve AUC. Reverting changes.
[2024-12-02 19:04:29.764406] start test user 72839 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:30.477225] start test user 72839 159/568 recall augumented users by random, augumented_users = [11563, 113451, 114766, 72770, 122957, 51067, 8714, 34873, 101574, 120698, 19319, 13284, 5562, 65860, 124718, 58360, 79389, 108241, 108360, 8992, 21070, 42736, 75928, 101414, 32030, 70932, 123523, 60345, 100467, 9569, 57005, 132724, 134868, 16759, 111997, 134845, 16671, 250, 92931, 32307, 109592, 98146, 103483, 104988, 92008, 116436, 132504, 114078, 101081, 67914]
[2024-12-02 19:04:30.492563] user = 72839 Cloud 159/568
[2024-12-02 19:04:30.502394] user = 72839 Local 159/568
[2024-12-02 19:04:30.609676] user = 72839 Local+ 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:32.525710] user = 72839 MPDA- 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 11563 0/50 current_auc = 0.6666666666666667
User 11563 AUC after training: 0.6666666666666667
User 11563 does not improve AUC. Reverting changes.
Training on augumented user 113451 1/50 current_auc = 0.6666666666666667
User 113451 AUC after training: 0.6666666666666667
User 113451 does not improve AUC. Reverting changes.
Training on augumented user 114766 2/50 current_auc = 0.6666666666666667
User 114766 AUC after training: 0.6666666666666667
User 114766 does not improve AUC. Reverting changes.
Training on augumented user 72770 3/50 current_auc = 0.6666666666666667
User 72770 AUC after training: 0.6666666666666667
User 72770 does not improve AUC. Reverting changes.
Training on augumented user 122957 4/50 current_auc = 0.6666666666666667
User 122957 AUC after training: 0.6666666666666667
User 122957 does not improve AUC. Reverting changes.
Training on augumented user 51067 5/50 current_auc = 0.6666666666666667
User 51067 AUC after training: 0.6666666666666667
User 51067 does not improve AUC. Reverting changes.
Training on augumented user 8714 6/50 current_auc = 0.6666666666666667
User 8714 AUC after training: 0.6666666666666667
User 8714 does not improve AUC. Reverting changes.
Training on augumented user 34873 7/50 current_auc = 0.6666666666666667
User 34873 AUC after training: 0.6666666666666667
User 34873 does not improve AUC. Reverting changes.
Training on augumented user 101574 8/50 current_auc = 0.6666666666666667
User 101574 AUC after training: 0.6666666666666667
User 101574 does not improve AUC. Reverting changes.
Training on augumented user 120698 9/50 current_auc = 0.6666666666666667
User 120698 AUC after training: 0.6666666666666667
User 120698 does not improve AUC. Reverting changes.
Training on augumented user 19319 10/50 current_auc = 0.6666666666666667
User 19319 AUC after training: 0.6666666666666667
User 19319 does not improve AUC. Reverting changes.
Training on augumented user 13284 11/50 current_auc = 0.6666666666666667
User 13284 AUC after training: 0.6666666666666667
User 13284 does not improve AUC. Reverting changes.
Training on augumented user 5562 12/50 current_auc = 0.6666666666666667
User 5562 AUC after training: 0.6666666666666667
User 5562 does not improve AUC. Reverting changes.
Training on augumented user 65860 13/50 current_auc = 0.6666666666666667
User 65860 AUC after training: 0.6666666666666667
User 65860 does not improve AUC. Reverting changes.
Training on augumented user 124718 14/50 current_auc = 0.6666666666666667
User 124718 AUC after training: 0.6666666666666667
User 124718 does not improve AUC. Reverting changes.
Training on augumented user 58360 15/50 current_auc = 0.6666666666666667
User 58360 AUC after training: 0.6666666666666667
User 58360 does not improve AUC. Reverting changes.
Training on augumented user 79389 16/50 current_auc = 0.6666666666666667
User 79389 AUC after training: 0.6666666666666667
User 79389 does not improve AUC. Reverting changes.
Training on augumented user 108241 17/50 current_auc = 0.6666666666666667
User 108241 AUC after training: 0.6666666666666667
User 108241 does not improve AUC. Reverting changes.
Training on augumented user 108360 18/50 current_auc = 0.6666666666666667
User 108360 AUC after training: 0.6666666666666667
User 108360 does not improve AUC. Reverting changes.
Training on augumented user 8992 19/50 current_auc = 0.6666666666666667
User 8992 AUC after training: 0.6666666666666667
User 8992 does not improve AUC. Reverting changes.
Training on augumented user 21070 20/50 current_auc = 0.6666666666666667
User 21070 AUC after training: 0.6666666666666667
User 21070 does not improve AUC. Reverting changes.
Training on augumented user 42736 21/50 current_auc = 0.6666666666666667
User 42736 AUC after training: 0.6666666666666667
User 42736 does not improve AUC. Reverting changes.
Training on augumented user 75928 22/50 current_auc = 0.6666666666666667
User 75928 AUC after training: 0.6666666666666667
User 75928 does not improve AUC. Reverting changes.
Training on augumented user 101414 23/50 current_auc = 0.6666666666666667
User 101414 AUC after training: 0.6666666666666667
User 101414 does not improve AUC. Reverting changes.
Training on augumented user 32030 24/50 current_auc = 0.6666666666666667
User 32030 AUC after training: 0.6666666666666667
User 32030 does not improve AUC. Reverting changes.
Training on augumented user 70932 25/50 current_auc = 0.6666666666666667
User 70932 AUC after training: 0.6666666666666667
User 70932 does not improve AUC. Reverting changes.
Training on augumented user 123523 26/50 current_auc = 0.6666666666666667
User 123523 AUC after training: 0.6666666666666667
User 123523 does not improve AUC. Reverting changes.
Training on augumented user 60345 27/50 current_auc = 0.6666666666666667
User 60345 AUC after training: 0.6666666666666667
User 60345 does not improve AUC. Reverting changes.
Training on augumented user 100467 28/50 current_auc = 0.6666666666666667
User 100467 AUC after training: 0.6666666666666667
User 100467 does not improve AUC. Reverting changes.
Training on augumented user 9569 29/50 current_auc = 0.6666666666666667
User 9569 AUC after training: 0.6666666666666667
User 9569 does not improve AUC. Reverting changes.
Training on augumented user 57005 30/50 current_auc = 0.6666666666666667
User 57005 AUC after training: 0.6666666666666667
User 57005 does not improve AUC. Reverting changes.
Training on augumented user 132724 31/50 current_auc = 0.6666666666666667
User 132724 AUC after training: 0.6666666666666667
User 132724 does not improve AUC. Reverting changes.
Training on augumented user 134868 32/50 current_auc = 0.6666666666666667
User 134868 AUC after training: 0.6666666666666667
User 134868 does not improve AUC. Reverting changes.
Training on augumented user 16759 33/50 current_auc = 0.6666666666666667
User 16759 AUC after training: 0.6666666666666667
User 16759 does not improve AUC. Reverting changes.
Training on augumented user 111997 34/50 current_auc = 0.6666666666666667
User 111997 AUC after training: 0.6666666666666667
User 111997 does not improve AUC. Reverting changes.
Training on augumented user 134845 35/50 current_auc = 0.6666666666666667
User 134845 AUC after training: 0.6666666666666667
User 134845 does not improve AUC. Reverting changes.
Training on augumented user 16671 36/50 current_auc = 0.6666666666666667
User 16671 AUC after training: 0.6666666666666667
User 16671 does not improve AUC. Reverting changes.
Training on augumented user 250 37/50 current_auc = 0.6666666666666667
User 250 AUC after training: 0.6666666666666667
User 250 does not improve AUC. Reverting changes.
Training on augumented user 92931 38/50 current_auc = 0.6666666666666667
User 92931 AUC after training: 0.6666666666666667
User 92931 does not improve AUC. Reverting changes.
Training on augumented user 32307 39/50 current_auc = 0.6666666666666667
User 32307 AUC after training: 0.6666666666666667
User 32307 does not improve AUC. Reverting changes.
Training on augumented user 109592 40/50 current_auc = 0.6666666666666667
User 109592 AUC after training: 0.6666666666666667
User 109592 does not improve AUC. Reverting changes.
Training on augumented user 98146 41/50 current_auc = 0.6666666666666667
User 98146 AUC after training: 0.6666666666666667
User 98146 does not improve AUC. Reverting changes.
Training on augumented user 103483 42/50 current_auc = 0.6666666666666667
User 103483 AUC after training: 0.6666666666666667
User 103483 does not improve AUC. Reverting changes.
Training on augumented user 104988 43/50 current_auc = 0.6666666666666667
User 104988 AUC after training: 0.6666666666666667
User 104988 does not improve AUC. Reverting changes.
Training on augumented user 92008 44/50 current_auc = 0.6666666666666667
User 92008 AUC after training: 0.6666666666666667
User 92008 does not improve AUC. Reverting changes.
Training on augumented user 116436 45/50 current_auc = 0.6666666666666667
User 116436 AUC after training: 0.6666666666666667
User 116436 does not improve AUC. Reverting changes.
Training on augumented user 132504 46/50 current_auc = 0.6666666666666667
User 132504 AUC after training: 0.6666666666666667
User 132504 does not improve AUC. Reverting changes.
Training on augumented user 114078 47/50 current_auc = 0.6666666666666667
User 114078 AUC after training: 0.6666666666666667
User 114078 does not improve AUC. Reverting changes.
Training on augumented user 101081 48/50 current_auc = 0.6666666666666667
User 101081 AUC after training: 0.6666666666666667
User 101081 does not improve AUC. Reverting changes.
Training on augumented user 67914 49/50 current_auc = 0.6666666666666667
User 67914 AUC after training: 0.6666666666666667
User 67914 does not improve AUC. Reverting changes.
[2024-12-02 19:04:59.876593] start test user 72840 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:00.569078] start test user 72840 160/568 recall augumented users by random, augumented_users = [130708, 87887, 125848, 106114, 107735, 65957, 25331, 19565, 12069, 126524, 456, 20687, 73440, 60238, 22948, 43767, 132526, 99381, 131869, 32156, 34624, 23645, 109375, 23768, 49743, 117849, 14289, 56953, 93026, 4570, 104176, 15299, 120034, 99513, 50063, 35569, 53568, 64447, 81961, 19987, 132525, 117101, 30696, 62270, 37139, 100257, 56826, 60831, 56536, 75624]
[2024-12-02 19:05:00.586325] user = 72840 Cloud 160/568
[2024-12-02 19:05:00.603476] user = 72840 Local 160/568
[2024-12-02 19:05:00.846821] user = 72840 Local+ 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:03.286852] user = 72840 MPDA- 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8125
Training on augumented user 130708 0/50 current_auc = 0.8125
User 130708 AUC after training: 0.8125
User 130708 does not improve AUC. Reverting changes.
Training on augumented user 87887 1/50 current_auc = 0.8125
User 87887 AUC after training: 0.8125
User 87887 does not improve AUC. Reverting changes.
Training on augumented user 125848 2/50 current_auc = 0.8125
User 125848 AUC after training: 0.8125
User 125848 does not improve AUC. Reverting changes.
Training on augumented user 106114 3/50 current_auc = 0.8125
User 106114 AUC after training: 0.8125
User 106114 does not improve AUC. Reverting changes.
Training on augumented user 107735 4/50 current_auc = 0.8125
User 107735 AUC after training: 0.8125
User 107735 does not improve AUC. Reverting changes.
Training on augumented user 65957 5/50 current_auc = 0.8125
User 65957 AUC after training: 0.8125
User 65957 does not improve AUC. Reverting changes.
Training on augumented user 25331 6/50 current_auc = 0.8125
User 25331 AUC after training: 0.8125
User 25331 does not improve AUC. Reverting changes.
Training on augumented user 19565 7/50 current_auc = 0.8125
User 19565 AUC after training: 0.8125
User 19565 does not improve AUC. Reverting changes.
Training on augumented user 12069 8/50 current_auc = 0.8125
User 12069 AUC after training: 0.8125
User 12069 does not improve AUC. Reverting changes.
Training on augumented user 126524 9/50 current_auc = 0.8125
User 126524 AUC after training: 0.8125
User 126524 does not improve AUC. Reverting changes.
Training on augumented user 456 10/50 current_auc = 0.8125
User 456 AUC after training: 0.8125
User 456 does not improve AUC. Reverting changes.
Training on augumented user 20687 11/50 current_auc = 0.8125
User 20687 AUC after training: 0.8125
User 20687 does not improve AUC. Reverting changes.
Training on augumented user 73440 12/50 current_auc = 0.8125
User 73440 AUC after training: 0.8125
User 73440 does not improve AUC. Reverting changes.
Training on augumented user 60238 13/50 current_auc = 0.8125
User 60238 AUC after training: 0.8125
User 60238 does not improve AUC. Reverting changes.
Training on augumented user 22948 14/50 current_auc = 0.8125
User 22948 AUC after training: 0.8125
User 22948 does not improve AUC. Reverting changes.
Training on augumented user 43767 15/50 current_auc = 0.8125
User 43767 AUC after training: 0.8125
User 43767 does not improve AUC. Reverting changes.
Training on augumented user 132526 16/50 current_auc = 0.8125
User 132526 AUC after training: 0.8125
User 132526 does not improve AUC. Reverting changes.
Training on augumented user 99381 17/50 current_auc = 0.8125
User 99381 AUC after training: 0.8125
User 99381 does not improve AUC. Reverting changes.
Training on augumented user 131869 18/50 current_auc = 0.8125
User 131869 AUC after training: 0.8125
User 131869 does not improve AUC. Reverting changes.
Training on augumented user 32156 19/50 current_auc = 0.8125
User 32156 AUC after training: 0.8125
User 32156 does not improve AUC. Reverting changes.
Training on augumented user 34624 20/50 current_auc = 0.8125
User 34624 AUC after training: 0.8125
User 34624 does not improve AUC. Reverting changes.
Training on augumented user 23645 21/50 current_auc = 0.8125
User 23645 AUC after training: 0.8125
User 23645 does not improve AUC. Reverting changes.
Training on augumented user 109375 22/50 current_auc = 0.8125
User 109375 AUC after training: 0.8125
User 109375 does not improve AUC. Reverting changes.
Training on augumented user 23768 23/50 current_auc = 0.8125
User 23768 AUC after training: 0.8125
User 23768 does not improve AUC. Reverting changes.
Training on augumented user 49743 24/50 current_auc = 0.8125
User 49743 AUC after training: 0.8125
User 49743 does not improve AUC. Reverting changes.
Training on augumented user 117849 25/50 current_auc = 0.8125
User 117849 AUC after training: 0.8125
User 117849 does not improve AUC. Reverting changes.
Training on augumented user 14289 26/50 current_auc = 0.8125
User 14289 AUC after training: 0.8125
User 14289 does not improve AUC. Reverting changes.
Training on augumented user 56953 27/50 current_auc = 0.8125
User 56953 AUC after training: 0.8125
User 56953 does not improve AUC. Reverting changes.
Training on augumented user 93026 28/50 current_auc = 0.8125
User 93026 AUC after training: 0.8125
User 93026 does not improve AUC. Reverting changes.
Training on augumented user 4570 29/50 current_auc = 0.8125
User 4570 AUC after training: 0.8125
User 4570 does not improve AUC. Reverting changes.
Training on augumented user 104176 30/50 current_auc = 0.8125
User 104176 AUC after training: 0.8125
User 104176 does not improve AUC. Reverting changes.
Training on augumented user 15299 31/50 current_auc = 0.8125
User 15299 AUC after training: 0.8125
User 15299 does not improve AUC. Reverting changes.
Training on augumented user 120034 32/50 current_auc = 0.8125
User 120034 AUC after training: 0.8125
User 120034 does not improve AUC. Reverting changes.
Training on augumented user 99513 33/50 current_auc = 0.8125
User 99513 AUC after training: 0.8125
User 99513 does not improve AUC. Reverting changes.
Training on augumented user 50063 34/50 current_auc = 0.8125
User 50063 AUC after training: 0.8125
User 50063 does not improve AUC. Reverting changes.
Training on augumented user 35569 35/50 current_auc = 0.8125
User 35569 AUC after training: 0.8125
User 35569 does not improve AUC. Reverting changes.
Training on augumented user 53568 36/50 current_auc = 0.8125
User 53568 AUC after training: 0.8125
User 53568 does not improve AUC. Reverting changes.
Training on augumented user 64447 37/50 current_auc = 0.8125
User 64447 AUC after training: 0.8125
User 64447 does not improve AUC. Reverting changes.
Training on augumented user 81961 38/50 current_auc = 0.8125
User 81961 AUC after training: 0.8125
User 81961 does not improve AUC. Reverting changes.
Training on augumented user 19987 39/50 current_auc = 0.8125
User 19987 AUC after training: 0.8125
User 19987 does not improve AUC. Reverting changes.
Training on augumented user 132525 40/50 current_auc = 0.8125
User 132525 AUC after training: 0.8125
User 132525 does not improve AUC. Reverting changes.
Training on augumented user 117101 41/50 current_auc = 0.8125
User 117101 AUC after training: 0.8125
User 117101 does not improve AUC. Reverting changes.
Training on augumented user 30696 42/50 current_auc = 0.8125
User 30696 AUC after training: 0.8125
User 30696 does not improve AUC. Reverting changes.
Training on augumented user 62270 43/50 current_auc = 0.8125
User 62270 AUC after training: 0.8125
User 62270 does not improve AUC. Reverting changes.
Training on augumented user 37139 44/50 current_auc = 0.8125
User 37139 AUC after training: 0.8125
User 37139 does not improve AUC. Reverting changes.
Training on augumented user 100257 45/50 current_auc = 0.8125
User 100257 AUC after training: 0.8125
User 100257 does not improve AUC. Reverting changes.
Training on augumented user 56826 46/50 current_auc = 0.8125
User 56826 AUC after training: 0.8125
User 56826 does not improve AUC. Reverting changes.
Training on augumented user 60831 47/50 current_auc = 0.8125
User 60831 AUC after training: 0.8125
User 60831 does not improve AUC. Reverting changes.
Training on augumented user 56536 48/50 current_auc = 0.8125
User 56536 AUC after training: 0.8125
User 56536 does not improve AUC. Reverting changes.
Training on augumented user 75624 49/50 current_auc = 0.8125
User 75624 AUC after training: 0.8125
User 75624 does not improve AUC. Reverting changes.
[2024-12-02 19:05:29.964377] start test user 72922 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:30.552276] start test user 72922 161/568 recall augumented users by random, augumented_users = [112725, 35833, 109533, 15964, 52477, 123442, 3276, 134484, 34111, 36020, 82089, 110405, 61258, 122936, 100280, 107426, 12155, 136470, 31156, 43743, 88322, 82164, 96452, 127796, 7787, 7688, 76481, 66493, 59372, 102456, 75599, 83368, 96650, 111759, 15994, 100615, 126828, 42782, 66903, 121013, 83698, 24908, 68364, 81651, 35454, 15113, 51751, 22826, 110116, 19653]
[2024-12-02 19:05:30.567536] user = 72922 Cloud 161/568
[2024-12-02 19:05:30.598726] user = 72922 Local 161/568
[2024-12-02 19:05:30.683402] user = 72922 Local+ 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:32.692371] user = 72922 MPDA- 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6721649484536082
Training on augumented user 112725 0/50 current_auc = 0.6721649484536082
User 112725 AUC after training: 0.6720564297341292
User 112725 does not improve AUC. Reverting changes.
Training on augumented user 35833 1/50 current_auc = 0.6721649484536082
User 35833 AUC after training: 0.6720564297341292
User 35833 does not improve AUC. Reverting changes.
Training on augumented user 109533 2/50 current_auc = 0.6721649484536082
User 109533 AUC after training: 0.6720564297341293
User 109533 does not improve AUC. Reverting changes.
Training on augumented user 15964 3/50 current_auc = 0.6721649484536082
User 15964 AUC after training: 0.6731958762886597
User 15964 improves AUC. Keeping the model.
Training on augumented user 52477 4/50 current_auc = 0.6731958762886597
User 52477 AUC after training: 0.6728703201302225
User 52477 does not improve AUC. Reverting changes.
Training on augumented user 123442 5/50 current_auc = 0.6731958762886597
User 123442 AUC after training: 0.6728160607704828
User 123442 does not improve AUC. Reverting changes.
Training on augumented user 3276 6/50 current_auc = 0.6731958762886597
User 3276 AUC after training: 0.6724905046120456
User 3276 does not improve AUC. Reverting changes.
Training on augumented user 134484 7/50 current_auc = 0.6731958762886597
User 134484 AUC after training: 0.6732501356483993
User 134484 improves AUC. Keeping the model.
Training on augumented user 34111 8/50 current_auc = 0.6732501356483993
User 34111 AUC after training: 0.6731958762886597
User 34111 does not improve AUC. Reverting changes.
Training on augumented user 36020 9/50 current_auc = 0.6732501356483993
User 36020 AUC after training: 0.673412913727618
User 36020 improves AUC. Keeping the model.
Training on augumented user 82089 10/50 current_auc = 0.673412913727618
User 82089 AUC after training: 0.6729788388497016
User 82089 does not improve AUC. Reverting changes.
Training on augumented user 110405 11/50 current_auc = 0.673412913727618
User 110405 AUC after training: 0.6733586543678785
User 110405 does not improve AUC. Reverting changes.
Training on augumented user 61258 12/50 current_auc = 0.673412913727618
User 61258 AUC after training: 0.6723277265328269
User 61258 does not improve AUC. Reverting changes.
Training on augumented user 122936 13/50 current_auc = 0.673412913727618
User 122936 AUC after training: 0.6730873575691807
User 122936 does not improve AUC. Reverting changes.
Training on augumented user 100280 14/50 current_auc = 0.673412913727618
User 100280 AUC after training: 0.6734671730873576
User 100280 improves AUC. Keeping the model.
Training on augumented user 107426 15/50 current_auc = 0.6734671730873576
User 107426 AUC after training: 0.6737927292457949
User 107426 improves AUC. Keeping the model.
Training on augumented user 12155 16/50 current_auc = 0.6737927292457949
User 12155 AUC after training: 0.6737927292457948
User 12155 does not improve AUC. Reverting changes.
Training on augumented user 136470 17/50 current_auc = 0.6737927292457949
User 136470 AUC after training: 0.6735214324470971
User 136470 does not improve AUC. Reverting changes.
Training on augumented user 31156 18/50 current_auc = 0.6737927292457949
User 31156 AUC after training: 0.6740097666847532
User 31156 improves AUC. Keeping the model.
Training on augumented user 43743 19/50 current_auc = 0.6740097666847532
User 43743 AUC after training: 0.6735214324470971
User 43743 does not improve AUC. Reverting changes.
Training on augumented user 88322 20/50 current_auc = 0.6740097666847532
User 88322 AUC after training: 0.6738469886055345
User 88322 does not improve AUC. Reverting changes.
Training on augumented user 82164 21/50 current_auc = 0.6740097666847532
User 82164 AUC after training: 0.6735756918068367
User 82164 does not improve AUC. Reverting changes.
Training on augumented user 96452 22/50 current_auc = 0.6740097666847532
User 96452 AUC after training: 0.6735214324470972
User 96452 does not improve AUC. Reverting changes.
Training on augumented user 127796 23/50 current_auc = 0.6740097666847532
User 127796 AUC after training: 0.6733586543678785
User 127796 does not improve AUC. Reverting changes.
Training on augumented user 7787 24/50 current_auc = 0.6740097666847532
User 7787 AUC after training: 0.6735214324470972
User 7787 does not improve AUC. Reverting changes.
Training on augumented user 7688 25/50 current_auc = 0.6740097666847532
User 7688 AUC after training: 0.6741182854042322
User 7688 improves AUC. Keeping the model.
Training on augumented user 76481 26/50 current_auc = 0.6741182854042322
User 76481 AUC after training: 0.672924579489962
User 76481 does not improve AUC. Reverting changes.
Training on augumented user 66493 27/50 current_auc = 0.6741182854042322
User 66493 AUC after training: 0.6732501356483994
User 66493 does not improve AUC. Reverting changes.
Training on augumented user 59372 28/50 current_auc = 0.6741182854042322
User 59372 AUC after training: 0.6736299511665762
User 59372 does not improve AUC. Reverting changes.
Training on augumented user 102456 29/50 current_auc = 0.6741182854042322
User 102456 AUC after training: 0.6735756918068367
User 102456 does not improve AUC. Reverting changes.
Training on augumented user 75599 30/50 current_auc = 0.6741182854042322
User 75599 AUC after training: 0.6741182854042322
User 75599 does not improve AUC. Reverting changes.
Training on augumented user 83368 31/50 current_auc = 0.6741182854042322
User 83368 AUC after training: 0.6732501356483993
User 83368 does not improve AUC. Reverting changes.
Training on augumented user 96650 32/50 current_auc = 0.6741182854042322
User 96650 AUC after training: 0.6736842105263158
User 96650 does not improve AUC. Reverting changes.
Training on augumented user 111759 33/50 current_auc = 0.6741182854042322
User 111759 AUC after training: 0.6733586543678785
User 111759 does not improve AUC. Reverting changes.
Training on augumented user 15994 34/50 current_auc = 0.6741182854042322
User 15994 AUC after training: 0.6744438415626696
User 15994 improves AUC. Keeping the model.
Training on augumented user 100615 35/50 current_auc = 0.6744438415626696
User 100615 AUC after training: 0.6739555073250135
User 100615 does not improve AUC. Reverting changes.
Training on augumented user 126828 36/50 current_auc = 0.6744438415626696
User 126828 AUC after training: 0.6744438415626696
User 126828 does not improve AUC. Reverting changes.
Training on augumented user 42782 37/50 current_auc = 0.6744438415626696
User 42782 AUC after training: 0.6739012479652741
User 42782 does not improve AUC. Reverting changes.
Training on augumented user 66903 38/50 current_auc = 0.6744438415626696
User 66903 AUC after training: 0.6743353228431904
User 66903 does not improve AUC. Reverting changes.
Training on augumented user 121013 39/50 current_auc = 0.6744438415626696
User 121013 AUC after training: 0.6740640260444928
User 121013 does not improve AUC. Reverting changes.
Training on augumented user 83698 40/50 current_auc = 0.6744438415626696
User 83698 AUC after training: 0.6726532826912643
User 83698 does not improve AUC. Reverting changes.
Training on augumented user 24908 41/50 current_auc = 0.6744438415626696
User 24908 AUC after training: 0.6742268041237113
User 24908 does not improve AUC. Reverting changes.
Training on augumented user 68364 42/50 current_auc = 0.6744438415626696
User 68364 AUC after training: 0.6737384698860553
User 68364 does not improve AUC. Reverting changes.
Training on augumented user 81651 43/50 current_auc = 0.6744438415626696
User 81651 AUC after training: 0.6730330982094411
User 81651 does not improve AUC. Reverting changes.
Training on augumented user 35454 44/50 current_auc = 0.6744438415626696
User 35454 AUC after training: 0.6732501356483994
User 35454 does not improve AUC. Reverting changes.
Training on augumented user 15113 45/50 current_auc = 0.6744438415626696
User 15113 AUC after training: 0.6743353228431904
User 15113 does not improve AUC. Reverting changes.
Training on augumented user 51751 46/50 current_auc = 0.6744438415626696
User 51751 AUC after training: 0.674009766684753
User 51751 does not improve AUC. Reverting changes.
Training on augumented user 22826 47/50 current_auc = 0.6744438415626696
User 22826 AUC after training: 0.6743353228431904
User 22826 does not improve AUC. Reverting changes.
Training on augumented user 110116 48/50 current_auc = 0.6744438415626696
User 110116 AUC after training: 0.6742268041237113
User 110116 does not improve AUC. Reverting changes.
Training on augumented user 19653 49/50 current_auc = 0.6744438415626696
User 19653 AUC after training: 0.6744438415626696
User 19653 does not improve AUC. Reverting changes.
[2024-12-02 19:06:03.654141] start test user 72971 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:04.527966] start test user 72971 162/568 recall augumented users by random, augumented_users = [97919, 78449, 11019, 109628, 55903, 45161, 53346, 43257, 138202, 137841, 108872, 41009, 26337, 83957, 39976, 104237, 8408, 51393, 63723, 107609, 109092, 116980, 43907, 62555, 75023, 27499, 43736, 86743, 20986, 90339, 14279, 123516, 126056, 42854, 134540, 36735, 101268, 135142, 30726, 64950, 126398, 17475, 109712, 19213, 120509, 29932, 47784, 51933, 51239, 40387]
[2024-12-02 19:06:04.546258] user = 72971 Cloud 162/568
[2024-12-02 19:06:04.558533] user = 72971 Local 162/568
[2024-12-02 19:06:04.671340] user = 72971 Local+ 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:07.611403] user = 72971 MPDA- 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7585034013605443
Training on augumented user 97919 0/50 current_auc = 0.7585034013605443
User 97919 AUC after training: 0.7602040816326531
User 97919 improves AUC. Keeping the model.
Training on augumented user 78449 1/50 current_auc = 0.7602040816326531
User 78449 AUC after training: 0.7585034013605443
User 78449 does not improve AUC. Reverting changes.
Training on augumented user 11019 2/50 current_auc = 0.7602040816326531
User 11019 AUC after training: 0.7585034013605443
User 11019 does not improve AUC. Reverting changes.
Training on augumented user 109628 3/50 current_auc = 0.7602040816326531
User 109628 AUC after training: 0.7619047619047619
User 109628 improves AUC. Keeping the model.
Training on augumented user 55903 4/50 current_auc = 0.7619047619047619
User 55903 AUC after training: 0.7602040816326531
User 55903 does not improve AUC. Reverting changes.
Training on augumented user 45161 5/50 current_auc = 0.7619047619047619
User 45161 AUC after training: 0.7602040816326531
User 45161 does not improve AUC. Reverting changes.
Training on augumented user 53346 6/50 current_auc = 0.7619047619047619
User 53346 AUC after training: 0.7653061224489797
User 53346 improves AUC. Keeping the model.
Training on augumented user 43257 7/50 current_auc = 0.7653061224489797
User 43257 AUC after training: 0.7653061224489797
User 43257 does not improve AUC. Reverting changes.
Training on augumented user 138202 8/50 current_auc = 0.7653061224489797
User 138202 AUC after training: 0.7636054421768708
User 138202 does not improve AUC. Reverting changes.
Training on augumented user 137841 9/50 current_auc = 0.7653061224489797
User 137841 AUC after training: 0.7653061224489797
User 137841 does not improve AUC. Reverting changes.
Training on augumented user 108872 10/50 current_auc = 0.7653061224489797
User 108872 AUC after training: 0.7653061224489797
User 108872 does not improve AUC. Reverting changes.
Training on augumented user 41009 11/50 current_auc = 0.7653061224489797
User 41009 AUC after training: 0.7653061224489797
User 41009 does not improve AUC. Reverting changes.
Training on augumented user 26337 12/50 current_auc = 0.7653061224489797
User 26337 AUC after training: 0.7653061224489797
User 26337 does not improve AUC. Reverting changes.
Training on augumented user 83957 13/50 current_auc = 0.7653061224489797
User 83957 AUC after training: 0.7670068027210885
User 83957 improves AUC. Keeping the model.
Training on augumented user 39976 14/50 current_auc = 0.7670068027210885
User 39976 AUC after training: 0.7636054421768708
User 39976 does not improve AUC. Reverting changes.
Training on augumented user 104237 15/50 current_auc = 0.7670068027210885
User 104237 AUC after training: 0.7670068027210885
User 104237 does not improve AUC. Reverting changes.
Training on augumented user 8408 16/50 current_auc = 0.7670068027210885
User 8408 AUC after training: 0.7670068027210885
User 8408 does not improve AUC. Reverting changes.
Training on augumented user 51393 17/50 current_auc = 0.7670068027210885
User 51393 AUC after training: 0.7670068027210885
User 51393 does not improve AUC. Reverting changes.
Training on augumented user 63723 18/50 current_auc = 0.7670068027210885
User 63723 AUC after training: 0.7653061224489797
User 63723 does not improve AUC. Reverting changes.
Training on augumented user 107609 19/50 current_auc = 0.7670068027210885
User 107609 AUC after training: 0.7670068027210885
User 107609 does not improve AUC. Reverting changes.
Training on augumented user 109092 20/50 current_auc = 0.7670068027210885
User 109092 AUC after training: 0.7687074829931972
User 109092 improves AUC. Keeping the model.
Training on augumented user 116980 21/50 current_auc = 0.7687074829931972
User 116980 AUC after training: 0.7670068027210885
User 116980 does not improve AUC. Reverting changes.
Training on augumented user 43907 22/50 current_auc = 0.7687074829931972
User 43907 AUC after training: 0.7687074829931972
User 43907 does not improve AUC. Reverting changes.
Training on augumented user 62555 23/50 current_auc = 0.7687074829931972
User 62555 AUC after training: 0.7687074829931972
User 62555 does not improve AUC. Reverting changes.
Training on augumented user 75023 24/50 current_auc = 0.7687074829931972
User 75023 AUC after training: 0.7687074829931972
User 75023 does not improve AUC. Reverting changes.
Training on augumented user 27499 25/50 current_auc = 0.7687074829931972
User 27499 AUC after training: 0.7687074829931972
User 27499 does not improve AUC. Reverting changes.
Training on augumented user 43736 26/50 current_auc = 0.7687074829931972
User 43736 AUC after training: 0.7687074829931972
User 43736 does not improve AUC. Reverting changes.
Training on augumented user 86743 27/50 current_auc = 0.7687074829931972
User 86743 AUC after training: 0.7653061224489797
User 86743 does not improve AUC. Reverting changes.
Training on augumented user 20986 28/50 current_auc = 0.7687074829931972
User 20986 AUC after training: 0.7687074829931972
User 20986 does not improve AUC. Reverting changes.
Training on augumented user 90339 29/50 current_auc = 0.7687074829931972
User 90339 AUC after training: 0.7670068027210885
User 90339 does not improve AUC. Reverting changes.
Training on augumented user 14279 30/50 current_auc = 0.7687074829931972
User 14279 AUC after training: 0.7687074829931972
User 14279 does not improve AUC. Reverting changes.
Training on augumented user 123516 31/50 current_auc = 0.7687074829931972
User 123516 AUC after training: 0.7704081632653061
User 123516 improves AUC. Keeping the model.
Training on augumented user 126056 32/50 current_auc = 0.7704081632653061
User 126056 AUC after training: 0.7670068027210885
User 126056 does not improve AUC. Reverting changes.
Training on augumented user 42854 33/50 current_auc = 0.7704081632653061
User 42854 AUC after training: 0.7670068027210885
User 42854 does not improve AUC. Reverting changes.
Training on augumented user 134540 34/50 current_auc = 0.7704081632653061
User 134540 AUC after training: 0.7653061224489797
User 134540 does not improve AUC. Reverting changes.
Training on augumented user 36735 35/50 current_auc = 0.7704081632653061
User 36735 AUC after training: 0.7687074829931972
User 36735 does not improve AUC. Reverting changes.
Training on augumented user 101268 36/50 current_auc = 0.7704081632653061
User 101268 AUC after training: 0.7653061224489797
User 101268 does not improve AUC. Reverting changes.
Training on augumented user 135142 37/50 current_auc = 0.7704081632653061
User 135142 AUC after training: 0.7670068027210885
User 135142 does not improve AUC. Reverting changes.
Training on augumented user 30726 38/50 current_auc = 0.7704081632653061
User 30726 AUC after training: 0.7687074829931972
User 30726 does not improve AUC. Reverting changes.
Training on augumented user 64950 39/50 current_auc = 0.7704081632653061
User 64950 AUC after training: 0.7670068027210885
User 64950 does not improve AUC. Reverting changes.
Training on augumented user 126398 40/50 current_auc = 0.7704081632653061
User 126398 AUC after training: 0.7687074829931972
User 126398 does not improve AUC. Reverting changes.
Training on augumented user 17475 41/50 current_auc = 0.7704081632653061
User 17475 AUC after training: 0.7687074829931972
User 17475 does not improve AUC. Reverting changes.
Training on augumented user 109712 42/50 current_auc = 0.7704081632653061
User 109712 AUC after training: 0.7653061224489797
User 109712 does not improve AUC. Reverting changes.
Training on augumented user 19213 43/50 current_auc = 0.7704081632653061
User 19213 AUC after training: 0.7653061224489796
User 19213 does not improve AUC. Reverting changes.
Training on augumented user 120509 44/50 current_auc = 0.7704081632653061
User 120509 AUC after training: 0.7687074829931972
User 120509 does not improve AUC. Reverting changes.
Training on augumented user 29932 45/50 current_auc = 0.7704081632653061
User 29932 AUC after training: 0.7670068027210885
User 29932 does not improve AUC. Reverting changes.
Training on augumented user 47784 46/50 current_auc = 0.7704081632653061
User 47784 AUC after training: 0.7670068027210885
User 47784 does not improve AUC. Reverting changes.
Training on augumented user 51933 47/50 current_auc = 0.7704081632653061
User 51933 AUC after training: 0.7687074829931972
User 51933 does not improve AUC. Reverting changes.
Training on augumented user 51239 48/50 current_auc = 0.7704081632653061
User 51239 AUC after training: 0.7704081632653061
User 51239 does not improve AUC. Reverting changes.
Training on augumented user 40387 49/50 current_auc = 0.7704081632653061
User 40387 AUC after training: 0.7687074829931972
User 40387 does not improve AUC. Reverting changes.
[2024-12-02 19:06:38.029336] start test user 72978 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:38.595260] start test user 72978 163/568 recall augumented users by random, augumented_users = [72664, 69367, 43343, 85108, 99448, 13318, 118508, 61820, 47437, 83032, 73033, 107520, 28061, 83474, 68713, 134646, 80775, 27953, 127428, 138217, 102499, 22769, 124553, 116365, 126765, 113972, 16826, 130576, 43482, 74629, 39432, 88850, 70950, 49141, 71081, 49134, 52498, 82151, 121040, 127947, 50072, 128657, 45006, 114368, 84957, 9048, 56877, 103039, 69488, 71246]
[2024-12-02 19:06:38.609781] user = 72978 Cloud 163/568
[2024-12-02 19:06:38.634103] user = 72978 Local 163/568
[2024-12-02 19:06:38.704154] user = 72978 Local+ 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:42.593896] user = 72978 MPDA- 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9428571428571428
Training on augumented user 72664 0/50 current_auc = 0.9428571428571428
User 72664 AUC after training: 0.9428571428571428
User 72664 does not improve AUC. Reverting changes.
Training on augumented user 69367 1/50 current_auc = 0.9428571428571428
User 69367 AUC after training: 0.9428571428571428
User 69367 does not improve AUC. Reverting changes.
Training on augumented user 43343 2/50 current_auc = 0.9428571428571428
User 43343 AUC after training: 0.9428571428571428
User 43343 does not improve AUC. Reverting changes.
Training on augumented user 85108 3/50 current_auc = 0.9428571428571428
User 85108 AUC after training: 0.9428571428571428
User 85108 does not improve AUC. Reverting changes.
Training on augumented user 99448 4/50 current_auc = 0.9428571428571428
User 99448 AUC after training: 0.9428571428571428
User 99448 does not improve AUC. Reverting changes.
Training on augumented user 13318 5/50 current_auc = 0.9428571428571428
User 13318 AUC after training: 0.9428571428571428
User 13318 does not improve AUC. Reverting changes.
Training on augumented user 118508 6/50 current_auc = 0.9428571428571428
User 118508 AUC after training: 0.9428571428571428
User 118508 does not improve AUC. Reverting changes.
Training on augumented user 61820 7/50 current_auc = 0.9428571428571428
User 61820 AUC after training: 0.9428571428571428
User 61820 does not improve AUC. Reverting changes.
Training on augumented user 47437 8/50 current_auc = 0.9428571428571428
User 47437 AUC after training: 0.9428571428571428
User 47437 does not improve AUC. Reverting changes.
Training on augumented user 83032 9/50 current_auc = 0.9428571428571428
User 83032 AUC after training: 0.9428571428571428
User 83032 does not improve AUC. Reverting changes.
Training on augumented user 73033 10/50 current_auc = 0.9428571428571428
User 73033 AUC after training: 0.9428571428571428
User 73033 does not improve AUC. Reverting changes.
Training on augumented user 107520 11/50 current_auc = 0.9428571428571428
User 107520 AUC after training: 0.9428571428571428
User 107520 does not improve AUC. Reverting changes.
Training on augumented user 28061 12/50 current_auc = 0.9428571428571428
User 28061 AUC after training: 0.9428571428571428
User 28061 does not improve AUC. Reverting changes.
Training on augumented user 83474 13/50 current_auc = 0.9428571428571428
User 83474 AUC after training: 0.9428571428571428
User 83474 does not improve AUC. Reverting changes.
Training on augumented user 68713 14/50 current_auc = 0.9428571428571428
User 68713 AUC after training: 0.9428571428571428
User 68713 does not improve AUC. Reverting changes.
Training on augumented user 134646 15/50 current_auc = 0.9428571428571428
User 134646 AUC after training: 0.9428571428571428
User 134646 does not improve AUC. Reverting changes.
Training on augumented user 80775 16/50 current_auc = 0.9428571428571428
User 80775 AUC after training: 0.9428571428571428
User 80775 does not improve AUC. Reverting changes.
Training on augumented user 27953 17/50 current_auc = 0.9428571428571428
User 27953 AUC after training: 0.9428571428571428
User 27953 does not improve AUC. Reverting changes.
Training on augumented user 127428 18/50 current_auc = 0.9428571428571428
User 127428 AUC after training: 0.9428571428571428
User 127428 does not improve AUC. Reverting changes.
Training on augumented user 138217 19/50 current_auc = 0.9428571428571428
User 138217 AUC after training: 0.9428571428571428
User 138217 does not improve AUC. Reverting changes.
Training on augumented user 102499 20/50 current_auc = 0.9428571428571428
User 102499 AUC after training: 0.9428571428571428
User 102499 does not improve AUC. Reverting changes.
Training on augumented user 22769 21/50 current_auc = 0.9428571428571428
User 22769 AUC after training: 0.9428571428571428
User 22769 does not improve AUC. Reverting changes.
Training on augumented user 124553 22/50 current_auc = 0.9428571428571428
User 124553 AUC after training: 0.9428571428571428
User 124553 does not improve AUC. Reverting changes.
Training on augumented user 116365 23/50 current_auc = 0.9428571428571428
User 116365 AUC after training: 0.9428571428571428
User 116365 does not improve AUC. Reverting changes.
Training on augumented user 126765 24/50 current_auc = 0.9428571428571428
User 126765 AUC after training: 0.9428571428571428
User 126765 does not improve AUC. Reverting changes.
Training on augumented user 113972 25/50 current_auc = 0.9428571428571428
User 113972 AUC after training: 0.9428571428571428
User 113972 does not improve AUC. Reverting changes.
Training on augumented user 16826 26/50 current_auc = 0.9428571428571428
User 16826 AUC after training: 0.9428571428571428
User 16826 does not improve AUC. Reverting changes.
Training on augumented user 130576 27/50 current_auc = 0.9428571428571428
User 130576 AUC after training: 0.9428571428571428
User 130576 does not improve AUC. Reverting changes.
Training on augumented user 43482 28/50 current_auc = 0.9428571428571428
User 43482 AUC after training: 0.9428571428571428
User 43482 does not improve AUC. Reverting changes.
Training on augumented user 74629 29/50 current_auc = 0.9428571428571428
User 74629 AUC after training: 0.9428571428571428
User 74629 does not improve AUC. Reverting changes.
Training on augumented user 39432 30/50 current_auc = 0.9428571428571428
User 39432 AUC after training: 0.9428571428571428
User 39432 does not improve AUC. Reverting changes.
Training on augumented user 88850 31/50 current_auc = 0.9428571428571428
User 88850 AUC after training: 0.9428571428571428
User 88850 does not improve AUC. Reverting changes.
Training on augumented user 70950 32/50 current_auc = 0.9428571428571428
User 70950 AUC after training: 0.9428571428571428
User 70950 does not improve AUC. Reverting changes.
Training on augumented user 49141 33/50 current_auc = 0.9428571428571428
User 49141 AUC after training: 0.9428571428571428
User 49141 does not improve AUC. Reverting changes.
Training on augumented user 71081 34/50 current_auc = 0.9428571428571428
User 71081 AUC after training: 0.9428571428571428
User 71081 does not improve AUC. Reverting changes.
Training on augumented user 49134 35/50 current_auc = 0.9428571428571428
User 49134 AUC after training: 0.9428571428571428
User 49134 does not improve AUC. Reverting changes.
Training on augumented user 52498 36/50 current_auc = 0.9428571428571428
User 52498 AUC after training: 0.9428571428571428
User 52498 does not improve AUC. Reverting changes.
Training on augumented user 82151 37/50 current_auc = 0.9428571428571428
User 82151 AUC after training: 0.9428571428571428
User 82151 does not improve AUC. Reverting changes.
Training on augumented user 121040 38/50 current_auc = 0.9428571428571428
User 121040 AUC after training: 0.9428571428571428
User 121040 does not improve AUC. Reverting changes.
Training on augumented user 127947 39/50 current_auc = 0.9428571428571428
User 127947 AUC after training: 0.9428571428571428
User 127947 does not improve AUC. Reverting changes.
Training on augumented user 50072 40/50 current_auc = 0.9428571428571428
User 50072 AUC after training: 0.9428571428571428
User 50072 does not improve AUC. Reverting changes.
Training on augumented user 128657 41/50 current_auc = 0.9428571428571428
User 128657 AUC after training: 0.9428571428571428
User 128657 does not improve AUC. Reverting changes.
Training on augumented user 45006 42/50 current_auc = 0.9428571428571428
User 45006 AUC after training: 0.9428571428571428
User 45006 does not improve AUC. Reverting changes.
Training on augumented user 114368 43/50 current_auc = 0.9428571428571428
User 114368 AUC after training: 0.9428571428571428
User 114368 does not improve AUC. Reverting changes.
Training on augumented user 84957 44/50 current_auc = 0.9428571428571428
User 84957 AUC after training: 0.9428571428571428
User 84957 does not improve AUC. Reverting changes.
Training on augumented user 9048 45/50 current_auc = 0.9428571428571428
User 9048 AUC after training: 0.9428571428571428
User 9048 does not improve AUC. Reverting changes.
Training on augumented user 56877 46/50 current_auc = 0.9428571428571428
User 56877 AUC after training: 0.9428571428571428
User 56877 does not improve AUC. Reverting changes.
Training on augumented user 103039 47/50 current_auc = 0.9428571428571428
User 103039 AUC after training: 0.9428571428571428
User 103039 does not improve AUC. Reverting changes.
Training on augumented user 69488 48/50 current_auc = 0.9428571428571428
User 69488 AUC after training: 0.9428571428571428
User 69488 does not improve AUC. Reverting changes.
Training on augumented user 71246 49/50 current_auc = 0.9428571428571428
User 71246 AUC after training: 0.9428571428571428
User 71246 does not improve AUC. Reverting changes.
[2024-12-02 19:07:08.543057] start test user 72988 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:09.388034] start test user 72988 164/568 recall augumented users by random, augumented_users = [82639, 69361, 25185, 56559, 104764, 132404, 81362, 66725, 62810, 9926, 137410, 130090, 127589, 129795, 18266, 115809, 63506, 81160, 95773, 110389, 46650, 137328, 25716, 96642, 112490, 5353, 14322, 123708, 116868, 17607, 115061, 100469, 77310, 15206, 25965, 29504, 65805, 28619, 110316, 137205, 86924, 97373, 63948, 53586, 108189, 91483, 48788, 98541, 56522, 123067]
[2024-12-02 19:07:09.405512] user = 72988 Cloud 164/568
[2024-12-02 19:07:09.439949] user = 72988 Local 164/568
[2024-12-02 19:07:09.523816] user = 72988 Local+ 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:12.181231] user = 72988 MPDA- 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5656862745098039
Training on augumented user 82639 0/50 current_auc = 0.5656862745098039
User 82639 AUC after training: 0.5661764705882353
User 82639 improves AUC. Keeping the model.
Training on augumented user 69361 1/50 current_auc = 0.5661764705882353
User 69361 AUC after training: 0.5666666666666667
User 69361 improves AUC. Keeping the model.
Training on augumented user 25185 2/50 current_auc = 0.5666666666666667
User 25185 AUC after training: 0.5661764705882353
User 25185 does not improve AUC. Reverting changes.
Training on augumented user 56559 3/50 current_auc = 0.5666666666666667
User 56559 AUC after training: 0.5681372549019608
User 56559 improves AUC. Keeping the model.
Training on augumented user 104764 4/50 current_auc = 0.5681372549019608
User 104764 AUC after training: 0.5666666666666667
User 104764 does not improve AUC. Reverting changes.
Training on augumented user 132404 5/50 current_auc = 0.5681372549019608
User 132404 AUC after training: 0.5666666666666667
User 132404 does not improve AUC. Reverting changes.
Training on augumented user 81362 6/50 current_auc = 0.5681372549019608
User 81362 AUC after training: 0.5686274509803922
User 81362 improves AUC. Keeping the model.
Training on augumented user 66725 7/50 current_auc = 0.5686274509803922
User 66725 AUC after training: 0.5676470588235294
User 66725 does not improve AUC. Reverting changes.
Training on augumented user 62810 8/50 current_auc = 0.5686274509803922
User 62810 AUC after training: 0.5686274509803921
User 62810 does not improve AUC. Reverting changes.
Training on augumented user 9926 9/50 current_auc = 0.5686274509803922
User 9926 AUC after training: 0.5676470588235294
User 9926 does not improve AUC. Reverting changes.
Training on augumented user 137410 10/50 current_auc = 0.5686274509803922
User 137410 AUC after training: 0.5642156862745098
User 137410 does not improve AUC. Reverting changes.
Training on augumented user 130090 11/50 current_auc = 0.5686274509803922
User 130090 AUC after training: 0.5696078431372549
User 130090 improves AUC. Keeping the model.
Training on augumented user 127589 12/50 current_auc = 0.5696078431372549
User 127589 AUC after training: 0.5691176470588236
User 127589 does not improve AUC. Reverting changes.
Training on augumented user 129795 13/50 current_auc = 0.5696078431372549
User 129795 AUC after training: 0.5681372549019608
User 129795 does not improve AUC. Reverting changes.
Training on augumented user 18266 14/50 current_auc = 0.5696078431372549
User 18266 AUC after training: 0.5686274509803921
User 18266 does not improve AUC. Reverting changes.
Training on augumented user 115809 15/50 current_auc = 0.5696078431372549
User 115809 AUC after training: 0.5686274509803921
User 115809 does not improve AUC. Reverting changes.
Training on augumented user 63506 16/50 current_auc = 0.5696078431372549
User 63506 AUC after training: 0.5647058823529412
User 63506 does not improve AUC. Reverting changes.
Training on augumented user 81160 17/50 current_auc = 0.5696078431372549
User 81160 AUC after training: 0.567156862745098
User 81160 does not improve AUC. Reverting changes.
Training on augumented user 95773 18/50 current_auc = 0.5696078431372549
User 95773 AUC after training: 0.5691176470588235
User 95773 does not improve AUC. Reverting changes.
Training on augumented user 110389 19/50 current_auc = 0.5696078431372549
User 110389 AUC after training: 0.5681372549019609
User 110389 does not improve AUC. Reverting changes.
Training on augumented user 46650 20/50 current_auc = 0.5696078431372549
User 46650 AUC after training: 0.5681372549019608
User 46650 does not improve AUC. Reverting changes.
Training on augumented user 137328 21/50 current_auc = 0.5696078431372549
User 137328 AUC after training: 0.5696078431372549
User 137328 does not improve AUC. Reverting changes.
Training on augumented user 25716 22/50 current_auc = 0.5696078431372549
User 25716 AUC after training: 0.5661764705882353
User 25716 does not improve AUC. Reverting changes.
Training on augumented user 96642 23/50 current_auc = 0.5696078431372549
User 96642 AUC after training: 0.5666666666666667
User 96642 does not improve AUC. Reverting changes.
Training on augumented user 112490 24/50 current_auc = 0.5696078431372549
User 112490 AUC after training: 0.5666666666666668
User 112490 does not improve AUC. Reverting changes.
Training on augumented user 5353 25/50 current_auc = 0.5696078431372549
User 5353 AUC after training: 0.5656862745098039
User 5353 does not improve AUC. Reverting changes.
Training on augumented user 14322 26/50 current_auc = 0.5696078431372549
User 14322 AUC after training: 0.5676470588235294
User 14322 does not improve AUC. Reverting changes.
Training on augumented user 123708 27/50 current_auc = 0.5696078431372549
User 123708 AUC after training: 0.5691176470588235
User 123708 does not improve AUC. Reverting changes.
Training on augumented user 116868 28/50 current_auc = 0.5696078431372549
User 116868 AUC after training: 0.5686274509803921
User 116868 does not improve AUC. Reverting changes.
Training on augumented user 17607 29/50 current_auc = 0.5696078431372549
User 17607 AUC after training: 0.5686274509803921
User 17607 does not improve AUC. Reverting changes.
Training on augumented user 115061 30/50 current_auc = 0.5696078431372549
User 115061 AUC after training: 0.5686274509803921
User 115061 does not improve AUC. Reverting changes.
Training on augumented user 100469 31/50 current_auc = 0.5696078431372549
User 100469 AUC after training: 0.5676470588235294
User 100469 does not improve AUC. Reverting changes.
Training on augumented user 77310 32/50 current_auc = 0.5696078431372549
User 77310 AUC after training: 0.5681372549019608
User 77310 does not improve AUC. Reverting changes.
Training on augumented user 15206 33/50 current_auc = 0.5696078431372549
User 15206 AUC after training: 0.5700980392156862
User 15206 improves AUC. Keeping the model.
Training on augumented user 25965 34/50 current_auc = 0.5700980392156862
User 25965 AUC after training: 0.5691176470588235
User 25965 does not improve AUC. Reverting changes.
Training on augumented user 29504 35/50 current_auc = 0.5700980392156862
User 29504 AUC after training: 0.5691176470588235
User 29504 does not improve AUC. Reverting changes.
Training on augumented user 65805 36/50 current_auc = 0.5700980392156862
User 65805 AUC after training: 0.567156862745098
User 65805 does not improve AUC. Reverting changes.
Training on augumented user 28619 37/50 current_auc = 0.5700980392156862
User 28619 AUC after training: 0.5681372549019608
User 28619 does not improve AUC. Reverting changes.
Training on augumented user 110316 38/50 current_auc = 0.5700980392156862
User 110316 AUC after training: 0.5686274509803921
User 110316 does not improve AUC. Reverting changes.
Training on augumented user 137205 39/50 current_auc = 0.5700980392156862
User 137205 AUC after training: 0.5661764705882353
User 137205 does not improve AUC. Reverting changes.
Training on augumented user 86924 40/50 current_auc = 0.5700980392156862
User 86924 AUC after training: 0.5661764705882353
User 86924 does not improve AUC. Reverting changes.
Training on augumented user 97373 41/50 current_auc = 0.5700980392156862
User 97373 AUC after training: 0.5696078431372549
User 97373 does not improve AUC. Reverting changes.
Training on augumented user 63948 42/50 current_auc = 0.5700980392156862
User 63948 AUC after training: 0.5681372549019608
User 63948 does not improve AUC. Reverting changes.
Training on augumented user 53586 43/50 current_auc = 0.5700980392156862
User 53586 AUC after training: 0.567156862745098
User 53586 does not improve AUC. Reverting changes.
Training on augumented user 108189 44/50 current_auc = 0.5700980392156862
User 108189 AUC after training: 0.5681372549019608
User 108189 does not improve AUC. Reverting changes.
Training on augumented user 91483 45/50 current_auc = 0.5700980392156862
User 91483 AUC after training: 0.5686274509803921
User 91483 does not improve AUC. Reverting changes.
Training on augumented user 48788 46/50 current_auc = 0.5700980392156862
User 48788 AUC after training: 0.5700980392156862
User 48788 does not improve AUC. Reverting changes.
Training on augumented user 98541 47/50 current_auc = 0.5700980392156862
User 98541 AUC after training: 0.5691176470588235
User 98541 does not improve AUC. Reverting changes.
Training on augumented user 56522 48/50 current_auc = 0.5700980392156862
User 56522 AUC after training: 0.5691176470588235
User 56522 does not improve AUC. Reverting changes.
Training on augumented user 123067 49/50 current_auc = 0.5700980392156862
User 123067 AUC after training: 0.5651960784313725
User 123067 does not improve AUC. Reverting changes.
[2024-12-02 19:07:41.160391] start test user 73015 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:41.614052] start test user 73015 165/568 recall augumented users by random, augumented_users = [51117, 65427, 76766, 8345, 100982, 52943, 135054, 31005, 23813, 98375, 68053, 31449, 20130, 94401, 138417, 46802, 74164, 78399, 127661, 92327, 81039, 107256, 32087, 82533, 91311, 138337, 27240, 79615, 84178, 123168, 107005, 30000, 113727, 28038, 59649, 52686, 67981, 128987, 35970, 43500, 125883, 102654, 42348, 68328, 39347, 134059, 59178, 3930, 127694, 5166]
[2024-12-02 19:07:41.628867] user = 73015 Cloud 165/568
[2024-12-02 19:07:41.638582] user = 73015 Local 165/568
[2024-12-02 19:07:41.681780] user = 73015 Local+ 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:42.985652] user = 73015 MPDA- 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7777777777777778
Training on augumented user 51117 0/50 current_auc = 0.7777777777777778
User 51117 AUC after training: 0.7777777777777778
User 51117 does not improve AUC. Reverting changes.
Training on augumented user 65427 1/50 current_auc = 0.7777777777777778
User 65427 AUC after training: 0.7777777777777778
User 65427 does not improve AUC. Reverting changes.
Training on augumented user 76766 2/50 current_auc = 0.7777777777777778
User 76766 AUC after training: 0.7777777777777778
User 76766 does not improve AUC. Reverting changes.
Training on augumented user 8345 3/50 current_auc = 0.7777777777777778
User 8345 AUC after training: 0.7777777777777778
User 8345 does not improve AUC. Reverting changes.
Training on augumented user 100982 4/50 current_auc = 0.7777777777777778
User 100982 AUC after training: 0.7777777777777778
User 100982 does not improve AUC. Reverting changes.
Training on augumented user 52943 5/50 current_auc = 0.7777777777777778
User 52943 AUC after training: 0.7777777777777778
User 52943 does not improve AUC. Reverting changes.
Training on augumented user 135054 6/50 current_auc = 0.7777777777777778
User 135054 AUC after training: 0.7777777777777778
User 135054 does not improve AUC. Reverting changes.
Training on augumented user 31005 7/50 current_auc = 0.7777777777777778
User 31005 AUC after training: 0.7777777777777778
User 31005 does not improve AUC. Reverting changes.
Training on augumented user 23813 8/50 current_auc = 0.7777777777777778
User 23813 AUC after training: 0.7777777777777778
User 23813 does not improve AUC. Reverting changes.
Training on augumented user 98375 9/50 current_auc = 0.7777777777777778
User 98375 AUC after training: 0.7777777777777778
User 98375 does not improve AUC. Reverting changes.
Training on augumented user 68053 10/50 current_auc = 0.7777777777777778
User 68053 AUC after training: 0.7777777777777778
User 68053 does not improve AUC. Reverting changes.
Training on augumented user 31449 11/50 current_auc = 0.7777777777777778
User 31449 AUC after training: 0.7777777777777778
User 31449 does not improve AUC. Reverting changes.
Training on augumented user 20130 12/50 current_auc = 0.7777777777777778
User 20130 AUC after training: 0.7777777777777778
User 20130 does not improve AUC. Reverting changes.
Training on augumented user 94401 13/50 current_auc = 0.7777777777777778
User 94401 AUC after training: 0.7777777777777778
User 94401 does not improve AUC. Reverting changes.
Training on augumented user 138417 14/50 current_auc = 0.7777777777777778
User 138417 AUC after training: 0.7777777777777778
User 138417 does not improve AUC. Reverting changes.
Training on augumented user 46802 15/50 current_auc = 0.7777777777777778
User 46802 AUC after training: 0.7777777777777778
User 46802 does not improve AUC. Reverting changes.
Training on augumented user 74164 16/50 current_auc = 0.7777777777777778
User 74164 AUC after training: 0.7777777777777778
User 74164 does not improve AUC. Reverting changes.
Training on augumented user 78399 17/50 current_auc = 0.7777777777777778
User 78399 AUC after training: 0.7777777777777778
User 78399 does not improve AUC. Reverting changes.
Training on augumented user 127661 18/50 current_auc = 0.7777777777777778
User 127661 AUC after training: 0.7777777777777778
User 127661 does not improve AUC. Reverting changes.
Training on augumented user 92327 19/50 current_auc = 0.7777777777777778
User 92327 AUC after training: 0.7777777777777778
User 92327 does not improve AUC. Reverting changes.
Training on augumented user 81039 20/50 current_auc = 0.7777777777777778
User 81039 AUC after training: 0.7777777777777778
User 81039 does not improve AUC. Reverting changes.
Training on augumented user 107256 21/50 current_auc = 0.7777777777777778
User 107256 AUC after training: 0.7777777777777778
User 107256 does not improve AUC. Reverting changes.
Training on augumented user 32087 22/50 current_auc = 0.7777777777777778
User 32087 AUC after training: 0.7777777777777778
User 32087 does not improve AUC. Reverting changes.
Training on augumented user 82533 23/50 current_auc = 0.7777777777777778
User 82533 AUC after training: 0.7777777777777778
User 82533 does not improve AUC. Reverting changes.
Training on augumented user 91311 24/50 current_auc = 0.7777777777777778
User 91311 AUC after training: 0.7777777777777778
User 91311 does not improve AUC. Reverting changes.
Training on augumented user 138337 25/50 current_auc = 0.7777777777777778
User 138337 AUC after training: 0.7777777777777778
User 138337 does not improve AUC. Reverting changes.
Training on augumented user 27240 26/50 current_auc = 0.7777777777777778
User 27240 AUC after training: 0.7777777777777778
User 27240 does not improve AUC. Reverting changes.
Training on augumented user 79615 27/50 current_auc = 0.7777777777777778
User 79615 AUC after training: 0.7777777777777778
User 79615 does not improve AUC. Reverting changes.
Training on augumented user 84178 28/50 current_auc = 0.7777777777777778
User 84178 AUC after training: 0.7777777777777778
User 84178 does not improve AUC. Reverting changes.
Training on augumented user 123168 29/50 current_auc = 0.7777777777777778
User 123168 AUC after training: 0.7777777777777778
User 123168 does not improve AUC. Reverting changes.
Training on augumented user 107005 30/50 current_auc = 0.7777777777777778
User 107005 AUC after training: 0.7777777777777778
User 107005 does not improve AUC. Reverting changes.
Training on augumented user 30000 31/50 current_auc = 0.7777777777777778
User 30000 AUC after training: 0.7777777777777778
User 30000 does not improve AUC. Reverting changes.
Training on augumented user 113727 32/50 current_auc = 0.7777777777777778
User 113727 AUC after training: 0.7777777777777778
User 113727 does not improve AUC. Reverting changes.
Training on augumented user 28038 33/50 current_auc = 0.7777777777777778
User 28038 AUC after training: 0.7777777777777778
User 28038 does not improve AUC. Reverting changes.
Training on augumented user 59649 34/50 current_auc = 0.7777777777777778
User 59649 AUC after training: 0.7777777777777778
User 59649 does not improve AUC. Reverting changes.
Training on augumented user 52686 35/50 current_auc = 0.7777777777777778
User 52686 AUC after training: 0.7777777777777778
User 52686 does not improve AUC. Reverting changes.
Training on augumented user 67981 36/50 current_auc = 0.7777777777777778
User 67981 AUC after training: 0.7777777777777778
User 67981 does not improve AUC. Reverting changes.
Training on augumented user 128987 37/50 current_auc = 0.7777777777777778
User 128987 AUC after training: 0.7777777777777778
User 128987 does not improve AUC. Reverting changes.
Training on augumented user 35970 38/50 current_auc = 0.7777777777777778
User 35970 AUC after training: 0.7777777777777778
User 35970 does not improve AUC. Reverting changes.
Training on augumented user 43500 39/50 current_auc = 0.7777777777777778
User 43500 AUC after training: 0.7777777777777778
User 43500 does not improve AUC. Reverting changes.
Training on augumented user 125883 40/50 current_auc = 0.7777777777777778
User 125883 AUC after training: 0.7777777777777778
User 125883 does not improve AUC. Reverting changes.
Training on augumented user 102654 41/50 current_auc = 0.7777777777777778
User 102654 AUC after training: 0.7777777777777778
User 102654 does not improve AUC. Reverting changes.
Training on augumented user 42348 42/50 current_auc = 0.7777777777777778
User 42348 AUC after training: 0.7777777777777778
User 42348 does not improve AUC. Reverting changes.
Training on augumented user 68328 43/50 current_auc = 0.7777777777777778
User 68328 AUC after training: 0.7777777777777778
User 68328 does not improve AUC. Reverting changes.
Training on augumented user 39347 44/50 current_auc = 0.7777777777777778
User 39347 AUC after training: 0.7777777777777778
User 39347 does not improve AUC. Reverting changes.
Training on augumented user 134059 45/50 current_auc = 0.7777777777777778
User 134059 AUC after training: 0.7777777777777778
User 134059 does not improve AUC. Reverting changes.
Training on augumented user 59178 46/50 current_auc = 0.7777777777777778
User 59178 AUC after training: 0.7777777777777778
User 59178 does not improve AUC. Reverting changes.
Training on augumented user 3930 47/50 current_auc = 0.7777777777777778
User 3930 AUC after training: 0.7777777777777778
User 3930 does not improve AUC. Reverting changes.
Training on augumented user 127694 48/50 current_auc = 0.7777777777777778
User 127694 AUC after training: 0.7777777777777778
User 127694 does not improve AUC. Reverting changes.
Training on augumented user 5166 49/50 current_auc = 0.7777777777777778
User 5166 AUC after training: 0.7777777777777778
User 5166 does not improve AUC. Reverting changes.
[2024-12-02 19:08:09.162645] start test user 73026 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:09.848245] start test user 73026 166/568 recall augumented users by random, augumented_users = [114219, 69031, 52317, 72993, 126962, 78928, 59347, 66227, 108150, 86515, 91082, 138394, 2235, 49708, 65134, 98016, 1464, 35706, 37907, 42584, 126198, 135262, 32254, 69969, 113800, 46617, 114252, 46215, 100866, 85929, 111782, 111689, 42000, 114, 111433, 107893, 96173, 106871, 132298, 3718, 80318, 6317, 57127, 92349, 125007, 9828, 106461, 113562, 8069, 93264]
[2024-12-02 19:08:09.870128] user = 73026 Cloud 166/568
[2024-12-02 19:08:09.937720] user = 73026 Local 166/568
[2024-12-02 19:08:10.281208] user = 73026 Local+ 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:12.834818] user = 73026 MPDA- 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6427157001414427
Training on augumented user 114219 0/50 current_auc = 0.6427157001414427
User 114219 AUC after training: 0.6426803394625177
User 114219 does not improve AUC. Reverting changes.
Training on augumented user 69031 1/50 current_auc = 0.6427157001414427
User 69031 AUC after training: 0.6434229137199434
User 69031 improves AUC. Keeping the model.
Training on augumented user 52317 2/50 current_auc = 0.6434229137199434
User 52317 AUC after training: 0.6440947666195191
User 52317 improves AUC. Keeping the model.
Training on augumented user 72993 3/50 current_auc = 0.6440947666195191
User 72993 AUC after training: 0.6444483734087695
User 72993 improves AUC. Keeping the model.
Training on augumented user 126962 4/50 current_auc = 0.6444483734087695
User 126962 AUC after training: 0.6441654879773692
User 126962 does not improve AUC. Reverting changes.
Training on augumented user 78928 5/50 current_auc = 0.6444483734087695
User 78928 AUC after training: 0.6444483734087695
User 78928 does not improve AUC. Reverting changes.
Training on augumented user 59347 6/50 current_auc = 0.6444483734087695
User 59347 AUC after training: 0.6442362093352192
User 59347 does not improve AUC. Reverting changes.
Training on augumented user 66227 7/50 current_auc = 0.6444483734087695
User 66227 AUC after training: 0.6437411598302687
User 66227 does not improve AUC. Reverting changes.
Training on augumented user 108150 8/50 current_auc = 0.6444483734087695
User 108150 AUC after training: 0.6443422913719943
User 108150 does not improve AUC. Reverting changes.
Training on augumented user 86515 9/50 current_auc = 0.6444483734087695
User 86515 AUC after training: 0.6412659123055162
User 86515 does not improve AUC. Reverting changes.
Training on augumented user 91082 10/50 current_auc = 0.6444483734087695
User 91082 AUC after training: 0.6455091937765205
User 91082 improves AUC. Keeping the model.
Training on augumented user 138394 11/50 current_auc = 0.6455091937765205
User 138394 AUC after training: 0.6454384724186705
User 138394 does not improve AUC. Reverting changes.
Training on augumented user 2235 12/50 current_auc = 0.6455091937765205
User 2235 AUC after training: 0.646004243281471
User 2235 improves AUC. Keeping the model.
Training on augumented user 49708 13/50 current_auc = 0.646004243281471
User 49708 AUC after training: 0.6457920792079208
User 49708 does not improve AUC. Reverting changes.
Training on augumented user 65134 14/50 current_auc = 0.646004243281471
User 65134 AUC after training: 0.6460749646393211
User 65134 improves AUC. Keeping the model.
Training on augumented user 98016 15/50 current_auc = 0.6460749646393211
User 98016 AUC after training: 0.6456506364922207
User 98016 does not improve AUC. Reverting changes.
Training on augumented user 1464 16/50 current_auc = 0.6460749646393211
User 1464 AUC after training: 0.6460749646393211
User 1464 does not improve AUC. Reverting changes.
Training on augumented user 35706 17/50 current_auc = 0.6460749646393211
User 35706 AUC after training: 0.6457920792079208
User 35706 does not improve AUC. Reverting changes.
Training on augumented user 37907 18/50 current_auc = 0.6460749646393211
User 37907 AUC after training: 0.6455091937765205
User 37907 does not improve AUC. Reverting changes.
Training on augumented user 42584 19/50 current_auc = 0.6460749646393211
User 42584 AUC after training: 0.6462871287128713
User 42584 improves AUC. Keeping the model.
Training on augumented user 126198 20/50 current_auc = 0.6462871287128713
User 126198 AUC after training: 0.6458981612446959
User 126198 does not improve AUC. Reverting changes.
Training on augumented user 135262 21/50 current_auc = 0.6462871287128713
User 135262 AUC after training: 0.6462164073550212
User 135262 does not improve AUC. Reverting changes.
Training on augumented user 32254 22/50 current_auc = 0.6462871287128713
User 32254 AUC after training: 0.6457920792079208
User 32254 does not improve AUC. Reverting changes.
Training on augumented user 69969 23/50 current_auc = 0.6462871287128713
User 69969 AUC after training: 0.642963224893918
User 69969 does not improve AUC. Reverting changes.
Training on augumented user 113800 24/50 current_auc = 0.6462871287128713
User 113800 AUC after training: 0.6457920792079208
User 113800 does not improve AUC. Reverting changes.
Training on augumented user 46617 25/50 current_auc = 0.6462871287128713
User 46617 AUC after training: 0.6464285714285715
User 46617 improves AUC. Keeping the model.
Training on augumented user 114252 26/50 current_auc = 0.6464285714285715
User 114252 AUC after training: 0.6460749646393211
User 114252 does not improve AUC. Reverting changes.
Training on augumented user 46215 27/50 current_auc = 0.6464285714285715
User 46215 AUC after training: 0.646004243281471
User 46215 does not improve AUC. Reverting changes.
Training on augumented user 100866 28/50 current_auc = 0.6464285714285715
User 100866 AUC after training: 0.645933521923621
User 100866 does not improve AUC. Reverting changes.
Training on augumented user 85929 29/50 current_auc = 0.6464285714285715
User 85929 AUC after training: 0.645933521923621
User 85929 does not improve AUC. Reverting changes.
Training on augumented user 111782 30/50 current_auc = 0.6464285714285715
User 111782 AUC after training: 0.6445190947666195
User 111782 does not improve AUC. Reverting changes.
Training on augumented user 111689 31/50 current_auc = 0.6464285714285715
User 111689 AUC after training: 0.6463578500707213
User 111689 does not improve AUC. Reverting changes.
Training on augumented user 42000 32/50 current_auc = 0.6464285714285715
User 42000 AUC after training: 0.6452263083451202
User 42000 does not improve AUC. Reverting changes.
Training on augumented user 114 33/50 current_auc = 0.6464285714285715
User 114 AUC after training: 0.6463578500707213
User 114 does not improve AUC. Reverting changes.
Training on augumented user 111433 34/50 current_auc = 0.6464285714285715
User 111433 AUC after training: 0.646004243281471
User 111433 does not improve AUC. Reverting changes.
Training on augumented user 107893 35/50 current_auc = 0.6464285714285715
User 107893 AUC after training: 0.6462164073550212
User 107893 does not improve AUC. Reverting changes.
Training on augumented user 96173 36/50 current_auc = 0.6464285714285715
User 96173 AUC after training: 0.6458628005657708
User 96173 does not improve AUC. Reverting changes.
Training on augumented user 106871 37/50 current_auc = 0.6464285714285715
User 106871 AUC after training: 0.6448019801980198
User 106871 does not improve AUC. Reverting changes.
Training on augumented user 132298 38/50 current_auc = 0.6464285714285715
User 132298 AUC after training: 0.6458628005657708
User 132298 does not improve AUC. Reverting changes.
Training on augumented user 3718 39/50 current_auc = 0.6464285714285715
User 3718 AUC after training: 0.645862800565771
User 3718 does not improve AUC. Reverting changes.
Training on augumented user 80318 40/50 current_auc = 0.6464285714285715
User 80318 AUC after training: 0.6463578500707213
User 80318 does not improve AUC. Reverting changes.
Training on augumented user 6317 41/50 current_auc = 0.6464285714285715
User 6317 AUC after training: 0.6437411598302688
User 6317 does not improve AUC. Reverting changes.
Training on augumented user 57127 42/50 current_auc = 0.6464285714285715
User 57127 AUC after training: 0.6458274398868459
User 57127 does not improve AUC. Reverting changes.
Training on augumented user 92349 43/50 current_auc = 0.6464285714285715
User 92349 AUC after training: 0.645862800565771
User 92349 does not improve AUC. Reverting changes.
Training on augumented user 125007 44/50 current_auc = 0.6464285714285715
User 125007 AUC after training: 0.6443776520509195
User 125007 does not improve AUC. Reverting changes.
Training on augumented user 9828 45/50 current_auc = 0.6464285714285715
User 9828 AUC after training: 0.6457920792079208
User 9828 does not improve AUC. Reverting changes.
Training on augumented user 106461 46/50 current_auc = 0.6464285714285715
User 106461 AUC after training: 0.6457213578500707
User 106461 does not improve AUC. Reverting changes.
Training on augumented user 113562 47/50 current_auc = 0.6464285714285715
User 113562 AUC after training: 0.6454384724186705
User 113562 does not improve AUC. Reverting changes.
Training on augumented user 8069 48/50 current_auc = 0.6464285714285715
User 8069 AUC after training: 0.6461456859971711
User 8069 does not improve AUC. Reverting changes.
Training on augumented user 93264 49/50 current_auc = 0.6464285714285715
User 93264 AUC after training: 0.645862800565771
User 93264 does not improve AUC. Reverting changes.
[2024-12-02 19:08:46.742659] start test user 73100 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:47.479469] start test user 73100 167/568 recall augumented users by random, augumented_users = [19642, 32609, 111239, 100040, 17062, 96483, 18282, 107564, 84419, 40945, 12805, 95518, 79014, 25497, 64790, 134384, 14460, 48632, 135926, 83362, 19705, 59733, 65000, 41420, 87259, 79208, 86408, 42843, 74990, 20602, 71085, 134496, 73156, 211, 58641, 31485, 95086, 46622, 136159, 104957, 115728, 79831, 21979, 115488, 96249, 108565, 41187, 40751, 23906, 76182]
[2024-12-02 19:08:47.495030] user = 73100 Cloud 167/568
[2024-12-02 19:08:47.514463] user = 73100 Local 167/568
[2024-12-02 19:08:47.586162] user = 73100 Local+ 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:49.752925] user = 73100 MPDA- 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.621345029239766
Training on augumented user 19642 0/50 current_auc = 0.621345029239766
User 19642 AUC after training: 0.621345029239766
User 19642 does not improve AUC. Reverting changes.
Training on augumented user 32609 1/50 current_auc = 0.621345029239766
User 32609 AUC after training: 0.6228070175438597
User 32609 improves AUC. Keeping the model.
Training on augumented user 111239 2/50 current_auc = 0.6228070175438597
User 111239 AUC after training: 0.6228070175438596
User 111239 does not improve AUC. Reverting changes.
Training on augumented user 100040 3/50 current_auc = 0.6228070175438597
User 100040 AUC after training: 0.6200657894736842
User 100040 does not improve AUC. Reverting changes.
Training on augumented user 17062 4/50 current_auc = 0.6228070175438597
User 17062 AUC after training: 0.6202485380116959
User 17062 does not improve AUC. Reverting changes.
Training on augumented user 96483 5/50 current_auc = 0.6228070175438597
User 96483 AUC after training: 0.6213450292397661
User 96483 does not improve AUC. Reverting changes.
Training on augumented user 18282 6/50 current_auc = 0.6228070175438597
User 18282 AUC after training: 0.6202485380116959
User 18282 does not improve AUC. Reverting changes.
Training on augumented user 107564 7/50 current_auc = 0.6228070175438597
User 107564 AUC after training: 0.6217105263157895
User 107564 does not improve AUC. Reverting changes.
Training on augumented user 84419 8/50 current_auc = 0.6228070175438597
User 84419 AUC after training: 0.6228070175438597
User 84419 does not improve AUC. Reverting changes.
Training on augumented user 40945 9/50 current_auc = 0.6228070175438597
User 40945 AUC after training: 0.6202485380116959
User 40945 does not improve AUC. Reverting changes.
Training on augumented user 12805 10/50 current_auc = 0.6228070175438597
User 12805 AUC after training: 0.6220760233918129
User 12805 does not improve AUC. Reverting changes.
Training on augumented user 95518 11/50 current_auc = 0.6228070175438597
User 95518 AUC after training: 0.6195175438596491
User 95518 does not improve AUC. Reverting changes.
Training on augumented user 79014 12/50 current_auc = 0.6228070175438597
User 79014 AUC after training: 0.6228070175438597
User 79014 does not improve AUC. Reverting changes.
Training on augumented user 25497 13/50 current_auc = 0.6228070175438597
User 25497 AUC after training: 0.6235380116959064
User 25497 improves AUC. Keeping the model.
Training on augumented user 64790 14/50 current_auc = 0.6235380116959064
User 64790 AUC after training: 0.6224415204678362
User 64790 does not improve AUC. Reverting changes.
Training on augumented user 134384 15/50 current_auc = 0.6235380116959064
User 134384 AUC after training: 0.6224415204678362
User 134384 does not improve AUC. Reverting changes.
Training on augumented user 14460 16/50 current_auc = 0.6235380116959064
User 14460 AUC after training: 0.622624269005848
User 14460 does not improve AUC. Reverting changes.
Training on augumented user 48632 17/50 current_auc = 0.6235380116959064
User 48632 AUC after training: 0.622624269005848
User 48632 does not improve AUC. Reverting changes.
Training on augumented user 135926 18/50 current_auc = 0.6235380116959064
User 135926 AUC after training: 0.623172514619883
User 135926 does not improve AUC. Reverting changes.
Training on augumented user 83362 19/50 current_auc = 0.6235380116959064
User 83362 AUC after training: 0.6204312865497076
User 83362 does not improve AUC. Reverting changes.
Training on augumented user 19705 20/50 current_auc = 0.6235380116959064
User 19705 AUC after training: 0.6228070175438596
User 19705 does not improve AUC. Reverting changes.
Training on augumented user 59733 21/50 current_auc = 0.6235380116959064
User 59733 AUC after training: 0.6220760233918129
User 59733 does not improve AUC. Reverting changes.
Training on augumented user 65000 22/50 current_auc = 0.6235380116959064
User 65000 AUC after training: 0.6215277777777777
User 65000 does not improve AUC. Reverting changes.
Training on augumented user 41420 23/50 current_auc = 0.6235380116959064
User 41420 AUC after training: 0.6220760233918128
User 41420 does not improve AUC. Reverting changes.
Training on augumented user 87259 24/50 current_auc = 0.6235380116959064
User 87259 AUC after training: 0.6187865497076023
User 87259 does not improve AUC. Reverting changes.
Training on augumented user 79208 25/50 current_auc = 0.6235380116959064
User 79208 AUC after training: 0.6202485380116959
User 79208 does not improve AUC. Reverting changes.
Training on augumented user 86408 26/50 current_auc = 0.6235380116959064
User 86408 AUC after training: 0.625
User 86408 improves AUC. Keeping the model.
Training on augumented user 42843 27/50 current_auc = 0.625
User 42843 AUC after training: 0.6242690058479531
User 42843 does not improve AUC. Reverting changes.
Training on augumented user 74990 28/50 current_auc = 0.625
User 74990 AUC after training: 0.623172514619883
User 74990 does not improve AUC. Reverting changes.
Training on augumented user 20602 29/50 current_auc = 0.625
User 20602 AUC after training: 0.6217105263157894
User 20602 does not improve AUC. Reverting changes.
Training on augumented user 71085 30/50 current_auc = 0.625
User 71085 AUC after training: 0.626827485380117
User 71085 improves AUC. Keeping the model.
Training on augumented user 134496 31/50 current_auc = 0.626827485380117
User 134496 AUC after training: 0.625
User 134496 does not improve AUC. Reverting changes.
Training on augumented user 73156 32/50 current_auc = 0.626827485380117
User 73156 AUC after training: 0.6257309941520467
User 73156 does not improve AUC. Reverting changes.
Training on augumented user 211 33/50 current_auc = 0.626827485380117
User 211 AUC after training: 0.6260964912280701
User 211 does not improve AUC. Reverting changes.
Training on augumented user 58641 34/50 current_auc = 0.626827485380117
User 58641 AUC after training: 0.6228070175438596
User 58641 does not improve AUC. Reverting changes.
Training on augumented user 31485 35/50 current_auc = 0.626827485380117
User 31485 AUC after training: 0.6244517543859649
User 31485 does not improve AUC. Reverting changes.
Training on augumented user 95086 36/50 current_auc = 0.626827485380117
User 95086 AUC after training: 0.6244517543859649
User 95086 does not improve AUC. Reverting changes.
Training on augumented user 46622 37/50 current_auc = 0.626827485380117
User 46622 AUC after training: 0.6264619883040935
User 46622 does not improve AUC. Reverting changes.
Training on augumented user 136159 38/50 current_auc = 0.626827485380117
User 136159 AUC after training: 0.6253654970760234
User 136159 does not improve AUC. Reverting changes.
Training on augumented user 104957 39/50 current_auc = 0.626827485380117
User 104957 AUC after training: 0.6253654970760233
User 104957 does not improve AUC. Reverting changes.
Training on augumented user 115728 40/50 current_auc = 0.626827485380117
User 115728 AUC after training: 0.6248172514619883
User 115728 does not improve AUC. Reverting changes.
Training on augumented user 79831 41/50 current_auc = 0.626827485380117
User 79831 AUC after training: 0.6284722222222222
User 79831 improves AUC. Keeping the model.
Training on augumented user 21979 42/50 current_auc = 0.6284722222222222
User 21979 AUC after training: 0.6235380116959064
User 21979 does not improve AUC. Reverting changes.
Training on augumented user 115488 43/50 current_auc = 0.6284722222222222
User 115488 AUC after training: 0.6215277777777778
User 115488 does not improve AUC. Reverting changes.
Training on augumented user 96249 44/50 current_auc = 0.6284722222222222
User 96249 AUC after training: 0.626827485380117
User 96249 does not improve AUC. Reverting changes.
Training on augumented user 108565 45/50 current_auc = 0.6284722222222222
User 108565 AUC after training: 0.6260964912280701
User 108565 does not improve AUC. Reverting changes.
Training on augumented user 41187 46/50 current_auc = 0.6284722222222222
User 41187 AUC after training: 0.6253654970760234
User 41187 does not improve AUC. Reverting changes.
Training on augumented user 40751 47/50 current_auc = 0.6284722222222222
User 40751 AUC after training: 0.6228070175438596
User 40751 does not improve AUC. Reverting changes.
Training on augumented user 23906 48/50 current_auc = 0.6284722222222222
User 23906 AUC after training: 0.626827485380117
User 23906 does not improve AUC. Reverting changes.
Training on augumented user 76182 49/50 current_auc = 0.6284722222222222
User 76182 AUC after training: 0.6191520467836258
User 76182 does not improve AUC. Reverting changes.
[2024-12-02 19:09:21.421875] start test user 73138 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:21.850250] start test user 73138 168/568 recall augumented users by random, augumented_users = [90454, 28308, 2317, 9882, 24796, 64040, 112847, 54256, 115897, 26489, 135809, 21837, 75350, 33729, 1702, 60875, 14812, 30538, 41324, 56040, 77117, 116738, 68899, 30962, 27676, 31091, 105631, 99500, 28771, 60254, 133195, 112726, 102366, 71254, 129912, 106654, 72705, 101738, 137914, 94649, 17203, 68638, 79578, 29969, 53677, 76033, 135918, 28049, 30706, 53996]
[2024-12-02 19:09:21.865023] user = 73138 Cloud 168/568
[2024-12-02 19:09:21.877037] user = 73138 Local 168/568
[2024-12-02 19:09:21.904874] user = 73138 Local+ 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:23.519300] user = 73138 MPDA- 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5498575498575499
Training on augumented user 90454 0/50 current_auc = 0.5498575498575499
User 90454 AUC after training: 0.5512820512820512
User 90454 improves AUC. Keeping the model.
Training on augumented user 28308 1/50 current_auc = 0.5512820512820512
User 28308 AUC after training: 0.5512820512820513
User 28308 improves AUC. Keeping the model.
Training on augumented user 2317 2/50 current_auc = 0.5512820512820513
User 2317 AUC after training: 0.5498575498575499
User 2317 does not improve AUC. Reverting changes.
Training on augumented user 9882 3/50 current_auc = 0.5512820512820513
User 9882 AUC after training: 0.5498575498575499
User 9882 does not improve AUC. Reverting changes.
Training on augumented user 24796 4/50 current_auc = 0.5512820512820513
User 24796 AUC after training: 0.5498575498575499
User 24796 does not improve AUC. Reverting changes.
Training on augumented user 64040 5/50 current_auc = 0.5512820512820513
User 64040 AUC after training: 0.5512820512820513
User 64040 does not improve AUC. Reverting changes.
Training on augumented user 112847 6/50 current_auc = 0.5512820512820513
User 112847 AUC after training: 0.5512820512820512
User 112847 does not improve AUC. Reverting changes.
Training on augumented user 54256 7/50 current_auc = 0.5512820512820513
User 54256 AUC after training: 0.5498575498575498
User 54256 does not improve AUC. Reverting changes.
Training on augumented user 115897 8/50 current_auc = 0.5512820512820513
User 115897 AUC after training: 0.5512820512820513
User 115897 does not improve AUC. Reverting changes.
Training on augumented user 26489 9/50 current_auc = 0.5512820512820513
User 26489 AUC after training: 0.5512820512820513
User 26489 does not improve AUC. Reverting changes.
Training on augumented user 135809 10/50 current_auc = 0.5512820512820513
User 135809 AUC after training: 0.5512820512820513
User 135809 does not improve AUC. Reverting changes.
Training on augumented user 21837 11/50 current_auc = 0.5512820512820513
User 21837 AUC after training: 0.5512820512820513
User 21837 does not improve AUC. Reverting changes.
Training on augumented user 75350 12/50 current_auc = 0.5512820512820513
User 75350 AUC after training: 0.5512820512820513
User 75350 does not improve AUC. Reverting changes.
Training on augumented user 33729 13/50 current_auc = 0.5512820512820513
User 33729 AUC after training: 0.5470085470085471
User 33729 does not improve AUC. Reverting changes.
Training on augumented user 1702 14/50 current_auc = 0.5512820512820513
User 1702 AUC after training: 0.5527065527065527
User 1702 improves AUC. Keeping the model.
Training on augumented user 60875 15/50 current_auc = 0.5527065527065527
User 60875 AUC after training: 0.5541310541310541
User 60875 improves AUC. Keeping the model.
Training on augumented user 14812 16/50 current_auc = 0.5541310541310541
User 14812 AUC after training: 0.5541310541310541
User 14812 does not improve AUC. Reverting changes.
Training on augumented user 30538 17/50 current_auc = 0.5541310541310541
User 30538 AUC after training: 0.5541310541310541
User 30538 does not improve AUC. Reverting changes.
Training on augumented user 41324 18/50 current_auc = 0.5541310541310541
User 41324 AUC after training: 0.5498575498575499
User 41324 does not improve AUC. Reverting changes.
Training on augumented user 56040 19/50 current_auc = 0.5541310541310541
User 56040 AUC after training: 0.5512820512820513
User 56040 does not improve AUC. Reverting changes.
Training on augumented user 77117 20/50 current_auc = 0.5541310541310541
User 77117 AUC after training: 0.5527065527065527
User 77117 does not improve AUC. Reverting changes.
Training on augumented user 116738 21/50 current_auc = 0.5541310541310541
User 116738 AUC after training: 0.5541310541310541
User 116738 does not improve AUC. Reverting changes.
Training on augumented user 68899 22/50 current_auc = 0.5541310541310541
User 68899 AUC after training: 0.5541310541310541
User 68899 does not improve AUC. Reverting changes.
Training on augumented user 30962 23/50 current_auc = 0.5541310541310541
User 30962 AUC after training: 0.5541310541310541
User 30962 does not improve AUC. Reverting changes.
Training on augumented user 27676 24/50 current_auc = 0.5541310541310541
User 27676 AUC after training: 0.5541310541310541
User 27676 does not improve AUC. Reverting changes.
Training on augumented user 31091 25/50 current_auc = 0.5541310541310541
User 31091 AUC after training: 0.5541310541310541
User 31091 does not improve AUC. Reverting changes.
Training on augumented user 105631 26/50 current_auc = 0.5541310541310541
User 105631 AUC after training: 0.5527065527065527
User 105631 does not improve AUC. Reverting changes.
Training on augumented user 99500 27/50 current_auc = 0.5541310541310541
User 99500 AUC after training: 0.5527065527065528
User 99500 does not improve AUC. Reverting changes.
Training on augumented user 28771 28/50 current_auc = 0.5541310541310541
User 28771 AUC after training: 0.5527065527065527
User 28771 does not improve AUC. Reverting changes.
Training on augumented user 60254 29/50 current_auc = 0.5541310541310541
User 60254 AUC after training: 0.5498575498575499
User 60254 does not improve AUC. Reverting changes.
Training on augumented user 133195 30/50 current_auc = 0.5541310541310541
User 133195 AUC after training: 0.5541310541310541
User 133195 does not improve AUC. Reverting changes.
Training on augumented user 112726 31/50 current_auc = 0.5541310541310541
User 112726 AUC after training: 0.5541310541310541
User 112726 does not improve AUC. Reverting changes.
Training on augumented user 102366 32/50 current_auc = 0.5541310541310541
User 102366 AUC after training: 0.5541310541310541
User 102366 does not improve AUC. Reverting changes.
Training on augumented user 71254 33/50 current_auc = 0.5541310541310541
User 71254 AUC after training: 0.5527065527065527
User 71254 does not improve AUC. Reverting changes.
Training on augumented user 129912 34/50 current_auc = 0.5541310541310541
User 129912 AUC after training: 0.5555555555555556
User 129912 improves AUC. Keeping the model.
Training on augumented user 106654 35/50 current_auc = 0.5555555555555556
User 106654 AUC after training: 0.5512820512820513
User 106654 does not improve AUC. Reverting changes.
Training on augumented user 72705 36/50 current_auc = 0.5555555555555556
User 72705 AUC after training: 0.5555555555555556
User 72705 does not improve AUC. Reverting changes.
Training on augumented user 101738 37/50 current_auc = 0.5555555555555556
User 101738 AUC after training: 0.5527065527065527
User 101738 does not improve AUC. Reverting changes.
Training on augumented user 137914 38/50 current_auc = 0.5555555555555556
User 137914 AUC after training: 0.5541310541310541
User 137914 does not improve AUC. Reverting changes.
Training on augumented user 94649 39/50 current_auc = 0.5555555555555556
User 94649 AUC after training: 0.5555555555555556
User 94649 does not improve AUC. Reverting changes.
Training on augumented user 17203 40/50 current_auc = 0.5555555555555556
User 17203 AUC after training: 0.5527065527065527
User 17203 does not improve AUC. Reverting changes.
Training on augumented user 68638 41/50 current_auc = 0.5555555555555556
User 68638 AUC after training: 0.5498575498575499
User 68638 does not improve AUC. Reverting changes.
Training on augumented user 79578 42/50 current_auc = 0.5555555555555556
User 79578 AUC after training: 0.5541310541310541
User 79578 does not improve AUC. Reverting changes.
Training on augumented user 29969 43/50 current_auc = 0.5555555555555556
User 29969 AUC after training: 0.5541310541310541
User 29969 does not improve AUC. Reverting changes.
Training on augumented user 53677 44/50 current_auc = 0.5555555555555556
User 53677 AUC after training: 0.5555555555555556
User 53677 does not improve AUC. Reverting changes.
Training on augumented user 76033 45/50 current_auc = 0.5555555555555556
User 76033 AUC after training: 0.5541310541310541
User 76033 does not improve AUC. Reverting changes.
Training on augumented user 135918 46/50 current_auc = 0.5555555555555556
User 135918 AUC after training: 0.5512820512820512
User 135918 does not improve AUC. Reverting changes.
Training on augumented user 28049 47/50 current_auc = 0.5555555555555556
User 28049 AUC after training: 0.5527065527065527
User 28049 does not improve AUC. Reverting changes.
Training on augumented user 30706 48/50 current_auc = 0.5555555555555556
User 30706 AUC after training: 0.5541310541310541
User 30706 does not improve AUC. Reverting changes.
Training on augumented user 53996 49/50 current_auc = 0.5555555555555556
User 53996 AUC after training: 0.5541310541310541
User 53996 does not improve AUC. Reverting changes.
[2024-12-02 19:09:49.695598] start test user 73168 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:50.414895] start test user 73168 169/568 recall augumented users by random, augumented_users = [93957, 123704, 101783, 79001, 108503, 112073, 101961, 21954, 87684, 69197, 73925, 39457, 12089, 15888, 118412, 44942, 10552, 87229, 95908, 110601, 128485, 46795, 52735, 13094, 55767, 23097, 72799, 70932, 62569, 103399, 32205, 131795, 625, 43742, 107495, 96485, 13897, 121778, 4304, 92957, 95328, 54518, 56747, 67447, 82079, 19411, 65503, 109112, 35584, 49048]
[2024-12-02 19:09:50.429422] user = 73168 Cloud 169/568
[2024-12-02 19:09:50.471963] user = 73168 Local 169/568
[2024-12-02 19:09:50.495407] user = 73168 Local+ 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:52.625138] user = 73168 MPDA- 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6137980085348507
Training on augumented user 93957 0/50 current_auc = 0.6137980085348507
User 93957 AUC after training: 0.6148648648648648
User 93957 improves AUC. Keeping the model.
Training on augumented user 123704 1/50 current_auc = 0.6148648648648648
User 123704 AUC after training: 0.6120199146514936
User 123704 does not improve AUC. Reverting changes.
Training on augumented user 101783 2/50 current_auc = 0.6148648648648648
User 101783 AUC after training: 0.615931721194879
User 101783 improves AUC. Keeping the model.
Training on augumented user 79001 3/50 current_auc = 0.615931721194879
User 79001 AUC after training: 0.615931721194879
User 79001 does not improve AUC. Reverting changes.
Training on augumented user 108503 4/50 current_auc = 0.615931721194879
User 108503 AUC after training: 0.6173541963015647
User 108503 improves AUC. Keeping the model.
Training on augumented user 112073 5/50 current_auc = 0.6173541963015647
User 112073 AUC after training: 0.6198435277382646
User 112073 improves AUC. Keeping the model.
Training on augumented user 101961 6/50 current_auc = 0.6198435277382646
User 101961 AUC after training: 0.620199146514936
User 101961 improves AUC. Keeping the model.
Training on augumented user 21954 7/50 current_auc = 0.620199146514936
User 21954 AUC after training: 0.620199146514936
User 21954 does not improve AUC. Reverting changes.
Training on augumented user 87684 8/50 current_auc = 0.620199146514936
User 87684 AUC after training: 0.6216216216216216
User 87684 improves AUC. Keeping the model.
Training on augumented user 69197 9/50 current_auc = 0.6216216216216216
User 69197 AUC after training: 0.6198435277382646
User 69197 does not improve AUC. Reverting changes.
Training on augumented user 73925 10/50 current_auc = 0.6216216216216216
User 73925 AUC after training: 0.6209103840682788
User 73925 does not improve AUC. Reverting changes.
Training on augumented user 39457 11/50 current_auc = 0.6216216216216216
User 39457 AUC after training: 0.6209103840682787
User 39457 does not improve AUC. Reverting changes.
Training on augumented user 12089 12/50 current_auc = 0.6216216216216216
User 12089 AUC after training: 0.6148648648648648
User 12089 does not improve AUC. Reverting changes.
Training on augumented user 15888 13/50 current_auc = 0.6216216216216216
User 15888 AUC after training: 0.6180654338549075
User 15888 does not improve AUC. Reverting changes.
Training on augumented user 118412 14/50 current_auc = 0.6216216216216216
User 118412 AUC after training: 0.6145092460881935
User 118412 does not improve AUC. Reverting changes.
Training on augumented user 44942 15/50 current_auc = 0.6216216216216216
User 44942 AUC after training: 0.6201991465149359
User 44942 does not improve AUC. Reverting changes.
Training on augumented user 10552 16/50 current_auc = 0.6216216216216216
User 10552 AUC after training: 0.6198435277382646
User 10552 does not improve AUC. Reverting changes.
Training on augumented user 87229 17/50 current_auc = 0.6216216216216216
User 87229 AUC after training: 0.618421052631579
User 87229 does not improve AUC. Reverting changes.
Training on augumented user 95908 18/50 current_auc = 0.6216216216216216
User 95908 AUC after training: 0.6191322901849218
User 95908 does not improve AUC. Reverting changes.
Training on augumented user 110601 19/50 current_auc = 0.6216216216216216
User 110601 AUC after training: 0.6198435277382646
User 110601 does not improve AUC. Reverting changes.
Training on augumented user 128485 20/50 current_auc = 0.6216216216216216
User 128485 AUC after training: 0.6184210526315789
User 128485 does not improve AUC. Reverting changes.
Training on augumented user 46795 21/50 current_auc = 0.6216216216216216
User 46795 AUC after training: 0.6201991465149359
User 46795 does not improve AUC. Reverting changes.
Training on augumented user 52735 22/50 current_auc = 0.6216216216216216
User 52735 AUC after training: 0.6262446657183499
User 52735 improves AUC. Keeping the model.
Training on augumented user 13094 23/50 current_auc = 0.6262446657183499
User 13094 AUC after training: 0.6305120910384068
User 13094 improves AUC. Keeping the model.
Training on augumented user 55767 24/50 current_auc = 0.6305120910384068
User 55767 AUC after training: 0.6230440967283073
User 55767 does not improve AUC. Reverting changes.
Training on augumented user 23097 25/50 current_auc = 0.6305120910384068
User 23097 AUC after training: 0.6262446657183499
User 23097 does not improve AUC. Reverting changes.
Training on augumented user 72799 26/50 current_auc = 0.6305120910384068
User 72799 AUC after training: 0.6269559032716927
User 72799 does not improve AUC. Reverting changes.
Training on augumented user 70932 27/50 current_auc = 0.6305120910384068
User 70932 AUC after training: 0.6248221906116643
User 70932 does not improve AUC. Reverting changes.
Training on augumented user 62569 28/50 current_auc = 0.6305120910384068
User 62569 AUC after training: 0.628022759601707
User 62569 does not improve AUC. Reverting changes.
Training on augumented user 103399 29/50 current_auc = 0.6305120910384068
User 103399 AUC after training: 0.6262446657183498
User 103399 does not improve AUC. Reverting changes.
Training on augumented user 32205 30/50 current_auc = 0.6305120910384068
User 32205 AUC after training: 0.6266002844950214
User 32205 does not improve AUC. Reverting changes.
Training on augumented user 131795 31/50 current_auc = 0.6305120910384068
User 131795 AUC after training: 0.6312233285917497
User 131795 improves AUC. Keeping the model.
Training on augumented user 625 32/50 current_auc = 0.6312233285917497
User 625 AUC after training: 0.6276671408250355
User 625 does not improve AUC. Reverting changes.
Training on augumented user 43742 33/50 current_auc = 0.6312233285917497
User 43742 AUC after training: 0.6290896159317211
User 43742 does not improve AUC. Reverting changes.
Training on augumented user 107495 34/50 current_auc = 0.6312233285917497
User 107495 AUC after training: 0.6226884779516358
User 107495 does not improve AUC. Reverting changes.
Training on augumented user 96485 35/50 current_auc = 0.6312233285917497
User 96485 AUC after training: 0.6283783783783784
User 96485 does not improve AUC. Reverting changes.
Training on augumented user 13897 36/50 current_auc = 0.6312233285917497
User 13897 AUC after training: 0.6287339971550497
User 13897 does not improve AUC. Reverting changes.
Training on augumented user 121778 37/50 current_auc = 0.6312233285917497
User 121778 AUC after training: 0.6273115220483642
User 121778 does not improve AUC. Reverting changes.
Training on augumented user 4304 38/50 current_auc = 0.6312233285917497
User 4304 AUC after training: 0.629800853485064
User 4304 does not improve AUC. Reverting changes.
Training on augumented user 92957 39/50 current_auc = 0.6312233285917497
User 92957 AUC after training: 0.6273115220483642
User 92957 does not improve AUC. Reverting changes.
Training on augumented user 95328 40/50 current_auc = 0.6312233285917497
User 95328 AUC after training: 0.6347795163584637
User 95328 improves AUC. Keeping the model.
Training on augumented user 54518 41/50 current_auc = 0.6347795163584637
User 54518 AUC after training: 0.6312233285917497
User 54518 does not improve AUC. Reverting changes.
Training on augumented user 56747 42/50 current_auc = 0.6347795163584637
User 56747 AUC after training: 0.633357041251778
User 56747 does not improve AUC. Reverting changes.
Training on augumented user 67447 43/50 current_auc = 0.6347795163584637
User 67447 AUC after training: 0.6287339971550499
User 67447 does not improve AUC. Reverting changes.
Training on augumented user 82079 44/50 current_auc = 0.6347795163584637
User 82079 AUC after training: 0.633357041251778
User 82079 does not improve AUC. Reverting changes.
Training on augumented user 19411 45/50 current_auc = 0.6347795163584637
User 19411 AUC after training: 0.6351351351351351
User 19411 improves AUC. Keeping the model.
Training on augumented user 65503 46/50 current_auc = 0.6351351351351351
User 65503 AUC after training: 0.6322901849217638
User 65503 does not improve AUC. Reverting changes.
Training on augumented user 109112 47/50 current_auc = 0.6351351351351351
User 109112 AUC after training: 0.6358463726884779
User 109112 improves AUC. Keeping the model.
Training on augumented user 35584 48/50 current_auc = 0.6358463726884779
User 35584 AUC after training: 0.6312233285917496
User 35584 does not improve AUC. Reverting changes.
Training on augumented user 49048 49/50 current_auc = 0.6358463726884779
User 49048 AUC after training: 0.6266002844950213
User 49048 does not improve AUC. Reverting changes.
[2024-12-02 19:10:22.393141] start test user 73258 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:22.805639] start test user 73258 170/568 recall augumented users by random, augumented_users = [50330, 67190, 107929, 2322, 122577, 106278, 40120, 43565, 96080, 106096, 30571, 135697, 9325, 42130, 22052, 42461, 114550, 114894, 128689, 6318, 127114, 33246, 117008, 65473, 14634, 131699, 99260, 110777, 20367, 114265, 132589, 38872, 133660, 30696, 65750, 114038, 72931, 24870, 109889, 82772, 114861, 114445, 68724, 122762, 136914, 132714, 90728, 80918, 75414, 102598]
[2024-12-02 19:10:22.820997] user = 73258 Cloud 170/568
[2024-12-02 19:10:22.831855] user = 73258 Local 170/568
[2024-12-02 19:10:22.880079] user = 73258 Local+ 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:25.729153] user = 73258 MPDA- 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.42592592592592593
Training on augumented user 50330 0/50 current_auc = 0.42592592592592593
User 50330 AUC after training: 0.42592592592592593
User 50330 does not improve AUC. Reverting changes.
Training on augumented user 67190 1/50 current_auc = 0.42592592592592593
User 67190 AUC after training: 0.42592592592592593
User 67190 does not improve AUC. Reverting changes.
Training on augumented user 107929 2/50 current_auc = 0.42592592592592593
User 107929 AUC after training: 0.42592592592592593
User 107929 does not improve AUC. Reverting changes.
Training on augumented user 2322 3/50 current_auc = 0.42592592592592593
User 2322 AUC after training: 0.42592592592592593
User 2322 does not improve AUC. Reverting changes.
Training on augumented user 122577 4/50 current_auc = 0.42592592592592593
User 122577 AUC after training: 0.42592592592592593
User 122577 does not improve AUC. Reverting changes.
Training on augumented user 106278 5/50 current_auc = 0.42592592592592593
User 106278 AUC after training: 0.42592592592592593
User 106278 does not improve AUC. Reverting changes.
Training on augumented user 40120 6/50 current_auc = 0.42592592592592593
User 40120 AUC after training: 0.42592592592592593
User 40120 does not improve AUC. Reverting changes.
Training on augumented user 43565 7/50 current_auc = 0.42592592592592593
User 43565 AUC after training: 0.42592592592592593
User 43565 does not improve AUC. Reverting changes.
Training on augumented user 96080 8/50 current_auc = 0.42592592592592593
User 96080 AUC after training: 0.42592592592592593
User 96080 does not improve AUC. Reverting changes.
Training on augumented user 106096 9/50 current_auc = 0.42592592592592593
User 106096 AUC after training: 0.42592592592592593
User 106096 does not improve AUC. Reverting changes.
Training on augumented user 30571 10/50 current_auc = 0.42592592592592593
User 30571 AUC after training: 0.42592592592592593
User 30571 does not improve AUC. Reverting changes.
Training on augumented user 135697 11/50 current_auc = 0.42592592592592593
User 135697 AUC after training: 0.42592592592592593
User 135697 does not improve AUC. Reverting changes.
Training on augumented user 9325 12/50 current_auc = 0.42592592592592593
User 9325 AUC after training: 0.42592592592592593
User 9325 does not improve AUC. Reverting changes.
Training on augumented user 42130 13/50 current_auc = 0.42592592592592593
User 42130 AUC after training: 0.42592592592592593
User 42130 does not improve AUC. Reverting changes.
Training on augumented user 22052 14/50 current_auc = 0.42592592592592593
User 22052 AUC after training: 0.42592592592592593
User 22052 does not improve AUC. Reverting changes.
Training on augumented user 42461 15/50 current_auc = 0.42592592592592593
User 42461 AUC after training: 0.42592592592592593
User 42461 does not improve AUC. Reverting changes.
Training on augumented user 114550 16/50 current_auc = 0.42592592592592593
User 114550 AUC after training: 0.42592592592592593
User 114550 does not improve AUC. Reverting changes.
Training on augumented user 114894 17/50 current_auc = 0.42592592592592593
User 114894 AUC after training: 0.42592592592592593
User 114894 does not improve AUC. Reverting changes.
Training on augumented user 128689 18/50 current_auc = 0.42592592592592593
User 128689 AUC after training: 0.42592592592592593
User 128689 does not improve AUC. Reverting changes.
Training on augumented user 6318 19/50 current_auc = 0.42592592592592593
User 6318 AUC after training: 0.42592592592592593
User 6318 does not improve AUC. Reverting changes.
Training on augumented user 127114 20/50 current_auc = 0.42592592592592593
User 127114 AUC after training: 0.42592592592592593
User 127114 does not improve AUC. Reverting changes.
Training on augumented user 33246 21/50 current_auc = 0.42592592592592593
User 33246 AUC after training: 0.42592592592592593
User 33246 does not improve AUC. Reverting changes.
Training on augumented user 117008 22/50 current_auc = 0.42592592592592593
User 117008 AUC after training: 0.42592592592592593
User 117008 does not improve AUC. Reverting changes.
Training on augumented user 65473 23/50 current_auc = 0.42592592592592593
User 65473 AUC after training: 0.42592592592592593
User 65473 does not improve AUC. Reverting changes.
Training on augumented user 14634 24/50 current_auc = 0.42592592592592593
User 14634 AUC after training: 0.42592592592592593
User 14634 does not improve AUC. Reverting changes.
Training on augumented user 131699 25/50 current_auc = 0.42592592592592593
User 131699 AUC after training: 0.42592592592592593
User 131699 does not improve AUC. Reverting changes.
Training on augumented user 99260 26/50 current_auc = 0.42592592592592593
User 99260 AUC after training: 0.42592592592592593
User 99260 does not improve AUC. Reverting changes.
Training on augumented user 110777 27/50 current_auc = 0.42592592592592593
User 110777 AUC after training: 0.42592592592592593
User 110777 does not improve AUC. Reverting changes.
Training on augumented user 20367 28/50 current_auc = 0.42592592592592593
User 20367 AUC after training: 0.42592592592592593
User 20367 does not improve AUC. Reverting changes.
Training on augumented user 114265 29/50 current_auc = 0.42592592592592593
User 114265 AUC after training: 0.42592592592592593
User 114265 does not improve AUC. Reverting changes.
Training on augumented user 132589 30/50 current_auc = 0.42592592592592593
User 132589 AUC after training: 0.42592592592592593
User 132589 does not improve AUC. Reverting changes.
Training on augumented user 38872 31/50 current_auc = 0.42592592592592593
User 38872 AUC after training: 0.42592592592592593
User 38872 does not improve AUC. Reverting changes.
Training on augumented user 133660 32/50 current_auc = 0.42592592592592593
User 133660 AUC after training: 0.42592592592592593
User 133660 does not improve AUC. Reverting changes.
Training on augumented user 30696 33/50 current_auc = 0.42592592592592593
User 30696 AUC after training: 0.42592592592592593
User 30696 does not improve AUC. Reverting changes.
Training on augumented user 65750 34/50 current_auc = 0.42592592592592593
User 65750 AUC after training: 0.42592592592592593
User 65750 does not improve AUC. Reverting changes.
Training on augumented user 114038 35/50 current_auc = 0.42592592592592593
User 114038 AUC after training: 0.42592592592592593
User 114038 does not improve AUC. Reverting changes.
Training on augumented user 72931 36/50 current_auc = 0.42592592592592593
User 72931 AUC after training: 0.42592592592592593
User 72931 does not improve AUC. Reverting changes.
Training on augumented user 24870 37/50 current_auc = 0.42592592592592593
User 24870 AUC after training: 0.42592592592592593
User 24870 does not improve AUC. Reverting changes.
Training on augumented user 109889 38/50 current_auc = 0.42592592592592593
User 109889 AUC after training: 0.42592592592592593
User 109889 does not improve AUC. Reverting changes.
Training on augumented user 82772 39/50 current_auc = 0.42592592592592593
User 82772 AUC after training: 0.42592592592592593
User 82772 does not improve AUC. Reverting changes.
Training on augumented user 114861 40/50 current_auc = 0.42592592592592593
User 114861 AUC after training: 0.42592592592592593
User 114861 does not improve AUC. Reverting changes.
Training on augumented user 114445 41/50 current_auc = 0.42592592592592593
User 114445 AUC after training: 0.42592592592592593
User 114445 does not improve AUC. Reverting changes.
Training on augumented user 68724 42/50 current_auc = 0.42592592592592593
User 68724 AUC after training: 0.42592592592592593
User 68724 does not improve AUC. Reverting changes.
Training on augumented user 122762 43/50 current_auc = 0.42592592592592593
User 122762 AUC after training: 0.42592592592592593
User 122762 does not improve AUC. Reverting changes.
Training on augumented user 136914 44/50 current_auc = 0.42592592592592593
User 136914 AUC after training: 0.42592592592592593
User 136914 does not improve AUC. Reverting changes.
Training on augumented user 132714 45/50 current_auc = 0.42592592592592593
User 132714 AUC after training: 0.42592592592592593
User 132714 does not improve AUC. Reverting changes.
Training on augumented user 90728 46/50 current_auc = 0.42592592592592593
User 90728 AUC after training: 0.42592592592592593
User 90728 does not improve AUC. Reverting changes.
Training on augumented user 80918 47/50 current_auc = 0.42592592592592593
User 80918 AUC after training: 0.42592592592592593
User 80918 does not improve AUC. Reverting changes.
Training on augumented user 75414 48/50 current_auc = 0.42592592592592593
User 75414 AUC after training: 0.42592592592592593
User 75414 does not improve AUC. Reverting changes.
Training on augumented user 102598 49/50 current_auc = 0.42592592592592593
User 102598 AUC after training: 0.42592592592592593
User 102598 does not improve AUC. Reverting changes.
[2024-12-02 19:10:58.310135] start test user 73295 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:58.967911] start test user 73295 171/568 recall augumented users by random, augumented_users = [38867, 11088, 103412, 14441, 50419, 15483, 27969, 49313, 56125, 31096, 69636, 127646, 132046, 58643, 126248, 57769, 101775, 51043, 131131, 84231, 113184, 42788, 134628, 23548, 97829, 6710, 86693, 70849, 95449, 87899, 42951, 26555, 89908, 25283, 98485, 76917, 86980, 24154, 61062, 42189, 63621, 96364, 4560, 26435, 127703, 125799, 106878, 38972, 91219, 80936]
[2024-12-02 19:10:58.982325] user = 73295 Cloud 171/568
[2024-12-02 19:10:58.992369] user = 73295 Local 171/568
[2024-12-02 19:10:59.024705] user = 73295 Local+ 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:01.104371] user = 73295 MPDA- 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.846846846846847
Training on augumented user 38867 0/50 current_auc = 0.846846846846847
User 38867 AUC after training: 0.8378378378378379
User 38867 does not improve AUC. Reverting changes.
Training on augumented user 11088 1/50 current_auc = 0.846846846846847
User 11088 AUC after training: 0.846846846846847
User 11088 does not improve AUC. Reverting changes.
Training on augumented user 103412 2/50 current_auc = 0.846846846846847
User 103412 AUC after training: 0.846846846846847
User 103412 does not improve AUC. Reverting changes.
Training on augumented user 14441 3/50 current_auc = 0.846846846846847
User 14441 AUC after training: 0.8423423423423424
User 14441 does not improve AUC. Reverting changes.
Training on augumented user 50419 4/50 current_auc = 0.846846846846847
User 50419 AUC after training: 0.846846846846847
User 50419 does not improve AUC. Reverting changes.
Training on augumented user 15483 5/50 current_auc = 0.846846846846847
User 15483 AUC after training: 0.846846846846847
User 15483 does not improve AUC. Reverting changes.
Training on augumented user 27969 6/50 current_auc = 0.846846846846847
User 27969 AUC after training: 0.846846846846847
User 27969 does not improve AUC. Reverting changes.
Training on augumented user 49313 7/50 current_auc = 0.846846846846847
User 49313 AUC after training: 0.8423423423423424
User 49313 does not improve AUC. Reverting changes.
Training on augumented user 56125 8/50 current_auc = 0.846846846846847
User 56125 AUC after training: 0.846846846846847
User 56125 does not improve AUC. Reverting changes.
Training on augumented user 31096 9/50 current_auc = 0.846846846846847
User 31096 AUC after training: 0.846846846846847
User 31096 does not improve AUC. Reverting changes.
Training on augumented user 69636 10/50 current_auc = 0.846846846846847
User 69636 AUC after training: 0.8423423423423424
User 69636 does not improve AUC. Reverting changes.
Training on augumented user 127646 11/50 current_auc = 0.846846846846847
User 127646 AUC after training: 0.846846846846847
User 127646 does not improve AUC. Reverting changes.
Training on augumented user 132046 12/50 current_auc = 0.846846846846847
User 132046 AUC after training: 0.8378378378378379
User 132046 does not improve AUC. Reverting changes.
Training on augumented user 58643 13/50 current_auc = 0.846846846846847
User 58643 AUC after training: 0.846846846846847
User 58643 does not improve AUC. Reverting changes.
Training on augumented user 126248 14/50 current_auc = 0.846846846846847
User 126248 AUC after training: 0.846846846846847
User 126248 does not improve AUC. Reverting changes.
Training on augumented user 57769 15/50 current_auc = 0.846846846846847
User 57769 AUC after training: 0.846846846846847
User 57769 does not improve AUC. Reverting changes.
Training on augumented user 101775 16/50 current_auc = 0.846846846846847
User 101775 AUC after training: 0.846846846846847
User 101775 does not improve AUC. Reverting changes.
Training on augumented user 51043 17/50 current_auc = 0.846846846846847
User 51043 AUC after training: 0.846846846846847
User 51043 does not improve AUC. Reverting changes.
Training on augumented user 131131 18/50 current_auc = 0.846846846846847
User 131131 AUC after training: 0.8423423423423424
User 131131 does not improve AUC. Reverting changes.
Training on augumented user 84231 19/50 current_auc = 0.846846846846847
User 84231 AUC after training: 0.846846846846847
User 84231 does not improve AUC. Reverting changes.
Training on augumented user 113184 20/50 current_auc = 0.846846846846847
User 113184 AUC after training: 0.8423423423423424
User 113184 does not improve AUC. Reverting changes.
Training on augumented user 42788 21/50 current_auc = 0.846846846846847
User 42788 AUC after training: 0.8558558558558559
User 42788 improves AUC. Keeping the model.
Training on augumented user 134628 22/50 current_auc = 0.8558558558558559
User 134628 AUC after training: 0.8513513513513514
User 134628 does not improve AUC. Reverting changes.
Training on augumented user 23548 23/50 current_auc = 0.8558558558558559
User 23548 AUC after training: 0.8558558558558559
User 23548 does not improve AUC. Reverting changes.
Training on augumented user 97829 24/50 current_auc = 0.8558558558558559
User 97829 AUC after training: 0.8558558558558559
User 97829 does not improve AUC. Reverting changes.
Training on augumented user 6710 25/50 current_auc = 0.8558558558558559
User 6710 AUC after training: 0.8558558558558559
User 6710 does not improve AUC. Reverting changes.
Training on augumented user 86693 26/50 current_auc = 0.8558558558558559
User 86693 AUC after training: 0.846846846846847
User 86693 does not improve AUC. Reverting changes.
Training on augumented user 70849 27/50 current_auc = 0.8558558558558559
User 70849 AUC after training: 0.8558558558558559
User 70849 does not improve AUC. Reverting changes.
Training on augumented user 95449 28/50 current_auc = 0.8558558558558559
User 95449 AUC after training: 0.8558558558558559
User 95449 does not improve AUC. Reverting changes.
Training on augumented user 87899 29/50 current_auc = 0.8558558558558559
User 87899 AUC after training: 0.8513513513513514
User 87899 does not improve AUC. Reverting changes.
Training on augumented user 42951 30/50 current_auc = 0.8558558558558559
User 42951 AUC after training: 0.846846846846847
User 42951 does not improve AUC. Reverting changes.
Training on augumented user 26555 31/50 current_auc = 0.8558558558558559
User 26555 AUC after training: 0.8558558558558559
User 26555 does not improve AUC. Reverting changes.
Training on augumented user 89908 32/50 current_auc = 0.8558558558558559
User 89908 AUC after training: 0.8558558558558559
User 89908 does not improve AUC. Reverting changes.
Training on augumented user 25283 33/50 current_auc = 0.8558558558558559
User 25283 AUC after training: 0.8558558558558559
User 25283 does not improve AUC. Reverting changes.
Training on augumented user 98485 34/50 current_auc = 0.8558558558558559
User 98485 AUC after training: 0.8558558558558559
User 98485 does not improve AUC. Reverting changes.
Training on augumented user 76917 35/50 current_auc = 0.8558558558558559
User 76917 AUC after training: 0.8603603603603605
User 76917 improves AUC. Keeping the model.
Training on augumented user 86980 36/50 current_auc = 0.8603603603603605
User 86980 AUC after training: 0.8558558558558559
User 86980 does not improve AUC. Reverting changes.
Training on augumented user 24154 37/50 current_auc = 0.8603603603603605
User 24154 AUC after training: 0.8603603603603605
User 24154 does not improve AUC. Reverting changes.
Training on augumented user 61062 38/50 current_auc = 0.8603603603603605
User 61062 AUC after training: 0.8603603603603605
User 61062 does not improve AUC. Reverting changes.
Training on augumented user 42189 39/50 current_auc = 0.8603603603603605
User 42189 AUC after training: 0.8603603603603605
User 42189 does not improve AUC. Reverting changes.
Training on augumented user 63621 40/50 current_auc = 0.8603603603603605
User 63621 AUC after training: 0.8558558558558559
User 63621 does not improve AUC. Reverting changes.
Training on augumented user 96364 41/50 current_auc = 0.8603603603603605
User 96364 AUC after training: 0.8603603603603605
User 96364 does not improve AUC. Reverting changes.
Training on augumented user 4560 42/50 current_auc = 0.8603603603603605
User 4560 AUC after training: 0.8603603603603605
User 4560 does not improve AUC. Reverting changes.
Training on augumented user 26435 43/50 current_auc = 0.8603603603603605
User 26435 AUC after training: 0.8603603603603605
User 26435 does not improve AUC. Reverting changes.
Training on augumented user 127703 44/50 current_auc = 0.8603603603603605
User 127703 AUC after training: 0.8558558558558559
User 127703 does not improve AUC. Reverting changes.
Training on augumented user 125799 45/50 current_auc = 0.8603603603603605
User 125799 AUC after training: 0.8558558558558559
User 125799 does not improve AUC. Reverting changes.
Training on augumented user 106878 46/50 current_auc = 0.8603603603603605
User 106878 AUC after training: 0.8603603603603605
User 106878 does not improve AUC. Reverting changes.
Training on augumented user 38972 47/50 current_auc = 0.8603603603603605
User 38972 AUC after training: 0.8603603603603605
User 38972 does not improve AUC. Reverting changes.
Training on augumented user 91219 48/50 current_auc = 0.8603603603603605
User 91219 AUC after training: 0.8603603603603605
User 91219 does not improve AUC. Reverting changes.
Training on augumented user 80936 49/50 current_auc = 0.8603603603603605
User 80936 AUC after training: 0.8558558558558559
User 80936 does not improve AUC. Reverting changes.
[2024-12-02 19:11:29.063235] start test user 73344 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:29.944066] start test user 73344 172/568 recall augumented users by random, augumented_users = [4276, 1231, 68603, 124272, 24086, 19600, 49967, 71849, 4219, 126738, 62848, 32506, 137408, 54505, 121958, 74552, 79375, 52425, 112700, 92528, 72848, 76793, 136062, 134094, 111892, 123414, 107026, 54051, 96783, 32141, 87744, 9481, 73280, 68585, 128149, 129126, 84868, 2948, 45850, 48086, 108888, 53329, 59622, 137040, 121201, 30695, 38274, 128103, 40824, 66977]
[2024-12-02 19:11:29.959350] user = 73344 Cloud 172/568
[2024-12-02 19:11:29.973042] user = 73344 Local 172/568
[2024-12-02 19:11:30.055023] user = 73344 Local+ 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:32.722725] user = 73344 MPDA- 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6971153846153846
Training on augumented user 4276 0/50 current_auc = 0.6971153846153846
User 4276 AUC after training: 0.6947115384615385
User 4276 does not improve AUC. Reverting changes.
Training on augumented user 1231 1/50 current_auc = 0.6971153846153846
User 1231 AUC after training: 0.6959134615384616
User 1231 does not improve AUC. Reverting changes.
Training on augumented user 68603 2/50 current_auc = 0.6971153846153846
User 68603 AUC after training: 0.7007211538461539
User 68603 improves AUC. Keeping the model.
Training on augumented user 124272 3/50 current_auc = 0.7007211538461539
User 124272 AUC after training: 0.6995192307692308
User 124272 does not improve AUC. Reverting changes.
Training on augumented user 24086 4/50 current_auc = 0.7007211538461539
User 24086 AUC after training: 0.6983173076923077
User 24086 does not improve AUC. Reverting changes.
Training on augumented user 19600 5/50 current_auc = 0.7007211538461539
User 19600 AUC after training: 0.7019230769230769
User 19600 improves AUC. Keeping the model.
Training on augumented user 49967 6/50 current_auc = 0.7019230769230769
User 49967 AUC after training: 0.7007211538461539
User 49967 does not improve AUC. Reverting changes.
Training on augumented user 71849 7/50 current_auc = 0.7019230769230769
User 71849 AUC after training: 0.6971153846153846
User 71849 does not improve AUC. Reverting changes.
Training on augumented user 4219 8/50 current_auc = 0.7019230769230769
User 4219 AUC after training: 0.7019230769230769
User 4219 does not improve AUC. Reverting changes.
Training on augumented user 126738 9/50 current_auc = 0.7019230769230769
User 126738 AUC after training: 0.6983173076923077
User 126738 does not improve AUC. Reverting changes.
Training on augumented user 62848 10/50 current_auc = 0.7019230769230769
User 62848 AUC after training: 0.703125
User 62848 improves AUC. Keeping the model.
Training on augumented user 32506 11/50 current_auc = 0.703125
User 32506 AUC after training: 0.7043269230769231
User 32506 improves AUC. Keeping the model.
Training on augumented user 137408 12/50 current_auc = 0.7043269230769231
User 137408 AUC after training: 0.703125
User 137408 does not improve AUC. Reverting changes.
Training on augumented user 54505 13/50 current_auc = 0.7043269230769231
User 54505 AUC after training: 0.703125
User 54505 does not improve AUC. Reverting changes.
Training on augumented user 121958 14/50 current_auc = 0.7043269230769231
User 121958 AUC after training: 0.703125
User 121958 does not improve AUC. Reverting changes.
Training on augumented user 74552 15/50 current_auc = 0.7043269230769231
User 74552 AUC after training: 0.7019230769230769
User 74552 does not improve AUC. Reverting changes.
Training on augumented user 79375 16/50 current_auc = 0.7043269230769231
User 79375 AUC after training: 0.7043269230769231
User 79375 does not improve AUC. Reverting changes.
Training on augumented user 52425 17/50 current_auc = 0.7043269230769231
User 52425 AUC after training: 0.704326923076923
User 52425 does not improve AUC. Reverting changes.
Training on augumented user 112700 18/50 current_auc = 0.7043269230769231
User 112700 AUC after training: 0.7019230769230769
User 112700 does not improve AUC. Reverting changes.
Training on augumented user 92528 19/50 current_auc = 0.7043269230769231
User 92528 AUC after training: 0.7043269230769231
User 92528 does not improve AUC. Reverting changes.
Training on augumented user 72848 20/50 current_auc = 0.7043269230769231
User 72848 AUC after training: 0.7055288461538461
User 72848 improves AUC. Keeping the model.
Training on augumented user 76793 21/50 current_auc = 0.7055288461538461
User 76793 AUC after training: 0.703125
User 76793 does not improve AUC. Reverting changes.
Training on augumented user 136062 22/50 current_auc = 0.7055288461538461
User 136062 AUC after training: 0.703125
User 136062 does not improve AUC. Reverting changes.
Training on augumented user 134094 23/50 current_auc = 0.7055288461538461
User 134094 AUC after training: 0.7055288461538461
User 134094 does not improve AUC. Reverting changes.
Training on augumented user 111892 24/50 current_auc = 0.7055288461538461
User 111892 AUC after training: 0.703125
User 111892 does not improve AUC. Reverting changes.
Training on augumented user 123414 25/50 current_auc = 0.7055288461538461
User 123414 AUC after training: 0.703125
User 123414 does not improve AUC. Reverting changes.
Training on augumented user 107026 26/50 current_auc = 0.7055288461538461
User 107026 AUC after training: 0.703125
User 107026 does not improve AUC. Reverting changes.
Training on augumented user 54051 27/50 current_auc = 0.7055288461538461
User 54051 AUC after training: 0.704326923076923
User 54051 does not improve AUC. Reverting changes.
Training on augumented user 96783 28/50 current_auc = 0.7055288461538461
User 96783 AUC after training: 0.703125
User 96783 does not improve AUC. Reverting changes.
Training on augumented user 32141 29/50 current_auc = 0.7055288461538461
User 32141 AUC after training: 0.7019230769230769
User 32141 does not improve AUC. Reverting changes.
Training on augumented user 87744 30/50 current_auc = 0.7055288461538461
User 87744 AUC after training: 0.703125
User 87744 does not improve AUC. Reverting changes.
Training on augumented user 9481 31/50 current_auc = 0.7055288461538461
User 9481 AUC after training: 0.7007211538461539
User 9481 does not improve AUC. Reverting changes.
Training on augumented user 73280 32/50 current_auc = 0.7055288461538461
User 73280 AUC after training: 0.7055288461538461
User 73280 does not improve AUC. Reverting changes.
Training on augumented user 68585 33/50 current_auc = 0.7055288461538461
User 68585 AUC after training: 0.703125
User 68585 does not improve AUC. Reverting changes.
Training on augumented user 128149 34/50 current_auc = 0.7055288461538461
User 128149 AUC after training: 0.7019230769230769
User 128149 does not improve AUC. Reverting changes.
Training on augumented user 129126 35/50 current_auc = 0.7055288461538461
User 129126 AUC after training: 0.7019230769230769
User 129126 does not improve AUC. Reverting changes.
Training on augumented user 84868 36/50 current_auc = 0.7055288461538461
User 84868 AUC after training: 0.703125
User 84868 does not improve AUC. Reverting changes.
Training on augumented user 2948 37/50 current_auc = 0.7055288461538461
User 2948 AUC after training: 0.7019230769230769
User 2948 does not improve AUC. Reverting changes.
Training on augumented user 45850 38/50 current_auc = 0.7055288461538461
User 45850 AUC after training: 0.704326923076923
User 45850 does not improve AUC. Reverting changes.
Training on augumented user 48086 39/50 current_auc = 0.7055288461538461
User 48086 AUC after training: 0.7043269230769231
User 48086 does not improve AUC. Reverting changes.
Training on augumented user 108888 40/50 current_auc = 0.7055288461538461
User 108888 AUC after training: 0.7043269230769231
User 108888 does not improve AUC. Reverting changes.
Training on augumented user 53329 41/50 current_auc = 0.7055288461538461
User 53329 AUC after training: 0.7019230769230769
User 53329 does not improve AUC. Reverting changes.
Training on augumented user 59622 42/50 current_auc = 0.7055288461538461
User 59622 AUC after training: 0.704326923076923
User 59622 does not improve AUC. Reverting changes.
Training on augumented user 137040 43/50 current_auc = 0.7055288461538461
User 137040 AUC after training: 0.7019230769230769
User 137040 does not improve AUC. Reverting changes.
Training on augumented user 121201 44/50 current_auc = 0.7055288461538461
User 121201 AUC after training: 0.703125
User 121201 does not improve AUC. Reverting changes.
Training on augumented user 30695 45/50 current_auc = 0.7055288461538461
User 30695 AUC after training: 0.703125
User 30695 does not improve AUC. Reverting changes.
Training on augumented user 38274 46/50 current_auc = 0.7055288461538461
User 38274 AUC after training: 0.703125
User 38274 does not improve AUC. Reverting changes.
Training on augumented user 128103 47/50 current_auc = 0.7055288461538461
User 128103 AUC after training: 0.703125
User 128103 does not improve AUC. Reverting changes.
Training on augumented user 40824 48/50 current_auc = 0.7055288461538461
User 40824 AUC after training: 0.7043269230769231
User 40824 does not improve AUC. Reverting changes.
Training on augumented user 66977 49/50 current_auc = 0.7055288461538461
User 66977 AUC after training: 0.7055288461538461
User 66977 does not improve AUC. Reverting changes.
[2024-12-02 19:12:04.697320] start test user 73355 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:05.804820] start test user 73355 173/568 recall augumented users by random, augumented_users = [118593, 83033, 120249, 110590, 65017, 52705, 9384, 75154, 96199, 87148, 55311, 32135, 127222, 96790, 68418, 60912, 133875, 99985, 125719, 135493, 136009, 82048, 13552, 125940, 38345, 118182, 80510, 115484, 95319, 74915, 80775, 79001, 8032, 14933, 102437, 81906, 127937, 6463, 136623, 64230, 87815, 36222, 42161, 116149, 99964, 41375, 20279, 101046, 84348, 5764]
[2024-12-02 19:12:05.833275] user = 73355 Cloud 173/568
[2024-12-02 19:12:05.875432] user = 73355 Local 173/568
[2024-12-02 19:12:06.026463] user = 73355 Local+ 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:08.034237] user = 73355 MPDA- 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5939253585107329
Training on augumented user 118593 0/50 current_auc = 0.5939253585107329
User 118593 AUC after training: 0.5935690745524183
User 118593 does not improve AUC. Reverting changes.
Training on augumented user 83033 1/50 current_auc = 0.5939253585107329
User 83033 AUC after training: 0.594548855437784
User 83033 improves AUC. Keeping the model.
Training on augumented user 120249 2/50 current_auc = 0.594548855437784
User 120249 AUC after training: 0.5942371069742585
User 120249 does not improve AUC. Reverting changes.
Training on augumented user 110590 3/50 current_auc = 0.594548855437784
User 110590 AUC after training: 0.5949942103856776
User 110590 improves AUC. Keeping the model.
Training on augumented user 65017 4/50 current_auc = 0.5949942103856776
User 65017 AUC after training: 0.595083281375256
User 65017 improves AUC. Keeping the model.
Training on augumented user 52705 5/50 current_auc = 0.595083281375256
User 52705 AUC after training: 0.5945488554377838
User 52705 does not improve AUC. Reverting changes.
Training on augumented user 9384 6/50 current_auc = 0.595083281375256
User 9384 AUC after training: 0.595350494343992
User 9384 improves AUC. Keeping the model.
Training on augumented user 75154 7/50 current_auc = 0.595350494343992
User 75154 AUC after training: 0.5953504943439922
User 75154 improves AUC. Keeping the model.
Training on augumented user 96199 8/50 current_auc = 0.5953504943439922
User 96199 AUC after training: 0.5936581455419969
User 96199 does not improve AUC. Reverting changes.
Training on augumented user 87148 9/50 current_auc = 0.5953504943439922
User 87148 AUC after training: 0.5943707134586266
User 87148 does not improve AUC. Reverting changes.
Training on augumented user 55311 10/50 current_auc = 0.5953504943439922
User 55311 AUC after training: 0.5947269974169413
User 55311 does not improve AUC. Reverting changes.
Training on augumented user 32135 11/50 current_auc = 0.5953504943439922
User 32135 AUC after training: 0.5931237196045247
User 32135 does not improve AUC. Reverting changes.
Training on augumented user 127222 12/50 current_auc = 0.5953504943439922
User 127222 AUC after training: 0.5949942103856773
User 127222 does not improve AUC. Reverting changes.
Training on augumented user 96790 13/50 current_auc = 0.5953504943439922
User 96790 AUC after training: 0.5955286363231496
User 96790 improves AUC. Keeping the model.
Training on augumented user 68418 14/50 current_auc = 0.5955286363231496
User 68418 AUC after training: 0.5963302752293578
User 68418 improves AUC. Keeping the model.
Training on augumented user 60912 15/50 current_auc = 0.5963302752293578
User 60912 AUC after training: 0.5966865591876724
User 60912 improves AUC. Keeping the model.
Training on augumented user 133875 16/50 current_auc = 0.5966865591876724
User 133875 AUC after training: 0.5961521332502004
User 133875 does not improve AUC. Reverting changes.
Training on augumented user 99985 17/50 current_auc = 0.5966865591876724
User 99985 AUC after training: 0.5944597844482054
User 99985 does not improve AUC. Reverting changes.
Training on augumented user 125719 18/50 current_auc = 0.5966865591876724
User 125719 AUC after training: 0.5956177073127282
User 125719 does not improve AUC. Reverting changes.
Training on augumented user 135493 19/50 current_auc = 0.5966865591876724
User 135493 AUC after training: 0.5964193462189364
User 135493 does not improve AUC. Reverting changes.
Training on augumented user 136009 20/50 current_auc = 0.5966865591876724
User 136009 AUC after training: 0.5964193462189364
User 136009 does not improve AUC. Reverting changes.
Training on augumented user 82048 21/50 current_auc = 0.5966865591876724
User 82048 AUC after training: 0.5950832813752561
User 82048 does not improve AUC. Reverting changes.
Training on augumented user 13552 22/50 current_auc = 0.5966865591876724
User 13552 AUC after training: 0.5962412042397791
User 13552 does not improve AUC. Reverting changes.
Training on augumented user 125940 23/50 current_auc = 0.5966865591876724
User 125940 AUC after training: 0.5950832813752561
User 125940 does not improve AUC. Reverting changes.
Training on augumented user 38345 24/50 current_auc = 0.5966865591876724
User 38345 AUC after training: 0.5962412042397791
User 38345 does not improve AUC. Reverting changes.
Training on augumented user 118182 25/50 current_auc = 0.5966865591876724
User 118182 AUC after training: 0.5953504943439922
User 118182 does not improve AUC. Reverting changes.
Training on augumented user 80510 26/50 current_auc = 0.5966865591876724
User 80510 AUC after training: 0.5962412042397791
User 80510 does not improve AUC. Reverting changes.
Training on augumented user 115484 27/50 current_auc = 0.5966865591876724
User 115484 AUC after training: 0.5957958492918856
User 115484 does not improve AUC. Reverting changes.
Training on augumented user 95319 28/50 current_auc = 0.5966865591876724
User 95319 AUC after training: 0.5963302752293578
User 95319 does not improve AUC. Reverting changes.
Training on augumented user 74915 29/50 current_auc = 0.5966865591876724
User 74915 AUC after training: 0.5955286363231496
User 74915 does not improve AUC. Reverting changes.
Training on augumented user 80775 30/50 current_auc = 0.5966865591876724
User 80775 AUC after training: 0.5960630622606218
User 80775 does not improve AUC. Reverting changes.
Training on augumented user 79001 31/50 current_auc = 0.5966865591876724
User 79001 AUC after training: 0.5957067783023069
User 79001 does not improve AUC. Reverting changes.
Training on augumented user 8032 32/50 current_auc = 0.5966865591876724
User 8032 AUC after training: 0.5928565066357887
User 8032 does not improve AUC. Reverting changes.
Training on augumented user 14933 33/50 current_auc = 0.5966865591876724
User 14933 AUC after training: 0.5962412042397791
User 14933 does not improve AUC. Reverting changes.
Training on augumented user 102437 34/50 current_auc = 0.5966865591876724
User 102437 AUC after training: 0.5961521332502004
User 102437 does not improve AUC. Reverting changes.
Training on augumented user 81906 35/50 current_auc = 0.5966865591876724
User 81906 AUC after training: 0.5964193462189364
User 81906 does not improve AUC. Reverting changes.
Training on augumented user 127937 36/50 current_auc = 0.5966865591876724
User 127937 AUC after training: 0.596597488198094
User 127937 does not improve AUC. Reverting changes.
Training on augumented user 6463 37/50 current_auc = 0.5966865591876724
User 6463 AUC after training: 0.5981116950209318
User 6463 improves AUC. Keeping the model.
Training on augumented user 136623 38/50 current_auc = 0.5981116950209318
User 136623 AUC after training: 0.5978444820521955
User 136623 does not improve AUC. Reverting changes.
Training on augumented user 64230 39/50 current_auc = 0.5981116950209318
User 64230 AUC after training: 0.5974881980938809
User 64230 does not improve AUC. Reverting changes.
Training on augumented user 87815 40/50 current_auc = 0.5981116950209318
User 87815 AUC after training: 0.5982453015052998
User 87815 improves AUC. Keeping the model.
Training on augumented user 36222 41/50 current_auc = 0.5982453015052998
User 36222 AUC after training: 0.5978444820521955
User 36222 does not improve AUC. Reverting changes.
Training on augumented user 42161 42/50 current_auc = 0.5982453015052998
User 42161 AUC after training: 0.5973100561147233
User 42161 does not improve AUC. Reverting changes.
Training on augumented user 116149 43/50 current_auc = 0.5982453015052998
User 116149 AUC after training: 0.599180546895876
User 116149 improves AUC. Keeping the model.
Training on augumented user 99964 44/50 current_auc = 0.599180546895876
User 99964 AUC after training: 0.5993586888750333
User 99964 improves AUC. Keeping the model.
Training on augumented user 41375 45/50 current_auc = 0.5993586888750333
User 41375 AUC after training: 0.5990914759062973
User 41375 does not improve AUC. Reverting changes.
Training on augumented user 20279 46/50 current_auc = 0.5993586888750333
User 20279 AUC after training: 0.5994477598646121
User 20279 improves AUC. Keeping the model.
Training on augumented user 101046 47/50 current_auc = 0.5994477598646121
User 101046 AUC after training: 0.5993586888750335
User 101046 does not improve AUC. Reverting changes.
Training on augumented user 84348 48/50 current_auc = 0.5994477598646121
User 84348 AUC after training: 0.5990024049167186
User 84348 does not improve AUC. Reverting changes.
Training on augumented user 5764 49/50 current_auc = 0.5994477598646121
User 5764 AUC after training: 0.5983343724948784
User 5764 does not improve AUC. Reverting changes.
[2024-12-02 19:12:39.293690] start test user 73425 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:39.899906] start test user 73425 174/568 recall augumented users by random, augumented_users = [117401, 53054, 76872, 75465, 61681, 104173, 113551, 38668, 121717, 136235, 45057, 80321, 34338, 43919, 13663, 93770, 71123, 118013, 26550, 82332, 65494, 133456, 67653, 4301, 74806, 131255, 235, 12462, 121671, 109802, 84900, 33300, 98670, 16207, 85262, 34285, 108620, 119538, 133898, 52149, 126991, 66959, 21097, 122942, 34567, 123608, 4180, 87877, 108351, 58820]
[2024-12-02 19:12:39.938584] user = 73425 Cloud 174/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:39.962490] user = 73425 Local 174/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:39.982274] user = 73425 Local+ 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:41.537734] user = 73425 MPDA- 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 117401 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117401 AUC after training: 0.5
User 117401 does not improve AUC. Reverting changes.
Training on augumented user 53054 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53054 AUC after training: 0.5
User 53054 does not improve AUC. Reverting changes.
Training on augumented user 76872 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76872 AUC after training: 0.5
User 76872 does not improve AUC. Reverting changes.
Training on augumented user 75465 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75465 AUC after training: 0.5
User 75465 does not improve AUC. Reverting changes.
Training on augumented user 61681 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61681 AUC after training: 0.5
User 61681 does not improve AUC. Reverting changes.
Training on augumented user 104173 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104173 AUC after training: 0.5
User 104173 does not improve AUC. Reverting changes.
Training on augumented user 113551 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113551 AUC after training: 0.5
User 113551 does not improve AUC. Reverting changes.
Training on augumented user 38668 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38668 AUC after training: 0.5
User 38668 does not improve AUC. Reverting changes.
Training on augumented user 121717 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121717 AUC after training: 0.5
User 121717 does not improve AUC. Reverting changes.
Training on augumented user 136235 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136235 AUC after training: 0.5
User 136235 does not improve AUC. Reverting changes.
Training on augumented user 45057 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45057 AUC after training: 0.5
User 45057 does not improve AUC. Reverting changes.
Training on augumented user 80321 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80321 AUC after training: 0.5
User 80321 does not improve AUC. Reverting changes.
Training on augumented user 34338 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34338 AUC after training: 0.5
User 34338 does not improve AUC. Reverting changes.
Training on augumented user 43919 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43919 AUC after training: 0.5
User 43919 does not improve AUC. Reverting changes.
Training on augumented user 13663 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13663 AUC after training: 0.5
User 13663 does not improve AUC. Reverting changes.
Training on augumented user 93770 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93770 AUC after training: 0.5
User 93770 does not improve AUC. Reverting changes.
Training on augumented user 71123 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71123 AUC after training: 0.5
User 71123 does not improve AUC. Reverting changes.
Training on augumented user 118013 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118013 AUC after training: 0.5
User 118013 does not improve AUC. Reverting changes.
Training on augumented user 26550 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26550 AUC after training: 0.5
User 26550 does not improve AUC. Reverting changes.
Training on augumented user 82332 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82332 AUC after training: 0.5
User 82332 does not improve AUC. Reverting changes.
Training on augumented user 65494 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65494 AUC after training: 0.5
User 65494 does not improve AUC. Reverting changes.
Training on augumented user 133456 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133456 AUC after training: 0.5
User 133456 does not improve AUC. Reverting changes.
Training on augumented user 67653 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67653 AUC after training: 0.5
User 67653 does not improve AUC. Reverting changes.
Training on augumented user 4301 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4301 AUC after training: 0.5
User 4301 does not improve AUC. Reverting changes.
Training on augumented user 74806 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74806 AUC after training: 0.5
User 74806 does not improve AUC. Reverting changes.
Training on augumented user 131255 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131255 AUC after training: 0.5
User 131255 does not improve AUC. Reverting changes.
Training on augumented user 235 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 235 AUC after training: 0.5
User 235 does not improve AUC. Reverting changes.
Training on augumented user 12462 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12462 AUC after training: 0.5
User 12462 does not improve AUC. Reverting changes.
Training on augumented user 121671 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121671 AUC after training: 0.5
User 121671 does not improve AUC. Reverting changes.
Training on augumented user 109802 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109802 AUC after training: 0.5
User 109802 does not improve AUC. Reverting changes.
Training on augumented user 84900 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84900 AUC after training: 0.5
User 84900 does not improve AUC. Reverting changes.
Training on augumented user 33300 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33300 AUC after training: 0.5
User 33300 does not improve AUC. Reverting changes.
Training on augumented user 98670 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98670 AUC after training: 0.5
User 98670 does not improve AUC. Reverting changes.
Training on augumented user 16207 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16207 AUC after training: 0.5
User 16207 does not improve AUC. Reverting changes.
Training on augumented user 85262 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85262 AUC after training: 0.5
User 85262 does not improve AUC. Reverting changes.
Training on augumented user 34285 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34285 AUC after training: 0.5
User 34285 does not improve AUC. Reverting changes.
Training on augumented user 108620 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108620 AUC after training: 0.5
User 108620 does not improve AUC. Reverting changes.
Training on augumented user 119538 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119538 AUC after training: 0.5
User 119538 does not improve AUC. Reverting changes.
Training on augumented user 133898 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133898 AUC after training: 0.5
User 133898 does not improve AUC. Reverting changes.
Training on augumented user 52149 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52149 AUC after training: 0.5
User 52149 does not improve AUC. Reverting changes.
Training on augumented user 126991 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126991 AUC after training: 0.5
User 126991 does not improve AUC. Reverting changes.
Training on augumented user 66959 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66959 AUC after training: 0.5
User 66959 does not improve AUC. Reverting changes.
Training on augumented user 21097 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21097 AUC after training: 0.5
User 21097 does not improve AUC. Reverting changes.
Training on augumented user 122942 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122942 AUC after training: 0.5
User 122942 does not improve AUC. Reverting changes.
Training on augumented user 34567 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34567 AUC after training: 0.5
User 34567 does not improve AUC. Reverting changes.
Training on augumented user 123608 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123608 AUC after training: 0.5
User 123608 does not improve AUC. Reverting changes.
Training on augumented user 4180 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4180 AUC after training: 0.5
User 4180 does not improve AUC. Reverting changes.
Training on augumented user 87877 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87877 AUC after training: 0.5
User 87877 does not improve AUC. Reverting changes.
Training on augumented user 108351 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108351 AUC after training: 0.5
User 108351 does not improve AUC. Reverting changes.
Training on augumented user 58820 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58820 AUC after training: 0.5
User 58820 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:13:05.806808] start test user 73445 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:06.228559] start test user 73445 175/568 recall augumented users by random, augumented_users = [38122, 41189, 34731, 83501, 94917, 29461, 38062, 69838, 109498, 124422, 52009, 132706, 64743, 79441, 106242, 25335, 114996, 129346, 31090, 92153, 94188, 82192, 110809, 81046, 23277, 56402, 85895, 121067, 40326, 94530, 12748, 117873, 136265, 42806, 51239, 96261, 111128, 104273, 137566, 127828, 91774, 98969, 128484, 36795, 53400, 85926, 9296, 109204, 71501, 12542]
[2024-12-02 19:13:06.244117] user = 73445 Cloud 175/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:13:06.257788] user = 73445 Local 175/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:13:06.331237] user = 73445 Local+ 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:13:08.906407] user = 73445 MPDA- 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 38122 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38122 AUC after training: 0.5
User 38122 does not improve AUC. Reverting changes.
Training on augumented user 41189 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41189 AUC after training: 0.5
User 41189 does not improve AUC. Reverting changes.
Training on augumented user 34731 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34731 AUC after training: 0.5
User 34731 does not improve AUC. Reverting changes.
Training on augumented user 83501 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83501 AUC after training: 0.5
User 83501 does not improve AUC. Reverting changes.
Training on augumented user 94917 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94917 AUC after training: 0.5
User 94917 does not improve AUC. Reverting changes.
Training on augumented user 29461 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29461 AUC after training: 0.5
User 29461 does not improve AUC. Reverting changes.
Training on augumented user 38062 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38062 AUC after training: 0.5
User 38062 does not improve AUC. Reverting changes.
Training on augumented user 69838 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69838 AUC after training: 0.5
User 69838 does not improve AUC. Reverting changes.
Training on augumented user 109498 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109498 AUC after training: 0.5
User 109498 does not improve AUC. Reverting changes.
Training on augumented user 124422 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124422 AUC after training: 0.5
User 124422 does not improve AUC. Reverting changes.
Training on augumented user 52009 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52009 AUC after training: 0.5
User 52009 does not improve AUC. Reverting changes.
Training on augumented user 132706 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132706 AUC after training: 0.5
User 132706 does not improve AUC. Reverting changes.
Training on augumented user 64743 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64743 AUC after training: 0.5
User 64743 does not improve AUC. Reverting changes.
Training on augumented user 79441 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79441 AUC after training: 0.5
User 79441 does not improve AUC. Reverting changes.
Training on augumented user 106242 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106242 AUC after training: 0.5
User 106242 does not improve AUC. Reverting changes.
Training on augumented user 25335 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25335 AUC after training: 0.5
User 25335 does not improve AUC. Reverting changes.
Training on augumented user 114996 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114996 AUC after training: 0.5
User 114996 does not improve AUC. Reverting changes.
Training on augumented user 129346 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129346 AUC after training: 0.5
User 129346 does not improve AUC. Reverting changes.
Training on augumented user 31090 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31090 AUC after training: 0.5
User 31090 does not improve AUC. Reverting changes.
Training on augumented user 92153 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92153 AUC after training: 0.5
User 92153 does not improve AUC. Reverting changes.
Training on augumented user 94188 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94188 AUC after training: 0.5
User 94188 does not improve AUC. Reverting changes.
Training on augumented user 82192 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82192 AUC after training: 0.5
User 82192 does not improve AUC. Reverting changes.
Training on augumented user 110809 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110809 AUC after training: 0.5
User 110809 does not improve AUC. Reverting changes.
Training on augumented user 81046 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81046 AUC after training: 0.5
User 81046 does not improve AUC. Reverting changes.
Training on augumented user 23277 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23277 AUC after training: 0.5
User 23277 does not improve AUC. Reverting changes.
Training on augumented user 56402 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56402 AUC after training: 0.5
User 56402 does not improve AUC. Reverting changes.
Training on augumented user 85895 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85895 AUC after training: 0.5
User 85895 does not improve AUC. Reverting changes.
Training on augumented user 121067 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121067 AUC after training: 0.5
User 121067 does not improve AUC. Reverting changes.
Training on augumented user 40326 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40326 AUC after training: 0.5
User 40326 does not improve AUC. Reverting changes.
Training on augumented user 94530 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94530 AUC after training: 0.5
User 94530 does not improve AUC. Reverting changes.
Training on augumented user 12748 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12748 AUC after training: 0.5
User 12748 does not improve AUC. Reverting changes.
Training on augumented user 117873 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117873 AUC after training: 0.5
User 117873 does not improve AUC. Reverting changes.
Training on augumented user 136265 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136265 AUC after training: 0.5
User 136265 does not improve AUC. Reverting changes.
Training on augumented user 42806 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42806 AUC after training: 0.5
User 42806 does not improve AUC. Reverting changes.
Training on augumented user 51239 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51239 AUC after training: 0.5
User 51239 does not improve AUC. Reverting changes.
Training on augumented user 96261 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96261 AUC after training: 0.5
User 96261 does not improve AUC. Reverting changes.
Training on augumented user 111128 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111128 AUC after training: 0.5
User 111128 does not improve AUC. Reverting changes.
Training on augumented user 104273 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104273 AUC after training: 0.5
User 104273 does not improve AUC. Reverting changes.
Training on augumented user 137566 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137566 AUC after training: 0.5
User 137566 does not improve AUC. Reverting changes.
Training on augumented user 127828 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127828 AUC after training: 0.5
User 127828 does not improve AUC. Reverting changes.
Training on augumented user 91774 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91774 AUC after training: 0.5
User 91774 does not improve AUC. Reverting changes.
Training on augumented user 98969 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98969 AUC after training: 0.5
User 98969 does not improve AUC. Reverting changes.
Training on augumented user 128484 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128484 AUC after training: 0.5
User 128484 does not improve AUC. Reverting changes.
Training on augumented user 36795 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36795 AUC after training: 0.5
User 36795 does not improve AUC. Reverting changes.
Training on augumented user 53400 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53400 AUC after training: 0.5
User 53400 does not improve AUC. Reverting changes.
Training on augumented user 85926 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85926 AUC after training: 0.5
User 85926 does not improve AUC. Reverting changes.
Training on augumented user 9296 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9296 AUC after training: 0.5
User 9296 does not improve AUC. Reverting changes.
Training on augumented user 109204 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109204 AUC after training: 0.5
User 109204 does not improve AUC. Reverting changes.
Training on augumented user 71501 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71501 AUC after training: 0.5
User 71501 does not improve AUC. Reverting changes.
Training on augumented user 12542 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12542 AUC after training: 0.5
User 12542 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:13:35.893534] start test user 73478 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:36.447435] start test user 73478 176/568 recall augumented users by random, augumented_users = [116964, 9824, 55826, 98485, 63792, 15286, 104095, 9508, 117844, 28019, 72372, 31991, 119264, 47200, 121800, 126317, 95813, 61040, 18881, 106769, 124630, 50244, 15996, 107899, 67604, 101942, 137764, 86487, 98158, 111311, 136243, 92445, 50090, 37239, 110934, 123515, 38567, 51273, 64215, 125081, 71581, 59424, 8945, 58125, 88940, 28478, 37189, 94464, 91365, 125016]
[2024-12-02 19:13:36.465003] user = 73478 Cloud 176/568
[2024-12-02 19:13:36.486118] user = 73478 Local 176/568
[2024-12-02 19:13:36.719578] user = 73478 Local+ 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:39.576307] user = 73478 MPDA- 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7003367003367004
Training on augumented user 116964 0/50 current_auc = 0.7003367003367004
User 116964 AUC after training: 0.6994949494949495
User 116964 does not improve AUC. Reverting changes.
Training on augumented user 9824 1/50 current_auc = 0.7003367003367004
User 9824 AUC after training: 0.6999158249158249
User 9824 does not improve AUC. Reverting changes.
Training on augumented user 55826 2/50 current_auc = 0.7003367003367004
User 55826 AUC after training: 0.6994949494949494
User 55826 does not improve AUC. Reverting changes.
Training on augumented user 98485 3/50 current_auc = 0.7003367003367004
User 98485 AUC after training: 0.7015993265993267
User 98485 improves AUC. Keeping the model.
Training on augumented user 63792 4/50 current_auc = 0.7015993265993267
User 63792 AUC after training: 0.7015993265993266
User 63792 does not improve AUC. Reverting changes.
Training on augumented user 15286 5/50 current_auc = 0.7015993265993267
User 15286 AUC after training: 0.7001262626262627
User 15286 does not improve AUC. Reverting changes.
Training on augumented user 104095 6/50 current_auc = 0.7015993265993267
User 104095 AUC after training: 0.7015993265993266
User 104095 does not improve AUC. Reverting changes.
Training on augumented user 9508 7/50 current_auc = 0.7015993265993267
User 9508 AUC after training: 0.7007575757575758
User 9508 does not improve AUC. Reverting changes.
Training on augumented user 117844 8/50 current_auc = 0.7015993265993267
User 117844 AUC after training: 0.7028619528619529
User 117844 improves AUC. Keeping the model.
Training on augumented user 28019 9/50 current_auc = 0.7028619528619529
User 28019 AUC after training: 0.703493265993266
User 28019 improves AUC. Keeping the model.
Training on augumented user 72372 10/50 current_auc = 0.703493265993266
User 72372 AUC after training: 0.703493265993266
User 72372 does not improve AUC. Reverting changes.
Training on augumented user 31991 11/50 current_auc = 0.703493265993266
User 31991 AUC after training: 0.7024410774410774
User 31991 does not improve AUC. Reverting changes.
Training on augumented user 119264 12/50 current_auc = 0.703493265993266
User 119264 AUC after training: 0.7007575757575758
User 119264 does not improve AUC. Reverting changes.
Training on augumented user 47200 13/50 current_auc = 0.703493265993266
User 47200 AUC after training: 0.7030723905723907
User 47200 does not improve AUC. Reverting changes.
Training on augumented user 121800 14/50 current_auc = 0.703493265993266
User 121800 AUC after training: 0.7030723905723905
User 121800 does not improve AUC. Reverting changes.
Training on augumented user 126317 15/50 current_auc = 0.703493265993266
User 126317 AUC after training: 0.7022306397306398
User 126317 does not improve AUC. Reverting changes.
Training on augumented user 95813 16/50 current_auc = 0.703493265993266
User 95813 AUC after training: 0.7026515151515152
User 95813 does not improve AUC. Reverting changes.
Training on augumented user 61040 17/50 current_auc = 0.703493265993266
User 61040 AUC after training: 0.7026515151515152
User 61040 does not improve AUC. Reverting changes.
Training on augumented user 18881 18/50 current_auc = 0.703493265993266
User 18881 AUC after training: 0.7022306397306397
User 18881 does not improve AUC. Reverting changes.
Training on augumented user 106769 19/50 current_auc = 0.703493265993266
User 106769 AUC after training: 0.7026515151515151
User 106769 does not improve AUC. Reverting changes.
Training on augumented user 124630 20/50 current_auc = 0.703493265993266
User 124630 AUC after training: 0.7030723905723906
User 124630 does not improve AUC. Reverting changes.
Training on augumented user 50244 21/50 current_auc = 0.703493265993266
User 50244 AUC after training: 0.7026515151515151
User 50244 does not improve AUC. Reverting changes.
Training on augumented user 15996 22/50 current_auc = 0.703493265993266
User 15996 AUC after training: 0.7034932659932659
User 15996 does not improve AUC. Reverting changes.
Training on augumented user 107899 23/50 current_auc = 0.703493265993266
User 107899 AUC after training: 0.7018097643097644
User 107899 does not improve AUC. Reverting changes.
Training on augumented user 67604 24/50 current_auc = 0.703493265993266
User 67604 AUC after training: 0.7055976430976431
User 67604 improves AUC. Keeping the model.
Training on augumented user 101942 25/50 current_auc = 0.7055976430976431
User 101942 AUC after training: 0.7064393939393939
User 101942 improves AUC. Keeping the model.
Training on augumented user 137764 26/50 current_auc = 0.7064393939393939
User 137764 AUC after training: 0.7123316498316498
User 137764 improves AUC. Keeping the model.
Training on augumented user 86487 27/50 current_auc = 0.7123316498316498
User 86487 AUC after training: 0.7106481481481483
User 86487 does not improve AUC. Reverting changes.
Training on augumented user 98158 28/50 current_auc = 0.7123316498316498
User 98158 AUC after training: 0.7106481481481481
User 98158 does not improve AUC. Reverting changes.
Training on augumented user 111311 29/50 current_auc = 0.7123316498316498
User 111311 AUC after training: 0.7102272727272727
User 111311 does not improve AUC. Reverting changes.
Training on augumented user 136243 30/50 current_auc = 0.7123316498316498
User 136243 AUC after training: 0.7127525252525252
User 136243 improves AUC. Keeping the model.
Training on augumented user 92445 31/50 current_auc = 0.7127525252525252
User 92445 AUC after training: 0.7127525252525252
User 92445 does not improve AUC. Reverting changes.
Training on augumented user 50090 32/50 current_auc = 0.7127525252525252
User 50090 AUC after training: 0.7108585858585859
User 50090 does not improve AUC. Reverting changes.
Training on augumented user 37239 33/50 current_auc = 0.7127525252525252
User 37239 AUC after training: 0.7110690235690235
User 37239 does not improve AUC. Reverting changes.
Training on augumented user 110934 34/50 current_auc = 0.7127525252525252
User 110934 AUC after training: 0.7119107744107743
User 110934 does not improve AUC. Reverting changes.
Training on augumented user 123515 35/50 current_auc = 0.7127525252525252
User 123515 AUC after training: 0.7106481481481481
User 123515 does not improve AUC. Reverting changes.
Training on augumented user 38567 36/50 current_auc = 0.7127525252525252
User 38567 AUC after training: 0.7135942760942761
User 38567 improves AUC. Keeping the model.
Training on augumented user 51273 37/50 current_auc = 0.7135942760942761
User 51273 AUC after training: 0.7131734006734006
User 51273 does not improve AUC. Reverting changes.
Training on augumented user 64215 38/50 current_auc = 0.7135942760942761
User 64215 AUC after training: 0.711489898989899
User 64215 does not improve AUC. Reverting changes.
Training on augumented user 125081 39/50 current_auc = 0.7135942760942761
User 125081 AUC after training: 0.711489898989899
User 125081 does not improve AUC. Reverting changes.
Training on augumented user 71581 40/50 current_auc = 0.7135942760942761
User 71581 AUC after training: 0.7140151515151515
User 71581 improves AUC. Keeping the model.
Training on augumented user 59424 41/50 current_auc = 0.7140151515151515
User 59424 AUC after training: 0.7119107744107744
User 59424 does not improve AUC. Reverting changes.
Training on augumented user 8945 42/50 current_auc = 0.7140151515151515
User 8945 AUC after training: 0.7135942760942762
User 8945 does not improve AUC. Reverting changes.
Training on augumented user 58125 43/50 current_auc = 0.7140151515151515
User 58125 AUC after training: 0.7119107744107743
User 58125 does not improve AUC. Reverting changes.
Training on augumented user 88940 44/50 current_auc = 0.7140151515151515
User 88940 AUC after training: 0.7144360269360269
User 88940 improves AUC. Keeping the model.
Training on augumented user 28478 45/50 current_auc = 0.7144360269360269
User 28478 AUC after training: 0.7127525252525252
User 28478 does not improve AUC. Reverting changes.
Training on augumented user 37189 46/50 current_auc = 0.7144360269360269
User 37189 AUC after training: 0.7127525252525252
User 37189 does not improve AUC. Reverting changes.
Training on augumented user 94464 47/50 current_auc = 0.7144360269360269
User 94464 AUC after training: 0.7072811447811448
User 94464 does not improve AUC. Reverting changes.
Training on augumented user 91365 48/50 current_auc = 0.7144360269360269
User 91365 AUC after training: 0.7135942760942761
User 91365 does not improve AUC. Reverting changes.
Training on augumented user 125016 49/50 current_auc = 0.7144360269360269
User 125016 AUC after training: 0.7135942760942761
User 125016 does not improve AUC. Reverting changes.
[2024-12-02 19:14:05.619004] start test user 73489 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:06.067760] start test user 73489 177/568 recall augumented users by random, augumented_users = [81363, 27613, 58708, 128207, 47377, 23640, 34983, 97863, 134667, 4656, 6232, 77029, 66808, 14917, 61183, 112669, 90539, 120509, 61957, 14908, 89918, 10768, 48592, 133786, 117350, 133715, 104141, 89710, 123230, 18663, 7135, 50517, 6045, 163, 18141, 38586, 129593, 98291, 126804, 93326, 20189, 72540, 131225, 133727, 104028, 113757, 119311, 72608, 19793, 1295]
[2024-12-02 19:14:06.083989] user = 73489 Cloud 177/568
[2024-12-02 19:14:06.093798] user = 73489 Local 177/568
[2024-12-02 19:14:06.147970] user = 73489 Local+ 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:09.031542] user = 73489 MPDA- 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8472222222222222
Training on augumented user 81363 0/50 current_auc = 0.8472222222222222
User 81363 AUC after training: 0.8472222222222222
User 81363 does not improve AUC. Reverting changes.
Training on augumented user 27613 1/50 current_auc = 0.8472222222222222
User 27613 AUC after training: 0.8472222222222222
User 27613 does not improve AUC. Reverting changes.
Training on augumented user 58708 2/50 current_auc = 0.8472222222222222
User 58708 AUC after training: 0.8194444444444444
User 58708 does not improve AUC. Reverting changes.
Training on augumented user 128207 3/50 current_auc = 0.8472222222222222
User 128207 AUC after training: 0.8472222222222222
User 128207 does not improve AUC. Reverting changes.
Training on augumented user 47377 4/50 current_auc = 0.8472222222222222
User 47377 AUC after training: 0.8472222222222222
User 47377 does not improve AUC. Reverting changes.
Training on augumented user 23640 5/50 current_auc = 0.8472222222222222
User 23640 AUC after training: 0.8472222222222222
User 23640 does not improve AUC. Reverting changes.
Training on augumented user 34983 6/50 current_auc = 0.8472222222222222
User 34983 AUC after training: 0.8472222222222222
User 34983 does not improve AUC. Reverting changes.
Training on augumented user 97863 7/50 current_auc = 0.8472222222222222
User 97863 AUC after training: 0.8472222222222222
User 97863 does not improve AUC. Reverting changes.
Training on augumented user 134667 8/50 current_auc = 0.8472222222222222
User 134667 AUC after training: 0.8333333333333333
User 134667 does not improve AUC. Reverting changes.
Training on augumented user 4656 9/50 current_auc = 0.8472222222222222
User 4656 AUC after training: 0.8333333333333333
User 4656 does not improve AUC. Reverting changes.
Training on augumented user 6232 10/50 current_auc = 0.8472222222222222
User 6232 AUC after training: 0.8055555555555556
User 6232 does not improve AUC. Reverting changes.
Training on augumented user 77029 11/50 current_auc = 0.8472222222222222
User 77029 AUC after training: 0.8194444444444444
User 77029 does not improve AUC. Reverting changes.
Training on augumented user 66808 12/50 current_auc = 0.8472222222222222
User 66808 AUC after training: 0.8333333333333333
User 66808 does not improve AUC. Reverting changes.
Training on augumented user 14917 13/50 current_auc = 0.8472222222222222
User 14917 AUC after training: 0.8333333333333333
User 14917 does not improve AUC. Reverting changes.
Training on augumented user 61183 14/50 current_auc = 0.8472222222222222
User 61183 AUC after training: 0.8472222222222222
User 61183 does not improve AUC. Reverting changes.
Training on augumented user 112669 15/50 current_auc = 0.8472222222222222
User 112669 AUC after training: 0.8472222222222222
User 112669 does not improve AUC. Reverting changes.
Training on augumented user 90539 16/50 current_auc = 0.8472222222222222
User 90539 AUC after training: 0.8472222222222222
User 90539 does not improve AUC. Reverting changes.
Training on augumented user 120509 17/50 current_auc = 0.8472222222222222
User 120509 AUC after training: 0.8333333333333333
User 120509 does not improve AUC. Reverting changes.
Training on augumented user 61957 18/50 current_auc = 0.8472222222222222
User 61957 AUC after training: 0.8333333333333333
User 61957 does not improve AUC. Reverting changes.
Training on augumented user 14908 19/50 current_auc = 0.8472222222222222
User 14908 AUC after training: 0.7916666666666666
User 14908 does not improve AUC. Reverting changes.
Training on augumented user 89918 20/50 current_auc = 0.8472222222222222
User 89918 AUC after training: 0.8333333333333333
User 89918 does not improve AUC. Reverting changes.
Training on augumented user 10768 21/50 current_auc = 0.8472222222222222
User 10768 AUC after training: 0.8333333333333333
User 10768 does not improve AUC. Reverting changes.
Training on augumented user 48592 22/50 current_auc = 0.8472222222222222
User 48592 AUC after training: 0.8333333333333333
User 48592 does not improve AUC. Reverting changes.
Training on augumented user 133786 23/50 current_auc = 0.8472222222222222
User 133786 AUC after training: 0.8472222222222222
User 133786 does not improve AUC. Reverting changes.
Training on augumented user 117350 24/50 current_auc = 0.8472222222222222
User 117350 AUC after training: 0.8333333333333333
User 117350 does not improve AUC. Reverting changes.
Training on augumented user 133715 25/50 current_auc = 0.8472222222222222
User 133715 AUC after training: 0.8472222222222222
User 133715 does not improve AUC. Reverting changes.
Training on augumented user 104141 26/50 current_auc = 0.8472222222222222
User 104141 AUC after training: 0.8055555555555556
User 104141 does not improve AUC. Reverting changes.
Training on augumented user 89710 27/50 current_auc = 0.8472222222222222
User 89710 AUC after training: 0.8472222222222222
User 89710 does not improve AUC. Reverting changes.
Training on augumented user 123230 28/50 current_auc = 0.8472222222222222
User 123230 AUC after training: 0.8333333333333333
User 123230 does not improve AUC. Reverting changes.
Training on augumented user 18663 29/50 current_auc = 0.8472222222222222
User 18663 AUC after training: 0.8333333333333333
User 18663 does not improve AUC. Reverting changes.
Training on augumented user 7135 30/50 current_auc = 0.8472222222222222
User 7135 AUC after training: 0.8472222222222222
User 7135 does not improve AUC. Reverting changes.
Training on augumented user 50517 31/50 current_auc = 0.8472222222222222
User 50517 AUC after training: 0.8472222222222222
User 50517 does not improve AUC. Reverting changes.
Training on augumented user 6045 32/50 current_auc = 0.8472222222222222
User 6045 AUC after training: 0.8472222222222222
User 6045 does not improve AUC. Reverting changes.
Training on augumented user 163 33/50 current_auc = 0.8472222222222222
User 163 AUC after training: 0.8333333333333333
User 163 does not improve AUC. Reverting changes.
Training on augumented user 18141 34/50 current_auc = 0.8472222222222222
User 18141 AUC after training: 0.8333333333333333
User 18141 does not improve AUC. Reverting changes.
Training on augumented user 38586 35/50 current_auc = 0.8472222222222222
User 38586 AUC after training: 0.8472222222222222
User 38586 does not improve AUC. Reverting changes.
Training on augumented user 129593 36/50 current_auc = 0.8472222222222222
User 129593 AUC after training: 0.8472222222222222
User 129593 does not improve AUC. Reverting changes.
Training on augumented user 98291 37/50 current_auc = 0.8472222222222222
User 98291 AUC after training: 0.8333333333333333
User 98291 does not improve AUC. Reverting changes.
Training on augumented user 126804 38/50 current_auc = 0.8472222222222222
User 126804 AUC after training: 0.8472222222222222
User 126804 does not improve AUC. Reverting changes.
Training on augumented user 93326 39/50 current_auc = 0.8472222222222222
User 93326 AUC after training: 0.8472222222222222
User 93326 does not improve AUC. Reverting changes.
Training on augumented user 20189 40/50 current_auc = 0.8472222222222222
User 20189 AUC after training: 0.8472222222222222
User 20189 does not improve AUC. Reverting changes.
Training on augumented user 72540 41/50 current_auc = 0.8472222222222222
User 72540 AUC after training: 0.8472222222222222
User 72540 does not improve AUC. Reverting changes.
Training on augumented user 131225 42/50 current_auc = 0.8472222222222222
User 131225 AUC after training: 0.8333333333333333
User 131225 does not improve AUC. Reverting changes.
Training on augumented user 133727 43/50 current_auc = 0.8472222222222222
User 133727 AUC after training: 0.8472222222222222
User 133727 does not improve AUC. Reverting changes.
Training on augumented user 104028 44/50 current_auc = 0.8472222222222222
User 104028 AUC after training: 0.8333333333333333
User 104028 does not improve AUC. Reverting changes.
Training on augumented user 113757 45/50 current_auc = 0.8472222222222222
User 113757 AUC after training: 0.8194444444444444
User 113757 does not improve AUC. Reverting changes.
Training on augumented user 119311 46/50 current_auc = 0.8472222222222222
User 119311 AUC after training: 0.8472222222222222
User 119311 does not improve AUC. Reverting changes.
Training on augumented user 72608 47/50 current_auc = 0.8472222222222222
User 72608 AUC after training: 0.8055555555555556
User 72608 does not improve AUC. Reverting changes.
Training on augumented user 19793 48/50 current_auc = 0.8472222222222222
User 19793 AUC after training: 0.8472222222222222
User 19793 does not improve AUC. Reverting changes.
Training on augumented user 1295 49/50 current_auc = 0.8472222222222222
User 1295 AUC after training: 0.8472222222222222
User 1295 does not improve AUC. Reverting changes.
[2024-12-02 19:14:40.179607] start test user 73542 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:40.614910] start test user 73542 178/568 recall augumented users by random, augumented_users = [114622, 102833, 58907, 40388, 50725, 43038, 98110, 101776, 99559, 96442, 86421, 100158, 60219, 117488, 134732, 88050, 114465, 47795, 78653, 38153, 80420, 9179, 134228, 107824, 37156, 24659, 105163, 51664, 43954, 7238, 128623, 6331, 22492, 53803, 13559, 50177, 42281, 23649, 130079, 75002, 97167, 108765, 71777, 104237, 80396, 118141, 130885, 28630, 96654, 113146]
[2024-12-02 19:14:40.630756] user = 73542 Cloud 178/568
[2024-12-02 19:14:40.672400] user = 73542 Local 178/568
[2024-12-02 19:14:40.754663] user = 73542 Local+ 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:42.337353] user = 73542 MPDA- 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6124024024024024
Training on augumented user 114622 0/50 current_auc = 0.6124024024024024
User 114622 AUC after training: 0.6125525525525526
User 114622 improves AUC. Keeping the model.
Training on augumented user 102833 1/50 current_auc = 0.6125525525525526
User 102833 AUC after training: 0.6133333333333333
User 102833 improves AUC. Keeping the model.
Training on augumented user 58907 2/50 current_auc = 0.6133333333333333
User 58907 AUC after training: 0.6139039039039039
User 58907 improves AUC. Keeping the model.
Training on augumented user 40388 3/50 current_auc = 0.6139039039039039
User 40388 AUC after training: 0.6132732732732733
User 40388 does not improve AUC. Reverting changes.
Training on augumented user 50725 4/50 current_auc = 0.6139039039039039
User 50725 AUC after training: 0.613963963963964
User 50725 improves AUC. Keeping the model.
Training on augumented user 43038 5/50 current_auc = 0.613963963963964
User 43038 AUC after training: 0.6136036036036037
User 43038 does not improve AUC. Reverting changes.
Training on augumented user 98110 6/50 current_auc = 0.613963963963964
User 98110 AUC after training: 0.6137537537537539
User 98110 does not improve AUC. Reverting changes.
Training on augumented user 101776 7/50 current_auc = 0.613963963963964
User 101776 AUC after training: 0.6133633633633634
User 101776 does not improve AUC. Reverting changes.
Training on augumented user 99559 8/50 current_auc = 0.613963963963964
User 99559 AUC after training: 0.6134834834834835
User 99559 does not improve AUC. Reverting changes.
Training on augumented user 96442 9/50 current_auc = 0.613963963963964
User 96442 AUC after training: 0.6128228228228229
User 96442 does not improve AUC. Reverting changes.
Training on augumented user 86421 10/50 current_auc = 0.613963963963964
User 86421 AUC after training: 0.6138138138138138
User 86421 does not improve AUC. Reverting changes.
Training on augumented user 100158 11/50 current_auc = 0.613963963963964
User 100158 AUC after training: 0.6143243243243244
User 100158 improves AUC. Keeping the model.
Training on augumented user 60219 12/50 current_auc = 0.6143243243243244
User 60219 AUC after training: 0.6145345345345345
User 60219 improves AUC. Keeping the model.
Training on augumented user 117488 13/50 current_auc = 0.6145345345345345
User 117488 AUC after training: 0.6145645645645647
User 117488 improves AUC. Keeping the model.
Training on augumented user 134732 14/50 current_auc = 0.6145645645645647
User 134732 AUC after training: 0.6148048048048048
User 134732 improves AUC. Keeping the model.
Training on augumented user 88050 15/50 current_auc = 0.6148048048048048
User 88050 AUC after training: 0.6144144144144144
User 88050 does not improve AUC. Reverting changes.
Training on augumented user 114465 16/50 current_auc = 0.6148048048048048
User 114465 AUC after training: 0.6138438438438438
User 114465 does not improve AUC. Reverting changes.
Training on augumented user 47795 17/50 current_auc = 0.6148048048048048
User 47795 AUC after training: 0.614954954954955
User 47795 improves AUC. Keeping the model.
Training on augumented user 78653 18/50 current_auc = 0.614954954954955
User 78653 AUC after training: 0.6136636636636636
User 78653 does not improve AUC. Reverting changes.
Training on augumented user 38153 19/50 current_auc = 0.614954954954955
User 38153 AUC after training: 0.6154804804804805
User 38153 improves AUC. Keeping the model.
Training on augumented user 80420 20/50 current_auc = 0.6154804804804805
User 80420 AUC after training: 0.6149549549549549
User 80420 does not improve AUC. Reverting changes.
Training on augumented user 9179 21/50 current_auc = 0.6154804804804805
User 9179 AUC after training: 0.6153453453453452
User 9179 does not improve AUC. Reverting changes.
Training on augumented user 134228 22/50 current_auc = 0.6154804804804805
User 134228 AUC after training: 0.6141441441441442
User 134228 does not improve AUC. Reverting changes.
Training on augumented user 107824 23/50 current_auc = 0.6154804804804805
User 107824 AUC after training: 0.6141441441441442
User 107824 does not improve AUC. Reverting changes.
Training on augumented user 37156 24/50 current_auc = 0.6154804804804805
User 37156 AUC after training: 0.6133033033033033
User 37156 does not improve AUC. Reverting changes.
Training on augumented user 24659 25/50 current_auc = 0.6154804804804805
User 24659 AUC after training: 0.6146546546546546
User 24659 does not improve AUC. Reverting changes.
Training on augumented user 105163 26/50 current_auc = 0.6154804804804805
User 105163 AUC after training: 0.6145045045045046
User 105163 does not improve AUC. Reverting changes.
Training on augumented user 51664 27/50 current_auc = 0.6154804804804805
User 51664 AUC after training: 0.6151951951951953
User 51664 does not improve AUC. Reverting changes.
Training on augumented user 43954 28/50 current_auc = 0.6154804804804805
User 43954 AUC after training: 0.6147447447447447
User 43954 does not improve AUC. Reverting changes.
Training on augumented user 7238 29/50 current_auc = 0.6154804804804805
User 7238 AUC after training: 0.6150750750750751
User 7238 does not improve AUC. Reverting changes.
Training on augumented user 128623 30/50 current_auc = 0.6154804804804805
User 128623 AUC after training: 0.6151051051051051
User 128623 does not improve AUC. Reverting changes.
Training on augumented user 6331 31/50 current_auc = 0.6154804804804805
User 6331 AUC after training: 0.6151051051051051
User 6331 does not improve AUC. Reverting changes.
Training on augumented user 22492 32/50 current_auc = 0.6154804804804805
User 22492 AUC after training: 0.6154954954954954
User 22492 improves AUC. Keeping the model.
Training on augumented user 53803 33/50 current_auc = 0.6154954954954954
User 53803 AUC after training: 0.614954954954955
User 53803 does not improve AUC. Reverting changes.
Training on augumented user 13559 34/50 current_auc = 0.6154954954954954
User 13559 AUC after training: 0.6115015015015015
User 13559 does not improve AUC. Reverting changes.
Training on augumented user 50177 35/50 current_auc = 0.6154954954954954
User 50177 AUC after training: 0.6147147147147147
User 50177 does not improve AUC. Reverting changes.
Training on augumented user 42281 36/50 current_auc = 0.6154954954954954
User 42281 AUC after training: 0.6145345345345345
User 42281 does not improve AUC. Reverting changes.
Training on augumented user 23649 37/50 current_auc = 0.6154954954954954
User 23649 AUC after training: 0.6148348348348349
User 23649 does not improve AUC. Reverting changes.
Training on augumented user 130079 38/50 current_auc = 0.6154954954954954
User 130079 AUC after training: 0.6145945945945946
User 130079 does not improve AUC. Reverting changes.
Training on augumented user 75002 39/50 current_auc = 0.6154954954954954
User 75002 AUC after training: 0.6144144144144144
User 75002 does not improve AUC. Reverting changes.
Training on augumented user 97167 40/50 current_auc = 0.6154954954954954
User 97167 AUC after training: 0.6151951951951953
User 97167 does not improve AUC. Reverting changes.
Training on augumented user 108765 41/50 current_auc = 0.6154954954954954
User 108765 AUC after training: 0.614054054054054
User 108765 does not improve AUC. Reverting changes.
Training on augumented user 71777 42/50 current_auc = 0.6154954954954954
User 71777 AUC after training: 0.6151951951951953
User 71777 does not improve AUC. Reverting changes.
Training on augumented user 104237 43/50 current_auc = 0.6154954954954954
User 104237 AUC after training: 0.6149249249249249
User 104237 does not improve AUC. Reverting changes.
Training on augumented user 80396 44/50 current_auc = 0.6154954954954954
User 80396 AUC after training: 0.6154954954954954
User 80396 does not improve AUC. Reverting changes.
Training on augumented user 118141 45/50 current_auc = 0.6154954954954954
User 118141 AUC after training: 0.6155855855855856
User 118141 improves AUC. Keeping the model.
Training on augumented user 130885 46/50 current_auc = 0.6155855855855856
User 130885 AUC after training: 0.6154954954954954
User 130885 does not improve AUC. Reverting changes.
Training on augumented user 28630 47/50 current_auc = 0.6155855855855856
User 28630 AUC after training: 0.614954954954955
User 28630 does not improve AUC. Reverting changes.
Training on augumented user 96654 48/50 current_auc = 0.6155855855855856
User 96654 AUC after training: 0.6153453453453452
User 96654 does not improve AUC. Reverting changes.
Training on augumented user 113146 49/50 current_auc = 0.6155855855855856
User 113146 AUC after training: 0.6152552552552553
User 113146 does not improve AUC. Reverting changes.
[2024-12-02 19:15:15.842707] start test user 73550 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:16.453842] start test user 73550 179/568 recall augumented users by random, augumented_users = [103978, 105905, 43561, 3531, 55494, 68844, 45159, 42542, 2453, 109738, 138310, 12632, 100707, 33941, 20760, 6608, 26634, 22646, 70889, 84838, 115381, 7815, 16621, 78817, 69847, 14225, 53548, 98858, 66253, 98042, 59466, 108342, 32284, 130174, 790, 84625, 21374, 91791, 99169, 124333, 66935, 120971, 137141, 113241, 133736, 70669, 36325, 8729, 69461, 116270]
[2024-12-02 19:15:16.509777] user = 73550 Cloud 179/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:16.522240] user = 73550 Local 179/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:16.580745] user = 73550 Local+ 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:18.597571] user = 73550 MPDA- 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 103978 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103978 AUC after training: 0.5
User 103978 does not improve AUC. Reverting changes.
Training on augumented user 105905 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105905 AUC after training: 0.5
User 105905 does not improve AUC. Reverting changes.
Training on augumented user 43561 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43561 AUC after training: 0.5
User 43561 does not improve AUC. Reverting changes.
Training on augumented user 3531 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3531 AUC after training: 0.5
User 3531 does not improve AUC. Reverting changes.
Training on augumented user 55494 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55494 AUC after training: 0.5
User 55494 does not improve AUC. Reverting changes.
Training on augumented user 68844 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68844 AUC after training: 0.5
User 68844 does not improve AUC. Reverting changes.
Training on augumented user 45159 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45159 AUC after training: 0.5
User 45159 does not improve AUC. Reverting changes.
Training on augumented user 42542 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42542 AUC after training: 0.5
User 42542 does not improve AUC. Reverting changes.
Training on augumented user 2453 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2453 AUC after training: 0.5
User 2453 does not improve AUC. Reverting changes.
Training on augumented user 109738 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109738 AUC after training: 0.5
User 109738 does not improve AUC. Reverting changes.
Training on augumented user 138310 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138310 AUC after training: 0.5
User 138310 does not improve AUC. Reverting changes.
Training on augumented user 12632 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12632 AUC after training: 0.5
User 12632 does not improve AUC. Reverting changes.
Training on augumented user 100707 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100707 AUC after training: 0.5
User 100707 does not improve AUC. Reverting changes.
Training on augumented user 33941 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33941 AUC after training: 0.5
User 33941 does not improve AUC. Reverting changes.
Training on augumented user 20760 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20760 AUC after training: 0.5
User 20760 does not improve AUC. Reverting changes.
Training on augumented user 6608 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6608 AUC after training: 0.5
User 6608 does not improve AUC. Reverting changes.
Training on augumented user 26634 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26634 AUC after training: 0.5
User 26634 does not improve AUC. Reverting changes.
Training on augumented user 22646 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22646 AUC after training: 0.5
User 22646 does not improve AUC. Reverting changes.
Training on augumented user 70889 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70889 AUC after training: 0.5
User 70889 does not improve AUC. Reverting changes.
Training on augumented user 84838 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84838 AUC after training: 0.5
User 84838 does not improve AUC. Reverting changes.
Training on augumented user 115381 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115381 AUC after training: 0.5
User 115381 does not improve AUC. Reverting changes.
Training on augumented user 7815 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7815 AUC after training: 0.5
User 7815 does not improve AUC. Reverting changes.
Training on augumented user 16621 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16621 AUC after training: 0.5
User 16621 does not improve AUC. Reverting changes.
Training on augumented user 78817 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78817 AUC after training: 0.5
User 78817 does not improve AUC. Reverting changes.
Training on augumented user 69847 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69847 AUC after training: 0.5
User 69847 does not improve AUC. Reverting changes.
Training on augumented user 14225 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14225 AUC after training: 0.5
User 14225 does not improve AUC. Reverting changes.
Training on augumented user 53548 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53548 AUC after training: 0.5
User 53548 does not improve AUC. Reverting changes.
Training on augumented user 98858 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98858 AUC after training: 0.5
User 98858 does not improve AUC. Reverting changes.
Training on augumented user 66253 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66253 AUC after training: 0.5
User 66253 does not improve AUC. Reverting changes.
Training on augumented user 98042 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98042 AUC after training: 0.5
User 98042 does not improve AUC. Reverting changes.
Training on augumented user 59466 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59466 AUC after training: 0.5
User 59466 does not improve AUC. Reverting changes.
Training on augumented user 108342 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108342 AUC after training: 0.5
User 108342 does not improve AUC. Reverting changes.
Training on augumented user 32284 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32284 AUC after training: 0.5
User 32284 does not improve AUC. Reverting changes.
Training on augumented user 130174 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130174 AUC after training: 0.5
User 130174 does not improve AUC. Reverting changes.
Training on augumented user 790 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 790 AUC after training: 0.5
User 790 does not improve AUC. Reverting changes.
Training on augumented user 84625 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84625 AUC after training: 0.5
User 84625 does not improve AUC. Reverting changes.
Training on augumented user 21374 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21374 AUC after training: 0.5
User 21374 does not improve AUC. Reverting changes.
Training on augumented user 91791 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91791 AUC after training: 0.5
User 91791 does not improve AUC. Reverting changes.
Training on augumented user 99169 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99169 AUC after training: 0.5
User 99169 does not improve AUC. Reverting changes.
Training on augumented user 124333 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124333 AUC after training: 0.5
User 124333 does not improve AUC. Reverting changes.
Training on augumented user 66935 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66935 AUC after training: 0.5
User 66935 does not improve AUC. Reverting changes.
Training on augumented user 120971 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120971 AUC after training: 0.5
User 120971 does not improve AUC. Reverting changes.
Training on augumented user 137141 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137141 AUC after training: 0.5
User 137141 does not improve AUC. Reverting changes.
Training on augumented user 113241 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113241 AUC after training: 0.5
User 113241 does not improve AUC. Reverting changes.
Training on augumented user 133736 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133736 AUC after training: 0.5
User 133736 does not improve AUC. Reverting changes.
Training on augumented user 70669 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70669 AUC after training: 0.5
User 70669 does not improve AUC. Reverting changes.
Training on augumented user 36325 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36325 AUC after training: 0.5
User 36325 does not improve AUC. Reverting changes.
Training on augumented user 8729 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8729 AUC after training: 0.5
User 8729 does not improve AUC. Reverting changes.
Training on augumented user 69461 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69461 AUC after training: 0.5
User 69461 does not improve AUC. Reverting changes.
Training on augumented user 116270 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116270 AUC after training: 0.5
User 116270 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:47.881108] start test user 73565 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:48.864231] start test user 73565 180/568 recall augumented users by random, augumented_users = [54774, 78522, 64112, 116032, 42494, 116936, 54267, 29810, 112240, 41140, 44290, 101829, 121433, 7851, 22094, 108472, 100012, 1701, 73399, 138190, 21617, 111793, 83498, 121785, 32502, 123030, 113955, 5734, 33313, 60077, 137989, 53610, 13342, 72199, 61754, 91102, 86255, 81105, 35648, 123109, 33942, 87244, 6731, 38998, 135213, 14724, 111719, 90095, 81777, 23337]
[2024-12-02 19:15:48.894884] user = 73565 Cloud 180/568
[2024-12-02 19:15:48.930815] user = 73565 Local 180/568
[2024-12-02 19:15:49.040708] user = 73565 Local+ 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:50.955899] user = 73565 MPDA- 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6824543054933015
Training on augumented user 54774 0/50 current_auc = 0.6824543054933015
User 54774 AUC after training: 0.6825539120474127
User 54774 improves AUC. Keeping the model.
Training on augumented user 78522 1/50 current_auc = 0.6825539120474127
User 78522 AUC after training: 0.6827033218785796
User 78522 improves AUC. Keeping the model.
Training on augumented user 64112 2/50 current_auc = 0.6827033218785796
User 64112 AUC after training: 0.6823546989391902
User 64112 does not improve AUC. Reverting changes.
Training on augumented user 116032 3/50 current_auc = 0.6827033218785796
User 116032 AUC after training: 0.6827033218785796
User 116032 does not improve AUC. Reverting changes.
Training on augumented user 42494 4/50 current_auc = 0.6827033218785796
User 42494 AUC after training: 0.6826037153244685
User 42494 does not improve AUC. Reverting changes.
Training on augumented user 116936 5/50 current_auc = 0.6827033218785796
User 116936 AUC after training: 0.6821554858309677
User 116936 does not improve AUC. Reverting changes.
Training on augumented user 54267 6/50 current_auc = 0.6827033218785796
User 54267 AUC after training: 0.6819562727227452
User 54267 does not improve AUC. Reverting changes.
Training on augumented user 29810 7/50 current_auc = 0.6827033218785796
User 29810 AUC after training: 0.6830021415409134
User 29810 improves AUC. Keeping the model.
Training on augumented user 112240 8/50 current_auc = 0.6830021415409134
User 112240 AUC after training: 0.6828029284326909
User 112240 does not improve AUC. Reverting changes.
Training on augumented user 41140 9/50 current_auc = 0.6830021415409134
User 41140 AUC after training: 0.6812092235669108
User 41140 does not improve AUC. Reverting changes.
Training on augumented user 44290 10/50 current_auc = 0.6830021415409134
User 44290 AUC after training: 0.6833507644803029
User 44290 improves AUC. Keeping the model.
Training on augumented user 101829 11/50 current_auc = 0.6833507644803029
User 101829 AUC after training: 0.6839982070820261
User 101829 improves AUC. Keeping the model.
Training on augumented user 121433 12/50 current_auc = 0.6839982070820261
User 121433 AUC after training: 0.6840978136361373
User 121433 improves AUC. Keeping the model.
Training on augumented user 7851 13/50 current_auc = 0.6840978136361373
User 7851 AUC after training: 0.6833009612032472
User 7851 does not improve AUC. Reverting changes.
Training on augumented user 22094 14/50 current_auc = 0.6840978136361373
User 22094 AUC after training: 0.6856417152248618
User 22094 improves AUC. Keeping the model.
Training on augumented user 108472 15/50 current_auc = 0.6856417152248618
User 108472 AUC after training: 0.6858907316101399
User 108472 improves AUC. Keeping the model.
Training on augumented user 100012 16/50 current_auc = 0.6858907316101399
User 100012 AUC after training: 0.68589073161014
User 100012 improves AUC. Keeping the model.
Training on augumented user 1701 17/50 current_auc = 0.68589073161014
User 1701 AUC after training: 0.6857413217789731
User 1701 does not improve AUC. Reverting changes.
Training on augumented user 73399 18/50 current_auc = 0.68589073161014
User 73399 AUC after training: 0.6861397479954181
User 73399 improves AUC. Keeping the model.
Training on augumented user 138190 19/50 current_auc = 0.6861397479954181
User 138190 AUC after training: 0.6859405348871956
User 138190 does not improve AUC. Reverting changes.
Training on augumented user 21617 20/50 current_auc = 0.6861397479954181
User 21617 AUC after training: 0.6857413217789731
User 21617 does not improve AUC. Reverting changes.
Training on augumented user 111793 21/50 current_auc = 0.6861397479954181
User 111793 AUC after training: 0.685492305393695
User 111793 does not improve AUC. Reverting changes.
Training on augumented user 83498 22/50 current_auc = 0.6861397479954181
User 83498 AUC after training: 0.6857413217789731
User 83498 does not improve AUC. Reverting changes.
Training on augumented user 121785 23/50 current_auc = 0.6861397479954181
User 121785 AUC after training: 0.6858409283330843
User 121785 does not improve AUC. Reverting changes.
Training on augumented user 32502 24/50 current_auc = 0.6861397479954181
User 32502 AUC after training: 0.6862393545495294
User 32502 improves AUC. Keeping the model.
Training on augumented user 123030 25/50 current_auc = 0.6862393545495294
User 123030 AUC after training: 0.6877334528611984
User 123030 improves AUC. Keeping the model.
Training on augumented user 113955 26/50 current_auc = 0.6877334528611984
User 113955 AUC after training: 0.6872354200906421
User 113955 does not improve AUC. Reverting changes.
Training on augumented user 5734 27/50 current_auc = 0.6877334528611984
User 5734 AUC after training: 0.6878330594153096
User 5734 improves AUC. Keeping the model.
Training on augumented user 33313 28/50 current_auc = 0.6878330594153096
User 33313 AUC after training: 0.6871856168135864
User 33313 does not improve AUC. Reverting changes.
Training on augumented user 60077 29/50 current_auc = 0.6878330594153096
User 60077 AUC after training: 0.6869864037053639
User 60077 does not improve AUC. Reverting changes.
Training on augumented user 137989 30/50 current_auc = 0.6878330594153096
User 137989 AUC after training: 0.6882314856317546
User 137989 improves AUC. Keeping the model.
Training on augumented user 53610 31/50 current_auc = 0.6882314856317546
User 53610 AUC after training: 0.6881318790776434
User 53610 does not improve AUC. Reverting changes.
Training on augumented user 13342 32/50 current_auc = 0.6882314856317546
User 13342 AUC after training: 0.6878828626923652
User 13342 does not improve AUC. Reverting changes.
Training on augumented user 72199 33/50 current_auc = 0.6882314856317546
User 72199 AUC after training: 0.687633846307087
User 72199 does not improve AUC. Reverting changes.
Training on augumented user 61754 34/50 current_auc = 0.6882314856317546
User 61754 AUC after training: 0.6885303052940884
User 61754 improves AUC. Keeping the model.
Training on augumented user 91102 35/50 current_auc = 0.6885303052940884
User 91102 AUC after training: 0.6892275511728673
User 91102 improves AUC. Keeping the model.
Training on augumented user 86255 36/50 current_auc = 0.6892275511728673
User 86255 AUC after training: 0.6892275511728672
User 86255 does not improve AUC. Reverting changes.
Training on augumented user 81105 37/50 current_auc = 0.6892275511728673
User 81105 AUC after training: 0.688580108571144
User 81105 does not improve AUC. Reverting changes.
Training on augumented user 35648 38/50 current_auc = 0.6892275511728673
User 35648 AUC after training: 0.6887793216793665
User 35648 does not improve AUC. Reverting changes.
Training on augumented user 123109 39/50 current_auc = 0.6892275511728673
User 123109 AUC after training: 0.6886299118481997
User 123109 does not improve AUC. Reverting changes.
Training on augumented user 33942 40/50 current_auc = 0.6892275511728673
User 33942 AUC after training: 0.6890283380646448
User 33942 does not improve AUC. Reverting changes.
Training on augumented user 87244 41/50 current_auc = 0.6892275511728673
User 87244 AUC after training: 0.6887793216793665
User 87244 does not improve AUC. Reverting changes.
Training on augumented user 6731 42/50 current_auc = 0.6892275511728673
User 6731 AUC after training: 0.687783256138254
User 6731 does not improve AUC. Reverting changes.
Training on augumented user 38998 43/50 current_auc = 0.6892275511728673
User 38998 AUC after training: 0.6886797151252553
User 38998 does not improve AUC. Reverting changes.
Training on augumented user 135213 44/50 current_auc = 0.6892275511728673
User 135213 AUC after training: 0.688580108571144
User 135213 does not improve AUC. Reverting changes.
Training on augumented user 14724 45/50 current_auc = 0.6892275511728673
User 14724 AUC after training: 0.6890283380646447
User 14724 does not improve AUC. Reverting changes.
Training on augumented user 111719 46/50 current_auc = 0.6892275511728673
User 111719 AUC after training: 0.6892773544499229
User 111719 improves AUC. Keeping the model.
Training on augumented user 90095 47/50 current_auc = 0.6892773544499229
User 90095 AUC after training: 0.6886299118481997
User 90095 does not improve AUC. Reverting changes.
Training on augumented user 81777 48/50 current_auc = 0.6892773544499229
User 81777 AUC after training: 0.6887295184023109
User 81777 does not improve AUC. Reverting changes.
Training on augumented user 23337 49/50 current_auc = 0.6892773544499229
User 23337 AUC after training: 0.6886299118481995
User 23337 does not improve AUC. Reverting changes.
[2024-12-02 19:16:23.539211] start test user 73577 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:24.385408] start test user 73577 181/568 recall augumented users by random, augumented_users = [18499, 54673, 26137, 88261, 115121, 34605, 97098, 125071, 7519, 116743, 85893, 97373, 80839, 132413, 21237, 47047, 103627, 46216, 102572, 94614, 112879, 126462, 64833, 12529, 26735, 76789, 129452, 112473, 104981, 17862, 61994, 35403, 83618, 5336, 27913, 41539, 4973, 133607, 19418, 34438, 106460, 54971, 87160, 128933, 90687, 132537, 117827, 135602, 106126, 131663]
[2024-12-02 19:16:24.401227] user = 73577 Cloud 181/568
[2024-12-02 19:16:24.415626] user = 73577 Local 181/568
[2024-12-02 19:16:24.487614] user = 73577 Local+ 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:26.044243] user = 73577 MPDA- 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6949602122015915
Training on augumented user 18499 0/50 current_auc = 0.6949602122015915
User 18499 AUC after training: 0.6956233421750664
User 18499 improves AUC. Keeping the model.
Training on augumented user 54673 1/50 current_auc = 0.6956233421750664
User 54673 AUC after training: 0.6956233421750664
User 54673 does not improve AUC. Reverting changes.
Training on augumented user 26137 2/50 current_auc = 0.6956233421750664
User 26137 AUC after training: 0.6956233421750664
User 26137 does not improve AUC. Reverting changes.
Training on augumented user 88261 3/50 current_auc = 0.6956233421750664
User 88261 AUC after training: 0.6956233421750664
User 88261 does not improve AUC. Reverting changes.
Training on augumented user 115121 4/50 current_auc = 0.6956233421750664
User 115121 AUC after training: 0.6949602122015917
User 115121 does not improve AUC. Reverting changes.
Training on augumented user 34605 5/50 current_auc = 0.6956233421750664
User 34605 AUC after training: 0.6949602122015915
User 34605 does not improve AUC. Reverting changes.
Training on augumented user 97098 6/50 current_auc = 0.6956233421750664
User 97098 AUC after training: 0.6949602122015915
User 97098 does not improve AUC. Reverting changes.
Training on augumented user 125071 7/50 current_auc = 0.6956233421750664
User 125071 AUC after training: 0.6949602122015915
User 125071 does not improve AUC. Reverting changes.
Training on augumented user 7519 8/50 current_auc = 0.6956233421750664
User 7519 AUC after training: 0.6942970822281167
User 7519 does not improve AUC. Reverting changes.
Training on augumented user 116743 9/50 current_auc = 0.6956233421750664
User 116743 AUC after training: 0.6942970822281168
User 116743 does not improve AUC. Reverting changes.
Training on augumented user 85893 10/50 current_auc = 0.6956233421750664
User 85893 AUC after training: 0.6976127320954907
User 85893 improves AUC. Keeping the model.
Training on augumented user 97373 11/50 current_auc = 0.6976127320954907
User 97373 AUC after training: 0.6962864721485411
User 97373 does not improve AUC. Reverting changes.
Training on augumented user 80839 12/50 current_auc = 0.6976127320954907
User 80839 AUC after training: 0.6962864721485411
User 80839 does not improve AUC. Reverting changes.
Training on augumented user 132413 13/50 current_auc = 0.6976127320954907
User 132413 AUC after training: 0.6969496021220158
User 132413 does not improve AUC. Reverting changes.
Training on augumented user 21237 14/50 current_auc = 0.6976127320954907
User 21237 AUC after training: 0.6982758620689655
User 21237 improves AUC. Keeping the model.
Training on augumented user 47047 15/50 current_auc = 0.6982758620689655
User 47047 AUC after training: 0.6969496021220158
User 47047 does not improve AUC. Reverting changes.
Training on augumented user 103627 16/50 current_auc = 0.6982758620689655
User 103627 AUC after training: 0.6969496021220158
User 103627 does not improve AUC. Reverting changes.
Training on augumented user 46216 17/50 current_auc = 0.6982758620689655
User 46216 AUC after training: 0.6976127320954907
User 46216 does not improve AUC. Reverting changes.
Training on augumented user 102572 18/50 current_auc = 0.6982758620689655
User 102572 AUC after training: 0.6976127320954907
User 102572 does not improve AUC. Reverting changes.
Training on augumented user 94614 19/50 current_auc = 0.6982758620689655
User 94614 AUC after training: 0.6976127320954907
User 94614 does not improve AUC. Reverting changes.
Training on augumented user 112879 20/50 current_auc = 0.6982758620689655
User 112879 AUC after training: 0.6976127320954907
User 112879 does not improve AUC. Reverting changes.
Training on augumented user 126462 21/50 current_auc = 0.6982758620689655
User 126462 AUC after training: 0.6976127320954907
User 126462 does not improve AUC. Reverting changes.
Training on augumented user 64833 22/50 current_auc = 0.6982758620689655
User 64833 AUC after training: 0.6996021220159151
User 64833 improves AUC. Keeping the model.
Training on augumented user 12529 23/50 current_auc = 0.6996021220159151
User 12529 AUC after training: 0.6976127320954907
User 12529 does not improve AUC. Reverting changes.
Training on augumented user 26735 24/50 current_auc = 0.6996021220159151
User 26735 AUC after training: 0.6982758620689654
User 26735 does not improve AUC. Reverting changes.
Training on augumented user 76789 25/50 current_auc = 0.6996021220159151
User 76789 AUC after training: 0.696949602122016
User 76789 does not improve AUC. Reverting changes.
Training on augumented user 129452 26/50 current_auc = 0.6996021220159151
User 129452 AUC after training: 0.6962864721485411
User 129452 does not improve AUC. Reverting changes.
Training on augumented user 112473 27/50 current_auc = 0.6996021220159151
User 112473 AUC after training: 0.6982758620689655
User 112473 does not improve AUC. Reverting changes.
Training on augumented user 104981 28/50 current_auc = 0.6996021220159151
User 104981 AUC after training: 0.6956233421750663
User 104981 does not improve AUC. Reverting changes.
Training on augumented user 17862 29/50 current_auc = 0.6996021220159151
User 17862 AUC after training: 0.6982758620689655
User 17862 does not improve AUC. Reverting changes.
Training on augumented user 61994 30/50 current_auc = 0.6996021220159151
User 61994 AUC after training: 0.6996021220159151
User 61994 does not improve AUC. Reverting changes.
Training on augumented user 35403 31/50 current_auc = 0.6996021220159151
User 35403 AUC after training: 0.6982758620689655
User 35403 does not improve AUC. Reverting changes.
Training on augumented user 83618 32/50 current_auc = 0.6996021220159151
User 83618 AUC after training: 0.6976127320954907
User 83618 does not improve AUC. Reverting changes.
Training on augumented user 5336 33/50 current_auc = 0.6996021220159151
User 5336 AUC after training: 0.6976127320954907
User 5336 does not improve AUC. Reverting changes.
Training on augumented user 27913 34/50 current_auc = 0.6996021220159151
User 27913 AUC after training: 0.6929708222811671
User 27913 does not improve AUC. Reverting changes.
Training on augumented user 41539 35/50 current_auc = 0.6996021220159151
User 41539 AUC after training: 0.6989389920424404
User 41539 does not improve AUC. Reverting changes.
Training on augumented user 4973 36/50 current_auc = 0.6996021220159151
User 4973 AUC after training: 0.6996021220159151
User 4973 does not improve AUC. Reverting changes.
Training on augumented user 133607 37/50 current_auc = 0.6996021220159151
User 133607 AUC after training: 0.6962864721485411
User 133607 does not improve AUC. Reverting changes.
Training on augumented user 19418 38/50 current_auc = 0.6996021220159151
User 19418 AUC after training: 0.6976127320954907
User 19418 does not improve AUC. Reverting changes.
Training on augumented user 34438 39/50 current_auc = 0.6996021220159151
User 34438 AUC after training: 0.6982758620689654
User 34438 does not improve AUC. Reverting changes.
Training on augumented user 106460 40/50 current_auc = 0.6996021220159151
User 106460 AUC after training: 0.6982758620689655
User 106460 does not improve AUC. Reverting changes.
Training on augumented user 54971 41/50 current_auc = 0.6996021220159151
User 54971 AUC after training: 0.6982758620689655
User 54971 does not improve AUC. Reverting changes.
Training on augumented user 87160 42/50 current_auc = 0.6996021220159151
User 87160 AUC after training: 0.6976127320954907
User 87160 does not improve AUC. Reverting changes.
Training on augumented user 128933 43/50 current_auc = 0.6996021220159151
User 128933 AUC after training: 0.6982758620689655
User 128933 does not improve AUC. Reverting changes.
Training on augumented user 90687 44/50 current_auc = 0.6996021220159151
User 90687 AUC after training: 0.6982758620689655
User 90687 does not improve AUC. Reverting changes.
Training on augumented user 132537 45/50 current_auc = 0.6996021220159151
User 132537 AUC after training: 0.6976127320954907
User 132537 does not improve AUC. Reverting changes.
Training on augumented user 117827 46/50 current_auc = 0.6996021220159151
User 117827 AUC after training: 0.6989389920424403
User 117827 does not improve AUC. Reverting changes.
Training on augumented user 135602 47/50 current_auc = 0.6996021220159151
User 135602 AUC after training: 0.6989389920424403
User 135602 does not improve AUC. Reverting changes.
Training on augumented user 106126 48/50 current_auc = 0.6996021220159151
User 106126 AUC after training: 0.6982758620689655
User 106126 does not improve AUC. Reverting changes.
Training on augumented user 131663 49/50 current_auc = 0.6996021220159151
User 131663 AUC after training: 0.6982758620689655
User 131663 does not improve AUC. Reverting changes.
[2024-12-02 19:16:58.197857] start test user 73589 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:58.728294] start test user 73589 182/568 recall augumented users by random, augumented_users = [79569, 1888, 90983, 65533, 16801, 122683, 48011, 21470, 81919, 87666, 106070, 45283, 72773, 89159, 134420, 65528, 123060, 25193, 6734, 132119, 126412, 58360, 108514, 71690, 97442, 126425, 3089, 124641, 44942, 103807, 131480, 60250, 16184, 74650, 104016, 57634, 64990, 81903, 113828, 79025, 75689, 41053, 52914, 11912, 83754, 129066, 109206, 133473, 115498, 40073]
[2024-12-02 19:16:58.743438] user = 73589 Cloud 182/568
[2024-12-02 19:16:58.769024] user = 73589 Local 182/568
[2024-12-02 19:16:58.882525] user = 73589 Local+ 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:00.757129] user = 73589 MPDA- 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6938241614500608
Training on augumented user 79569 0/50 current_auc = 0.6938241614500608
User 79569 AUC after training: 0.6934504344576287
User 79569 does not improve AUC. Reverting changes.
Training on augumented user 1888 1/50 current_auc = 0.6938241614500608
User 1888 AUC after training: 0.6935438662057367
User 1888 does not improve AUC. Reverting changes.
Training on augumented user 90983 2/50 current_auc = 0.6938241614500608
User 90983 AUC after training: 0.6940577408203307
User 90983 improves AUC. Keeping the model.
Training on augumented user 65533 3/50 current_auc = 0.6940577408203307
User 65533 AUC after training: 0.6934971503316827
User 65533 does not improve AUC. Reverting changes.
Training on augumented user 16801 4/50 current_auc = 0.6940577408203307
User 16801 AUC after training: 0.6939643090722227
User 16801 does not improve AUC. Reverting changes.
Training on augumented user 122683 5/50 current_auc = 0.6940577408203307
User 122683 AUC after training: 0.6943380360646547
User 122683 improves AUC. Keeping the model.
Training on augumented user 48011 6/50 current_auc = 0.6943380360646547
User 48011 AUC after training: 0.6943847519387087
User 48011 improves AUC. Keeping the model.
Training on augumented user 21470 7/50 current_auc = 0.6943847519387087
User 21470 AUC after training: 0.6942446043165468
User 21470 does not improve AUC. Reverting changes.
Training on augumented user 81919 8/50 current_auc = 0.6943847519387087
User 81919 AUC after training: 0.6944314678127628
User 81919 improves AUC. Keeping the model.
Training on augumented user 87666 9/50 current_auc = 0.6944314678127628
User 87666 AUC after training: 0.6942913201906007
User 87666 does not improve AUC. Reverting changes.
Training on augumented user 106070 10/50 current_auc = 0.6944314678127628
User 106070 AUC after training: 0.6944314678127628
User 106070 does not improve AUC. Reverting changes.
Training on augumented user 45283 11/50 current_auc = 0.6944314678127628
User 45283 AUC after training: 0.6940110249462768
User 45283 does not improve AUC. Reverting changes.
Training on augumented user 72773 12/50 current_auc = 0.6944314678127628
User 72773 AUC after training: 0.6946650471830327
User 72773 improves AUC. Keeping the model.
Training on augumented user 89159 13/50 current_auc = 0.6946650471830327
User 89159 AUC after training: 0.6945716154349247
User 89159 does not improve AUC. Reverting changes.
Training on augumented user 134420 14/50 current_auc = 0.6946650471830327
User 134420 AUC after training: 0.6944781836868167
User 134420 does not improve AUC. Reverting changes.
Training on augumented user 65528 15/50 current_auc = 0.6946650471830327
User 65528 AUC after training: 0.6941978884424926
User 65528 does not improve AUC. Reverting changes.
Training on augumented user 123060 16/50 current_auc = 0.6946650471830327
User 123060 AUC after training: 0.6945248995608707
User 123060 does not improve AUC. Reverting changes.
Training on augumented user 25193 17/50 current_auc = 0.6946650471830327
User 25193 AUC after training: 0.6948986265533028
User 25193 improves AUC. Keeping the model.
Training on augumented user 6734 18/50 current_auc = 0.6948986265533028
User 6734 AUC after training: 0.6947584789311407
User 6734 does not improve AUC. Reverting changes.
Training on augumented user 132119 19/50 current_auc = 0.6948986265533028
User 132119 AUC after training: 0.6950387741754647
User 132119 improves AUC. Keeping the model.
Training on augumented user 126412 20/50 current_auc = 0.6950387741754647
User 126412 AUC after training: 0.6950854900495188
User 126412 improves AUC. Keeping the model.
Training on augumented user 58360 21/50 current_auc = 0.6950854900495188
User 58360 AUC after training: 0.6943847519387087
User 58360 does not improve AUC. Reverting changes.
Training on augumented user 108514 22/50 current_auc = 0.6950854900495188
User 108514 AUC after training: 0.6946183313089788
User 108514 does not improve AUC. Reverting changes.
Training on augumented user 71690 23/50 current_auc = 0.6950854900495188
User 71690 AUC after training: 0.6954592170419509
User 71690 improves AUC. Keeping the model.
Training on augumented user 97442 24/50 current_auc = 0.6954592170419509
User 97442 AUC after training: 0.6954592170419509
User 97442 does not improve AUC. Reverting changes.
Training on augumented user 126425 25/50 current_auc = 0.6954592170419509
User 126425 AUC after training: 0.6956460805381668
User 126425 improves AUC. Keeping the model.
Training on augumented user 3089 26/50 current_auc = 0.6956460805381668
User 3089 AUC after training: 0.6957395122862748
User 3089 improves AUC. Keeping the model.
Training on augumented user 124641 27/50 current_auc = 0.6957395122862748
User 124641 AUC after training: 0.6960198075305989
User 124641 improves AUC. Keeping the model.
Training on augumented user 44942 28/50 current_auc = 0.6960198075305989
User 44942 AUC after training: 0.6957862281603289
User 44942 does not improve AUC. Reverting changes.
Training on augumented user 103807 29/50 current_auc = 0.6960198075305989
User 103807 AUC after training: 0.6956927964122208
User 103807 does not improve AUC. Reverting changes.
Training on augumented user 131480 30/50 current_auc = 0.6960198075305989
User 131480 AUC after training: 0.6955993646641129
User 131480 does not improve AUC. Reverting changes.
Training on augumented user 60250 31/50 current_auc = 0.6960198075305989
User 60250 AUC after training: 0.695926375782491
User 60250 does not improve AUC. Reverting changes.
Training on augumented user 16184 32/50 current_auc = 0.6960198075305989
User 16184 AUC after training: 0.6959263757824908
User 16184 does not improve AUC. Reverting changes.
Training on augumented user 74650 33/50 current_auc = 0.6960198075305989
User 74650 AUC after training: 0.6962533869008689
User 74650 improves AUC. Keeping the model.
Training on augumented user 104016 34/50 current_auc = 0.6962533869008689
User 104016 AUC after training: 0.6958329440343829
User 104016 does not improve AUC. Reverting changes.
Training on augumented user 57634 35/50 current_auc = 0.6962533869008689
User 57634 AUC after training: 0.6959730916565449
User 57634 does not improve AUC. Reverting changes.
Training on augumented user 64990 36/50 current_auc = 0.6962533869008689
User 64990 AUC after training: 0.6957862281603289
User 64990 does not improve AUC. Reverting changes.
Training on augumented user 81903 37/50 current_auc = 0.6962533869008689
User 81903 AUC after training: 0.6958796599084368
User 81903 does not improve AUC. Reverting changes.
Training on augumented user 113828 38/50 current_auc = 0.6962533869008689
User 113828 AUC after training: 0.6954592170419509
User 113828 does not improve AUC. Reverting changes.
Training on augumented user 79025 39/50 current_auc = 0.6962533869008689
User 79025 AUC after training: 0.6962533869008689
User 79025 does not improve AUC. Reverting changes.
Training on augumented user 75689 40/50 current_auc = 0.6962533869008689
User 75689 AUC after training: 0.6959730916565449
User 75689 does not improve AUC. Reverting changes.
Training on augumented user 41053 41/50 current_auc = 0.6962533869008689
User 41053 AUC after training: 0.696440250397085
User 41053 improves AUC. Keeping the model.
Training on augumented user 52914 42/50 current_auc = 0.696440250397085
User 52914 AUC after training: 0.6955059329160047
User 52914 does not improve AUC. Reverting changes.
Training on augumented user 11912 43/50 current_auc = 0.696440250397085
User 11912 AUC after training: 0.696159955152761
User 11912 does not improve AUC. Reverting changes.
Training on augumented user 83754 44/50 current_auc = 0.696440250397085
User 83754 AUC after training: 0.6960665234046529
User 83754 does not improve AUC. Reverting changes.
Training on augumented user 129066 45/50 current_auc = 0.696440250397085
User 129066 AUC after training: 0.696346818648977
User 129066 does not improve AUC. Reverting changes.
Training on augumented user 109206 46/50 current_auc = 0.696440250397085
User 109206 AUC after training: 0.6963468186489769
User 109206 does not improve AUC. Reverting changes.
Training on augumented user 133473 47/50 current_auc = 0.696440250397085
User 133473 AUC after training: 0.6953190694197888
User 133473 does not improve AUC. Reverting changes.
Training on augumented user 115498 48/50 current_auc = 0.696440250397085
User 115498 AUC after training: 0.6960198075305989
User 115498 does not improve AUC. Reverting changes.
Training on augumented user 40073 49/50 current_auc = 0.696440250397085
User 40073 AUC after training: 0.695926375782491
User 40073 does not improve AUC. Reverting changes.
[2024-12-02 19:17:28.572807] start test user 73607 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:29.183460] start test user 73607 183/568 recall augumented users by random, augumented_users = [11693, 43759, 802, 61984, 67004, 134498, 116904, 112501, 58879, 44133, 34815, 122864, 60010, 31084, 28617, 110721, 2306, 3007, 136689, 46180, 92470, 28984, 73895, 40029, 70683, 82117, 39188, 34686, 39826, 91155, 119483, 11957, 15285, 75670, 133939, 88910, 105474, 63901, 20220, 128196, 85316, 88106, 111564, 15347, 61627, 13224, 8209, 71387, 6096, 15817]
[2024-12-02 19:17:29.206275] user = 73607 Cloud 183/568
[2024-12-02 19:17:29.242062] user = 73607 Local 183/568
[2024-12-02 19:17:29.423777] user = 73607 Local+ 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:31.957489] user = 73607 MPDA- 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6867189770415577
Training on augumented user 11693 0/50 current_auc = 0.6867189770415577
User 11693 AUC after training: 0.6867189770415577
User 11693 does not improve AUC. Reverting changes.
Training on augumented user 43759 1/50 current_auc = 0.6867189770415577
User 43759 AUC after training: 0.6862830572507992
User 43759 does not improve AUC. Reverting changes.
Training on augumented user 802 2/50 current_auc = 0.6867189770415577
User 802 AUC after training: 0.6870095902353966
User 802 improves AUC. Keeping the model.
Training on augumented user 61984 3/50 current_auc = 0.6870095902353966
User 61984 AUC after training: 0.6871548968323162
User 61984 improves AUC. Keeping the model.
Training on augumented user 67004 4/50 current_auc = 0.6871548968323162
User 67004 AUC after training: 0.6867189770415577
User 67004 does not improve AUC. Reverting changes.
Training on augumented user 134498 5/50 current_auc = 0.6871548968323162
User 134498 AUC after training: 0.6868642836384772
User 134498 does not improve AUC. Reverting changes.
Training on augumented user 116904 6/50 current_auc = 0.6871548968323162
User 116904 AUC after training: 0.6858471374600408
User 116904 does not improve AUC. Reverting changes.
Training on augumented user 112501 7/50 current_auc = 0.6871548968323162
User 112501 AUC after training: 0.6870095902353968
User 112501 does not improve AUC. Reverting changes.
Training on augumented user 58879 8/50 current_auc = 0.6871548968323162
User 58879 AUC after training: 0.6871548968323162
User 58879 does not improve AUC. Reverting changes.
Training on augumented user 44133 9/50 current_auc = 0.6871548968323162
User 44133 AUC after training: 0.6874455100261553
User 44133 improves AUC. Keeping the model.
Training on augumented user 34815 10/50 current_auc = 0.6874455100261553
User 34815 AUC after training: 0.6865736704446382
User 34815 does not improve AUC. Reverting changes.
Training on augumented user 122864 11/50 current_auc = 0.6874455100261553
User 122864 AUC after training: 0.6868642836384772
User 122864 does not improve AUC. Reverting changes.
Training on augumented user 60010 12/50 current_auc = 0.6874455100261553
User 60010 AUC after training: 0.6868642836384772
User 60010 does not improve AUC. Reverting changes.
Training on augumented user 31084 13/50 current_auc = 0.6874455100261553
User 31084 AUC after training: 0.6868642836384772
User 31084 does not improve AUC. Reverting changes.
Training on augumented user 28617 14/50 current_auc = 0.6874455100261553
User 28617 AUC after training: 0.6874455100261553
User 28617 does not improve AUC. Reverting changes.
Training on augumented user 110721 15/50 current_auc = 0.6874455100261553
User 110721 AUC after training: 0.6865736704446382
User 110721 does not improve AUC. Reverting changes.
Training on augumented user 2306 16/50 current_auc = 0.6874455100261553
User 2306 AUC after training: 0.6875908166230748
User 2306 improves AUC. Keeping the model.
Training on augumented user 3007 17/50 current_auc = 0.6875908166230748
User 3007 AUC after training: 0.6877361232199942
User 3007 improves AUC. Keeping the model.
Training on augumented user 136689 18/50 current_auc = 0.6877361232199942
User 136689 AUC after training: 0.6871548968323162
User 136689 does not improve AUC. Reverting changes.
Training on augumented user 46180 19/50 current_auc = 0.6877361232199942
User 46180 AUC after training: 0.6877361232199942
User 46180 does not improve AUC. Reverting changes.
Training on augumented user 92470 20/50 current_auc = 0.6877361232199942
User 92470 AUC after training: 0.6862830572507992
User 92470 does not improve AUC. Reverting changes.
Training on augumented user 28984 21/50 current_auc = 0.6877361232199942
User 28984 AUC after training: 0.6880267364138332
User 28984 improves AUC. Keeping the model.
Training on augumented user 73895 22/50 current_auc = 0.6880267364138332
User 73895 AUC after training: 0.6883173496076722
User 73895 improves AUC. Keeping the model.
Training on augumented user 40029 23/50 current_auc = 0.6883173496076722
User 40029 AUC after training: 0.6877361232199942
User 40029 does not improve AUC. Reverting changes.
Training on augumented user 70683 24/50 current_auc = 0.6883173496076722
User 70683 AUC after training: 0.6874455100261552
User 70683 does not improve AUC. Reverting changes.
Training on augumented user 82117 25/50 current_auc = 0.6883173496076722
User 82117 AUC after training: 0.6877361232199942
User 82117 does not improve AUC. Reverting changes.
Training on augumented user 39188 26/50 current_auc = 0.6883173496076722
User 39188 AUC after training: 0.6880267364138332
User 39188 does not improve AUC. Reverting changes.
Training on augumented user 34686 27/50 current_auc = 0.6883173496076722
User 34686 AUC after training: 0.6868642836384772
User 34686 does not improve AUC. Reverting changes.
Training on augumented user 39826 28/50 current_auc = 0.6883173496076722
User 39826 AUC after training: 0.6877361232199942
User 39826 does not improve AUC. Reverting changes.
Training on augumented user 91155 29/50 current_auc = 0.6883173496076722
User 91155 AUC after training: 0.6880267364138332
User 91155 does not improve AUC. Reverting changes.
Training on augumented user 119483 30/50 current_auc = 0.6883173496076722
User 119483 AUC after training: 0.6877361232199942
User 119483 does not improve AUC. Reverting changes.
Training on augumented user 11957 31/50 current_auc = 0.6883173496076722
User 11957 AUC after training: 0.6873002034292358
User 11957 does not improve AUC. Reverting changes.
Training on augumented user 15285 32/50 current_auc = 0.6883173496076722
User 15285 AUC after training: 0.6874455100261552
User 15285 does not improve AUC. Reverting changes.
Training on augumented user 75670 33/50 current_auc = 0.6883173496076722
User 75670 AUC after training: 0.6880267364138333
User 75670 does not improve AUC. Reverting changes.
Training on augumented user 133939 34/50 current_auc = 0.6883173496076722
User 133939 AUC after training: 0.6877361232199942
User 133939 does not improve AUC. Reverting changes.
Training on augumented user 88910 35/50 current_auc = 0.6883173496076722
User 88910 AUC after training: 0.6878814298169137
User 88910 does not improve AUC. Reverting changes.
Training on augumented user 105474 36/50 current_auc = 0.6883173496076722
User 105474 AUC after training: 0.6875908166230748
User 105474 does not improve AUC. Reverting changes.
Training on augumented user 63901 37/50 current_auc = 0.6883173496076722
User 63901 AUC after training: 0.6877361232199942
User 63901 does not improve AUC. Reverting changes.
Training on augumented user 20220 38/50 current_auc = 0.6883173496076722
User 20220 AUC after training: 0.6881720430107526
User 20220 does not improve AUC. Reverting changes.
Training on augumented user 128196 39/50 current_auc = 0.6883173496076722
User 128196 AUC after training: 0.6880267364138333
User 128196 does not improve AUC. Reverting changes.
Training on augumented user 85316 40/50 current_auc = 0.6883173496076722
User 85316 AUC after training: 0.6875908166230748
User 85316 does not improve AUC. Reverting changes.
Training on augumented user 88106 41/50 current_auc = 0.6883173496076722
User 88106 AUC after training: 0.6865736704446382
User 88106 does not improve AUC. Reverting changes.
Training on augumented user 111564 42/50 current_auc = 0.6883173496076722
User 111564 AUC after training: 0.6875908166230748
User 111564 does not improve AUC. Reverting changes.
Training on augumented user 15347 43/50 current_auc = 0.6883173496076722
User 15347 AUC after training: 0.6878814298169137
User 15347 does not improve AUC. Reverting changes.
Training on augumented user 61627 44/50 current_auc = 0.6883173496076722
User 61627 AUC after training: 0.6843940714908457
User 61627 does not improve AUC. Reverting changes.
Training on augumented user 13224 45/50 current_auc = 0.6883173496076722
User 13224 AUC after training: 0.6874455100261553
User 13224 does not improve AUC. Reverting changes.
Training on augumented user 8209 46/50 current_auc = 0.6883173496076722
User 8209 AUC after training: 0.6878814298169137
User 8209 does not improve AUC. Reverting changes.
Training on augumented user 71387 47/50 current_auc = 0.6883173496076722
User 71387 AUC after training: 0.6875908166230748
User 71387 does not improve AUC. Reverting changes.
Training on augumented user 6096 48/50 current_auc = 0.6883173496076722
User 6096 AUC after training: 0.6880267364138332
User 6096 does not improve AUC. Reverting changes.
Training on augumented user 15817 49/50 current_auc = 0.6883173496076722
User 15817 AUC after training: 0.6878814298169137
User 15817 does not improve AUC. Reverting changes.
[2024-12-02 19:18:02.709369] start test user 73611 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:03.265393] start test user 73611 184/568 recall augumented users by random, augumented_users = [133242, 128744, 42906, 76892, 119629, 43979, 22441, 96875, 85751, 125514, 57248, 53044, 76492, 122047, 29341, 64502, 13446, 26773, 41327, 124776, 34855, 103956, 31167, 66572, 26626, 56962, 49141, 4934, 20192, 28783, 131391, 98481, 114194, 57061, 70556, 107142, 63507, 122928, 83893, 63596, 45557, 97265, 28177, 63124, 29813, 12839, 14011, 1438, 36987, 131014]
[2024-12-02 19:18:03.284799] user = 73611 Cloud 184/568
[2024-12-02 19:18:03.328694] user = 73611 Local 184/568
[2024-12-02 19:18:03.664841] user = 73611 Local+ 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:05.932036] user = 73611 MPDA- 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6254029658284977
Training on augumented user 133242 0/50 current_auc = 0.6254029658284977
User 133242 AUC after training: 0.6248871695680206
User 133242 does not improve AUC. Reverting changes.
Training on augumented user 128744 1/50 current_auc = 0.6254029658284977
User 128744 AUC after training: 0.6255104233827637
User 128744 improves AUC. Keeping the model.
Training on augumented user 42906 2/50 current_auc = 0.6255104233827637
User 42906 AUC after training: 0.6255748979153235
User 42906 improves AUC. Keeping the model.
Training on augumented user 76892 3/50 current_auc = 0.6255748979153235
User 76892 AUC after training: 0.6255104233827639
User 76892 does not improve AUC. Reverting changes.
Training on augumented user 119629 4/50 current_auc = 0.6255748979153235
User 119629 AUC after training: 0.6253599828067913
User 119629 does not improve AUC. Reverting changes.
Training on augumented user 43979 5/50 current_auc = 0.6255748979153235
User 43979 AUC after training: 0.6252955082742317
User 43979 does not improve AUC. Reverting changes.
Training on augumented user 22441 6/50 current_auc = 0.6255748979153235
User 22441 AUC after training: 0.6255748979153235
User 22441 does not improve AUC. Reverting changes.
Training on augumented user 96875 7/50 current_auc = 0.6255748979153235
User 96875 AUC after training: 0.6245647969052224
User 96875 does not improve AUC. Reverting changes.
Training on augumented user 85751 8/50 current_auc = 0.6255748979153235
User 85751 AUC after training: 0.6253599828067913
User 85751 does not improve AUC. Reverting changes.
Training on augumented user 125514 9/50 current_auc = 0.6255748979153235
User 125514 AUC after training: 0.6255534064044702
User 125514 does not improve AUC. Reverting changes.
Training on augumented user 57248 10/50 current_auc = 0.6255748979153235
User 57248 AUC after training: 0.6236621534493876
User 57248 does not improve AUC. Reverting changes.
Training on augumented user 53044 11/50 current_auc = 0.6255748979153235
User 53044 AUC after training: 0.6254459488502041
User 53044 does not improve AUC. Reverting changes.
Training on augumented user 76492 12/50 current_auc = 0.6255748979153235
User 76492 AUC after training: 0.6251020846765527
User 76492 does not improve AUC. Reverting changes.
Training on augumented user 122047 13/50 current_auc = 0.6255748979153235
User 122047 AUC after training: 0.6255104233827637
User 122047 does not improve AUC. Reverting changes.
Training on augumented user 29341 14/50 current_auc = 0.6255748979153235
User 29341 AUC after training: 0.6244143563292499
User 29341 does not improve AUC. Reverting changes.
Training on augumented user 64502 15/50 current_auc = 0.6255748979153235
User 64502 AUC after training: 0.6253169997850849
User 64502 does not improve AUC. Reverting changes.
Training on augumented user 13446 16/50 current_auc = 0.6255748979153235
User 13446 AUC after training: 0.6254029658284977
User 13446 does not improve AUC. Reverting changes.
Training on augumented user 26773 17/50 current_auc = 0.6255748979153235
User 26773 AUC after training: 0.624715237481195
User 26773 does not improve AUC. Reverting changes.
Training on augumented user 41327 18/50 current_auc = 0.6255748979153235
User 41327 AUC after training: 0.6255104233827637
User 41327 does not improve AUC. Reverting changes.
Training on augumented user 124776 19/50 current_auc = 0.6255748979153235
User 124776 AUC after training: 0.6249086610788738
User 124776 does not improve AUC. Reverting changes.
Training on augumented user 34855 20/50 current_auc = 0.6255748979153235
User 34855 AUC after training: 0.6249516441005802
User 34855 does not improve AUC. Reverting changes.
Training on augumented user 103956 21/50 current_auc = 0.6255748979153235
User 103956 AUC after training: 0.6255963894261767
User 103956 improves AUC. Keeping the model.
Training on augumented user 31167 22/50 current_auc = 0.6255963894261767
User 31167 AUC after training: 0.6254029658284976
User 31167 does not improve AUC. Reverting changes.
Training on augumented user 66572 23/50 current_auc = 0.6255963894261767
User 66572 AUC after training: 0.6256608639587363
User 66572 improves AUC. Keeping the model.
Training on augumented user 26626 24/50 current_auc = 0.6256608639587363
User 26626 AUC after training: 0.6250805931656995
User 26626 does not improve AUC. Reverting changes.
Training on augumented user 56962 25/50 current_auc = 0.6256608639587363
User 56962 AUC after training: 0.6255963894261767
User 56962 does not improve AUC. Reverting changes.
Training on augumented user 49141 26/50 current_auc = 0.6256608639587363
User 49141 AUC after training: 0.624715237481195
User 49141 does not improve AUC. Reverting changes.
Training on augumented user 4934 27/50 current_auc = 0.6256608639587363
User 4934 AUC after training: 0.6253599828067913
User 4934 does not improve AUC. Reverting changes.
Training on augumented user 20192 28/50 current_auc = 0.6256608639587363
User 20192 AUC after training: 0.625123576187406
User 20192 does not improve AUC. Reverting changes.
Training on augumented user 28783 29/50 current_auc = 0.6256608639587363
User 28783 AUC after training: 0.6249086610788738
User 28783 does not improve AUC. Reverting changes.
Training on augumented user 131391 30/50 current_auc = 0.6256608639587363
User 131391 AUC after training: 0.6254244573393509
User 131391 does not improve AUC. Reverting changes.
Training on augumented user 98481 31/50 current_auc = 0.6256608639587363
User 98481 AUC after training: 0.6253814743176446
User 98481 does not improve AUC. Reverting changes.
Training on augumented user 114194 32/50 current_auc = 0.6256608639587363
User 114194 AUC after training: 0.6249946271222867
User 114194 does not improve AUC. Reverting changes.
Training on augumented user 57061 33/50 current_auc = 0.6256608639587363
User 57061 AUC after training: 0.6255104233827639
User 57061 does not improve AUC. Reverting changes.
Training on augumented user 70556 34/50 current_auc = 0.6256608639587363
User 70556 AUC after training: 0.6255963894261766
User 70556 does not improve AUC. Reverting changes.
Training on augumented user 107142 35/50 current_auc = 0.6256608639587363
User 107142 AUC after training: 0.6252740167633785
User 107142 does not improve AUC. Reverting changes.
Training on augumented user 63507 36/50 current_auc = 0.6256608639587363
User 63507 AUC after training: 0.625123576187406
User 63507 does not improve AUC. Reverting changes.
Training on augumented user 122928 37/50 current_auc = 0.6256608639587363
User 122928 AUC after training: 0.6255319148936171
User 122928 does not improve AUC. Reverting changes.
Training on augumented user 83893 38/50 current_auc = 0.6256608639587363
User 83893 AUC after training: 0.625531914893617
User 83893 does not improve AUC. Reverting changes.
Training on augumented user 63596 39/50 current_auc = 0.6256608639587363
User 63596 AUC after training: 0.6246722544594885
User 63596 does not improve AUC. Reverting changes.
Training on augumented user 45557 40/50 current_auc = 0.6256608639587363
User 45557 AUC after training: 0.6254029658284979
User 45557 does not improve AUC. Reverting changes.
Training on augumented user 97265 41/50 current_auc = 0.6256608639587363
User 97265 AUC after training: 0.6252740167633785
User 97265 does not improve AUC. Reverting changes.
Training on augumented user 28177 42/50 current_auc = 0.6256608639587363
User 28177 AUC after training: 0.6256178809370299
User 28177 does not improve AUC. Reverting changes.
Training on augumented user 63124 43/50 current_auc = 0.6256608639587363
User 63124 AUC after training: 0.6253384912959381
User 63124 does not improve AUC. Reverting changes.
Training on augumented user 29813 44/50 current_auc = 0.6256608639587363
User 29813 AUC after training: 0.6253169997850849
User 29813 does not improve AUC. Reverting changes.
Training on augumented user 12839 45/50 current_auc = 0.6256608639587363
User 12839 AUC after training: 0.6253814743176445
User 12839 does not improve AUC. Reverting changes.
Training on augumented user 14011 46/50 current_auc = 0.6256608639587363
User 14011 AUC after training: 0.6253814743176445
User 14011 does not improve AUC. Reverting changes.
Training on augumented user 1438 47/50 current_auc = 0.6256608639587363
User 1438 AUC after training: 0.6253384912959381
User 1438 does not improve AUC. Reverting changes.
Training on augumented user 36987 48/50 current_auc = 0.6256608639587363
User 36987 AUC after training: 0.6251665592091123
User 36987 does not improve AUC. Reverting changes.
Training on augumented user 131014 49/50 current_auc = 0.6256608639587363
User 131014 AUC after training: 0.6253169997850849
User 131014 does not improve AUC. Reverting changes.
[2024-12-02 19:18:37.716247] start test user 73639 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:38.334121] start test user 73639 185/568 recall augumented users by random, augumented_users = [47670, 48957, 110842, 45594, 2435, 92120, 126726, 96290, 29049, 87877, 9145, 12714, 6712, 101414, 93104, 66725, 22068, 16172, 112482, 16403, 30196, 72057, 111134, 75554, 31896, 69517, 44430, 15349, 137718, 72548, 103831, 82567, 49626, 43123, 44597, 128251, 75936, 84251, 82121, 20643, 87296, 72224, 15006, 6599, 131366, 120695, 49580, 82458, 70869, 42278]
[2024-12-02 19:18:38.348700] user = 73639 Cloud 185/568
[2024-12-02 19:18:38.369045] user = 73639 Local 185/568
[2024-12-02 19:18:38.420786] user = 73639 Local+ 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:40.900857] user = 73639 MPDA- 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6029935851746258
Training on augumented user 47670 0/50 current_auc = 0.6029935851746258
User 47670 AUC after training: 0.6065573770491803
User 47670 improves AUC. Keeping the model.
Training on augumented user 48957 1/50 current_auc = 0.6065573770491803
User 48957 AUC after training: 0.6051318602993585
User 48957 does not improve AUC. Reverting changes.
Training on augumented user 110842 2/50 current_auc = 0.6065573770491803
User 110842 AUC after training: 0.6072701354240913
User 110842 improves AUC. Keeping the model.
Training on augumented user 45594 3/50 current_auc = 0.6072701354240913
User 45594 AUC after training: 0.6065573770491803
User 45594 does not improve AUC. Reverting changes.
Training on augumented user 2435 4/50 current_auc = 0.6072701354240913
User 2435 AUC after training: 0.607982893799002
User 2435 improves AUC. Keeping the model.
Training on augumented user 92120 5/50 current_auc = 0.607982893799002
User 92120 AUC after training: 0.6065573770491803
User 92120 does not improve AUC. Reverting changes.
Training on augumented user 126726 6/50 current_auc = 0.607982893799002
User 126726 AUC after training: 0.6058446186742694
User 126726 does not improve AUC. Reverting changes.
Training on augumented user 96290 7/50 current_auc = 0.607982893799002
User 96290 AUC after training: 0.6065573770491802
User 96290 does not improve AUC. Reverting changes.
Training on augumented user 29049 8/50 current_auc = 0.607982893799002
User 29049 AUC after training: 0.6044191019244476
User 29049 does not improve AUC. Reverting changes.
Training on augumented user 87877 9/50 current_auc = 0.607982893799002
User 87877 AUC after training: 0.6065573770491803
User 87877 does not improve AUC. Reverting changes.
Training on augumented user 9145 10/50 current_auc = 0.607982893799002
User 9145 AUC after training: 0.6015680684248039
User 9145 does not improve AUC. Reverting changes.
Training on augumented user 12714 11/50 current_auc = 0.607982893799002
User 12714 AUC after training: 0.6072701354240913
User 12714 does not improve AUC. Reverting changes.
Training on augumented user 6712 12/50 current_auc = 0.607982893799002
User 6712 AUC after training: 0.6058446186742694
User 6712 does not improve AUC. Reverting changes.
Training on augumented user 101414 13/50 current_auc = 0.607982893799002
User 101414 AUC after training: 0.6072701354240913
User 101414 does not improve AUC. Reverting changes.
Training on augumented user 93104 14/50 current_auc = 0.607982893799002
User 93104 AUC after training: 0.6065573770491803
User 93104 does not improve AUC. Reverting changes.
Training on augumented user 66725 15/50 current_auc = 0.607982893799002
User 66725 AUC after training: 0.6065573770491803
User 66725 does not improve AUC. Reverting changes.
Training on augumented user 22068 16/50 current_auc = 0.607982893799002
User 22068 AUC after training: 0.6058446186742694
User 22068 does not improve AUC. Reverting changes.
Training on augumented user 16172 17/50 current_auc = 0.607982893799002
User 16172 AUC after training: 0.6022808267997148
User 16172 does not improve AUC. Reverting changes.
Training on augumented user 112482 18/50 current_auc = 0.607982893799002
User 112482 AUC after training: 0.6072701354240913
User 112482 does not improve AUC. Reverting changes.
Training on augumented user 16403 19/50 current_auc = 0.607982893799002
User 16403 AUC after training: 0.6065573770491803
User 16403 does not improve AUC. Reverting changes.
Training on augumented user 30196 20/50 current_auc = 0.607982893799002
User 30196 AUC after training: 0.6079828937990022
User 30196 improves AUC. Keeping the model.
Training on augumented user 72057 21/50 current_auc = 0.6079828937990022
User 72057 AUC after training: 0.6072701354240913
User 72057 does not improve AUC. Reverting changes.
Training on augumented user 111134 22/50 current_auc = 0.6079828937990022
User 111134 AUC after training: 0.6051318602993584
User 111134 does not improve AUC. Reverting changes.
Training on augumented user 75554 23/50 current_auc = 0.6079828937990022
User 75554 AUC after training: 0.6065573770491803
User 75554 does not improve AUC. Reverting changes.
Training on augumented user 31896 24/50 current_auc = 0.6079828937990022
User 31896 AUC after training: 0.6079828937990022
User 31896 does not improve AUC. Reverting changes.
Training on augumented user 69517 25/50 current_auc = 0.6079828937990022
User 69517 AUC after training: 0.608695652173913
User 69517 improves AUC. Keeping the model.
Training on augumented user 44430 26/50 current_auc = 0.608695652173913
User 44430 AUC after training: 0.607982893799002
User 44430 does not improve AUC. Reverting changes.
Training on augumented user 15349 27/50 current_auc = 0.608695652173913
User 15349 AUC after training: 0.6001425516749822
User 15349 does not improve AUC. Reverting changes.
Training on augumented user 137718 28/50 current_auc = 0.608695652173913
User 137718 AUC after training: 0.6072701354240913
User 137718 does not improve AUC. Reverting changes.
Training on augumented user 72548 29/50 current_auc = 0.608695652173913
User 72548 AUC after training: 0.6058446186742694
User 72548 does not improve AUC. Reverting changes.
Training on augumented user 103831 30/50 current_auc = 0.608695652173913
User 103831 AUC after training: 0.6072701354240913
User 103831 does not improve AUC. Reverting changes.
Training on augumented user 82567 31/50 current_auc = 0.608695652173913
User 82567 AUC after training: 0.6072701354240913
User 82567 does not improve AUC. Reverting changes.
Training on augumented user 49626 32/50 current_auc = 0.608695652173913
User 49626 AUC after training: 0.6058446186742694
User 49626 does not improve AUC. Reverting changes.
Training on augumented user 43123 33/50 current_auc = 0.608695652173913
User 43123 AUC after training: 0.6065573770491803
User 43123 does not improve AUC. Reverting changes.
Training on augumented user 44597 34/50 current_auc = 0.608695652173913
User 44597 AUC after training: 0.6072701354240913
User 44597 does not improve AUC. Reverting changes.
Training on augumented user 128251 35/50 current_auc = 0.608695652173913
User 128251 AUC after training: 0.609408410548824
User 128251 improves AUC. Keeping the model.
Training on augumented user 75936 36/50 current_auc = 0.609408410548824
User 75936 AUC after training: 0.6037063435495367
User 75936 does not improve AUC. Reverting changes.
Training on augumented user 84251 37/50 current_auc = 0.609408410548824
User 84251 AUC after training: 0.6086956521739131
User 84251 does not improve AUC. Reverting changes.
Training on augumented user 82121 38/50 current_auc = 0.609408410548824
User 82121 AUC after training: 0.6072701354240913
User 82121 does not improve AUC. Reverting changes.
Training on augumented user 20643 39/50 current_auc = 0.609408410548824
User 20643 AUC after training: 0.609408410548824
User 20643 does not improve AUC. Reverting changes.
Training on augumented user 87296 40/50 current_auc = 0.609408410548824
User 87296 AUC after training: 0.6072701354240913
User 87296 does not improve AUC. Reverting changes.
Training on augumented user 72224 41/50 current_auc = 0.609408410548824
User 72224 AUC after training: 0.6065573770491803
User 72224 does not improve AUC. Reverting changes.
Training on augumented user 15006 42/50 current_auc = 0.609408410548824
User 15006 AUC after training: 0.6086956521739131
User 15006 does not improve AUC. Reverting changes.
Training on augumented user 6599 43/50 current_auc = 0.609408410548824
User 6599 AUC after training: 0.6086956521739131
User 6599 does not improve AUC. Reverting changes.
Training on augumented user 131366 44/50 current_auc = 0.609408410548824
User 131366 AUC after training: 0.6037063435495367
User 131366 does not improve AUC. Reverting changes.
Training on augumented user 120695 45/50 current_auc = 0.609408410548824
User 120695 AUC after training: 0.6072701354240913
User 120695 does not improve AUC. Reverting changes.
Training on augumented user 49580 46/50 current_auc = 0.609408410548824
User 49580 AUC after training: 0.6079828937990022
User 49580 does not improve AUC. Reverting changes.
Training on augumented user 82458 47/50 current_auc = 0.609408410548824
User 82458 AUC after training: 0.6079828937990022
User 82458 does not improve AUC. Reverting changes.
Training on augumented user 70869 48/50 current_auc = 0.609408410548824
User 70869 AUC after training: 0.6065573770491803
User 70869 does not improve AUC. Reverting changes.
Training on augumented user 42278 49/50 current_auc = 0.609408410548824
User 42278 AUC after training: 0.6065573770491803
User 42278 does not improve AUC. Reverting changes.
[2024-12-02 19:19:08.235521] start test user 73680 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:08.829732] start test user 73680 186/568 recall augumented users by random, augumented_users = [118179, 60121, 59967, 83922, 65200, 64620, 8073, 61519, 82466, 134936, 10339, 8602, 59354, 136517, 58137, 103706, 70227, 20438, 98664, 32193, 30447, 63981, 91407, 24683, 86941, 76836, 74072, 86453, 64296, 87189, 103304, 58750, 99428, 47254, 70600, 83165, 111600, 42610, 24236, 123954, 113923, 20513, 68408, 5486, 52447, 45544, 36988, 38066, 82477, 7178]
[2024-12-02 19:19:08.846322] user = 73680 Cloud 186/568
[2024-12-02 19:19:08.863960] user = 73680 Local 186/568
[2024-12-02 19:19:08.995299] user = 73680 Local+ 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:11.964073] user = 73680 MPDA- 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6693948412698413
Training on augumented user 118179 0/50 current_auc = 0.6693948412698413
User 118179 AUC after training: 0.6703869047619048
User 118179 improves AUC. Keeping the model.
Training on augumented user 60121 1/50 current_auc = 0.6703869047619048
User 60121 AUC after training: 0.6676587301587301
User 60121 does not improve AUC. Reverting changes.
Training on augumented user 59967 2/50 current_auc = 0.6703869047619048
User 59967 AUC after training: 0.6696428571428572
User 59967 does not improve AUC. Reverting changes.
Training on augumented user 83922 3/50 current_auc = 0.6703869047619048
User 83922 AUC after training: 0.6701388888888888
User 83922 does not improve AUC. Reverting changes.
Training on augumented user 65200 4/50 current_auc = 0.6703869047619048
User 65200 AUC after training: 0.669890873015873
User 65200 does not improve AUC. Reverting changes.
Training on augumented user 64620 5/50 current_auc = 0.6703869047619048
User 64620 AUC after training: 0.6713789682539683
User 64620 improves AUC. Keeping the model.
Training on augumented user 8073 6/50 current_auc = 0.6713789682539683
User 8073 AUC after training: 0.6708829365079365
User 8073 does not improve AUC. Reverting changes.
Training on augumented user 61519 7/50 current_auc = 0.6713789682539683
User 61519 AUC after training: 0.6733630952380952
User 61519 improves AUC. Keeping the model.
Training on augumented user 82466 8/50 current_auc = 0.6733630952380952
User 82466 AUC after training: 0.6723710317460317
User 82466 does not improve AUC. Reverting changes.
Training on augumented user 134936 9/50 current_auc = 0.6733630952380952
User 134936 AUC after training: 0.6691468253968255
User 134936 does not improve AUC. Reverting changes.
Training on augumented user 10339 10/50 current_auc = 0.6733630952380952
User 10339 AUC after training: 0.6713789682539683
User 10339 does not improve AUC. Reverting changes.
Training on augumented user 8602 11/50 current_auc = 0.6733630952380952
User 8602 AUC after training: 0.6703869047619048
User 8602 does not improve AUC. Reverting changes.
Training on augumented user 59354 12/50 current_auc = 0.6733630952380952
User 59354 AUC after training: 0.6723710317460317
User 59354 does not improve AUC. Reverting changes.
Training on augumented user 136517 13/50 current_auc = 0.6733630952380952
User 136517 AUC after training: 0.6733630952380952
User 136517 does not improve AUC. Reverting changes.
Training on augumented user 58137 14/50 current_auc = 0.6733630952380952
User 58137 AUC after training: 0.6723710317460317
User 58137 does not improve AUC. Reverting changes.
Training on augumented user 103706 15/50 current_auc = 0.6733630952380952
User 103706 AUC after training: 0.6723710317460317
User 103706 does not improve AUC. Reverting changes.
Training on augumented user 70227 16/50 current_auc = 0.6733630952380952
User 70227 AUC after training: 0.673859126984127
User 70227 improves AUC. Keeping the model.
Training on augumented user 20438 17/50 current_auc = 0.673859126984127
User 20438 AUC after training: 0.6713789682539683
User 20438 does not improve AUC. Reverting changes.
Training on augumented user 98664 18/50 current_auc = 0.673859126984127
User 98664 AUC after training: 0.671875
User 98664 does not improve AUC. Reverting changes.
Training on augumented user 32193 19/50 current_auc = 0.673859126984127
User 32193 AUC after training: 0.6733630952380952
User 32193 does not improve AUC. Reverting changes.
Training on augumented user 30447 20/50 current_auc = 0.673859126984127
User 30447 AUC after training: 0.669890873015873
User 30447 does not improve AUC. Reverting changes.
Training on augumented user 63981 21/50 current_auc = 0.673859126984127
User 63981 AUC after training: 0.671875
User 63981 does not improve AUC. Reverting changes.
Training on augumented user 91407 22/50 current_auc = 0.673859126984127
User 91407 AUC after training: 0.6701388888888888
User 91407 does not improve AUC. Reverting changes.
Training on augumented user 24683 23/50 current_auc = 0.673859126984127
User 24683 AUC after training: 0.6731150793650794
User 24683 does not improve AUC. Reverting changes.
Training on augumented user 86941 24/50 current_auc = 0.673859126984127
User 86941 AUC after training: 0.6666666666666666
User 86941 does not improve AUC. Reverting changes.
Training on augumented user 76836 25/50 current_auc = 0.673859126984127
User 76836 AUC after training: 0.6728670634920635
User 76836 does not improve AUC. Reverting changes.
Training on augumented user 74072 26/50 current_auc = 0.673859126984127
User 74072 AUC after training: 0.6743551587301587
User 74072 improves AUC. Keeping the model.
Training on augumented user 86453 27/50 current_auc = 0.6743551587301587
User 86453 AUC after training: 0.6755952380952381
User 86453 improves AUC. Keeping the model.
Training on augumented user 64296 28/50 current_auc = 0.6755952380952381
User 64296 AUC after training: 0.6728670634920635
User 64296 does not improve AUC. Reverting changes.
Training on augumented user 87189 29/50 current_auc = 0.6755952380952381
User 87189 AUC after training: 0.6743551587301587
User 87189 does not improve AUC. Reverting changes.
Training on augumented user 103304 30/50 current_auc = 0.6755952380952381
User 103304 AUC after training: 0.673611111111111
User 103304 does not improve AUC. Reverting changes.
Training on augumented user 58750 31/50 current_auc = 0.6755952380952381
User 58750 AUC after training: 0.6726190476190476
User 58750 does not improve AUC. Reverting changes.
Training on augumented user 99428 32/50 current_auc = 0.6755952380952381
User 99428 AUC after training: 0.6731150793650794
User 99428 does not improve AUC. Reverting changes.
Training on augumented user 47254 33/50 current_auc = 0.6755952380952381
User 47254 AUC after training: 0.6750992063492064
User 47254 does not improve AUC. Reverting changes.
Training on augumented user 70600 34/50 current_auc = 0.6755952380952381
User 70600 AUC after training: 0.673859126984127
User 70600 does not improve AUC. Reverting changes.
Training on augumented user 83165 35/50 current_auc = 0.6755952380952381
User 83165 AUC after training: 0.6753472222222222
User 83165 does not improve AUC. Reverting changes.
Training on augumented user 111600 36/50 current_auc = 0.6755952380952381
User 111600 AUC after training: 0.6743551587301587
User 111600 does not improve AUC. Reverting changes.
Training on augumented user 42610 37/50 current_auc = 0.6755952380952381
User 42610 AUC after training: 0.6723710317460317
User 42610 does not improve AUC. Reverting changes.
Training on augumented user 24236 38/50 current_auc = 0.6755952380952381
User 24236 AUC after training: 0.6743551587301587
User 24236 does not improve AUC. Reverting changes.
Training on augumented user 123954 39/50 current_auc = 0.6755952380952381
User 123954 AUC after training: 0.6733630952380953
User 123954 does not improve AUC. Reverting changes.
Training on augumented user 113923 40/50 current_auc = 0.6755952380952381
User 113923 AUC after training: 0.6726190476190477
User 113923 does not improve AUC. Reverting changes.
Training on augumented user 20513 41/50 current_auc = 0.6755952380952381
User 20513 AUC after training: 0.6758432539682541
User 20513 improves AUC. Keeping the model.
Training on augumented user 68408 42/50 current_auc = 0.6758432539682541
User 68408 AUC after training: 0.6755952380952381
User 68408 does not improve AUC. Reverting changes.
Training on augumented user 5486 43/50 current_auc = 0.6758432539682541
User 5486 AUC after training: 0.6748511904761906
User 5486 does not improve AUC. Reverting changes.
Training on augumented user 52447 44/50 current_auc = 0.6758432539682541
User 52447 AUC after training: 0.6753472222222222
User 52447 does not improve AUC. Reverting changes.
Training on augumented user 45544 45/50 current_auc = 0.6758432539682541
User 45544 AUC after training: 0.6736111111111112
User 45544 does not improve AUC. Reverting changes.
Training on augumented user 36988 46/50 current_auc = 0.6758432539682541
User 36988 AUC after training: 0.6736111111111112
User 36988 does not improve AUC. Reverting changes.
Training on augumented user 38066 47/50 current_auc = 0.6758432539682541
User 38066 AUC after training: 0.673859126984127
User 38066 does not improve AUC. Reverting changes.
Training on augumented user 82477 48/50 current_auc = 0.6758432539682541
User 82477 AUC after training: 0.6723710317460317
User 82477 does not improve AUC. Reverting changes.
Training on augumented user 7178 49/50 current_auc = 0.6758432539682541
User 7178 AUC after training: 0.673859126984127
User 7178 does not improve AUC. Reverting changes.
[2024-12-02 19:19:41.613259] start test user 73722 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:42.141995] start test user 73722 187/568 recall augumented users by random, augumented_users = [131490, 10810, 57135, 89390, 47099, 54635, 58516, 34190, 124017, 113498, 94900, 42438, 10809, 38242, 69943, 91709, 123886, 81163, 62761, 26937, 137445, 103268, 11519, 5438, 107086, 80843, 93738, 90504, 124303, 131358, 28601, 67971, 29919, 42645, 99354, 54453, 1261, 3709, 114802, 42099, 13429, 91063, 43152, 76266, 79381, 127641, 119840, 49951, 25023, 68546]
[2024-12-02 19:19:42.157390] user = 73722 Cloud 187/568
[2024-12-02 19:19:42.166751] user = 73722 Local 187/568
[2024-12-02 19:19:42.186061] user = 73722 Local+ 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:44.150397] user = 73722 MPDA- 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7380952380952381
Training on augumented user 131490 0/50 current_auc = 0.7380952380952381
User 131490 AUC after training: 0.7261904761904763
User 131490 does not improve AUC. Reverting changes.
Training on augumented user 10810 1/50 current_auc = 0.7380952380952381
User 10810 AUC after training: 0.7380952380952381
User 10810 does not improve AUC. Reverting changes.
Training on augumented user 57135 2/50 current_auc = 0.7380952380952381
User 57135 AUC after training: 0.7380952380952381
User 57135 does not improve AUC. Reverting changes.
Training on augumented user 89390 3/50 current_auc = 0.7380952380952381
User 89390 AUC after training: 0.7380952380952381
User 89390 does not improve AUC. Reverting changes.
Training on augumented user 47099 4/50 current_auc = 0.7380952380952381
User 47099 AUC after training: 0.7380952380952381
User 47099 does not improve AUC. Reverting changes.
Training on augumented user 54635 5/50 current_auc = 0.7380952380952381
User 54635 AUC after training: 0.7261904761904763
User 54635 does not improve AUC. Reverting changes.
Training on augumented user 58516 6/50 current_auc = 0.7380952380952381
User 58516 AUC after training: 0.7261904761904763
User 58516 does not improve AUC. Reverting changes.
Training on augumented user 34190 7/50 current_auc = 0.7380952380952381
User 34190 AUC after training: 0.7380952380952381
User 34190 does not improve AUC. Reverting changes.
Training on augumented user 124017 8/50 current_auc = 0.7380952380952381
User 124017 AUC after training: 0.7380952380952381
User 124017 does not improve AUC. Reverting changes.
Training on augumented user 113498 9/50 current_auc = 0.7380952380952381
User 113498 AUC after training: 0.7261904761904763
User 113498 does not improve AUC. Reverting changes.
Training on augumented user 94900 10/50 current_auc = 0.7380952380952381
User 94900 AUC after training: 0.7380952380952381
User 94900 does not improve AUC. Reverting changes.
Training on augumented user 42438 11/50 current_auc = 0.7380952380952381
User 42438 AUC after training: 0.7380952380952381
User 42438 does not improve AUC. Reverting changes.
Training on augumented user 10809 12/50 current_auc = 0.7380952380952381
User 10809 AUC after training: 0.7380952380952381
User 10809 does not improve AUC. Reverting changes.
Training on augumented user 38242 13/50 current_auc = 0.7380952380952381
User 38242 AUC after training: 0.7380952380952381
User 38242 does not improve AUC. Reverting changes.
Training on augumented user 69943 14/50 current_auc = 0.7380952380952381
User 69943 AUC after training: 0.7380952380952381
User 69943 does not improve AUC. Reverting changes.
Training on augumented user 91709 15/50 current_auc = 0.7380952380952381
User 91709 AUC after training: 0.7261904761904763
User 91709 does not improve AUC. Reverting changes.
Training on augumented user 123886 16/50 current_auc = 0.7380952380952381
User 123886 AUC after training: 0.7261904761904763
User 123886 does not improve AUC. Reverting changes.
Training on augumented user 81163 17/50 current_auc = 0.7380952380952381
User 81163 AUC after training: 0.7142857142857143
User 81163 does not improve AUC. Reverting changes.
Training on augumented user 62761 18/50 current_auc = 0.7380952380952381
User 62761 AUC after training: 0.7261904761904763
User 62761 does not improve AUC. Reverting changes.
Training on augumented user 26937 19/50 current_auc = 0.7380952380952381
User 26937 AUC after training: 0.7380952380952381
User 26937 does not improve AUC. Reverting changes.
Training on augumented user 137445 20/50 current_auc = 0.7380952380952381
User 137445 AUC after training: 0.7380952380952381
User 137445 does not improve AUC. Reverting changes.
Training on augumented user 103268 21/50 current_auc = 0.7380952380952381
User 103268 AUC after training: 0.7380952380952381
User 103268 does not improve AUC. Reverting changes.
Training on augumented user 11519 22/50 current_auc = 0.7380952380952381
User 11519 AUC after training: 0.7261904761904763
User 11519 does not improve AUC. Reverting changes.
Training on augumented user 5438 23/50 current_auc = 0.7380952380952381
User 5438 AUC after training: 0.7380952380952381
User 5438 does not improve AUC. Reverting changes.
Training on augumented user 107086 24/50 current_auc = 0.7380952380952381
User 107086 AUC after training: 0.7380952380952381
User 107086 does not improve AUC. Reverting changes.
Training on augumented user 80843 25/50 current_auc = 0.7380952380952381
User 80843 AUC after training: 0.7380952380952381
User 80843 does not improve AUC. Reverting changes.
Training on augumented user 93738 26/50 current_auc = 0.7380952380952381
User 93738 AUC after training: 0.7261904761904763
User 93738 does not improve AUC. Reverting changes.
Training on augumented user 90504 27/50 current_auc = 0.7380952380952381
User 90504 AUC after training: 0.7380952380952381
User 90504 does not improve AUC. Reverting changes.
Training on augumented user 124303 28/50 current_auc = 0.7380952380952381
User 124303 AUC after training: 0.7380952380952381
User 124303 does not improve AUC. Reverting changes.
Training on augumented user 131358 29/50 current_auc = 0.7380952380952381
User 131358 AUC after training: 0.7261904761904763
User 131358 does not improve AUC. Reverting changes.
Training on augumented user 28601 30/50 current_auc = 0.7380952380952381
User 28601 AUC after training: 0.7380952380952381
User 28601 does not improve AUC. Reverting changes.
Training on augumented user 67971 31/50 current_auc = 0.7380952380952381
User 67971 AUC after training: 0.7380952380952381
User 67971 does not improve AUC. Reverting changes.
Training on augumented user 29919 32/50 current_auc = 0.7380952380952381
User 29919 AUC after training: 0.7261904761904763
User 29919 does not improve AUC. Reverting changes.
Training on augumented user 42645 33/50 current_auc = 0.7380952380952381
User 42645 AUC after training: 0.7380952380952381
User 42645 does not improve AUC. Reverting changes.
Training on augumented user 99354 34/50 current_auc = 0.7380952380952381
User 99354 AUC after training: 0.7261904761904763
User 99354 does not improve AUC. Reverting changes.
Training on augumented user 54453 35/50 current_auc = 0.7380952380952381
User 54453 AUC after training: 0.7380952380952381
User 54453 does not improve AUC. Reverting changes.
Training on augumented user 1261 36/50 current_auc = 0.7380952380952381
User 1261 AUC after training: 0.7261904761904763
User 1261 does not improve AUC. Reverting changes.
Training on augumented user 3709 37/50 current_auc = 0.7380952380952381
User 3709 AUC after training: 0.7380952380952381
User 3709 does not improve AUC. Reverting changes.
Training on augumented user 114802 38/50 current_auc = 0.7380952380952381
User 114802 AUC after training: 0.7380952380952381
User 114802 does not improve AUC. Reverting changes.
Training on augumented user 42099 39/50 current_auc = 0.7380952380952381
User 42099 AUC after training: 0.7380952380952381
User 42099 does not improve AUC. Reverting changes.
Training on augumented user 13429 40/50 current_auc = 0.7380952380952381
User 13429 AUC after training: 0.7380952380952381
User 13429 does not improve AUC. Reverting changes.
Training on augumented user 91063 41/50 current_auc = 0.7380952380952381
User 91063 AUC after training: 0.7380952380952381
User 91063 does not improve AUC. Reverting changes.
Training on augumented user 43152 42/50 current_auc = 0.7380952380952381
User 43152 AUC after training: 0.7261904761904763
User 43152 does not improve AUC. Reverting changes.
Training on augumented user 76266 43/50 current_auc = 0.7380952380952381
User 76266 AUC after training: 0.7380952380952381
User 76266 does not improve AUC. Reverting changes.
Training on augumented user 79381 44/50 current_auc = 0.7380952380952381
User 79381 AUC after training: 0.7261904761904763
User 79381 does not improve AUC. Reverting changes.
Training on augumented user 127641 45/50 current_auc = 0.7380952380952381
User 127641 AUC after training: 0.7380952380952381
User 127641 does not improve AUC. Reverting changes.
Training on augumented user 119840 46/50 current_auc = 0.7380952380952381
User 119840 AUC after training: 0.7380952380952381
User 119840 does not improve AUC. Reverting changes.
Training on augumented user 49951 47/50 current_auc = 0.7380952380952381
User 49951 AUC after training: 0.7380952380952381
User 49951 does not improve AUC. Reverting changes.
Training on augumented user 25023 48/50 current_auc = 0.7380952380952381
User 25023 AUC after training: 0.7380952380952381
User 25023 does not improve AUC. Reverting changes.
Training on augumented user 68546 49/50 current_auc = 0.7380952380952381
User 68546 AUC after training: 0.7261904761904763
User 68546 does not improve AUC. Reverting changes.
[2024-12-02 19:20:13.377355] start test user 73810 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:13.781458] start test user 73810 188/568 recall augumented users by random, augumented_users = [8482, 19422, 87345, 37287, 38998, 91664, 8898, 41517, 132986, 99939, 56463, 81851, 69723, 83531, 65028, 124343, 52892, 34434, 24180, 12600, 25770, 138192, 135192, 39245, 50465, 81722, 98521, 72794, 119623, 37794, 2917, 47382, 15178, 53157, 6157, 64598, 12889, 116930, 108002, 22734, 40460, 64757, 103964, 136213, 116908, 98853, 51556, 82670, 56497, 128550]
[2024-12-02 19:20:13.797558] user = 73810 Cloud 188/568
[2024-12-02 19:20:13.813991] user = 73810 Local 188/568
[2024-12-02 19:20:13.841755] user = 73810 Local+ 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:15.934877] user = 73810 MPDA- 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5264462809917355
Training on augumented user 8482 0/50 current_auc = 0.5264462809917355
User 8482 AUC after training: 0.5256198347107438
User 8482 does not improve AUC. Reverting changes.
Training on augumented user 19422 1/50 current_auc = 0.5264462809917355
User 19422 AUC after training: 0.5223140495867769
User 19422 does not improve AUC. Reverting changes.
Training on augumented user 87345 2/50 current_auc = 0.5264462809917355
User 87345 AUC after training: 0.5264462809917355
User 87345 does not improve AUC. Reverting changes.
Training on augumented user 37287 3/50 current_auc = 0.5264462809917355
User 37287 AUC after training: 0.5239669421487603
User 37287 does not improve AUC. Reverting changes.
Training on augumented user 38998 4/50 current_auc = 0.5264462809917355
User 38998 AUC after training: 0.5264462809917355
User 38998 does not improve AUC. Reverting changes.
Training on augumented user 91664 5/50 current_auc = 0.5264462809917355
User 91664 AUC after training: 0.528099173553719
User 91664 improves AUC. Keeping the model.
Training on augumented user 8898 6/50 current_auc = 0.528099173553719
User 8898 AUC after training: 0.5210743801652893
User 8898 does not improve AUC. Reverting changes.
Training on augumented user 41517 7/50 current_auc = 0.528099173553719
User 41517 AUC after training: 0.521487603305785
User 41517 does not improve AUC. Reverting changes.
Training on augumented user 132986 8/50 current_auc = 0.528099173553719
User 132986 AUC after training: 0.5198347107438016
User 132986 does not improve AUC. Reverting changes.
Training on augumented user 99939 9/50 current_auc = 0.528099173553719
User 99939 AUC after training: 0.5272727272727272
User 99939 does not improve AUC. Reverting changes.
Training on augumented user 56463 10/50 current_auc = 0.528099173553719
User 56463 AUC after training: 0.5231404958677686
User 56463 does not improve AUC. Reverting changes.
Training on augumented user 81851 11/50 current_auc = 0.528099173553719
User 81851 AUC after training: 0.5272727272727272
User 81851 does not improve AUC. Reverting changes.
Training on augumented user 69723 12/50 current_auc = 0.528099173553719
User 69723 AUC after training: 0.5272727272727272
User 69723 does not improve AUC. Reverting changes.
Training on augumented user 83531 13/50 current_auc = 0.528099173553719
User 83531 AUC after training: 0.5264462809917355
User 83531 does not improve AUC. Reverting changes.
Training on augumented user 65028 14/50 current_auc = 0.528099173553719
User 65028 AUC after training: 0.5280991735537189
User 65028 does not improve AUC. Reverting changes.
Training on augumented user 124343 15/50 current_auc = 0.528099173553719
User 124343 AUC after training: 0.5247933884297521
User 124343 does not improve AUC. Reverting changes.
Training on augumented user 52892 16/50 current_auc = 0.528099173553719
User 52892 AUC after training: 0.5181818181818182
User 52892 does not improve AUC. Reverting changes.
Training on augumented user 34434 17/50 current_auc = 0.528099173553719
User 34434 AUC after training: 0.5231404958677686
User 34434 does not improve AUC. Reverting changes.
Training on augumented user 24180 18/50 current_auc = 0.528099173553719
User 24180 AUC after training: 0.528099173553719
User 24180 does not improve AUC. Reverting changes.
Training on augumented user 12600 19/50 current_auc = 0.528099173553719
User 12600 AUC after training: 0.5223140495867769
User 12600 does not improve AUC. Reverting changes.
Training on augumented user 25770 20/50 current_auc = 0.528099173553719
User 25770 AUC after training: 0.5198347107438016
User 25770 does not improve AUC. Reverting changes.
Training on augumented user 138192 21/50 current_auc = 0.528099173553719
User 138192 AUC after training: 0.5239669421487604
User 138192 does not improve AUC. Reverting changes.
Training on augumented user 135192 22/50 current_auc = 0.528099173553719
User 135192 AUC after training: 0.5247933884297521
User 135192 does not improve AUC. Reverting changes.
Training on augumented user 39245 23/50 current_auc = 0.528099173553719
User 39245 AUC after training: 0.5165289256198347
User 39245 does not improve AUC. Reverting changes.
Training on augumented user 50465 24/50 current_auc = 0.528099173553719
User 50465 AUC after training: 0.5272727272727272
User 50465 does not improve AUC. Reverting changes.
Training on augumented user 81722 25/50 current_auc = 0.528099173553719
User 81722 AUC after training: 0.5198347107438016
User 81722 does not improve AUC. Reverting changes.
Training on augumented user 98521 26/50 current_auc = 0.528099173553719
User 98521 AUC after training: 0.5247933884297521
User 98521 does not improve AUC. Reverting changes.
Training on augumented user 72794 27/50 current_auc = 0.528099173553719
User 72794 AUC after training: 0.5272727272727272
User 72794 does not improve AUC. Reverting changes.
Training on augumented user 119623 28/50 current_auc = 0.528099173553719
User 119623 AUC after training: 0.5280991735537189
User 119623 does not improve AUC. Reverting changes.
Training on augumented user 37794 29/50 current_auc = 0.528099173553719
User 37794 AUC after training: 0.5289256198347108
User 37794 improves AUC. Keeping the model.
Training on augumented user 2917 30/50 current_auc = 0.5289256198347108
User 2917 AUC after training: 0.528099173553719
User 2917 does not improve AUC. Reverting changes.
Training on augumented user 47382 31/50 current_auc = 0.5289256198347108
User 47382 AUC after training: 0.528099173553719
User 47382 does not improve AUC. Reverting changes.
Training on augumented user 15178 32/50 current_auc = 0.5289256198347108
User 15178 AUC after training: 0.5280991735537189
User 15178 does not improve AUC. Reverting changes.
Training on augumented user 53157 33/50 current_auc = 0.5289256198347108
User 53157 AUC after training: 0.5272727272727272
User 53157 does not improve AUC. Reverting changes.
Training on augumented user 6157 34/50 current_auc = 0.5289256198347108
User 6157 AUC after training: 0.5318181818181819
User 6157 improves AUC. Keeping the model.
Training on augumented user 64598 35/50 current_auc = 0.5318181818181819
User 64598 AUC after training: 0.5330578512396694
User 64598 improves AUC. Keeping the model.
Training on augumented user 12889 36/50 current_auc = 0.5330578512396694
User 12889 AUC after training: 0.5322314049586777
User 12889 does not improve AUC. Reverting changes.
Training on augumented user 116930 37/50 current_auc = 0.5330578512396694
User 116930 AUC after training: 0.5297520661157025
User 116930 does not improve AUC. Reverting changes.
Training on augumented user 108002 38/50 current_auc = 0.5330578512396694
User 108002 AUC after training: 0.5322314049586776
User 108002 does not improve AUC. Reverting changes.
Training on augumented user 22734 39/50 current_auc = 0.5330578512396694
User 22734 AUC after training: 0.5338842975206611
User 22734 improves AUC. Keeping the model.
Training on augumented user 40460 40/50 current_auc = 0.5338842975206611
User 40460 AUC after training: 0.5301652892561983
User 40460 does not improve AUC. Reverting changes.
Training on augumented user 64757 41/50 current_auc = 0.5338842975206611
User 64757 AUC after training: 0.5305785123966942
User 64757 does not improve AUC. Reverting changes.
Training on augumented user 103964 42/50 current_auc = 0.5338842975206611
User 103964 AUC after training: 0.5305785123966942
User 103964 does not improve AUC. Reverting changes.
Training on augumented user 136213 43/50 current_auc = 0.5338842975206611
User 136213 AUC after training: 0.5322314049586777
User 136213 does not improve AUC. Reverting changes.
Training on augumented user 116908 44/50 current_auc = 0.5338842975206611
User 116908 AUC after training: 0.5314049586776859
User 116908 does not improve AUC. Reverting changes.
Training on augumented user 98853 45/50 current_auc = 0.5338842975206611
User 98853 AUC after training: 0.5297520661157025
User 98853 does not improve AUC. Reverting changes.
Training on augumented user 51556 46/50 current_auc = 0.5338842975206611
User 51556 AUC after training: 0.5347107438016528
User 51556 improves AUC. Keeping the model.
Training on augumented user 82670 47/50 current_auc = 0.5347107438016528
User 82670 AUC after training: 0.5305785123966942
User 82670 does not improve AUC. Reverting changes.
Training on augumented user 56497 48/50 current_auc = 0.5347107438016528
User 56497 AUC after training: 0.5289256198347108
User 56497 does not improve AUC. Reverting changes.
Training on augumented user 128550 49/50 current_auc = 0.5347107438016528
User 128550 AUC after training: 0.5330578512396694
User 128550 does not improve AUC. Reverting changes.
[2024-12-02 19:20:39.279463] start test user 73948 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:39.693470] start test user 73948 189/568 recall augumented users by random, augumented_users = [10700, 49170, 86037, 116770, 39868, 122913, 66468, 26006, 23236, 108590, 110236, 129374, 78178, 134577, 43515, 104919, 66303, 125517, 131792, 26454, 73295, 107550, 81197, 48971, 130388, 31860, 73436, 56851, 114304, 94066, 60703, 82516, 111985, 12068, 113837, 7844, 18104, 113180, 70007, 59334, 88476, 31530, 97819, 79170, 124933, 15344, 133975, 124658, 122755, 75656]
[2024-12-02 19:20:39.709547] user = 73948 Cloud 189/568
[2024-12-02 19:20:39.722072] user = 73948 Local 189/568
[2024-12-02 19:20:39.923276] user = 73948 Local+ 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:42.696360] user = 73948 MPDA- 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.596743295019157
Training on augumented user 10700 0/50 current_auc = 0.596743295019157
User 10700 AUC after training: 0.5977011494252873
User 10700 improves AUC. Keeping the model.
Training on augumented user 49170 1/50 current_auc = 0.5977011494252873
User 49170 AUC after training: 0.5986590038314177
User 49170 improves AUC. Keeping the model.
Training on augumented user 86037 2/50 current_auc = 0.5986590038314177
User 86037 AUC after training: 0.5948275862068966
User 86037 does not improve AUC. Reverting changes.
Training on augumented user 116770 3/50 current_auc = 0.5986590038314177
User 116770 AUC after training: 0.5986590038314177
User 116770 does not improve AUC. Reverting changes.
Training on augumented user 39868 4/50 current_auc = 0.5986590038314177
User 39868 AUC after training: 0.5996168582375478
User 39868 improves AUC. Keeping the model.
Training on augumented user 122913 5/50 current_auc = 0.5996168582375478
User 122913 AUC after training: 0.5977011494252873
User 122913 does not improve AUC. Reverting changes.
Training on augumented user 66468 6/50 current_auc = 0.5996168582375478
User 66468 AUC after training: 0.5996168582375478
User 66468 does not improve AUC. Reverting changes.
Training on augumented user 26006 7/50 current_auc = 0.5996168582375478
User 26006 AUC after training: 0.5977011494252874
User 26006 does not improve AUC. Reverting changes.
Training on augumented user 23236 8/50 current_auc = 0.5996168582375478
User 23236 AUC after training: 0.5996168582375478
User 23236 does not improve AUC. Reverting changes.
Training on augumented user 108590 9/50 current_auc = 0.5996168582375478
User 108590 AUC after training: 0.5996168582375478
User 108590 does not improve AUC. Reverting changes.
Training on augumented user 110236 10/50 current_auc = 0.5996168582375478
User 110236 AUC after training: 0.5977011494252873
User 110236 does not improve AUC. Reverting changes.
Training on augumented user 129374 11/50 current_auc = 0.5996168582375478
User 129374 AUC after training: 0.5996168582375478
User 129374 does not improve AUC. Reverting changes.
Training on augumented user 78178 12/50 current_auc = 0.5996168582375478
User 78178 AUC after training: 0.5977011494252873
User 78178 does not improve AUC. Reverting changes.
Training on augumented user 134577 13/50 current_auc = 0.5996168582375478
User 134577 AUC after training: 0.5977011494252874
User 134577 does not improve AUC. Reverting changes.
Training on augumented user 43515 14/50 current_auc = 0.5996168582375478
User 43515 AUC after training: 0.5996168582375478
User 43515 does not improve AUC. Reverting changes.
Training on augumented user 104919 15/50 current_auc = 0.5996168582375478
User 104919 AUC after training: 0.5977011494252873
User 104919 does not improve AUC. Reverting changes.
Training on augumented user 66303 16/50 current_auc = 0.5996168582375478
User 66303 AUC after training: 0.5996168582375478
User 66303 does not improve AUC. Reverting changes.
Training on augumented user 125517 17/50 current_auc = 0.5996168582375478
User 125517 AUC after training: 0.5996168582375478
User 125517 does not improve AUC. Reverting changes.
Training on augumented user 131792 18/50 current_auc = 0.5996168582375478
User 131792 AUC after training: 0.5986590038314176
User 131792 does not improve AUC. Reverting changes.
Training on augumented user 26454 19/50 current_auc = 0.5996168582375478
User 26454 AUC after training: 0.5977011494252873
User 26454 does not improve AUC. Reverting changes.
Training on augumented user 73295 20/50 current_auc = 0.5996168582375478
User 73295 AUC after training: 0.5977011494252874
User 73295 does not improve AUC. Reverting changes.
Training on augumented user 107550 21/50 current_auc = 0.5996168582375478
User 107550 AUC after training: 0.5977011494252873
User 107550 does not improve AUC. Reverting changes.
Training on augumented user 81197 22/50 current_auc = 0.5996168582375478
User 81197 AUC after training: 0.5996168582375478
User 81197 does not improve AUC. Reverting changes.
Training on augumented user 48971 23/50 current_auc = 0.5996168582375478
User 48971 AUC after training: 0.5957854406130267
User 48971 does not improve AUC. Reverting changes.
Training on augumented user 130388 24/50 current_auc = 0.5996168582375478
User 130388 AUC after training: 0.5977011494252873
User 130388 does not improve AUC. Reverting changes.
Training on augumented user 31860 25/50 current_auc = 0.5996168582375478
User 31860 AUC after training: 0.5996168582375478
User 31860 does not improve AUC. Reverting changes.
Training on augumented user 73436 26/50 current_auc = 0.5996168582375478
User 73436 AUC after training: 0.5986590038314177
User 73436 does not improve AUC. Reverting changes.
Training on augumented user 56851 27/50 current_auc = 0.5996168582375478
User 56851 AUC after training: 0.5967432950191571
User 56851 does not improve AUC. Reverting changes.
Training on augumented user 114304 28/50 current_auc = 0.5996168582375478
User 114304 AUC after training: 0.5977011494252873
User 114304 does not improve AUC. Reverting changes.
Training on augumented user 94066 29/50 current_auc = 0.5996168582375478
User 94066 AUC after training: 0.5967432950191571
User 94066 does not improve AUC. Reverting changes.
Training on augumented user 60703 30/50 current_auc = 0.5996168582375478
User 60703 AUC after training: 0.596743295019157
User 60703 does not improve AUC. Reverting changes.
Training on augumented user 82516 31/50 current_auc = 0.5996168582375478
User 82516 AUC after training: 0.6005747126436781
User 82516 improves AUC. Keeping the model.
Training on augumented user 111985 32/50 current_auc = 0.6005747126436781
User 111985 AUC after training: 0.5967432950191571
User 111985 does not improve AUC. Reverting changes.
Training on augumented user 12068 33/50 current_auc = 0.6005747126436781
User 12068 AUC after training: 0.5977011494252874
User 12068 does not improve AUC. Reverting changes.
Training on augumented user 113837 34/50 current_auc = 0.6005747126436781
User 113837 AUC after training: 0.5996168582375478
User 113837 does not improve AUC. Reverting changes.
Training on augumented user 7844 35/50 current_auc = 0.6005747126436781
User 7844 AUC after training: 0.5996168582375478
User 7844 does not improve AUC. Reverting changes.
Training on augumented user 18104 36/50 current_auc = 0.6005747126436781
User 18104 AUC after training: 0.5967432950191571
User 18104 does not improve AUC. Reverting changes.
Training on augumented user 113180 37/50 current_auc = 0.6005747126436781
User 113180 AUC after training: 0.603448275862069
User 113180 improves AUC. Keeping the model.
Training on augumented user 70007 38/50 current_auc = 0.603448275862069
User 70007 AUC after training: 0.6024904214559387
User 70007 does not improve AUC. Reverting changes.
Training on augumented user 59334 39/50 current_auc = 0.603448275862069
User 59334 AUC after training: 0.6015325670498084
User 59334 does not improve AUC. Reverting changes.
Training on augumented user 88476 40/50 current_auc = 0.603448275862069
User 88476 AUC after training: 0.6044061302681992
User 88476 improves AUC. Keeping the model.
Training on augumented user 31530 41/50 current_auc = 0.6044061302681992
User 31530 AUC after training: 0.6053639846743295
User 31530 improves AUC. Keeping the model.
Training on augumented user 97819 42/50 current_auc = 0.6053639846743295
User 97819 AUC after training: 0.5967432950191571
User 97819 does not improve AUC. Reverting changes.
Training on augumented user 79170 43/50 current_auc = 0.6053639846743295
User 79170 AUC after training: 0.6053639846743295
User 79170 does not improve AUC. Reverting changes.
Training on augumented user 124933 44/50 current_auc = 0.6053639846743295
User 124933 AUC after training: 0.5996168582375478
User 124933 does not improve AUC. Reverting changes.
Training on augumented user 15344 45/50 current_auc = 0.6053639846743295
User 15344 AUC after training: 0.5938697318007663
User 15344 does not improve AUC. Reverting changes.
Training on augumented user 133975 46/50 current_auc = 0.6053639846743295
User 133975 AUC after training: 0.6053639846743295
User 133975 does not improve AUC. Reverting changes.
Training on augumented user 124658 47/50 current_auc = 0.6053639846743295
User 124658 AUC after training: 0.603448275862069
User 124658 does not improve AUC. Reverting changes.
Training on augumented user 122755 48/50 current_auc = 0.6053639846743295
User 122755 AUC after training: 0.6053639846743295
User 122755 does not improve AUC. Reverting changes.
Training on augumented user 75656 49/50 current_auc = 0.6053639846743295
User 75656 AUC after training: 0.603448275862069
User 75656 does not improve AUC. Reverting changes.
[2024-12-02 19:21:10.041149] start test user 73992 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:10.459858] start test user 73992 190/568 recall augumented users by random, augumented_users = [119106, 53955, 99637, 66613, 106197, 120001, 15520, 118131, 58873, 3207, 77793, 131500, 54617, 110866, 133615, 19651, 62430, 13462, 36073, 19916, 123859, 94061, 33776, 53633, 47372, 87018, 64782, 57646, 125420, 54935, 28795, 102506, 103336, 90136, 20073, 126286, 67548, 54523, 1263, 6276, 44622, 111540, 72420, 31139, 17969, 5872, 57476, 66602, 4526, 70559]
[2024-12-02 19:21:10.474779] user = 73992 Cloud 190/568
[2024-12-02 19:21:10.507239] user = 73992 Local 190/568
[2024-12-02 19:21:10.558954] user = 73992 Local+ 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:13.213670] user = 73992 MPDA- 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6324150752070306
Training on augumented user 119106 0/50 current_auc = 0.6324150752070306
User 119106 AUC after training: 0.633598107148893
User 119106 improves AUC. Keeping the model.
Training on augumented user 53955 1/50 current_auc = 0.633598107148893
User 53955 AUC after training: 0.6332600980226466
User 53955 does not improve AUC. Reverting changes.
Training on augumented user 99637 2/50 current_auc = 0.633598107148893
User 99637 AUC after training: 0.6339361162751395
User 99637 improves AUC. Keeping the model.
Training on augumented user 66613 3/50 current_auc = 0.6339361162751395
User 66613 AUC after training: 0.634274125401386
User 66613 improves AUC. Keeping the model.
Training on augumented user 106197 4/50 current_auc = 0.634274125401386
User 106197 AUC after training: 0.6346121345276322
User 106197 improves AUC. Keeping the model.
Training on augumented user 120001 5/50 current_auc = 0.6346121345276322
User 120001 AUC after training: 0.6352881527801251
User 120001 improves AUC. Keeping the model.
Training on augumented user 15520 6/50 current_auc = 0.6352881527801251
User 15520 AUC after training: 0.6334291025857699
User 15520 does not improve AUC. Reverting changes.
Training on augumented user 118131 7/50 current_auc = 0.6352881527801251
User 118131 AUC after training: 0.6357951664694946
User 118131 improves AUC. Keeping the model.
Training on augumented user 58873 8/50 current_auc = 0.6357951664694946
User 58873 AUC after training: 0.6376542166638499
User 58873 improves AUC. Keeping the model.
Training on augumented user 3207 9/50 current_auc = 0.6376542166638499
User 3207 AUC after training: 0.6330910934595234
User 3207 does not improve AUC. Reverting changes.
Training on augumented user 77793 10/50 current_auc = 0.6376542166638499
User 77793 AUC after training: 0.6366401892851108
User 77793 does not improve AUC. Reverting changes.
Training on augumented user 131500 11/50 current_auc = 0.6376542166638499
User 131500 AUC after training: 0.6371472029744802
User 131500 does not improve AUC. Reverting changes.
Training on augumented user 54617 12/50 current_auc = 0.6376542166638499
User 54617 AUC after training: 0.6366401892851107
User 54617 does not improve AUC. Reverting changes.
Training on augumented user 110866 13/50 current_auc = 0.6376542166638499
User 110866 AUC after training: 0.6351191482170018
User 110866 does not improve AUC. Reverting changes.
Training on augumented user 133615 14/50 current_auc = 0.6376542166638499
User 133615 AUC after training: 0.6351191482170018
User 133615 does not improve AUC. Reverting changes.
Training on augumented user 19651 15/50 current_auc = 0.6376542166638499
User 19651 AUC after training: 0.6356261619063714
User 19651 does not improve AUC. Reverting changes.
Training on augumented user 62430 16/50 current_auc = 0.6376542166638499
User 62430 AUC after training: 0.6332600980226466
User 62430 does not improve AUC. Reverting changes.
Training on augumented user 13462 17/50 current_auc = 0.6376542166638499
User 13462 AUC after training: 0.6371472029744804
User 13462 does not improve AUC. Reverting changes.
Training on augumented user 36073 18/50 current_auc = 0.6376542166638499
User 36073 AUC after training: 0.6368091938482339
User 36073 does not improve AUC. Reverting changes.
Training on augumented user 19916 19/50 current_auc = 0.6376542166638499
User 19916 AUC after training: 0.6346121345276323
User 19916 does not improve AUC. Reverting changes.
Training on augumented user 123859 20/50 current_auc = 0.6376542166638499
User 123859 AUC after training: 0.6359641710326178
User 123859 does not improve AUC. Reverting changes.
Training on augumented user 94061 21/50 current_auc = 0.6376542166638499
User 94061 AUC after training: 0.6339361162751396
User 94061 does not improve AUC. Reverting changes.
Training on augumented user 33776 22/50 current_auc = 0.6376542166638499
User 33776 AUC after training: 0.6366401892851107
User 33776 does not improve AUC. Reverting changes.
Training on augumented user 53633 23/50 current_auc = 0.6376542166638499
User 53633 AUC after training: 0.6381612303532195
User 53633 improves AUC. Keeping the model.
Training on augumented user 47372 24/50 current_auc = 0.6381612303532195
User 47372 AUC after training: 0.6371472029744802
User 47372 does not improve AUC. Reverting changes.
Training on augumented user 87018 25/50 current_auc = 0.6381612303532195
User 87018 AUC after training: 0.6378232212269731
User 87018 does not improve AUC. Reverting changes.
Training on augumented user 64782 26/50 current_auc = 0.6381612303532195
User 64782 AUC after training: 0.6371472029744804
User 64782 does not improve AUC. Reverting changes.
Training on augumented user 57646 27/50 current_auc = 0.6381612303532195
User 57646 AUC after training: 0.6376542166638499
User 57646 does not improve AUC. Reverting changes.
Training on augumented user 125420 28/50 current_auc = 0.6381612303532195
User 125420 AUC after training: 0.6357951664694946
User 125420 does not improve AUC. Reverting changes.
Training on augumented user 54935 29/50 current_auc = 0.6381612303532195
User 54935 AUC after training: 0.6381612303532197
User 54935 improves AUC. Keeping the model.
Training on augumented user 28795 30/50 current_auc = 0.6381612303532197
User 28795 AUC after training: 0.6379922257900963
User 28795 does not improve AUC. Reverting changes.
Training on augumented user 102506 31/50 current_auc = 0.6381612303532197
User 102506 AUC after training: 0.632753084333277
User 102506 does not improve AUC. Reverting changes.
Training on augumented user 103336 32/50 current_auc = 0.6381612303532197
User 103336 AUC after training: 0.6334291025857698
User 103336 does not improve AUC. Reverting changes.
Training on augumented user 90136 33/50 current_auc = 0.6381612303532197
User 90136 AUC after training: 0.6363021801588643
User 90136 does not improve AUC. Reverting changes.
Training on augumented user 20073 34/50 current_auc = 0.6381612303532197
User 20073 AUC after training: 0.6390062531688355
User 20073 improves AUC. Keeping the model.
Training on augumented user 126286 35/50 current_auc = 0.6390062531688355
User 126286 AUC after training: 0.6363021801588642
User 126286 does not improve AUC. Reverting changes.
Training on augumented user 67548 36/50 current_auc = 0.6390062531688355
User 67548 AUC after training: 0.6378232212269732
User 67548 does not improve AUC. Reverting changes.
Training on augumented user 54523 37/50 current_auc = 0.6390062531688355
User 54523 AUC after training: 0.6381612303532196
User 54523 does not improve AUC. Reverting changes.
Training on augumented user 1263 38/50 current_auc = 0.6390062531688355
User 1263 AUC after training: 0.6374852121007266
User 1263 does not improve AUC. Reverting changes.
Training on augumented user 6276 39/50 current_auc = 0.6390062531688355
User 6276 AUC after training: 0.6388372486057123
User 6276 does not improve AUC. Reverting changes.
Training on augumented user 44622 40/50 current_auc = 0.6390062531688355
User 44622 AUC after training: 0.6369781984113572
User 44622 does not improve AUC. Reverting changes.
Training on augumented user 111540 41/50 current_auc = 0.6390062531688355
User 111540 AUC after training: 0.6381612303532195
User 111540 does not improve AUC. Reverting changes.
Training on augumented user 72420 42/50 current_auc = 0.6390062531688355
User 72420 AUC after training: 0.6363021801588643
User 72420 does not improve AUC. Reverting changes.
Training on augumented user 31139 43/50 current_auc = 0.6390062531688355
User 31139 AUC after training: 0.6386682440425893
User 31139 does not improve AUC. Reverting changes.
Training on augumented user 17969 44/50 current_auc = 0.6390062531688355
User 17969 AUC after training: 0.6383302349163428
User 17969 does not improve AUC. Reverting changes.
Training on augumented user 5872 45/50 current_auc = 0.6390062531688355
User 5872 AUC after training: 0.6383302349163427
User 5872 does not improve AUC. Reverting changes.
Training on augumented user 57476 46/50 current_auc = 0.6390062531688355
User 57476 AUC after training: 0.6395132668582051
User 57476 improves AUC. Keeping the model.
Training on augumented user 66602 47/50 current_auc = 0.6395132668582051
User 66602 AUC after training: 0.636809193848234
User 66602 does not improve AUC. Reverting changes.
Training on augumented user 4526 48/50 current_auc = 0.6395132668582051
User 4526 AUC after training: 0.6324150752070306
User 4526 does not improve AUC. Reverting changes.
Training on augumented user 70559 49/50 current_auc = 0.6395132668582051
User 70559 AUC after training: 0.6381612303532196
User 70559 does not improve AUC. Reverting changes.
[2024-12-02 19:21:40.557260] start test user 74048 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:41.221093] start test user 74048 191/568 recall augumented users by random, augumented_users = [87029, 6228, 102875, 53355, 116898, 137966, 22128, 95090, 82691, 3462, 112119, 93640, 7011, 42687, 61574, 108792, 77793, 39775, 102088, 84230, 92826, 110167, 87119, 58262, 74644, 32886, 116925, 85675, 24091, 59628, 130825, 54034, 91445, 123939, 128442, 49454, 127746, 112167, 37973, 94912, 129440, 78335, 131094, 103130, 9707, 67639, 27327, 5215, 33468, 137769]
[2024-12-02 19:21:41.241863] user = 74048 Cloud 191/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:41.277655] user = 74048 Local 191/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:41.460495] user = 74048 Local+ 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:43.753115] user = 74048 MPDA- 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 87029 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87029 AUC after training: 0.5
User 87029 does not improve AUC. Reverting changes.
Training on augumented user 6228 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6228 AUC after training: 0.5
User 6228 does not improve AUC. Reverting changes.
Training on augumented user 102875 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102875 AUC after training: 0.5
User 102875 does not improve AUC. Reverting changes.
Training on augumented user 53355 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53355 AUC after training: 0.5
User 53355 does not improve AUC. Reverting changes.
Training on augumented user 116898 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116898 AUC after training: 0.5
User 116898 does not improve AUC. Reverting changes.
Training on augumented user 137966 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137966 AUC after training: 0.5
User 137966 does not improve AUC. Reverting changes.
Training on augumented user 22128 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22128 AUC after training: 0.5
User 22128 does not improve AUC. Reverting changes.
Training on augumented user 95090 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95090 AUC after training: 0.5
User 95090 does not improve AUC. Reverting changes.
Training on augumented user 82691 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82691 AUC after training: 0.5
User 82691 does not improve AUC. Reverting changes.
Training on augumented user 3462 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3462 AUC after training: 0.5
User 3462 does not improve AUC. Reverting changes.
Training on augumented user 112119 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112119 AUC after training: 0.5
User 112119 does not improve AUC. Reverting changes.
Training on augumented user 93640 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93640 AUC after training: 0.5
User 93640 does not improve AUC. Reverting changes.
Training on augumented user 7011 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7011 AUC after training: 0.5
User 7011 does not improve AUC. Reverting changes.
Training on augumented user 42687 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42687 AUC after training: 0.5
User 42687 does not improve AUC. Reverting changes.
Training on augumented user 61574 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61574 AUC after training: 0.5
User 61574 does not improve AUC. Reverting changes.
Training on augumented user 108792 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108792 AUC after training: 0.5
User 108792 does not improve AUC. Reverting changes.
Training on augumented user 77793 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77793 AUC after training: 0.5
User 77793 does not improve AUC. Reverting changes.
Training on augumented user 39775 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39775 AUC after training: 0.5
User 39775 does not improve AUC. Reverting changes.
Training on augumented user 102088 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102088 AUC after training: 0.5
User 102088 does not improve AUC. Reverting changes.
Training on augumented user 84230 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84230 AUC after training: 0.5
User 84230 does not improve AUC. Reverting changes.
Training on augumented user 92826 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92826 AUC after training: 0.5
User 92826 does not improve AUC. Reverting changes.
Training on augumented user 110167 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110167 AUC after training: 0.5
User 110167 does not improve AUC. Reverting changes.
Training on augumented user 87119 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87119 AUC after training: 0.5
User 87119 does not improve AUC. Reverting changes.
Training on augumented user 58262 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58262 AUC after training: 0.5
User 58262 does not improve AUC. Reverting changes.
Training on augumented user 74644 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74644 AUC after training: 0.5
User 74644 does not improve AUC. Reverting changes.
Training on augumented user 32886 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32886 AUC after training: 0.5
User 32886 does not improve AUC. Reverting changes.
Training on augumented user 116925 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116925 AUC after training: 0.5
User 116925 does not improve AUC. Reverting changes.
Training on augumented user 85675 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85675 AUC after training: 0.5
User 85675 does not improve AUC. Reverting changes.
Training on augumented user 24091 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24091 AUC after training: 0.5
User 24091 does not improve AUC. Reverting changes.
Training on augumented user 59628 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59628 AUC after training: 0.5
User 59628 does not improve AUC. Reverting changes.
Training on augumented user 130825 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130825 AUC after training: 0.5
User 130825 does not improve AUC. Reverting changes.
Training on augumented user 54034 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54034 AUC after training: 0.5
User 54034 does not improve AUC. Reverting changes.
Training on augumented user 91445 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91445 AUC after training: 0.5
User 91445 does not improve AUC. Reverting changes.
Training on augumented user 123939 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123939 AUC after training: 0.5
User 123939 does not improve AUC. Reverting changes.
Training on augumented user 128442 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128442 AUC after training: 0.5
User 128442 does not improve AUC. Reverting changes.
Training on augumented user 49454 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49454 AUC after training: 0.5
User 49454 does not improve AUC. Reverting changes.
Training on augumented user 127746 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127746 AUC after training: 0.5
User 127746 does not improve AUC. Reverting changes.
Training on augumented user 112167 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112167 AUC after training: 0.5
User 112167 does not improve AUC. Reverting changes.
Training on augumented user 37973 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37973 AUC after training: 0.5
User 37973 does not improve AUC. Reverting changes.
Training on augumented user 94912 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94912 AUC after training: 0.5
User 94912 does not improve AUC. Reverting changes.
Training on augumented user 129440 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129440 AUC after training: 0.5
User 129440 does not improve AUC. Reverting changes.
Training on augumented user 78335 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78335 AUC after training: 0.5
User 78335 does not improve AUC. Reverting changes.
Training on augumented user 131094 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131094 AUC after training: 0.5
User 131094 does not improve AUC. Reverting changes.
Training on augumented user 103130 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103130 AUC after training: 0.5
User 103130 does not improve AUC. Reverting changes.
Training on augumented user 9707 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9707 AUC after training: 0.5
User 9707 does not improve AUC. Reverting changes.
Training on augumented user 67639 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67639 AUC after training: 0.5
User 67639 does not improve AUC. Reverting changes.
Training on augumented user 27327 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27327 AUC after training: 0.5
User 27327 does not improve AUC. Reverting changes.
Training on augumented user 5215 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5215 AUC after training: 0.5
User 5215 does not improve AUC. Reverting changes.
Training on augumented user 33468 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33468 AUC after training: 0.5
User 33468 does not improve AUC. Reverting changes.
Training on augumented user 137769 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137769 AUC after training: 0.5
User 137769 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:22:11.551709] start test user 74060 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:12.353982] start test user 74060 192/568 recall augumented users by random, augumented_users = [110563, 57873, 132022, 30128, 3015, 103520, 8145, 100025, 49240, 134115, 125877, 94156, 27168, 105662, 28749, 83593, 43126, 75682, 37555, 2185, 97084, 10250, 79254, 50770, 6871, 13680, 46260, 108296, 125145, 118531, 89588, 67483, 95617, 53869, 130617, 83321, 99115, 49297, 105401, 136861, 93314, 117642, 119077, 76580, 46180, 21946, 104415, 7963, 129422, 2279]
[2024-12-02 19:22:12.390680] user = 74060 Cloud 192/568
[2024-12-02 19:22:12.401073] user = 74060 Local 192/568
[2024-12-02 19:22:12.498371] user = 74060 Local+ 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:14.905275] user = 74060 MPDA- 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 110563 0/50 current_auc = 0.25
User 110563 AUC after training: 0.25
User 110563 does not improve AUC. Reverting changes.
Training on augumented user 57873 1/50 current_auc = 0.25
User 57873 AUC after training: 0.25
User 57873 does not improve AUC. Reverting changes.
Training on augumented user 132022 2/50 current_auc = 0.25
User 132022 AUC after training: 0.25
User 132022 does not improve AUC. Reverting changes.
Training on augumented user 30128 3/50 current_auc = 0.25
User 30128 AUC after training: 0.25
User 30128 does not improve AUC. Reverting changes.
Training on augumented user 3015 4/50 current_auc = 0.25
User 3015 AUC after training: 0.25
User 3015 does not improve AUC. Reverting changes.
Training on augumented user 103520 5/50 current_auc = 0.25
User 103520 AUC after training: 0.25
User 103520 does not improve AUC. Reverting changes.
Training on augumented user 8145 6/50 current_auc = 0.25
User 8145 AUC after training: 0.25
User 8145 does not improve AUC. Reverting changes.
Training on augumented user 100025 7/50 current_auc = 0.25
User 100025 AUC after training: 0.25
User 100025 does not improve AUC. Reverting changes.
Training on augumented user 49240 8/50 current_auc = 0.25
User 49240 AUC after training: 0.25
User 49240 does not improve AUC. Reverting changes.
Training on augumented user 134115 9/50 current_auc = 0.25
User 134115 AUC after training: 0.25
User 134115 does not improve AUC. Reverting changes.
Training on augumented user 125877 10/50 current_auc = 0.25
User 125877 AUC after training: 0.25
User 125877 does not improve AUC. Reverting changes.
Training on augumented user 94156 11/50 current_auc = 0.25
User 94156 AUC after training: 0.25
User 94156 does not improve AUC. Reverting changes.
Training on augumented user 27168 12/50 current_auc = 0.25
User 27168 AUC after training: 0.25
User 27168 does not improve AUC. Reverting changes.
Training on augumented user 105662 13/50 current_auc = 0.25
User 105662 AUC after training: 0.25
User 105662 does not improve AUC. Reverting changes.
Training on augumented user 28749 14/50 current_auc = 0.25
User 28749 AUC after training: 0.25
User 28749 does not improve AUC. Reverting changes.
Training on augumented user 83593 15/50 current_auc = 0.25
User 83593 AUC after training: 0.25
User 83593 does not improve AUC. Reverting changes.
Training on augumented user 43126 16/50 current_auc = 0.25
User 43126 AUC after training: 0.25
User 43126 does not improve AUC. Reverting changes.
Training on augumented user 75682 17/50 current_auc = 0.25
User 75682 AUC after training: 0.25
User 75682 does not improve AUC. Reverting changes.
Training on augumented user 37555 18/50 current_auc = 0.25
User 37555 AUC after training: 0.25
User 37555 does not improve AUC. Reverting changes.
Training on augumented user 2185 19/50 current_auc = 0.25
User 2185 AUC after training: 0.25
User 2185 does not improve AUC. Reverting changes.
Training on augumented user 97084 20/50 current_auc = 0.25
User 97084 AUC after training: 0.25
User 97084 does not improve AUC. Reverting changes.
Training on augumented user 10250 21/50 current_auc = 0.25
User 10250 AUC after training: 0.25
User 10250 does not improve AUC. Reverting changes.
Training on augumented user 79254 22/50 current_auc = 0.25
User 79254 AUC after training: 0.25
User 79254 does not improve AUC. Reverting changes.
Training on augumented user 50770 23/50 current_auc = 0.25
User 50770 AUC after training: 0.25
User 50770 does not improve AUC. Reverting changes.
Training on augumented user 6871 24/50 current_auc = 0.25
User 6871 AUC after training: 0.25
User 6871 does not improve AUC. Reverting changes.
Training on augumented user 13680 25/50 current_auc = 0.25
User 13680 AUC after training: 0.25
User 13680 does not improve AUC. Reverting changes.
Training on augumented user 46260 26/50 current_auc = 0.25
User 46260 AUC after training: 0.25
User 46260 does not improve AUC. Reverting changes.
Training on augumented user 108296 27/50 current_auc = 0.25
User 108296 AUC after training: 0.25
User 108296 does not improve AUC. Reverting changes.
Training on augumented user 125145 28/50 current_auc = 0.25
User 125145 AUC after training: 0.25
User 125145 does not improve AUC. Reverting changes.
Training on augumented user 118531 29/50 current_auc = 0.25
User 118531 AUC after training: 0.25
User 118531 does not improve AUC. Reverting changes.
Training on augumented user 89588 30/50 current_auc = 0.25
User 89588 AUC after training: 0.25
User 89588 does not improve AUC. Reverting changes.
Training on augumented user 67483 31/50 current_auc = 0.25
User 67483 AUC after training: 0.25
User 67483 does not improve AUC. Reverting changes.
Training on augumented user 95617 32/50 current_auc = 0.25
User 95617 AUC after training: 0.25
User 95617 does not improve AUC. Reverting changes.
Training on augumented user 53869 33/50 current_auc = 0.25
User 53869 AUC after training: 0.25
User 53869 does not improve AUC. Reverting changes.
Training on augumented user 130617 34/50 current_auc = 0.25
User 130617 AUC after training: 0.25
User 130617 does not improve AUC. Reverting changes.
Training on augumented user 83321 35/50 current_auc = 0.25
User 83321 AUC after training: 0.25
User 83321 does not improve AUC. Reverting changes.
Training on augumented user 99115 36/50 current_auc = 0.25
User 99115 AUC after training: 0.25
User 99115 does not improve AUC. Reverting changes.
Training on augumented user 49297 37/50 current_auc = 0.25
User 49297 AUC after training: 0.25
User 49297 does not improve AUC. Reverting changes.
Training on augumented user 105401 38/50 current_auc = 0.25
User 105401 AUC after training: 0.25
User 105401 does not improve AUC. Reverting changes.
Training on augumented user 136861 39/50 current_auc = 0.25
User 136861 AUC after training: 0.25
User 136861 does not improve AUC. Reverting changes.
Training on augumented user 93314 40/50 current_auc = 0.25
User 93314 AUC after training: 0.25
User 93314 does not improve AUC. Reverting changes.
Training on augumented user 117642 41/50 current_auc = 0.25
User 117642 AUC after training: 0.25
User 117642 does not improve AUC. Reverting changes.
Training on augumented user 119077 42/50 current_auc = 0.25
User 119077 AUC after training: 0.25
User 119077 does not improve AUC. Reverting changes.
Training on augumented user 76580 43/50 current_auc = 0.25
User 76580 AUC after training: 0.25
User 76580 does not improve AUC. Reverting changes.
Training on augumented user 46180 44/50 current_auc = 0.25
User 46180 AUC after training: 0.25
User 46180 does not improve AUC. Reverting changes.
Training on augumented user 21946 45/50 current_auc = 0.25
User 21946 AUC after training: 0.25
User 21946 does not improve AUC. Reverting changes.
Training on augumented user 104415 46/50 current_auc = 0.25
User 104415 AUC after training: 0.25
User 104415 does not improve AUC. Reverting changes.
Training on augumented user 7963 47/50 current_auc = 0.25
User 7963 AUC after training: 0.25
User 7963 does not improve AUC. Reverting changes.
Training on augumented user 129422 48/50 current_auc = 0.25
User 129422 AUC after training: 0.25
User 129422 does not improve AUC. Reverting changes.
Training on augumented user 2279 49/50 current_auc = 0.25
User 2279 AUC after training: 0.25
User 2279 does not improve AUC. Reverting changes.
[2024-12-02 19:22:42.039538] start test user 74061 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:42.443748] start test user 74061 193/568 recall augumented users by random, augumented_users = [52929, 5026, 135869, 98818, 130889, 11905, 111164, 53568, 88753, 18449, 51939, 130534, 28897, 4631, 56278, 34299, 29609, 71226, 74449, 12527, 55693, 127421, 75276, 42970, 738, 107112, 73096, 121575, 230, 62394, 55152, 41003, 72732, 31175, 54173, 115117, 50858, 71471, 109558, 35870, 18971, 52812, 30880, 15822, 17772, 54225, 90712, 18213, 23171, 61950]
[2024-12-02 19:22:42.458521] user = 74061 Cloud 193/568
[2024-12-02 19:22:42.469073] user = 74061 Local 193/568
[2024-12-02 19:22:42.523234] user = 74061 Local+ 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:44.904811] user = 74061 MPDA- 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5714285714285714
Training on augumented user 52929 0/50 current_auc = 0.5714285714285714
User 52929 AUC after training: 0.5714285714285714
User 52929 does not improve AUC. Reverting changes.
Training on augumented user 5026 1/50 current_auc = 0.5714285714285714
User 5026 AUC after training: 0.5714285714285714
User 5026 does not improve AUC. Reverting changes.
Training on augumented user 135869 2/50 current_auc = 0.5714285714285714
User 135869 AUC after training: 0.5714285714285714
User 135869 does not improve AUC. Reverting changes.
Training on augumented user 98818 3/50 current_auc = 0.5714285714285714
User 98818 AUC after training: 0.5714285714285714
User 98818 does not improve AUC. Reverting changes.
Training on augumented user 130889 4/50 current_auc = 0.5714285714285714
User 130889 AUC after training: 0.5714285714285714
User 130889 does not improve AUC. Reverting changes.
Training on augumented user 11905 5/50 current_auc = 0.5714285714285714
User 11905 AUC after training: 0.5714285714285714
User 11905 does not improve AUC. Reverting changes.
Training on augumented user 111164 6/50 current_auc = 0.5714285714285714
User 111164 AUC after training: 0.5714285714285714
User 111164 does not improve AUC. Reverting changes.
Training on augumented user 53568 7/50 current_auc = 0.5714285714285714
User 53568 AUC after training: 0.5714285714285714
User 53568 does not improve AUC. Reverting changes.
Training on augumented user 88753 8/50 current_auc = 0.5714285714285714
User 88753 AUC after training: 0.5714285714285714
User 88753 does not improve AUC. Reverting changes.
Training on augumented user 18449 9/50 current_auc = 0.5714285714285714
User 18449 AUC after training: 0.5714285714285714
User 18449 does not improve AUC. Reverting changes.
Training on augumented user 51939 10/50 current_auc = 0.5714285714285714
User 51939 AUC after training: 0.5714285714285714
User 51939 does not improve AUC. Reverting changes.
Training on augumented user 130534 11/50 current_auc = 0.5714285714285714
User 130534 AUC after training: 0.5714285714285714
User 130534 does not improve AUC. Reverting changes.
Training on augumented user 28897 12/50 current_auc = 0.5714285714285714
User 28897 AUC after training: 0.5714285714285714
User 28897 does not improve AUC. Reverting changes.
Training on augumented user 4631 13/50 current_auc = 0.5714285714285714
User 4631 AUC after training: 0.5714285714285714
User 4631 does not improve AUC. Reverting changes.
Training on augumented user 56278 14/50 current_auc = 0.5714285714285714
User 56278 AUC after training: 0.5714285714285714
User 56278 does not improve AUC. Reverting changes.
Training on augumented user 34299 15/50 current_auc = 0.5714285714285714
User 34299 AUC after training: 0.5714285714285714
User 34299 does not improve AUC. Reverting changes.
Training on augumented user 29609 16/50 current_auc = 0.5714285714285714
User 29609 AUC after training: 0.5714285714285714
User 29609 does not improve AUC. Reverting changes.
Training on augumented user 71226 17/50 current_auc = 0.5714285714285714
User 71226 AUC after training: 0.5714285714285714
User 71226 does not improve AUC. Reverting changes.
Training on augumented user 74449 18/50 current_auc = 0.5714285714285714
User 74449 AUC after training: 0.5714285714285714
User 74449 does not improve AUC. Reverting changes.
Training on augumented user 12527 19/50 current_auc = 0.5714285714285714
User 12527 AUC after training: 0.5714285714285714
User 12527 does not improve AUC. Reverting changes.
Training on augumented user 55693 20/50 current_auc = 0.5714285714285714
User 55693 AUC after training: 0.5714285714285714
User 55693 does not improve AUC. Reverting changes.
Training on augumented user 127421 21/50 current_auc = 0.5714285714285714
User 127421 AUC after training: 0.5714285714285714
User 127421 does not improve AUC. Reverting changes.
Training on augumented user 75276 22/50 current_auc = 0.5714285714285714
User 75276 AUC after training: 0.5714285714285714
User 75276 does not improve AUC. Reverting changes.
Training on augumented user 42970 23/50 current_auc = 0.5714285714285714
User 42970 AUC after training: 0.5714285714285714
User 42970 does not improve AUC. Reverting changes.
Training on augumented user 738 24/50 current_auc = 0.5714285714285714
User 738 AUC after training: 0.5714285714285714
User 738 does not improve AUC. Reverting changes.
Training on augumented user 107112 25/50 current_auc = 0.5714285714285714
User 107112 AUC after training: 0.5714285714285714
User 107112 does not improve AUC. Reverting changes.
Training on augumented user 73096 26/50 current_auc = 0.5714285714285714
User 73096 AUC after training: 0.5714285714285714
User 73096 does not improve AUC. Reverting changes.
Training on augumented user 121575 27/50 current_auc = 0.5714285714285714
User 121575 AUC after training: 0.5714285714285714
User 121575 does not improve AUC. Reverting changes.
Training on augumented user 230 28/50 current_auc = 0.5714285714285714
User 230 AUC after training: 0.5714285714285714
User 230 does not improve AUC. Reverting changes.
Training on augumented user 62394 29/50 current_auc = 0.5714285714285714
User 62394 AUC after training: 0.5714285714285714
User 62394 does not improve AUC. Reverting changes.
Training on augumented user 55152 30/50 current_auc = 0.5714285714285714
User 55152 AUC after training: 0.5714285714285714
User 55152 does not improve AUC. Reverting changes.
Training on augumented user 41003 31/50 current_auc = 0.5714285714285714
User 41003 AUC after training: 0.5714285714285714
User 41003 does not improve AUC. Reverting changes.
Training on augumented user 72732 32/50 current_auc = 0.5714285714285714
User 72732 AUC after training: 0.5714285714285714
User 72732 does not improve AUC. Reverting changes.
Training on augumented user 31175 33/50 current_auc = 0.5714285714285714
User 31175 AUC after training: 0.5714285714285714
User 31175 does not improve AUC. Reverting changes.
Training on augumented user 54173 34/50 current_auc = 0.5714285714285714
User 54173 AUC after training: 0.5714285714285714
User 54173 does not improve AUC. Reverting changes.
Training on augumented user 115117 35/50 current_auc = 0.5714285714285714
User 115117 AUC after training: 0.5714285714285714
User 115117 does not improve AUC. Reverting changes.
Training on augumented user 50858 36/50 current_auc = 0.5714285714285714
User 50858 AUC after training: 0.5714285714285714
User 50858 does not improve AUC. Reverting changes.
Training on augumented user 71471 37/50 current_auc = 0.5714285714285714
User 71471 AUC after training: 0.5714285714285714
User 71471 does not improve AUC. Reverting changes.
Training on augumented user 109558 38/50 current_auc = 0.5714285714285714
User 109558 AUC after training: 0.5714285714285714
User 109558 does not improve AUC. Reverting changes.
Training on augumented user 35870 39/50 current_auc = 0.5714285714285714
User 35870 AUC after training: 0.5714285714285714
User 35870 does not improve AUC. Reverting changes.
Training on augumented user 18971 40/50 current_auc = 0.5714285714285714
User 18971 AUC after training: 0.5714285714285714
User 18971 does not improve AUC. Reverting changes.
Training on augumented user 52812 41/50 current_auc = 0.5714285714285714
User 52812 AUC after training: 0.5714285714285714
User 52812 does not improve AUC. Reverting changes.
Training on augumented user 30880 42/50 current_auc = 0.5714285714285714
User 30880 AUC after training: 0.5714285714285714
User 30880 does not improve AUC. Reverting changes.
Training on augumented user 15822 43/50 current_auc = 0.5714285714285714
User 15822 AUC after training: 0.5714285714285714
User 15822 does not improve AUC. Reverting changes.
Training on augumented user 17772 44/50 current_auc = 0.5714285714285714
User 17772 AUC after training: 0.5714285714285714
User 17772 does not improve AUC. Reverting changes.
Training on augumented user 54225 45/50 current_auc = 0.5714285714285714
User 54225 AUC after training: 0.5714285714285714
User 54225 does not improve AUC. Reverting changes.
Training on augumented user 90712 46/50 current_auc = 0.5714285714285714
User 90712 AUC after training: 0.5714285714285714
User 90712 does not improve AUC. Reverting changes.
Training on augumented user 18213 47/50 current_auc = 0.5714285714285714
User 18213 AUC after training: 0.5714285714285714
User 18213 does not improve AUC. Reverting changes.
Training on augumented user 23171 48/50 current_auc = 0.5714285714285714
User 23171 AUC after training: 0.5714285714285714
User 23171 does not improve AUC. Reverting changes.
Training on augumented user 61950 49/50 current_auc = 0.5714285714285714
User 61950 AUC after training: 0.5714285714285714
User 61950 does not improve AUC. Reverting changes.
[2024-12-02 19:23:16.988225] start test user 74076 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:17.451948] start test user 74076 194/568 recall augumented users by random, augumented_users = [30664, 108839, 65944, 93094, 84144, 122331, 111006, 14902, 106130, 54637, 73836, 114578, 97283, 22034, 67042, 123044, 12280, 109186, 137731, 14373, 79622, 90938, 128183, 137468, 55925, 18525, 66345, 3799, 136546, 28909, 6869, 137534, 65879, 114053, 101994, 65178, 31412, 124660, 93812, 105589, 124386, 123375, 84742, 61912, 131678, 108768, 131828, 84826, 28786, 14439]
[2024-12-02 19:23:17.467876] user = 74076 Cloud 194/568
[2024-12-02 19:23:17.479271] user = 74076 Local 194/568
[2024-12-02 19:23:17.610374] user = 74076 Local+ 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:20.159593] user = 74076 MPDA- 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.380952380952381
Training on augumented user 30664 0/50 current_auc = 0.380952380952381
User 30664 AUC after training: 0.3756613756613757
User 30664 does not improve AUC. Reverting changes.
Training on augumented user 108839 1/50 current_auc = 0.380952380952381
User 108839 AUC after training: 0.380952380952381
User 108839 does not improve AUC. Reverting changes.
Training on augumented user 65944 2/50 current_auc = 0.380952380952381
User 65944 AUC after training: 0.380952380952381
User 65944 does not improve AUC. Reverting changes.
Training on augumented user 93094 3/50 current_auc = 0.380952380952381
User 93094 AUC after training: 0.3835978835978836
User 93094 improves AUC. Keeping the model.
Training on augumented user 84144 4/50 current_auc = 0.3835978835978836
User 84144 AUC after training: 0.37830687830687837
User 84144 does not improve AUC. Reverting changes.
Training on augumented user 122331 5/50 current_auc = 0.3835978835978836
User 122331 AUC after training: 0.37830687830687837
User 122331 does not improve AUC. Reverting changes.
Training on augumented user 111006 6/50 current_auc = 0.3835978835978836
User 111006 AUC after training: 0.380952380952381
User 111006 does not improve AUC. Reverting changes.
Training on augumented user 14902 7/50 current_auc = 0.3835978835978836
User 14902 AUC after training: 0.3835978835978836
User 14902 does not improve AUC. Reverting changes.
Training on augumented user 106130 8/50 current_auc = 0.3835978835978836
User 106130 AUC after training: 0.3862433862433863
User 106130 improves AUC. Keeping the model.
Training on augumented user 54637 9/50 current_auc = 0.3862433862433863
User 54637 AUC after training: 0.380952380952381
User 54637 does not improve AUC. Reverting changes.
Training on augumented user 73836 10/50 current_auc = 0.3862433862433863
User 73836 AUC after training: 0.3835978835978836
User 73836 does not improve AUC. Reverting changes.
Training on augumented user 114578 11/50 current_auc = 0.3862433862433863
User 114578 AUC after training: 0.3835978835978836
User 114578 does not improve AUC. Reverting changes.
Training on augumented user 97283 12/50 current_auc = 0.3862433862433863
User 97283 AUC after training: 0.3862433862433863
User 97283 does not improve AUC. Reverting changes.
Training on augumented user 22034 13/50 current_auc = 0.3862433862433863
User 22034 AUC after training: 0.3862433862433863
User 22034 does not improve AUC. Reverting changes.
Training on augumented user 67042 14/50 current_auc = 0.3862433862433863
User 67042 AUC after training: 0.3862433862433863
User 67042 does not improve AUC. Reverting changes.
Training on augumented user 123044 15/50 current_auc = 0.3862433862433863
User 123044 AUC after training: 0.380952380952381
User 123044 does not improve AUC. Reverting changes.
Training on augumented user 12280 16/50 current_auc = 0.3862433862433863
User 12280 AUC after training: 0.380952380952381
User 12280 does not improve AUC. Reverting changes.
Training on augumented user 109186 17/50 current_auc = 0.3862433862433863
User 109186 AUC after training: 0.380952380952381
User 109186 does not improve AUC. Reverting changes.
Training on augumented user 137731 18/50 current_auc = 0.3862433862433863
User 137731 AUC after training: 0.3835978835978836
User 137731 does not improve AUC. Reverting changes.
Training on augumented user 14373 19/50 current_auc = 0.3862433862433863
User 14373 AUC after training: 0.3835978835978836
User 14373 does not improve AUC. Reverting changes.
Training on augumented user 79622 20/50 current_auc = 0.3862433862433863
User 79622 AUC after training: 0.3862433862433863
User 79622 does not improve AUC. Reverting changes.
Training on augumented user 90938 21/50 current_auc = 0.3862433862433863
User 90938 AUC after training: 0.36772486772486773
User 90938 does not improve AUC. Reverting changes.
Training on augumented user 128183 22/50 current_auc = 0.3862433862433863
User 128183 AUC after training: 0.38095238095238093
User 128183 does not improve AUC. Reverting changes.
Training on augumented user 137468 23/50 current_auc = 0.3862433862433863
User 137468 AUC after training: 0.3835978835978836
User 137468 does not improve AUC. Reverting changes.
Training on augumented user 55925 24/50 current_auc = 0.3862433862433863
User 55925 AUC after training: 0.3835978835978836
User 55925 does not improve AUC. Reverting changes.
Training on augumented user 18525 25/50 current_auc = 0.3862433862433863
User 18525 AUC after training: 0.3835978835978836
User 18525 does not improve AUC. Reverting changes.
Training on augumented user 66345 26/50 current_auc = 0.3862433862433863
User 66345 AUC after training: 0.380952380952381
User 66345 does not improve AUC. Reverting changes.
Training on augumented user 3799 27/50 current_auc = 0.3862433862433863
User 3799 AUC after training: 0.3835978835978836
User 3799 does not improve AUC. Reverting changes.
Training on augumented user 136546 28/50 current_auc = 0.3862433862433863
User 136546 AUC after training: 0.380952380952381
User 136546 does not improve AUC. Reverting changes.
Training on augumented user 28909 29/50 current_auc = 0.3862433862433863
User 28909 AUC after training: 0.380952380952381
User 28909 does not improve AUC. Reverting changes.
Training on augumented user 6869 30/50 current_auc = 0.3862433862433863
User 6869 AUC after training: 0.380952380952381
User 6869 does not improve AUC. Reverting changes.
Training on augumented user 137534 31/50 current_auc = 0.3862433862433863
User 137534 AUC after training: 0.380952380952381
User 137534 does not improve AUC. Reverting changes.
Training on augumented user 65879 32/50 current_auc = 0.3862433862433863
User 65879 AUC after training: 0.380952380952381
User 65879 does not improve AUC. Reverting changes.
Training on augumented user 114053 33/50 current_auc = 0.3862433862433863
User 114053 AUC after training: 0.380952380952381
User 114053 does not improve AUC. Reverting changes.
Training on augumented user 101994 34/50 current_auc = 0.3862433862433863
User 101994 AUC after training: 0.37830687830687837
User 101994 does not improve AUC. Reverting changes.
Training on augumented user 65178 35/50 current_auc = 0.3862433862433863
User 65178 AUC after training: 0.3835978835978836
User 65178 does not improve AUC. Reverting changes.
Training on augumented user 31412 36/50 current_auc = 0.3862433862433863
User 31412 AUC after training: 0.380952380952381
User 31412 does not improve AUC. Reverting changes.
Training on augumented user 124660 37/50 current_auc = 0.3862433862433863
User 124660 AUC after training: 0.3835978835978836
User 124660 does not improve AUC. Reverting changes.
Training on augumented user 93812 38/50 current_auc = 0.3862433862433863
User 93812 AUC after training: 0.380952380952381
User 93812 does not improve AUC. Reverting changes.
Training on augumented user 105589 39/50 current_auc = 0.3862433862433863
User 105589 AUC after training: 0.3835978835978836
User 105589 does not improve AUC. Reverting changes.
Training on augumented user 124386 40/50 current_auc = 0.3862433862433863
User 124386 AUC after training: 0.380952380952381
User 124386 does not improve AUC. Reverting changes.
Training on augumented user 123375 41/50 current_auc = 0.3862433862433863
User 123375 AUC after training: 0.3835978835978836
User 123375 does not improve AUC. Reverting changes.
Training on augumented user 84742 42/50 current_auc = 0.3862433862433863
User 84742 AUC after training: 0.380952380952381
User 84742 does not improve AUC. Reverting changes.
Training on augumented user 61912 43/50 current_auc = 0.3862433862433863
User 61912 AUC after training: 0.380952380952381
User 61912 does not improve AUC. Reverting changes.
Training on augumented user 131678 44/50 current_auc = 0.3862433862433863
User 131678 AUC after training: 0.3862433862433863
User 131678 does not improve AUC. Reverting changes.
Training on augumented user 108768 45/50 current_auc = 0.3862433862433863
User 108768 AUC after training: 0.3835978835978836
User 108768 does not improve AUC. Reverting changes.
Training on augumented user 131828 46/50 current_auc = 0.3862433862433863
User 131828 AUC after training: 0.380952380952381
User 131828 does not improve AUC. Reverting changes.
Training on augumented user 84826 47/50 current_auc = 0.3862433862433863
User 84826 AUC after training: 0.3835978835978836
User 84826 does not improve AUC. Reverting changes.
Training on augumented user 28786 48/50 current_auc = 0.3862433862433863
User 28786 AUC after training: 0.380952380952381
User 28786 does not improve AUC. Reverting changes.
Training on augumented user 14439 49/50 current_auc = 0.3862433862433863
User 14439 AUC after training: 0.380952380952381
User 14439 does not improve AUC. Reverting changes.
[2024-12-02 19:23:50.872869] start test user 74102 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:51.417694] start test user 74102 195/568 recall augumented users by random, augumented_users = [87698, 13627, 23342, 59030, 120444, 32420, 72701, 15150, 104378, 89812, 9493, 132785, 50451, 134924, 122044, 82670, 12788, 77471, 120385, 136228, 88206, 12794, 127719, 117161, 8434, 44392, 47558, 113133, 6522, 15044, 69818, 110273, 49206, 30154, 72770, 91857, 99282, 90042, 90700, 59988, 105703, 35597, 64641, 104074, 70110, 113649, 40759, 118798, 40924, 134554]
[2024-12-02 19:23:51.433902] user = 74102 Cloud 195/568
[2024-12-02 19:23:51.479890] user = 74102 Local 195/568
[2024-12-02 19:23:51.604803] user = 74102 Local+ 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:54.117278] user = 74102 MPDA- 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7823306798903823
Training on augumented user 87698 0/50 current_auc = 0.7823306798903823
User 87698 AUC after training: 0.7822654312932272
User 87698 does not improve AUC. Reverting changes.
Training on augumented user 13627 1/50 current_auc = 0.7823306798903823
User 13627 AUC after training: 0.7820044369046065
User 13627 does not improve AUC. Reverting changes.
Training on augumented user 23342 2/50 current_auc = 0.7823306798903823
User 23342 AUC after training: 0.7820696855017617
User 23342 does not improve AUC. Reverting changes.
Training on augumented user 59030 3/50 current_auc = 0.7823306798903823
User 59030 AUC after training: 0.7819391883074513
User 59030 does not improve AUC. Reverting changes.
Training on augumented user 120444 4/50 current_auc = 0.7823306798903823
User 120444 AUC after training: 0.7820044369046064
User 120444 does not improve AUC. Reverting changes.
Training on augumented user 32420 5/50 current_auc = 0.7823306798903823
User 32420 AUC after training: 0.7826569228761581
User 32420 improves AUC. Keeping the model.
Training on augumented user 72701 6/50 current_auc = 0.7826569228761581
User 72701 AUC after training: 0.7825264256818478
User 72701 does not improve AUC. Reverting changes.
Training on augumented user 15150 7/50 current_auc = 0.7826569228761581
User 15150 AUC after training: 0.7826569228761582
User 15150 improves AUC. Keeping the model.
Training on augumented user 104378 8/50 current_auc = 0.7826569228761582
User 104378 AUC after training: 0.7826569228761582
User 104378 does not improve AUC. Reverting changes.
Training on augumented user 89812 9/50 current_auc = 0.7826569228761582
User 89812 AUC after training: 0.7828526686676236
User 89812 improves AUC. Keeping the model.
Training on augumented user 9493 10/50 current_auc = 0.7828526686676236
User 9493 AUC after training: 0.7829179172647788
User 9493 improves AUC. Keeping the model.
Training on augumented user 132785 11/50 current_auc = 0.7829179172647788
User 132785 AUC after training: 0.7835704032363304
User 132785 improves AUC. Keeping the model.
Training on augumented user 50451 12/50 current_auc = 0.7835704032363304
User 50451 AUC after training: 0.7834399060420201
User 50451 does not improve AUC. Reverting changes.
Training on augumented user 134924 13/50 current_auc = 0.7835704032363304
User 134924 AUC after training: 0.7826569228761582
User 134924 does not improve AUC. Reverting changes.
Training on augumented user 122044 14/50 current_auc = 0.7835704032363304
User 122044 AUC after training: 0.7806994649615032
User 122044 does not improve AUC. Reverting changes.
Training on augumented user 82670 15/50 current_auc = 0.7835704032363304
User 82670 AUC after training: 0.7835051546391751
User 82670 does not improve AUC. Reverting changes.
Training on augumented user 12788 16/50 current_auc = 0.7835704032363304
User 12788 AUC after training: 0.7831789116533994
User 12788 does not improve AUC. Reverting changes.
Training on augumented user 77471 17/50 current_auc = 0.7835704032363304
User 77471 AUC after training: 0.7837661490277958
User 77471 improves AUC. Keeping the model.
Training on augumented user 120385 18/50 current_auc = 0.7837661490277958
User 120385 AUC after training: 0.7838966462221062
User 120385 improves AUC. Keeping the model.
Training on augumented user 136228 19/50 current_auc = 0.7838966462221062
User 136228 AUC after training: 0.7835704032363304
User 136228 does not improve AUC. Reverting changes.
Training on augumented user 88206 20/50 current_auc = 0.7838966462221062
User 88206 AUC after training: 0.7835051546391752
User 88206 does not improve AUC. Reverting changes.
Training on augumented user 12794 21/50 current_auc = 0.7838966462221062
User 12794 AUC after training: 0.7837661490277958
User 12794 does not improve AUC. Reverting changes.
Training on augumented user 127719 22/50 current_auc = 0.7838966462221062
User 127719 AUC after training: 0.7832441602505547
User 127719 does not improve AUC. Reverting changes.
Training on augumented user 117161 23/50 current_auc = 0.7838966462221062
User 117161 AUC after training: 0.7834399060420201
User 117161 does not improve AUC. Reverting changes.
Training on augumented user 8434 24/50 current_auc = 0.7838966462221062
User 8434 AUC after training: 0.7837661490277958
User 8434 does not improve AUC. Reverting changes.
Training on augumented user 44392 25/50 current_auc = 0.7838966462221062
User 44392 AUC after training: 0.7839618948192614
User 44392 improves AUC. Keeping the model.
Training on augumented user 47558 26/50 current_auc = 0.7839618948192614
User 47558 AUC after training: 0.7834399060420201
User 47558 does not improve AUC. Reverting changes.
Training on augumented user 113133 27/50 current_auc = 0.7839618948192614
User 113133 AUC after training: 0.7839618948192613
User 113133 does not improve AUC. Reverting changes.
Training on augumented user 6522 28/50 current_auc = 0.7839618948192614
User 6522 AUC after training: 0.7836356518334856
User 6522 does not improve AUC. Reverting changes.
Training on augumented user 15044 29/50 current_auc = 0.7839618948192614
User 15044 AUC after training: 0.7836356518334856
User 15044 does not improve AUC. Reverting changes.
Training on augumented user 69818 30/50 current_auc = 0.7839618948192614
User 69818 AUC after training: 0.7833094088477097
User 69818 does not improve AUC. Reverting changes.
Training on augumented user 110273 31/50 current_auc = 0.7839618948192614
User 110273 AUC after training: 0.7835704032363304
User 110273 does not improve AUC. Reverting changes.
Training on augumented user 49206 32/50 current_auc = 0.7839618948192614
User 49206 AUC after training: 0.7833094088477098
User 49206 does not improve AUC. Reverting changes.
Training on augumented user 30154 33/50 current_auc = 0.7839618948192614
User 30154 AUC after training: 0.7832441602505545
User 30154 does not improve AUC. Reverting changes.
Training on augumented user 72770 34/50 current_auc = 0.7839618948192614
User 72770 AUC after training: 0.7837661490277958
User 72770 does not improve AUC. Reverting changes.
Training on augumented user 91857 35/50 current_auc = 0.7839618948192614
User 91857 AUC after training: 0.7832441602505547
User 91857 does not improve AUC. Reverting changes.
Training on augumented user 99282 36/50 current_auc = 0.7839618948192614
User 99282 AUC after training: 0.7833094088477097
User 99282 does not improve AUC. Reverting changes.
Training on augumented user 90042 37/50 current_auc = 0.7839618948192614
User 90042 AUC after training: 0.7830484144590891
User 90042 does not improve AUC. Reverting changes.
Training on augumented user 90700 38/50 current_auc = 0.7839618948192614
User 90700 AUC after training: 0.7836356518334855
User 90700 does not improve AUC. Reverting changes.
Training on augumented user 59988 39/50 current_auc = 0.7839618948192614
User 59988 AUC after training: 0.7835051546391752
User 59988 does not improve AUC. Reverting changes.
Training on augumented user 105703 40/50 current_auc = 0.7839618948192614
User 105703 AUC after training: 0.7831136630562443
User 105703 does not improve AUC. Reverting changes.
Training on augumented user 35597 41/50 current_auc = 0.7839618948192614
User 35597 AUC after training: 0.7835051546391751
User 35597 does not improve AUC. Reverting changes.
Training on augumented user 64641 42/50 current_auc = 0.7839618948192614
User 64641 AUC after training: 0.7837009004306408
User 64641 does not improve AUC. Reverting changes.
Training on augumented user 104074 43/50 current_auc = 0.7839618948192614
User 104074 AUC after training: 0.7837661490277958
User 104074 does not improve AUC. Reverting changes.
Training on augumented user 70110 44/50 current_auc = 0.7839618948192614
User 70110 AUC after training: 0.7837661490277958
User 70110 does not improve AUC. Reverting changes.
Training on augumented user 113649 45/50 current_auc = 0.7839618948192614
User 113649 AUC after training: 0.7835051546391751
User 113649 does not improve AUC. Reverting changes.
Training on augumented user 40759 46/50 current_auc = 0.7839618948192614
User 40759 AUC after training: 0.7835704032363304
User 40759 does not improve AUC. Reverting changes.
Training on augumented user 118798 47/50 current_auc = 0.7839618948192614
User 118798 AUC after training: 0.7837009004306408
User 118798 does not improve AUC. Reverting changes.
Training on augumented user 40924 48/50 current_auc = 0.7839618948192614
User 40924 AUC after training: 0.7837661490277958
User 40924 does not improve AUC. Reverting changes.
Training on augumented user 134554 49/50 current_auc = 0.7839618948192614
User 134554 AUC after training: 0.7833094088477097
User 134554 does not improve AUC. Reverting changes.
[2024-12-02 19:24:21.731078] start test user 74105 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:22.157214] start test user 74105 196/568 recall augumented users by random, augumented_users = [115257, 96583, 61430, 7730, 109521, 138106, 49978, 22205, 47108, 123355, 11564, 118445, 103734, 34989, 52445, 137063, 78139, 3567, 6517, 58062, 32446, 97624, 100280, 1899, 13696, 37842, 35826, 82301, 125583, 83359, 75880, 31848, 125166, 89506, 101011, 44341, 28545, 15592, 118754, 130778, 114120, 94071, 92826, 75611, 6744, 72742, 17027, 70340, 56443, 114215]
[2024-12-02 19:24:22.172450] user = 74105 Cloud 196/568
[2024-12-02 19:24:22.192657] user = 74105 Local 196/568
[2024-12-02 19:24:22.272306] user = 74105 Local+ 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:25.138438] user = 74105 MPDA- 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6984430082256169
Training on augumented user 115257 0/50 current_auc = 0.6984430082256169
User 115257 AUC after training: 0.6981492361927144
User 115257 does not improve AUC. Reverting changes.
Training on augumented user 96583 1/50 current_auc = 0.6984430082256169
User 96583 AUC after training: 0.6975616921269095
User 96583 does not improve AUC. Reverting changes.
Training on augumented user 61430 2/50 current_auc = 0.6984430082256169
User 61430 AUC after training: 0.6990305522914219
User 61430 improves AUC. Keeping the model.
Training on augumented user 7730 3/50 current_auc = 0.6990305522914219
User 7730 AUC after training: 0.6984430082256169
User 7730 does not improve AUC. Reverting changes.
Training on augumented user 109521 4/50 current_auc = 0.6990305522914219
User 109521 AUC after training: 0.6990305522914219
User 109521 does not improve AUC. Reverting changes.
Training on augumented user 138106 5/50 current_auc = 0.6990305522914219
User 138106 AUC after training: 0.6988836662749706
User 138106 does not improve AUC. Reverting changes.
Training on augumented user 49978 6/50 current_auc = 0.6990305522914219
User 49978 AUC after training: 0.6982961222091657
User 49978 does not improve AUC. Reverting changes.
Training on augumented user 22205 7/50 current_auc = 0.6990305522914219
User 22205 AUC after training: 0.6974148061104584
User 22205 does not improve AUC. Reverting changes.
Training on augumented user 47108 8/50 current_auc = 0.6990305522914219
User 47108 AUC after training: 0.6985898942420681
User 47108 does not improve AUC. Reverting changes.
Training on augumented user 123355 9/50 current_auc = 0.6990305522914219
User 123355 AUC after training: 0.698443008225617
User 123355 does not improve AUC. Reverting changes.
Training on augumented user 11564 10/50 current_auc = 0.6990305522914219
User 11564 AUC after training: 0.6993243243243243
User 11564 improves AUC. Keeping the model.
Training on augumented user 118445 11/50 current_auc = 0.6993243243243243
User 118445 AUC after training: 0.6990305522914219
User 118445 does not improve AUC. Reverting changes.
Training on augumented user 103734 12/50 current_auc = 0.6993243243243243
User 103734 AUC after training: 0.6971210340775558
User 103734 does not improve AUC. Reverting changes.
Training on augumented user 34989 13/50 current_auc = 0.6993243243243243
User 34989 AUC after training: 0.699177438307873
User 34989 does not improve AUC. Reverting changes.
Training on augumented user 52445 14/50 current_auc = 0.6993243243243243
User 52445 AUC after training: 0.6987367802585194
User 52445 does not improve AUC. Reverting changes.
Training on augumented user 137063 15/50 current_auc = 0.6993243243243243
User 137063 AUC after training: 0.699764982373678
User 137063 improves AUC. Keeping the model.
Training on augumented user 78139 16/50 current_auc = 0.699764982373678
User 78139 AUC after training: 0.6994712103407755
User 78139 does not improve AUC. Reverting changes.
Training on augumented user 3567 17/50 current_auc = 0.699764982373678
User 3567 AUC after training: 0.6988836662749707
User 3567 does not improve AUC. Reverting changes.
Training on augumented user 6517 18/50 current_auc = 0.699764982373678
User 6517 AUC after training: 0.6996180963572268
User 6517 does not improve AUC. Reverting changes.
Training on augumented user 58062 19/50 current_auc = 0.699764982373678
User 58062 AUC after training: 0.6981492361927144
User 58062 does not improve AUC. Reverting changes.
Training on augumented user 32446 20/50 current_auc = 0.699764982373678
User 32446 AUC after training: 0.6975616921269095
User 32446 does not improve AUC. Reverting changes.
Training on augumented user 97624 21/50 current_auc = 0.699764982373678
User 97624 AUC after training: 0.6996180963572268
User 97624 does not improve AUC. Reverting changes.
Training on augumented user 100280 22/50 current_auc = 0.699764982373678
User 100280 AUC after training: 0.6993243243243243
User 100280 does not improve AUC. Reverting changes.
Training on augumented user 1899 23/50 current_auc = 0.699764982373678
User 1899 AUC after training: 0.6991774383078732
User 1899 does not improve AUC. Reverting changes.
Training on augumented user 13696 24/50 current_auc = 0.699764982373678
User 13696 AUC after training: 0.6987367802585194
User 13696 does not improve AUC. Reverting changes.
Training on augumented user 37842 25/50 current_auc = 0.699764982373678
User 37842 AUC after training: 0.6999118683901293
User 37842 improves AUC. Keeping the model.
Training on augumented user 35826 26/50 current_auc = 0.6999118683901293
User 35826 AUC after training: 0.6999118683901292
User 35826 does not improve AUC. Reverting changes.
Training on augumented user 82301 27/50 current_auc = 0.6999118683901293
User 82301 AUC after training: 0.6987367802585194
User 82301 does not improve AUC. Reverting changes.
Training on augumented user 125583 28/50 current_auc = 0.6999118683901293
User 125583 AUC after training: 0.7002056404230317
User 125583 improves AUC. Keeping the model.
Training on augumented user 83359 29/50 current_auc = 0.7002056404230317
User 83359 AUC after training: 0.6993243243243243
User 83359 does not improve AUC. Reverting changes.
Training on augumented user 75880 30/50 current_auc = 0.7002056404230317
User 75880 AUC after training: 0.699030552291422
User 75880 does not improve AUC. Reverting changes.
Training on augumented user 31848 31/50 current_auc = 0.7002056404230317
User 31848 AUC after training: 0.6994712103407756
User 31848 does not improve AUC. Reverting changes.
Training on augumented user 125166 32/50 current_auc = 0.7002056404230317
User 125166 AUC after training: 0.6985898942420683
User 125166 does not improve AUC. Reverting changes.
Training on augumented user 89506 33/50 current_auc = 0.7002056404230317
User 89506 AUC after training: 0.7004994124559343
User 89506 improves AUC. Keeping the model.
Training on augumented user 101011 34/50 current_auc = 0.7004994124559343
User 101011 AUC after training: 0.6996180963572268
User 101011 does not improve AUC. Reverting changes.
Training on augumented user 44341 35/50 current_auc = 0.7004994124559343
User 44341 AUC after training: 0.699177438307873
User 44341 does not improve AUC. Reverting changes.
Training on augumented user 28545 36/50 current_auc = 0.7004994124559343
User 28545 AUC after training: 0.700352526439483
User 28545 does not improve AUC. Reverting changes.
Training on augumented user 15592 37/50 current_auc = 0.7004994124559343
User 15592 AUC after training: 0.7000587544065806
User 15592 does not improve AUC. Reverting changes.
Training on augumented user 118754 38/50 current_auc = 0.7004994124559343
User 118754 AUC after training: 0.6993243243243243
User 118754 does not improve AUC. Reverting changes.
Training on augumented user 130778 39/50 current_auc = 0.7004994124559343
User 130778 AUC after training: 0.6996180963572268
User 130778 does not improve AUC. Reverting changes.
Training on augumented user 114120 40/50 current_auc = 0.7004994124559343
User 114120 AUC after training: 0.699764982373678
User 114120 does not improve AUC. Reverting changes.
Training on augumented user 94071 41/50 current_auc = 0.7004994124559343
User 94071 AUC after training: 0.7000587544065805
User 94071 does not improve AUC. Reverting changes.
Training on augumented user 92826 42/50 current_auc = 0.7004994124559343
User 92826 AUC after training: 0.700352526439483
User 92826 does not improve AUC. Reverting changes.
Training on augumented user 75611 43/50 current_auc = 0.7004994124559343
User 75611 AUC after training: 0.7002056404230317
User 75611 does not improve AUC. Reverting changes.
Training on augumented user 6744 44/50 current_auc = 0.7004994124559343
User 6744 AUC after training: 0.7000587544065805
User 6744 does not improve AUC. Reverting changes.
Training on augumented user 72742 45/50 current_auc = 0.7004994124559343
User 72742 AUC after training: 0.6999118683901293
User 72742 does not improve AUC. Reverting changes.
Training on augumented user 17027 46/50 current_auc = 0.7004994124559343
User 17027 AUC after training: 0.6994712103407756
User 17027 does not improve AUC. Reverting changes.
Training on augumented user 70340 47/50 current_auc = 0.7004994124559343
User 70340 AUC after training: 0.699177438307873
User 70340 does not improve AUC. Reverting changes.
Training on augumented user 56443 48/50 current_auc = 0.7004994124559343
User 56443 AUC after training: 0.7000587544065805
User 56443 does not improve AUC. Reverting changes.
Training on augumented user 114215 49/50 current_auc = 0.7004994124559343
User 114215 AUC after training: 0.7002056404230317
User 114215 does not improve AUC. Reverting changes.
[2024-12-02 19:24:59.892804] start test user 74119 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:00.493457] start test user 74119 197/568 recall augumented users by random, augumented_users = [14756, 51479, 63643, 56620, 33365, 133083, 126549, 75692, 96810, 28975, 61803, 133893, 70723, 86329, 58180, 69268, 21635, 7698, 55471, 110664, 20052, 86848, 115352, 124663, 80953, 107678, 62785, 65324, 78121, 113828, 14625, 37885, 115130, 3915, 45108, 109233, 109844, 79177, 97389, 112420, 134107, 86422, 44688, 95900, 80622, 41475, 20253, 23702, 15005, 89800]
[2024-12-02 19:25:00.509811] user = 74119 Cloud 197/568
[2024-12-02 19:25:00.533924] user = 74119 Local 197/568
[2024-12-02 19:25:00.626132] user = 74119 Local+ 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:03.551738] user = 74119 MPDA- 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.16666666666666666
Training on augumented user 14756 0/50 current_auc = 0.16666666666666666
User 14756 AUC after training: 0.16666666666666666
User 14756 does not improve AUC. Reverting changes.
Training on augumented user 51479 1/50 current_auc = 0.16666666666666666
User 51479 AUC after training: 0.16666666666666666
User 51479 does not improve AUC. Reverting changes.
Training on augumented user 63643 2/50 current_auc = 0.16666666666666666
User 63643 AUC after training: 0.16666666666666666
User 63643 does not improve AUC. Reverting changes.
Training on augumented user 56620 3/50 current_auc = 0.16666666666666666
User 56620 AUC after training: 0.16666666666666666
User 56620 does not improve AUC. Reverting changes.
Training on augumented user 33365 4/50 current_auc = 0.16666666666666666
User 33365 AUC after training: 0.16666666666666666
User 33365 does not improve AUC. Reverting changes.
Training on augumented user 133083 5/50 current_auc = 0.16666666666666666
User 133083 AUC after training: 0.16666666666666666
User 133083 does not improve AUC. Reverting changes.
Training on augumented user 126549 6/50 current_auc = 0.16666666666666666
User 126549 AUC after training: 0.16666666666666666
User 126549 does not improve AUC. Reverting changes.
Training on augumented user 75692 7/50 current_auc = 0.16666666666666666
User 75692 AUC after training: 0.16666666666666666
User 75692 does not improve AUC. Reverting changes.
Training on augumented user 96810 8/50 current_auc = 0.16666666666666666
User 96810 AUC after training: 0.16666666666666666
User 96810 does not improve AUC. Reverting changes.
Training on augumented user 28975 9/50 current_auc = 0.16666666666666666
User 28975 AUC after training: 0.16666666666666666
User 28975 does not improve AUC. Reverting changes.
Training on augumented user 61803 10/50 current_auc = 0.16666666666666666
User 61803 AUC after training: 0.16666666666666666
User 61803 does not improve AUC. Reverting changes.
Training on augumented user 133893 11/50 current_auc = 0.16666666666666666
User 133893 AUC after training: 0.16666666666666666
User 133893 does not improve AUC. Reverting changes.
Training on augumented user 70723 12/50 current_auc = 0.16666666666666666
User 70723 AUC after training: 0.16666666666666666
User 70723 does not improve AUC. Reverting changes.
Training on augumented user 86329 13/50 current_auc = 0.16666666666666666
User 86329 AUC after training: 0.16666666666666666
User 86329 does not improve AUC. Reverting changes.
Training on augumented user 58180 14/50 current_auc = 0.16666666666666666
User 58180 AUC after training: 0.16666666666666666
User 58180 does not improve AUC. Reverting changes.
Training on augumented user 69268 15/50 current_auc = 0.16666666666666666
User 69268 AUC after training: 0.16666666666666666
User 69268 does not improve AUC. Reverting changes.
Training on augumented user 21635 16/50 current_auc = 0.16666666666666666
User 21635 AUC after training: 0.16666666666666666
User 21635 does not improve AUC. Reverting changes.
Training on augumented user 7698 17/50 current_auc = 0.16666666666666666
User 7698 AUC after training: 0.16666666666666666
User 7698 does not improve AUC. Reverting changes.
Training on augumented user 55471 18/50 current_auc = 0.16666666666666666
User 55471 AUC after training: 0.16666666666666666
User 55471 does not improve AUC. Reverting changes.
Training on augumented user 110664 19/50 current_auc = 0.16666666666666666
User 110664 AUC after training: 0.16666666666666666
User 110664 does not improve AUC. Reverting changes.
Training on augumented user 20052 20/50 current_auc = 0.16666666666666666
User 20052 AUC after training: 0.16666666666666666
User 20052 does not improve AUC. Reverting changes.
Training on augumented user 86848 21/50 current_auc = 0.16666666666666666
User 86848 AUC after training: 0.16666666666666666
User 86848 does not improve AUC. Reverting changes.
Training on augumented user 115352 22/50 current_auc = 0.16666666666666666
User 115352 AUC after training: 0.16666666666666666
User 115352 does not improve AUC. Reverting changes.
Training on augumented user 124663 23/50 current_auc = 0.16666666666666666
User 124663 AUC after training: 0.16666666666666666
User 124663 does not improve AUC. Reverting changes.
Training on augumented user 80953 24/50 current_auc = 0.16666666666666666
User 80953 AUC after training: 0.16666666666666666
User 80953 does not improve AUC. Reverting changes.
Training on augumented user 107678 25/50 current_auc = 0.16666666666666666
User 107678 AUC after training: 0.16666666666666666
User 107678 does not improve AUC. Reverting changes.
Training on augumented user 62785 26/50 current_auc = 0.16666666666666666
User 62785 AUC after training: 0.16666666666666666
User 62785 does not improve AUC. Reverting changes.
Training on augumented user 65324 27/50 current_auc = 0.16666666666666666
User 65324 AUC after training: 0.16666666666666666
User 65324 does not improve AUC. Reverting changes.
Training on augumented user 78121 28/50 current_auc = 0.16666666666666666
User 78121 AUC after training: 0.16666666666666666
User 78121 does not improve AUC. Reverting changes.
Training on augumented user 113828 29/50 current_auc = 0.16666666666666666
User 113828 AUC after training: 0.16666666666666666
User 113828 does not improve AUC. Reverting changes.
Training on augumented user 14625 30/50 current_auc = 0.16666666666666666
User 14625 AUC after training: 0.16666666666666666
User 14625 does not improve AUC. Reverting changes.
Training on augumented user 37885 31/50 current_auc = 0.16666666666666666
User 37885 AUC after training: 0.16666666666666666
User 37885 does not improve AUC. Reverting changes.
Training on augumented user 115130 32/50 current_auc = 0.16666666666666666
User 115130 AUC after training: 0.16666666666666666
User 115130 does not improve AUC. Reverting changes.
Training on augumented user 3915 33/50 current_auc = 0.16666666666666666
User 3915 AUC after training: 0.16666666666666666
User 3915 does not improve AUC. Reverting changes.
Training on augumented user 45108 34/50 current_auc = 0.16666666666666666
User 45108 AUC after training: 0.16666666666666666
User 45108 does not improve AUC. Reverting changes.
Training on augumented user 109233 35/50 current_auc = 0.16666666666666666
User 109233 AUC after training: 0.16666666666666666
User 109233 does not improve AUC. Reverting changes.
Training on augumented user 109844 36/50 current_auc = 0.16666666666666666
User 109844 AUC after training: 0.16666666666666666
User 109844 does not improve AUC. Reverting changes.
Training on augumented user 79177 37/50 current_auc = 0.16666666666666666
User 79177 AUC after training: 0.16666666666666666
User 79177 does not improve AUC. Reverting changes.
Training on augumented user 97389 38/50 current_auc = 0.16666666666666666
User 97389 AUC after training: 0.16666666666666666
User 97389 does not improve AUC. Reverting changes.
Training on augumented user 112420 39/50 current_auc = 0.16666666666666666
User 112420 AUC after training: 0.16666666666666666
User 112420 does not improve AUC. Reverting changes.
Training on augumented user 134107 40/50 current_auc = 0.16666666666666666
User 134107 AUC after training: 0.16666666666666666
User 134107 does not improve AUC. Reverting changes.
Training on augumented user 86422 41/50 current_auc = 0.16666666666666666
User 86422 AUC after training: 0.16666666666666666
User 86422 does not improve AUC. Reverting changes.
Training on augumented user 44688 42/50 current_auc = 0.16666666666666666
User 44688 AUC after training: 0.16666666666666666
User 44688 does not improve AUC. Reverting changes.
Training on augumented user 95900 43/50 current_auc = 0.16666666666666666
User 95900 AUC after training: 0.16666666666666666
User 95900 does not improve AUC. Reverting changes.
Training on augumented user 80622 44/50 current_auc = 0.16666666666666666
User 80622 AUC after training: 0.16666666666666666
User 80622 does not improve AUC. Reverting changes.
Training on augumented user 41475 45/50 current_auc = 0.16666666666666666
User 41475 AUC after training: 0.16666666666666666
User 41475 does not improve AUC. Reverting changes.
Training on augumented user 20253 46/50 current_auc = 0.16666666666666666
User 20253 AUC after training: 0.16666666666666666
User 20253 does not improve AUC. Reverting changes.
Training on augumented user 23702 47/50 current_auc = 0.16666666666666666
User 23702 AUC after training: 0.16666666666666666
User 23702 does not improve AUC. Reverting changes.
Training on augumented user 15005 48/50 current_auc = 0.16666666666666666
User 15005 AUC after training: 0.16666666666666666
User 15005 does not improve AUC. Reverting changes.
Training on augumented user 89800 49/50 current_auc = 0.16666666666666666
User 89800 AUC after training: 0.16666666666666666
User 89800 does not improve AUC. Reverting changes.
[2024-12-02 19:25:31.121006] start test user 74122 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:31.655057] start test user 74122 198/568 recall augumented users by random, augumented_users = [125350, 61561, 124615, 85198, 17059, 41714, 65768, 102593, 73925, 68657, 2793, 63580, 22951, 70412, 115241, 120489, 123155, 29942, 45913, 80290, 121013, 136822, 93029, 89829, 114464, 137688, 33069, 101461, 122397, 118821, 122829, 38783, 9668, 65019, 123111, 51032, 112722, 41895, 57470, 115871, 45617, 62601, 89890, 7285, 99357, 54144, 86648, 23803, 16192, 41843]
[2024-12-02 19:25:31.683413] user = 74122 Cloud 198/568
[2024-12-02 19:25:31.697693] user = 74122 Local 198/568
[2024-12-02 19:25:31.748603] user = 74122 Local+ 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:34.383090] user = 74122 MPDA- 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7413029728020241
Training on augumented user 125350 0/50 current_auc = 0.7413029728020241
User 125350 AUC after training: 0.7406704617330804
User 125350 does not improve AUC. Reverting changes.
Training on augumented user 61561 1/50 current_auc = 0.7413029728020241
User 61561 AUC after training: 0.7419354838709677
User 61561 improves AUC. Keeping the model.
Training on augumented user 124615 2/50 current_auc = 0.7419354838709677
User 124615 AUC after training: 0.7425679949399114
User 124615 improves AUC. Keeping the model.
Training on augumented user 85198 3/50 current_auc = 0.7425679949399114
User 85198 AUC after training: 0.7413029728020241
User 85198 does not improve AUC. Reverting changes.
Training on augumented user 17059 4/50 current_auc = 0.7425679949399114
User 17059 AUC after training: 0.7413029728020241
User 17059 does not improve AUC. Reverting changes.
Training on augumented user 41714 5/50 current_auc = 0.7425679949399114
User 41714 AUC after training: 0.7419354838709679
User 41714 does not improve AUC. Reverting changes.
Training on augumented user 65768 6/50 current_auc = 0.7425679949399114
User 65768 AUC after training: 0.7413029728020241
User 65768 does not improve AUC. Reverting changes.
Training on augumented user 102593 7/50 current_auc = 0.7425679949399114
User 102593 AUC after training: 0.7425679949399114
User 102593 does not improve AUC. Reverting changes.
Training on augumented user 73925 8/50 current_auc = 0.7425679949399114
User 73925 AUC after training: 0.7432005060088551
User 73925 improves AUC. Keeping the model.
Training on augumented user 68657 9/50 current_auc = 0.7432005060088551
User 68657 AUC after training: 0.7419354838709677
User 68657 does not improve AUC. Reverting changes.
Training on augumented user 2793 10/50 current_auc = 0.7432005060088551
User 2793 AUC after training: 0.7419354838709677
User 2793 does not improve AUC. Reverting changes.
Training on augumented user 63580 11/50 current_auc = 0.7432005060088551
User 63580 AUC after training: 0.7438330170777989
User 63580 improves AUC. Keeping the model.
Training on augumented user 22951 12/50 current_auc = 0.7438330170777989
User 22951 AUC after training: 0.7438330170777989
User 22951 does not improve AUC. Reverting changes.
Training on augumented user 70412 13/50 current_auc = 0.7438330170777989
User 70412 AUC after training: 0.74573055028463
User 70412 improves AUC. Keeping the model.
Training on augumented user 115241 14/50 current_auc = 0.74573055028463
User 115241 AUC after training: 0.7463630613535738
User 115241 improves AUC. Keeping the model.
Training on augumented user 120489 15/50 current_auc = 0.7463630613535738
User 120489 AUC after training: 0.74573055028463
User 120489 does not improve AUC. Reverting changes.
Training on augumented user 123155 16/50 current_auc = 0.7463630613535738
User 123155 AUC after training: 0.7450980392156863
User 123155 does not improve AUC. Reverting changes.
Training on augumented user 29942 17/50 current_auc = 0.7463630613535738
User 29942 AUC after training: 0.7463630613535738
User 29942 does not improve AUC. Reverting changes.
Training on augumented user 45913 18/50 current_auc = 0.7463630613535738
User 45913 AUC after training: 0.7476280834914611
User 45913 improves AUC. Keeping the model.
Training on augumented user 80290 19/50 current_auc = 0.7476280834914611
User 80290 AUC after training: 0.7476280834914611
User 80290 does not improve AUC. Reverting changes.
Training on augumented user 121013 20/50 current_auc = 0.7476280834914611
User 121013 AUC after training: 0.7482605945604048
User 121013 improves AUC. Keeping the model.
Training on augumented user 136822 21/50 current_auc = 0.7482605945604048
User 136822 AUC after training: 0.7482605945604048
User 136822 does not improve AUC. Reverting changes.
Training on augumented user 93029 22/50 current_auc = 0.7482605945604048
User 93029 AUC after training: 0.7476280834914611
User 93029 does not improve AUC. Reverting changes.
Training on augumented user 89829 23/50 current_auc = 0.7482605945604048
User 89829 AUC after training: 0.7476280834914611
User 89829 does not improve AUC. Reverting changes.
Training on augumented user 114464 24/50 current_auc = 0.7482605945604048
User 114464 AUC after training: 0.7476280834914611
User 114464 does not improve AUC. Reverting changes.
Training on augumented user 137688 25/50 current_auc = 0.7482605945604048
User 137688 AUC after training: 0.7482605945604048
User 137688 does not improve AUC. Reverting changes.
Training on augumented user 33069 26/50 current_auc = 0.7482605945604048
User 33069 AUC after training: 0.74573055028463
User 33069 does not improve AUC. Reverting changes.
Training on augumented user 101461 27/50 current_auc = 0.7482605945604048
User 101461 AUC after training: 0.7476280834914611
User 101461 does not improve AUC. Reverting changes.
Training on augumented user 122397 28/50 current_auc = 0.7482605945604048
User 122397 AUC after training: 0.7476280834914611
User 122397 does not improve AUC. Reverting changes.
Training on augumented user 118821 29/50 current_auc = 0.7482605945604048
User 118821 AUC after training: 0.7463630613535737
User 118821 does not improve AUC. Reverting changes.
Training on augumented user 122829 30/50 current_auc = 0.7482605945604048
User 122829 AUC after training: 0.7476280834914611
User 122829 does not improve AUC. Reverting changes.
Training on augumented user 38783 31/50 current_auc = 0.7482605945604048
User 38783 AUC after training: 0.7476280834914611
User 38783 does not improve AUC. Reverting changes.
Training on augumented user 9668 32/50 current_auc = 0.7482605945604048
User 9668 AUC after training: 0.7469955724225175
User 9668 does not improve AUC. Reverting changes.
Training on augumented user 65019 33/50 current_auc = 0.7482605945604048
User 65019 AUC after training: 0.7482605945604048
User 65019 does not improve AUC. Reverting changes.
Training on augumented user 123111 34/50 current_auc = 0.7482605945604048
User 123111 AUC after training: 0.7469955724225175
User 123111 does not improve AUC. Reverting changes.
Training on augumented user 51032 35/50 current_auc = 0.7482605945604048
User 51032 AUC after training: 0.7476280834914611
User 51032 does not improve AUC. Reverting changes.
Training on augumented user 112722 36/50 current_auc = 0.7482605945604048
User 112722 AUC after training: 0.7482605945604048
User 112722 does not improve AUC. Reverting changes.
Training on augumented user 41895 37/50 current_auc = 0.7482605945604048
User 41895 AUC after training: 0.7476280834914611
User 41895 does not improve AUC. Reverting changes.
Training on augumented user 57470 38/50 current_auc = 0.7482605945604048
User 57470 AUC after training: 0.7482605945604048
User 57470 does not improve AUC. Reverting changes.
Training on augumented user 115871 39/50 current_auc = 0.7482605945604048
User 115871 AUC after training: 0.7482605945604048
User 115871 does not improve AUC. Reverting changes.
Training on augumented user 45617 40/50 current_auc = 0.7482605945604048
User 45617 AUC after training: 0.7482605945604048
User 45617 does not improve AUC. Reverting changes.
Training on augumented user 62601 41/50 current_auc = 0.7482605945604048
User 62601 AUC after training: 0.7463630613535738
User 62601 does not improve AUC. Reverting changes.
Training on augumented user 89890 42/50 current_auc = 0.7482605945604048
User 89890 AUC after training: 0.7469955724225175
User 89890 does not improve AUC. Reverting changes.
Training on augumented user 7285 43/50 current_auc = 0.7482605945604048
User 7285 AUC after training: 0.7476280834914611
User 7285 does not improve AUC. Reverting changes.
Training on augumented user 99357 44/50 current_auc = 0.7482605945604048
User 99357 AUC after training: 0.7482605945604048
User 99357 does not improve AUC. Reverting changes.
Training on augumented user 54144 45/50 current_auc = 0.7482605945604048
User 54144 AUC after training: 0.7482605945604048
User 54144 does not improve AUC. Reverting changes.
Training on augumented user 86648 46/50 current_auc = 0.7482605945604048
User 86648 AUC after training: 0.7457305502846299
User 86648 does not improve AUC. Reverting changes.
Training on augumented user 23803 47/50 current_auc = 0.7482605945604048
User 23803 AUC after training: 0.7476280834914611
User 23803 does not improve AUC. Reverting changes.
Training on augumented user 16192 48/50 current_auc = 0.7482605945604048
User 16192 AUC after training: 0.7482605945604048
User 16192 does not improve AUC. Reverting changes.
Training on augumented user 41843 49/50 current_auc = 0.7482605945604048
User 41843 AUC after training: 0.7469955724225174
User 41843 does not improve AUC. Reverting changes.
[2024-12-02 19:26:05.409534] start test user 74142 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:05.851312] start test user 74142 199/568 recall augumented users by random, augumented_users = [22352, 122438, 14101, 33555, 65914, 115651, 21200, 56101, 46385, 68459, 122532, 121868, 101967, 47231, 53737, 49600, 36488, 120676, 86973, 51782, 79364, 119619, 80371, 124352, 102686, 1552, 58508, 41691, 30462, 9632, 91793, 18135, 88293, 79833, 15549, 130675, 54821, 62846, 46195, 127018, 10796, 106783, 73067, 102961, 109073, 4857, 50642, 43204, 63439, 78250]
[2024-12-02 19:26:05.890719] user = 74142 Cloud 199/568
[2024-12-02 19:26:06.114893] user = 74142 Local 199/568
[2024-12-02 19:26:07.327222] user = 74142 Local+ 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:10.231930] user = 74142 MPDA- 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5950968309018124
Training on augumented user 22352 0/50 current_auc = 0.5950968309018124
User 22352 AUC after training: 0.5949121181142736
User 22352 does not improve AUC. Reverting changes.
Training on augumented user 122438 1/50 current_auc = 0.5950968309018124
User 122438 AUC after training: 0.5948961945981064
User 122438 does not improve AUC. Reverting changes.
Training on augumented user 14101 2/50 current_auc = 0.5950968309018124
User 14101 AUC after training: 0.5947815452817029
User 14101 does not improve AUC. Reverting changes.
Training on augumented user 33555 3/50 current_auc = 0.5950968309018124
User 33555 AUC after training: 0.595138232043847
User 33555 improves AUC. Keeping the model.
Training on augumented user 65914 4/50 current_auc = 0.595138232043847
User 65914 AUC after training: 0.5950299521339104
User 65914 does not improve AUC. Reverting changes.
Training on augumented user 115651 5/50 current_auc = 0.595138232043847
User 115651 AUC after training: 0.595405747115455
User 115651 improves AUC. Keeping the model.
Training on augumented user 21200 6/50 current_auc = 0.595405747115455
User 21200 AUC after training: 0.595924853742504
User 21200 improves AUC. Keeping the model.
Training on augumented user 56101 7/50 current_auc = 0.595924853742504
User 56101 AUC after training: 0.595768803284066
User 56101 does not improve AUC. Reverting changes.
Training on augumented user 46385 8/50 current_auc = 0.595924853742504
User 46385 AUC after training: 0.5961382288591437
User 46385 improves AUC. Keeping the model.
Training on augumented user 68459 9/50 current_auc = 0.5961382288591437
User 68459 AUC after training: 0.5960777194977087
User 68459 does not improve AUC. Reverting changes.
Training on augumented user 122532 10/50 current_auc = 0.5961382288591437
User 122532 AUC after training: 0.5962974640208152
User 122532 improves AUC. Keeping the model.
Training on augumented user 121868 11/50 current_auc = 0.5962974640208152
User 121868 AUC after training: 0.5953850465444378
User 121868 does not improve AUC. Reverting changes.
Training on augumented user 101967 12/50 current_auc = 0.5962974640208152
User 101967 AUC after training: 0.5963324957563829
User 101967 improves AUC. Keeping the model.
Training on augumented user 47231 13/50 current_auc = 0.5963324957563829
User 47231 AUC after training: 0.5964630685889536
User 47231 improves AUC. Keeping the model.
Training on augumented user 53737 14/50 current_auc = 0.5964630685889536
User 53737 AUC after training: 0.5963643427887172
User 53737 does not improve AUC. Reverting changes.
Training on augumented user 49600 15/50 current_auc = 0.5964630685889536
User 49600 AUC after training: 0.5963356804596164
User 49600 does not improve AUC. Reverting changes.
Training on augumented user 36488 16/50 current_auc = 0.5964630685889536
User 36488 AUC after training: 0.5962815405046481
User 36488 does not improve AUC. Reverting changes.
Training on augumented user 120676 17/50 current_auc = 0.5964630685889536
User 120676 AUC after training: 0.5962528781755473
User 120676 does not improve AUC. Reverting changes.
Training on augumented user 86973 18/50 current_auc = 0.5964630685889536
User 86973 AUC after training: 0.5961605217817778
User 86973 does not improve AUC. Reverting changes.
Training on augumented user 51782 19/50 current_auc = 0.5964630685889536
User 51782 AUC after training: 0.5963834510081178
User 51782 does not improve AUC. Reverting changes.
Training on augumented user 79364 20/50 current_auc = 0.5964630685889536
User 79364 AUC after training: 0.5963388651628498
User 79364 does not improve AUC. Reverting changes.
Training on augumented user 119619 21/50 current_auc = 0.5964630685889536
User 119619 AUC after training: 0.5963643427887173
User 119619 does not improve AUC. Reverting changes.
Training on augumented user 80371 22/50 current_auc = 0.5964630685889536
User 80371 AUC after training: 0.5963675274919507
User 80371 does not improve AUC. Reverting changes.
Training on augumented user 124352 23/50 current_auc = 0.5964630685889536
User 124352 AUC after training: 0.5964981003245212
User 124352 improves AUC. Keeping the model.
Training on augumented user 102686 24/50 current_auc = 0.5964981003245212
User 102686 AUC after training: 0.5962433240658469
User 102686 does not improve AUC. Reverting changes.
Training on augumented user 1552 25/50 current_auc = 0.5964981003245212
User 1552 AUC after training: 0.5961318594526769
User 1552 does not improve AUC. Reverting changes.
Training on augumented user 58508 26/50 current_auc = 0.5964981003245212
User 58508 AUC after training: 0.5965395014665558
User 58508 improves AUC. Keeping the model.
Training on augumented user 41691 27/50 current_auc = 0.5965395014665558
User 41691 AUC after training: 0.5965904567182907
User 41691 improves AUC. Keeping the model.
Training on augumented user 30462 28/50 current_auc = 0.5965904567182907
User 30462 AUC after training: 0.5965745332021236
User 30462 does not improve AUC. Reverting changes.
Training on augumented user 9632 29/50 current_auc = 0.5965904567182907
User 9632 AUC after training: 0.5966191190473915
User 9632 improves AUC. Keeping the model.
Training on augumented user 91793 30/50 current_auc = 0.5966191190473915
User 91793 AUC after training: 0.5961286747494434
User 91793 does not improve AUC. Reverting changes.
Training on augumented user 18135 31/50 current_auc = 0.5966191190473915
User 18135 AUC after training: 0.5965872720150573
User 18135 does not improve AUC. Reverting changes.
Training on augumented user 88293 32/50 current_auc = 0.5966191190473915
User 88293 AUC after training: 0.5966127496409247
User 88293 does not improve AUC. Reverting changes.
Training on augumented user 79833 33/50 current_auc = 0.5966191190473915
User 79833 AUC after training: 0.596600010827991
User 79833 does not improve AUC. Reverting changes.
Training on augumented user 15549 34/50 current_auc = 0.5966191190473915
User 15549 AUC after training: 0.5965713484988902
User 15549 does not improve AUC. Reverting changes.
Training on augumented user 130675 35/50 current_auc = 0.5966191190473915
User 130675 AUC after training: 0.5966541507829592
User 130675 improves AUC. Keeping the model.
Training on augumented user 54821 36/50 current_auc = 0.5966541507829592
User 54821 AUC after training: 0.5966254884538584
User 54821 does not improve AUC. Reverting changes.
Training on augumented user 62846 37/50 current_auc = 0.5966541507829592
User 62846 AUC after training: 0.5966732590023599
User 62846 improves AUC. Keeping the model.
Training on augumented user 46195 38/50 current_auc = 0.5966732590023599
User 46195 AUC after training: 0.5967879083187633
User 46195 improves AUC. Keeping the model.
Training on augumented user 127018 39/50 current_auc = 0.5967879083187633
User 127018 AUC after training: 0.596940774073968
User 127018 improves AUC. Keeping the model.
Training on augumented user 10796 40/50 current_auc = 0.596940774073968
User 10796 AUC after training: 0.5971445950809073
User 10796 improves AUC. Keeping the model.
Training on augumented user 106783 41/50 current_auc = 0.5971445950809073
User 106783 AUC after training: 0.5973707090104808
User 106783 improves AUC. Keeping the model.
Training on augumented user 73067 42/50 current_auc = 0.5973707090104808
User 73067 AUC after training: 0.5970140222483368
User 73067 does not improve AUC. Reverting changes.
Training on augumented user 102961 43/50 current_auc = 0.5973707090104808
User 102961 AUC after training: 0.5973261231652128
User 102961 does not improve AUC. Reverting changes.
Training on augumented user 109073 44/50 current_auc = 0.5973707090104808
User 109073 AUC after training: 0.5973293078684463
User 109073 does not improve AUC. Reverting changes.
Training on augumented user 4857 45/50 current_auc = 0.5973707090104808
User 4857 AUC after training: 0.5975904535335874
User 4857 improves AUC. Keeping the model.
Training on augumented user 50642 46/50 current_auc = 0.5975904535335874
User 50642 AUC after training: 0.5974949124365846
User 50642 does not improve AUC. Reverting changes.
Training on augumented user 43204 47/50 current_auc = 0.5975904535335874
User 43204 AUC after training: 0.5975076512495183
User 43204 does not improve AUC. Reverting changes.
Training on augumented user 63439 48/50 current_auc = 0.5975904535335874
User 63439 AUC after training: 0.5975363135786191
User 63439 does not improve AUC. Reverting changes.
Training on augumented user 78250 49/50 current_auc = 0.5975904535335874
User 78250 AUC after training: 0.5976000076432878
User 78250 improves AUC. Keeping the model.
[2024-12-02 19:26:48.165855] start test user 74164 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:49.152222] start test user 74164 200/568 recall augumented users by random, augumented_users = [39879, 102382, 40692, 52873, 89489, 6896, 37699, 131164, 106900, 66438, 92630, 37442, 83098, 128786, 30846, 135664, 42468, 60204, 98516, 71066, 50468, 98249, 62647, 52107, 28536, 21798, 37015, 3458, 84493, 57845, 54380, 105390, 95950, 123276, 45001, 120953, 9639, 51897, 79593, 47748, 102700, 104256, 23183, 54280, 134168, 210, 62571, 84811, 98149, 42125]
[2024-12-02 19:26:49.190534] user = 74164 Cloud 200/568
[2024-12-02 19:26:49.211489] user = 74164 Local 200/568
[2024-12-02 19:26:49.260138] user = 74164 Local+ 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:51.100801] user = 74164 MPDA- 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5512995896032832
Training on augumented user 39879 0/50 current_auc = 0.5512995896032832
User 39879 AUC after training: 0.5512995896032832
User 39879 does not improve AUC. Reverting changes.
Training on augumented user 102382 1/50 current_auc = 0.5512995896032832
User 102382 AUC after training: 0.5512995896032832
User 102382 does not improve AUC. Reverting changes.
Training on augumented user 40692 2/50 current_auc = 0.5512995896032832
User 40692 AUC after training: 0.5554035567715458
User 40692 improves AUC. Keeping the model.
Training on augumented user 52873 3/50 current_auc = 0.5554035567715458
User 52873 AUC after training: 0.5567715458276334
User 52873 improves AUC. Keeping the model.
Training on augumented user 89489 4/50 current_auc = 0.5567715458276334
User 89489 AUC after training: 0.5567715458276334
User 89489 does not improve AUC. Reverting changes.
Training on augumented user 6896 5/50 current_auc = 0.5567715458276334
User 6896 AUC after training: 0.5581395348837209
User 6896 improves AUC. Keeping the model.
Training on augumented user 37699 6/50 current_auc = 0.5581395348837209
User 37699 AUC after training: 0.5567715458276334
User 37699 does not improve AUC. Reverting changes.
Training on augumented user 131164 7/50 current_auc = 0.5581395348837209
User 131164 AUC after training: 0.5567715458276334
User 131164 does not improve AUC. Reverting changes.
Training on augumented user 106900 8/50 current_auc = 0.5581395348837209
User 106900 AUC after training: 0.5581395348837209
User 106900 does not improve AUC. Reverting changes.
Training on augumented user 66438 9/50 current_auc = 0.5581395348837209
User 66438 AUC after training: 0.5608755129958961
User 66438 improves AUC. Keeping the model.
Training on augumented user 92630 10/50 current_auc = 0.5608755129958961
User 92630 AUC after training: 0.5622435020519836
User 92630 improves AUC. Keeping the model.
Training on augumented user 37442 11/50 current_auc = 0.5622435020519836
User 37442 AUC after training: 0.5636114911080712
User 37442 improves AUC. Keeping the model.
Training on augumented user 83098 12/50 current_auc = 0.5636114911080712
User 83098 AUC after training: 0.5608755129958961
User 83098 does not improve AUC. Reverting changes.
Training on augumented user 128786 13/50 current_auc = 0.5636114911080712
User 128786 AUC after training: 0.5581395348837209
User 128786 does not improve AUC. Reverting changes.
Training on augumented user 30846 14/50 current_auc = 0.5636114911080712
User 30846 AUC after training: 0.5608755129958961
User 30846 does not improve AUC. Reverting changes.
Training on augumented user 135664 15/50 current_auc = 0.5636114911080712
User 135664 AUC after training: 0.5608755129958961
User 135664 does not improve AUC. Reverting changes.
Training on augumented user 42468 16/50 current_auc = 0.5636114911080712
User 42468 AUC after training: 0.5595075239398085
User 42468 does not improve AUC. Reverting changes.
Training on augumented user 60204 17/50 current_auc = 0.5636114911080712
User 60204 AUC after training: 0.5595075239398085
User 60204 does not improve AUC. Reverting changes.
Training on augumented user 98516 18/50 current_auc = 0.5636114911080712
User 98516 AUC after training: 0.5649794801641588
User 98516 improves AUC. Keeping the model.
Training on augumented user 71066 19/50 current_auc = 0.5649794801641588
User 71066 AUC after training: 0.5595075239398085
User 71066 does not improve AUC. Reverting changes.
Training on augumented user 50468 20/50 current_auc = 0.5649794801641588
User 50468 AUC after training: 0.5567715458276334
User 50468 does not improve AUC. Reverting changes.
Training on augumented user 98249 21/50 current_auc = 0.5649794801641588
User 98249 AUC after training: 0.5595075239398085
User 98249 does not improve AUC. Reverting changes.
Training on augumented user 62647 22/50 current_auc = 0.5649794801641588
User 62647 AUC after training: 0.5581395348837209
User 62647 does not improve AUC. Reverting changes.
Training on augumented user 52107 23/50 current_auc = 0.5649794801641588
User 52107 AUC after training: 0.5608755129958961
User 52107 does not improve AUC. Reverting changes.
Training on augumented user 28536 24/50 current_auc = 0.5649794801641588
User 28536 AUC after training: 0.5649794801641588
User 28536 does not improve AUC. Reverting changes.
Training on augumented user 21798 25/50 current_auc = 0.5649794801641588
User 21798 AUC after training: 0.558139534883721
User 21798 does not improve AUC. Reverting changes.
Training on augumented user 37015 26/50 current_auc = 0.5649794801641588
User 37015 AUC after training: 0.5608755129958961
User 37015 does not improve AUC. Reverting changes.
Training on augumented user 3458 27/50 current_auc = 0.5649794801641588
User 3458 AUC after training: 0.5622435020519837
User 3458 does not improve AUC. Reverting changes.
Training on augumented user 84493 28/50 current_auc = 0.5649794801641588
User 84493 AUC after training: 0.5567715458276334
User 84493 does not improve AUC. Reverting changes.
Training on augumented user 57845 29/50 current_auc = 0.5649794801641588
User 57845 AUC after training: 0.5595075239398085
User 57845 does not improve AUC. Reverting changes.
Training on augumented user 54380 30/50 current_auc = 0.5649794801641588
User 54380 AUC after training: 0.5581395348837209
User 54380 does not improve AUC. Reverting changes.
Training on augumented user 105390 31/50 current_auc = 0.5649794801641588
User 105390 AUC after training: 0.5608755129958961
User 105390 does not improve AUC. Reverting changes.
Training on augumented user 95950 32/50 current_auc = 0.5649794801641588
User 95950 AUC after training: 0.5595075239398085
User 95950 does not improve AUC. Reverting changes.
Training on augumented user 123276 33/50 current_auc = 0.5649794801641588
User 123276 AUC after training: 0.5622435020519837
User 123276 does not improve AUC. Reverting changes.
Training on augumented user 45001 34/50 current_auc = 0.5649794801641588
User 45001 AUC after training: 0.5581395348837209
User 45001 does not improve AUC. Reverting changes.
Training on augumented user 120953 35/50 current_auc = 0.5649794801641588
User 120953 AUC after training: 0.5567715458276334
User 120953 does not improve AUC. Reverting changes.
Training on augumented user 9639 36/50 current_auc = 0.5649794801641588
User 9639 AUC after training: 0.5595075239398085
User 9639 does not improve AUC. Reverting changes.
Training on augumented user 51897 37/50 current_auc = 0.5649794801641588
User 51897 AUC after training: 0.5608755129958961
User 51897 does not improve AUC. Reverting changes.
Training on augumented user 79593 38/50 current_auc = 0.5649794801641588
User 79593 AUC after training: 0.5595075239398085
User 79593 does not improve AUC. Reverting changes.
Training on augumented user 47748 39/50 current_auc = 0.5649794801641588
User 47748 AUC after training: 0.560875512995896
User 47748 does not improve AUC. Reverting changes.
Training on augumented user 102700 40/50 current_auc = 0.5649794801641588
User 102700 AUC after training: 0.5622435020519836
User 102700 does not improve AUC. Reverting changes.
Training on augumented user 104256 41/50 current_auc = 0.5649794801641588
User 104256 AUC after training: 0.5608755129958961
User 104256 does not improve AUC. Reverting changes.
Training on augumented user 23183 42/50 current_auc = 0.5649794801641588
User 23183 AUC after training: 0.5636114911080712
User 23183 does not improve AUC. Reverting changes.
Training on augumented user 54280 43/50 current_auc = 0.5649794801641588
User 54280 AUC after training: 0.5622435020519837
User 54280 does not improve AUC. Reverting changes.
Training on augumented user 134168 44/50 current_auc = 0.5649794801641588
User 134168 AUC after training: 0.5622435020519836
User 134168 does not improve AUC. Reverting changes.
Training on augumented user 210 45/50 current_auc = 0.5649794801641588
User 210 AUC after training: 0.5636114911080712
User 210 does not improve AUC. Reverting changes.
Training on augumented user 62571 46/50 current_auc = 0.5649794801641588
User 62571 AUC after training: 0.5622435020519836
User 62571 does not improve AUC. Reverting changes.
Training on augumented user 84811 47/50 current_auc = 0.5649794801641588
User 84811 AUC after training: 0.5567715458276334
User 84811 does not improve AUC. Reverting changes.
Training on augumented user 98149 48/50 current_auc = 0.5649794801641588
User 98149 AUC after training: 0.5608755129958961
User 98149 does not improve AUC. Reverting changes.
Training on augumented user 42125 49/50 current_auc = 0.5649794801641588
User 42125 AUC after training: 0.5649794801641588
User 42125 does not improve AUC. Reverting changes.
[2024-12-02 19:27:17.955444] start test user 74175 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:18.481572] start test user 74175 201/568 recall augumented users by random, augumented_users = [69011, 31865, 137599, 56499, 21450, 100564, 25260, 41670, 28, 118157, 25755, 3880, 21789, 9834, 106178, 44128, 16269, 119298, 41867, 79157, 39764, 86432, 123031, 46628, 91038, 37170, 46967, 4598, 82044, 102343, 62302, 63372, 99430, 86846, 57755, 107428, 33023, 100649, 113688, 84242, 69950, 5190, 36449, 69793, 112114, 2046, 133548, 4886, 37467, 131811]
[2024-12-02 19:27:18.505300] user = 74175 Cloud 201/568
[2024-12-02 19:27:18.567477] user = 74175 Local 201/568
[2024-12-02 19:27:18.753939] user = 74175 Local+ 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:21.319859] user = 74175 MPDA- 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7626706110693714
Training on augumented user 69011 0/50 current_auc = 0.7626706110693714
User 69011 AUC after training: 0.7628036563986977
User 69011 improves AUC. Keeping the model.
Training on augumented user 31865 1/50 current_auc = 0.7628036563986977
User 31865 AUC after training: 0.7628271349862259
User 31865 improves AUC. Keeping the model.
Training on augumented user 137599 2/50 current_auc = 0.7628271349862259
User 137599 AUC after training: 0.763108878036564
User 137599 improves AUC. Keeping the model.
Training on augumented user 56499 3/50 current_auc = 0.763108878036564
User 56499 AUC after training: 0.7629132231404959
User 56499 does not improve AUC. Reverting changes.
Training on augumented user 21450 4/50 current_auc = 0.763108878036564
User 21450 AUC after training: 0.7630775732531931
User 21450 does not improve AUC. Reverting changes.
Training on augumented user 100564 5/50 current_auc = 0.763108878036564
User 100564 AUC after training: 0.7629210493363385
User 100564 does not improve AUC. Reverting changes.
Training on augumented user 25260 6/50 current_auc = 0.763108878036564
User 25260 AUC after training: 0.763421925870273
User 25260 improves AUC. Keeping the model.
Training on augumented user 41670 7/50 current_auc = 0.763421925870273
User 41670 AUC after training: 0.7632654019534184
User 41670 does not improve AUC. Reverting changes.
Training on augumented user 28 8/50 current_auc = 0.763421925870273
User 28 AUC after training: 0.7634845354370148
User 28 improves AUC. Keeping the model.
Training on augumented user 118157 9/50 current_auc = 0.7634845354370148
User 118157 AUC after training: 0.7633749686952167
User 118157 does not improve AUC. Reverting changes.
Training on augumented user 25755 10/50 current_auc = 0.7634845354370148
User 25755 AUC after training: 0.7633280115201603
User 25755 does not improve AUC. Reverting changes.
Training on augumented user 3880 11/50 current_auc = 0.7634845354370148
User 3880 AUC after training: 0.7635080140245429
User 3880 improves AUC. Keeping the model.
Training on augumented user 21789 12/50 current_auc = 0.7635080140245429
User 21789 AUC after training: 0.7638054094665665
User 21789 improves AUC. Keeping the model.
Training on augumented user 9834 13/50 current_auc = 0.7638054094665665
User 9834 AUC after training: 0.7637897570748811
User 9834 does not improve AUC. Reverting changes.
Training on augumented user 106178 14/50 current_auc = 0.7638054094665665
User 106178 AUC after training: 0.763648885549712
User 106178 does not improve AUC. Reverting changes.
Training on augumented user 44128 15/50 current_auc = 0.7638054094665665
User 44128 AUC after training: 0.7637741046831956
User 44128 does not improve AUC. Reverting changes.
Training on augumented user 16269 16/50 current_auc = 0.7638054094665665
User 16269 AUC after training: 0.7639619333834209
User 16269 improves AUC. Keeping the model.
Training on augumented user 119298 17/50 current_auc = 0.7639619333834209
User 119298 AUC after training: 0.76367236413724
User 119298 does not improve AUC. Reverting changes.
Training on augumented user 41867 18/50 current_auc = 0.7639619333834209
User 41867 AUC after training: 0.76367236413724
User 41867 does not improve AUC. Reverting changes.
Training on augumented user 79157 19/50 current_auc = 0.7639619333834209
User 79157 AUC after training: 0.7639697595792636
User 79157 improves AUC. Keeping the model.
Training on augumented user 39764 20/50 current_auc = 0.7639697595792636
User 39764 AUC after training: 0.7634062734785875
User 39764 does not improve AUC. Reverting changes.
Training on augumented user 86432 21/50 current_auc = 0.7639697595792636
User 86432 AUC after training: 0.7640401953418483
User 86432 improves AUC. Keeping the model.
Training on augumented user 123031 22/50 current_auc = 0.7640401953418483
User 123031 AUC after training: 0.7639775857751064
User 123031 does not improve AUC. Reverting changes.
Training on augumented user 46628 23/50 current_auc = 0.7640401953418483
User 46628 AUC after training: 0.7636567117455547
User 46628 does not improve AUC. Reverting changes.
Training on augumented user 91038 24/50 current_auc = 0.7640401953418483
User 91038 AUC after training: 0.7635706235912847
User 91038 does not improve AUC. Reverting changes.
Training on augumented user 37170 25/50 current_auc = 0.7640401953418483
User 37170 AUC after training: 0.7637897570748811
User 37170 does not improve AUC. Reverting changes.
Training on augumented user 46967 26/50 current_auc = 0.7640401953418483
User 46967 AUC after training: 0.7638367142499374
User 46967 does not improve AUC. Reverting changes.
Training on augumented user 4598 27/50 current_auc = 0.7640401953418483
User 4598 AUC after training: 0.7636332331580264
User 4598 does not improve AUC. Reverting changes.
Training on augumented user 82044 28/50 current_auc = 0.7640401953418483
User 82044 AUC after training: 0.7639384547958927
User 82044 does not improve AUC. Reverting changes.
Training on augumented user 102343 29/50 current_auc = 0.7640401953418483
User 102343 AUC after training: 0.763961933383421
User 102343 does not improve AUC. Reverting changes.
Training on augumented user 62302 30/50 current_auc = 0.7640401953418483
User 62302 AUC after training: 0.7638993238166792
User 62302 does not improve AUC. Reverting changes.
Training on augumented user 63372 31/50 current_auc = 0.7640401953418483
User 63372 AUC after training: 0.7637741046831956
User 63372 does not improve AUC. Reverting changes.
Training on augumented user 99430 32/50 current_auc = 0.7640401953418483
User 99430 AUC after training: 0.7638054094665665
User 99430 does not improve AUC. Reverting changes.
Training on augumented user 86846 33/50 current_auc = 0.7640401953418483
User 86846 AUC after training: 0.7636958427247682
User 86846 does not improve AUC. Reverting changes.
Training on augumented user 57755 34/50 current_auc = 0.7640401953418483
User 57755 AUC after training: 0.7639775857751064
User 57755 does not improve AUC. Reverting changes.
Training on augumented user 107428 35/50 current_auc = 0.7640401953418483
User 107428 AUC after training: 0.7639384547958928
User 107428 does not improve AUC. Reverting changes.
Training on augumented user 33023 36/50 current_auc = 0.7640401953418483
User 33023 AUC after training: 0.76410280490859
User 33023 improves AUC. Keeping the model.
Training on augumented user 100649 37/50 current_auc = 0.76410280490859
User 100649 AUC after training: 0.7641575882794891
User 100649 improves AUC. Keeping the model.
Training on augumented user 113688 38/50 current_auc = 0.7641575882794891
User 113688 AUC after training: 0.7640167167543201
User 113688 does not improve AUC. Reverting changes.
Training on augumented user 84242 39/50 current_auc = 0.7641575882794891
User 84242 AUC after training: 0.7641262834961182
User 84242 does not improve AUC. Reverting changes.
Training on augumented user 69950 40/50 current_auc = 0.7641575882794891
User 69950 AUC after training: 0.7643454169797145
User 69950 improves AUC. Keeping the model.
Training on augumented user 5190 41/50 current_auc = 0.7643454169797145
User 5190 AUC after training: 0.7641732406711745
User 5190 does not improve AUC. Reverting changes.
Training on augumented user 36449 42/50 current_auc = 0.7643454169797145
User 36449 AUC after training: 0.7644393313298272
User 36449 improves AUC. Keeping the model.
Training on augumented user 69793 43/50 current_auc = 0.7644393313298272
User 69793 AUC after training: 0.7637584522915102
User 69793 does not improve AUC. Reverting changes.
Training on augumented user 112114 44/50 current_auc = 0.7644393313298272
User 112114 AUC after training: 0.7644862885048836
User 112114 improves AUC. Keeping the model.
Training on augumented user 2046 45/50 current_auc = 0.7644862885048836
User 2046 AUC after training: 0.7645958552466816
User 2046 improves AUC. Keeping the model.
Training on augumented user 133548 46/50 current_auc = 0.7645958552466816
User 133548 AUC after training: 0.764642812421738
User 133548 improves AUC. Keeping the model.
Training on augumented user 4886 47/50 current_auc = 0.764642812421738
User 4886 AUC after training: 0.7643767217630855
User 4886 does not improve AUC. Reverting changes.
Training on augumented user 37467 48/50 current_auc = 0.764642812421738
User 37467 AUC after training: 0.7643767217630852
User 37467 does not improve AUC. Reverting changes.
Training on augumented user 131811 49/50 current_auc = 0.764642812421738
User 131811 AUC after training: 0.7644080265464563
User 131811 does not improve AUC. Reverting changes.
[2024-12-02 19:27:52.006826] start test user 74196 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:52.657741] start test user 74196 202/568 recall augumented users by random, augumented_users = [64146, 67311, 78993, 14300, 73959, 111815, 68104, 32338, 86407, 126375, 92963, 86350, 91321, 64867, 56452, 37645, 12595, 53470, 135871, 107569, 3237, 123134, 85522, 97985, 114275, 10150, 88303, 93494, 54217, 31737, 133272, 33293, 104890, 118668, 130593, 79746, 105117, 65587, 100795, 101662, 87713, 45499, 103353, 41568, 86847, 31971, 104009, 133751, 65288, 91365]
[2024-12-02 19:27:52.674715] user = 74196 Cloud 202/568
[2024-12-02 19:27:52.701153] user = 74196 Local 202/568
[2024-12-02 19:27:52.768805] user = 74196 Local+ 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:55.142636] user = 74196 MPDA- 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5324264473267954
Training on augumented user 64146 0/50 current_auc = 0.5324264473267954
User 64146 AUC after training: 0.5322682695349573
User 64146 does not improve AUC. Reverting changes.
Training on augumented user 67311 1/50 current_auc = 0.5324264473267954
User 67311 AUC after training: 0.5334546029737426
User 67311 improves AUC. Keeping the model.
Training on augumented user 78993 2/50 current_auc = 0.5334546029737426
User 78993 AUC after training: 0.5344827586206897
User 78993 improves AUC. Keeping the model.
Training on augumented user 14300 3/50 current_auc = 0.5344827586206897
User 14300 AUC after training: 0.5345618475166086
User 14300 improves AUC. Keeping the model.
Training on augumented user 73959 4/50 current_auc = 0.5345618475166086
User 73959 AUC after training: 0.5346409364125276
User 73959 improves AUC. Keeping the model.
Training on augumented user 111815 5/50 current_auc = 0.5346409364125276
User 111815 AUC after training: 0.5351154697880418
User 111815 improves AUC. Keeping the model.
Training on augumented user 68104 6/50 current_auc = 0.5351154697880418
User 68104 AUC after training: 0.5359063587472319
User 68104 improves AUC. Keeping the model.
Training on augumented user 32338 7/50 current_auc = 0.5359063587472319
User 32338 AUC after training: 0.536697247706422
User 32338 improves AUC. Keeping the model.
Training on augumented user 86407 8/50 current_auc = 0.536697247706422
User 86407 AUC after training: 0.5359063587472319
User 86407 does not improve AUC. Reverting changes.
Training on augumented user 126375 9/50 current_auc = 0.536697247706422
User 126375 AUC after training: 0.5360645365390698
User 126375 does not improve AUC. Reverting changes.
Training on augumented user 92963 10/50 current_auc = 0.536697247706422
User 92963 AUC after training: 0.5386744701043974
User 92963 improves AUC. Keeping the model.
Training on augumented user 86350 11/50 current_auc = 0.5386744701043974
User 86350 AUC after training: 0.5380417589370453
User 86350 does not improve AUC. Reverting changes.
Training on augumented user 91321 12/50 current_auc = 0.5386744701043974
User 91321 AUC after training: 0.5394653590635875
User 91321 improves AUC. Keeping the model.
Training on augumented user 64867 13/50 current_auc = 0.5394653590635875
User 64867 AUC after training: 0.5398608035431826
User 64867 improves AUC. Keeping the model.
Training on augumented user 56452 14/50 current_auc = 0.5398608035431826
User 56452 AUC after training: 0.5400980702309396
User 56452 improves AUC. Keeping the model.
Training on augumented user 37645 15/50 current_auc = 0.5400980702309396
User 37645 AUC after training: 0.5400980702309396
User 37645 does not improve AUC. Reverting changes.
Training on augumented user 12595 16/50 current_auc = 0.5400980702309396
User 12595 AUC after training: 0.5398608035431824
User 12595 does not improve AUC. Reverting changes.
Training on augumented user 53470 17/50 current_auc = 0.5400980702309396
User 53470 AUC after training: 0.5402562480227775
User 53470 improves AUC. Keeping the model.
Training on augumented user 135871 18/50 current_auc = 0.5402562480227775
User 135871 AUC after training: 0.5400980702309396
User 135871 does not improve AUC. Reverting changes.
Training on augumented user 107569 19/50 current_auc = 0.5402562480227775
User 107569 AUC after training: 0.5403353369186966
User 107569 improves AUC. Keeping the model.
Training on augumented user 3237 20/50 current_auc = 0.5403353369186966
User 3237 AUC after training: 0.5406516925023727
User 3237 improves AUC. Keeping the model.
Training on augumented user 123134 21/50 current_auc = 0.5406516925023727
User 123134 AUC after training: 0.5404144258146156
User 123134 does not improve AUC. Reverting changes.
Training on augumented user 85522 22/50 current_auc = 0.5406516925023727
User 85522 AUC after training: 0.5407307813982917
User 85522 improves AUC. Keeping the model.
Training on augumented user 97985 23/50 current_auc = 0.5407307813982917
User 97985 AUC after training: 0.5397026257513444
User 97985 does not improve AUC. Reverting changes.
Training on augumented user 114275 24/50 current_auc = 0.5407307813982917
User 114275 AUC after training: 0.5402562480227776
User 114275 does not improve AUC. Reverting changes.
Training on augumented user 10150 25/50 current_auc = 0.5407307813982917
User 10150 AUC after training: 0.5408098702942107
User 10150 improves AUC. Keeping the model.
Training on augumented user 88303 26/50 current_auc = 0.5408098702942107
User 88303 AUC after training: 0.5412053147738057
User 88303 improves AUC. Keeping the model.
Training on augumented user 93494 27/50 current_auc = 0.5412053147738057
User 93494 AUC after training: 0.5414030370136033
User 93494 improves AUC. Keeping the model.
Training on augumented user 54217 28/50 current_auc = 0.5414030370136033
User 54217 AUC after training: 0.5414821259095223
User 54217 improves AUC. Keeping the model.
Training on augumented user 31737 29/50 current_auc = 0.5414821259095223
User 31737 AUC after training: 0.5408494147421703
User 31737 does not improve AUC. Reverting changes.
Training on augumented user 133272 30/50 current_auc = 0.5414821259095223
User 133272 AUC after training: 0.5410866814299272
User 133272 does not improve AUC. Reverting changes.
Training on augumented user 33293 31/50 current_auc = 0.5414821259095223
User 33293 AUC after training: 0.5414821259095223
User 33293 does not improve AUC. Reverting changes.
Training on augumented user 104890 32/50 current_auc = 0.5414821259095223
User 104890 AUC after training: 0.5400585257829801
User 104890 does not improve AUC. Reverting changes.
Training on augumented user 118668 33/50 current_auc = 0.5414821259095223
User 118668 AUC after training: 0.5413239481176843
User 118668 does not improve AUC. Reverting changes.
Training on augumented user 130593 34/50 current_auc = 0.5414821259095223
User 130593 AUC after training: 0.5412844036697247
User 130593 does not improve AUC. Reverting changes.
Training on augumented user 79746 35/50 current_auc = 0.5414821259095223
User 79746 AUC after training: 0.5416403037013603
User 79746 improves AUC. Keeping the model.
Training on augumented user 105117 36/50 current_auc = 0.5416403037013603
User 105117 AUC after training: 0.5392280923758304
User 105117 does not improve AUC. Reverting changes.
Training on augumented user 65587 37/50 current_auc = 0.5416403037013603
User 65587 AUC after training: 0.5411657703258462
User 65587 does not improve AUC. Reverting changes.
Training on augumented user 100795 38/50 current_auc = 0.5416403037013603
User 100795 AUC after training: 0.5414821259095224
User 100795 does not improve AUC. Reverting changes.
Training on augumented user 101662 39/50 current_auc = 0.5416403037013603
User 101662 AUC after training: 0.5412448592217652
User 101662 does not improve AUC. Reverting changes.
Training on augumented user 87713 40/50 current_auc = 0.5416403037013603
User 87713 AUC after training: 0.5414821259095224
User 87713 does not improve AUC. Reverting changes.
Training on augumented user 45499 41/50 current_auc = 0.5416403037013603
User 45499 AUC after training: 0.5410075925340082
User 45499 does not improve AUC. Reverting changes.
Training on augumented user 103353 42/50 current_auc = 0.5416403037013603
User 103353 AUC after training: 0.5409285036380892
User 103353 does not improve AUC. Reverting changes.
Training on augumented user 41568 43/50 current_auc = 0.5416403037013603
User 41568 AUC after training: 0.5409285036380892
User 41568 does not improve AUC. Reverting changes.
Training on augumented user 86847 44/50 current_auc = 0.5416403037013603
User 86847 AUC after training: 0.5413634925656438
User 86847 does not improve AUC. Reverting changes.
Training on augumented user 31971 45/50 current_auc = 0.5416403037013603
User 31971 AUC after training: 0.5410866814299272
User 31971 does not improve AUC. Reverting changes.
Training on augumented user 104009 46/50 current_auc = 0.5416403037013603
User 104009 AUC after training: 0.5414030370136033
User 104009 does not improve AUC. Reverting changes.
Training on augumented user 133751 47/50 current_auc = 0.5416403037013603
User 133751 AUC after training: 0.5418775703891173
User 133751 improves AUC. Keeping the model.
Training on augumented user 65288 48/50 current_auc = 0.5418775703891173
User 65288 AUC after training: 0.5378835811452072
User 65288 does not improve AUC. Reverting changes.
Training on augumented user 91365 49/50 current_auc = 0.5418775703891173
User 91365 AUC after training: 0.5414821259095223
User 91365 does not improve AUC. Reverting changes.
[2024-12-02 19:28:24.353133] start test user 74201 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:25.012347] start test user 74201 203/568 recall augumented users by random, augumented_users = [1986, 61577, 16285, 97782, 115201, 69401, 27878, 73984, 458, 30724, 120830, 125800, 127323, 14527, 137205, 55471, 129950, 133646, 13903, 81183, 121889, 56725, 127463, 57539, 101477, 105670, 110264, 85043, 114359, 29229, 17444, 79320, 90837, 96773, 107984, 19887, 12351, 46515, 4731, 107755, 128446, 27044, 53297, 12816, 96311, 93021, 136443, 7821, 1548, 65443]
[2024-12-02 19:28:25.028035] user = 74201 Cloud 203/568
[2024-12-02 19:28:25.050588] user = 74201 Local 203/568
[2024-12-02 19:28:25.160829] user = 74201 Local+ 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:27.991972] user = 74201 MPDA- 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4886731391585761
Training on augumented user 1986 0/50 current_auc = 0.4886731391585761
User 1986 AUC after training: 0.4850561583856844
User 1986 does not improve AUC. Reverting changes.
Training on augumented user 61577 1/50 current_auc = 0.4886731391585761
User 61577 AUC after training: 0.4875309347039787
User 61577 does not improve AUC. Reverting changes.
Training on augumented user 16285 2/50 current_auc = 0.4886731391585761
User 16285 AUC after training: 0.48695983247668
User 16285 does not improve AUC. Reverting changes.
Training on augumented user 97782 3/50 current_auc = 0.4886731391585761
User 97782 AUC after training: 0.48638873024938134
User 97782 does not improve AUC. Reverting changes.
Training on augumented user 115201 4/50 current_auc = 0.4886731391585761
User 115201 AUC after training: 0.48810203693127735
User 115201 does not improve AUC. Reverting changes.
Training on augumented user 69401 5/50 current_auc = 0.4886731391585761
User 69401 AUC after training: 0.48886350656767563
User 69401 improves AUC. Keeping the model.
Training on augumented user 27878 6/50 current_auc = 0.48886350656767563
User 27878 AUC after training: 0.4877213021130782
User 27878 does not improve AUC. Reverting changes.
Training on augumented user 73984 7/50 current_auc = 0.48886350656767563
User 73984 AUC after training: 0.4913382828859699
User 73984 improves AUC. Keeping the model.
Training on augumented user 458 8/50 current_auc = 0.4913382828859699
User 458 AUC after training: 0.4917190177041691
User 458 improves AUC. Keeping the model.
Training on augumented user 30724 9/50 current_auc = 0.4917190177041691
User 30724 AUC after training: 0.48962497620407386
User 30724 does not improve AUC. Reverting changes.
Training on augumented user 120830 10/50 current_auc = 0.4917190177041691
User 120830 AUC after training: 0.4915286502950695
User 120830 does not improve AUC. Reverting changes.
Training on augumented user 125800 11/50 current_auc = 0.4917190177041691
User 125800 AUC after training: 0.4920997525223682
User 125800 improves AUC. Keeping the model.
Training on augumented user 127323 12/50 current_auc = 0.4920997525223682
User 127323 AUC after training: 0.48924424138587475
User 127323 does not improve AUC. Reverting changes.
Training on augumented user 14527 13/50 current_auc = 0.4920997525223682
User 14527 AUC after training: 0.48981534361317347
User 14527 does not improve AUC. Reverting changes.
Training on augumented user 137205 14/50 current_auc = 0.4920997525223682
User 137205 AUC after training: 0.490005711022273
User 137205 does not improve AUC. Reverting changes.
Training on augumented user 55471 15/50 current_auc = 0.4920997525223682
User 55471 AUC after training: 0.49190938511326865
User 55471 does not improve AUC. Reverting changes.
Training on augumented user 129950 16/50 current_auc = 0.4920997525223682
User 129950 AUC after training: 0.49324195697696555
User 129950 improves AUC. Keeping the model.
Training on augumented user 133646 17/50 current_auc = 0.49324195697696555
User 133646 AUC after training: 0.48848277174947646
User 133646 does not improve AUC. Reverting changes.
Training on augumented user 13903 18/50 current_auc = 0.49324195697696555
User 13903 AUC after training: 0.49343232438606516
User 13903 improves AUC. Keeping the model.
Training on augumented user 81183 19/50 current_auc = 0.49343232438606516
User 81183 AUC after training: 0.4934323243860651
User 81183 does not improve AUC. Reverting changes.
Training on augumented user 121889 20/50 current_auc = 0.49343232438606516
User 121889 AUC after training: 0.49114791547687037
User 121889 does not improve AUC. Reverting changes.
Training on augumented user 56725 21/50 current_auc = 0.49343232438606516
User 56725 AUC after training: 0.49324195697696555
User 56725 does not improve AUC. Reverting changes.
Training on augumented user 127463 22/50 current_auc = 0.49343232438606516
User 127463 AUC after training: 0.49438416143156294
User 127463 improves AUC. Keeping the model.
Training on augumented user 57539 23/50 current_auc = 0.49438416143156294
User 57539 AUC after training: 0.49343232438606505
User 57539 does not improve AUC. Reverting changes.
Training on augumented user 101477 24/50 current_auc = 0.49438416143156294
User 101477 AUC after training: 0.49590710070435945
User 101477 improves AUC. Keeping the model.
Training on augumented user 105670 25/50 current_auc = 0.49590710070435945
User 105670 AUC after training: 0.4953359984770608
User 105670 does not improve AUC. Reverting changes.
Training on augumented user 110264 26/50 current_auc = 0.49590710070435945
User 110264 AUC after training: 0.4947648962497621
User 110264 does not improve AUC. Reverting changes.
Training on augumented user 85043 27/50 current_auc = 0.49590710070435945
User 85043 AUC after training: 0.4919093851132686
User 85043 does not improve AUC. Reverting changes.
Training on augumented user 114359 28/50 current_auc = 0.49590710070435945
User 114359 AUC after training: 0.49495526365886167
User 114359 does not improve AUC. Reverting changes.
Training on augumented user 29229 29/50 current_auc = 0.49590710070435945
User 29229 AUC after training: 0.49514563106796117
User 29229 does not improve AUC. Reverting changes.
Training on augumented user 17444 30/50 current_auc = 0.49590710070435945
User 17444 AUC after training: 0.48943460879497436
User 17444 does not improve AUC. Reverting changes.
Training on augumented user 79320 31/50 current_auc = 0.49590710070435945
User 79320 AUC after training: 0.49514563106796117
User 79320 does not improve AUC. Reverting changes.
Training on augumented user 90837 32/50 current_auc = 0.49590710070435945
User 90837 AUC after training: 0.4901960784313726
User 90837 does not improve AUC. Reverting changes.
Training on augumented user 96773 33/50 current_auc = 0.49590710070435945
User 96773 AUC after training: 0.4865790976584809
User 96773 does not improve AUC. Reverting changes.
Training on augumented user 107984 34/50 current_auc = 0.49590710070435945
User 107984 AUC after training: 0.4953359984770608
User 107984 does not improve AUC. Reverting changes.
Training on augumented user 19887 35/50 current_auc = 0.49590710070435945
User 19887 AUC after training: 0.496097468113459
User 19887 improves AUC. Keeping the model.
Training on augumented user 12351 36/50 current_auc = 0.496097468113459
User 12351 AUC after training: 0.49229011993146776
User 12351 does not improve AUC. Reverting changes.
Training on augumented user 46515 37/50 current_auc = 0.496097468113459
User 46515 AUC after training: 0.496097468113459
User 46515 does not improve AUC. Reverting changes.
Training on augumented user 4731 38/50 current_auc = 0.496097468113459
User 4731 AUC after training: 0.49571673329525984
User 4731 does not improve AUC. Reverting changes.
Training on augumented user 107755 39/50 current_auc = 0.496097468113459
User 107755 AUC after training: 0.49190938511326865
User 107755 does not improve AUC. Reverting changes.
Training on augumented user 128446 40/50 current_auc = 0.496097468113459
User 128446 AUC after training: 0.4959071007043594
User 128446 does not improve AUC. Reverting changes.
Training on augumented user 27044 41/50 current_auc = 0.496097468113459
User 27044 AUC after training: 0.496097468113459
User 27044 does not improve AUC. Reverting changes.
Training on augumented user 53297 42/50 current_auc = 0.496097468113459
User 53297 AUC after training: 0.4957167332952599
User 53297 does not improve AUC. Reverting changes.
Training on augumented user 12816 43/50 current_auc = 0.496097468113459
User 12816 AUC after training: 0.4962878355225586
User 12816 improves AUC. Keeping the model.
Training on augumented user 96311 44/50 current_auc = 0.4962878355225586
User 96311 AUC after training: 0.4945745288406625
User 96311 does not improve AUC. Reverting changes.
Training on augumented user 93021 45/50 current_auc = 0.4962878355225586
User 93021 AUC after training: 0.4966685703407577
User 93021 improves AUC. Keeping the model.
Training on augumented user 136443 46/50 current_auc = 0.4966685703407577
User 136443 AUC after training: 0.49743003997715596
User 136443 improves AUC. Keeping the model.
Training on augumented user 7821 47/50 current_auc = 0.49743003997715596
User 7821 AUC after training: 0.4974300399771559
User 7821 does not improve AUC. Reverting changes.
Training on augumented user 1548 48/50 current_auc = 0.49743003997715596
User 1548 AUC after training: 0.49476489624976205
User 1548 does not improve AUC. Reverting changes.
Training on augumented user 65443 49/50 current_auc = 0.49743003997715596
User 65443 AUC after training: 0.4974300399771559
User 65443 does not improve AUC. Reverting changes.
[2024-12-02 19:28:56.684977] start test user 74204 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:57.255641] start test user 74204 204/568 recall augumented users by random, augumented_users = [125660, 29651, 109390, 38754, 31129, 53751, 77820, 43298, 53697, 27313, 89513, 68498, 125597, 131188, 18180, 132747, 112808, 124700, 49317, 46499, 96153, 127866, 110952, 70841, 39862, 135393, 124337, 86687, 117049, 111442, 93914, 73378, 29115, 76872, 34561, 85864, 126709, 61784, 69843, 77157, 56931, 58937, 63506, 11750, 132268, 43392, 17253, 58168, 13715, 92025]
[2024-12-02 19:28:57.283840] user = 74204 Cloud 204/568
[2024-12-02 19:28:57.335658] user = 74204 Local 204/568
[2024-12-02 19:28:57.398714] user = 74204 Local+ 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:59.563931] user = 74204 MPDA- 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5446808510638298
Training on augumented user 125660 0/50 current_auc = 0.5446808510638298
User 125660 AUC after training: 0.5468085106382978
User 125660 improves AUC. Keeping the model.
Training on augumented user 29651 1/50 current_auc = 0.5468085106382978
User 29651 AUC after training: 0.5478723404255319
User 29651 improves AUC. Keeping the model.
Training on augumented user 109390 2/50 current_auc = 0.5478723404255319
User 109390 AUC after training: 0.548936170212766
User 109390 improves AUC. Keeping the model.
Training on augumented user 38754 3/50 current_auc = 0.548936170212766
User 38754 AUC after training: 0.55
User 38754 improves AUC. Keeping the model.
Training on augumented user 31129 4/50 current_auc = 0.55
User 31129 AUC after training: 0.551063829787234
User 31129 improves AUC. Keeping the model.
Training on augumented user 53751 5/50 current_auc = 0.551063829787234
User 53751 AUC after training: 0.5521276595744681
User 53751 improves AUC. Keeping the model.
Training on augumented user 77820 6/50 current_auc = 0.5521276595744681
User 77820 AUC after training: 0.553191489361702
User 77820 improves AUC. Keeping the model.
Training on augumented user 43298 7/50 current_auc = 0.553191489361702
User 43298 AUC after training: 0.55
User 43298 does not improve AUC. Reverting changes.
Training on augumented user 53697 8/50 current_auc = 0.553191489361702
User 53697 AUC after training: 0.5627659574468085
User 53697 improves AUC. Keeping the model.
Training on augumented user 27313 9/50 current_auc = 0.5627659574468085
User 27313 AUC after training: 0.5638297872340425
User 27313 improves AUC. Keeping the model.
Training on augumented user 89513 10/50 current_auc = 0.5638297872340425
User 89513 AUC after training: 0.5627659574468085
User 89513 does not improve AUC. Reverting changes.
Training on augumented user 68498 11/50 current_auc = 0.5638297872340425
User 68498 AUC after training: 0.5638297872340425
User 68498 does not improve AUC. Reverting changes.
Training on augumented user 125597 12/50 current_auc = 0.5638297872340425
User 125597 AUC after training: 0.5638297872340425
User 125597 does not improve AUC. Reverting changes.
Training on augumented user 131188 13/50 current_auc = 0.5638297872340425
User 131188 AUC after training: 0.5638297872340425
User 131188 does not improve AUC. Reverting changes.
Training on augumented user 18180 14/50 current_auc = 0.5638297872340425
User 18180 AUC after training: 0.5563829787234043
User 18180 does not improve AUC. Reverting changes.
Training on augumented user 132747 15/50 current_auc = 0.5638297872340425
User 132747 AUC after training: 0.5521276595744681
User 132747 does not improve AUC. Reverting changes.
Training on augumented user 112808 16/50 current_auc = 0.5638297872340425
User 112808 AUC after training: 0.5638297872340425
User 112808 does not improve AUC. Reverting changes.
Training on augumented user 124700 17/50 current_auc = 0.5638297872340425
User 124700 AUC after training: 0.5585106382978724
User 124700 does not improve AUC. Reverting changes.
Training on augumented user 49317 18/50 current_auc = 0.5638297872340425
User 49317 AUC after training: 0.5617021276595745
User 49317 does not improve AUC. Reverting changes.
Training on augumented user 46499 19/50 current_auc = 0.5638297872340425
User 46499 AUC after training: 0.5627659574468086
User 46499 does not improve AUC. Reverting changes.
Training on augumented user 96153 20/50 current_auc = 0.5638297872340425
User 96153 AUC after training: 0.5638297872340425
User 96153 does not improve AUC. Reverting changes.
Training on augumented user 127866 21/50 current_auc = 0.5638297872340425
User 127866 AUC after training: 0.5627659574468086
User 127866 does not improve AUC. Reverting changes.
Training on augumented user 110952 22/50 current_auc = 0.5638297872340425
User 110952 AUC after training: 0.5606382978723404
User 110952 does not improve AUC. Reverting changes.
Training on augumented user 70841 23/50 current_auc = 0.5638297872340425
User 70841 AUC after training: 0.5574468085106383
User 70841 does not improve AUC. Reverting changes.
Training on augumented user 39862 24/50 current_auc = 0.5638297872340425
User 39862 AUC after training: 0.5585106382978724
User 39862 does not improve AUC. Reverting changes.
Training on augumented user 135393 25/50 current_auc = 0.5638297872340425
User 135393 AUC after training: 0.5585106382978724
User 135393 does not improve AUC. Reverting changes.
Training on augumented user 124337 26/50 current_auc = 0.5638297872340425
User 124337 AUC after training: 0.5617021276595744
User 124337 does not improve AUC. Reverting changes.
Training on augumented user 86687 27/50 current_auc = 0.5638297872340425
User 86687 AUC after training: 0.5627659574468085
User 86687 does not improve AUC. Reverting changes.
Training on augumented user 117049 28/50 current_auc = 0.5638297872340425
User 117049 AUC after training: 0.5627659574468086
User 117049 does not improve AUC. Reverting changes.
Training on augumented user 111442 29/50 current_auc = 0.5638297872340425
User 111442 AUC after training: 0.5638297872340425
User 111442 does not improve AUC. Reverting changes.
Training on augumented user 93914 30/50 current_auc = 0.5638297872340425
User 93914 AUC after training: 0.5638297872340425
User 93914 does not improve AUC. Reverting changes.
Training on augumented user 73378 31/50 current_auc = 0.5638297872340425
User 73378 AUC after training: 0.5574468085106383
User 73378 does not improve AUC. Reverting changes.
Training on augumented user 29115 32/50 current_auc = 0.5638297872340425
User 29115 AUC after training: 0.5638297872340425
User 29115 does not improve AUC. Reverting changes.
Training on augumented user 76872 33/50 current_auc = 0.5638297872340425
User 76872 AUC after training: 0.5606382978723404
User 76872 does not improve AUC. Reverting changes.
Training on augumented user 34561 34/50 current_auc = 0.5638297872340425
User 34561 AUC after training: 0.5638297872340425
User 34561 does not improve AUC. Reverting changes.
Training on augumented user 85864 35/50 current_auc = 0.5638297872340425
User 85864 AUC after training: 0.5595744680851064
User 85864 does not improve AUC. Reverting changes.
Training on augumented user 126709 36/50 current_auc = 0.5638297872340425
User 126709 AUC after training: 0.5595744680851064
User 126709 does not improve AUC. Reverting changes.
Training on augumented user 61784 37/50 current_auc = 0.5638297872340425
User 61784 AUC after training: 0.5638297872340425
User 61784 does not improve AUC. Reverting changes.
Training on augumented user 69843 38/50 current_auc = 0.5638297872340425
User 69843 AUC after training: 0.5627659574468086
User 69843 does not improve AUC. Reverting changes.
Training on augumented user 77157 39/50 current_auc = 0.5638297872340425
User 77157 AUC after training: 0.5627659574468085
User 77157 does not improve AUC. Reverting changes.
Training on augumented user 56931 40/50 current_auc = 0.5638297872340425
User 56931 AUC after training: 0.5638297872340425
User 56931 does not improve AUC. Reverting changes.
Training on augumented user 58937 41/50 current_auc = 0.5638297872340425
User 58937 AUC after training: 0.5627659574468085
User 58937 does not improve AUC. Reverting changes.
Training on augumented user 63506 42/50 current_auc = 0.5638297872340425
User 63506 AUC after training: 0.5648936170212766
User 63506 improves AUC. Keeping the model.
Training on augumented user 11750 43/50 current_auc = 0.5648936170212766
User 11750 AUC after training: 0.5585106382978723
User 11750 does not improve AUC. Reverting changes.
Training on augumented user 132268 44/50 current_auc = 0.5648936170212766
User 132268 AUC after training: 0.5617021276595745
User 132268 does not improve AUC. Reverting changes.
Training on augumented user 43392 45/50 current_auc = 0.5648936170212766
User 43392 AUC after training: 0.5627659574468085
User 43392 does not improve AUC. Reverting changes.
Training on augumented user 17253 46/50 current_auc = 0.5648936170212766
User 17253 AUC after training: 0.5659574468085107
User 17253 improves AUC. Keeping the model.
Training on augumented user 58168 47/50 current_auc = 0.5659574468085107
User 58168 AUC after training: 0.5670212765957447
User 58168 improves AUC. Keeping the model.
Training on augumented user 13715 48/50 current_auc = 0.5670212765957447
User 13715 AUC after training: 0.5617021276595745
User 13715 does not improve AUC. Reverting changes.
Training on augumented user 92025 49/50 current_auc = 0.5670212765957447
User 92025 AUC after training: 0.5670212765957446
User 92025 does not improve AUC. Reverting changes.
[2024-12-02 19:29:33.268123] start test user 74208 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:33.684735] start test user 74208 205/568 recall augumented users by random, augumented_users = [74842, 10893, 53656, 51931, 49055, 23614, 24678, 27876, 126624, 251, 20741, 111125, 44756, 33585, 12317, 112527, 13655, 9303, 103226, 9194, 37254, 30320, 17581, 48322, 135689, 49340, 96916, 31931, 72189, 31889, 7056, 34716, 77865, 41009, 36851, 30570, 133162, 18868, 121559, 132514, 91001, 66694, 118899, 109039, 109854, 10678, 110892, 83081, 43398, 100799]
[2024-12-02 19:29:33.704645] user = 74208 Cloud 205/568
[2024-12-02 19:29:33.729154] user = 74208 Local 205/568
[2024-12-02 19:29:33.921487] user = 74208 Local+ 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:36.683970] user = 74208 MPDA- 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6174544873842223
Training on augumented user 74842 0/50 current_auc = 0.6174544873842223
User 74842 AUC after training: 0.6172149473011816
User 74842 does not improve AUC. Reverting changes.
Training on augumented user 10893 1/50 current_auc = 0.6174544873842223
User 10893 AUC after training: 0.6175343340785691
User 10893 improves AUC. Keeping the model.
Training on augumented user 53656 2/50 current_auc = 0.6175343340785691
User 53656 AUC after training: 0.6178537208559566
User 53656 improves AUC. Keeping the model.
Training on augumented user 51931 3/50 current_auc = 0.6178537208559566
User 51931 AUC after training: 0.6168157138294474
User 51931 does not improve AUC. Reverting changes.
Training on augumented user 49055 4/50 current_auc = 0.6178537208559566
User 49055 AUC after training: 0.6175343340785691
User 49055 does not improve AUC. Reverting changes.
Training on augumented user 23614 5/50 current_auc = 0.6178537208559566
User 23614 AUC after training: 0.6162567869690194
User 23614 does not improve AUC. Reverting changes.
Training on augumented user 24678 6/50 current_auc = 0.6178537208559566
User 24678 AUC after training: 0.6173746406898755
User 24678 does not improve AUC. Reverting changes.
Training on augumented user 27876 7/50 current_auc = 0.6178537208559566
User 27876 AUC after training: 0.6177738741616097
User 27876 does not improve AUC. Reverting changes.
Training on augumented user 126624 8/50 current_auc = 0.6178537208559566
User 126624 AUC after training: 0.6180134142446503
User 126624 improves AUC. Keeping the model.
Training on augumented user 251 9/50 current_auc = 0.6180134142446503
User 251 AUC after training: 0.6180932609389971
User 251 improves AUC. Keeping the model.
Training on augumented user 20741 10/50 current_auc = 0.6180932609389971
User 20741 AUC after training: 0.6184924944107314
User 20741 improves AUC. Keeping the model.
Training on augumented user 111125 11/50 current_auc = 0.6184924944107314
User 111125 AUC after training: 0.6179335675503035
User 111125 does not improve AUC. Reverting changes.
Training on augumented user 44756 12/50 current_auc = 0.6184924944107314
User 44756 AUC after training: 0.6185723411050783
User 44756 improves AUC. Keeping the model.
Training on augumented user 33585 13/50 current_auc = 0.6185723411050783
User 33585 AUC after training: 0.618732034493772
User 33585 improves AUC. Keeping the model.
Training on augumented user 12317 14/50 current_auc = 0.618732034493772
User 12317 AUC after training: 0.6180134142446503
User 12317 does not improve AUC. Reverting changes.
Training on augumented user 112527 15/50 current_auc = 0.618732034493772
User 112527 AUC after training: 0.6167358671351006
User 112527 does not improve AUC. Reverting changes.
Training on augumented user 13655 16/50 current_auc = 0.618732034493772
User 13655 AUC after training: 0.6188917278824657
User 13655 improves AUC. Keeping the model.
Training on augumented user 9303 17/50 current_auc = 0.6188917278824657
User 9303 AUC after training: 0.6188917278824657
User 9303 does not improve AUC. Reverting changes.
Training on augumented user 103226 18/50 current_auc = 0.6188917278824657
User 103226 AUC after training: 0.6186521877994251
User 103226 does not improve AUC. Reverting changes.
Training on augumented user 9194 19/50 current_auc = 0.6188917278824657
User 9194 AUC after training: 0.6189715745768125
User 9194 improves AUC. Keeping the model.
Training on augumented user 37254 20/50 current_auc = 0.6189715745768125
User 37254 AUC after training: 0.6186521877994251
User 37254 does not improve AUC. Reverting changes.
Training on augumented user 30320 21/50 current_auc = 0.6189715745768125
User 30320 AUC after training: 0.6193708080485467
User 30320 improves AUC. Keeping the model.
Training on augumented user 17581 22/50 current_auc = 0.6193708080485467
User 17581 AUC after training: 0.6196901948259341
User 17581 improves AUC. Keeping the model.
Training on augumented user 48322 23/50 current_auc = 0.6196901948259341
User 48322 AUC after training: 0.6197700415202811
User 48322 improves AUC. Keeping the model.
Training on augumented user 135689 24/50 current_auc = 0.6197700415202811
User 135689 AUC after training: 0.6192111146598531
User 135689 does not improve AUC. Reverting changes.
Training on augumented user 49340 25/50 current_auc = 0.6197700415202811
User 49340 AUC after training: 0.6196103481315873
User 49340 does not improve AUC. Reverting changes.
Training on augumented user 96916 26/50 current_auc = 0.6197700415202811
User 96916 AUC after training: 0.6200095816033216
User 96916 improves AUC. Keeping the model.
Training on augumented user 31931 27/50 current_auc = 0.6200095816033216
User 31931 AUC after training: 0.6200095816033215
User 31931 does not improve AUC. Reverting changes.
Training on augumented user 72189 28/50 current_auc = 0.6200095816033216
User 72189 AUC after training: 0.6198498882146279
User 72189 does not improve AUC. Reverting changes.
Training on augumented user 31889 29/50 current_auc = 0.6200095816033216
User 31889 AUC after training: 0.6195305014372405
User 31889 does not improve AUC. Reverting changes.
Training on augumented user 7056 30/50 current_auc = 0.6200095816033216
User 7056 AUC after training: 0.6172149473011816
User 7056 does not improve AUC. Reverting changes.
Training on augumented user 34716 31/50 current_auc = 0.6200095816033216
User 34716 AUC after training: 0.6184924944107313
User 34716 does not improve AUC. Reverting changes.
Training on augumented user 77865 32/50 current_auc = 0.6200095816033216
User 77865 AUC after training: 0.6193708080485468
User 77865 does not improve AUC. Reverting changes.
Training on augumented user 41009 33/50 current_auc = 0.6200095816033216
User 41009 AUC after training: 0.6196103481315873
User 41009 does not improve AUC. Reverting changes.
Training on augumented user 36851 34/50 current_auc = 0.6200095816033216
User 36851 AUC after training: 0.6192909613541999
User 36851 does not improve AUC. Reverting changes.
Training on augumented user 30570 35/50 current_auc = 0.6200095816033216
User 30570 AUC after training: 0.6188917278824656
User 30570 does not improve AUC. Reverting changes.
Training on augumented user 133162 36/50 current_auc = 0.6200095816033216
User 133162 AUC after training: 0.6195305014372405
User 133162 does not improve AUC. Reverting changes.
Training on augumented user 18868 37/50 current_auc = 0.6200095816033216
User 18868 AUC after training: 0.619211114659853
User 18868 does not improve AUC. Reverting changes.
Training on augumented user 121559 38/50 current_auc = 0.6200095816033216
User 121559 AUC after training: 0.6169754072181411
User 121559 does not improve AUC. Reverting changes.
Training on augumented user 132514 39/50 current_auc = 0.6200095816033216
User 132514 AUC after training: 0.6200095816033215
User 132514 does not improve AUC. Reverting changes.
Training on augumented user 91001 40/50 current_auc = 0.6200095816033216
User 91001 AUC after training: 0.6194506547428936
User 91001 does not improve AUC. Reverting changes.
Training on augumented user 66694 41/50 current_auc = 0.6200095816033216
User 66694 AUC after training: 0.6196901948259341
User 66694 does not improve AUC. Reverting changes.
Training on augumented user 118899 42/50 current_auc = 0.6200095816033216
User 118899 AUC after training: 0.6188118811881188
User 118899 does not improve AUC. Reverting changes.
Training on augumented user 109039 43/50 current_auc = 0.6200095816033216
User 109039 AUC after training: 0.6188917278824656
User 109039 does not improve AUC. Reverting changes.
Training on augumented user 109854 44/50 current_auc = 0.6200095816033216
User 109854 AUC after training: 0.619770041520281
User 109854 does not improve AUC. Reverting changes.
Training on augumented user 10678 45/50 current_auc = 0.6200095816033216
User 10678 AUC after training: 0.6135419993612264
User 10678 does not improve AUC. Reverting changes.
Training on augumented user 110892 46/50 current_auc = 0.6200095816033216
User 110892 AUC after training: 0.6192111146598531
User 110892 does not improve AUC. Reverting changes.
Training on augumented user 83081 47/50 current_auc = 0.6200095816033216
User 83081 AUC after training: 0.6180134142446503
User 83081 does not improve AUC. Reverting changes.
Training on augumented user 43398 48/50 current_auc = 0.6200095816033216
User 43398 AUC after training: 0.6201692749920154
User 43398 improves AUC. Keeping the model.
Training on augumented user 100799 49/50 current_auc = 0.6201692749920154
User 100799 AUC after training: 0.6194506547428936
User 100799 does not improve AUC. Reverting changes.
[2024-12-02 19:30:05.436638] start test user 74238 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:05.871101] start test user 74238 206/568 recall augumented users by random, augumented_users = [98992, 4592, 131535, 5665, 101075, 28555, 32091, 91198, 136413, 18465, 69065, 72856, 97776, 33146, 85360, 122730, 27314, 126718, 38961, 2782, 131178, 64399, 31969, 95612, 2545, 72419, 99939, 1122, 96932, 115186, 66908, 23495, 133440, 73319, 24929, 106054, 87090, 3894, 75246, 37255, 41042, 14149, 118101, 113659, 38905, 59474, 38738, 101437, 37136, 19643]
[2024-12-02 19:30:05.885966] user = 74238 Cloud 206/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:30:05.893917] user = 74238 Local 206/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:30:05.922030] user = 74238 Local+ 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:30:08.003326] user = 74238 MPDA- 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 98992 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98992 AUC after training: 0.5
User 98992 does not improve AUC. Reverting changes.
Training on augumented user 4592 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4592 AUC after training: 0.5
User 4592 does not improve AUC. Reverting changes.
Training on augumented user 131535 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131535 AUC after training: 0.5
User 131535 does not improve AUC. Reverting changes.
Training on augumented user 5665 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5665 AUC after training: 0.5
User 5665 does not improve AUC. Reverting changes.
Training on augumented user 101075 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101075 AUC after training: 0.5
User 101075 does not improve AUC. Reverting changes.
Training on augumented user 28555 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28555 AUC after training: 0.5
User 28555 does not improve AUC. Reverting changes.
Training on augumented user 32091 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32091 AUC after training: 0.5
User 32091 does not improve AUC. Reverting changes.
Training on augumented user 91198 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91198 AUC after training: 0.5
User 91198 does not improve AUC. Reverting changes.
Training on augumented user 136413 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136413 AUC after training: 0.5
User 136413 does not improve AUC. Reverting changes.
Training on augumented user 18465 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18465 AUC after training: 0.5
User 18465 does not improve AUC. Reverting changes.
Training on augumented user 69065 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69065 AUC after training: 0.5
User 69065 does not improve AUC. Reverting changes.
Training on augumented user 72856 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72856 AUC after training: 0.5
User 72856 does not improve AUC. Reverting changes.
Training on augumented user 97776 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97776 AUC after training: 0.5
User 97776 does not improve AUC. Reverting changes.
Training on augumented user 33146 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33146 AUC after training: 0.5
User 33146 does not improve AUC. Reverting changes.
Training on augumented user 85360 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85360 AUC after training: 0.5
User 85360 does not improve AUC. Reverting changes.
Training on augumented user 122730 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122730 AUC after training: 0.5
User 122730 does not improve AUC. Reverting changes.
Training on augumented user 27314 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27314 AUC after training: 0.5
User 27314 does not improve AUC. Reverting changes.
Training on augumented user 126718 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126718 AUC after training: 0.5
User 126718 does not improve AUC. Reverting changes.
Training on augumented user 38961 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38961 AUC after training: 0.5
User 38961 does not improve AUC. Reverting changes.
Training on augumented user 2782 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2782 AUC after training: 0.5
User 2782 does not improve AUC. Reverting changes.
Training on augumented user 131178 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131178 AUC after training: 0.5
User 131178 does not improve AUC. Reverting changes.
Training on augumented user 64399 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64399 AUC after training: 0.5
User 64399 does not improve AUC. Reverting changes.
Training on augumented user 31969 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31969 AUC after training: 0.5
User 31969 does not improve AUC. Reverting changes.
Training on augumented user 95612 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95612 AUC after training: 0.5
User 95612 does not improve AUC. Reverting changes.
Training on augumented user 2545 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2545 AUC after training: 0.5
User 2545 does not improve AUC. Reverting changes.
Training on augumented user 72419 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72419 AUC after training: 0.5
User 72419 does not improve AUC. Reverting changes.
Training on augumented user 99939 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99939 AUC after training: 0.5
User 99939 does not improve AUC. Reverting changes.
Training on augumented user 1122 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1122 AUC after training: 0.5
User 1122 does not improve AUC. Reverting changes.
Training on augumented user 96932 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96932 AUC after training: 0.5
User 96932 does not improve AUC. Reverting changes.
Training on augumented user 115186 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115186 AUC after training: 0.5
User 115186 does not improve AUC. Reverting changes.
Training on augumented user 66908 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66908 AUC after training: 0.5
User 66908 does not improve AUC. Reverting changes.
Training on augumented user 23495 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23495 AUC after training: 0.5
User 23495 does not improve AUC. Reverting changes.
Training on augumented user 133440 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133440 AUC after training: 0.5
User 133440 does not improve AUC. Reverting changes.
Training on augumented user 73319 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73319 AUC after training: 0.5
User 73319 does not improve AUC. Reverting changes.
Training on augumented user 24929 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24929 AUC after training: 0.5
User 24929 does not improve AUC. Reverting changes.
Training on augumented user 106054 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106054 AUC after training: 0.5
User 106054 does not improve AUC. Reverting changes.
Training on augumented user 87090 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87090 AUC after training: 0.5
User 87090 does not improve AUC. Reverting changes.
Training on augumented user 3894 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3894 AUC after training: 0.5
User 3894 does not improve AUC. Reverting changes.
Training on augumented user 75246 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75246 AUC after training: 0.5
User 75246 does not improve AUC. Reverting changes.
Training on augumented user 37255 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37255 AUC after training: 0.5
User 37255 does not improve AUC. Reverting changes.
Training on augumented user 41042 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41042 AUC after training: 0.5
User 41042 does not improve AUC. Reverting changes.
Training on augumented user 14149 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14149 AUC after training: 0.5
User 14149 does not improve AUC. Reverting changes.
Training on augumented user 118101 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118101 AUC after training: 0.5
User 118101 does not improve AUC. Reverting changes.
Training on augumented user 113659 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113659 AUC after training: 0.5
User 113659 does not improve AUC. Reverting changes.
Training on augumented user 38905 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38905 AUC after training: 0.5
User 38905 does not improve AUC. Reverting changes.
Training on augumented user 59474 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59474 AUC after training: 0.5
User 59474 does not improve AUC. Reverting changes.
Training on augumented user 38738 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38738 AUC after training: 0.5
User 38738 does not improve AUC. Reverting changes.
Training on augumented user 101437 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101437 AUC after training: 0.5
User 101437 does not improve AUC. Reverting changes.
Training on augumented user 37136 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37136 AUC after training: 0.5
User 37136 does not improve AUC. Reverting changes.
Training on augumented user 19643 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19643 AUC after training: 0.5
User 19643 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:30:40.874562] start test user 74260 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:41.678885] start test user 74260 207/568 recall augumented users by random, augumented_users = [13905, 108749, 119179, 10168, 65282, 95125, 49788, 51064, 31301, 47237, 52490, 116705, 53133, 26516, 116008, 123270, 119572, 97713, 29692, 25930, 13269, 17643, 53865, 136642, 132761, 137992, 21895, 44976, 46594, 70862, 67099, 37547, 123149, 6242, 120978, 120743, 34012, 44484, 66778, 88495, 108896, 115072, 11251, 56888, 99715, 123960, 58334, 101524, 30783, 53425]
[2024-12-02 19:30:41.696241] user = 74260 Cloud 207/568
[2024-12-02 19:30:41.740620] user = 74260 Local 207/568
[2024-12-02 19:30:41.817603] user = 74260 Local+ 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:43.573506] user = 74260 MPDA- 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8087106427270362
Training on augumented user 13905 0/50 current_auc = 0.8087106427270362
User 13905 AUC after training: 0.8089058027582617
User 13905 improves AUC. Keeping the model.
Training on augumented user 108749 1/50 current_auc = 0.8089058027582617
User 108749 AUC after training: 0.8090684361176165
User 108749 improves AUC. Keeping the model.
Training on augumented user 119179 2/50 current_auc = 0.8090684361176165
User 119179 AUC after training: 0.8090033827738746
User 119179 does not improve AUC. Reverting changes.
Training on augumented user 10168 3/50 current_auc = 0.8090684361176165
User 10168 AUC after training: 0.809328649492584
User 10168 improves AUC. Keeping the model.
Training on augumented user 65282 4/50 current_auc = 0.809328649492584
User 65282 AUC after training: 0.8095563361956805
User 65282 improves AUC. Keeping the model.
Training on augumented user 95125 5/50 current_auc = 0.8095563361956805
User 95125 AUC after training: 0.8094262295081966
User 95125 does not improve AUC. Reverting changes.
Training on augumented user 49788 6/50 current_auc = 0.8095563361956805
User 49788 AUC after training: 0.8096539162112932
User 49788 improves AUC. Keeping the model.
Training on augumented user 51064 7/50 current_auc = 0.8096539162112932
User 51064 AUC after training: 0.8095563361956803
User 51064 does not improve AUC. Reverting changes.
Training on augumented user 31301 8/50 current_auc = 0.8096539162112932
User 31301 AUC after training: 0.8096864428831643
User 31301 improves AUC. Keeping the model.
Training on augumented user 47237 9/50 current_auc = 0.8096864428831643
User 47237 AUC after training: 0.8097514962269061
User 47237 improves AUC. Keeping the model.
Training on augumented user 52490 10/50 current_auc = 0.8097514962269061
User 52490 AUC after training: 0.809751496226906
User 52490 does not improve AUC. Reverting changes.
Training on augumented user 116705 11/50 current_auc = 0.8097514962269061
User 116705 AUC after training: 0.8095888628675514
User 116705 does not improve AUC. Reverting changes.
Training on augumented user 53133 12/50 current_auc = 0.8097514962269061
User 53133 AUC after training: 0.8095563361956806
User 53133 does not improve AUC. Reverting changes.
Training on augumented user 26516 13/50 current_auc = 0.8097514962269061
User 26516 AUC after training: 0.8089058027582617
User 26516 does not improve AUC. Reverting changes.
Training on augumented user 116008 14/50 current_auc = 0.8097514962269061
User 116008 AUC after training: 0.8095563361956803
User 116008 does not improve AUC. Reverting changes.
Training on augumented user 123270 15/50 current_auc = 0.8097514962269061
User 123270 AUC after training: 0.809816549570648
User 123270 improves AUC. Keeping the model.
Training on augumented user 119572 16/50 current_auc = 0.809816549570648
User 119572 AUC after training: 0.8096864428831642
User 119572 does not improve AUC. Reverting changes.
Training on augumented user 97713 17/50 current_auc = 0.809816549570648
User 97713 AUC after training: 0.809751496226906
User 97713 does not improve AUC. Reverting changes.
Training on augumented user 29692 18/50 current_auc = 0.809816549570648
User 29692 AUC after training: 0.8095238095238095
User 29692 does not improve AUC. Reverting changes.
Training on augumented user 25930 19/50 current_auc = 0.809816549570648
User 25930 AUC after training: 0.8090033827738746
User 25930 does not improve AUC. Reverting changes.
Training on augumented user 13269 20/50 current_auc = 0.809816549570648
User 13269 AUC after training: 0.8097514962269059
User 13269 does not improve AUC. Reverting changes.
Training on augumented user 17643 21/50 current_auc = 0.809816549570648
User 17643 AUC after training: 0.8096864428831642
User 17643 does not improve AUC. Reverting changes.
Training on augumented user 53865 22/50 current_auc = 0.809816549570648
User 53865 AUC after training: 0.809784022898777
User 53865 does not improve AUC. Reverting changes.
Training on augumented user 136642 23/50 current_auc = 0.809816549570648
User 136642 AUC after training: 0.8084504293520687
User 136642 does not improve AUC. Reverting changes.
Training on augumented user 132761 24/50 current_auc = 0.809816549570648
User 132761 AUC after training: 0.8095238095238094
User 132761 does not improve AUC. Reverting changes.
Training on augumented user 137992 25/50 current_auc = 0.809816549570648
User 137992 AUC after training: 0.8092310694769711
User 137992 does not improve AUC. Reverting changes.
Training on augumented user 21895 26/50 current_auc = 0.809816549570648
User 21895 AUC after training: 0.8087106427270362
User 21895 does not improve AUC. Reverting changes.
Training on augumented user 44976 27/50 current_auc = 0.809816549570648
User 44976 AUC after training: 0.8093611761644548
User 44976 does not improve AUC. Reverting changes.
Training on augumented user 46594 28/50 current_auc = 0.809816549570648
User 46594 AUC after training: 0.8093937028363258
User 46594 does not improve AUC. Reverting changes.
Training on augumented user 70862 29/50 current_auc = 0.809816549570648
User 70862 AUC after training: 0.8091334894613583
User 70862 does not improve AUC. Reverting changes.
Training on augumented user 67099 30/50 current_auc = 0.809816549570648
User 67099 AUC after training: 0.8094262295081968
User 67099 does not improve AUC. Reverting changes.
Training on augumented user 37547 31/50 current_auc = 0.809816549570648
User 37547 AUC after training: 0.8099466562581317
User 37547 improves AUC. Keeping the model.
Training on augumented user 123149 32/50 current_auc = 0.8099466562581317
User 123149 AUC after training: 0.8086130627114233
User 123149 does not improve AUC. Reverting changes.
Training on augumented user 6242 33/50 current_auc = 0.8099466562581317
User 6242 AUC after training: 0.8097189695550351
User 6242 does not improve AUC. Reverting changes.
Training on augumented user 120978 34/50 current_auc = 0.8099466562581317
User 120978 AUC after training: 0.809784022898777
User 120978 does not improve AUC. Reverting changes.
Training on augumented user 120743 35/50 current_auc = 0.8099466562581317
User 120743 AUC after training: 0.809816549570648
User 120743 does not improve AUC. Reverting changes.
Training on augumented user 34012 36/50 current_auc = 0.8099466562581317
User 34012 AUC after training: 0.8097840228987769
User 34012 does not improve AUC. Reverting changes.
Training on augumented user 44484 37/50 current_auc = 0.8099466562581317
User 44484 AUC after training: 0.8098165495706479
User 44484 does not improve AUC. Reverting changes.
Training on augumented user 66778 38/50 current_auc = 0.8099466562581317
User 66778 AUC after training: 0.809816549570648
User 66778 does not improve AUC. Reverting changes.
Training on augumented user 88495 39/50 current_auc = 0.8099466562581317
User 88495 AUC after training: 0.8096864428831642
User 88495 does not improve AUC. Reverting changes.
Training on augumented user 108896 40/50 current_auc = 0.8099466562581317
User 108896 AUC after training: 0.8093937028363258
User 108896 does not improve AUC. Reverting changes.
Training on augumented user 115072 41/50 current_auc = 0.8099466562581317
User 115072 AUC after training: 0.8098165495706479
User 115072 does not improve AUC. Reverting changes.
Training on augumented user 11251 42/50 current_auc = 0.8099466562581317
User 11251 AUC after training: 0.8095563361956805
User 11251 does not improve AUC. Reverting changes.
Training on augumented user 56888 43/50 current_auc = 0.8099466562581317
User 56888 AUC after training: 0.8094912828519386
User 56888 does not improve AUC. Reverting changes.
Training on augumented user 99715 44/50 current_auc = 0.8099466562581317
User 99715 AUC after training: 0.8095888628675514
User 99715 does not improve AUC. Reverting changes.
Training on augumented user 123960 45/50 current_auc = 0.8099466562581317
User 123960 AUC after training: 0.8091985428051002
User 123960 does not improve AUC. Reverting changes.
Training on augumented user 58334 46/50 current_auc = 0.8099466562581317
User 58334 AUC after training: 0.809751496226906
User 58334 does not improve AUC. Reverting changes.
Training on augumented user 101524 47/50 current_auc = 0.8099466562581317
User 101524 AUC after training: 0.8094587561800677
User 101524 does not improve AUC. Reverting changes.
Training on augumented user 30783 48/50 current_auc = 0.8099466562581317
User 30783 AUC after training: 0.8095888628675514
User 30783 does not improve AUC. Reverting changes.
Training on augumented user 53425 49/50 current_auc = 0.8099466562581317
User 53425 AUC after training: 0.8095238095238095
User 53425 does not improve AUC. Reverting changes.
[2024-12-02 19:31:12.263521] start test user 74289 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:12.798217] start test user 74289 208/568 recall augumented users by random, augumented_users = [59213, 24976, 106900, 19101, 43323, 110077, 61145, 87613, 62058, 19838, 131814, 57568, 108272, 4727, 3292, 6949, 103751, 31804, 116347, 28650, 46226, 136945, 137136, 92741, 57688, 5306, 60915, 12467, 106929, 72230, 121812, 58520, 96002, 38861, 105892, 58083, 72327, 136773, 76330, 111942, 24066, 71074, 69632, 12463, 29114, 94471, 41090, 10009, 14582, 45885]
[2024-12-02 19:31:12.817422] user = 74289 Cloud 208/568
[2024-12-02 19:31:12.845255] user = 74289 Local 208/568
[2024-12-02 19:31:13.089679] user = 74289 Local+ 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:14.856071] user = 74289 MPDA- 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6306340718105424
Training on augumented user 59213 0/50 current_auc = 0.6306340718105424
User 59213 AUC after training: 0.6321619556913675
User 59213 improves AUC. Keeping the model.
Training on augumented user 24976 1/50 current_auc = 0.6321619556913675
User 24976 AUC after training: 0.63292589763178
User 24976 improves AUC. Keeping the model.
Training on augumented user 106900 2/50 current_auc = 0.63292589763178
User 106900 AUC after training: 0.63292589763178
User 106900 does not improve AUC. Reverting changes.
Training on augumented user 19101 3/50 current_auc = 0.63292589763178
User 19101 AUC after training: 0.6333078686019863
User 19101 improves AUC. Keeping the model.
Training on augumented user 43323 4/50 current_auc = 0.6333078686019863
User 43323 AUC after training: 0.6325439266615738
User 43323 does not improve AUC. Reverting changes.
Training on augumented user 110077 5/50 current_auc = 0.6333078686019863
User 110077 AUC after training: 0.6325439266615737
User 110077 does not improve AUC. Reverting changes.
Training on augumented user 61145 6/50 current_auc = 0.6333078686019863
User 61145 AUC after training: 0.6321619556913675
User 61145 does not improve AUC. Reverting changes.
Training on augumented user 87613 7/50 current_auc = 0.6333078686019863
User 87613 AUC after training: 0.6317799847211611
User 87613 does not improve AUC. Reverting changes.
Training on augumented user 62058 8/50 current_auc = 0.6333078686019863
User 62058 AUC after training: 0.634453781512605
User 62058 improves AUC. Keeping the model.
Training on augumented user 19838 9/50 current_auc = 0.634453781512605
User 19838 AUC after training: 0.6325439266615738
User 19838 does not improve AUC. Reverting changes.
Training on augumented user 131814 10/50 current_auc = 0.634453781512605
User 131814 AUC after training: 0.634453781512605
User 131814 does not improve AUC. Reverting changes.
Training on augumented user 57568 11/50 current_auc = 0.634453781512605
User 57568 AUC after training: 0.6348357524828113
User 57568 improves AUC. Keeping the model.
Training on augumented user 108272 12/50 current_auc = 0.6348357524828113
User 108272 AUC after training: 0.6336898395721925
User 108272 does not improve AUC. Reverting changes.
Training on augumented user 4727 13/50 current_auc = 0.6348357524828113
User 4727 AUC after training: 0.6348357524828113
User 4727 does not improve AUC. Reverting changes.
Training on augumented user 3292 14/50 current_auc = 0.6348357524828113
User 3292 AUC after training: 0.634453781512605
User 3292 does not improve AUC. Reverting changes.
Training on augumented user 6949 15/50 current_auc = 0.6348357524828113
User 6949 AUC after training: 0.6333078686019862
User 6949 does not improve AUC. Reverting changes.
Training on augumented user 103751 16/50 current_auc = 0.6348357524828113
User 103751 AUC after training: 0.63292589763178
User 103751 does not improve AUC. Reverting changes.
Training on augumented user 31804 17/50 current_auc = 0.6348357524828113
User 31804 AUC after training: 0.634453781512605
User 31804 does not improve AUC. Reverting changes.
Training on augumented user 116347 18/50 current_auc = 0.6348357524828113
User 116347 AUC after training: 0.6333078686019862
User 116347 does not improve AUC. Reverting changes.
Training on augumented user 28650 19/50 current_auc = 0.6348357524828113
User 28650 AUC after training: 0.634453781512605
User 28650 does not improve AUC. Reverting changes.
Training on augumented user 46226 20/50 current_auc = 0.6348357524828113
User 46226 AUC after training: 0.6333078686019862
User 46226 does not improve AUC. Reverting changes.
Training on augumented user 136945 21/50 current_auc = 0.6348357524828113
User 136945 AUC after training: 0.6336898395721925
User 136945 does not improve AUC. Reverting changes.
Training on augumented user 137136 22/50 current_auc = 0.6348357524828113
User 137136 AUC after training: 0.634453781512605
User 137136 does not improve AUC. Reverting changes.
Training on augumented user 92741 23/50 current_auc = 0.6348357524828113
User 92741 AUC after training: 0.6348357524828113
User 92741 does not improve AUC. Reverting changes.
Training on augumented user 57688 24/50 current_auc = 0.6348357524828113
User 57688 AUC after training: 0.6336898395721926
User 57688 does not improve AUC. Reverting changes.
Training on augumented user 5306 25/50 current_auc = 0.6348357524828113
User 5306 AUC after training: 0.634453781512605
User 5306 does not improve AUC. Reverting changes.
Training on augumented user 60915 26/50 current_auc = 0.6348357524828113
User 60915 AUC after training: 0.6310160427807486
User 60915 does not improve AUC. Reverting changes.
Training on augumented user 12467 27/50 current_auc = 0.6348357524828113
User 12467 AUC after training: 0.6321619556913675
User 12467 does not improve AUC. Reverting changes.
Training on augumented user 106929 28/50 current_auc = 0.6348357524828113
User 106929 AUC after training: 0.6348357524828113
User 106929 does not improve AUC. Reverting changes.
Training on augumented user 72230 29/50 current_auc = 0.6348357524828113
User 72230 AUC after training: 0.6333078686019863
User 72230 does not improve AUC. Reverting changes.
Training on augumented user 121812 30/50 current_auc = 0.6348357524828113
User 121812 AUC after training: 0.6336898395721925
User 121812 does not improve AUC. Reverting changes.
Training on augumented user 58520 31/50 current_auc = 0.6348357524828113
User 58520 AUC after training: 0.634453781512605
User 58520 does not improve AUC. Reverting changes.
Training on augumented user 96002 32/50 current_auc = 0.6348357524828113
User 96002 AUC after training: 0.631398013750955
User 96002 does not improve AUC. Reverting changes.
Training on augumented user 38861 33/50 current_auc = 0.6348357524828113
User 38861 AUC after training: 0.6340718105423988
User 38861 does not improve AUC. Reverting changes.
Training on augumented user 105892 34/50 current_auc = 0.6348357524828113
User 105892 AUC after training: 0.6336898395721925
User 105892 does not improve AUC. Reverting changes.
Training on augumented user 58083 35/50 current_auc = 0.6348357524828113
User 58083 AUC after training: 0.6336898395721925
User 58083 does not improve AUC. Reverting changes.
Training on augumented user 72327 36/50 current_auc = 0.6348357524828113
User 72327 AUC after training: 0.6325439266615737
User 72327 does not improve AUC. Reverting changes.
Training on augumented user 136773 37/50 current_auc = 0.6348357524828113
User 136773 AUC after training: 0.63292589763178
User 136773 does not improve AUC. Reverting changes.
Training on augumented user 76330 38/50 current_auc = 0.6348357524828113
User 76330 AUC after training: 0.6325439266615738
User 76330 does not improve AUC. Reverting changes.
Training on augumented user 111942 39/50 current_auc = 0.6348357524828113
User 111942 AUC after training: 0.6348357524828113
User 111942 does not improve AUC. Reverting changes.
Training on augumented user 24066 40/50 current_auc = 0.6348357524828113
User 24066 AUC after training: 0.6348357524828112
User 24066 does not improve AUC. Reverting changes.
Training on augumented user 71074 41/50 current_auc = 0.6348357524828113
User 71074 AUC after training: 0.63292589763178
User 71074 does not improve AUC. Reverting changes.
Training on augumented user 69632 42/50 current_auc = 0.6348357524828113
User 69632 AUC after training: 0.6333078686019863
User 69632 does not improve AUC. Reverting changes.
Training on augumented user 12463 43/50 current_auc = 0.6348357524828113
User 12463 AUC after training: 0.63292589763178
User 12463 does not improve AUC. Reverting changes.
Training on augumented user 29114 44/50 current_auc = 0.6348357524828113
User 29114 AUC after training: 0.6333078686019863
User 29114 does not improve AUC. Reverting changes.
Training on augumented user 94471 45/50 current_auc = 0.6348357524828113
User 94471 AUC after training: 0.634453781512605
User 94471 does not improve AUC. Reverting changes.
Training on augumented user 41090 46/50 current_auc = 0.6348357524828113
User 41090 AUC after training: 0.6333078686019862
User 41090 does not improve AUC. Reverting changes.
Training on augumented user 10009 47/50 current_auc = 0.6348357524828113
User 10009 AUC after training: 0.6325439266615738
User 10009 does not improve AUC. Reverting changes.
Training on augumented user 14582 48/50 current_auc = 0.6348357524828113
User 14582 AUC after training: 0.63292589763178
User 14582 does not improve AUC. Reverting changes.
Training on augumented user 45885 49/50 current_auc = 0.6348357524828113
User 45885 AUC after training: 0.6352177234530175
User 45885 improves AUC. Keeping the model.
[2024-12-02 19:31:43.328870] start test user 74303 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:43.858456] start test user 74303 209/568 recall augumented users by random, augumented_users = [5084, 98202, 7829, 69947, 37172, 88973, 113909, 21787, 43214, 133319, 68100, 39494, 55024, 499, 80280, 116650, 126203, 134775, 99554, 128815, 14093, 18689, 64817, 93491, 66703, 89993, 132360, 89445, 31040, 1936, 78556, 34345, 103011, 90407, 93858, 90833, 77603, 8942, 72071, 32086, 125848, 67442, 42932, 72078, 114371, 125578, 116923, 87068, 118024, 134586]
[2024-12-02 19:31:43.875961] user = 74303 Cloud 209/568
[2024-12-02 19:31:43.895687] user = 74303 Local 209/568
[2024-12-02 19:31:43.985631] user = 74303 Local+ 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:46.703054] user = 74303 MPDA- 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6197183098591549
Training on augumented user 5084 0/50 current_auc = 0.6197183098591549
User 5084 AUC after training: 0.6211445890533072
User 5084 improves AUC. Keeping the model.
Training on augumented user 98202 1/50 current_auc = 0.6211445890533072
User 98202 AUC after training: 0.6210554466036727
User 98202 does not improve AUC. Reverting changes.
Training on augumented user 7829 2/50 current_auc = 0.6211445890533072
User 7829 AUC after training: 0.6209663041540382
User 7829 does not improve AUC. Reverting changes.
Training on augumented user 69947 3/50 current_auc = 0.6211445890533072
User 69947 AUC after training: 0.6207880192547691
User 69947 does not improve AUC. Reverting changes.
Training on augumented user 37172 4/50 current_auc = 0.6211445890533072
User 37172 AUC after training: 0.6206097343555
User 37172 does not improve AUC. Reverting changes.
Training on augumented user 88973 5/50 current_auc = 0.6211445890533072
User 88973 AUC after training: 0.6209663041540382
User 88973 does not improve AUC. Reverting changes.
Training on augumented user 113909 6/50 current_auc = 0.6211445890533072
User 113909 AUC after training: 0.6177571759671956
User 113909 does not improve AUC. Reverting changes.
Training on augumented user 21787 7/50 current_auc = 0.6211445890533072
User 21787 AUC after training: 0.6215011588518453
User 21787 improves AUC. Keeping the model.
Training on augumented user 43214 8/50 current_auc = 0.6215011588518453
User 43214 AUC after training: 0.6217685862007488
User 43214 improves AUC. Keeping the model.
Training on augumented user 133319 9/50 current_auc = 0.6217685862007488
User 133319 AUC after training: 0.6216794437511143
User 133319 does not improve AUC. Reverting changes.
Training on augumented user 68100 10/50 current_auc = 0.6217685862007488
User 68100 AUC after training: 0.6210554466036726
User 68100 does not improve AUC. Reverting changes.
Training on augumented user 39494 11/50 current_auc = 0.6217685862007488
User 39494 AUC after training: 0.6215011588518452
User 39494 does not improve AUC. Reverting changes.
Training on augumented user 55024 12/50 current_auc = 0.6217685862007488
User 55024 AUC after training: 0.6209663041540382
User 55024 does not improve AUC. Reverting changes.
Training on augumented user 499 13/50 current_auc = 0.6217685862007488
User 499 AUC after training: 0.6214120164022107
User 499 does not improve AUC. Reverting changes.
Training on augumented user 80280 14/50 current_auc = 0.6217685862007488
User 80280 AUC after training: 0.6207880192547691
User 80280 does not improve AUC. Reverting changes.
Training on augumented user 116650 15/50 current_auc = 0.6217685862007488
User 116650 AUC after training: 0.6206988768051346
User 116650 does not improve AUC. Reverting changes.
Training on augumented user 126203 16/50 current_auc = 0.6217685862007488
User 126203 AUC after training: 0.6215903013014797
User 126203 does not improve AUC. Reverting changes.
Training on augumented user 134775 17/50 current_auc = 0.6217685862007488
User 134775 AUC after training: 0.6189160278124443
User 134775 does not improve AUC. Reverting changes.
Training on augumented user 99554 18/50 current_auc = 0.6217685862007488
User 99554 AUC after training: 0.6179354608664646
User 99554 does not improve AUC. Reverting changes.
Training on augumented user 128815 19/50 current_auc = 0.6217685862007488
User 128815 AUC after training: 0.6208771617044037
User 128815 does not improve AUC. Reverting changes.
Training on augumented user 14093 20/50 current_auc = 0.6217685862007488
User 14093 AUC after training: 0.6196291674095205
User 14093 does not improve AUC. Reverting changes.
Training on augumented user 18689 21/50 current_auc = 0.6217685862007488
User 18689 AUC after training: 0.6211445890533072
User 18689 does not improve AUC. Reverting changes.
Training on augumented user 64817 22/50 current_auc = 0.6217685862007488
User 64817 AUC after training: 0.6209663041540381
User 64817 does not improve AUC. Reverting changes.
Training on augumented user 93491 23/50 current_auc = 0.6217685862007488
User 93491 AUC after training: 0.6203423070065965
User 93491 does not improve AUC. Reverting changes.
Training on augumented user 66703 24/50 current_auc = 0.6217685862007488
User 66703 AUC after training: 0.6215011588518452
User 66703 does not improve AUC. Reverting changes.
Training on augumented user 89993 25/50 current_auc = 0.6217685862007488
User 89993 AUC after training: 0.6210554466036726
User 89993 does not improve AUC. Reverting changes.
Training on augumented user 132360 26/50 current_auc = 0.6217685862007488
User 132360 AUC after training: 0.6223925833481904
User 132360 improves AUC. Keeping the model.
Training on augumented user 89445 27/50 current_auc = 0.6223925833481904
User 89445 AUC after training: 0.6218577286503832
User 89445 does not improve AUC. Reverting changes.
Training on augumented user 31040 28/50 current_auc = 0.6223925833481904
User 31040 AUC after training: 0.6239971474416117
User 31040 improves AUC. Keeping the model.
Training on augumented user 1936 29/50 current_auc = 0.6239971474416117
User 1936 AUC after training: 0.623551435193439
User 1936 does not improve AUC. Reverting changes.
Training on augumented user 78556 30/50 current_auc = 0.6239971474416117
User 78556 AUC after training: 0.6224817257978249
User 78556 does not improve AUC. Reverting changes.
Training on augumented user 34345 31/50 current_auc = 0.6239971474416117
User 34345 AUC after training: 0.6269388482795507
User 34345 improves AUC. Keeping the model.
Training on augumented user 103011 32/50 current_auc = 0.6269388482795507
User 103011 AUC after training: 0.6265822784810127
User 103011 does not improve AUC. Reverting changes.
Training on augumented user 90407 33/50 current_auc = 0.6269388482795507
User 90407 AUC after training: 0.6264039935817437
User 90407 does not improve AUC. Reverting changes.
Training on augumented user 93858 34/50 current_auc = 0.6269388482795507
User 93858 AUC after training: 0.6256908539846675
User 93858 does not improve AUC. Reverting changes.
Training on augumented user 90833 35/50 current_auc = 0.6269388482795507
User 90833 AUC after training: 0.6265822784810127
User 90833 does not improve AUC. Reverting changes.
Training on augumented user 77603 36/50 current_auc = 0.6269388482795507
User 77603 AUC after training: 0.6264039935817436
User 77603 does not improve AUC. Reverting changes.
Training on augumented user 8942 37/50 current_auc = 0.6269388482795507
User 8942 AUC after training: 0.6262257086824745
User 8942 does not improve AUC. Reverting changes.
Training on augumented user 72071 38/50 current_auc = 0.6269388482795507
User 72071 AUC after training: 0.6255125690853985
User 72071 does not improve AUC. Reverting changes.
Training on augumented user 32086 39/50 current_auc = 0.6269388482795507
User 32086 AUC after training: 0.6262257086824746
User 32086 does not improve AUC. Reverting changes.
Training on augumented user 125848 40/50 current_auc = 0.6269388482795507
User 125848 AUC after training: 0.6272954180780889
User 125848 improves AUC. Keeping the model.
Training on augumented user 67442 41/50 current_auc = 0.6272954180780889
User 67442 AUC after training: 0.625958281333571
User 67442 does not improve AUC. Reverting changes.
Training on augumented user 42932 42/50 current_auc = 0.6272954180780889
User 42932 AUC after training: 0.6238188625423426
User 42932 does not improve AUC. Reverting changes.
Training on augumented user 72078 43/50 current_auc = 0.6272954180780889
User 72078 AUC after training: 0.6260474237832055
User 72078 does not improve AUC. Reverting changes.
Training on augumented user 114371 44/50 current_auc = 0.6272954180780889
User 114371 AUC after training: 0.628543412372972
User 114371 improves AUC. Keeping the model.
Training on augumented user 125578 45/50 current_auc = 0.628543412372972
User 125578 AUC after training: 0.6276519878766269
User 125578 does not improve AUC. Reverting changes.
Training on augumented user 116923 46/50 current_auc = 0.628543412372972
User 116923 AUC after training: 0.628365127473703
User 116923 does not improve AUC. Reverting changes.
Training on augumented user 87068 47/50 current_auc = 0.628543412372972
User 87068 AUC after training: 0.628008557675165
User 87068 does not improve AUC. Reverting changes.
Training on augumented user 118024 48/50 current_auc = 0.628543412372972
User 118024 AUC after training: 0.6267605633802816
User 118024 does not improve AUC. Reverting changes.
Training on augumented user 134586 49/50 current_auc = 0.628543412372972
User 134586 AUC after training: 0.6281868425744339
User 134586 does not improve AUC. Reverting changes.
[2024-12-02 19:32:17.546409] start test user 74326 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:18.209853] start test user 74326 210/568 recall augumented users by random, augumented_users = [125638, 80415, 136683, 2678, 113004, 92123, 110920, 11304, 101580, 118398, 8950, 110542, 33595, 48055, 33685, 93045, 69236, 86225, 91386, 31643, 44552, 97662, 132830, 113761, 40364, 128181, 104979, 125560, 47291, 111503, 115179, 81854, 94464, 44739, 69328, 132257, 115081, 51700, 63430, 91130, 68749, 25946, 35764, 59094, 112560, 15688, 4915, 85168, 136619, 1026]
[2024-12-02 19:32:18.225448] user = 74326 Cloud 210/568
[2024-12-02 19:32:18.242940] user = 74326 Local 210/568
[2024-12-02 19:32:18.337929] user = 74326 Local+ 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:20.769880] user = 74326 MPDA- 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5333333333333334
Training on augumented user 125638 0/50 current_auc = 0.5333333333333334
User 125638 AUC after training: 0.5333333333333334
User 125638 does not improve AUC. Reverting changes.
Training on augumented user 80415 1/50 current_auc = 0.5333333333333334
User 80415 AUC after training: 0.5333333333333334
User 80415 does not improve AUC. Reverting changes.
Training on augumented user 136683 2/50 current_auc = 0.5333333333333334
User 136683 AUC after training: 0.5333333333333334
User 136683 does not improve AUC. Reverting changes.
Training on augumented user 2678 3/50 current_auc = 0.5333333333333334
User 2678 AUC after training: 0.5333333333333334
User 2678 does not improve AUC. Reverting changes.
Training on augumented user 113004 4/50 current_auc = 0.5333333333333334
User 113004 AUC after training: 0.5333333333333334
User 113004 does not improve AUC. Reverting changes.
Training on augumented user 92123 5/50 current_auc = 0.5333333333333334
User 92123 AUC after training: 0.5333333333333334
User 92123 does not improve AUC. Reverting changes.
Training on augumented user 110920 6/50 current_auc = 0.5333333333333334
User 110920 AUC after training: 0.5333333333333334
User 110920 does not improve AUC. Reverting changes.
Training on augumented user 11304 7/50 current_auc = 0.5333333333333334
User 11304 AUC after training: 0.5333333333333334
User 11304 does not improve AUC. Reverting changes.
Training on augumented user 101580 8/50 current_auc = 0.5333333333333334
User 101580 AUC after training: 0.5333333333333334
User 101580 does not improve AUC. Reverting changes.
Training on augumented user 118398 9/50 current_auc = 0.5333333333333334
User 118398 AUC after training: 0.5333333333333334
User 118398 does not improve AUC. Reverting changes.
Training on augumented user 8950 10/50 current_auc = 0.5333333333333334
User 8950 AUC after training: 0.5333333333333334
User 8950 does not improve AUC. Reverting changes.
Training on augumented user 110542 11/50 current_auc = 0.5333333333333334
User 110542 AUC after training: 0.5333333333333334
User 110542 does not improve AUC. Reverting changes.
Training on augumented user 33595 12/50 current_auc = 0.5333333333333334
User 33595 AUC after training: 0.5333333333333334
User 33595 does not improve AUC. Reverting changes.
Training on augumented user 48055 13/50 current_auc = 0.5333333333333334
User 48055 AUC after training: 0.5333333333333334
User 48055 does not improve AUC. Reverting changes.
Training on augumented user 33685 14/50 current_auc = 0.5333333333333334
User 33685 AUC after training: 0.5333333333333334
User 33685 does not improve AUC. Reverting changes.
Training on augumented user 93045 15/50 current_auc = 0.5333333333333334
User 93045 AUC after training: 0.5333333333333334
User 93045 does not improve AUC. Reverting changes.
Training on augumented user 69236 16/50 current_auc = 0.5333333333333334
User 69236 AUC after training: 0.5333333333333334
User 69236 does not improve AUC. Reverting changes.
Training on augumented user 86225 17/50 current_auc = 0.5333333333333334
User 86225 AUC after training: 0.5333333333333334
User 86225 does not improve AUC. Reverting changes.
Training on augumented user 91386 18/50 current_auc = 0.5333333333333334
User 91386 AUC after training: 0.5333333333333334
User 91386 does not improve AUC. Reverting changes.
Training on augumented user 31643 19/50 current_auc = 0.5333333333333334
User 31643 AUC after training: 0.5333333333333334
User 31643 does not improve AUC. Reverting changes.
Training on augumented user 44552 20/50 current_auc = 0.5333333333333334
User 44552 AUC after training: 0.5333333333333334
User 44552 does not improve AUC. Reverting changes.
Training on augumented user 97662 21/50 current_auc = 0.5333333333333334
User 97662 AUC after training: 0.5333333333333334
User 97662 does not improve AUC. Reverting changes.
Training on augumented user 132830 22/50 current_auc = 0.5333333333333334
User 132830 AUC after training: 0.5333333333333334
User 132830 does not improve AUC. Reverting changes.
Training on augumented user 113761 23/50 current_auc = 0.5333333333333334
User 113761 AUC after training: 0.5333333333333334
User 113761 does not improve AUC. Reverting changes.
Training on augumented user 40364 24/50 current_auc = 0.5333333333333334
User 40364 AUC after training: 0.5333333333333334
User 40364 does not improve AUC. Reverting changes.
Training on augumented user 128181 25/50 current_auc = 0.5333333333333334
User 128181 AUC after training: 0.5333333333333334
User 128181 does not improve AUC. Reverting changes.
Training on augumented user 104979 26/50 current_auc = 0.5333333333333334
User 104979 AUC after training: 0.5333333333333334
User 104979 does not improve AUC. Reverting changes.
Training on augumented user 125560 27/50 current_auc = 0.5333333333333334
User 125560 AUC after training: 0.5333333333333334
User 125560 does not improve AUC. Reverting changes.
Training on augumented user 47291 28/50 current_auc = 0.5333333333333334
User 47291 AUC after training: 0.5333333333333334
User 47291 does not improve AUC. Reverting changes.
Training on augumented user 111503 29/50 current_auc = 0.5333333333333334
User 111503 AUC after training: 0.5333333333333334
User 111503 does not improve AUC. Reverting changes.
Training on augumented user 115179 30/50 current_auc = 0.5333333333333334
User 115179 AUC after training: 0.5333333333333334
User 115179 does not improve AUC. Reverting changes.
Training on augumented user 81854 31/50 current_auc = 0.5333333333333334
User 81854 AUC after training: 0.5333333333333334
User 81854 does not improve AUC. Reverting changes.
Training on augumented user 94464 32/50 current_auc = 0.5333333333333334
User 94464 AUC after training: 0.5333333333333334
User 94464 does not improve AUC. Reverting changes.
Training on augumented user 44739 33/50 current_auc = 0.5333333333333334
User 44739 AUC after training: 0.5333333333333334
User 44739 does not improve AUC. Reverting changes.
Training on augumented user 69328 34/50 current_auc = 0.5333333333333334
User 69328 AUC after training: 0.5333333333333334
User 69328 does not improve AUC. Reverting changes.
Training on augumented user 132257 35/50 current_auc = 0.5333333333333334
User 132257 AUC after training: 0.5333333333333334
User 132257 does not improve AUC. Reverting changes.
Training on augumented user 115081 36/50 current_auc = 0.5333333333333334
User 115081 AUC after training: 0.5333333333333334
User 115081 does not improve AUC. Reverting changes.
Training on augumented user 51700 37/50 current_auc = 0.5333333333333334
User 51700 AUC after training: 0.5333333333333334
User 51700 does not improve AUC. Reverting changes.
Training on augumented user 63430 38/50 current_auc = 0.5333333333333334
User 63430 AUC after training: 0.5333333333333334
User 63430 does not improve AUC. Reverting changes.
Training on augumented user 91130 39/50 current_auc = 0.5333333333333334
User 91130 AUC after training: 0.5333333333333334
User 91130 does not improve AUC. Reverting changes.
Training on augumented user 68749 40/50 current_auc = 0.5333333333333334
User 68749 AUC after training: 0.5333333333333334
User 68749 does not improve AUC. Reverting changes.
Training on augumented user 25946 41/50 current_auc = 0.5333333333333334
User 25946 AUC after training: 0.5333333333333334
User 25946 does not improve AUC. Reverting changes.
Training on augumented user 35764 42/50 current_auc = 0.5333333333333334
User 35764 AUC after training: 0.5333333333333334
User 35764 does not improve AUC. Reverting changes.
Training on augumented user 59094 43/50 current_auc = 0.5333333333333334
User 59094 AUC after training: 0.5333333333333334
User 59094 does not improve AUC. Reverting changes.
Training on augumented user 112560 44/50 current_auc = 0.5333333333333334
User 112560 AUC after training: 0.5333333333333334
User 112560 does not improve AUC. Reverting changes.
Training on augumented user 15688 45/50 current_auc = 0.5333333333333334
User 15688 AUC after training: 0.5333333333333334
User 15688 does not improve AUC. Reverting changes.
Training on augumented user 4915 46/50 current_auc = 0.5333333333333334
User 4915 AUC after training: 0.5333333333333334
User 4915 does not improve AUC. Reverting changes.
Training on augumented user 85168 47/50 current_auc = 0.5333333333333334
User 85168 AUC after training: 0.5333333333333334
User 85168 does not improve AUC. Reverting changes.
Training on augumented user 136619 48/50 current_auc = 0.5333333333333334
User 136619 AUC after training: 0.5333333333333334
User 136619 does not improve AUC. Reverting changes.
Training on augumented user 1026 49/50 current_auc = 0.5333333333333334
User 1026 AUC after training: 0.5333333333333334
User 1026 does not improve AUC. Reverting changes.
[2024-12-02 19:32:52.327410] start test user 74336 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:53.126384] start test user 74336 211/568 recall augumented users by random, augumented_users = [33979, 28267, 28264, 127436, 134159, 72779, 84268, 86475, 93330, 133309, 109366, 13211, 124538, 118230, 124262, 130968, 45661, 48446, 37079, 22577, 60731, 45593, 90954, 6731, 47751, 105075, 83401, 19943, 73395, 91883, 19661, 17275, 55145, 104023, 105946, 130068, 21383, 116291, 126856, 117665, 62774, 24054, 74865, 76475, 86213, 7766, 12752, 72046, 11985, 116534]
[2024-12-02 19:32:53.142119] user = 74336 Cloud 211/568
[2024-12-02 19:32:53.153433] user = 74336 Local 211/568
[2024-12-02 19:32:53.322220] user = 74336 Local+ 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:56.281554] user = 74336 MPDA- 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6703703703703704
Training on augumented user 33979 0/50 current_auc = 0.6703703703703704
User 33979 AUC after training: 0.6691358024691358
User 33979 does not improve AUC. Reverting changes.
Training on augumented user 28267 1/50 current_auc = 0.6703703703703704
User 28267 AUC after training: 0.6691358024691358
User 28267 does not improve AUC. Reverting changes.
Training on augumented user 28264 2/50 current_auc = 0.6703703703703704
User 28264 AUC after training: 0.6691358024691358
User 28264 does not improve AUC. Reverting changes.
Training on augumented user 127436 3/50 current_auc = 0.6703703703703704
User 127436 AUC after training: 0.6703703703703704
User 127436 does not improve AUC. Reverting changes.
Training on augumented user 134159 4/50 current_auc = 0.6703703703703704
User 134159 AUC after training: 0.6691358024691358
User 134159 does not improve AUC. Reverting changes.
Training on augumented user 72779 5/50 current_auc = 0.6703703703703704
User 72779 AUC after training: 0.671604938271605
User 72779 improves AUC. Keeping the model.
Training on augumented user 84268 6/50 current_auc = 0.671604938271605
User 84268 AUC after training: 0.671604938271605
User 84268 does not improve AUC. Reverting changes.
Training on augumented user 86475 7/50 current_auc = 0.671604938271605
User 86475 AUC after training: 0.6703703703703704
User 86475 does not improve AUC. Reverting changes.
Training on augumented user 93330 8/50 current_auc = 0.671604938271605
User 93330 AUC after training: 0.6703703703703704
User 93330 does not improve AUC. Reverting changes.
Training on augumented user 133309 9/50 current_auc = 0.671604938271605
User 133309 AUC after training: 0.674074074074074
User 133309 improves AUC. Keeping the model.
Training on augumented user 109366 10/50 current_auc = 0.674074074074074
User 109366 AUC after training: 0.6728395061728395
User 109366 does not improve AUC. Reverting changes.
Training on augumented user 13211 11/50 current_auc = 0.674074074074074
User 13211 AUC after training: 0.674074074074074
User 13211 does not improve AUC. Reverting changes.
Training on augumented user 124538 12/50 current_auc = 0.674074074074074
User 124538 AUC after training: 0.674074074074074
User 124538 does not improve AUC. Reverting changes.
Training on augumented user 118230 13/50 current_auc = 0.674074074074074
User 118230 AUC after training: 0.6728395061728395
User 118230 does not improve AUC. Reverting changes.
Training on augumented user 124262 14/50 current_auc = 0.674074074074074
User 124262 AUC after training: 0.6728395061728395
User 124262 does not improve AUC. Reverting changes.
Training on augumented user 130968 15/50 current_auc = 0.674074074074074
User 130968 AUC after training: 0.671604938271605
User 130968 does not improve AUC. Reverting changes.
Training on augumented user 45661 16/50 current_auc = 0.674074074074074
User 45661 AUC after training: 0.674074074074074
User 45661 does not improve AUC. Reverting changes.
Training on augumented user 48446 17/50 current_auc = 0.674074074074074
User 48446 AUC after training: 0.6728395061728395
User 48446 does not improve AUC. Reverting changes.
Training on augumented user 37079 18/50 current_auc = 0.674074074074074
User 37079 AUC after training: 0.6728395061728395
User 37079 does not improve AUC. Reverting changes.
Training on augumented user 22577 19/50 current_auc = 0.674074074074074
User 22577 AUC after training: 0.6728395061728395
User 22577 does not improve AUC. Reverting changes.
Training on augumented user 60731 20/50 current_auc = 0.674074074074074
User 60731 AUC after training: 0.671604938271605
User 60731 does not improve AUC. Reverting changes.
Training on augumented user 45593 21/50 current_auc = 0.674074074074074
User 45593 AUC after training: 0.674074074074074
User 45593 does not improve AUC. Reverting changes.
Training on augumented user 90954 22/50 current_auc = 0.674074074074074
User 90954 AUC after training: 0.671604938271605
User 90954 does not improve AUC. Reverting changes.
Training on augumented user 6731 23/50 current_auc = 0.674074074074074
User 6731 AUC after training: 0.6679012345679013
User 6731 does not improve AUC. Reverting changes.
Training on augumented user 47751 24/50 current_auc = 0.674074074074074
User 47751 AUC after training: 0.6728395061728395
User 47751 does not improve AUC. Reverting changes.
Training on augumented user 105075 25/50 current_auc = 0.674074074074074
User 105075 AUC after training: 0.6728395061728395
User 105075 does not improve AUC. Reverting changes.
Training on augumented user 83401 26/50 current_auc = 0.674074074074074
User 83401 AUC after training: 0.6728395061728395
User 83401 does not improve AUC. Reverting changes.
Training on augumented user 19943 27/50 current_auc = 0.674074074074074
User 19943 AUC after training: 0.674074074074074
User 19943 does not improve AUC. Reverting changes.
Training on augumented user 73395 28/50 current_auc = 0.674074074074074
User 73395 AUC after training: 0.674074074074074
User 73395 does not improve AUC. Reverting changes.
Training on augumented user 91883 29/50 current_auc = 0.674074074074074
User 91883 AUC after training: 0.671604938271605
User 91883 does not improve AUC. Reverting changes.
Training on augumented user 19661 30/50 current_auc = 0.674074074074074
User 19661 AUC after training: 0.6728395061728395
User 19661 does not improve AUC. Reverting changes.
Training on augumented user 17275 31/50 current_auc = 0.674074074074074
User 17275 AUC after training: 0.674074074074074
User 17275 does not improve AUC. Reverting changes.
Training on augumented user 55145 32/50 current_auc = 0.674074074074074
User 55145 AUC after training: 0.6728395061728395
User 55145 does not improve AUC. Reverting changes.
Training on augumented user 104023 33/50 current_auc = 0.674074074074074
User 104023 AUC after training: 0.674074074074074
User 104023 does not improve AUC. Reverting changes.
Training on augumented user 105946 34/50 current_auc = 0.674074074074074
User 105946 AUC after training: 0.671604938271605
User 105946 does not improve AUC. Reverting changes.
Training on augumented user 130068 35/50 current_auc = 0.674074074074074
User 130068 AUC after training: 0.6728395061728395
User 130068 does not improve AUC. Reverting changes.
Training on augumented user 21383 36/50 current_auc = 0.674074074074074
User 21383 AUC after training: 0.6728395061728395
User 21383 does not improve AUC. Reverting changes.
Training on augumented user 116291 37/50 current_auc = 0.674074074074074
User 116291 AUC after training: 0.6728395061728395
User 116291 does not improve AUC. Reverting changes.
Training on augumented user 126856 38/50 current_auc = 0.674074074074074
User 126856 AUC after training: 0.6703703703703704
User 126856 does not improve AUC. Reverting changes.
Training on augumented user 117665 39/50 current_auc = 0.674074074074074
User 117665 AUC after training: 0.674074074074074
User 117665 does not improve AUC. Reverting changes.
Training on augumented user 62774 40/50 current_auc = 0.674074074074074
User 62774 AUC after training: 0.674074074074074
User 62774 does not improve AUC. Reverting changes.
Training on augumented user 24054 41/50 current_auc = 0.674074074074074
User 24054 AUC after training: 0.6728395061728395
User 24054 does not improve AUC. Reverting changes.
Training on augumented user 74865 42/50 current_auc = 0.674074074074074
User 74865 AUC after training: 0.6728395061728395
User 74865 does not improve AUC. Reverting changes.
Training on augumented user 76475 43/50 current_auc = 0.674074074074074
User 76475 AUC after training: 0.674074074074074
User 76475 does not improve AUC. Reverting changes.
Training on augumented user 86213 44/50 current_auc = 0.674074074074074
User 86213 AUC after training: 0.674074074074074
User 86213 does not improve AUC. Reverting changes.
Training on augumented user 7766 45/50 current_auc = 0.674074074074074
User 7766 AUC after training: 0.674074074074074
User 7766 does not improve AUC. Reverting changes.
Training on augumented user 12752 46/50 current_auc = 0.674074074074074
User 12752 AUC after training: 0.6753086419753086
User 12752 improves AUC. Keeping the model.
Training on augumented user 72046 47/50 current_auc = 0.6753086419753086
User 72046 AUC after training: 0.671604938271605
User 72046 does not improve AUC. Reverting changes.
Training on augumented user 11985 48/50 current_auc = 0.6753086419753086
User 11985 AUC after training: 0.674074074074074
User 11985 does not improve AUC. Reverting changes.
Training on augumented user 116534 49/50 current_auc = 0.6753086419753086
User 116534 AUC after training: 0.6753086419753086
User 116534 does not improve AUC. Reverting changes.
[2024-12-02 19:33:25.858932] start test user 74345 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:26.299108] start test user 74345 212/568 recall augumented users by random, augumented_users = [53485, 63982, 103159, 82643, 117417, 77355, 95632, 13785, 136353, 16150, 28894, 103508, 2985, 137409, 120950, 110405, 74976, 64962, 88047, 124395, 114425, 82897, 43705, 68882, 58119, 133751, 67862, 33609, 22393, 53032, 93928, 114348, 15467, 21737, 85905, 34271, 96116, 73898, 70897, 110620, 112088, 102961, 137165, 110715, 2567, 76007, 54983, 63394, 114432, 64233]
[2024-12-02 19:33:26.315062] user = 74345 Cloud 212/568
[2024-12-02 19:33:26.360633] user = 74345 Local 212/568
[2024-12-02 19:33:26.506692] user = 74345 Local+ 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:28.655575] user = 74345 MPDA- 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7065872601866342
Training on augumented user 53485 0/50 current_auc = 0.7065872601866342
User 53485 AUC after training: 0.7068480843911202
User 53485 improves AUC. Keeping the model.
Training on augumented user 63982 1/50 current_auc = 0.7068480843911202
User 63982 AUC after training: 0.7059351996754187
User 63982 does not improve AUC. Reverting changes.
Training on augumented user 103159 2/50 current_auc = 0.7068480843911202
User 103159 AUC after training: 0.7067611429896249
User 103159 does not improve AUC. Reverting changes.
Training on augumented user 82643 3/50 current_auc = 0.7068480843911202
User 82643 AUC after training: 0.7063554164493131
User 82643 does not improve AUC. Reverting changes.
Training on augumented user 117417 4/50 current_auc = 0.7068480843911202
User 117417 AUC after training: 0.705993160609749
User 117417 does not improve AUC. Reverting changes.
Training on augumented user 77355 5/50 current_auc = 0.7068480843911202
User 77355 AUC after training: 0.706761142989625
User 77355 does not improve AUC. Reverting changes.
Training on augumented user 95632 6/50 current_auc = 0.7068480843911202
User 95632 AUC after training: 0.7064568480843911
User 95632 does not improve AUC. Reverting changes.
Training on augumented user 13785 7/50 current_auc = 0.7068480843911202
User 13785 AUC after training: 0.7064713383179736
User 13785 does not improve AUC. Reverting changes.
Training on augumented user 136353 8/50 current_auc = 0.7068480843911202
User 136353 AUC after training: 0.706427867617226
User 136353 does not improve AUC. Reverting changes.
Training on augumented user 16150 9/50 current_auc = 0.7068480843911202
User 16150 AUC after training: 0.7068625746247028
User 16150 improves AUC. Keeping the model.
Training on augumented user 28894 10/50 current_auc = 0.7068625746247028
User 28894 AUC after training: 0.7066017504202169
User 28894 does not improve AUC. Reverting changes.
Training on augumented user 103508 11/50 current_auc = 0.7068625746247028
User 103508 AUC after training: 0.7080507737784733
User 103508 improves AUC. Keeping the model.
Training on augumented user 2985 12/50 current_auc = 0.7080507737784733
User 2985 AUC after training: 0.7078768909754826
User 2985 does not improve AUC. Reverting changes.
Training on augumented user 137409 13/50 current_auc = 0.7080507737784733
User 137409 AUC after training: 0.7093114241001564
User 137409 improves AUC. Keeping the model.
Training on augumented user 120950 14/50 current_auc = 0.7093114241001564
User 120950 AUC after training: 0.7096591897061381
User 120950 improves AUC. Keeping the model.
Training on augumented user 110405 15/50 current_auc = 0.7096591897061381
User 110405 AUC after training: 0.7098475627427114
User 110405 improves AUC. Keeping the model.
Training on augumented user 74976 16/50 current_auc = 0.7098475627427114
User 74976 AUC after training: 0.7100721613632412
User 74976 improves AUC. Keeping the model.
Training on augumented user 64962 17/50 current_auc = 0.7100721613632412
User 64962 AUC after training: 0.7103692111516837
User 64962 improves AUC. Keeping the model.
Training on augumented user 88047 18/50 current_auc = 0.7103692111516837
User 88047 AUC after training: 0.7102532892830233
User 88047 does not improve AUC. Reverting changes.
Training on augumented user 124395 19/50 current_auc = 0.7103692111516837
User 124395 AUC after training: 0.7094273459688172
User 124395 does not improve AUC. Reverting changes.
Training on augumented user 114425 20/50 current_auc = 0.7103692111516837
User 114425 AUC after training: 0.7107676925752043
User 114425 improves AUC. Keeping the model.
Training on augumented user 82897 21/50 current_auc = 0.7107676925752043
User 82897 AUC after training: 0.710760447458413
User 82897 does not improve AUC. Reverting changes.
Training on augumented user 43705 22/50 current_auc = 0.7107676925752043
User 43705 AUC after training: 0.7108908595606561
User 43705 improves AUC. Keeping the model.
Training on augumented user 68882 23/50 current_auc = 0.7108908595606561
User 68882 AUC after training: 0.7102387990494407
User 68882 does not improve AUC. Reverting changes.
Training on augumented user 58119 24/50 current_auc = 0.7108908595606561
User 58119 AUC after training: 0.7108546339766997
User 58119 does not improve AUC. Reverting changes.
Training on augumented user 133751 25/50 current_auc = 0.7108908595606561
User 133751 AUC after training: 0.7107894279255781
User 133751 does not improve AUC. Reverting changes.
Training on augumented user 67862 26/50 current_auc = 0.7108908595606561
User 67862 AUC after training: 0.7109488204949864
User 67862 improves AUC. Keeping the model.
Training on augumented user 33609 27/50 current_auc = 0.7109488204949864
User 33609 AUC after training: 0.7102532892830231
User 33609 does not improve AUC. Reverting changes.
Training on augumented user 22393 28/50 current_auc = 0.7109488204949864
User 22393 AUC after training: 0.7109778009621516
User 22393 improves AUC. Keeping the model.
Training on augumented user 53032 29/50 current_auc = 0.7109778009621516
User 53032 AUC after training: 0.7110357618964817
User 53032 improves AUC. Keeping the model.
Training on augumented user 93928 30/50 current_auc = 0.7110357618964817
User 93928 AUC after training: 0.7107459572248305
User 93928 does not improve AUC. Reverting changes.
Training on augumented user 114348 31/50 current_auc = 0.7110357618964817
User 114348 AUC after training: 0.7111082130643946
User 114348 improves AUC. Keeping the model.
Training on augumented user 15467 32/50 current_auc = 0.7111082130643946
User 15467 AUC after training: 0.7111589288819335
User 15467 improves AUC. Keeping the model.
Training on augumented user 21737 33/50 current_auc = 0.7111589288819335
User 21737 AUC after training: 0.7112386251666376
User 21737 improves AUC. Keeping the model.
Training on augumented user 85905 34/50 current_auc = 0.7112386251666376
User 85905 AUC after training: 0.7112096446994726
User 85905 does not improve AUC. Reverting changes.
Training on augumented user 34271 35/50 current_auc = 0.7112386251666376
User 34271 AUC after training: 0.7110792325972295
User 34271 does not improve AUC. Reverting changes.
Training on augumented user 96116 36/50 current_auc = 0.7112386251666376
User 96116 AUC after training: 0.7110574972468556
User 96116 does not improve AUC. Reverting changes.
Training on augumented user 73898 37/50 current_auc = 0.7112386251666376
User 73898 AUC after training: 0.7122674317509997
User 73898 improves AUC. Keeping the model.
Training on augumented user 70897 38/50 current_auc = 0.7122674317509997
User 70897 AUC after training: 0.7117023126412798
User 70897 does not improve AUC. Reverting changes.
Training on augumented user 110620 39/50 current_auc = 0.7122674317509997
User 110620 AUC after training: 0.7122239610502521
User 110620 does not improve AUC. Reverting changes.
Training on augumented user 112088 40/50 current_auc = 0.7122674317509997
User 112088 AUC after training: 0.7123543731524953
User 112088 improves AUC. Keeping the model.
Training on augumented user 102961 41/50 current_auc = 0.7123543731524953
User 102961 AUC after training: 0.7116878224076972
User 102961 does not improve AUC. Reverting changes.
Training on augumented user 137165 42/50 current_auc = 0.7123543731524953
User 137165 AUC after training: 0.7119486466121834
User 137165 does not improve AUC. Reverting changes.
Training on augumented user 110715 43/50 current_auc = 0.7123543731524953
User 110715 AUC after training: 0.7122384512838347
User 110715 does not improve AUC. Reverting changes.
Training on augumented user 2567 44/50 current_auc = 0.7123543731524953
User 2567 AUC after training: 0.7120935489480091
User 2567 does not improve AUC. Reverting changes.
Training on augumented user 76007 45/50 current_auc = 0.7123543731524953
User 76007 AUC after training: 0.711992117312931
User 76007 does not improve AUC. Reverting changes.
Training on augumented user 54983 46/50 current_auc = 0.7123543731524953
User 54983 AUC after training: 0.7124413145539906
User 54983 improves AUC. Keeping the model.
Training on augumented user 63394 47/50 current_auc = 0.7124413145539906
User 63394 AUC after training: 0.7121660001159219
User 63394 does not improve AUC. Reverting changes.
Training on augumented user 114432 48/50 current_auc = 0.7124413145539906
User 114432 AUC after training: 0.712166000115922
User 114432 does not improve AUC. Reverting changes.
Training on augumented user 64233 49/50 current_auc = 0.7124413145539906
User 64233 AUC after training: 0.7114125079696284
User 64233 does not improve AUC. Reverting changes.
[2024-12-02 19:34:03.733504] start test user 74371 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:04.530009] start test user 74371 213/568 recall augumented users by random, augumented_users = [132134, 44661, 115891, 48638, 123448, 73982, 26148, 1712, 25368, 51029, 72030, 118567, 14562, 4680, 82043, 80754, 95565, 94156, 32287, 135647, 5345, 90523, 5353, 48189, 6608, 32845, 45941, 86193, 16647, 117844, 93269, 32713, 74830, 91234, 25753, 128801, 81666, 14365, 57088, 50551, 46566, 28842, 109774, 73790, 77751, 22215, 17758, 40997, 8816, 85125]
[2024-12-02 19:34:04.553760] user = 74371 Cloud 213/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:04.567127] user = 74371 Local 213/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:04.606246] user = 74371 Local+ 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:06.937261] user = 74371 MPDA- 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 132134 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132134 AUC after training: 0.5
User 132134 does not improve AUC. Reverting changes.
Training on augumented user 44661 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44661 AUC after training: 0.5
User 44661 does not improve AUC. Reverting changes.
Training on augumented user 115891 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115891 AUC after training: 0.5
User 115891 does not improve AUC. Reverting changes.
Training on augumented user 48638 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48638 AUC after training: 0.5
User 48638 does not improve AUC. Reverting changes.
Training on augumented user 123448 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123448 AUC after training: 0.5
User 123448 does not improve AUC. Reverting changes.
Training on augumented user 73982 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73982 AUC after training: 0.5
User 73982 does not improve AUC. Reverting changes.
Training on augumented user 26148 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26148 AUC after training: 0.5
User 26148 does not improve AUC. Reverting changes.
Training on augumented user 1712 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1712 AUC after training: 0.5
User 1712 does not improve AUC. Reverting changes.
Training on augumented user 25368 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25368 AUC after training: 0.5
User 25368 does not improve AUC. Reverting changes.
Training on augumented user 51029 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51029 AUC after training: 0.5
User 51029 does not improve AUC. Reverting changes.
Training on augumented user 72030 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72030 AUC after training: 0.5
User 72030 does not improve AUC. Reverting changes.
Training on augumented user 118567 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118567 AUC after training: 0.5
User 118567 does not improve AUC. Reverting changes.
Training on augumented user 14562 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14562 AUC after training: 0.5
User 14562 does not improve AUC. Reverting changes.
Training on augumented user 4680 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4680 AUC after training: 0.5
User 4680 does not improve AUC. Reverting changes.
Training on augumented user 82043 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82043 AUC after training: 0.5
User 82043 does not improve AUC. Reverting changes.
Training on augumented user 80754 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80754 AUC after training: 0.5
User 80754 does not improve AUC. Reverting changes.
Training on augumented user 95565 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95565 AUC after training: 0.5
User 95565 does not improve AUC. Reverting changes.
Training on augumented user 94156 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94156 AUC after training: 0.5
User 94156 does not improve AUC. Reverting changes.
Training on augumented user 32287 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32287 AUC after training: 0.5
User 32287 does not improve AUC. Reverting changes.
Training on augumented user 135647 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135647 AUC after training: 0.5
User 135647 does not improve AUC. Reverting changes.
Training on augumented user 5345 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5345 AUC after training: 0.5
User 5345 does not improve AUC. Reverting changes.
Training on augumented user 90523 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90523 AUC after training: 0.5
User 90523 does not improve AUC. Reverting changes.
Training on augumented user 5353 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5353 AUC after training: 0.5
User 5353 does not improve AUC. Reverting changes.
Training on augumented user 48189 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48189 AUC after training: 0.5
User 48189 does not improve AUC. Reverting changes.
Training on augumented user 6608 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6608 AUC after training: 0.5
User 6608 does not improve AUC. Reverting changes.
Training on augumented user 32845 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32845 AUC after training: 0.5
User 32845 does not improve AUC. Reverting changes.
Training on augumented user 45941 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45941 AUC after training: 0.5
User 45941 does not improve AUC. Reverting changes.
Training on augumented user 86193 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86193 AUC after training: 0.5
User 86193 does not improve AUC. Reverting changes.
Training on augumented user 16647 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16647 AUC after training: 0.5
User 16647 does not improve AUC. Reverting changes.
Training on augumented user 117844 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117844 AUC after training: 0.5
User 117844 does not improve AUC. Reverting changes.
Training on augumented user 93269 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93269 AUC after training: 0.5
User 93269 does not improve AUC. Reverting changes.
Training on augumented user 32713 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32713 AUC after training: 0.5
User 32713 does not improve AUC. Reverting changes.
Training on augumented user 74830 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74830 AUC after training: 0.5
User 74830 does not improve AUC. Reverting changes.
Training on augumented user 91234 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91234 AUC after training: 0.5
User 91234 does not improve AUC. Reverting changes.
Training on augumented user 25753 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25753 AUC after training: 0.5
User 25753 does not improve AUC. Reverting changes.
Training on augumented user 128801 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128801 AUC after training: 0.5
User 128801 does not improve AUC. Reverting changes.
Training on augumented user 81666 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81666 AUC after training: 0.5
User 81666 does not improve AUC. Reverting changes.
Training on augumented user 14365 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14365 AUC after training: 0.5
User 14365 does not improve AUC. Reverting changes.
Training on augumented user 57088 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57088 AUC after training: 0.5
User 57088 does not improve AUC. Reverting changes.
Training on augumented user 50551 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50551 AUC after training: 0.5
User 50551 does not improve AUC. Reverting changes.
Training on augumented user 46566 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46566 AUC after training: 0.5
User 46566 does not improve AUC. Reverting changes.
Training on augumented user 28842 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28842 AUC after training: 0.5
User 28842 does not improve AUC. Reverting changes.
Training on augumented user 109774 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109774 AUC after training: 0.5
User 109774 does not improve AUC. Reverting changes.
Training on augumented user 73790 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73790 AUC after training: 0.5
User 73790 does not improve AUC. Reverting changes.
Training on augumented user 77751 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77751 AUC after training: 0.5
User 77751 does not improve AUC. Reverting changes.
Training on augumented user 22215 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22215 AUC after training: 0.5
User 22215 does not improve AUC. Reverting changes.
Training on augumented user 17758 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17758 AUC after training: 0.5
User 17758 does not improve AUC. Reverting changes.
Training on augumented user 40997 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40997 AUC after training: 0.5
User 40997 does not improve AUC. Reverting changes.
Training on augumented user 8816 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8816 AUC after training: 0.5
User 8816 does not improve AUC. Reverting changes.
Training on augumented user 85125 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85125 AUC after training: 0.5
User 85125 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:37.235715] start test user 74421 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:37.700436] start test user 74421 214/568 recall augumented users by random, augumented_users = [88635, 34801, 56235, 105885, 42813, 112672, 28847, 84147, 78793, 76536, 30690, 127708, 13636, 5103, 83773, 82691, 4432, 82827, 99349, 52330, 33195, 25319, 91941, 93545, 38019, 55624, 33016, 42625, 759, 14798, 129120, 75983, 80545, 48731, 111251, 51833, 65669, 98436, 50776, 70523, 87081, 23064, 84851, 32931, 96351, 38938, 80668, 132147, 66408, 133431]
[2024-12-02 19:34:37.715587] user = 74421 Cloud 214/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:37.722058] user = 74421 Local 214/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:37.751860] user = 74421 Local+ 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:40.599220] user = 74421 MPDA- 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 88635 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88635 AUC after training: 0.5
User 88635 does not improve AUC. Reverting changes.
Training on augumented user 34801 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34801 AUC after training: 0.5
User 34801 does not improve AUC. Reverting changes.
Training on augumented user 56235 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56235 AUC after training: 0.5
User 56235 does not improve AUC. Reverting changes.
Training on augumented user 105885 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105885 AUC after training: 0.5
User 105885 does not improve AUC. Reverting changes.
Training on augumented user 42813 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42813 AUC after training: 0.5
User 42813 does not improve AUC. Reverting changes.
Training on augumented user 112672 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112672 AUC after training: 0.5
User 112672 does not improve AUC. Reverting changes.
Training on augumented user 28847 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28847 AUC after training: 0.5
User 28847 does not improve AUC. Reverting changes.
Training on augumented user 84147 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84147 AUC after training: 0.5
User 84147 does not improve AUC. Reverting changes.
Training on augumented user 78793 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78793 AUC after training: 0.5
User 78793 does not improve AUC. Reverting changes.
Training on augumented user 76536 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76536 AUC after training: 0.5
User 76536 does not improve AUC. Reverting changes.
Training on augumented user 30690 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30690 AUC after training: 0.5
User 30690 does not improve AUC. Reverting changes.
Training on augumented user 127708 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127708 AUC after training: 0.5
User 127708 does not improve AUC. Reverting changes.
Training on augumented user 13636 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13636 AUC after training: 0.5
User 13636 does not improve AUC. Reverting changes.
Training on augumented user 5103 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5103 AUC after training: 0.5
User 5103 does not improve AUC. Reverting changes.
Training on augumented user 83773 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83773 AUC after training: 0.5
User 83773 does not improve AUC. Reverting changes.
Training on augumented user 82691 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82691 AUC after training: 0.5
User 82691 does not improve AUC. Reverting changes.
Training on augumented user 4432 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4432 AUC after training: 0.5
User 4432 does not improve AUC. Reverting changes.
Training on augumented user 82827 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82827 AUC after training: 0.5
User 82827 does not improve AUC. Reverting changes.
Training on augumented user 99349 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99349 AUC after training: 0.5
User 99349 does not improve AUC. Reverting changes.
Training on augumented user 52330 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52330 AUC after training: 0.5
User 52330 does not improve AUC. Reverting changes.
Training on augumented user 33195 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33195 AUC after training: 0.5
User 33195 does not improve AUC. Reverting changes.
Training on augumented user 25319 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25319 AUC after training: 0.5
User 25319 does not improve AUC. Reverting changes.
Training on augumented user 91941 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91941 AUC after training: 0.5
User 91941 does not improve AUC. Reverting changes.
Training on augumented user 93545 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93545 AUC after training: 0.5
User 93545 does not improve AUC. Reverting changes.
Training on augumented user 38019 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38019 AUC after training: 0.5
User 38019 does not improve AUC. Reverting changes.
Training on augumented user 55624 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55624 AUC after training: 0.5
User 55624 does not improve AUC. Reverting changes.
Training on augumented user 33016 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33016 AUC after training: 0.5
User 33016 does not improve AUC. Reverting changes.
Training on augumented user 42625 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42625 AUC after training: 0.5
User 42625 does not improve AUC. Reverting changes.
Training on augumented user 759 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 759 AUC after training: 0.5
User 759 does not improve AUC. Reverting changes.
Training on augumented user 14798 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14798 AUC after training: 0.5
User 14798 does not improve AUC. Reverting changes.
Training on augumented user 129120 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129120 AUC after training: 0.5
User 129120 does not improve AUC. Reverting changes.
Training on augumented user 75983 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75983 AUC after training: 0.5
User 75983 does not improve AUC. Reverting changes.
Training on augumented user 80545 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80545 AUC after training: 0.5
User 80545 does not improve AUC. Reverting changes.
Training on augumented user 48731 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48731 AUC after training: 0.5
User 48731 does not improve AUC. Reverting changes.
Training on augumented user 111251 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111251 AUC after training: 0.5
User 111251 does not improve AUC. Reverting changes.
Training on augumented user 51833 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51833 AUC after training: 0.5
User 51833 does not improve AUC. Reverting changes.
Training on augumented user 65669 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65669 AUC after training: 0.5
User 65669 does not improve AUC. Reverting changes.
Training on augumented user 98436 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98436 AUC after training: 0.5
User 98436 does not improve AUC. Reverting changes.
Training on augumented user 50776 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50776 AUC after training: 0.5
User 50776 does not improve AUC. Reverting changes.
Training on augumented user 70523 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70523 AUC after training: 0.5
User 70523 does not improve AUC. Reverting changes.
Training on augumented user 87081 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87081 AUC after training: 0.5
User 87081 does not improve AUC. Reverting changes.
Training on augumented user 23064 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23064 AUC after training: 0.5
User 23064 does not improve AUC. Reverting changes.
Training on augumented user 84851 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84851 AUC after training: 0.5
User 84851 does not improve AUC. Reverting changes.
Training on augumented user 32931 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32931 AUC after training: 0.5
User 32931 does not improve AUC. Reverting changes.
Training on augumented user 96351 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96351 AUC after training: 0.5
User 96351 does not improve AUC. Reverting changes.
Training on augumented user 38938 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38938 AUC after training: 0.5
User 38938 does not improve AUC. Reverting changes.
Training on augumented user 80668 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80668 AUC after training: 0.5
User 80668 does not improve AUC. Reverting changes.
Training on augumented user 132147 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132147 AUC after training: 0.5
User 132147 does not improve AUC. Reverting changes.
Training on augumented user 66408 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66408 AUC after training: 0.5
User 66408 does not improve AUC. Reverting changes.
Training on augumented user 133431 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133431 AUC after training: 0.5
User 133431 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:07.067581] start test user 74427 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:07.670835] start test user 74427 215/568 recall augumented users by random, augumented_users = [105590, 85354, 36520, 109313, 93848, 113298, 113324, 18365, 41135, 28381, 133076, 104313, 104631, 94330, 62131, 7704, 37169, 94004, 132724, 56941, 45373, 95366, 111154, 94060, 15520, 107074, 94886, 11599, 91180, 92408, 81183, 86452, 29630, 70011, 92740, 12031, 32604, 97303, 31055, 66396, 69678, 73894, 56168, 104194, 3801, 10259, 70862, 126364, 92477, 11688]
[2024-12-02 19:35:07.685589] user = 74427 Cloud 215/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:07.699089] user = 74427 Local 215/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:07.724418] user = 74427 Local+ 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:10.070374] user = 74427 MPDA- 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 105590 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105590 AUC after training: 0.5
User 105590 does not improve AUC. Reverting changes.
Training on augumented user 85354 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85354 AUC after training: 0.5
User 85354 does not improve AUC. Reverting changes.
Training on augumented user 36520 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36520 AUC after training: 0.5
User 36520 does not improve AUC. Reverting changes.
Training on augumented user 109313 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109313 AUC after training: 0.5
User 109313 does not improve AUC. Reverting changes.
Training on augumented user 93848 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93848 AUC after training: 0.5
User 93848 does not improve AUC. Reverting changes.
Training on augumented user 113298 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113298 AUC after training: 0.5
User 113298 does not improve AUC. Reverting changes.
Training on augumented user 113324 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113324 AUC after training: 0.5
User 113324 does not improve AUC. Reverting changes.
Training on augumented user 18365 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18365 AUC after training: 0.5
User 18365 does not improve AUC. Reverting changes.
Training on augumented user 41135 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41135 AUC after training: 0.5
User 41135 does not improve AUC. Reverting changes.
Training on augumented user 28381 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28381 AUC after training: 0.5
User 28381 does not improve AUC. Reverting changes.
Training on augumented user 133076 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133076 AUC after training: 0.5
User 133076 does not improve AUC. Reverting changes.
Training on augumented user 104313 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104313 AUC after training: 0.5
User 104313 does not improve AUC. Reverting changes.
Training on augumented user 104631 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104631 AUC after training: 0.5
User 104631 does not improve AUC. Reverting changes.
Training on augumented user 94330 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94330 AUC after training: 0.5
User 94330 does not improve AUC. Reverting changes.
Training on augumented user 62131 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62131 AUC after training: 0.5
User 62131 does not improve AUC. Reverting changes.
Training on augumented user 7704 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7704 AUC after training: 0.5
User 7704 does not improve AUC. Reverting changes.
Training on augumented user 37169 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37169 AUC after training: 0.5
User 37169 does not improve AUC. Reverting changes.
Training on augumented user 94004 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94004 AUC after training: 0.5
User 94004 does not improve AUC. Reverting changes.
Training on augumented user 132724 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132724 AUC after training: 0.5
User 132724 does not improve AUC. Reverting changes.
Training on augumented user 56941 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56941 AUC after training: 0.5
User 56941 does not improve AUC. Reverting changes.
Training on augumented user 45373 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45373 AUC after training: 0.5
User 45373 does not improve AUC. Reverting changes.
Training on augumented user 95366 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95366 AUC after training: 0.5
User 95366 does not improve AUC. Reverting changes.
Training on augumented user 111154 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111154 AUC after training: 0.5
User 111154 does not improve AUC. Reverting changes.
Training on augumented user 94060 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94060 AUC after training: 0.5
User 94060 does not improve AUC. Reverting changes.
Training on augumented user 15520 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15520 AUC after training: 0.5
User 15520 does not improve AUC. Reverting changes.
Training on augumented user 107074 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107074 AUC after training: 0.5
User 107074 does not improve AUC. Reverting changes.
Training on augumented user 94886 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94886 AUC after training: 0.5
User 94886 does not improve AUC. Reverting changes.
Training on augumented user 11599 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11599 AUC after training: 0.5
User 11599 does not improve AUC. Reverting changes.
Training on augumented user 91180 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91180 AUC after training: 0.5
User 91180 does not improve AUC. Reverting changes.
Training on augumented user 92408 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92408 AUC after training: 0.5
User 92408 does not improve AUC. Reverting changes.
Training on augumented user 81183 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81183 AUC after training: 0.5
User 81183 does not improve AUC. Reverting changes.
Training on augumented user 86452 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86452 AUC after training: 0.5
User 86452 does not improve AUC. Reverting changes.
Training on augumented user 29630 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29630 AUC after training: 0.5
User 29630 does not improve AUC. Reverting changes.
Training on augumented user 70011 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70011 AUC after training: 0.5
User 70011 does not improve AUC. Reverting changes.
Training on augumented user 92740 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92740 AUC after training: 0.5
User 92740 does not improve AUC. Reverting changes.
Training on augumented user 12031 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12031 AUC after training: 0.5
User 12031 does not improve AUC. Reverting changes.
Training on augumented user 32604 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32604 AUC after training: 0.5
User 32604 does not improve AUC. Reverting changes.
Training on augumented user 97303 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97303 AUC after training: 0.5
User 97303 does not improve AUC. Reverting changes.
Training on augumented user 31055 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31055 AUC after training: 0.5
User 31055 does not improve AUC. Reverting changes.
Training on augumented user 66396 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66396 AUC after training: 0.5
User 66396 does not improve AUC. Reverting changes.
Training on augumented user 69678 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69678 AUC after training: 0.5
User 69678 does not improve AUC. Reverting changes.
Training on augumented user 73894 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73894 AUC after training: 0.5
User 73894 does not improve AUC. Reverting changes.
Training on augumented user 56168 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56168 AUC after training: 0.5
User 56168 does not improve AUC. Reverting changes.
Training on augumented user 104194 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104194 AUC after training: 0.5
User 104194 does not improve AUC. Reverting changes.
Training on augumented user 3801 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3801 AUC after training: 0.5
User 3801 does not improve AUC. Reverting changes.
Training on augumented user 10259 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10259 AUC after training: 0.5
User 10259 does not improve AUC. Reverting changes.
Training on augumented user 70862 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70862 AUC after training: 0.5
User 70862 does not improve AUC. Reverting changes.
Training on augumented user 126364 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126364 AUC after training: 0.5
User 126364 does not improve AUC. Reverting changes.
Training on augumented user 92477 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92477 AUC after training: 0.5
User 92477 does not improve AUC. Reverting changes.
Training on augumented user 11688 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11688 AUC after training: 0.5
User 11688 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:35.987656] start test user 74466 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:36.484485] start test user 74466 216/568 recall augumented users by random, augumented_users = [30407, 122229, 56646, 65935, 18861, 22706, 27618, 83192, 55510, 123293, 97178, 90650, 37970, 100476, 129004, 74990, 33725, 68532, 44935, 95454, 131285, 58125, 113942, 53663, 65847, 1144, 18207, 100279, 113948, 51338, 26382, 78139, 27806, 132927, 38614, 130027, 230, 128494, 67900, 100790, 36015, 846, 31693, 90999, 13141, 55757, 120206, 135962, 67370, 131238]
[2024-12-02 19:35:36.500712] user = 74466 Cloud 216/568
[2024-12-02 19:35:36.517595] user = 74466 Local 216/568
[2024-12-02 19:35:36.582419] user = 74466 Local+ 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:39.143617] user = 74466 MPDA- 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6536689117334279
Training on augumented user 30407 0/50 current_auc = 0.6536689117334279
User 30407 AUC after training: 0.6538461538461539
User 30407 improves AUC. Keeping the model.
Training on augumented user 122229 1/50 current_auc = 0.6538461538461539
User 122229 AUC after training: 0.6518964906061679
User 122229 does not improve AUC. Reverting changes.
Training on augumented user 56646 2/50 current_auc = 0.6538461538461539
User 56646 AUC after training: 0.6542006380716059
User 56646 improves AUC. Keeping the model.
Training on augumented user 65935 3/50 current_auc = 0.6542006380716059
User 65935 AUC after training: 0.6508330379298121
User 65935 does not improve AUC. Reverting changes.
Training on augumented user 18861 4/50 current_auc = 0.6542006380716059
User 18861 AUC after training: 0.6542006380716059
User 18861 does not improve AUC. Reverting changes.
Training on augumented user 22706 5/50 current_auc = 0.6542006380716059
User 22706 AUC after training: 0.6538461538461539
User 22706 does not improve AUC. Reverting changes.
Training on augumented user 27618 6/50 current_auc = 0.6542006380716059
User 27618 AUC after training: 0.6545551222970578
User 27618 improves AUC. Keeping the model.
Training on augumented user 83192 7/50 current_auc = 0.6545551222970578
User 83192 AUC after training: 0.6545551222970578
User 83192 does not improve AUC. Reverting changes.
Training on augumented user 55510 8/50 current_auc = 0.6545551222970578
User 55510 AUC after training: 0.6557958170861397
User 55510 improves AUC. Keeping the model.
Training on augumented user 123293 9/50 current_auc = 0.6557958170861397
User 123293 AUC after training: 0.6557958170861397
User 123293 does not improve AUC. Reverting changes.
Training on augumented user 97178 10/50 current_auc = 0.6557958170861397
User 97178 AUC after training: 0.6556185749734136
User 97178 does not improve AUC. Reverting changes.
Training on augumented user 90650 11/50 current_auc = 0.6557958170861397
User 90650 AUC after training: 0.6561503013115917
User 90650 improves AUC. Keeping the model.
Training on augumented user 37970 12/50 current_auc = 0.6561503013115917
User 37970 AUC after training: 0.6559730591988656
User 37970 does not improve AUC. Reverting changes.
Training on augumented user 100476 13/50 current_auc = 0.6561503013115917
User 100476 AUC after training: 0.6552640907479617
User 100476 does not improve AUC. Reverting changes.
Training on augumented user 129004 14/50 current_auc = 0.6561503013115917
User 129004 AUC after training: 0.6556185749734137
User 129004 does not improve AUC. Reverting changes.
Training on augumented user 74990 15/50 current_auc = 0.6561503013115917
User 74990 AUC after training: 0.6572137539879475
User 74990 improves AUC. Keeping the model.
Training on augumented user 33725 16/50 current_auc = 0.6572137539879475
User 33725 AUC after training: 0.6563275434243176
User 33725 does not improve AUC. Reverting changes.
Training on augumented user 68532 17/50 current_auc = 0.6572137539879475
User 68532 AUC after training: 0.6572137539879475
User 68532 does not improve AUC. Reverting changes.
Training on augumented user 44935 18/50 current_auc = 0.6572137539879475
User 44935 AUC after training: 0.6575682382133995
User 44935 improves AUC. Keeping the model.
Training on augumented user 95454 19/50 current_auc = 0.6575682382133995
User 95454 AUC after training: 0.6570365118752215
User 95454 does not improve AUC. Reverting changes.
Training on augumented user 131285 20/50 current_auc = 0.6575682382133995
User 131285 AUC after training: 0.6568592697624955
User 131285 does not improve AUC. Reverting changes.
Training on augumented user 58125 21/50 current_auc = 0.6575682382133995
User 58125 AUC after training: 0.6561503013115917
User 58125 does not improve AUC. Reverting changes.
Training on augumented user 113942 22/50 current_auc = 0.6575682382133995
User 113942 AUC after training: 0.6568592697624955
User 113942 does not improve AUC. Reverting changes.
Training on augumented user 53663 23/50 current_auc = 0.6575682382133995
User 53663 AUC after training: 0.6572137539879475
User 53663 does not improve AUC. Reverting changes.
Training on augumented user 65847 24/50 current_auc = 0.6575682382133995
User 65847 AUC after training: 0.6565047855370436
User 65847 does not improve AUC. Reverting changes.
Training on augumented user 1144 25/50 current_auc = 0.6575682382133995
User 1144 AUC after training: 0.6579227224388515
User 1144 improves AUC. Keeping the model.
Training on augumented user 18207 26/50 current_auc = 0.6579227224388515
User 18207 AUC after training: 0.6575682382133995
User 18207 does not improve AUC. Reverting changes.
Training on augumented user 100279 27/50 current_auc = 0.6579227224388515
User 100279 AUC after training: 0.6575682382133995
User 100279 does not improve AUC. Reverting changes.
Training on augumented user 113948 28/50 current_auc = 0.6579227224388515
User 113948 AUC after training: 0.6575682382133995
User 113948 does not improve AUC. Reverting changes.
Training on augumented user 51338 29/50 current_auc = 0.6579227224388515
User 51338 AUC after training: 0.6577454803261256
User 51338 does not improve AUC. Reverting changes.
Training on augumented user 26382 30/50 current_auc = 0.6579227224388515
User 26382 AUC after training: 0.6579227224388515
User 26382 does not improve AUC. Reverting changes.
Training on augumented user 78139 31/50 current_auc = 0.6579227224388515
User 78139 AUC after training: 0.6575682382133995
User 78139 does not improve AUC. Reverting changes.
Training on augumented user 27806 32/50 current_auc = 0.6579227224388515
User 27806 AUC after training: 0.6577454803261255
User 27806 does not improve AUC. Reverting changes.
Training on augumented user 132927 33/50 current_auc = 0.6579227224388515
User 132927 AUC after training: 0.6579227224388515
User 132927 does not improve AUC. Reverting changes.
Training on augumented user 38614 34/50 current_auc = 0.6579227224388515
User 38614 AUC after training: 0.6575682382133995
User 38614 does not improve AUC. Reverting changes.
Training on augumented user 130027 35/50 current_auc = 0.6579227224388515
User 130027 AUC after training: 0.6575682382133995
User 130027 does not improve AUC. Reverting changes.
Training on augumented user 230 36/50 current_auc = 0.6579227224388515
User 230 AUC after training: 0.6577454803261255
User 230 does not improve AUC. Reverting changes.
Training on augumented user 128494 37/50 current_auc = 0.6579227224388515
User 128494 AUC after training: 0.6577454803261255
User 128494 does not improve AUC. Reverting changes.
Training on augumented user 67900 38/50 current_auc = 0.6579227224388515
User 67900 AUC after training: 0.6579227224388514
User 67900 does not improve AUC. Reverting changes.
Training on augumented user 100790 39/50 current_auc = 0.6579227224388515
User 100790 AUC after training: 0.6579227224388514
User 100790 does not improve AUC. Reverting changes.
Training on augumented user 36015 40/50 current_auc = 0.6579227224388515
User 36015 AUC after training: 0.6573909961006734
User 36015 does not improve AUC. Reverting changes.
Training on augumented user 846 41/50 current_auc = 0.6579227224388515
User 846 AUC after training: 0.6580999645515775
User 846 improves AUC. Keeping the model.
Training on augumented user 31693 42/50 current_auc = 0.6580999645515775
User 31693 AUC after training: 0.6579227224388515
User 31693 does not improve AUC. Reverting changes.
Training on augumented user 90999 43/50 current_auc = 0.6580999645515775
User 90999 AUC after training: 0.6582772066643034
User 90999 improves AUC. Keeping the model.
Training on augumented user 13141 44/50 current_auc = 0.6582772066643034
User 13141 AUC after training: 0.6575682382133995
User 13141 does not improve AUC. Reverting changes.
Training on augumented user 55757 45/50 current_auc = 0.6582772066643034
User 55757 AUC after training: 0.6572137539879476
User 55757 does not improve AUC. Reverting changes.
Training on augumented user 120206 46/50 current_auc = 0.6582772066643034
User 120206 AUC after training: 0.6579227224388515
User 120206 does not improve AUC. Reverting changes.
Training on augumented user 135962 47/50 current_auc = 0.6582772066643034
User 135962 AUC after training: 0.6575682382133995
User 135962 does not improve AUC. Reverting changes.
Training on augumented user 67370 48/50 current_auc = 0.6582772066643034
User 67370 AUC after training: 0.6579227224388515
User 67370 does not improve AUC. Reverting changes.
Training on augumented user 131238 49/50 current_auc = 0.6582772066643034
User 131238 AUC after training: 0.6582772066643034
User 131238 does not improve AUC. Reverting changes.
[2024-12-02 19:36:07.061662] start test user 74473 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:07.531204] start test user 74473 217/568 recall augumented users by random, augumented_users = [94045, 93117, 80763, 71798, 53469, 125788, 59873, 109787, 34340, 108251, 93296, 123860, 23389, 72364, 11146, 63349, 135953, 34180, 112563, 1063, 90515, 6001, 93259, 10153, 38089, 66792, 102705, 110482, 24951, 19889, 86132, 83649, 121850, 65669, 26976, 91504, 97143, 114774, 75471, 80178, 56044, 90403, 75983, 99905, 42863, 1930, 39356, 78148, 84507, 132079]
[2024-12-02 19:36:07.546065] user = 74473 Cloud 217/568
[2024-12-02 19:36:07.558134] user = 74473 Local 217/568
[2024-12-02 19:36:07.633020] user = 74473 Local+ 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:10.529371] user = 74473 MPDA- 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5472972972972974
Training on augumented user 94045 0/50 current_auc = 0.5472972972972974
User 94045 AUC after training: 0.5489864864864865
User 94045 improves AUC. Keeping the model.
Training on augumented user 93117 1/50 current_auc = 0.5489864864864865
User 93117 AUC after training: 0.5472972972972974
User 93117 does not improve AUC. Reverting changes.
Training on augumented user 80763 2/50 current_auc = 0.5489864864864865
User 80763 AUC after training: 0.5489864864864865
User 80763 does not improve AUC. Reverting changes.
Training on augumented user 71798 3/50 current_auc = 0.5489864864864865
User 71798 AUC after training: 0.5489864864864865
User 71798 does not improve AUC. Reverting changes.
Training on augumented user 53469 4/50 current_auc = 0.5489864864864865
User 53469 AUC after training: 0.5489864864864865
User 53469 does not improve AUC. Reverting changes.
Training on augumented user 125788 5/50 current_auc = 0.5489864864864865
User 125788 AUC after training: 0.5472972972972974
User 125788 does not improve AUC. Reverting changes.
Training on augumented user 59873 6/50 current_auc = 0.5489864864864865
User 59873 AUC after training: 0.5405405405405406
User 59873 does not improve AUC. Reverting changes.
Training on augumented user 109787 7/50 current_auc = 0.5489864864864865
User 109787 AUC after training: 0.5472972972972974
User 109787 does not improve AUC. Reverting changes.
Training on augumented user 34340 8/50 current_auc = 0.5489864864864865
User 34340 AUC after training: 0.5506756756756757
User 34340 improves AUC. Keeping the model.
Training on augumented user 108251 9/50 current_auc = 0.5506756756756757
User 108251 AUC after training: 0.5472972972972974
User 108251 does not improve AUC. Reverting changes.
Training on augumented user 93296 10/50 current_auc = 0.5506756756756757
User 93296 AUC after training: 0.5506756756756757
User 93296 does not improve AUC. Reverting changes.
Training on augumented user 123860 11/50 current_auc = 0.5506756756756757
User 123860 AUC after training: 0.5506756756756757
User 123860 does not improve AUC. Reverting changes.
Training on augumented user 23389 12/50 current_auc = 0.5506756756756757
User 23389 AUC after training: 0.5489864864864865
User 23389 does not improve AUC. Reverting changes.
Training on augumented user 72364 13/50 current_auc = 0.5506756756756757
User 72364 AUC after training: 0.5489864864864865
User 72364 does not improve AUC. Reverting changes.
Training on augumented user 11146 14/50 current_auc = 0.5506756756756757
User 11146 AUC after training: 0.5489864864864865
User 11146 does not improve AUC. Reverting changes.
Training on augumented user 63349 15/50 current_auc = 0.5506756756756757
User 63349 AUC after training: 0.5506756756756757
User 63349 does not improve AUC. Reverting changes.
Training on augumented user 135953 16/50 current_auc = 0.5506756756756757
User 135953 AUC after training: 0.5506756756756757
User 135953 does not improve AUC. Reverting changes.
Training on augumented user 34180 17/50 current_auc = 0.5506756756756757
User 34180 AUC after training: 0.5489864864864865
User 34180 does not improve AUC. Reverting changes.
Training on augumented user 112563 18/50 current_auc = 0.5506756756756757
User 112563 AUC after training: 0.5506756756756757
User 112563 does not improve AUC. Reverting changes.
Training on augumented user 1063 19/50 current_auc = 0.5506756756756757
User 1063 AUC after training: 0.5506756756756757
User 1063 does not improve AUC. Reverting changes.
Training on augumented user 90515 20/50 current_auc = 0.5506756756756757
User 90515 AUC after training: 0.5422297297297297
User 90515 does not improve AUC. Reverting changes.
Training on augumented user 6001 21/50 current_auc = 0.5506756756756757
User 6001 AUC after training: 0.5506756756756757
User 6001 does not improve AUC. Reverting changes.
Training on augumented user 93259 22/50 current_auc = 0.5506756756756757
User 93259 AUC after training: 0.5506756756756757
User 93259 does not improve AUC. Reverting changes.
Training on augumented user 10153 23/50 current_auc = 0.5506756756756757
User 10153 AUC after training: 0.5506756756756757
User 10153 does not improve AUC. Reverting changes.
Training on augumented user 38089 24/50 current_auc = 0.5506756756756757
User 38089 AUC after training: 0.5506756756756757
User 38089 does not improve AUC. Reverting changes.
Training on augumented user 66792 25/50 current_auc = 0.5506756756756757
User 66792 AUC after training: 0.5506756756756757
User 66792 does not improve AUC. Reverting changes.
Training on augumented user 102705 26/50 current_auc = 0.5506756756756757
User 102705 AUC after training: 0.5506756756756757
User 102705 does not improve AUC. Reverting changes.
Training on augumented user 110482 27/50 current_auc = 0.5506756756756757
User 110482 AUC after training: 0.5506756756756757
User 110482 does not improve AUC. Reverting changes.
Training on augumented user 24951 28/50 current_auc = 0.5506756756756757
User 24951 AUC after training: 0.5506756756756757
User 24951 does not improve AUC. Reverting changes.
Training on augumented user 19889 29/50 current_auc = 0.5506756756756757
User 19889 AUC after training: 0.5506756756756757
User 19889 does not improve AUC. Reverting changes.
Training on augumented user 86132 30/50 current_auc = 0.5506756756756757
User 86132 AUC after training: 0.5506756756756757
User 86132 does not improve AUC. Reverting changes.
Training on augumented user 83649 31/50 current_auc = 0.5506756756756757
User 83649 AUC after training: 0.5506756756756757
User 83649 does not improve AUC. Reverting changes.
Training on augumented user 121850 32/50 current_auc = 0.5506756756756757
User 121850 AUC after training: 0.5489864864864865
User 121850 does not improve AUC. Reverting changes.
Training on augumented user 65669 33/50 current_auc = 0.5506756756756757
User 65669 AUC after training: 0.5506756756756757
User 65669 does not improve AUC. Reverting changes.
Training on augumented user 26976 34/50 current_auc = 0.5506756756756757
User 26976 AUC after training: 0.5506756756756757
User 26976 does not improve AUC. Reverting changes.
Training on augumented user 91504 35/50 current_auc = 0.5506756756756757
User 91504 AUC after training: 0.5472972972972974
User 91504 does not improve AUC. Reverting changes.
Training on augumented user 97143 36/50 current_auc = 0.5506756756756757
User 97143 AUC after training: 0.5506756756756757
User 97143 does not improve AUC. Reverting changes.
Training on augumented user 114774 37/50 current_auc = 0.5506756756756757
User 114774 AUC after training: 0.5506756756756757
User 114774 does not improve AUC. Reverting changes.
Training on augumented user 75471 38/50 current_auc = 0.5506756756756757
User 75471 AUC after training: 0.5506756756756757
User 75471 does not improve AUC. Reverting changes.
Training on augumented user 80178 39/50 current_auc = 0.5506756756756757
User 80178 AUC after training: 0.5506756756756757
User 80178 does not improve AUC. Reverting changes.
Training on augumented user 56044 40/50 current_auc = 0.5506756756756757
User 56044 AUC after training: 0.5506756756756757
User 56044 does not improve AUC. Reverting changes.
Training on augumented user 90403 41/50 current_auc = 0.5506756756756757
User 90403 AUC after training: 0.5506756756756757
User 90403 does not improve AUC. Reverting changes.
Training on augumented user 75983 42/50 current_auc = 0.5506756756756757
User 75983 AUC after training: 0.5506756756756757
User 75983 does not improve AUC. Reverting changes.
Training on augumented user 99905 43/50 current_auc = 0.5506756756756757
User 99905 AUC after training: 0.5506756756756757
User 99905 does not improve AUC. Reverting changes.
Training on augumented user 42863 44/50 current_auc = 0.5506756756756757
User 42863 AUC after training: 0.5506756756756757
User 42863 does not improve AUC. Reverting changes.
Training on augumented user 1930 45/50 current_auc = 0.5506756756756757
User 1930 AUC after training: 0.5472972972972973
User 1930 does not improve AUC. Reverting changes.
Training on augumented user 39356 46/50 current_auc = 0.5506756756756757
User 39356 AUC after training: 0.5506756756756757
User 39356 does not improve AUC. Reverting changes.
Training on augumented user 78148 47/50 current_auc = 0.5506756756756757
User 78148 AUC after training: 0.5489864864864865
User 78148 does not improve AUC. Reverting changes.
Training on augumented user 84507 48/50 current_auc = 0.5506756756756757
User 84507 AUC after training: 0.5506756756756757
User 84507 does not improve AUC. Reverting changes.
Training on augumented user 132079 49/50 current_auc = 0.5506756756756757
User 132079 AUC after training: 0.5489864864864865
User 132079 does not improve AUC. Reverting changes.
[2024-12-02 19:36:39.598643] start test user 74475 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:40.441710] start test user 74475 218/568 recall augumented users by random, augumented_users = [45218, 107374, 91825, 22448, 28793, 53296, 78938, 39711, 95809, 73140, 56692, 104703, 49719, 102563, 53291, 99961, 137491, 24201, 38875, 130425, 3940, 97033, 102802, 127928, 135526, 55161, 112028, 112843, 90434, 17067, 17571, 81727, 71130, 37645, 70505, 58450, 32243, 126053, 100725, 110749, 19864, 20721, 114228, 99196, 132592, 114421, 42690, 132679, 104146, 9508]
[2024-12-02 19:36:40.476701] user = 74475 Cloud 218/568
[2024-12-02 19:36:40.525347] user = 74475 Local 218/568
[2024-12-02 19:36:40.609071] user = 74475 Local+ 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:43.682991] user = 74475 MPDA- 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8384932920536636
Training on augumented user 45218 0/50 current_auc = 0.8384932920536636
User 45218 AUC after training: 0.8384932920536636
User 45218 does not improve AUC. Reverting changes.
Training on augumented user 107374 1/50 current_auc = 0.8384932920536636
User 107374 AUC after training: 0.8384932920536636
User 107374 does not improve AUC. Reverting changes.
Training on augumented user 91825 2/50 current_auc = 0.8384932920536636
User 91825 AUC after training: 0.8390092879256966
User 91825 improves AUC. Keeping the model.
Training on augumented user 22448 3/50 current_auc = 0.8390092879256966
User 22448 AUC after training: 0.8400412796697627
User 22448 improves AUC. Keeping the model.
Training on augumented user 28793 4/50 current_auc = 0.8400412796697627
User 28793 AUC after training: 0.8400412796697627
User 28793 does not improve AUC. Reverting changes.
Training on augumented user 53296 5/50 current_auc = 0.8400412796697627
User 53296 AUC after training: 0.8400412796697627
User 53296 does not improve AUC. Reverting changes.
Training on augumented user 78938 6/50 current_auc = 0.8400412796697627
User 78938 AUC after training: 0.8390092879256966
User 78938 does not improve AUC. Reverting changes.
Training on augumented user 39711 7/50 current_auc = 0.8400412796697627
User 39711 AUC after training: 0.8400412796697627
User 39711 does not improve AUC. Reverting changes.
Training on augumented user 95809 8/50 current_auc = 0.8400412796697627
User 95809 AUC after training: 0.8395252837977296
User 95809 does not improve AUC. Reverting changes.
Training on augumented user 73140 9/50 current_auc = 0.8400412796697627
User 73140 AUC after training: 0.8374613003095975
User 73140 does not improve AUC. Reverting changes.
Training on augumented user 56692 10/50 current_auc = 0.8400412796697627
User 56692 AUC after training: 0.8400412796697627
User 56692 does not improve AUC. Reverting changes.
Training on augumented user 104703 11/50 current_auc = 0.8400412796697627
User 104703 AUC after training: 0.8400412796697627
User 104703 does not improve AUC. Reverting changes.
Training on augumented user 49719 12/50 current_auc = 0.8400412796697627
User 49719 AUC after training: 0.8395252837977296
User 49719 does not improve AUC. Reverting changes.
Training on augumented user 102563 13/50 current_auc = 0.8400412796697627
User 102563 AUC after training: 0.8400412796697627
User 102563 does not improve AUC. Reverting changes.
Training on augumented user 53291 14/50 current_auc = 0.8400412796697627
User 53291 AUC after training: 0.8400412796697627
User 53291 does not improve AUC. Reverting changes.
Training on augumented user 99961 15/50 current_auc = 0.8400412796697627
User 99961 AUC after training: 0.8400412796697627
User 99961 does not improve AUC. Reverting changes.
Training on augumented user 137491 16/50 current_auc = 0.8400412796697627
User 137491 AUC after training: 0.8400412796697627
User 137491 does not improve AUC. Reverting changes.
Training on augumented user 24201 17/50 current_auc = 0.8400412796697627
User 24201 AUC after training: 0.8405572755417957
User 24201 improves AUC. Keeping the model.
Training on augumented user 38875 18/50 current_auc = 0.8405572755417957
User 38875 AUC after training: 0.8400412796697627
User 38875 does not improve AUC. Reverting changes.
Training on augumented user 130425 19/50 current_auc = 0.8405572755417957
User 130425 AUC after training: 0.8379772961816305
User 130425 does not improve AUC. Reverting changes.
Training on augumented user 3940 20/50 current_auc = 0.8405572755417957
User 3940 AUC after training: 0.8384932920536636
User 3940 does not improve AUC. Reverting changes.
Training on augumented user 97033 21/50 current_auc = 0.8405572755417957
User 97033 AUC after training: 0.8400412796697627
User 97033 does not improve AUC. Reverting changes.
Training on augumented user 102802 22/50 current_auc = 0.8405572755417957
User 102802 AUC after training: 0.8379772961816305
User 102802 does not improve AUC. Reverting changes.
Training on augumented user 127928 23/50 current_auc = 0.8405572755417957
User 127928 AUC after training: 0.8400412796697627
User 127928 does not improve AUC. Reverting changes.
Training on augumented user 135526 24/50 current_auc = 0.8405572755417957
User 135526 AUC after training: 0.8390092879256966
User 135526 does not improve AUC. Reverting changes.
Training on augumented user 55161 25/50 current_auc = 0.8405572755417957
User 55161 AUC after training: 0.8384932920536636
User 55161 does not improve AUC. Reverting changes.
Training on augumented user 112028 26/50 current_auc = 0.8405572755417957
User 112028 AUC after training: 0.8384932920536636
User 112028 does not improve AUC. Reverting changes.
Training on augumented user 112843 27/50 current_auc = 0.8405572755417957
User 112843 AUC after training: 0.8384932920536636
User 112843 does not improve AUC. Reverting changes.
Training on augumented user 90434 28/50 current_auc = 0.8405572755417957
User 90434 AUC after training: 0.8400412796697627
User 90434 does not improve AUC. Reverting changes.
Training on augumented user 17067 29/50 current_auc = 0.8405572755417957
User 17067 AUC after training: 0.8395252837977296
User 17067 does not improve AUC. Reverting changes.
Training on augumented user 17571 30/50 current_auc = 0.8405572755417957
User 17571 AUC after training: 0.8369453044375645
User 17571 does not improve AUC. Reverting changes.
Training on augumented user 81727 31/50 current_auc = 0.8405572755417957
User 81727 AUC after training: 0.8379772961816305
User 81727 does not improve AUC. Reverting changes.
Training on augumented user 71130 32/50 current_auc = 0.8405572755417957
User 71130 AUC after training: 0.8390092879256966
User 71130 does not improve AUC. Reverting changes.
Training on augumented user 37645 33/50 current_auc = 0.8405572755417957
User 37645 AUC after training: 0.8384932920536636
User 37645 does not improve AUC. Reverting changes.
Training on augumented user 70505 34/50 current_auc = 0.8405572755417957
User 70505 AUC after training: 0.8384932920536636
User 70505 does not improve AUC. Reverting changes.
Training on augumented user 58450 35/50 current_auc = 0.8405572755417957
User 58450 AUC after training: 0.8390092879256966
User 58450 does not improve AUC. Reverting changes.
Training on augumented user 32243 36/50 current_auc = 0.8405572755417957
User 32243 AUC after training: 0.8400412796697627
User 32243 does not improve AUC. Reverting changes.
Training on augumented user 126053 37/50 current_auc = 0.8405572755417957
User 126053 AUC after training: 0.8405572755417957
User 126053 does not improve AUC. Reverting changes.
Training on augumented user 100725 38/50 current_auc = 0.8405572755417957
User 100725 AUC after training: 0.8369453044375645
User 100725 does not improve AUC. Reverting changes.
Training on augumented user 110749 39/50 current_auc = 0.8405572755417957
User 110749 AUC after training: 0.8384932920536636
User 110749 does not improve AUC. Reverting changes.
Training on augumented user 19864 40/50 current_auc = 0.8405572755417957
User 19864 AUC after training: 0.8382352941176471
User 19864 does not improve AUC. Reverting changes.
Training on augumented user 20721 41/50 current_auc = 0.8405572755417957
User 20721 AUC after training: 0.8379772961816305
User 20721 does not improve AUC. Reverting changes.
Training on augumented user 114228 42/50 current_auc = 0.8405572755417957
User 114228 AUC after training: 0.8400412796697627
User 114228 does not improve AUC. Reverting changes.
Training on augumented user 99196 43/50 current_auc = 0.8405572755417957
User 99196 AUC after training: 0.8379772961816305
User 99196 does not improve AUC. Reverting changes.
Training on augumented user 132592 44/50 current_auc = 0.8405572755417957
User 132592 AUC after training: 0.8384932920536636
User 132592 does not improve AUC. Reverting changes.
Training on augumented user 114421 45/50 current_auc = 0.8405572755417957
User 114421 AUC after training: 0.8379772961816305
User 114421 does not improve AUC. Reverting changes.
Training on augumented user 42690 46/50 current_auc = 0.8405572755417957
User 42690 AUC after training: 0.8395252837977296
User 42690 does not improve AUC. Reverting changes.
Training on augumented user 132679 47/50 current_auc = 0.8405572755417957
User 132679 AUC after training: 0.8384932920536636
User 132679 does not improve AUC. Reverting changes.
Training on augumented user 104146 48/50 current_auc = 0.8405572755417957
User 104146 AUC after training: 0.8390092879256966
User 104146 does not improve AUC. Reverting changes.
Training on augumented user 9508 49/50 current_auc = 0.8405572755417957
User 9508 AUC after training: 0.8379772961816305
User 9508 does not improve AUC. Reverting changes.
[2024-12-02 19:37:11.469146] start test user 74492 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:11.880871] start test user 74492 219/568 recall augumented users by random, augumented_users = [116028, 77257, 110888, 22804, 40357, 100837, 73503, 38501, 27944, 105632, 81429, 74266, 89853, 99490, 89618, 79424, 52938, 107749, 117174, 124444, 84037, 130340, 85701, 81249, 41312, 12822, 119112, 22692, 17746, 89579, 13750, 125027, 41599, 89219, 19128, 108098, 3237, 9431, 118478, 62833, 81203, 68645, 27396, 47461, 10501, 80254, 61843, 24592, 26820, 97950]
[2024-12-02 19:37:11.895885] user = 74492 Cloud 219/568
[2024-12-02 19:37:11.920488] user = 74492 Local 219/568
[2024-12-02 19:37:12.097548] user = 74492 Local+ 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:14.551157] user = 74492 MPDA- 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5851792186870721
Training on augumented user 116028 0/50 current_auc = 0.5851792186870721
User 116028 AUC after training: 0.5853805879983891
User 116028 improves AUC. Keeping the model.
Training on augumented user 77257 1/50 current_auc = 0.5853805879983891
User 77257 AUC after training: 0.5855148342059338
User 77257 improves AUC. Keeping the model.
Training on augumented user 110888 2/50 current_auc = 0.5855148342059338
User 110888 AUC after training: 0.5851120955832998
User 110888 does not improve AUC. Reverting changes.
Training on augumented user 22804 3/50 current_auc = 0.5855148342059338
User 22804 AUC after training: 0.5859175728285677
User 22804 improves AUC. Keeping the model.
Training on augumented user 40357 4/50 current_auc = 0.5859175728285677
User 40357 AUC after training: 0.5862531883474291
User 40357 improves AUC. Keeping the model.
Training on augumented user 100837 5/50 current_auc = 0.5862531883474291
User 100837 AUC after training: 0.5864209961068598
User 100837 improves AUC. Keeping the model.
Training on augumented user 73503 6/50 current_auc = 0.5864209961068598
User 73503 AUC after training: 0.5866559269700631
User 73503 improves AUC. Keeping the model.
Training on augumented user 38501 7/50 current_auc = 0.5866559269700631
User 38501 AUC after training: 0.5871929118002417
User 38501 improves AUC. Keeping the model.
Training on augumented user 27944 8/50 current_auc = 0.5871929118002417
User 27944 AUC after training: 0.5867230500738354
User 27944 does not improve AUC. Reverting changes.
Training on augumented user 105632 9/50 current_auc = 0.5871929118002417
User 105632 AUC after training: 0.5873271580077863
User 105632 improves AUC. Keeping the model.
Training on augumented user 81429 10/50 current_auc = 0.5873271580077863
User 81429 AUC after training: 0.5875956504228755
User 81429 improves AUC. Keeping the model.
Training on augumented user 74266 11/50 current_auc = 0.5875956504228755
User 74266 AUC after training: 0.587494965767217
User 74266 does not improve AUC. Reverting changes.
Training on augumented user 89853 12/50 current_auc = 0.5875956504228755
User 89853 AUC after training: 0.5871929118002417
User 89853 does not improve AUC. Reverting changes.
Training on augumented user 99490 13/50 current_auc = 0.5875956504228755
User 99490 AUC after training: 0.587897704389851
User 99490 improves AUC. Keeping the model.
Training on augumented user 89618 14/50 current_auc = 0.587897704389851
User 89618 AUC after training: 0.5870922271445831
User 89618 does not improve AUC. Reverting changes.
Training on augumented user 79424 15/50 current_auc = 0.587897704389851
User 79424 AUC after training: 0.5873607195596724
User 79424 does not improve AUC. Reverting changes.
Training on augumented user 52938 16/50 current_auc = 0.587897704389851
User 52938 AUC after training: 0.587494965767217
User 52938 does not improve AUC. Reverting changes.
Training on augumented user 107749 17/50 current_auc = 0.587897704389851
User 107749 AUC after training: 0.5880319505973957
User 107749 improves AUC. Keeping the model.
Training on augumented user 117174 18/50 current_auc = 0.5880319505973957
User 117174 AUC after training: 0.587494965767217
User 117174 does not improve AUC. Reverting changes.
Training on augumented user 124444 19/50 current_auc = 0.5880319505973957
User 124444 AUC after training: 0.5880990737011679
User 124444 improves AUC. Keeping the model.
Training on augumented user 84037 20/50 current_auc = 0.5880990737011679
User 84037 AUC after training: 0.587897704389851
User 84037 does not improve AUC. Reverting changes.
Training on augumented user 130340 21/50 current_auc = 0.5880990737011679
User 130340 AUC after training: 0.587897704389851
User 130340 does not improve AUC. Reverting changes.
Training on augumented user 85701 22/50 current_auc = 0.5880990737011679
User 85701 AUC after training: 0.5875956504228756
User 85701 does not improve AUC. Reverting changes.
Training on augumented user 81249 23/50 current_auc = 0.5880990737011679
User 81249 AUC after training: 0.5878641428379647
User 81249 does not improve AUC. Reverting changes.
Training on augumented user 41312 24/50 current_auc = 0.5880990737011679
User 41312 AUC after training: 0.5875620888709894
User 41312 does not improve AUC. Reverting changes.
Training on augumented user 12822 25/50 current_auc = 0.5880990737011679
User 12822 AUC after training: 0.587897704389851
User 12822 does not improve AUC. Reverting changes.
Training on augumented user 119112 26/50 current_auc = 0.5880990737011679
User 119112 AUC after training: 0.5875620888709894
User 119112 does not improve AUC. Reverting changes.
Training on augumented user 22692 27/50 current_auc = 0.5880990737011679
User 22692 AUC after training: 0.587897704389851
User 22692 does not improve AUC. Reverting changes.
Training on augumented user 17746 28/50 current_auc = 0.5880990737011679
User 17746 AUC after training: 0.587897704389851
User 17746 does not improve AUC. Reverting changes.
Training on augumented user 89579 29/50 current_auc = 0.5880990737011679
User 89579 AUC after training: 0.5876292119747617
User 89579 does not improve AUC. Reverting changes.
Training on augumented user 13750 30/50 current_auc = 0.5880990737011679
User 13750 AUC after training: 0.5880990737011679
User 13750 does not improve AUC. Reverting changes.
Training on augumented user 125027 31/50 current_auc = 0.5880990737011679
User 125027 AUC after training: 0.5872264733521277
User 125027 does not improve AUC. Reverting changes.
Training on augumented user 41599 32/50 current_auc = 0.5880990737011679
User 41599 AUC after training: 0.587696335078534
User 41599 does not improve AUC. Reverting changes.
Training on augumented user 89219 33/50 current_auc = 0.5880990737011679
User 89219 AUC after training: 0.5871929118002417
User 89219 does not improve AUC. Reverting changes.
Training on augumented user 19128 34/50 current_auc = 0.5880990737011679
User 19128 AUC after training: 0.5874278426634447
User 19128 does not improve AUC. Reverting changes.
Training on augumented user 108098 35/50 current_auc = 0.5880990737011679
User 108098 AUC after training: 0.5879648274936233
User 108098 does not improve AUC. Reverting changes.
Training on augumented user 3237 36/50 current_auc = 0.5880990737011679
User 3237 AUC after training: 0.587696335078534
User 3237 does not improve AUC. Reverting changes.
Training on augumented user 9431 37/50 current_auc = 0.5880990737011679
User 9431 AUC after training: 0.587494965767217
User 9431 does not improve AUC. Reverting changes.
Training on augumented user 118478 38/50 current_auc = 0.5880990737011679
User 118478 AUC after training: 0.587897704389851
User 118478 does not improve AUC. Reverting changes.
Training on augumented user 62833 39/50 current_auc = 0.5880990737011679
User 62833 AUC after training: 0.5878305812860787
User 62833 does not improve AUC. Reverting changes.
Training on augumented user 81203 40/50 current_auc = 0.5880990737011679
User 81203 AUC after training: 0.5878305812860786
User 81203 does not improve AUC. Reverting changes.
Training on augumented user 68645 41/50 current_auc = 0.5880990737011679
User 68645 AUC after training: 0.5880319505973957
User 68645 does not improve AUC. Reverting changes.
Training on augumented user 27396 42/50 current_auc = 0.5880990737011679
User 27396 AUC after training: 0.588300443012485
User 27396 improves AUC. Keeping the model.
Training on augumented user 47461 43/50 current_auc = 0.588300443012485
User 47461 AUC after training: 0.5880319505973957
User 47461 does not improve AUC. Reverting changes.
Training on augumented user 10501 44/50 current_auc = 0.588300443012485
User 10501 AUC after training: 0.5876292119747617
User 10501 does not improve AUC. Reverting changes.
Training on augumented user 80254 45/50 current_auc = 0.588300443012485
User 80254 AUC after training: 0.5877970197341925
User 80254 does not improve AUC. Reverting changes.
Training on augumented user 61843 46/50 current_auc = 0.588300443012485
User 61843 AUC after training: 0.5880319505973955
User 61843 does not improve AUC. Reverting changes.
Training on augumented user 24592 47/50 current_auc = 0.588300443012485
User 24592 AUC after training: 0.587897704389851
User 24592 does not improve AUC. Reverting changes.
Training on augumented user 26820 48/50 current_auc = 0.588300443012485
User 26820 AUC after training: 0.5865216807625184
User 26820 does not improve AUC. Reverting changes.
Training on augumented user 97950 49/50 current_auc = 0.588300443012485
User 97950 AUC after training: 0.5878641428379647
User 97950 does not improve AUC. Reverting changes.
[2024-12-02 19:37:41.117196] start test user 74498 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:41.532436] start test user 74498 220/568 recall augumented users by random, augumented_users = [125628, 110101, 54992, 138288, 117557, 69729, 116250, 60258, 122225, 70333, 44596, 23061, 11721, 24393, 111453, 51899, 37248, 7529, 28122, 107274, 66091, 94386, 19491, 87026, 57118, 104717, 77065, 57052, 136445, 96872, 124362, 42742, 120522, 65721, 86217, 55439, 21515, 13438, 73972, 31544, 129066, 23387, 133385, 83309, 123509, 37637, 70007, 81781, 95293, 81346]
[2024-12-02 19:37:41.548088] user = 74498 Cloud 220/568
[2024-12-02 19:37:41.569482] user = 74498 Local 220/568
[2024-12-02 19:37:41.633783] user = 74498 Local+ 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:44.150954] user = 74498 MPDA- 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6098576883026727
Training on augumented user 125628 0/50 current_auc = 0.6098576883026727
User 125628 AUC after training: 0.6093948860349416
User 125628 does not improve AUC. Reverting changes.
Training on augumented user 110101 1/50 current_auc = 0.6098576883026727
User 110101 AUC after training: 0.6088163832002778
User 110101 does not improve AUC. Reverting changes.
Training on augumented user 54992 2/50 current_auc = 0.6098576883026727
User 54992 AUC after training: 0.60974198773574
User 54992 does not improve AUC. Reverting changes.
Training on augumented user 138288 3/50 current_auc = 0.6098576883026727
User 138288 AUC after training: 0.6095105866018743
User 138288 does not improve AUC. Reverting changes.
Training on augumented user 117557 4/50 current_auc = 0.6098576883026727
User 117557 AUC after training: 0.6099733888696055
User 117557 improves AUC. Keeping the model.
Training on augumented user 69729 5/50 current_auc = 0.6099733888696055
User 69729 AUC after training: 0.6100890894365383
User 69729 improves AUC. Keeping the model.
Training on augumented user 116250 6/50 current_auc = 0.6100890894365383
User 116250 AUC after training: 0.6098576883026727
User 116250 does not improve AUC. Reverting changes.
Training on augumented user 60258 7/50 current_auc = 0.6100890894365383
User 60258 AUC after training: 0.6100890894365382
User 60258 does not improve AUC. Reverting changes.
Training on augumented user 122225 8/50 current_auc = 0.6100890894365383
User 122225 AUC after training: 0.6095105866018744
User 122225 does not improve AUC. Reverting changes.
Training on augumented user 70333 9/50 current_auc = 0.6100890894365383
User 70333 AUC after training: 0.6105518917042694
User 70333 improves AUC. Keeping the model.
Training on augumented user 44596 10/50 current_auc = 0.6105518917042694
User 44596 AUC after training: 0.6111303945389333
User 44596 improves AUC. Keeping the model.
Training on augumented user 23061 11/50 current_auc = 0.6111303945389333
User 23061 AUC after training: 0.6092791854680089
User 23061 does not improve AUC. Reverting changes.
Training on augumented user 11721 12/50 current_auc = 0.6111303945389333
User 11721 AUC after training: 0.6106675922712022
User 11721 does not improve AUC. Reverting changes.
Training on augumented user 24393 13/50 current_auc = 0.6111303945389333
User 24393 AUC after training: 0.6103204905704038
User 24393 does not improve AUC. Reverting changes.
Training on augumented user 111453 14/50 current_auc = 0.6111303945389333
User 111453 AUC after training: 0.6106675922712022
User 111453 does not improve AUC. Reverting changes.
Training on augumented user 51899 15/50 current_auc = 0.6111303945389333
User 51899 AUC after training: 0.6106675922712022
User 51899 does not improve AUC. Reverting changes.
Training on augumented user 37248 16/50 current_auc = 0.6111303945389333
User 37248 AUC after training: 0.612287400208261
User 37248 improves AUC. Keeping the model.
Training on augumented user 7529 17/50 current_auc = 0.612287400208261
User 7529 AUC after training: 0.60974198773574
User 7529 does not improve AUC. Reverting changes.
Training on augumented user 28122 18/50 current_auc = 0.612287400208261
User 28122 AUC after training: 0.6125188013421266
User 28122 improves AUC. Keeping the model.
Training on augumented user 107274 19/50 current_auc = 0.6125188013421266
User 107274 AUC after training: 0.6125188013421266
User 107274 does not improve AUC. Reverting changes.
Training on augumented user 66091 20/50 current_auc = 0.6125188013421266
User 66091 AUC after training: 0.610204790003471
User 66091 does not improve AUC. Reverting changes.
Training on augumented user 94386 21/50 current_auc = 0.6125188013421266
User 94386 AUC after training: 0.6129816036098577
User 94386 improves AUC. Keeping the model.
Training on augumented user 19491 22/50 current_auc = 0.6129816036098577
User 19491 AUC after training: 0.6127502024759921
User 19491 does not improve AUC. Reverting changes.
Training on augumented user 87026 23/50 current_auc = 0.6129816036098577
User 87026 AUC after training: 0.612287400208261
User 87026 does not improve AUC. Reverting changes.
Training on augumented user 57118 24/50 current_auc = 0.6129816036098577
User 57118 AUC after training: 0.6135601064445215
User 57118 improves AUC. Keeping the model.
Training on augumented user 104717 25/50 current_auc = 0.6135601064445215
User 104717 AUC after training: 0.6135601064445215
User 104717 does not improve AUC. Reverting changes.
Training on augumented user 77065 26/50 current_auc = 0.6135601064445215
User 77065 AUC after training: 0.6127502024759921
User 77065 does not improve AUC. Reverting changes.
Training on augumented user 57052 27/50 current_auc = 0.6135601064445215
User 57052 AUC after training: 0.6121716996413282
User 57052 does not improve AUC. Reverting changes.
Training on augumented user 136445 28/50 current_auc = 0.6135601064445215
User 136445 AUC after training: 0.6124031007751938
User 136445 does not improve AUC. Reverting changes.
Training on augumented user 96872 29/50 current_auc = 0.6135601064445215
User 96872 AUC after training: 0.6125188013421266
User 96872 does not improve AUC. Reverting changes.
Training on augumented user 124362 30/50 current_auc = 0.6135601064445215
User 124362 AUC after training: 0.6137915075783872
User 124362 improves AUC. Keeping the model.
Training on augumented user 42742 31/50 current_auc = 0.6137915075783872
User 42742 AUC after training: 0.6121716996413282
User 42742 does not improve AUC. Reverting changes.
Training on augumented user 120522 32/50 current_auc = 0.6137915075783872
User 120522 AUC after training: 0.6125188013421266
User 120522 does not improve AUC. Reverting changes.
Training on augumented user 65721 33/50 current_auc = 0.6137915075783872
User 65721 AUC after training: 0.61390720814532
User 65721 improves AUC. Keeping the model.
Training on augumented user 86217 34/50 current_auc = 0.61390720814532
User 86217 AUC after training: 0.61390720814532
User 86217 does not improve AUC. Reverting changes.
Training on augumented user 55439 35/50 current_auc = 0.61390720814532
User 55439 AUC after training: 0.6137915075783872
User 55439 does not improve AUC. Reverting changes.
Training on augumented user 21515 36/50 current_auc = 0.61390720814532
User 21515 AUC after training: 0.6132130047437233
User 21515 does not improve AUC. Reverting changes.
Training on augumented user 13438 37/50 current_auc = 0.61390720814532
User 13438 AUC after training: 0.6142543098461182
User 13438 improves AUC. Keeping the model.
Training on augumented user 73972 38/50 current_auc = 0.6142543098461182
User 73972 AUC after training: 0.6127502024759921
User 73972 does not improve AUC. Reverting changes.
Training on augumented user 31544 39/50 current_auc = 0.6142543098461182
User 31544 AUC after training: 0.6128659030429249
User 31544 does not improve AUC. Reverting changes.
Training on augumented user 129066 40/50 current_auc = 0.6142543098461182
User 129066 AUC after training: 0.6134444058775887
User 129066 does not improve AUC. Reverting changes.
Training on augumented user 23387 41/50 current_auc = 0.6142543098461182
User 23387 AUC after training: 0.6126345019090593
User 23387 does not improve AUC. Reverting changes.
Training on augumented user 133385 42/50 current_auc = 0.6142543098461182
User 133385 AUC after training: 0.6132130047437232
User 133385 does not improve AUC. Reverting changes.
Training on augumented user 83309 43/50 current_auc = 0.6142543098461182
User 83309 AUC after training: 0.6140229087122526
User 83309 does not improve AUC. Reverting changes.
Training on augumented user 123509 44/50 current_auc = 0.6142543098461182
User 123509 AUC after training: 0.613328705310656
User 123509 does not improve AUC. Reverting changes.
Training on augumented user 37637 45/50 current_auc = 0.6142543098461182
User 37637 AUC after training: 0.6142543098461183
User 37637 improves AUC. Keeping the model.
Training on augumented user 70007 46/50 current_auc = 0.6142543098461183
User 70007 AUC after training: 0.6136758070114544
User 70007 does not improve AUC. Reverting changes.
Training on augumented user 81781 47/50 current_auc = 0.6142543098461183
User 81781 AUC after training: 0.6135601064445215
User 81781 does not improve AUC. Reverting changes.
Training on augumented user 95293 48/50 current_auc = 0.6142543098461183
User 95293 AUC after training: 0.6135601064445215
User 95293 does not improve AUC. Reverting changes.
Training on augumented user 81346 49/50 current_auc = 0.6142543098461183
User 81346 AUC after training: 0.6135601064445215
User 81346 does not improve AUC. Reverting changes.
[2024-12-02 19:38:17.743803] start test user 74539 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:18.343810] start test user 74539 221/568 recall augumented users by random, augumented_users = [100318, 27917, 55346, 16288, 131958, 52011, 31638, 27164, 73181, 30468, 90427, 134262, 60037, 20107, 118430, 51850, 53161, 87687, 69993, 80033, 78345, 126923, 107761, 21661, 60268, 100630, 11582, 93709, 45157, 71436, 90503, 15929, 77178, 112513, 47048, 123263, 30127, 24451, 99460, 62347, 131882, 115449, 60121, 58966, 13242, 117509, 71595, 81580, 85605, 120281]
[2024-12-02 19:38:18.361070] user = 74539 Cloud 221/568
[2024-12-02 19:38:18.403109] user = 74539 Local 221/568
[2024-12-02 19:38:18.537662] user = 74539 Local+ 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:20.551907] user = 74539 MPDA- 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7409522627102861
Training on augumented user 100318 0/50 current_auc = 0.7409522627102861
User 100318 AUC after training: 0.7407970699608915
User 100318 does not improve AUC. Reverting changes.
Training on augumented user 27917 1/50 current_auc = 0.7409522627102861
User 27917 AUC after training: 0.7408901856105283
User 27917 does not improve AUC. Reverting changes.
Training on augumented user 55346 2/50 current_auc = 0.7409522627102861
User 55346 AUC after training: 0.7406729157613756
User 55346 does not improve AUC. Reverting changes.
Training on augumented user 16288 3/50 current_auc = 0.7409522627102861
User 16288 AUC after training: 0.7408901856105283
User 16288 does not improve AUC. Reverting changes.
Training on augumented user 131958 4/50 current_auc = 0.7409522627102861
User 131958 AUC after training: 0.7412936867589547
User 131958 improves AUC. Keeping the model.
Training on augumented user 52011 5/50 current_auc = 0.7412936867589547
User 52011 AUC after training: 0.740750512136073
User 52011 does not improve AUC. Reverting changes.
Training on augumented user 31638 6/50 current_auc = 0.7412936867589547
User 31638 AUC after training: 0.7414178409584705
User 31638 improves AUC. Keeping the model.
Training on augumented user 27164 7/50 current_auc = 0.7414178409584705
User 27164 AUC after training: 0.7411850518343783
User 27164 does not improve AUC. Reverting changes.
Training on augumented user 73181 8/50 current_auc = 0.7414178409584705
User 73181 AUC after training: 0.741340244583773
User 73181 does not improve AUC. Reverting changes.
Training on augumented user 30468 9/50 current_auc = 0.7414178409584705
User 30468 AUC after training: 0.7414643987832888
User 30468 improves AUC. Keeping the model.
Training on augumented user 90427 10/50 current_auc = 0.7414643987832888
User 90427 AUC after training: 0.7411384940095599
User 90427 does not improve AUC. Reverting changes.
Training on augumented user 134262 11/50 current_auc = 0.7414643987832888
User 134262 AUC after training: 0.7414023216835309
User 134262 does not improve AUC. Reverting changes.
Training on augumented user 60037 12/50 current_auc = 0.7414643987832888
User 60037 AUC after training: 0.7411695325594388
User 60037 does not improve AUC. Reverting changes.
Training on augumented user 20107 13/50 current_auc = 0.7414643987832888
User 20107 AUC after training: 0.7415575144329256
User 20107 improves AUC. Keeping the model.
Training on augumented user 118430 14/50 current_auc = 0.7415575144329256
User 118430 AUC after training: 0.7415264758830467
User 118430 does not improve AUC. Reverting changes.
Training on augumented user 51850 15/50 current_auc = 0.7415575144329256
User 51850 AUC after training: 0.7415575144329257
User 51850 improves AUC. Keeping the model.
Training on augumented user 53161 16/50 current_auc = 0.7415575144329257
User 53161 AUC after training: 0.7413557638587125
User 53161 does not improve AUC. Reverting changes.
Training on augumented user 87687 17/50 current_auc = 0.7415575144329257
User 87687 AUC after training: 0.7414954373331678
User 87687 does not improve AUC. Reverting changes.
Training on augumented user 69993 18/50 current_auc = 0.7415575144329257
User 69993 AUC after training: 0.7414643987832888
User 69993 does not improve AUC. Reverting changes.
Training on augumented user 80033 19/50 current_auc = 0.7415575144329257
User 80033 AUC after training: 0.7414023216835309
User 80033 does not improve AUC. Reverting changes.
Training on augumented user 78345 20/50 current_auc = 0.7415575144329257
User 78345 AUC after training: 0.7412781674840152
User 78345 does not improve AUC. Reverting changes.
Training on augumented user 126923 21/50 current_auc = 0.7415575144329257
User 126923 AUC after training: 0.7413868024085914
User 126923 does not improve AUC. Reverting changes.
Training on augumented user 107761 22/50 current_auc = 0.7415575144329257
User 107761 AUC after training: 0.7414643987832888
User 107761 does not improve AUC. Reverting changes.
Training on augumented user 21661 23/50 current_auc = 0.7415575144329257
User 21661 AUC after training: 0.7413247253088335
User 21661 does not improve AUC. Reverting changes.
Training on augumented user 60268 24/50 current_auc = 0.7415575144329257
User 60268 AUC after training: 0.7414954373331679
User 60268 does not improve AUC. Reverting changes.
Training on augumented user 100630 25/50 current_auc = 0.7415575144329257
User 100630 AUC after training: 0.7414488795083494
User 100630 does not improve AUC. Reverting changes.
Training on augumented user 11582 26/50 current_auc = 0.7415575144329257
User 11582 AUC after training: 0.74143336023341
User 11582 does not improve AUC. Reverting changes.
Training on augumented user 93709 27/50 current_auc = 0.7415575144329257
User 93709 AUC after training: 0.741464398783289
User 93709 does not improve AUC. Reverting changes.
Training on augumented user 45157 28/50 current_auc = 0.7415575144329257
User 45157 AUC after training: 0.7415575144329257
User 45157 does not improve AUC. Reverting changes.
Training on augumented user 71436 29/50 current_auc = 0.7415575144329257
User 71436 AUC after training: 0.7416040722577442
User 71436 improves AUC. Keeping the model.
Training on augumented user 90503 30/50 current_auc = 0.7416040722577442
User 90503 AUC after training: 0.7416661493575021
User 90503 improves AUC. Keeping the model.
Training on augumented user 15929 31/50 current_auc = 0.7416661493575021
User 15929 AUC after training: 0.7417592650071388
User 15929 improves AUC. Keeping the model.
Training on augumented user 77178 32/50 current_auc = 0.7417592650071388
User 77178 AUC after training: 0.7420075734061705
User 77178 improves AUC. Keeping the model.
Training on augumented user 112513 33/50 current_auc = 0.7420075734061705
User 112513 AUC after training: 0.7418523806567757
User 112513 does not improve AUC. Reverting changes.
Training on augumented user 47048 34/50 current_auc = 0.7420075734061705
User 47048 AUC after training: 0.7418834192066547
User 47048 does not improve AUC. Reverting changes.
Training on augumented user 123263 35/50 current_auc = 0.7420075734061705
User 123263 AUC after training: 0.7419454963064125
User 123263 does not improve AUC. Reverting changes.
Training on augumented user 30127 36/50 current_auc = 0.7420075734061705
User 30127 AUC after training: 0.7419144577565336
User 30127 does not improve AUC. Reverting changes.
Training on augumented user 24451 37/50 current_auc = 0.7420075734061705
User 24451 AUC after training: 0.7420696505059283
User 24451 improves AUC. Keeping the model.
Training on augumented user 99460 38/50 current_auc = 0.7420696505059283
User 99460 AUC after training: 0.742054131230989
User 99460 does not improve AUC. Reverting changes.
Training on augumented user 62347 39/50 current_auc = 0.7420696505059283
User 62347 AUC after training: 0.7418213421068969
User 62347 does not improve AUC. Reverting changes.
Training on augumented user 131882 40/50 current_auc = 0.7420696505059283
User 131882 AUC after training: 0.7421317276056862
User 131882 improves AUC. Keeping the model.
Training on augumented user 115449 41/50 current_auc = 0.7421317276056862
User 115449 AUC after training: 0.7421627661555652
User 115449 improves AUC. Keeping the model.
Training on augumented user 60121 42/50 current_auc = 0.7421627661555652
User 60121 AUC after training: 0.7421006890558074
User 60121 does not improve AUC. Reverting changes.
Training on augumented user 58966 43/50 current_auc = 0.7421627661555652
User 58966 AUC after training: 0.7421782854305047
User 58966 improves AUC. Keeping the model.
Training on augumented user 13242 44/50 current_auc = 0.7421782854305047
User 13242 AUC after training: 0.741992054131231
User 13242 does not improve AUC. Reverting changes.
Training on augumented user 117509 45/50 current_auc = 0.7421782854305047
User 117509 AUC after training: 0.7422714010801414
User 117509 improves AUC. Keeping the model.
Training on augumented user 71595 46/50 current_auc = 0.7422714010801414
User 71595 AUC after training: 0.741992054131231
User 71595 does not improve AUC. Reverting changes.
Training on augumented user 81580 47/50 current_auc = 0.7422714010801414
User 81580 AUC after training: 0.7421006890558073
User 81580 does not improve AUC. Reverting changes.
Training on augumented user 85605 48/50 current_auc = 0.7422714010801414
User 85605 AUC after training: 0.7418058228319573
User 85605 does not improve AUC. Reverting changes.
Training on augumented user 120281 49/50 current_auc = 0.7422714010801414
User 120281 AUC after training: 0.7423334781798994
User 120281 improves AUC. Keeping the model.
[2024-12-02 19:38:41.847031] start test user 74549 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:42.627571] start test user 74549 222/568 recall augumented users by random, augumented_users = [10982, 131211, 124368, 53308, 2735, 43641, 11311, 30150, 61664, 65646, 53731, 122967, 94447, 73235, 43099, 27679, 41424, 121464, 29632, 90379, 101173, 63228, 118065, 71429, 29919, 127832, 27119, 62952, 134210, 25916, 20074, 122953, 77178, 110018, 13062, 17388, 104174, 5910, 52495, 105204, 47919, 33077, 69892, 117456, 104687, 103313, 41928, 113268, 26448, 82802]
[2024-12-02 19:38:42.656833] user = 74549 Cloud 222/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:38:42.742330] user = 74549 Local 222/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:38:42.837455] user = 74549 Local+ 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:38:44.988075] user = 74549 MPDA- 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 10982 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10982 AUC after training: 0.5
User 10982 does not improve AUC. Reverting changes.
Training on augumented user 131211 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131211 AUC after training: 0.5
User 131211 does not improve AUC. Reverting changes.
Training on augumented user 124368 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124368 AUC after training: 0.5
User 124368 does not improve AUC. Reverting changes.
Training on augumented user 53308 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53308 AUC after training: 0.5
User 53308 does not improve AUC. Reverting changes.
Training on augumented user 2735 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2735 AUC after training: 0.5
User 2735 does not improve AUC. Reverting changes.
Training on augumented user 43641 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43641 AUC after training: 0.5
User 43641 does not improve AUC. Reverting changes.
Training on augumented user 11311 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11311 AUC after training: 0.5
User 11311 does not improve AUC. Reverting changes.
Training on augumented user 30150 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30150 AUC after training: 0.5
User 30150 does not improve AUC. Reverting changes.
Training on augumented user 61664 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61664 AUC after training: 0.5
User 61664 does not improve AUC. Reverting changes.
Training on augumented user 65646 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65646 AUC after training: 0.5
User 65646 does not improve AUC. Reverting changes.
Training on augumented user 53731 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53731 AUC after training: 0.5
User 53731 does not improve AUC. Reverting changes.
Training on augumented user 122967 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122967 AUC after training: 0.5
User 122967 does not improve AUC. Reverting changes.
Training on augumented user 94447 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94447 AUC after training: 0.5
User 94447 does not improve AUC. Reverting changes.
Training on augumented user 73235 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73235 AUC after training: 0.5
User 73235 does not improve AUC. Reverting changes.
Training on augumented user 43099 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43099 AUC after training: 0.5
User 43099 does not improve AUC. Reverting changes.
Training on augumented user 27679 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27679 AUC after training: 0.5
User 27679 does not improve AUC. Reverting changes.
Training on augumented user 41424 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41424 AUC after training: 0.5
User 41424 does not improve AUC. Reverting changes.
Training on augumented user 121464 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121464 AUC after training: 0.5
User 121464 does not improve AUC. Reverting changes.
Training on augumented user 29632 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29632 AUC after training: 0.5
User 29632 does not improve AUC. Reverting changes.
Training on augumented user 90379 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90379 AUC after training: 0.5
User 90379 does not improve AUC. Reverting changes.
Training on augumented user 101173 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101173 AUC after training: 0.5
User 101173 does not improve AUC. Reverting changes.
Training on augumented user 63228 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63228 AUC after training: 0.5
User 63228 does not improve AUC. Reverting changes.
Training on augumented user 118065 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118065 AUC after training: 0.5
User 118065 does not improve AUC. Reverting changes.
Training on augumented user 71429 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71429 AUC after training: 0.5
User 71429 does not improve AUC. Reverting changes.
Training on augumented user 29919 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29919 AUC after training: 0.5
User 29919 does not improve AUC. Reverting changes.
Training on augumented user 127832 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127832 AUC after training: 0.5
User 127832 does not improve AUC. Reverting changes.
Training on augumented user 27119 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27119 AUC after training: 0.5
User 27119 does not improve AUC. Reverting changes.
Training on augumented user 62952 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62952 AUC after training: 0.5
User 62952 does not improve AUC. Reverting changes.
Training on augumented user 134210 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134210 AUC after training: 0.5
User 134210 does not improve AUC. Reverting changes.
Training on augumented user 25916 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25916 AUC after training: 0.5
User 25916 does not improve AUC. Reverting changes.
Training on augumented user 20074 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20074 AUC after training: 0.5
User 20074 does not improve AUC. Reverting changes.
Training on augumented user 122953 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122953 AUC after training: 0.5
User 122953 does not improve AUC. Reverting changes.
Training on augumented user 77178 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77178 AUC after training: 0.5
User 77178 does not improve AUC. Reverting changes.
Training on augumented user 110018 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110018 AUC after training: 0.5
User 110018 does not improve AUC. Reverting changes.
Training on augumented user 13062 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13062 AUC after training: 0.5
User 13062 does not improve AUC. Reverting changes.
Training on augumented user 17388 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17388 AUC after training: 0.5
User 17388 does not improve AUC. Reverting changes.
Training on augumented user 104174 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104174 AUC after training: 0.5
User 104174 does not improve AUC. Reverting changes.
Training on augumented user 5910 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5910 AUC after training: 0.5
User 5910 does not improve AUC. Reverting changes.
Training on augumented user 52495 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52495 AUC after training: 0.5
User 52495 does not improve AUC. Reverting changes.
Training on augumented user 105204 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105204 AUC after training: 0.5
User 105204 does not improve AUC. Reverting changes.
Training on augumented user 47919 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47919 AUC after training: 0.5
User 47919 does not improve AUC. Reverting changes.
Training on augumented user 33077 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33077 AUC after training: 0.5
User 33077 does not improve AUC. Reverting changes.
Training on augumented user 69892 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69892 AUC after training: 0.5
User 69892 does not improve AUC. Reverting changes.
Training on augumented user 117456 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117456 AUC after training: 0.5
User 117456 does not improve AUC. Reverting changes.
Training on augumented user 104687 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104687 AUC after training: 0.5
User 104687 does not improve AUC. Reverting changes.
Training on augumented user 103313 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103313 AUC after training: 0.5
User 103313 does not improve AUC. Reverting changes.
Training on augumented user 41928 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41928 AUC after training: 0.5
User 41928 does not improve AUC. Reverting changes.
Training on augumented user 113268 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113268 AUC after training: 0.5
User 113268 does not improve AUC. Reverting changes.
Training on augumented user 26448 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26448 AUC after training: 0.5
User 26448 does not improve AUC. Reverting changes.
Training on augumented user 82802 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82802 AUC after training: 0.5
User 82802 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:39:11.972125] start test user 74566 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:12.407349] start test user 74566 223/568 recall augumented users by random, augumented_users = [14653, 124481, 51879, 25037, 89831, 65613, 76430, 1973, 117479, 110748, 23369, 98208, 4348, 90136, 80210, 116964, 87442, 69765, 40038, 67711, 102542, 48368, 33353, 49448, 106165, 127311, 92908, 17579, 61889, 97412, 30778, 43751, 21067, 110513, 58693, 1370, 138472, 115139, 63037, 125600, 107948, 91227, 44924, 37693, 97954, 85844, 107654, 88188, 131886, 77269]
[2024-12-02 19:39:12.423228] user = 74566 Cloud 223/568
[2024-12-02 19:39:12.437584] user = 74566 Local 223/568
[2024-12-02 19:39:12.473706] user = 74566 Local+ 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:14.263281] user = 74566 MPDA- 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7456790123456789
Training on augumented user 14653 0/50 current_auc = 0.7456790123456789
User 14653 AUC after training: 0.745679012345679
User 14653 improves AUC. Keeping the model.
Training on augumented user 124481 1/50 current_auc = 0.745679012345679
User 124481 AUC after training: 0.7448559670781894
User 124481 does not improve AUC. Reverting changes.
Training on augumented user 51879 2/50 current_auc = 0.745679012345679
User 51879 AUC after training: 0.7440329218106996
User 51879 does not improve AUC. Reverting changes.
Training on augumented user 25037 3/50 current_auc = 0.745679012345679
User 25037 AUC after training: 0.7481481481481481
User 25037 improves AUC. Keeping the model.
Training on augumented user 89831 4/50 current_auc = 0.7481481481481481
User 89831 AUC after training: 0.7456790123456789
User 89831 does not improve AUC. Reverting changes.
Training on augumented user 65613 5/50 current_auc = 0.7481481481481481
User 65613 AUC after training: 0.7473251028806585
User 65613 does not improve AUC. Reverting changes.
Training on augumented user 76430 6/50 current_auc = 0.7481481481481481
User 76430 AUC after training: 0.7465020576131687
User 76430 does not improve AUC. Reverting changes.
Training on augumented user 1973 7/50 current_auc = 0.7481481481481481
User 1973 AUC after training: 0.7448559670781892
User 1973 does not improve AUC. Reverting changes.
Training on augumented user 117479 8/50 current_auc = 0.7481481481481481
User 117479 AUC after training: 0.7473251028806585
User 117479 does not improve AUC. Reverting changes.
Training on augumented user 110748 9/50 current_auc = 0.7481481481481481
User 110748 AUC after training: 0.7465020576131687
User 110748 does not improve AUC. Reverting changes.
Training on augumented user 23369 10/50 current_auc = 0.7481481481481481
User 23369 AUC after training: 0.7465020576131687
User 23369 does not improve AUC. Reverting changes.
Training on augumented user 98208 11/50 current_auc = 0.7481481481481481
User 98208 AUC after training: 0.7448559670781892
User 98208 does not improve AUC. Reverting changes.
Training on augumented user 4348 12/50 current_auc = 0.7481481481481481
User 4348 AUC after training: 0.7465020576131687
User 4348 does not improve AUC. Reverting changes.
Training on augumented user 90136 13/50 current_auc = 0.7481481481481481
User 90136 AUC after training: 0.7440329218106996
User 90136 does not improve AUC. Reverting changes.
Training on augumented user 80210 14/50 current_auc = 0.7481481481481481
User 80210 AUC after training: 0.7473251028806585
User 80210 does not improve AUC. Reverting changes.
Training on augumented user 116964 15/50 current_auc = 0.7481481481481481
User 116964 AUC after training: 0.7473251028806585
User 116964 does not improve AUC. Reverting changes.
Training on augumented user 87442 16/50 current_auc = 0.7481481481481481
User 87442 AUC after training: 0.7473251028806585
User 87442 does not improve AUC. Reverting changes.
Training on augumented user 69765 17/50 current_auc = 0.7481481481481481
User 69765 AUC after training: 0.7465020576131688
User 69765 does not improve AUC. Reverting changes.
Training on augumented user 40038 18/50 current_auc = 0.7481481481481481
User 40038 AUC after training: 0.7473251028806585
User 40038 does not improve AUC. Reverting changes.
Training on augumented user 67711 19/50 current_auc = 0.7481481481481481
User 67711 AUC after training: 0.7473251028806585
User 67711 does not improve AUC. Reverting changes.
Training on augumented user 102542 20/50 current_auc = 0.7481481481481481
User 102542 AUC after training: 0.7489711934156378
User 102542 improves AUC. Keeping the model.
Training on augumented user 48368 21/50 current_auc = 0.7489711934156378
User 48368 AUC after training: 0.7481481481481481
User 48368 does not improve AUC. Reverting changes.
Training on augumented user 33353 22/50 current_auc = 0.7489711934156378
User 33353 AUC after training: 0.7489711934156378
User 33353 does not improve AUC. Reverting changes.
Training on augumented user 49448 23/50 current_auc = 0.7489711934156378
User 49448 AUC after training: 0.7473251028806585
User 49448 does not improve AUC. Reverting changes.
Training on augumented user 106165 24/50 current_auc = 0.7489711934156378
User 106165 AUC after training: 0.7456790123456789
User 106165 does not improve AUC. Reverting changes.
Training on augumented user 127311 25/50 current_auc = 0.7489711934156378
User 127311 AUC after training: 0.7473251028806585
User 127311 does not improve AUC. Reverting changes.
Training on augumented user 92908 26/50 current_auc = 0.7489711934156378
User 92908 AUC after training: 0.7473251028806585
User 92908 does not improve AUC. Reverting changes.
Training on augumented user 17579 27/50 current_auc = 0.7489711934156378
User 17579 AUC after training: 0.7465020576131687
User 17579 does not improve AUC. Reverting changes.
Training on augumented user 61889 28/50 current_auc = 0.7489711934156378
User 61889 AUC after training: 0.7473251028806585
User 61889 does not improve AUC. Reverting changes.
Training on augumented user 97412 29/50 current_auc = 0.7489711934156378
User 97412 AUC after training: 0.7465020576131687
User 97412 does not improve AUC. Reverting changes.
Training on augumented user 30778 30/50 current_auc = 0.7489711934156378
User 30778 AUC after training: 0.7481481481481481
User 30778 does not improve AUC. Reverting changes.
Training on augumented user 43751 31/50 current_auc = 0.7489711934156378
User 43751 AUC after training: 0.7448559670781894
User 43751 does not improve AUC. Reverting changes.
Training on augumented user 21067 32/50 current_auc = 0.7489711934156378
User 21067 AUC after training: 0.7440329218106996
User 21067 does not improve AUC. Reverting changes.
Training on augumented user 110513 33/50 current_auc = 0.7489711934156378
User 110513 AUC after training: 0.7448559670781892
User 110513 does not improve AUC. Reverting changes.
Training on augumented user 58693 34/50 current_auc = 0.7489711934156378
User 58693 AUC after training: 0.7473251028806585
User 58693 does not improve AUC. Reverting changes.
Training on augumented user 1370 35/50 current_auc = 0.7489711934156378
User 1370 AUC after training: 0.7465020576131687
User 1370 does not improve AUC. Reverting changes.
Training on augumented user 138472 36/50 current_auc = 0.7489711934156378
User 138472 AUC after training: 0.7448559670781894
User 138472 does not improve AUC. Reverting changes.
Training on augumented user 115139 37/50 current_auc = 0.7489711934156378
User 115139 AUC after training: 0.7473251028806585
User 115139 does not improve AUC. Reverting changes.
Training on augumented user 63037 38/50 current_auc = 0.7489711934156378
User 63037 AUC after training: 0.7465020576131687
User 63037 does not improve AUC. Reverting changes.
Training on augumented user 125600 39/50 current_auc = 0.7489711934156378
User 125600 AUC after training: 0.7465020576131688
User 125600 does not improve AUC. Reverting changes.
Training on augumented user 107948 40/50 current_auc = 0.7489711934156378
User 107948 AUC after training: 0.7481481481481481
User 107948 does not improve AUC. Reverting changes.
Training on augumented user 91227 41/50 current_auc = 0.7489711934156378
User 91227 AUC after training: 0.7481481481481481
User 91227 does not improve AUC. Reverting changes.
Training on augumented user 44924 42/50 current_auc = 0.7489711934156378
User 44924 AUC after training: 0.7465020576131687
User 44924 does not improve AUC. Reverting changes.
Training on augumented user 37693 43/50 current_auc = 0.7489711934156378
User 37693 AUC after training: 0.7465020576131687
User 37693 does not improve AUC. Reverting changes.
Training on augumented user 97954 44/50 current_auc = 0.7489711934156378
User 97954 AUC after training: 0.7465020576131687
User 97954 does not improve AUC. Reverting changes.
Training on augumented user 85844 45/50 current_auc = 0.7489711934156378
User 85844 AUC after training: 0.7473251028806585
User 85844 does not improve AUC. Reverting changes.
Training on augumented user 107654 46/50 current_auc = 0.7489711934156378
User 107654 AUC after training: 0.7481481481481481
User 107654 does not improve AUC. Reverting changes.
Training on augumented user 88188 47/50 current_auc = 0.7489711934156378
User 88188 AUC after training: 0.7415637860082304
User 88188 does not improve AUC. Reverting changes.
Training on augumented user 131886 48/50 current_auc = 0.7489711934156378
User 131886 AUC after training: 0.7456790123456789
User 131886 does not improve AUC. Reverting changes.
Training on augumented user 77269 49/50 current_auc = 0.7489711934156378
User 77269 AUC after training: 0.7473251028806585
User 77269 does not improve AUC. Reverting changes.
[2024-12-02 19:39:41.463145] start test user 74586 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:42.306249] start test user 74586 224/568 recall augumented users by random, augumented_users = [52096, 29038, 82234, 98776, 15754, 71812, 18488, 13202, 23932, 113840, 108653, 120459, 98187, 22469, 53169, 132554, 36943, 64971, 31192, 109490, 110756, 99812, 100287, 39967, 68300, 73479, 42480, 40553, 41439, 31942, 120404, 10632, 82804, 21264, 65379, 27528, 112695, 72389, 94319, 79464, 33783, 135899, 100026, 36728, 45398, 71802, 103616, 15481, 28311, 70422]
[2024-12-02 19:39:42.344668] user = 74586 Cloud 224/568
[2024-12-02 19:39:42.361856] user = 74586 Local 224/568
[2024-12-02 19:39:42.514079] user = 74586 Local+ 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:45.082792] user = 74586 MPDA- 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4285714285714286
Training on augumented user 52096 0/50 current_auc = 0.4285714285714286
User 52096 AUC after training: 0.4285714285714286
User 52096 does not improve AUC. Reverting changes.
Training on augumented user 29038 1/50 current_auc = 0.4285714285714286
User 29038 AUC after training: 0.4285714285714286
User 29038 does not improve AUC. Reverting changes.
Training on augumented user 82234 2/50 current_auc = 0.4285714285714286
User 82234 AUC after training: 0.4285714285714286
User 82234 does not improve AUC. Reverting changes.
Training on augumented user 98776 3/50 current_auc = 0.4285714285714286
User 98776 AUC after training: 0.4285714285714286
User 98776 does not improve AUC. Reverting changes.
Training on augumented user 15754 4/50 current_auc = 0.4285714285714286
User 15754 AUC after training: 0.4285714285714286
User 15754 does not improve AUC. Reverting changes.
Training on augumented user 71812 5/50 current_auc = 0.4285714285714286
User 71812 AUC after training: 0.4285714285714286
User 71812 does not improve AUC. Reverting changes.
Training on augumented user 18488 6/50 current_auc = 0.4285714285714286
User 18488 AUC after training: 0.4285714285714286
User 18488 does not improve AUC. Reverting changes.
Training on augumented user 13202 7/50 current_auc = 0.4285714285714286
User 13202 AUC after training: 0.43537414965986393
User 13202 improves AUC. Keeping the model.
Training on augumented user 23932 8/50 current_auc = 0.43537414965986393
User 23932 AUC after training: 0.43537414965986393
User 23932 does not improve AUC. Reverting changes.
Training on augumented user 113840 9/50 current_auc = 0.43537414965986393
User 113840 AUC after training: 0.43537414965986393
User 113840 does not improve AUC. Reverting changes.
Training on augumented user 108653 10/50 current_auc = 0.43537414965986393
User 108653 AUC after training: 0.43537414965986393
User 108653 does not improve AUC. Reverting changes.
Training on augumented user 120459 11/50 current_auc = 0.43537414965986393
User 120459 AUC after training: 0.43537414965986393
User 120459 does not improve AUC. Reverting changes.
Training on augumented user 98187 12/50 current_auc = 0.43537414965986393
User 98187 AUC after training: 0.43537414965986393
User 98187 does not improve AUC. Reverting changes.
Training on augumented user 22469 13/50 current_auc = 0.43537414965986393
User 22469 AUC after training: 0.43537414965986393
User 22469 does not improve AUC. Reverting changes.
Training on augumented user 53169 14/50 current_auc = 0.43537414965986393
User 53169 AUC after training: 0.43537414965986393
User 53169 does not improve AUC. Reverting changes.
Training on augumented user 132554 15/50 current_auc = 0.43537414965986393
User 132554 AUC after training: 0.43537414965986393
User 132554 does not improve AUC. Reverting changes.
Training on augumented user 36943 16/50 current_auc = 0.43537414965986393
User 36943 AUC after training: 0.43537414965986393
User 36943 does not improve AUC. Reverting changes.
Training on augumented user 64971 17/50 current_auc = 0.43537414965986393
User 64971 AUC after training: 0.43537414965986393
User 64971 does not improve AUC. Reverting changes.
Training on augumented user 31192 18/50 current_auc = 0.43537414965986393
User 31192 AUC after training: 0.43537414965986393
User 31192 does not improve AUC. Reverting changes.
Training on augumented user 109490 19/50 current_auc = 0.43537414965986393
User 109490 AUC after training: 0.43537414965986393
User 109490 does not improve AUC. Reverting changes.
Training on augumented user 110756 20/50 current_auc = 0.43537414965986393
User 110756 AUC after training: 0.43537414965986393
User 110756 does not improve AUC. Reverting changes.
Training on augumented user 99812 21/50 current_auc = 0.43537414965986393
User 99812 AUC after training: 0.43537414965986393
User 99812 does not improve AUC. Reverting changes.
Training on augumented user 100287 22/50 current_auc = 0.43537414965986393
User 100287 AUC after training: 0.43537414965986393
User 100287 does not improve AUC. Reverting changes.
Training on augumented user 39967 23/50 current_auc = 0.43537414965986393
User 39967 AUC after training: 0.43537414965986393
User 39967 does not improve AUC. Reverting changes.
Training on augumented user 68300 24/50 current_auc = 0.43537414965986393
User 68300 AUC after training: 0.43537414965986393
User 68300 does not improve AUC. Reverting changes.
Training on augumented user 73479 25/50 current_auc = 0.43537414965986393
User 73479 AUC after training: 0.43537414965986393
User 73479 does not improve AUC. Reverting changes.
Training on augumented user 42480 26/50 current_auc = 0.43537414965986393
User 42480 AUC after training: 0.43537414965986393
User 42480 does not improve AUC. Reverting changes.
Training on augumented user 40553 27/50 current_auc = 0.43537414965986393
User 40553 AUC after training: 0.43537414965986393
User 40553 does not improve AUC. Reverting changes.
Training on augumented user 41439 28/50 current_auc = 0.43537414965986393
User 41439 AUC after training: 0.435374149659864
User 41439 improves AUC. Keeping the model.
Training on augumented user 31942 29/50 current_auc = 0.435374149659864
User 31942 AUC after training: 0.43537414965986393
User 31942 does not improve AUC. Reverting changes.
Training on augumented user 120404 30/50 current_auc = 0.435374149659864
User 120404 AUC after training: 0.44217687074829937
User 120404 improves AUC. Keeping the model.
Training on augumented user 10632 31/50 current_auc = 0.44217687074829937
User 10632 AUC after training: 0.44217687074829937
User 10632 does not improve AUC. Reverting changes.
Training on augumented user 82804 32/50 current_auc = 0.44217687074829937
User 82804 AUC after training: 0.44217687074829937
User 82804 does not improve AUC. Reverting changes.
Training on augumented user 21264 33/50 current_auc = 0.44217687074829937
User 21264 AUC after training: 0.44217687074829937
User 21264 does not improve AUC. Reverting changes.
Training on augumented user 65379 34/50 current_auc = 0.44217687074829937
User 65379 AUC after training: 0.435374149659864
User 65379 does not improve AUC. Reverting changes.
Training on augumented user 27528 35/50 current_auc = 0.44217687074829937
User 27528 AUC after training: 0.44217687074829937
User 27528 does not improve AUC. Reverting changes.
Training on augumented user 112695 36/50 current_auc = 0.44217687074829937
User 112695 AUC after training: 0.44217687074829937
User 112695 does not improve AUC. Reverting changes.
Training on augumented user 72389 37/50 current_auc = 0.44217687074829937
User 72389 AUC after training: 0.435374149659864
User 72389 does not improve AUC. Reverting changes.
Training on augumented user 94319 38/50 current_auc = 0.44217687074829937
User 94319 AUC after training: 0.435374149659864
User 94319 does not improve AUC. Reverting changes.
Training on augumented user 79464 39/50 current_auc = 0.44217687074829937
User 79464 AUC after training: 0.44217687074829937
User 79464 does not improve AUC. Reverting changes.
Training on augumented user 33783 40/50 current_auc = 0.44217687074829937
User 33783 AUC after training: 0.44217687074829937
User 33783 does not improve AUC. Reverting changes.
Training on augumented user 135899 41/50 current_auc = 0.44217687074829937
User 135899 AUC after training: 0.44217687074829937
User 135899 does not improve AUC. Reverting changes.
Training on augumented user 100026 42/50 current_auc = 0.44217687074829937
User 100026 AUC after training: 0.44217687074829937
User 100026 does not improve AUC. Reverting changes.
Training on augumented user 36728 43/50 current_auc = 0.44217687074829937
User 36728 AUC after training: 0.44217687074829937
User 36728 does not improve AUC. Reverting changes.
Training on augumented user 45398 44/50 current_auc = 0.44217687074829937
User 45398 AUC after training: 0.435374149659864
User 45398 does not improve AUC. Reverting changes.
Training on augumented user 71802 45/50 current_auc = 0.44217687074829937
User 71802 AUC after training: 0.44217687074829937
User 71802 does not improve AUC. Reverting changes.
Training on augumented user 103616 46/50 current_auc = 0.44217687074829937
User 103616 AUC after training: 0.44217687074829937
User 103616 does not improve AUC. Reverting changes.
Training on augumented user 15481 47/50 current_auc = 0.44217687074829937
User 15481 AUC after training: 0.44217687074829937
User 15481 does not improve AUC. Reverting changes.
Training on augumented user 28311 48/50 current_auc = 0.44217687074829937
User 28311 AUC after training: 0.44217687074829937
User 28311 does not improve AUC. Reverting changes.
Training on augumented user 70422 49/50 current_auc = 0.44217687074829937
User 70422 AUC after training: 0.44217687074829937
User 70422 does not improve AUC. Reverting changes.
[2024-12-02 19:40:15.978469] start test user 74628 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:16.729020] start test user 74628 225/568 recall augumented users by random, augumented_users = [70430, 79844, 110351, 5715, 66886, 8745, 88034, 100173, 138347, 65450, 10954, 55469, 61811, 33842, 136360, 70039, 72144, 99880, 101417, 1399, 15075, 108816, 104428, 89510, 74157, 30145, 135883, 3314, 63283, 25416, 26132, 5915, 20011, 87881, 16149, 60830, 106858, 134623, 107904, 91965, 46418, 104410, 104011, 34703, 108730, 95652, 50154, 109804, 78328, 36540]
[2024-12-02 19:40:16.766757] user = 74628 Cloud 225/568
[2024-12-02 19:40:16.805553] user = 74628 Local 225/568
[2024-12-02 19:40:17.160523] user = 74628 Local+ 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:19.601266] user = 74628 MPDA- 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2692307692307693
Training on augumented user 70430 0/50 current_auc = 0.2692307692307693
User 70430 AUC after training: 0.2692307692307693
User 70430 does not improve AUC. Reverting changes.
Training on augumented user 79844 1/50 current_auc = 0.2692307692307693
User 79844 AUC after training: 0.2692307692307693
User 79844 does not improve AUC. Reverting changes.
Training on augumented user 110351 2/50 current_auc = 0.2692307692307693
User 110351 AUC after training: 0.2692307692307693
User 110351 does not improve AUC. Reverting changes.
Training on augumented user 5715 3/50 current_auc = 0.2692307692307693
User 5715 AUC after training: 0.2692307692307693
User 5715 does not improve AUC. Reverting changes.
Training on augumented user 66886 4/50 current_auc = 0.2692307692307693
User 66886 AUC after training: 0.2692307692307693
User 66886 does not improve AUC. Reverting changes.
Training on augumented user 8745 5/50 current_auc = 0.2692307692307693
User 8745 AUC after training: 0.23076923076923078
User 8745 does not improve AUC. Reverting changes.
Training on augumented user 88034 6/50 current_auc = 0.2692307692307693
User 88034 AUC after training: 0.2692307692307693
User 88034 does not improve AUC. Reverting changes.
Training on augumented user 100173 7/50 current_auc = 0.2692307692307693
User 100173 AUC after training: 0.2692307692307693
User 100173 does not improve AUC. Reverting changes.
Training on augumented user 138347 8/50 current_auc = 0.2692307692307693
User 138347 AUC after training: 0.2692307692307693
User 138347 does not improve AUC. Reverting changes.
Training on augumented user 65450 9/50 current_auc = 0.2692307692307693
User 65450 AUC after training: 0.23076923076923078
User 65450 does not improve AUC. Reverting changes.
Training on augumented user 10954 10/50 current_auc = 0.2692307692307693
User 10954 AUC after training: 0.2692307692307693
User 10954 does not improve AUC. Reverting changes.
Training on augumented user 55469 11/50 current_auc = 0.2692307692307693
User 55469 AUC after training: 0.2692307692307693
User 55469 does not improve AUC. Reverting changes.
Training on augumented user 61811 12/50 current_auc = 0.2692307692307693
User 61811 AUC after training: 0.2692307692307693
User 61811 does not improve AUC. Reverting changes.
Training on augumented user 33842 13/50 current_auc = 0.2692307692307693
User 33842 AUC after training: 0.2692307692307693
User 33842 does not improve AUC. Reverting changes.
Training on augumented user 136360 14/50 current_auc = 0.2692307692307693
User 136360 AUC after training: 0.2692307692307693
User 136360 does not improve AUC. Reverting changes.
Training on augumented user 70039 15/50 current_auc = 0.2692307692307693
User 70039 AUC after training: 0.2692307692307693
User 70039 does not improve AUC. Reverting changes.
Training on augumented user 72144 16/50 current_auc = 0.2692307692307693
User 72144 AUC after training: 0.2692307692307693
User 72144 does not improve AUC. Reverting changes.
Training on augumented user 99880 17/50 current_auc = 0.2692307692307693
User 99880 AUC after training: 0.2692307692307693
User 99880 does not improve AUC. Reverting changes.
Training on augumented user 101417 18/50 current_auc = 0.2692307692307693
User 101417 AUC after training: 0.2692307692307693
User 101417 does not improve AUC. Reverting changes.
Training on augumented user 1399 19/50 current_auc = 0.2692307692307693
User 1399 AUC after training: 0.2692307692307693
User 1399 does not improve AUC. Reverting changes.
Training on augumented user 15075 20/50 current_auc = 0.2692307692307693
User 15075 AUC after training: 0.2692307692307693
User 15075 does not improve AUC. Reverting changes.
Training on augumented user 108816 21/50 current_auc = 0.2692307692307693
User 108816 AUC after training: 0.2692307692307693
User 108816 does not improve AUC. Reverting changes.
Training on augumented user 104428 22/50 current_auc = 0.2692307692307693
User 104428 AUC after training: 0.23076923076923078
User 104428 does not improve AUC. Reverting changes.
Training on augumented user 89510 23/50 current_auc = 0.2692307692307693
User 89510 AUC after training: 0.2692307692307693
User 89510 does not improve AUC. Reverting changes.
Training on augumented user 74157 24/50 current_auc = 0.2692307692307693
User 74157 AUC after training: 0.2692307692307693
User 74157 does not improve AUC. Reverting changes.
Training on augumented user 30145 25/50 current_auc = 0.2692307692307693
User 30145 AUC after training: 0.2692307692307693
User 30145 does not improve AUC. Reverting changes.
Training on augumented user 135883 26/50 current_auc = 0.2692307692307693
User 135883 AUC after training: 0.23076923076923078
User 135883 does not improve AUC. Reverting changes.
Training on augumented user 3314 27/50 current_auc = 0.2692307692307693
User 3314 AUC after training: 0.2692307692307693
User 3314 does not improve AUC. Reverting changes.
Training on augumented user 63283 28/50 current_auc = 0.2692307692307693
User 63283 AUC after training: 0.23076923076923078
User 63283 does not improve AUC. Reverting changes.
Training on augumented user 25416 29/50 current_auc = 0.2692307692307693
User 25416 AUC after training: 0.2692307692307693
User 25416 does not improve AUC. Reverting changes.
Training on augumented user 26132 30/50 current_auc = 0.2692307692307693
User 26132 AUC after training: 0.2692307692307693
User 26132 does not improve AUC. Reverting changes.
Training on augumented user 5915 31/50 current_auc = 0.2692307692307693
User 5915 AUC after training: 0.2692307692307693
User 5915 does not improve AUC. Reverting changes.
Training on augumented user 20011 32/50 current_auc = 0.2692307692307693
User 20011 AUC after training: 0.23076923076923078
User 20011 does not improve AUC. Reverting changes.
Training on augumented user 87881 33/50 current_auc = 0.2692307692307693
User 87881 AUC after training: 0.23076923076923078
User 87881 does not improve AUC. Reverting changes.
Training on augumented user 16149 34/50 current_auc = 0.2692307692307693
User 16149 AUC after training: 0.2692307692307693
User 16149 does not improve AUC. Reverting changes.
Training on augumented user 60830 35/50 current_auc = 0.2692307692307693
User 60830 AUC after training: 0.2692307692307693
User 60830 does not improve AUC. Reverting changes.
Training on augumented user 106858 36/50 current_auc = 0.2692307692307693
User 106858 AUC after training: 0.2692307692307693
User 106858 does not improve AUC. Reverting changes.
Training on augumented user 134623 37/50 current_auc = 0.2692307692307693
User 134623 AUC after training: 0.2692307692307693
User 134623 does not improve AUC. Reverting changes.
Training on augumented user 107904 38/50 current_auc = 0.2692307692307693
User 107904 AUC after training: 0.2692307692307693
User 107904 does not improve AUC. Reverting changes.
Training on augumented user 91965 39/50 current_auc = 0.2692307692307693
User 91965 AUC after training: 0.2692307692307693
User 91965 does not improve AUC. Reverting changes.
Training on augumented user 46418 40/50 current_auc = 0.2692307692307693
User 46418 AUC after training: 0.3076923076923077
User 46418 improves AUC. Keeping the model.
Training on augumented user 104410 41/50 current_auc = 0.3076923076923077
User 104410 AUC after training: 0.2692307692307693
User 104410 does not improve AUC. Reverting changes.
Training on augumented user 104011 42/50 current_auc = 0.3076923076923077
User 104011 AUC after training: 0.3076923076923077
User 104011 does not improve AUC. Reverting changes.
Training on augumented user 34703 43/50 current_auc = 0.3076923076923077
User 34703 AUC after training: 0.2692307692307693
User 34703 does not improve AUC. Reverting changes.
Training on augumented user 108730 44/50 current_auc = 0.3076923076923077
User 108730 AUC after training: 0.23076923076923078
User 108730 does not improve AUC. Reverting changes.
Training on augumented user 95652 45/50 current_auc = 0.3076923076923077
User 95652 AUC after training: 0.3076923076923077
User 95652 does not improve AUC. Reverting changes.
Training on augumented user 50154 46/50 current_auc = 0.3076923076923077
User 50154 AUC after training: 0.2692307692307693
User 50154 does not improve AUC. Reverting changes.
Training on augumented user 109804 47/50 current_auc = 0.3076923076923077
User 109804 AUC after training: 0.23076923076923078
User 109804 does not improve AUC. Reverting changes.
Training on augumented user 78328 48/50 current_auc = 0.3076923076923077
User 78328 AUC after training: 0.3076923076923077
User 78328 does not improve AUC. Reverting changes.
Training on augumented user 36540 49/50 current_auc = 0.3076923076923077
User 36540 AUC after training: 0.3076923076923077
User 36540 does not improve AUC. Reverting changes.
[2024-12-02 19:40:48.696683] start test user 74630 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:49.455367] start test user 74630 226/568 recall augumented users by random, augumented_users = [49784, 45064, 15507, 13444, 123394, 120293, 8046, 114712, 116340, 23774, 5814, 125964, 69702, 28816, 5358, 77504, 127616, 94873, 46439, 18126, 53278, 138397, 18091, 121860, 134664, 36037, 123218, 93982, 71936, 132404, 123351, 135655, 76791, 91534, 35000, 2640, 118408, 103629, 29770, 77348, 22734, 120408, 129454, 115872, 112147, 1911, 115069, 68738, 28604, 39394]
[2024-12-02 19:40:49.471736] user = 74630 Cloud 226/568
[2024-12-02 19:40:49.491527] user = 74630 Local 226/568
[2024-12-02 19:40:49.671892] user = 74630 Local+ 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:52.463928] user = 74630 MPDA- 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6723404255319149
Training on augumented user 49784 0/50 current_auc = 0.6723404255319149
User 49784 AUC after training: 0.673404255319149
User 49784 improves AUC. Keeping the model.
Training on augumented user 45064 1/50 current_auc = 0.673404255319149
User 45064 AUC after training: 0.6755319148936171
User 45064 improves AUC. Keeping the model.
Training on augumented user 15507 2/50 current_auc = 0.6755319148936171
User 15507 AUC after training: 0.676595744680851
User 15507 improves AUC. Keeping the model.
Training on augumented user 13444 3/50 current_auc = 0.676595744680851
User 13444 AUC after training: 0.6734042553191489
User 13444 does not improve AUC. Reverting changes.
Training on augumented user 123394 4/50 current_auc = 0.676595744680851
User 123394 AUC after training: 0.676595744680851
User 123394 does not improve AUC. Reverting changes.
Training on augumented user 120293 5/50 current_auc = 0.676595744680851
User 120293 AUC after training: 0.676595744680851
User 120293 does not improve AUC. Reverting changes.
Training on augumented user 8046 6/50 current_auc = 0.676595744680851
User 8046 AUC after training: 0.674468085106383
User 8046 does not improve AUC. Reverting changes.
Training on augumented user 114712 7/50 current_auc = 0.676595744680851
User 114712 AUC after training: 0.674468085106383
User 114712 does not improve AUC. Reverting changes.
Training on augumented user 116340 8/50 current_auc = 0.676595744680851
User 116340 AUC after training: 0.674468085106383
User 116340 does not improve AUC. Reverting changes.
Training on augumented user 23774 9/50 current_auc = 0.676595744680851
User 23774 AUC after training: 0.676595744680851
User 23774 does not improve AUC. Reverting changes.
Training on augumented user 5814 10/50 current_auc = 0.676595744680851
User 5814 AUC after training: 0.6707446808510638
User 5814 does not improve AUC. Reverting changes.
Training on augumented user 125964 11/50 current_auc = 0.676595744680851
User 125964 AUC after training: 0.6760638297872341
User 125964 does not improve AUC. Reverting changes.
Training on augumented user 69702 12/50 current_auc = 0.676595744680851
User 69702 AUC after training: 0.6744680851063829
User 69702 does not improve AUC. Reverting changes.
Training on augumented user 28816 13/50 current_auc = 0.676595744680851
User 28816 AUC after training: 0.676595744680851
User 28816 does not improve AUC. Reverting changes.
Training on augumented user 5358 14/50 current_auc = 0.676595744680851
User 5358 AUC after training: 0.676595744680851
User 5358 does not improve AUC. Reverting changes.
Training on augumented user 77504 15/50 current_auc = 0.676595744680851
User 77504 AUC after training: 0.674468085106383
User 77504 does not improve AUC. Reverting changes.
Training on augumented user 127616 16/50 current_auc = 0.676595744680851
User 127616 AUC after training: 0.676595744680851
User 127616 does not improve AUC. Reverting changes.
Training on augumented user 94873 17/50 current_auc = 0.676595744680851
User 94873 AUC after training: 0.673404255319149
User 94873 does not improve AUC. Reverting changes.
Training on augumented user 46439 18/50 current_auc = 0.676595744680851
User 46439 AUC after training: 0.674468085106383
User 46439 does not improve AUC. Reverting changes.
Training on augumented user 18126 19/50 current_auc = 0.676595744680851
User 18126 AUC after training: 0.673404255319149
User 18126 does not improve AUC. Reverting changes.
Training on augumented user 53278 20/50 current_auc = 0.676595744680851
User 53278 AUC after training: 0.675531914893617
User 53278 does not improve AUC. Reverting changes.
Training on augumented user 138397 21/50 current_auc = 0.676595744680851
User 138397 AUC after training: 0.6702127659574468
User 138397 does not improve AUC. Reverting changes.
Training on augumented user 18091 22/50 current_auc = 0.676595744680851
User 18091 AUC after training: 0.6755319148936171
User 18091 does not improve AUC. Reverting changes.
Training on augumented user 121860 23/50 current_auc = 0.676595744680851
User 121860 AUC after training: 0.674468085106383
User 121860 does not improve AUC. Reverting changes.
Training on augumented user 134664 24/50 current_auc = 0.676595744680851
User 134664 AUC after training: 0.674468085106383
User 134664 does not improve AUC. Reverting changes.
Training on augumented user 36037 25/50 current_auc = 0.676595744680851
User 36037 AUC after training: 0.676595744680851
User 36037 does not improve AUC. Reverting changes.
Training on augumented user 123218 26/50 current_auc = 0.676595744680851
User 123218 AUC after training: 0.676595744680851
User 123218 does not improve AUC. Reverting changes.
Training on augumented user 93982 27/50 current_auc = 0.676595744680851
User 93982 AUC after training: 0.674468085106383
User 93982 does not improve AUC. Reverting changes.
Training on augumented user 71936 28/50 current_auc = 0.676595744680851
User 71936 AUC after training: 0.6755319148936171
User 71936 does not improve AUC. Reverting changes.
Training on augumented user 132404 29/50 current_auc = 0.676595744680851
User 132404 AUC after training: 0.676595744680851
User 132404 does not improve AUC. Reverting changes.
Training on augumented user 123351 30/50 current_auc = 0.676595744680851
User 123351 AUC after training: 0.6723404255319149
User 123351 does not improve AUC. Reverting changes.
Training on augumented user 135655 31/50 current_auc = 0.676595744680851
User 135655 AUC after training: 0.674468085106383
User 135655 does not improve AUC. Reverting changes.
Training on augumented user 76791 32/50 current_auc = 0.676595744680851
User 76791 AUC after training: 0.674468085106383
User 76791 does not improve AUC. Reverting changes.
Training on augumented user 91534 33/50 current_auc = 0.676595744680851
User 91534 AUC after training: 0.674468085106383
User 91534 does not improve AUC. Reverting changes.
Training on augumented user 35000 34/50 current_auc = 0.676595744680851
User 35000 AUC after training: 0.676595744680851
User 35000 does not improve AUC. Reverting changes.
Training on augumented user 2640 35/50 current_auc = 0.676595744680851
User 2640 AUC after training: 0.676595744680851
User 2640 does not improve AUC. Reverting changes.
Training on augumented user 118408 36/50 current_auc = 0.676595744680851
User 118408 AUC after training: 0.673404255319149
User 118408 does not improve AUC. Reverting changes.
Training on augumented user 103629 37/50 current_auc = 0.676595744680851
User 103629 AUC after training: 0.6760638297872341
User 103629 does not improve AUC. Reverting changes.
Training on augumented user 29770 38/50 current_auc = 0.676595744680851
User 29770 AUC after training: 0.6755319148936171
User 29770 does not improve AUC. Reverting changes.
Training on augumented user 77348 39/50 current_auc = 0.676595744680851
User 77348 AUC after training: 0.6734042553191489
User 77348 does not improve AUC. Reverting changes.
Training on augumented user 22734 40/50 current_auc = 0.676595744680851
User 22734 AUC after training: 0.6755319148936171
User 22734 does not improve AUC. Reverting changes.
Training on augumented user 120408 41/50 current_auc = 0.676595744680851
User 120408 AUC after training: 0.6755319148936171
User 120408 does not improve AUC. Reverting changes.
Training on augumented user 129454 42/50 current_auc = 0.676595744680851
User 129454 AUC after training: 0.676595744680851
User 129454 does not improve AUC. Reverting changes.
Training on augumented user 115872 43/50 current_auc = 0.676595744680851
User 115872 AUC after training: 0.674468085106383
User 115872 does not improve AUC. Reverting changes.
Training on augumented user 112147 44/50 current_auc = 0.676595744680851
User 112147 AUC after training: 0.6723404255319149
User 112147 does not improve AUC. Reverting changes.
Training on augumented user 1911 45/50 current_auc = 0.676595744680851
User 1911 AUC after training: 0.674468085106383
User 1911 does not improve AUC. Reverting changes.
Training on augumented user 115069 46/50 current_auc = 0.676595744680851
User 115069 AUC after training: 0.6734042553191489
User 115069 does not improve AUC. Reverting changes.
Training on augumented user 68738 47/50 current_auc = 0.676595744680851
User 68738 AUC after training: 0.6755319148936171
User 68738 does not improve AUC. Reverting changes.
Training on augumented user 28604 48/50 current_auc = 0.676595744680851
User 28604 AUC after training: 0.674468085106383
User 28604 does not improve AUC. Reverting changes.
Training on augumented user 39394 49/50 current_auc = 0.676595744680851
User 39394 AUC after training: 0.676595744680851
User 39394 does not improve AUC. Reverting changes.
[2024-12-02 19:41:22.346436] start test user 74633 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:22.993153] start test user 74633 227/568 recall augumented users by random, augumented_users = [45865, 15612, 57634, 112020, 61954, 45487, 69340, 113486, 138151, 1221, 78342, 27248, 48170, 127052, 1564, 48115, 4866, 82791, 105567, 63794, 104907, 119732, 9037, 103271, 728, 130154, 1545, 107373, 82304, 90460, 36484, 106104, 57661, 34006, 113245, 3559, 131037, 116137, 134676, 66400, 77878, 71066, 130525, 109743, 41711, 49795, 20394, 61944, 31382, 104093]
[2024-12-02 19:41:23.029200] user = 74633 Cloud 227/568
[2024-12-02 19:41:23.039627] user = 74633 Local 227/568
[2024-12-02 19:41:23.252627] user = 74633 Local+ 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:25.962404] user = 74633 MPDA- 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5714285714285714
Training on augumented user 45865 0/50 current_auc = 0.5714285714285714
User 45865 AUC after training: 0.5714285714285714
User 45865 does not improve AUC. Reverting changes.
Training on augumented user 15612 1/50 current_auc = 0.5714285714285714
User 15612 AUC after training: 0.5773809523809524
User 15612 improves AUC. Keeping the model.
Training on augumented user 57634 2/50 current_auc = 0.5773809523809524
User 57634 AUC after training: 0.5714285714285715
User 57634 does not improve AUC. Reverting changes.
Training on augumented user 112020 3/50 current_auc = 0.5773809523809524
User 112020 AUC after training: 0.5654761904761905
User 112020 does not improve AUC. Reverting changes.
Training on augumented user 61954 4/50 current_auc = 0.5773809523809524
User 61954 AUC after training: 0.5714285714285715
User 61954 does not improve AUC. Reverting changes.
Training on augumented user 45487 5/50 current_auc = 0.5773809523809524
User 45487 AUC after training: 0.5773809523809524
User 45487 does not improve AUC. Reverting changes.
Training on augumented user 69340 6/50 current_auc = 0.5773809523809524
User 69340 AUC after training: 0.5714285714285715
User 69340 does not improve AUC. Reverting changes.
Training on augumented user 113486 7/50 current_auc = 0.5773809523809524
User 113486 AUC after training: 0.5714285714285715
User 113486 does not improve AUC. Reverting changes.
Training on augumented user 138151 8/50 current_auc = 0.5773809523809524
User 138151 AUC after training: 0.5654761904761905
User 138151 does not improve AUC. Reverting changes.
Training on augumented user 1221 9/50 current_auc = 0.5773809523809524
User 1221 AUC after training: 0.5714285714285715
User 1221 does not improve AUC. Reverting changes.
Training on augumented user 78342 10/50 current_auc = 0.5773809523809524
User 78342 AUC after training: 0.5773809523809523
User 78342 does not improve AUC. Reverting changes.
Training on augumented user 27248 11/50 current_auc = 0.5773809523809524
User 27248 AUC after training: 0.5654761904761905
User 27248 does not improve AUC. Reverting changes.
Training on augumented user 48170 12/50 current_auc = 0.5773809523809524
User 48170 AUC after training: 0.5714285714285715
User 48170 does not improve AUC. Reverting changes.
Training on augumented user 127052 13/50 current_auc = 0.5773809523809524
User 127052 AUC after training: 0.5833333333333334
User 127052 improves AUC. Keeping the model.
Training on augumented user 1564 14/50 current_auc = 0.5833333333333334
User 1564 AUC after training: 0.5773809523809524
User 1564 does not improve AUC. Reverting changes.
Training on augumented user 48115 15/50 current_auc = 0.5833333333333334
User 48115 AUC after training: 0.5833333333333334
User 48115 does not improve AUC. Reverting changes.
Training on augumented user 4866 16/50 current_auc = 0.5833333333333334
User 4866 AUC after training: 0.5416666666666666
User 4866 does not improve AUC. Reverting changes.
Training on augumented user 82791 17/50 current_auc = 0.5833333333333334
User 82791 AUC after training: 0.5773809523809524
User 82791 does not improve AUC. Reverting changes.
Training on augumented user 105567 18/50 current_auc = 0.5833333333333334
User 105567 AUC after training: 0.5892857142857143
User 105567 improves AUC. Keeping the model.
Training on augumented user 63794 19/50 current_auc = 0.5892857142857143
User 63794 AUC after training: 0.5892857142857143
User 63794 does not improve AUC. Reverting changes.
Training on augumented user 104907 20/50 current_auc = 0.5892857142857143
User 104907 AUC after training: 0.5892857142857143
User 104907 does not improve AUC. Reverting changes.
Training on augumented user 119732 21/50 current_auc = 0.5892857142857143
User 119732 AUC after training: 0.5952380952380952
User 119732 improves AUC. Keeping the model.
Training on augumented user 9037 22/50 current_auc = 0.5952380952380952
User 9037 AUC after training: 0.5773809523809523
User 9037 does not improve AUC. Reverting changes.
Training on augumented user 103271 23/50 current_auc = 0.5952380952380952
User 103271 AUC after training: 0.5892857142857143
User 103271 does not improve AUC. Reverting changes.
Training on augumented user 728 24/50 current_auc = 0.5952380952380952
User 728 AUC after training: 0.5892857142857143
User 728 does not improve AUC. Reverting changes.
Training on augumented user 130154 25/50 current_auc = 0.5952380952380952
User 130154 AUC after training: 0.5714285714285714
User 130154 does not improve AUC. Reverting changes.
Training on augumented user 1545 26/50 current_auc = 0.5952380952380952
User 1545 AUC after training: 0.5773809523809524
User 1545 does not improve AUC. Reverting changes.
Training on augumented user 107373 27/50 current_auc = 0.5952380952380952
User 107373 AUC after training: 0.5773809523809524
User 107373 does not improve AUC. Reverting changes.
Training on augumented user 82304 28/50 current_auc = 0.5952380952380952
User 82304 AUC after training: 0.5892857142857143
User 82304 does not improve AUC. Reverting changes.
Training on augumented user 90460 29/50 current_auc = 0.5952380952380952
User 90460 AUC after training: 0.5952380952380952
User 90460 does not improve AUC. Reverting changes.
Training on augumented user 36484 30/50 current_auc = 0.5952380952380952
User 36484 AUC after training: 0.5892857142857143
User 36484 does not improve AUC. Reverting changes.
Training on augumented user 106104 31/50 current_auc = 0.5952380952380952
User 106104 AUC after training: 0.5892857142857143
User 106104 does not improve AUC. Reverting changes.
Training on augumented user 57661 32/50 current_auc = 0.5952380952380952
User 57661 AUC after training: 0.5892857142857143
User 57661 does not improve AUC. Reverting changes.
Training on augumented user 34006 33/50 current_auc = 0.5952380952380952
User 34006 AUC after training: 0.5892857142857143
User 34006 does not improve AUC. Reverting changes.
Training on augumented user 113245 34/50 current_auc = 0.5952380952380952
User 113245 AUC after training: 0.5892857142857143
User 113245 does not improve AUC. Reverting changes.
Training on augumented user 3559 35/50 current_auc = 0.5952380952380952
User 3559 AUC after training: 0.5773809523809524
User 3559 does not improve AUC. Reverting changes.
Training on augumented user 131037 36/50 current_auc = 0.5952380952380952
User 131037 AUC after training: 0.5833333333333334
User 131037 does not improve AUC. Reverting changes.
Training on augumented user 116137 37/50 current_auc = 0.5952380952380952
User 116137 AUC after training: 0.5773809523809524
User 116137 does not improve AUC. Reverting changes.
Training on augumented user 134676 38/50 current_auc = 0.5952380952380952
User 134676 AUC after training: 0.5833333333333333
User 134676 does not improve AUC. Reverting changes.
Training on augumented user 66400 39/50 current_auc = 0.5952380952380952
User 66400 AUC after training: 0.5892857142857143
User 66400 does not improve AUC. Reverting changes.
Training on augumented user 77878 40/50 current_auc = 0.5952380952380952
User 77878 AUC after training: 0.5773809523809524
User 77878 does not improve AUC. Reverting changes.
Training on augumented user 71066 41/50 current_auc = 0.5952380952380952
User 71066 AUC after training: 0.5714285714285714
User 71066 does not improve AUC. Reverting changes.
Training on augumented user 130525 42/50 current_auc = 0.5952380952380952
User 130525 AUC after training: 0.5952380952380952
User 130525 does not improve AUC. Reverting changes.
Training on augumented user 109743 43/50 current_auc = 0.5952380952380952
User 109743 AUC after training: 0.5892857142857143
User 109743 does not improve AUC. Reverting changes.
Training on augumented user 41711 44/50 current_auc = 0.5952380952380952
User 41711 AUC after training: 0.5892857142857143
User 41711 does not improve AUC. Reverting changes.
Training on augumented user 49795 45/50 current_auc = 0.5952380952380952
User 49795 AUC after training: 0.5892857142857143
User 49795 does not improve AUC. Reverting changes.
Training on augumented user 20394 46/50 current_auc = 0.5952380952380952
User 20394 AUC after training: 0.5892857142857143
User 20394 does not improve AUC. Reverting changes.
Training on augumented user 61944 47/50 current_auc = 0.5952380952380952
User 61944 AUC after training: 0.5952380952380952
User 61944 does not improve AUC. Reverting changes.
Training on augumented user 31382 48/50 current_auc = 0.5952380952380952
User 31382 AUC after training: 0.5892857142857143
User 31382 does not improve AUC. Reverting changes.
Training on augumented user 104093 49/50 current_auc = 0.5952380952380952
User 104093 AUC after training: 0.5714285714285714
User 104093 does not improve AUC. Reverting changes.
[2024-12-02 19:41:56.972520] start test user 74697 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:57.417529] start test user 74697 228/568 recall augumented users by random, augumented_users = [47590, 49951, 48527, 74896, 106771, 114861, 41764, 97249, 13533, 135816, 11985, 120009, 10420, 28223, 92048, 111613, 137844, 20424, 36927, 12688, 11482, 103421, 68437, 135554, 12384, 123677, 95539, 84523, 37442, 112868, 92693, 67621, 80657, 73541, 114645, 37984, 102317, 123846, 64296, 125878, 27068, 118602, 49554, 74699, 35191, 100800, 103111, 74787, 52973, 102473]
[2024-12-02 19:41:57.431933] user = 74697 Cloud 228/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:41:57.450756] user = 74697 Local 228/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:41:57.488554] user = 74697 Local+ 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:42:00.081169] user = 74697 MPDA- 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 47590 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47590 AUC after training: 0.5
User 47590 does not improve AUC. Reverting changes.
Training on augumented user 49951 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49951 AUC after training: 0.5
User 49951 does not improve AUC. Reverting changes.
Training on augumented user 48527 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48527 AUC after training: 0.5
User 48527 does not improve AUC. Reverting changes.
Training on augumented user 74896 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74896 AUC after training: 0.5
User 74896 does not improve AUC. Reverting changes.
Training on augumented user 106771 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106771 AUC after training: 0.5
User 106771 does not improve AUC. Reverting changes.
Training on augumented user 114861 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114861 AUC after training: 0.5
User 114861 does not improve AUC. Reverting changes.
Training on augumented user 41764 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41764 AUC after training: 0.5
User 41764 does not improve AUC. Reverting changes.
Training on augumented user 97249 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97249 AUC after training: 0.5
User 97249 does not improve AUC. Reverting changes.
Training on augumented user 13533 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13533 AUC after training: 0.5
User 13533 does not improve AUC. Reverting changes.
Training on augumented user 135816 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135816 AUC after training: 0.5
User 135816 does not improve AUC. Reverting changes.
Training on augumented user 11985 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11985 AUC after training: 0.5
User 11985 does not improve AUC. Reverting changes.
Training on augumented user 120009 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120009 AUC after training: 0.5
User 120009 does not improve AUC. Reverting changes.
Training on augumented user 10420 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10420 AUC after training: 0.5
User 10420 does not improve AUC. Reverting changes.
Training on augumented user 28223 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28223 AUC after training: 0.5
User 28223 does not improve AUC. Reverting changes.
Training on augumented user 92048 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92048 AUC after training: 0.5
User 92048 does not improve AUC. Reverting changes.
Training on augumented user 111613 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111613 AUC after training: 0.5
User 111613 does not improve AUC. Reverting changes.
Training on augumented user 137844 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137844 AUC after training: 0.5
User 137844 does not improve AUC. Reverting changes.
Training on augumented user 20424 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20424 AUC after training: 0.5
User 20424 does not improve AUC. Reverting changes.
Training on augumented user 36927 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36927 AUC after training: 0.5
User 36927 does not improve AUC. Reverting changes.
Training on augumented user 12688 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12688 AUC after training: 0.5
User 12688 does not improve AUC. Reverting changes.
Training on augumented user 11482 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11482 AUC after training: 0.5
User 11482 does not improve AUC. Reverting changes.
Training on augumented user 103421 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103421 AUC after training: 0.5
User 103421 does not improve AUC. Reverting changes.
Training on augumented user 68437 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68437 AUC after training: 0.5
User 68437 does not improve AUC. Reverting changes.
Training on augumented user 135554 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135554 AUC after training: 0.5
User 135554 does not improve AUC. Reverting changes.
Training on augumented user 12384 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12384 AUC after training: 0.5
User 12384 does not improve AUC. Reverting changes.
Training on augumented user 123677 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123677 AUC after training: 0.5
User 123677 does not improve AUC. Reverting changes.
Training on augumented user 95539 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95539 AUC after training: 0.5
User 95539 does not improve AUC. Reverting changes.
Training on augumented user 84523 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84523 AUC after training: 0.5
User 84523 does not improve AUC. Reverting changes.
Training on augumented user 37442 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37442 AUC after training: 0.5
User 37442 does not improve AUC. Reverting changes.
Training on augumented user 112868 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112868 AUC after training: 0.5
User 112868 does not improve AUC. Reverting changes.
Training on augumented user 92693 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92693 AUC after training: 0.5
User 92693 does not improve AUC. Reverting changes.
Training on augumented user 67621 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67621 AUC after training: 0.5
User 67621 does not improve AUC. Reverting changes.
Training on augumented user 80657 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80657 AUC after training: 0.5
User 80657 does not improve AUC. Reverting changes.
Training on augumented user 73541 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73541 AUC after training: 0.5
User 73541 does not improve AUC. Reverting changes.
Training on augumented user 114645 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114645 AUC after training: 0.5
User 114645 does not improve AUC. Reverting changes.
Training on augumented user 37984 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37984 AUC after training: 0.5
User 37984 does not improve AUC. Reverting changes.
Training on augumented user 102317 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102317 AUC after training: 0.5
User 102317 does not improve AUC. Reverting changes.
Training on augumented user 123846 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123846 AUC after training: 0.5
User 123846 does not improve AUC. Reverting changes.
Training on augumented user 64296 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64296 AUC after training: 0.5
User 64296 does not improve AUC. Reverting changes.
Training on augumented user 125878 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125878 AUC after training: 0.5
User 125878 does not improve AUC. Reverting changes.
Training on augumented user 27068 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27068 AUC after training: 0.5
User 27068 does not improve AUC. Reverting changes.
Training on augumented user 118602 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118602 AUC after training: 0.5
User 118602 does not improve AUC. Reverting changes.
Training on augumented user 49554 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49554 AUC after training: 0.5
User 49554 does not improve AUC. Reverting changes.
Training on augumented user 74699 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74699 AUC after training: 0.5
User 74699 does not improve AUC. Reverting changes.
Training on augumented user 35191 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35191 AUC after training: 0.5
User 35191 does not improve AUC. Reverting changes.
Training on augumented user 100800 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100800 AUC after training: 0.5
User 100800 does not improve AUC. Reverting changes.
Training on augumented user 103111 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103111 AUC after training: 0.5
User 103111 does not improve AUC. Reverting changes.
Training on augumented user 74787 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74787 AUC after training: 0.5
User 74787 does not improve AUC. Reverting changes.
Training on augumented user 52973 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52973 AUC after training: 0.5
User 52973 does not improve AUC. Reverting changes.
Training on augumented user 102473 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102473 AUC after training: 0.5
User 102473 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:42:28.276955] start test user 74705 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:28.913861] start test user 74705 229/568 recall augumented users by random, augumented_users = [28282, 73848, 65653, 5153, 60399, 60439, 36733, 63309, 66509, 97917, 6293, 5236, 63041, 107522, 94296, 130984, 119093, 52932, 14038, 89603, 30138, 44993, 133440, 123029, 47462, 128731, 61636, 28108, 104569, 116423, 110227, 135951, 99524, 15986, 109408, 24472, 106368, 59930, 41202, 49387, 132458, 52874, 95161, 27145, 60278, 26779, 35871, 65846, 43170, 77507]
[2024-12-02 19:42:28.929762] user = 74705 Cloud 229/568
[2024-12-02 19:42:29.030914] user = 74705 Local 229/568
[2024-12-02 19:42:29.288114] user = 74705 Local+ 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:32.014844] user = 74705 MPDA- 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7049711429123131
Training on augumented user 28282 0/50 current_auc = 0.7049711429123131
User 28282 AUC after training: 0.7048209573258384
User 28282 does not improve AUC. Reverting changes.
Training on augumented user 73848 1/50 current_auc = 0.7049711429123131
User 73848 AUC after training: 0.7047995022420563
User 73848 does not improve AUC. Reverting changes.
Training on augumented user 65653 2/50 current_auc = 0.7049711429123131
User 65653 AUC after training: 0.7048102297839474
User 65653 does not improve AUC. Reverting changes.
Training on augumented user 5153 3/50 current_auc = 0.7049711429123131
User 5153 AUC after training: 0.7048102297839474
User 5153 does not improve AUC. Reverting changes.
Training on augumented user 60399 4/50 current_auc = 0.7049711429123131
User 60399 AUC after training: 0.7047780471582741
User 60399 does not improve AUC. Reverting changes.
Training on augumented user 60439 5/50 current_auc = 0.7049711429123131
User 60439 AUC after training: 0.7048960501190757
User 60439 does not improve AUC. Reverting changes.
Training on augumented user 36733 6/50 current_auc = 0.7049711429123131
User 36733 AUC after training: 0.7051749662082432
User 36733 improves AUC. Keeping the model.
Training on augumented user 63309 7/50 current_auc = 0.7051749662082432
User 63309 AUC after training: 0.7054002445879551
User 63309 improves AUC. Keeping the model.
Training on augumented user 66509 8/50 current_auc = 0.7054002445879551
User 66509 AUC after training: 0.7052393314595893
User 66509 does not improve AUC. Reverting changes.
Training on augumented user 97917 9/50 current_auc = 0.7054002445879551
User 97917 AUC after training: 0.7054002445879551
User 97917 does not improve AUC. Reverting changes.
Training on augumented user 6293 10/50 current_auc = 0.7054002445879551
User 6293 AUC after training: 0.7050462357055505
User 6293 does not improve AUC. Reverting changes.
Training on augumented user 5236 11/50 current_auc = 0.7054002445879551
User 5236 AUC after training: 0.7049604153704221
User 5236 does not improve AUC. Reverting changes.
Training on augumented user 63041 12/50 current_auc = 0.7054002445879551
User 63041 AUC after training: 0.7055504301744299
User 63041 improves AUC. Keeping the model.
Training on augumented user 107522 13/50 current_auc = 0.7055504301744299
User 107522 AUC after training: 0.7054324272136283
User 107522 does not improve AUC. Reverting changes.
Training on augumented user 94296 14/50 current_auc = 0.7055504301744299
User 94296 AUC after training: 0.7050569632474415
User 94296 does not improve AUC. Reverting changes.
Training on augumented user 130984 15/50 current_auc = 0.7055504301744299
User 130984 AUC after training: 0.7049711429123131
User 130984 does not improve AUC. Reverting changes.
Training on augumented user 119093 16/50 current_auc = 0.7055504301744299
User 119093 AUC after training: 0.7052500590014804
User 119093 does not improve AUC. Reverting changes.
Training on augumented user 52932 17/50 current_auc = 0.7055504301744299
User 52932 AUC after training: 0.7055289750906477
User 52932 does not improve AUC. Reverting changes.
Training on augumented user 14038 18/50 current_auc = 0.7055504301744299
User 14038 AUC after training: 0.705174966208243
User 14038 does not improve AUC. Reverting changes.
Training on augumented user 89603 19/50 current_auc = 0.7055504301744299
User 89603 AUC after training: 0.7050140530798773
User 89603 does not improve AUC. Reverting changes.
Training on augumented user 30138 20/50 current_auc = 0.7055504301744299
User 30138 AUC after training: 0.7053251517947178
User 30138 does not improve AUC. Reverting changes.
Training on augumented user 44993 21/50 current_auc = 0.7055504301744299
User 44993 AUC after training: 0.7053251517947177
User 44993 does not improve AUC. Reverting changes.
Training on augumented user 133440 22/50 current_auc = 0.7055504301744299
User 133440 AUC after training: 0.7053787895041731
User 133440 does not improve AUC. Reverting changes.
Training on augumented user 123029 23/50 current_auc = 0.7055504301744299
User 123029 AUC after training: 0.7051106009568968
User 123029 does not improve AUC. Reverting changes.
Training on augumented user 47462 24/50 current_auc = 0.7055504301744299
User 47462 AUC after training: 0.705368061962282
User 47462 does not improve AUC. Reverting changes.
Training on augumented user 128731 25/50 current_auc = 0.7055504301744299
User 128731 AUC after training: 0.7053144242528268
User 128731 does not improve AUC. Reverting changes.
Training on augumented user 61636 26/50 current_auc = 0.7055504301744299
User 61636 AUC after training: 0.7050355081636593
User 61636 does not improve AUC. Reverting changes.
Training on augumented user 28108 27/50 current_auc = 0.7055504301744299
User 28108 AUC after training: 0.7050569632474414
User 28108 does not improve AUC. Reverting changes.
Training on augumented user 104569 28/50 current_auc = 0.7055504301744299
User 104569 AUC after training: 0.7050140530798772
User 104569 does not improve AUC. Reverting changes.
Training on augumented user 116423 29/50 current_auc = 0.7055504301744299
User 116423 AUC after training: 0.7052929691690446
User 116423 does not improve AUC. Reverting changes.
Training on augumented user 110227 30/50 current_auc = 0.7055504301744299
User 110227 AUC after training: 0.704542041236671
User 110227 does not improve AUC. Reverting changes.
Training on augumented user 135951 31/50 current_auc = 0.7055504301744299
User 135951 AUC after training: 0.7048853225771847
User 135951 does not improve AUC. Reverting changes.
Training on augumented user 99524 32/50 current_auc = 0.7055504301744299
User 99524 AUC after training: 0.7046922268231457
User 99524 does not improve AUC. Reverting changes.
Training on augumented user 15986 33/50 current_auc = 0.7055504301744299
User 15986 AUC after training: 0.7050569632474415
User 15986 does not improve AUC. Reverting changes.
Training on augumented user 109408 34/50 current_auc = 0.7055504301744299
User 109408 AUC after training: 0.7052500590014805
User 109408 does not improve AUC. Reverting changes.
Training on augumented user 24472 35/50 current_auc = 0.7055504301744299
User 24472 AUC after training: 0.7054538822974104
User 24472 does not improve AUC. Reverting changes.
Training on augumented user 106368 36/50 current_auc = 0.7055504301744299
User 106368 AUC after training: 0.7053036967109357
User 106368 does not improve AUC. Reverting changes.
Training on augumented user 59930 37/50 current_auc = 0.7055504301744299
User 59930 AUC after training: 0.7052822416271536
User 59930 does not improve AUC. Reverting changes.
Training on augumented user 41202 38/50 current_auc = 0.7055504301744299
User 41202 AUC after training: 0.7050462357055504
User 41202 does not improve AUC. Reverting changes.
Training on augumented user 49387 39/50 current_auc = 0.7055504301744299
User 49387 AUC after training: 0.705164238666352
User 49387 does not improve AUC. Reverting changes.
Training on augumented user 132458 40/50 current_auc = 0.7055504301744299
User 132458 AUC after training: 0.7050569632474415
User 132458 does not improve AUC. Reverting changes.
Training on augumented user 52874 41/50 current_auc = 0.7055504301744299
User 52874 AUC after training: 0.7052071488339162
User 52874 does not improve AUC. Reverting changes.
Training on augumented user 95161 42/50 current_auc = 0.7055504301744299
User 95161 AUC after training: 0.7048745950352937
User 95161 does not improve AUC. Reverting changes.
Training on augumented user 27145 43/50 current_auc = 0.7055504301744299
User 27145 AUC after training: 0.7053036967109356
User 27145 does not improve AUC. Reverting changes.
Training on augumented user 60278 44/50 current_auc = 0.7055504301744299
User 60278 AUC after training: 0.7048745950352936
User 60278 does not improve AUC. Reverting changes.
Training on augumented user 26779 45/50 current_auc = 0.7055504301744299
User 26779 AUC after training: 0.705357334420391
User 26779 does not improve AUC. Reverting changes.
Training on augumented user 35871 46/50 current_auc = 0.7055504301744299
User 35871 AUC after training: 0.7054538822974105
User 35871 does not improve AUC. Reverting changes.
Training on augumented user 65846 47/50 current_auc = 0.7055504301744299
User 65846 AUC after training: 0.7054216996717372
User 65846 does not improve AUC. Reverting changes.
Training on augumented user 43170 48/50 current_auc = 0.7055504301744299
User 43170 AUC after training: 0.7051266922697333
User 43170 does not improve AUC. Reverting changes.
Training on augumented user 77507 49/50 current_auc = 0.7055504301744299
User 77507 AUC after training: 0.7054753373811925
User 77507 does not improve AUC. Reverting changes.
[2024-12-02 19:43:01.925398] start test user 74756 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:02.456688] start test user 74756 230/568 recall augumented users by random, augumented_users = [16900, 72392, 121406, 133449, 17976, 134044, 54303, 135954, 81596, 123675, 34784, 137564, 100719, 89981, 23742, 117702, 100890, 108998, 89466, 6608, 98512, 109979, 98887, 11822, 89041, 45179, 15830, 76869, 84585, 94058, 30672, 39382, 36868, 85030, 128906, 80739, 119493, 69727, 135161, 137464, 2250, 100912, 88519, 31055, 114629, 26292, 132769, 75026, 130225, 53860]
[2024-12-02 19:43:02.485110] user = 74756 Cloud 230/568
[2024-12-02 19:43:02.516528] user = 74756 Local 230/568
[2024-12-02 19:43:02.646862] user = 74756 Local+ 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:05.362494] user = 74756 MPDA- 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 16900 0/50 current_auc = 0.6666666666666666
User 16900 AUC after training: 0.6666666666666666
User 16900 does not improve AUC. Reverting changes.
Training on augumented user 72392 1/50 current_auc = 0.6666666666666666
User 72392 AUC after training: 0.6666666666666666
User 72392 does not improve AUC. Reverting changes.
Training on augumented user 121406 2/50 current_auc = 0.6666666666666666
User 121406 AUC after training: 0.6666666666666666
User 121406 does not improve AUC. Reverting changes.
Training on augumented user 133449 3/50 current_auc = 0.6666666666666666
User 133449 AUC after training: 0.6666666666666666
User 133449 does not improve AUC. Reverting changes.
Training on augumented user 17976 4/50 current_auc = 0.6666666666666666
User 17976 AUC after training: 0.6666666666666666
User 17976 does not improve AUC. Reverting changes.
Training on augumented user 134044 5/50 current_auc = 0.6666666666666666
User 134044 AUC after training: 0.6666666666666666
User 134044 does not improve AUC. Reverting changes.
Training on augumented user 54303 6/50 current_auc = 0.6666666666666666
User 54303 AUC after training: 0.6666666666666666
User 54303 does not improve AUC. Reverting changes.
Training on augumented user 135954 7/50 current_auc = 0.6666666666666666
User 135954 AUC after training: 0.6666666666666666
User 135954 does not improve AUC. Reverting changes.
Training on augumented user 81596 8/50 current_auc = 0.6666666666666666
User 81596 AUC after training: 0.5
User 81596 does not improve AUC. Reverting changes.
Training on augumented user 123675 9/50 current_auc = 0.6666666666666666
User 123675 AUC after training: 0.6666666666666666
User 123675 does not improve AUC. Reverting changes.
Training on augumented user 34784 10/50 current_auc = 0.6666666666666666
User 34784 AUC after training: 0.6111111111111112
User 34784 does not improve AUC. Reverting changes.
Training on augumented user 137564 11/50 current_auc = 0.6666666666666666
User 137564 AUC after training: 0.6666666666666666
User 137564 does not improve AUC. Reverting changes.
Training on augumented user 100719 12/50 current_auc = 0.6666666666666666
User 100719 AUC after training: 0.6666666666666666
User 100719 does not improve AUC. Reverting changes.
Training on augumented user 89981 13/50 current_auc = 0.6666666666666666
User 89981 AUC after training: 0.6666666666666666
User 89981 does not improve AUC. Reverting changes.
Training on augumented user 23742 14/50 current_auc = 0.6666666666666666
User 23742 AUC after training: 0.6111111111111112
User 23742 does not improve AUC. Reverting changes.
Training on augumented user 117702 15/50 current_auc = 0.6666666666666666
User 117702 AUC after training: 0.6111111111111112
User 117702 does not improve AUC. Reverting changes.
Training on augumented user 100890 16/50 current_auc = 0.6666666666666666
User 100890 AUC after training: 0.6666666666666666
User 100890 does not improve AUC. Reverting changes.
Training on augumented user 108998 17/50 current_auc = 0.6666666666666666
User 108998 AUC after training: 0.6666666666666666
User 108998 does not improve AUC. Reverting changes.
Training on augumented user 89466 18/50 current_auc = 0.6666666666666666
User 89466 AUC after training: 0.6111111111111112
User 89466 does not improve AUC. Reverting changes.
Training on augumented user 6608 19/50 current_auc = 0.6666666666666666
User 6608 AUC after training: 0.6666666666666666
User 6608 does not improve AUC. Reverting changes.
Training on augumented user 98512 20/50 current_auc = 0.6666666666666666
User 98512 AUC after training: 0.6666666666666666
User 98512 does not improve AUC. Reverting changes.
Training on augumented user 109979 21/50 current_auc = 0.6666666666666666
User 109979 AUC after training: 0.6666666666666666
User 109979 does not improve AUC. Reverting changes.
Training on augumented user 98887 22/50 current_auc = 0.6666666666666666
User 98887 AUC after training: 0.6666666666666666
User 98887 does not improve AUC. Reverting changes.
Training on augumented user 11822 23/50 current_auc = 0.6666666666666666
User 11822 AUC after training: 0.6666666666666666
User 11822 does not improve AUC. Reverting changes.
Training on augumented user 89041 24/50 current_auc = 0.6666666666666666
User 89041 AUC after training: 0.6666666666666666
User 89041 does not improve AUC. Reverting changes.
Training on augumented user 45179 25/50 current_auc = 0.6666666666666666
User 45179 AUC after training: 0.6111111111111112
User 45179 does not improve AUC. Reverting changes.
Training on augumented user 15830 26/50 current_auc = 0.6666666666666666
User 15830 AUC after training: 0.6666666666666666
User 15830 does not improve AUC. Reverting changes.
Training on augumented user 76869 27/50 current_auc = 0.6666666666666666
User 76869 AUC after training: 0.6111111111111112
User 76869 does not improve AUC. Reverting changes.
Training on augumented user 84585 28/50 current_auc = 0.6666666666666666
User 84585 AUC after training: 0.6666666666666666
User 84585 does not improve AUC. Reverting changes.
Training on augumented user 94058 29/50 current_auc = 0.6666666666666666
User 94058 AUC after training: 0.6666666666666666
User 94058 does not improve AUC. Reverting changes.
Training on augumented user 30672 30/50 current_auc = 0.6666666666666666
User 30672 AUC after training: 0.6666666666666666
User 30672 does not improve AUC. Reverting changes.
Training on augumented user 39382 31/50 current_auc = 0.6666666666666666
User 39382 AUC after training: 0.5
User 39382 does not improve AUC. Reverting changes.
Training on augumented user 36868 32/50 current_auc = 0.6666666666666666
User 36868 AUC after training: 0.6666666666666666
User 36868 does not improve AUC. Reverting changes.
Training on augumented user 85030 33/50 current_auc = 0.6666666666666666
User 85030 AUC after training: 0.6666666666666666
User 85030 does not improve AUC. Reverting changes.
Training on augumented user 128906 34/50 current_auc = 0.6666666666666666
User 128906 AUC after training: 0.6666666666666666
User 128906 does not improve AUC. Reverting changes.
Training on augumented user 80739 35/50 current_auc = 0.6666666666666666
User 80739 AUC after training: 0.6111111111111112
User 80739 does not improve AUC. Reverting changes.
Training on augumented user 119493 36/50 current_auc = 0.6666666666666666
User 119493 AUC after training: 0.6666666666666666
User 119493 does not improve AUC. Reverting changes.
Training on augumented user 69727 37/50 current_auc = 0.6666666666666666
User 69727 AUC after training: 0.6111111111111112
User 69727 does not improve AUC. Reverting changes.
Training on augumented user 135161 38/50 current_auc = 0.6666666666666666
User 135161 AUC after training: 0.6666666666666666
User 135161 does not improve AUC. Reverting changes.
Training on augumented user 137464 39/50 current_auc = 0.6666666666666666
User 137464 AUC after training: 0.6666666666666666
User 137464 does not improve AUC. Reverting changes.
Training on augumented user 2250 40/50 current_auc = 0.6666666666666666
User 2250 AUC after training: 0.6111111111111112
User 2250 does not improve AUC. Reverting changes.
Training on augumented user 100912 41/50 current_auc = 0.6666666666666666
User 100912 AUC after training: 0.6111111111111112
User 100912 does not improve AUC. Reverting changes.
Training on augumented user 88519 42/50 current_auc = 0.6666666666666666
User 88519 AUC after training: 0.6111111111111112
User 88519 does not improve AUC. Reverting changes.
Training on augumented user 31055 43/50 current_auc = 0.6666666666666666
User 31055 AUC after training: 0.6111111111111112
User 31055 does not improve AUC. Reverting changes.
Training on augumented user 114629 44/50 current_auc = 0.6666666666666666
User 114629 AUC after training: 0.6111111111111112
User 114629 does not improve AUC. Reverting changes.
Training on augumented user 26292 45/50 current_auc = 0.6666666666666666
User 26292 AUC after training: 0.6666666666666666
User 26292 does not improve AUC. Reverting changes.
Training on augumented user 132769 46/50 current_auc = 0.6666666666666666
User 132769 AUC after training: 0.6666666666666666
User 132769 does not improve AUC. Reverting changes.
Training on augumented user 75026 47/50 current_auc = 0.6666666666666666
User 75026 AUC after training: 0.6111111111111112
User 75026 does not improve AUC. Reverting changes.
Training on augumented user 130225 48/50 current_auc = 0.6666666666666666
User 130225 AUC after training: 0.6666666666666666
User 130225 does not improve AUC. Reverting changes.
Training on augumented user 53860 49/50 current_auc = 0.6666666666666666
User 53860 AUC after training: 0.6666666666666666
User 53860 does not improve AUC. Reverting changes.
[2024-12-02 19:43:30.351525] start test user 74805 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:30.998151] start test user 74805 231/568 recall augumented users by random, augumented_users = [108302, 62922, 22893, 66175, 97830, 123010, 123733, 131364, 135374, 90938, 64194, 44056, 86762, 101237, 90093, 135209, 76438, 22190, 7123, 188, 1613, 16028, 114265, 63097, 104014, 103305, 26400, 16882, 16165, 7528, 116965, 9405, 22880, 127479, 110048, 99307, 61020, 78985, 81163, 2800, 20999, 69695, 96586, 90054, 110420, 53055, 79248, 74568, 12087, 814]
[2024-12-02 19:43:31.013153] user = 74805 Cloud 231/568
[2024-12-02 19:43:31.035743] user = 74805 Local 231/568
[2024-12-02 19:43:31.095062] user = 74805 Local+ 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:34.211872] user = 74805 MPDA- 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6972789115646258
Training on augumented user 108302 0/50 current_auc = 0.6972789115646258
User 108302 AUC after training: 0.6972789115646258
User 108302 does not improve AUC. Reverting changes.
Training on augumented user 62922 1/50 current_auc = 0.6972789115646258
User 62922 AUC after training: 0.7006802721088435
User 62922 improves AUC. Keeping the model.
Training on augumented user 22893 2/50 current_auc = 0.7006802721088435
User 22893 AUC after training: 0.6972789115646258
User 22893 does not improve AUC. Reverting changes.
Training on augumented user 66175 3/50 current_auc = 0.7006802721088435
User 66175 AUC after training: 0.6938775510204082
User 66175 does not improve AUC. Reverting changes.
Training on augumented user 97830 4/50 current_auc = 0.7006802721088435
User 97830 AUC after training: 0.6972789115646258
User 97830 does not improve AUC. Reverting changes.
Training on augumented user 123010 5/50 current_auc = 0.7006802721088435
User 123010 AUC after training: 0.6938775510204082
User 123010 does not improve AUC. Reverting changes.
Training on augumented user 123733 6/50 current_auc = 0.7006802721088435
User 123733 AUC after training: 0.6938775510204082
User 123733 does not improve AUC. Reverting changes.
Training on augumented user 131364 7/50 current_auc = 0.7006802721088435
User 131364 AUC after training: 0.6972789115646258
User 131364 does not improve AUC. Reverting changes.
Training on augumented user 135374 8/50 current_auc = 0.7006802721088435
User 135374 AUC after training: 0.6972789115646258
User 135374 does not improve AUC. Reverting changes.
Training on augumented user 90938 9/50 current_auc = 0.7006802721088435
User 90938 AUC after training: 0.6870748299319729
User 90938 does not improve AUC. Reverting changes.
Training on augumented user 64194 10/50 current_auc = 0.7006802721088435
User 64194 AUC after training: 0.6938775510204082
User 64194 does not improve AUC. Reverting changes.
Training on augumented user 44056 11/50 current_auc = 0.7006802721088435
User 44056 AUC after training: 0.6938775510204082
User 44056 does not improve AUC. Reverting changes.
Training on augumented user 86762 12/50 current_auc = 0.7006802721088435
User 86762 AUC after training: 0.6972789115646258
User 86762 does not improve AUC. Reverting changes.
Training on augumented user 101237 13/50 current_auc = 0.7006802721088435
User 101237 AUC after training: 0.6972789115646258
User 101237 does not improve AUC. Reverting changes.
Training on augumented user 90093 14/50 current_auc = 0.7006802721088435
User 90093 AUC after training: 0.6870748299319728
User 90093 does not improve AUC. Reverting changes.
Training on augumented user 135209 15/50 current_auc = 0.7006802721088435
User 135209 AUC after training: 0.7006802721088435
User 135209 does not improve AUC. Reverting changes.
Training on augumented user 76438 16/50 current_auc = 0.7006802721088435
User 76438 AUC after training: 0.7006802721088435
User 76438 does not improve AUC. Reverting changes.
Training on augumented user 22190 17/50 current_auc = 0.7006802721088435
User 22190 AUC after training: 0.6972789115646258
User 22190 does not improve AUC. Reverting changes.
Training on augumented user 7123 18/50 current_auc = 0.7006802721088435
User 7123 AUC after training: 0.6972789115646258
User 7123 does not improve AUC. Reverting changes.
Training on augumented user 188 19/50 current_auc = 0.7006802721088435
User 188 AUC after training: 0.6972789115646258
User 188 does not improve AUC. Reverting changes.
Training on augumented user 1613 20/50 current_auc = 0.7006802721088435
User 1613 AUC after training: 0.6972789115646258
User 1613 does not improve AUC. Reverting changes.
Training on augumented user 16028 21/50 current_auc = 0.7006802721088435
User 16028 AUC after training: 0.7006802721088435
User 16028 does not improve AUC. Reverting changes.
Training on augumented user 114265 22/50 current_auc = 0.7006802721088435
User 114265 AUC after training: 0.6972789115646258
User 114265 does not improve AUC. Reverting changes.
Training on augumented user 63097 23/50 current_auc = 0.7006802721088435
User 63097 AUC after training: 0.6972789115646258
User 63097 does not improve AUC. Reverting changes.
Training on augumented user 104014 24/50 current_auc = 0.7006802721088435
User 104014 AUC after training: 0.6836734693877551
User 104014 does not improve AUC. Reverting changes.
Training on augumented user 103305 25/50 current_auc = 0.7006802721088435
User 103305 AUC after training: 0.7006802721088435
User 103305 does not improve AUC. Reverting changes.
Training on augumented user 26400 26/50 current_auc = 0.7006802721088435
User 26400 AUC after training: 0.6972789115646258
User 26400 does not improve AUC. Reverting changes.
Training on augumented user 16882 27/50 current_auc = 0.7006802721088435
User 16882 AUC after training: 0.6972789115646258
User 16882 does not improve AUC. Reverting changes.
Training on augumented user 16165 28/50 current_auc = 0.7006802721088435
User 16165 AUC after training: 0.6938775510204082
User 16165 does not improve AUC. Reverting changes.
Training on augumented user 7528 29/50 current_auc = 0.7006802721088435
User 7528 AUC after training: 0.7006802721088435
User 7528 does not improve AUC. Reverting changes.
Training on augumented user 116965 30/50 current_auc = 0.7006802721088435
User 116965 AUC after training: 0.6938775510204082
User 116965 does not improve AUC. Reverting changes.
Training on augumented user 9405 31/50 current_auc = 0.7006802721088435
User 9405 AUC after training: 0.6972789115646258
User 9405 does not improve AUC. Reverting changes.
Training on augumented user 22880 32/50 current_auc = 0.7006802721088435
User 22880 AUC after training: 0.6972789115646258
User 22880 does not improve AUC. Reverting changes.
Training on augumented user 127479 33/50 current_auc = 0.7006802721088435
User 127479 AUC after training: 0.6938775510204082
User 127479 does not improve AUC. Reverting changes.
Training on augumented user 110048 34/50 current_auc = 0.7006802721088435
User 110048 AUC after training: 0.6938775510204082
User 110048 does not improve AUC. Reverting changes.
Training on augumented user 99307 35/50 current_auc = 0.7006802721088435
User 99307 AUC after training: 0.6972789115646258
User 99307 does not improve AUC. Reverting changes.
Training on augumented user 61020 36/50 current_auc = 0.7006802721088435
User 61020 AUC after training: 0.6972789115646258
User 61020 does not improve AUC. Reverting changes.
Training on augumented user 78985 37/50 current_auc = 0.7006802721088435
User 78985 AUC after training: 0.6972789115646258
User 78985 does not improve AUC. Reverting changes.
Training on augumented user 81163 38/50 current_auc = 0.7006802721088435
User 81163 AUC after training: 0.6972789115646258
User 81163 does not improve AUC. Reverting changes.
Training on augumented user 2800 39/50 current_auc = 0.7006802721088435
User 2800 AUC after training: 0.6938775510204082
User 2800 does not improve AUC. Reverting changes.
Training on augumented user 20999 40/50 current_auc = 0.7006802721088435
User 20999 AUC after training: 0.6972789115646258
User 20999 does not improve AUC. Reverting changes.
Training on augumented user 69695 41/50 current_auc = 0.7006802721088435
User 69695 AUC after training: 0.7006802721088435
User 69695 does not improve AUC. Reverting changes.
Training on augumented user 96586 42/50 current_auc = 0.7006802721088435
User 96586 AUC after training: 0.7040816326530612
User 96586 improves AUC. Keeping the model.
Training on augumented user 90054 43/50 current_auc = 0.7040816326530612
User 90054 AUC after training: 0.7006802721088435
User 90054 does not improve AUC. Reverting changes.
Training on augumented user 110420 44/50 current_auc = 0.7040816326530612
User 110420 AUC after training: 0.6938775510204082
User 110420 does not improve AUC. Reverting changes.
Training on augumented user 53055 45/50 current_auc = 0.7040816326530612
User 53055 AUC after training: 0.7006802721088435
User 53055 does not improve AUC. Reverting changes.
Training on augumented user 79248 46/50 current_auc = 0.7040816326530612
User 79248 AUC after training: 0.7006802721088435
User 79248 does not improve AUC. Reverting changes.
Training on augumented user 74568 47/50 current_auc = 0.7040816326530612
User 74568 AUC after training: 0.7006802721088435
User 74568 does not improve AUC. Reverting changes.
Training on augumented user 12087 48/50 current_auc = 0.7040816326530612
User 12087 AUC after training: 0.7006802721088435
User 12087 does not improve AUC. Reverting changes.
Training on augumented user 814 49/50 current_auc = 0.7040816326530612
User 814 AUC after training: 0.7040816326530612
User 814 does not improve AUC. Reverting changes.
[2024-12-02 19:44:04.303243] start test user 74907 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:04.870657] start test user 74907 232/568 recall augumented users by random, augumented_users = [50065, 59539, 46005, 45828, 117456, 97175, 114738, 113667, 71977, 133710, 79977, 80568, 101994, 20176, 119113, 14486, 136002, 15018, 13632, 1299, 54174, 7374, 108570, 105590, 119089, 116269, 70102, 125014, 104170, 39461, 71818, 72451, 121749, 86401, 98159, 63818, 136847, 55971, 26492, 109548, 20119, 102625, 18101, 9181, 4285, 121402, 74765, 78059, 31197, 72908]
[2024-12-02 19:44:04.885239] user = 74907 Cloud 232/568
[2024-12-02 19:44:04.907424] user = 74907 Local 232/568
[2024-12-02 19:44:04.941848] user = 74907 Local+ 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:06.981590] user = 74907 MPDA- 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5699152542372881
Training on augumented user 50065 0/50 current_auc = 0.5699152542372881
User 50065 AUC after training: 0.5711864406779661
User 50065 improves AUC. Keeping the model.
Training on augumented user 59539 1/50 current_auc = 0.5711864406779661
User 59539 AUC after training: 0.5677966101694915
User 59539 does not improve AUC. Reverting changes.
Training on augumented user 46005 2/50 current_auc = 0.5711864406779661
User 46005 AUC after training: 0.5682203389830508
User 46005 does not improve AUC. Reverting changes.
Training on augumented user 45828 3/50 current_auc = 0.5711864406779661
User 45828 AUC after training: 0.5707627118644067
User 45828 does not improve AUC. Reverting changes.
Training on augumented user 117456 4/50 current_auc = 0.5711864406779661
User 117456 AUC after training: 0.5699152542372881
User 117456 does not improve AUC. Reverting changes.
Training on augumented user 97175 5/50 current_auc = 0.5711864406779661
User 97175 AUC after training: 0.5699152542372882
User 97175 does not improve AUC. Reverting changes.
Training on augumented user 114738 6/50 current_auc = 0.5711864406779661
User 114738 AUC after training: 0.5703389830508474
User 114738 does not improve AUC. Reverting changes.
Training on augumented user 113667 7/50 current_auc = 0.5711864406779661
User 113667 AUC after training: 0.5703389830508474
User 113667 does not improve AUC. Reverting changes.
Training on augumented user 71977 8/50 current_auc = 0.5711864406779661
User 71977 AUC after training: 0.5682203389830508
User 71977 does not improve AUC. Reverting changes.
Training on augumented user 133710 9/50 current_auc = 0.5711864406779661
User 133710 AUC after training: 0.5703389830508474
User 133710 does not improve AUC. Reverting changes.
Training on augumented user 79977 10/50 current_auc = 0.5711864406779661
User 79977 AUC after training: 0.5690677966101695
User 79977 does not improve AUC. Reverting changes.
Training on augumented user 80568 11/50 current_auc = 0.5711864406779661
User 80568 AUC after training: 0.5690677966101695
User 80568 does not improve AUC. Reverting changes.
Training on augumented user 101994 12/50 current_auc = 0.5711864406779661
User 101994 AUC after training: 0.5699152542372882
User 101994 does not improve AUC. Reverting changes.
Training on augumented user 20176 13/50 current_auc = 0.5711864406779661
User 20176 AUC after training: 0.571186440677966
User 20176 does not improve AUC. Reverting changes.
Training on augumented user 119113 14/50 current_auc = 0.5711864406779661
User 119113 AUC after training: 0.5707627118644067
User 119113 does not improve AUC. Reverting changes.
Training on augumented user 14486 15/50 current_auc = 0.5711864406779661
User 14486 AUC after training: 0.5711864406779661
User 14486 does not improve AUC. Reverting changes.
Training on augumented user 136002 16/50 current_auc = 0.5711864406779661
User 136002 AUC after training: 0.5690677966101695
User 136002 does not improve AUC. Reverting changes.
Training on augumented user 15018 17/50 current_auc = 0.5711864406779661
User 15018 AUC after training: 0.5694915254237288
User 15018 does not improve AUC. Reverting changes.
Training on augumented user 13632 18/50 current_auc = 0.5711864406779661
User 13632 AUC after training: 0.571186440677966
User 13632 does not improve AUC. Reverting changes.
Training on augumented user 1299 19/50 current_auc = 0.5711864406779661
User 1299 AUC after training: 0.5694915254237287
User 1299 does not improve AUC. Reverting changes.
Training on augumented user 54174 20/50 current_auc = 0.5711864406779661
User 54174 AUC after training: 0.5686440677966101
User 54174 does not improve AUC. Reverting changes.
Training on augumented user 7374 21/50 current_auc = 0.5711864406779661
User 7374 AUC after training: 0.5699152542372882
User 7374 does not improve AUC. Reverting changes.
Training on augumented user 108570 22/50 current_auc = 0.5711864406779661
User 108570 AUC after training: 0.5669491525423729
User 108570 does not improve AUC. Reverting changes.
Training on augumented user 105590 23/50 current_auc = 0.5711864406779661
User 105590 AUC after training: 0.5694915254237287
User 105590 does not improve AUC. Reverting changes.
Training on augumented user 119089 24/50 current_auc = 0.5711864406779661
User 119089 AUC after training: 0.5661016949152542
User 119089 does not improve AUC. Reverting changes.
Training on augumented user 116269 25/50 current_auc = 0.5711864406779661
User 116269 AUC after training: 0.5703389830508474
User 116269 does not improve AUC. Reverting changes.
Training on augumented user 70102 26/50 current_auc = 0.5711864406779661
User 70102 AUC after training: 0.5711864406779661
User 70102 does not improve AUC. Reverting changes.
Training on augumented user 125014 27/50 current_auc = 0.5711864406779661
User 125014 AUC after training: 0.5711864406779661
User 125014 does not improve AUC. Reverting changes.
Training on augumented user 104170 28/50 current_auc = 0.5711864406779661
User 104170 AUC after training: 0.5707627118644067
User 104170 does not improve AUC. Reverting changes.
Training on augumented user 39461 29/50 current_auc = 0.5711864406779661
User 39461 AUC after training: 0.5694915254237288
User 39461 does not improve AUC. Reverting changes.
Training on augumented user 71818 30/50 current_auc = 0.5711864406779661
User 71818 AUC after training: 0.5703389830508475
User 71818 does not improve AUC. Reverting changes.
Training on augumented user 72451 31/50 current_auc = 0.5711864406779661
User 72451 AUC after training: 0.5677966101694916
User 72451 does not improve AUC. Reverting changes.
Training on augumented user 121749 32/50 current_auc = 0.5711864406779661
User 121749 AUC after training: 0.5703389830508474
User 121749 does not improve AUC. Reverting changes.
Training on augumented user 86401 33/50 current_auc = 0.5711864406779661
User 86401 AUC after training: 0.5694915254237288
User 86401 does not improve AUC. Reverting changes.
Training on augumented user 98159 34/50 current_auc = 0.5711864406779661
User 98159 AUC after training: 0.5703389830508475
User 98159 does not improve AUC. Reverting changes.
Training on augumented user 63818 35/50 current_auc = 0.5711864406779661
User 63818 AUC after training: 0.5707627118644067
User 63818 does not improve AUC. Reverting changes.
Training on augumented user 136847 36/50 current_auc = 0.5711864406779661
User 136847 AUC after training: 0.5707627118644067
User 136847 does not improve AUC. Reverting changes.
Training on augumented user 55971 37/50 current_auc = 0.5711864406779661
User 55971 AUC after training: 0.5694915254237287
User 55971 does not improve AUC. Reverting changes.
Training on augumented user 26492 38/50 current_auc = 0.5711864406779661
User 26492 AUC after training: 0.5703389830508475
User 26492 does not improve AUC. Reverting changes.
Training on augumented user 109548 39/50 current_auc = 0.5711864406779661
User 109548 AUC after training: 0.5716101694915253
User 109548 improves AUC. Keeping the model.
Training on augumented user 20119 40/50 current_auc = 0.5716101694915253
User 20119 AUC after training: 0.5707627118644067
User 20119 does not improve AUC. Reverting changes.
Training on augumented user 102625 41/50 current_auc = 0.5716101694915253
User 102625 AUC after training: 0.5686440677966101
User 102625 does not improve AUC. Reverting changes.
Training on augumented user 18101 42/50 current_auc = 0.5716101694915253
User 18101 AUC after training: 0.5716101694915253
User 18101 does not improve AUC. Reverting changes.
Training on augumented user 9181 43/50 current_auc = 0.5716101694915253
User 9181 AUC after training: 0.5703389830508474
User 9181 does not improve AUC. Reverting changes.
Training on augumented user 4285 44/50 current_auc = 0.5716101694915253
User 4285 AUC after training: 0.5703389830508474
User 4285 does not improve AUC. Reverting changes.
Training on augumented user 121402 45/50 current_auc = 0.5716101694915253
User 121402 AUC after training: 0.5694915254237288
User 121402 does not improve AUC. Reverting changes.
Training on augumented user 74765 46/50 current_auc = 0.5716101694915253
User 74765 AUC after training: 0.5703389830508474
User 74765 does not improve AUC. Reverting changes.
Training on augumented user 78059 47/50 current_auc = 0.5716101694915253
User 78059 AUC after training: 0.5707627118644067
User 78059 does not improve AUC. Reverting changes.
Training on augumented user 31197 48/50 current_auc = 0.5716101694915253
User 31197 AUC after training: 0.5707627118644067
User 31197 does not improve AUC. Reverting changes.
Training on augumented user 72908 49/50 current_auc = 0.5716101694915253
User 72908 AUC after training: 0.571186440677966
User 72908 does not improve AUC. Reverting changes.
[2024-12-02 19:44:39.784109] start test user 74918 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:40.245494] start test user 74918 233/568 recall augumented users by random, augumented_users = [16727, 78758, 126678, 111068, 343, 53812, 100346, 59157, 107674, 128586, 95152, 116985, 77696, 82390, 117433, 118757, 101279, 107405, 78672, 64341, 54170, 129987, 32117, 126666, 67425, 89155, 131992, 60161, 48030, 47273, 129578, 25363, 6840, 111744, 5939, 24198, 129197, 100188, 79670, 1549, 11154, 43570, 108434, 95185, 113896, 56964, 136944, 1830, 17367, 70326]
[2024-12-02 19:44:40.259929] user = 74918 Cloud 233/568
[2024-12-02 19:44:40.269091] user = 74918 Local 233/568
[2024-12-02 19:44:40.287130] user = 74918 Local+ 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:42.587725] user = 74918 MPDA- 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9166666666666666
Training on augumented user 16727 0/50 current_auc = 0.9166666666666666
User 16727 AUC after training: 0.9166666666666666
User 16727 does not improve AUC. Reverting changes.
Training on augumented user 78758 1/50 current_auc = 0.9166666666666666
User 78758 AUC after training: 0.9166666666666666
User 78758 does not improve AUC. Reverting changes.
Training on augumented user 126678 2/50 current_auc = 0.9166666666666666
User 126678 AUC after training: 0.9166666666666666
User 126678 does not improve AUC. Reverting changes.
Training on augumented user 111068 3/50 current_auc = 0.9166666666666666
User 111068 AUC after training: 0.9166666666666666
User 111068 does not improve AUC. Reverting changes.
Training on augumented user 343 4/50 current_auc = 0.9166666666666666
User 343 AUC after training: 0.9166666666666666
User 343 does not improve AUC. Reverting changes.
Training on augumented user 53812 5/50 current_auc = 0.9166666666666666
User 53812 AUC after training: 0.9166666666666666
User 53812 does not improve AUC. Reverting changes.
Training on augumented user 100346 6/50 current_auc = 0.9166666666666666
User 100346 AUC after training: 0.9166666666666666
User 100346 does not improve AUC. Reverting changes.
Training on augumented user 59157 7/50 current_auc = 0.9166666666666666
User 59157 AUC after training: 0.9166666666666666
User 59157 does not improve AUC. Reverting changes.
Training on augumented user 107674 8/50 current_auc = 0.9166666666666666
User 107674 AUC after training: 0.9166666666666666
User 107674 does not improve AUC. Reverting changes.
Training on augumented user 128586 9/50 current_auc = 0.9166666666666666
User 128586 AUC after training: 0.9166666666666666
User 128586 does not improve AUC. Reverting changes.
Training on augumented user 95152 10/50 current_auc = 0.9166666666666666
User 95152 AUC after training: 0.9166666666666666
User 95152 does not improve AUC. Reverting changes.
Training on augumented user 116985 11/50 current_auc = 0.9166666666666666
User 116985 AUC after training: 0.9166666666666666
User 116985 does not improve AUC. Reverting changes.
Training on augumented user 77696 12/50 current_auc = 0.9166666666666666
User 77696 AUC after training: 0.9166666666666666
User 77696 does not improve AUC. Reverting changes.
Training on augumented user 82390 13/50 current_auc = 0.9166666666666666
User 82390 AUC after training: 0.9166666666666666
User 82390 does not improve AUC. Reverting changes.
Training on augumented user 117433 14/50 current_auc = 0.9166666666666666
User 117433 AUC after training: 0.9166666666666666
User 117433 does not improve AUC. Reverting changes.
Training on augumented user 118757 15/50 current_auc = 0.9166666666666666
User 118757 AUC after training: 0.9166666666666666
User 118757 does not improve AUC. Reverting changes.
Training on augumented user 101279 16/50 current_auc = 0.9166666666666666
User 101279 AUC after training: 0.9166666666666666
User 101279 does not improve AUC. Reverting changes.
Training on augumented user 107405 17/50 current_auc = 0.9166666666666666
User 107405 AUC after training: 0.9166666666666666
User 107405 does not improve AUC. Reverting changes.
Training on augumented user 78672 18/50 current_auc = 0.9166666666666666
User 78672 AUC after training: 0.9166666666666666
User 78672 does not improve AUC. Reverting changes.
Training on augumented user 64341 19/50 current_auc = 0.9166666666666666
User 64341 AUC after training: 0.9166666666666666
User 64341 does not improve AUC. Reverting changes.
Training on augumented user 54170 20/50 current_auc = 0.9166666666666666
User 54170 AUC after training: 0.9166666666666666
User 54170 does not improve AUC. Reverting changes.
Training on augumented user 129987 21/50 current_auc = 0.9166666666666666
User 129987 AUC after training: 0.9166666666666666
User 129987 does not improve AUC. Reverting changes.
Training on augumented user 32117 22/50 current_auc = 0.9166666666666666
User 32117 AUC after training: 0.9166666666666666
User 32117 does not improve AUC. Reverting changes.
Training on augumented user 126666 23/50 current_auc = 0.9166666666666666
User 126666 AUC after training: 0.9166666666666666
User 126666 does not improve AUC. Reverting changes.
Training on augumented user 67425 24/50 current_auc = 0.9166666666666666
User 67425 AUC after training: 0.9166666666666666
User 67425 does not improve AUC. Reverting changes.
Training on augumented user 89155 25/50 current_auc = 0.9166666666666666
User 89155 AUC after training: 0.9166666666666666
User 89155 does not improve AUC. Reverting changes.
Training on augumented user 131992 26/50 current_auc = 0.9166666666666666
User 131992 AUC after training: 0.9166666666666666
User 131992 does not improve AUC. Reverting changes.
Training on augumented user 60161 27/50 current_auc = 0.9166666666666666
User 60161 AUC after training: 0.9166666666666666
User 60161 does not improve AUC. Reverting changes.
Training on augumented user 48030 28/50 current_auc = 0.9166666666666666
User 48030 AUC after training: 0.9166666666666666
User 48030 does not improve AUC. Reverting changes.
Training on augumented user 47273 29/50 current_auc = 0.9166666666666666
User 47273 AUC after training: 0.9166666666666666
User 47273 does not improve AUC. Reverting changes.
Training on augumented user 129578 30/50 current_auc = 0.9166666666666666
User 129578 AUC after training: 0.9166666666666666
User 129578 does not improve AUC. Reverting changes.
Training on augumented user 25363 31/50 current_auc = 0.9166666666666666
User 25363 AUC after training: 0.9166666666666666
User 25363 does not improve AUC. Reverting changes.
Training on augumented user 6840 32/50 current_auc = 0.9166666666666666
User 6840 AUC after training: 0.9166666666666666
User 6840 does not improve AUC. Reverting changes.
Training on augumented user 111744 33/50 current_auc = 0.9166666666666666
User 111744 AUC after training: 0.9166666666666666
User 111744 does not improve AUC. Reverting changes.
Training on augumented user 5939 34/50 current_auc = 0.9166666666666666
User 5939 AUC after training: 0.9166666666666666
User 5939 does not improve AUC. Reverting changes.
Training on augumented user 24198 35/50 current_auc = 0.9166666666666666
User 24198 AUC after training: 0.9166666666666666
User 24198 does not improve AUC. Reverting changes.
Training on augumented user 129197 36/50 current_auc = 0.9166666666666666
User 129197 AUC after training: 0.9166666666666666
User 129197 does not improve AUC. Reverting changes.
Training on augumented user 100188 37/50 current_auc = 0.9166666666666666
User 100188 AUC after training: 0.9166666666666666
User 100188 does not improve AUC. Reverting changes.
Training on augumented user 79670 38/50 current_auc = 0.9166666666666666
User 79670 AUC after training: 0.9166666666666666
User 79670 does not improve AUC. Reverting changes.
Training on augumented user 1549 39/50 current_auc = 0.9166666666666666
User 1549 AUC after training: 0.9166666666666666
User 1549 does not improve AUC. Reverting changes.
Training on augumented user 11154 40/50 current_auc = 0.9166666666666666
User 11154 AUC after training: 0.9166666666666666
User 11154 does not improve AUC. Reverting changes.
Training on augumented user 43570 41/50 current_auc = 0.9166666666666666
User 43570 AUC after training: 0.9166666666666666
User 43570 does not improve AUC. Reverting changes.
Training on augumented user 108434 42/50 current_auc = 0.9166666666666666
User 108434 AUC after training: 0.9166666666666666
User 108434 does not improve AUC. Reverting changes.
Training on augumented user 95185 43/50 current_auc = 0.9166666666666666
User 95185 AUC after training: 0.9166666666666666
User 95185 does not improve AUC. Reverting changes.
Training on augumented user 113896 44/50 current_auc = 0.9166666666666666
User 113896 AUC after training: 0.9166666666666666
User 113896 does not improve AUC. Reverting changes.
Training on augumented user 56964 45/50 current_auc = 0.9166666666666666
User 56964 AUC after training: 0.9166666666666666
User 56964 does not improve AUC. Reverting changes.
Training on augumented user 136944 46/50 current_auc = 0.9166666666666666
User 136944 AUC after training: 0.9166666666666666
User 136944 does not improve AUC. Reverting changes.
Training on augumented user 1830 47/50 current_auc = 0.9166666666666666
User 1830 AUC after training: 0.9166666666666666
User 1830 does not improve AUC. Reverting changes.
Training on augumented user 17367 48/50 current_auc = 0.9166666666666666
User 17367 AUC after training: 0.9166666666666666
User 17367 does not improve AUC. Reverting changes.
Training on augumented user 70326 49/50 current_auc = 0.9166666666666666
User 70326 AUC after training: 0.9166666666666666
User 70326 does not improve AUC. Reverting changes.
[2024-12-02 19:45:10.646484] start test user 74937 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:11.413150] start test user 74937 234/568 recall augumented users by random, augumented_users = [87048, 48312, 122392, 2641, 111124, 47465, 120674, 14696, 94692, 63451, 15595, 38631, 30798, 34850, 74788, 48033, 107245, 117407, 41911, 136810, 21996, 18651, 102540, 126327, 125003, 112909, 11648, 105583, 72926, 107696, 52787, 69329, 67050, 78714, 12639, 134331, 63775, 63826, 44539, 56581, 21904, 52934, 122300, 111328, 29255, 93107, 48202, 73534, 132172, 1710]
[2024-12-02 19:45:11.432788] user = 74937 Cloud 234/568
[2024-12-02 19:45:11.484439] user = 74937 Local 234/568
[2024-12-02 19:45:11.745276] user = 74937 Local+ 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:14.173861] user = 74937 MPDA- 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4669499527856468
Training on augumented user 87048 0/50 current_auc = 0.4669499527856468
User 87048 AUC after training: 0.46506137865911235
User 87048 does not improve AUC. Reverting changes.
Training on augumented user 48312 1/50 current_auc = 0.4669499527856468
User 48312 AUC after training: 0.46600566572237956
User 48312 does not improve AUC. Reverting changes.
Training on augumented user 122392 2/50 current_auc = 0.4669499527856468
User 122392 AUC after training: 0.4664778092540132
User 122392 does not improve AUC. Reverting changes.
Training on augumented user 2641 3/50 current_auc = 0.4669499527856468
User 2641 AUC after training: 0.4660056657223796
User 2641 does not improve AUC. Reverting changes.
Training on augumented user 111124 4/50 current_auc = 0.4669499527856468
User 111124 AUC after training: 0.4688385269121813
User 111124 improves AUC. Keeping the model.
Training on augumented user 47465 5/50 current_auc = 0.4688385269121813
User 47465 AUC after training: 0.46789423984891404
User 47465 does not improve AUC. Reverting changes.
Training on augumented user 120674 6/50 current_auc = 0.4688385269121813
User 120674 AUC after training: 0.47592067988668557
User 120674 improves AUC. Keeping the model.
Training on augumented user 14696 7/50 current_auc = 0.47592067988668557
User 14696 AUC after training: 0.47733711048158645
User 14696 improves AUC. Keeping the model.
Training on augumented user 94692 8/50 current_auc = 0.47733711048158645
User 94692 AUC after training: 0.4763928234183192
User 94692 does not improve AUC. Reverting changes.
Training on augumented user 63451 9/50 current_auc = 0.47733711048158645
User 63451 AUC after training: 0.4740321057601511
User 63451 does not improve AUC. Reverting changes.
Training on augumented user 15595 10/50 current_auc = 0.47733711048158645
User 15595 AUC after training: 0.4749763928234183
User 15595 does not improve AUC. Reverting changes.
Training on augumented user 38631 11/50 current_auc = 0.47733711048158645
User 38631 AUC after training: 0.47733711048158645
User 38631 does not improve AUC. Reverting changes.
Training on augumented user 30798 12/50 current_auc = 0.47733711048158645
User 30798 AUC after training: 0.47780925401322
User 30798 improves AUC. Keeping the model.
Training on augumented user 34850 13/50 current_auc = 0.47780925401322
User 34850 AUC after training: 0.47780925401322
User 34850 does not improve AUC. Reverting changes.
Training on augumented user 74788 14/50 current_auc = 0.47780925401322
User 74788 AUC after training: 0.47733711048158634
User 74788 does not improve AUC. Reverting changes.
Training on augumented user 48033 15/50 current_auc = 0.47780925401322
User 48033 AUC after training: 0.4721435316336166
User 48033 does not improve AUC. Reverting changes.
Training on augumented user 107245 16/50 current_auc = 0.47780925401322
User 107245 AUC after training: 0.47875354107648727
User 107245 improves AUC. Keeping the model.
Training on augumented user 117407 17/50 current_auc = 0.47875354107648727
User 117407 AUC after training: 0.47780925401322005
User 117407 does not improve AUC. Reverting changes.
Training on augumented user 41911 18/50 current_auc = 0.47875354107648727
User 41911 AUC after training: 0.47686496694995273
User 41911 does not improve AUC. Reverting changes.
Training on augumented user 136810 19/50 current_auc = 0.47875354107648727
User 136810 AUC after training: 0.47922568460812087
User 136810 improves AUC. Keeping the model.
Training on augumented user 21996 20/50 current_auc = 0.47922568460812087
User 21996 AUC after training: 0.4801699716713881
User 21996 improves AUC. Keeping the model.
Training on augumented user 18651 21/50 current_auc = 0.4801699716713881
User 18651 AUC after training: 0.47922568460812087
User 18651 does not improve AUC. Reverting changes.
Training on augumented user 102540 22/50 current_auc = 0.4801699716713881
User 102540 AUC after training: 0.4773371104815864
User 102540 does not improve AUC. Reverting changes.
Training on augumented user 126327 23/50 current_auc = 0.4801699716713881
User 126327 AUC after training: 0.4796978281397545
User 126327 does not improve AUC. Reverting changes.
Training on augumented user 125003 24/50 current_auc = 0.4801699716713881
User 125003 AUC after training: 0.4801699716713881
User 125003 does not improve AUC. Reverting changes.
Training on augumented user 112909 25/50 current_auc = 0.4801699716713881
User 112909 AUC after training: 0.47828139754485366
User 112909 does not improve AUC. Reverting changes.
Training on augumented user 11648 26/50 current_auc = 0.4801699716713881
User 11648 AUC after training: 0.47875354107648727
User 11648 does not improve AUC. Reverting changes.
Training on augumented user 105583 27/50 current_auc = 0.4801699716713881
User 105583 AUC after training: 0.47828139754485366
User 105583 does not improve AUC. Reverting changes.
Training on augumented user 72926 28/50 current_auc = 0.4801699716713881
User 72926 AUC after training: 0.47875354107648727
User 72926 does not improve AUC. Reverting changes.
Training on augumented user 107696 29/50 current_auc = 0.4801699716713881
User 107696 AUC after training: 0.4759206798866855
User 107696 does not improve AUC. Reverting changes.
Training on augumented user 52787 30/50 current_auc = 0.4801699716713881
User 52787 AUC after training: 0.4806421152030217
User 52787 improves AUC. Keeping the model.
Training on augumented user 69329 31/50 current_auc = 0.4806421152030217
User 69329 AUC after training: 0.4801699716713881
User 69329 does not improve AUC. Reverting changes.
Training on augumented user 67050 32/50 current_auc = 0.4806421152030217
User 67050 AUC after training: 0.47875354107648727
User 67050 does not improve AUC. Reverting changes.
Training on augumented user 78714 33/50 current_auc = 0.4806421152030217
User 78714 AUC after training: 0.4796978281397545
User 78714 does not improve AUC. Reverting changes.
Training on augumented user 12639 34/50 current_auc = 0.4806421152030217
User 12639 AUC after training: 0.47828139754485366
User 12639 does not improve AUC. Reverting changes.
Training on augumented user 134331 35/50 current_auc = 0.4806421152030217
User 134331 AUC after training: 0.4796978281397545
User 134331 does not improve AUC. Reverting changes.
Training on augumented user 63775 36/50 current_auc = 0.4806421152030217
User 63775 AUC after training: 0.4801699716713881
User 63775 does not improve AUC. Reverting changes.
Training on augumented user 63826 37/50 current_auc = 0.4806421152030217
User 63826 AUC after training: 0.4801699716713881
User 63826 does not improve AUC. Reverting changes.
Training on augumented user 44539 38/50 current_auc = 0.4806421152030217
User 44539 AUC after training: 0.4782813975448536
User 44539 does not improve AUC. Reverting changes.
Training on augumented user 56581 39/50 current_auc = 0.4806421152030217
User 56581 AUC after training: 0.4796978281397545
User 56581 does not improve AUC. Reverting changes.
Training on augumented user 21904 40/50 current_auc = 0.4806421152030217
User 21904 AUC after training: 0.47875354107648727
User 21904 does not improve AUC. Reverting changes.
Training on augumented user 52934 41/50 current_auc = 0.4806421152030217
User 52934 AUC after training: 0.47922568460812087
User 52934 does not improve AUC. Reverting changes.
Training on augumented user 122300 42/50 current_auc = 0.4806421152030217
User 122300 AUC after training: 0.47828139754485366
User 122300 does not improve AUC. Reverting changes.
Training on augumented user 111328 43/50 current_auc = 0.4806421152030217
User 111328 AUC after training: 0.4796978281397545
User 111328 does not improve AUC. Reverting changes.
Training on augumented user 29255 44/50 current_auc = 0.4806421152030217
User 29255 AUC after training: 0.4801699716713881
User 29255 does not improve AUC. Reverting changes.
Training on augumented user 93107 45/50 current_auc = 0.4806421152030217
User 93107 AUC after training: 0.4801699716713881
User 93107 does not improve AUC. Reverting changes.
Training on augumented user 48202 46/50 current_auc = 0.4806421152030217
User 48202 AUC after training: 0.4782813975448536
User 48202 does not improve AUC. Reverting changes.
Training on augumented user 73534 47/50 current_auc = 0.4806421152030217
User 73534 AUC after training: 0.47922568460812087
User 73534 does not improve AUC. Reverting changes.
Training on augumented user 132172 48/50 current_auc = 0.4806421152030217
User 132172 AUC after training: 0.47686496694995273
User 132172 does not improve AUC. Reverting changes.
Training on augumented user 1710 49/50 current_auc = 0.4806421152030217
User 1710 AUC after training: 0.4806421152030217
User 1710 does not improve AUC. Reverting changes.
[2024-12-02 19:45:45.562932] start test user 74980 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:45.994243] start test user 74980 235/568 recall augumented users by random, augumented_users = [46847, 106126, 130042, 77512, 18172, 36207, 109647, 38808, 23812, 114730, 64736, 153, 18250, 113806, 8321, 50192, 81590, 135729, 34182, 83383, 85898, 106438, 8174, 82663, 44843, 38024, 94333, 45019, 108097, 18699, 15397, 57342, 72784, 136718, 122168, 28150, 72544, 67191, 86330, 120167, 105723, 63460, 34857, 126227, 126595, 24494, 13958, 18842, 108427, 15792]
[2024-12-02 19:45:46.009058] user = 74980 Cloud 235/568
[2024-12-02 19:45:46.019567] user = 74980 Local 235/568
[2024-12-02 19:45:46.073573] user = 74980 Local+ 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:49.263638] user = 74980 MPDA- 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7157738095238095
Training on augumented user 46847 0/50 current_auc = 0.7157738095238095
User 46847 AUC after training: 0.7157738095238095
User 46847 does not improve AUC. Reverting changes.
Training on augumented user 106126 1/50 current_auc = 0.7157738095238095
User 106126 AUC after training: 0.7157738095238095
User 106126 does not improve AUC. Reverting changes.
Training on augumented user 130042 2/50 current_auc = 0.7157738095238095
User 130042 AUC after training: 0.7142857142857142
User 130042 does not improve AUC. Reverting changes.
Training on augumented user 77512 3/50 current_auc = 0.7157738095238095
User 77512 AUC after training: 0.7157738095238095
User 77512 does not improve AUC. Reverting changes.
Training on augumented user 18172 4/50 current_auc = 0.7157738095238095
User 18172 AUC after training: 0.7157738095238095
User 18172 does not improve AUC. Reverting changes.
Training on augumented user 36207 5/50 current_auc = 0.7157738095238095
User 36207 AUC after training: 0.7142857142857142
User 36207 does not improve AUC. Reverting changes.
Training on augumented user 109647 6/50 current_auc = 0.7157738095238095
User 109647 AUC after training: 0.7172619047619047
User 109647 improves AUC. Keeping the model.
Training on augumented user 38808 7/50 current_auc = 0.7172619047619047
User 38808 AUC after training: 0.7157738095238095
User 38808 does not improve AUC. Reverting changes.
Training on augumented user 23812 8/50 current_auc = 0.7172619047619047
User 23812 AUC after training: 0.7172619047619047
User 23812 does not improve AUC. Reverting changes.
Training on augumented user 114730 9/50 current_auc = 0.7172619047619047
User 114730 AUC after training: 0.7172619047619047
User 114730 does not improve AUC. Reverting changes.
Training on augumented user 64736 10/50 current_auc = 0.7172619047619047
User 64736 AUC after training: 0.7172619047619048
User 64736 improves AUC. Keeping the model.
Training on augumented user 153 11/50 current_auc = 0.7172619047619048
User 153 AUC after training: 0.7157738095238095
User 153 does not improve AUC. Reverting changes.
Training on augumented user 18250 12/50 current_auc = 0.7172619047619048
User 18250 AUC after training: 0.7157738095238095
User 18250 does not improve AUC. Reverting changes.
Training on augumented user 113806 13/50 current_auc = 0.7172619047619048
User 113806 AUC after training: 0.7142857142857142
User 113806 does not improve AUC. Reverting changes.
Training on augumented user 8321 14/50 current_auc = 0.7172619047619048
User 8321 AUC after training: 0.7172619047619048
User 8321 does not improve AUC. Reverting changes.
Training on augumented user 50192 15/50 current_auc = 0.7172619047619048
User 50192 AUC after training: 0.71875
User 50192 improves AUC. Keeping the model.
Training on augumented user 81590 16/50 current_auc = 0.71875
User 81590 AUC after training: 0.71875
User 81590 does not improve AUC. Reverting changes.
Training on augumented user 135729 17/50 current_auc = 0.71875
User 135729 AUC after training: 0.7172619047619047
User 135729 does not improve AUC. Reverting changes.
Training on augumented user 34182 18/50 current_auc = 0.71875
User 34182 AUC after training: 0.7172619047619047
User 34182 does not improve AUC. Reverting changes.
Training on augumented user 83383 19/50 current_auc = 0.71875
User 83383 AUC after training: 0.71875
User 83383 does not improve AUC. Reverting changes.
Training on augumented user 85898 20/50 current_auc = 0.71875
User 85898 AUC after training: 0.7172619047619047
User 85898 does not improve AUC. Reverting changes.
Training on augumented user 106438 21/50 current_auc = 0.71875
User 106438 AUC after training: 0.7172619047619047
User 106438 does not improve AUC. Reverting changes.
Training on augumented user 8174 22/50 current_auc = 0.71875
User 8174 AUC after training: 0.71875
User 8174 does not improve AUC. Reverting changes.
Training on augumented user 82663 23/50 current_auc = 0.71875
User 82663 AUC after training: 0.7172619047619047
User 82663 does not improve AUC. Reverting changes.
Training on augumented user 44843 24/50 current_auc = 0.71875
User 44843 AUC after training: 0.7142857142857142
User 44843 does not improve AUC. Reverting changes.
Training on augumented user 38024 25/50 current_auc = 0.71875
User 38024 AUC after training: 0.71875
User 38024 does not improve AUC. Reverting changes.
Training on augumented user 94333 26/50 current_auc = 0.71875
User 94333 AUC after training: 0.7172619047619047
User 94333 does not improve AUC. Reverting changes.
Training on augumented user 45019 27/50 current_auc = 0.71875
User 45019 AUC after training: 0.7172619047619047
User 45019 does not improve AUC. Reverting changes.
Training on augumented user 108097 28/50 current_auc = 0.71875
User 108097 AUC after training: 0.71875
User 108097 does not improve AUC. Reverting changes.
Training on augumented user 18699 29/50 current_auc = 0.71875
User 18699 AUC after training: 0.7172619047619047
User 18699 does not improve AUC. Reverting changes.
Training on augumented user 15397 30/50 current_auc = 0.71875
User 15397 AUC after training: 0.71875
User 15397 does not improve AUC. Reverting changes.
Training on augumented user 57342 31/50 current_auc = 0.71875
User 57342 AUC after training: 0.7172619047619047
User 57342 does not improve AUC. Reverting changes.
Training on augumented user 72784 32/50 current_auc = 0.71875
User 72784 AUC after training: 0.7172619047619047
User 72784 does not improve AUC. Reverting changes.
Training on augumented user 136718 33/50 current_auc = 0.71875
User 136718 AUC after training: 0.71875
User 136718 does not improve AUC. Reverting changes.
Training on augumented user 122168 34/50 current_auc = 0.71875
User 122168 AUC after training: 0.71875
User 122168 does not improve AUC. Reverting changes.
Training on augumented user 28150 35/50 current_auc = 0.71875
User 28150 AUC after training: 0.71875
User 28150 does not improve AUC. Reverting changes.
Training on augumented user 72544 36/50 current_auc = 0.71875
User 72544 AUC after training: 0.71875
User 72544 does not improve AUC. Reverting changes.
Training on augumented user 67191 37/50 current_auc = 0.71875
User 67191 AUC after training: 0.71875
User 67191 does not improve AUC. Reverting changes.
Training on augumented user 86330 38/50 current_auc = 0.71875
User 86330 AUC after training: 0.7172619047619047
User 86330 does not improve AUC. Reverting changes.
Training on augumented user 120167 39/50 current_auc = 0.71875
User 120167 AUC after training: 0.71875
User 120167 does not improve AUC. Reverting changes.
Training on augumented user 105723 40/50 current_auc = 0.71875
User 105723 AUC after training: 0.7172619047619047
User 105723 does not improve AUC. Reverting changes.
Training on augumented user 63460 41/50 current_auc = 0.71875
User 63460 AUC after training: 0.71875
User 63460 does not improve AUC. Reverting changes.
Training on augumented user 34857 42/50 current_auc = 0.71875
User 34857 AUC after training: 0.71875
User 34857 does not improve AUC. Reverting changes.
Training on augumented user 126227 43/50 current_auc = 0.71875
User 126227 AUC after training: 0.71875
User 126227 does not improve AUC. Reverting changes.
Training on augumented user 126595 44/50 current_auc = 0.71875
User 126595 AUC after training: 0.7157738095238095
User 126595 does not improve AUC. Reverting changes.
Training on augumented user 24494 45/50 current_auc = 0.71875
User 24494 AUC after training: 0.7172619047619047
User 24494 does not improve AUC. Reverting changes.
Training on augumented user 13958 46/50 current_auc = 0.71875
User 13958 AUC after training: 0.71875
User 13958 does not improve AUC. Reverting changes.
Training on augumented user 18842 47/50 current_auc = 0.71875
User 18842 AUC after training: 0.71875
User 18842 does not improve AUC. Reverting changes.
Training on augumented user 108427 48/50 current_auc = 0.71875
User 108427 AUC after training: 0.7172619047619047
User 108427 does not improve AUC. Reverting changes.
Training on augumented user 15792 49/50 current_auc = 0.71875
User 15792 AUC after training: 0.7157738095238095
User 15792 does not improve AUC. Reverting changes.
[2024-12-02 19:46:16.288638] start test user 75012 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:16.726230] start test user 75012 236/568 recall augumented users by random, augumented_users = [94051, 97669, 134072, 47274, 18003, 88829, 85757, 14004, 4914, 43910, 57088, 136574, 34949, 52303, 10641, 80889, 106531, 110542, 135305, 25888, 115397, 3280, 20844, 42391, 51707, 21299, 117179, 96299, 49056, 98860, 122966, 95650, 68841, 37299, 1072, 80966, 89184, 124668, 5482, 26646, 84085, 60475, 46511, 49681, 27619, 40712, 61194, 46914, 115683, 110369]
[2024-12-02 19:46:16.743140] user = 75012 Cloud 236/568
[2024-12-02 19:46:16.791573] user = 75012 Local 236/568
[2024-12-02 19:46:16.927149] user = 75012 Local+ 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:19.766899] user = 75012 MPDA- 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7604789688255255
Training on augumented user 94051 0/50 current_auc = 0.7604789688255255
User 94051 AUC after training: 0.7608634621487684
User 94051 improves AUC. Keeping the model.
Training on augumented user 97669 1/50 current_auc = 0.7608634621487684
User 97669 AUC after training: 0.7602104338061177
User 97669 does not improve AUC. Reverting changes.
Training on augumented user 134072 2/50 current_auc = 0.7608634621487684
User 134072 AUC after training: 0.7612113370602739
User 134072 improves AUC. Keeping the model.
Training on augumented user 47274 3/50 current_auc = 0.7612113370602739
User 47274 AUC after training: 0.7612174401288967
User 47274 improves AUC. Keeping the model.
Training on augumented user 18003 4/50 current_auc = 0.7612174401288967
User 18003 AUC after training: 0.7611991309230282
User 18003 does not improve AUC. Reverting changes.
Training on augumented user 88829 5/50 current_auc = 0.7612174401288967
User 88829 AUC after training: 0.7610892756878158
User 88829 does not improve AUC. Reverting changes.
Training on augumented user 85757 6/50 current_auc = 0.7612174401288967
User 85757 AUC after training: 0.7611808217171594
User 85757 does not improve AUC. Reverting changes.
Training on augumented user 14004 7/50 current_auc = 0.7612174401288967
User 14004 AUC after training: 0.7610404511388327
User 14004 does not improve AUC. Reverting changes.
Training on augumented user 4914 8/50 current_auc = 0.7612174401288967
User 4914 AUC after training: 0.7614066352562068
User 4914 improves AUC. Keeping the model.
Training on augumented user 43910 9/50 current_auc = 0.7614066352562068
User 43910 AUC after training: 0.7613700168444695
User 43910 does not improve AUC. Reverting changes.
Training on augumented user 57088 10/50 current_auc = 0.7614066352562068
User 57088 AUC after training: 0.7613089861582403
User 57088 does not improve AUC. Reverting changes.
Training on augumented user 136574 11/50 current_auc = 0.7614066352562068
User 136574 AUC after training: 0.7613700168444695
User 136574 does not improve AUC. Reverting changes.
Training on augumented user 34949 12/50 current_auc = 0.7614066352562068
User 34949 AUC after training: 0.7613822229817152
User 34949 does not improve AUC. Reverting changes.
Training on augumented user 52303 13/50 current_auc = 0.7614066352562068
User 52303 AUC after training: 0.761333398432732
User 52303 does not improve AUC. Reverting changes.
Training on augumented user 10641 14/50 current_auc = 0.7614066352562068
User 10641 AUC after training: 0.7613456045699778
User 10641 does not improve AUC. Reverting changes.
Training on augumented user 80889 15/50 current_auc = 0.7614066352562068
User 80889 AUC after training: 0.7613822229817153
User 80889 does not improve AUC. Reverting changes.
Training on augumented user 106531 16/50 current_auc = 0.7614066352562068
User 106531 AUC after training: 0.761394429118961
User 106531 does not improve AUC. Reverting changes.
Training on augumented user 110542 17/50 current_auc = 0.7614066352562068
User 110542 AUC after training: 0.7616019334521397
User 110542 improves AUC. Keeping the model.
Training on augumented user 135305 18/50 current_auc = 0.7616019334521397
User 135305 AUC after training: 0.761528696628665
User 135305 does not improve AUC. Reverting changes.
Training on augumented user 25888 19/50 current_auc = 0.7616019334521397
User 25888 AUC after training: 0.7614310475306985
User 25888 does not improve AUC. Reverting changes.
Training on augumented user 115397 20/50 current_auc = 0.7616019334521397
User 115397 AUC after training: 0.7615775211776481
User 115397 does not improve AUC. Reverting changes.
Training on augumented user 3280 21/50 current_auc = 0.7616019334521397
User 3280 AUC after training: 0.7614188413934525
User 3280 does not improve AUC. Reverting changes.
Training on augumented user 20844 22/50 current_auc = 0.7616019334521397
User 20844 AUC after training: 0.7616202426580084
User 20844 improves AUC. Keeping the model.
Training on augumented user 42391 23/50 current_auc = 0.7616202426580084
User 42391 AUC after training: 0.7616873764128603
User 42391 improves AUC. Keeping the model.
Training on augumented user 51707 24/50 current_auc = 0.7616873764128603
User 51707 AUC after training: 0.7616019334521397
User 51707 does not improve AUC. Reverting changes.
Training on augumented user 21299 25/50 current_auc = 0.7616873764128603
User 21299 AUC after training: 0.761839953128433
User 21299 improves AUC. Keeping the model.
Training on augumented user 117179 26/50 current_auc = 0.761839953128433
User 117179 AUC after training: 0.7616934794814832
User 117179 does not improve AUC. Reverting changes.
Training on augumented user 96299 27/50 current_auc = 0.761839953128433
User 96299 AUC after training: 0.761839953128433
User 96299 does not improve AUC. Reverting changes.
Training on augumented user 49056 28/50 current_auc = 0.761839953128433
User 49056 AUC after training: 0.7617850255108269
User 49056 does not improve AUC. Reverting changes.
Training on augumented user 98860 29/50 current_auc = 0.761839953128433
User 98860 AUC after training: 0.761400532187584
User 98860 does not improve AUC. Reverting changes.
Training on augumented user 122966 30/50 current_auc = 0.761839953128433
User 122966 AUC after training: 0.761583624246271
User 122966 does not improve AUC. Reverting changes.
Training on augumented user 95650 31/50 current_auc = 0.761839953128433
User 95650 AUC after training: 0.761327295364109
User 95650 does not improve AUC. Reverting changes.
Training on augumented user 68841 32/50 current_auc = 0.761839953128433
User 68841 AUC after training: 0.7616995825501062
User 68841 does not improve AUC. Reverting changes.
Training on augumented user 37299 33/50 current_auc = 0.761839953128433
User 37299 AUC after training: 0.7616446549325
User 37299 does not improve AUC. Reverting changes.
Training on augumented user 1072 34/50 current_auc = 0.761839953128433
User 1072 AUC after training: 0.7615409027659108
User 1072 does not improve AUC. Reverting changes.
Training on augumented user 80966 35/50 current_auc = 0.761839953128433
User 80966 AUC after training: 0.7616812733442375
User 80966 does not improve AUC. Reverting changes.
Training on augumented user 89184 36/50 current_auc = 0.761839953128433
User 89184 AUC after training: 0.7617667163049582
User 89184 does not improve AUC. Reverting changes.
Training on augumented user 124668 37/50 current_auc = 0.761839953128433
User 124668 AUC after training: 0.7614066352562068
User 124668 does not improve AUC. Reverting changes.
Training on augumented user 5482 38/50 current_auc = 0.761839953128433
User 5482 AUC after training: 0.7616629641383688
User 5482 does not improve AUC. Reverting changes.
Training on augumented user 26646 39/50 current_auc = 0.761839953128433
User 26646 AUC after training: 0.7616385518638771
User 26646 does not improve AUC. Reverting changes.
Training on augumented user 84085 40/50 current_auc = 0.761839953128433
User 84085 AUC after training: 0.7616873764128604
User 84085 does not improve AUC. Reverting changes.
Training on augumented user 60475 41/50 current_auc = 0.761839953128433
User 60475 AUC after training: 0.7616385518638773
User 60475 does not improve AUC. Reverting changes.
Training on augumented user 46511 42/50 current_auc = 0.761839953128433
User 46511 AUC after training: 0.7617056856187291
User 46511 does not improve AUC. Reverting changes.
Training on augumented user 49681 43/50 current_auc = 0.761839953128433
User 49681 AUC after training: 0.7617239948245978
User 49681 does not improve AUC. Reverting changes.
Training on augumented user 27619 44/50 current_auc = 0.761839953128433
User 27619 AUC after training: 0.7618765715401704
User 27619 improves AUC. Keeping the model.
Training on augumented user 40712 45/50 current_auc = 0.7618765715401704
User 40712 AUC after training: 0.7620596635988576
User 40712 improves AUC. Keeping the model.
Training on augumented user 61194 46/50 current_auc = 0.7620596635988576
User 61194 AUC after training: 0.7619498083636452
User 61194 does not improve AUC. Reverting changes.
Training on augumented user 46914 47/50 current_auc = 0.7620596635988576
User 46914 AUC after training: 0.7619131899519078
User 46914 does not improve AUC. Reverting changes.
Training on augumented user 115683 48/50 current_auc = 0.7620596635988576
User 115683 AUC after training: 0.7618643654029245
User 115683 does not improve AUC. Reverting changes.
Training on augumented user 110369 49/50 current_auc = 0.7620596635988576
User 110369 AUC after training: 0.7616263457266313
User 110369 does not improve AUC. Reverting changes.
[2024-12-02 19:46:55.186778] start test user 75029 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:55.717167] start test user 75029 237/568 recall augumented users by random, augumented_users = [65102, 6430, 52492, 60318, 37049, 28960, 36810, 128272, 52440, 84312, 21213, 31933, 95965, 69156, 39205, 12580, 92223, 126801, 135502, 29185, 25352, 34128, 22842, 69497, 27076, 36126, 57283, 66816, 78305, 101472, 42782, 15132, 3077, 57657, 136947, 2042, 35817, 84958, 56517, 99632, 67681, 128676, 121593, 30117, 40021, 113279, 184, 64828, 127052, 137638]
[2024-12-02 19:46:55.734986] user = 75029 Cloud 237/568
[2024-12-02 19:46:55.752231] user = 75029 Local 237/568
[2024-12-02 19:46:55.810397] user = 75029 Local+ 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:57.789351] user = 75029 MPDA- 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6844850065189048
Training on augumented user 65102 0/50 current_auc = 0.6844850065189048
User 65102 AUC after training: 0.6840504128639722
User 65102 does not improve AUC. Reverting changes.
Training on augumented user 6430 1/50 current_auc = 0.6844850065189048
User 6430 AUC after training: 0.6840504128639722
User 6430 does not improve AUC. Reverting changes.
Training on augumented user 52492 2/50 current_auc = 0.6844850065189048
User 52492 AUC after training: 0.6844850065189049
User 52492 improves AUC. Keeping the model.
Training on augumented user 60318 3/50 current_auc = 0.6844850065189049
User 60318 AUC after training: 0.6849196001738375
User 60318 improves AUC. Keeping the model.
Training on augumented user 37049 4/50 current_auc = 0.6849196001738375
User 37049 AUC after training: 0.6840504128639722
User 37049 does not improve AUC. Reverting changes.
Training on augumented user 28960 5/50 current_auc = 0.6849196001738375
User 28960 AUC after training: 0.6857887874837028
User 28960 improves AUC. Keeping the model.
Training on augumented user 36810 6/50 current_auc = 0.6857887874837028
User 36810 AUC after training: 0.6862233811386353
User 36810 improves AUC. Keeping the model.
Training on augumented user 128272 7/50 current_auc = 0.6862233811386353
User 128272 AUC after training: 0.686657974793568
User 128272 improves AUC. Keeping the model.
Training on augumented user 52440 8/50 current_auc = 0.686657974793568
User 52440 AUC after training: 0.6862233811386353
User 52440 does not improve AUC. Reverting changes.
Training on augumented user 84312 9/50 current_auc = 0.686657974793568
User 84312 AUC after training: 0.6870925684485008
User 84312 improves AUC. Keeping the model.
Training on augumented user 21213 10/50 current_auc = 0.6870925684485008
User 21213 AUC after training: 0.6875271621034333
User 21213 improves AUC. Keeping the model.
Training on augumented user 31933 11/50 current_auc = 0.6875271621034333
User 31933 AUC after training: 0.6875271621034333
User 31933 does not improve AUC. Reverting changes.
Training on augumented user 95965 12/50 current_auc = 0.6875271621034333
User 95965 AUC after training: 0.6875271621034333
User 95965 does not improve AUC. Reverting changes.
Training on augumented user 69156 13/50 current_auc = 0.6875271621034333
User 69156 AUC after training: 0.6870925684485008
User 69156 does not improve AUC. Reverting changes.
Training on augumented user 39205 14/50 current_auc = 0.6875271621034333
User 39205 AUC after training: 0.6875271621034333
User 39205 does not improve AUC. Reverting changes.
Training on augumented user 12580 15/50 current_auc = 0.6875271621034333
User 12580 AUC after training: 0.6875271621034333
User 12580 does not improve AUC. Reverting changes.
Training on augumented user 92223 16/50 current_auc = 0.6875271621034333
User 92223 AUC after training: 0.6866579747935679
User 92223 does not improve AUC. Reverting changes.
Training on augumented user 126801 17/50 current_auc = 0.6875271621034333
User 126801 AUC after training: 0.6875271621034333
User 126801 does not improve AUC. Reverting changes.
Training on augumented user 135502 18/50 current_auc = 0.6875271621034333
User 135502 AUC after training: 0.6875271621034333
User 135502 does not improve AUC. Reverting changes.
Training on augumented user 29185 19/50 current_auc = 0.6875271621034333
User 29185 AUC after training: 0.6870925684485008
User 29185 does not improve AUC. Reverting changes.
Training on augumented user 25352 20/50 current_auc = 0.6875271621034333
User 25352 AUC after training: 0.6875271621034333
User 25352 does not improve AUC. Reverting changes.
Training on augumented user 34128 21/50 current_auc = 0.6875271621034333
User 34128 AUC after training: 0.6875271621034333
User 34128 does not improve AUC. Reverting changes.
Training on augumented user 22842 22/50 current_auc = 0.6875271621034333
User 22842 AUC after training: 0.6875271621034333
User 22842 does not improve AUC. Reverting changes.
Training on augumented user 69497 23/50 current_auc = 0.6875271621034333
User 69497 AUC after training: 0.6875271621034333
User 69497 does not improve AUC. Reverting changes.
Training on augumented user 27076 24/50 current_auc = 0.6875271621034333
User 27076 AUC after training: 0.6875271621034333
User 27076 does not improve AUC. Reverting changes.
Training on augumented user 36126 25/50 current_auc = 0.6875271621034333
User 36126 AUC after training: 0.6892655367231639
User 36126 improves AUC. Keeping the model.
Training on augumented user 57283 26/50 current_auc = 0.6892655367231639
User 57283 AUC after training: 0.6897001303780965
User 57283 improves AUC. Keeping the model.
Training on augumented user 66816 27/50 current_auc = 0.6897001303780965
User 66816 AUC after training: 0.6892655367231639
User 66816 does not improve AUC. Reverting changes.
Training on augumented user 78305 28/50 current_auc = 0.6897001303780965
User 78305 AUC after training: 0.6877444589308996
User 78305 does not improve AUC. Reverting changes.
Training on augumented user 101472 29/50 current_auc = 0.6897001303780965
User 101472 AUC after training: 0.6892655367231639
User 101472 does not improve AUC. Reverting changes.
Training on augumented user 42782 30/50 current_auc = 0.6897001303780965
User 42782 AUC after training: 0.6897001303780965
User 42782 does not improve AUC. Reverting changes.
Training on augumented user 15132 31/50 current_auc = 0.6897001303780965
User 15132 AUC after training: 0.6888309430682311
User 15132 does not improve AUC. Reverting changes.
Training on augumented user 3077 32/50 current_auc = 0.6897001303780965
User 3077 AUC after training: 0.6879617557583659
User 3077 does not improve AUC. Reverting changes.
Training on augumented user 57657 33/50 current_auc = 0.6897001303780965
User 57657 AUC after training: 0.6897001303780965
User 57657 does not improve AUC. Reverting changes.
Training on augumented user 136947 34/50 current_auc = 0.6897001303780965
User 136947 AUC after training: 0.6888309430682312
User 136947 does not improve AUC. Reverting changes.
Training on augumented user 2042 35/50 current_auc = 0.6897001303780965
User 2042 AUC after training: 0.6888309430682312
User 2042 does not improve AUC. Reverting changes.
Training on augumented user 35817 36/50 current_auc = 0.6897001303780965
User 35817 AUC after training: 0.6892655367231639
User 35817 does not improve AUC. Reverting changes.
Training on augumented user 84958 37/50 current_auc = 0.6897001303780965
User 84958 AUC after training: 0.6875271621034333
User 84958 does not improve AUC. Reverting changes.
Training on augumented user 56517 38/50 current_auc = 0.6897001303780965
User 56517 AUC after training: 0.6883963494132985
User 56517 does not improve AUC. Reverting changes.
Training on augumented user 99632 39/50 current_auc = 0.6897001303780965
User 99632 AUC after training: 0.6883963494132985
User 99632 does not improve AUC. Reverting changes.
Training on augumented user 67681 40/50 current_auc = 0.6897001303780965
User 67681 AUC after training: 0.6892655367231639
User 67681 does not improve AUC. Reverting changes.
Training on augumented user 128676 41/50 current_auc = 0.6897001303780965
User 128676 AUC after training: 0.6888309430682311
User 128676 does not improve AUC. Reverting changes.
Training on augumented user 121593 42/50 current_auc = 0.6897001303780965
User 121593 AUC after training: 0.6901347240330291
User 121593 improves AUC. Keeping the model.
Training on augumented user 30117 43/50 current_auc = 0.6901347240330291
User 30117 AUC after training: 0.6905693176879617
User 30117 improves AUC. Keeping the model.
Training on augumented user 40021 44/50 current_auc = 0.6905693176879617
User 40021 AUC after training: 0.6888309430682312
User 40021 does not improve AUC. Reverting changes.
Training on augumented user 113279 45/50 current_auc = 0.6905693176879617
User 113279 AUC after training: 0.6897001303780965
User 113279 does not improve AUC. Reverting changes.
Training on augumented user 184 46/50 current_auc = 0.6905693176879617
User 184 AUC after training: 0.6892655367231639
User 184 does not improve AUC. Reverting changes.
Training on augumented user 64828 47/50 current_auc = 0.6905693176879617
User 64828 AUC after training: 0.6888309430682311
User 64828 does not improve AUC. Reverting changes.
Training on augumented user 127052 48/50 current_auc = 0.6905693176879617
User 127052 AUC after training: 0.6905693176879617
User 127052 does not improve AUC. Reverting changes.
Training on augumented user 137638 49/50 current_auc = 0.6905693176879617
User 137638 AUC after training: 0.6901347240330291
User 137638 does not improve AUC. Reverting changes.
[2024-12-02 19:47:23.769487] start test user 75081 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:24.256472] start test user 75081 238/568 recall augumented users by random, augumented_users = [106619, 526, 34899, 57820, 80542, 258, 9493, 72221, 62660, 131795, 10719, 23043, 92493, 107416, 112050, 27552, 103374, 45681, 119741, 106839, 104586, 77248, 75449, 130574, 120090, 37057, 28318, 100123, 25467, 51397, 16709, 100388, 17298, 25655, 6451, 73331, 60567, 60167, 23601, 51256, 73482, 40913, 129756, 31980, 6996, 116104, 6274, 130475, 118260, 114121]
[2024-12-02 19:47:24.271629] user = 75081 Cloud 238/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:47:24.278157] user = 75081 Local 238/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:47:24.298520] user = 75081 Local+ 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:47:26.919766] user = 75081 MPDA- 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 106619 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106619 AUC after training: 0.5
User 106619 does not improve AUC. Reverting changes.
Training on augumented user 526 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 526 AUC after training: 0.5
User 526 does not improve AUC. Reverting changes.
Training on augumented user 34899 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34899 AUC after training: 0.5
User 34899 does not improve AUC. Reverting changes.
Training on augumented user 57820 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57820 AUC after training: 0.5
User 57820 does not improve AUC. Reverting changes.
Training on augumented user 80542 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80542 AUC after training: 0.5
User 80542 does not improve AUC. Reverting changes.
Training on augumented user 258 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 258 AUC after training: 0.5
User 258 does not improve AUC. Reverting changes.
Training on augumented user 9493 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9493 AUC after training: 0.5
User 9493 does not improve AUC. Reverting changes.
Training on augumented user 72221 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72221 AUC after training: 0.5
User 72221 does not improve AUC. Reverting changes.
Training on augumented user 62660 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62660 AUC after training: 0.5
User 62660 does not improve AUC. Reverting changes.
Training on augumented user 131795 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131795 AUC after training: 0.5
User 131795 does not improve AUC. Reverting changes.
Training on augumented user 10719 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10719 AUC after training: 0.5
User 10719 does not improve AUC. Reverting changes.
Training on augumented user 23043 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23043 AUC after training: 0.5
User 23043 does not improve AUC. Reverting changes.
Training on augumented user 92493 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92493 AUC after training: 0.5
User 92493 does not improve AUC. Reverting changes.
Training on augumented user 107416 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107416 AUC after training: 0.5
User 107416 does not improve AUC. Reverting changes.
Training on augumented user 112050 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112050 AUC after training: 0.5
User 112050 does not improve AUC. Reverting changes.
Training on augumented user 27552 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27552 AUC after training: 0.5
User 27552 does not improve AUC. Reverting changes.
Training on augumented user 103374 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103374 AUC after training: 0.5
User 103374 does not improve AUC. Reverting changes.
Training on augumented user 45681 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45681 AUC after training: 0.5
User 45681 does not improve AUC. Reverting changes.
Training on augumented user 119741 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119741 AUC after training: 0.5
User 119741 does not improve AUC. Reverting changes.
Training on augumented user 106839 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106839 AUC after training: 0.5
User 106839 does not improve AUC. Reverting changes.
Training on augumented user 104586 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104586 AUC after training: 0.5
User 104586 does not improve AUC. Reverting changes.
Training on augumented user 77248 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77248 AUC after training: 0.5
User 77248 does not improve AUC. Reverting changes.
Training on augumented user 75449 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75449 AUC after training: 0.5
User 75449 does not improve AUC. Reverting changes.
Training on augumented user 130574 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130574 AUC after training: 0.5
User 130574 does not improve AUC. Reverting changes.
Training on augumented user 120090 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120090 AUC after training: 0.5
User 120090 does not improve AUC. Reverting changes.
Training on augumented user 37057 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37057 AUC after training: 0.5
User 37057 does not improve AUC. Reverting changes.
Training on augumented user 28318 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28318 AUC after training: 0.5
User 28318 does not improve AUC. Reverting changes.
Training on augumented user 100123 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100123 AUC after training: 0.5
User 100123 does not improve AUC. Reverting changes.
Training on augumented user 25467 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25467 AUC after training: 0.5
User 25467 does not improve AUC. Reverting changes.
Training on augumented user 51397 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51397 AUC after training: 0.5
User 51397 does not improve AUC. Reverting changes.
Training on augumented user 16709 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16709 AUC after training: 0.5
User 16709 does not improve AUC. Reverting changes.
Training on augumented user 100388 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100388 AUC after training: 0.5
User 100388 does not improve AUC. Reverting changes.
Training on augumented user 17298 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17298 AUC after training: 0.5
User 17298 does not improve AUC. Reverting changes.
Training on augumented user 25655 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25655 AUC after training: 0.5
User 25655 does not improve AUC. Reverting changes.
Training on augumented user 6451 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6451 AUC after training: 0.5
User 6451 does not improve AUC. Reverting changes.
Training on augumented user 73331 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73331 AUC after training: 0.5
User 73331 does not improve AUC. Reverting changes.
Training on augumented user 60567 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60567 AUC after training: 0.5
User 60567 does not improve AUC. Reverting changes.
Training on augumented user 60167 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60167 AUC after training: 0.5
User 60167 does not improve AUC. Reverting changes.
Training on augumented user 23601 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23601 AUC after training: 0.5
User 23601 does not improve AUC. Reverting changes.
Training on augumented user 51256 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51256 AUC after training: 0.5
User 51256 does not improve AUC. Reverting changes.
Training on augumented user 73482 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73482 AUC after training: 0.5
User 73482 does not improve AUC. Reverting changes.
Training on augumented user 40913 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40913 AUC after training: 0.5
User 40913 does not improve AUC. Reverting changes.
Training on augumented user 129756 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129756 AUC after training: 0.5
User 129756 does not improve AUC. Reverting changes.
Training on augumented user 31980 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31980 AUC after training: 0.5
User 31980 does not improve AUC. Reverting changes.
Training on augumented user 6996 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6996 AUC after training: 0.5
User 6996 does not improve AUC. Reverting changes.
Training on augumented user 116104 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116104 AUC after training: 0.5
User 116104 does not improve AUC. Reverting changes.
Training on augumented user 6274 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6274 AUC after training: 0.5
User 6274 does not improve AUC. Reverting changes.
Training on augumented user 130475 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130475 AUC after training: 0.5
User 130475 does not improve AUC. Reverting changes.
Training on augumented user 118260 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118260 AUC after training: 0.5
User 118260 does not improve AUC. Reverting changes.
Training on augumented user 114121 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114121 AUC after training: 0.5
User 114121 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:47:57.889527] start test user 75094 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:58.384030] start test user 75094 239/568 recall augumented users by random, augumented_users = [51816, 93686, 104087, 6662, 71875, 5762, 2310, 123435, 138306, 30587, 49409, 66784, 6404, 103261, 52654, 16691, 80759, 83734, 8764, 105338, 30366, 100793, 60976, 21988, 23702, 93278, 52068, 96587, 89801, 28988, 38553, 129633, 46082, 15460, 128465, 2660, 25655, 96861, 2599, 129702, 89551, 80845, 133666, 36206, 121786, 93964, 102772, 28711, 127276, 75164]
[2024-12-02 19:47:58.399599] user = 75094 Cloud 239/568
[2024-12-02 19:47:58.413284] user = 75094 Local 239/568
[2024-12-02 19:47:58.475273] user = 75094 Local+ 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:59.779105] user = 75094 MPDA- 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6672
Training on augumented user 51816 0/50 current_auc = 0.6672
User 51816 AUC after training: 0.6672
User 51816 does not improve AUC. Reverting changes.
Training on augumented user 93686 1/50 current_auc = 0.6672
User 93686 AUC after training: 0.6688
User 93686 improves AUC. Keeping the model.
Training on augumented user 104087 2/50 current_auc = 0.6688
User 104087 AUC after training: 0.6672
User 104087 does not improve AUC. Reverting changes.
Training on augumented user 6662 3/50 current_auc = 0.6688
User 6662 AUC after training: 0.6672
User 6662 does not improve AUC. Reverting changes.
Training on augumented user 71875 4/50 current_auc = 0.6688
User 71875 AUC after training: 0.6677333333333334
User 71875 does not improve AUC. Reverting changes.
Training on augumented user 5762 5/50 current_auc = 0.6688
User 5762 AUC after training: 0.6682666666666666
User 5762 does not improve AUC. Reverting changes.
Training on augumented user 2310 6/50 current_auc = 0.6688
User 2310 AUC after training: 0.6693333333333331
User 2310 improves AUC. Keeping the model.
Training on augumented user 123435 7/50 current_auc = 0.6693333333333331
User 123435 AUC after training: 0.6698666666666666
User 123435 improves AUC. Keeping the model.
Training on augumented user 138306 8/50 current_auc = 0.6698666666666666
User 138306 AUC after training: 0.6682666666666666
User 138306 does not improve AUC. Reverting changes.
Training on augumented user 30587 9/50 current_auc = 0.6698666666666666
User 30587 AUC after training: 0.6687999999999998
User 30587 does not improve AUC. Reverting changes.
Training on augumented user 49409 10/50 current_auc = 0.6698666666666666
User 49409 AUC after training: 0.6693333333333333
User 49409 does not improve AUC. Reverting changes.
Training on augumented user 66784 11/50 current_auc = 0.6698666666666666
User 66784 AUC after training: 0.6693333333333333
User 66784 does not improve AUC. Reverting changes.
Training on augumented user 6404 12/50 current_auc = 0.6698666666666666
User 6404 AUC after training: 0.6693333333333331
User 6404 does not improve AUC. Reverting changes.
Training on augumented user 103261 13/50 current_auc = 0.6698666666666666
User 103261 AUC after training: 0.6682666666666666
User 103261 does not improve AUC. Reverting changes.
Training on augumented user 52654 14/50 current_auc = 0.6698666666666666
User 52654 AUC after training: 0.6687999999999998
User 52654 does not improve AUC. Reverting changes.
Training on augumented user 16691 15/50 current_auc = 0.6698666666666666
User 16691 AUC after training: 0.6687999999999998
User 16691 does not improve AUC. Reverting changes.
Training on augumented user 80759 16/50 current_auc = 0.6698666666666666
User 80759 AUC after training: 0.6682666666666666
User 80759 does not improve AUC. Reverting changes.
Training on augumented user 83734 17/50 current_auc = 0.6698666666666666
User 83734 AUC after training: 0.6682666666666666
User 83734 does not improve AUC. Reverting changes.
Training on augumented user 8764 18/50 current_auc = 0.6698666666666666
User 8764 AUC after training: 0.6672
User 8764 does not improve AUC. Reverting changes.
Training on augumented user 105338 19/50 current_auc = 0.6698666666666666
User 105338 AUC after training: 0.6682666666666666
User 105338 does not improve AUC. Reverting changes.
Training on augumented user 30366 20/50 current_auc = 0.6698666666666666
User 30366 AUC after training: 0.6677333333333333
User 30366 does not improve AUC. Reverting changes.
Training on augumented user 100793 21/50 current_auc = 0.6698666666666666
User 100793 AUC after training: 0.6682666666666666
User 100793 does not improve AUC. Reverting changes.
Training on augumented user 60976 22/50 current_auc = 0.6698666666666666
User 60976 AUC after training: 0.6677333333333333
User 60976 does not improve AUC. Reverting changes.
Training on augumented user 21988 23/50 current_auc = 0.6698666666666666
User 21988 AUC after training: 0.6682666666666666
User 21988 does not improve AUC. Reverting changes.
Training on augumented user 23702 24/50 current_auc = 0.6698666666666666
User 23702 AUC after training: 0.6693333333333333
User 23702 does not improve AUC. Reverting changes.
Training on augumented user 93278 25/50 current_auc = 0.6698666666666666
User 93278 AUC after training: 0.6693333333333333
User 93278 does not improve AUC. Reverting changes.
Training on augumented user 52068 26/50 current_auc = 0.6698666666666666
User 52068 AUC after training: 0.6666666666666665
User 52068 does not improve AUC. Reverting changes.
Training on augumented user 96587 27/50 current_auc = 0.6698666666666666
User 96587 AUC after training: 0.6687999999999998
User 96587 does not improve AUC. Reverting changes.
Training on augumented user 89801 28/50 current_auc = 0.6698666666666666
User 89801 AUC after training: 0.6688000000000001
User 89801 does not improve AUC. Reverting changes.
Training on augumented user 28988 29/50 current_auc = 0.6698666666666666
User 28988 AUC after training: 0.6698666666666666
User 28988 does not improve AUC. Reverting changes.
Training on augumented user 38553 30/50 current_auc = 0.6698666666666666
User 38553 AUC after training: 0.6698666666666666
User 38553 does not improve AUC. Reverting changes.
Training on augumented user 129633 31/50 current_auc = 0.6698666666666666
User 129633 AUC after training: 0.6677333333333333
User 129633 does not improve AUC. Reverting changes.
Training on augumented user 46082 32/50 current_auc = 0.6698666666666666
User 46082 AUC after training: 0.6698666666666666
User 46082 does not improve AUC. Reverting changes.
Training on augumented user 15460 33/50 current_auc = 0.6698666666666666
User 15460 AUC after training: 0.6687999999999998
User 15460 does not improve AUC. Reverting changes.
Training on augumented user 128465 34/50 current_auc = 0.6698666666666666
User 128465 AUC after training: 0.6693333333333333
User 128465 does not improve AUC. Reverting changes.
Training on augumented user 2660 35/50 current_auc = 0.6698666666666666
User 2660 AUC after training: 0.6688000000000001
User 2660 does not improve AUC. Reverting changes.
Training on augumented user 25655 36/50 current_auc = 0.6698666666666666
User 25655 AUC after training: 0.6703999999999999
User 25655 improves AUC. Keeping the model.
Training on augumented user 96861 37/50 current_auc = 0.6703999999999999
User 96861 AUC after training: 0.6682666666666666
User 96861 does not improve AUC. Reverting changes.
Training on augumented user 2599 38/50 current_auc = 0.6703999999999999
User 2599 AUC after training: 0.6698666666666666
User 2599 does not improve AUC. Reverting changes.
Training on augumented user 129702 39/50 current_auc = 0.6703999999999999
User 129702 AUC after training: 0.6682666666666666
User 129702 does not improve AUC. Reverting changes.
Training on augumented user 89551 40/50 current_auc = 0.6703999999999999
User 89551 AUC after training: 0.6704
User 89551 improves AUC. Keeping the model.
Training on augumented user 80845 41/50 current_auc = 0.6704
User 80845 AUC after training: 0.6671999999999999
User 80845 does not improve AUC. Reverting changes.
Training on augumented user 133666 42/50 current_auc = 0.6704
User 133666 AUC after training: 0.6693333333333332
User 133666 does not improve AUC. Reverting changes.
Training on augumented user 36206 43/50 current_auc = 0.6704
User 36206 AUC after training: 0.6698666666666666
User 36206 does not improve AUC. Reverting changes.
Training on augumented user 121786 44/50 current_auc = 0.6704
User 121786 AUC after training: 0.6698666666666666
User 121786 does not improve AUC. Reverting changes.
Training on augumented user 93964 45/50 current_auc = 0.6704
User 93964 AUC after training: 0.6698666666666666
User 93964 does not improve AUC. Reverting changes.
Training on augumented user 102772 46/50 current_auc = 0.6704
User 102772 AUC after training: 0.6698666666666666
User 102772 does not improve AUC. Reverting changes.
Training on augumented user 28711 47/50 current_auc = 0.6704
User 28711 AUC after training: 0.6677333333333332
User 28711 does not improve AUC. Reverting changes.
Training on augumented user 127276 48/50 current_auc = 0.6704
User 127276 AUC after training: 0.6698666666666666
User 127276 does not improve AUC. Reverting changes.
Training on augumented user 75164 49/50 current_auc = 0.6704
User 75164 AUC after training: 0.6688
User 75164 does not improve AUC. Reverting changes.
[2024-12-02 19:48:28.674311] start test user 75105 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:29.124889] start test user 75105 240/568 recall augumented users by random, augumented_users = [86823, 40791, 106816, 12816, 17790, 27727, 89390, 82699, 24313, 123580, 118168, 131192, 123026, 29330, 105237, 7768, 46052, 2662, 55247, 126330, 100553, 105045, 33881, 42545, 61627, 75152, 24863, 39834, 104262, 91325, 62047, 1110, 111849, 73881, 72451, 67100, 29846, 99973, 103477, 130024, 89554, 56250, 10107, 38234, 59903, 3699, 67466, 55369, 91472, 1437]
[2024-12-02 19:48:29.140668] user = 75105 Cloud 240/568
[2024-12-02 19:48:29.153434] user = 75105 Local 240/568
[2024-12-02 19:48:29.228362] user = 75105 Local+ 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:30.700194] user = 75105 MPDA- 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6614401858304297
Training on augumented user 86823 0/50 current_auc = 0.6614401858304297
User 86823 AUC after training: 0.6594076655052266
User 86823 does not improve AUC. Reverting changes.
Training on augumented user 40791 1/50 current_auc = 0.6614401858304297
User 40791 AUC after training: 0.6626016260162603
User 40791 improves AUC. Keeping the model.
Training on augumented user 106816 2/50 current_auc = 0.6626016260162603
User 106816 AUC after training: 0.6614401858304297
User 106816 does not improve AUC. Reverting changes.
Training on augumented user 12816 3/50 current_auc = 0.6626016260162603
User 12816 AUC after training: 0.6614401858304297
User 12816 does not improve AUC. Reverting changes.
Training on augumented user 17790 4/50 current_auc = 0.6626016260162603
User 17790 AUC after training: 0.662020905923345
User 17790 does not improve AUC. Reverting changes.
Training on augumented user 27727 5/50 current_auc = 0.6626016260162603
User 27727 AUC after training: 0.662020905923345
User 27727 does not improve AUC. Reverting changes.
Training on augumented user 89390 6/50 current_auc = 0.6626016260162603
User 89390 AUC after training: 0.6626016260162602
User 89390 does not improve AUC. Reverting changes.
Training on augumented user 82699 7/50 current_auc = 0.6626016260162603
User 82699 AUC after training: 0.6614401858304297
User 82699 does not improve AUC. Reverting changes.
Training on augumented user 24313 8/50 current_auc = 0.6626016260162603
User 24313 AUC after training: 0.6596980255516841
User 24313 does not improve AUC. Reverting changes.
Training on augumented user 123580 9/50 current_auc = 0.6626016260162603
User 123580 AUC after training: 0.662020905923345
User 123580 does not improve AUC. Reverting changes.
Training on augumented user 118168 10/50 current_auc = 0.6626016260162603
User 118168 AUC after training: 0.6614401858304297
User 118168 does not improve AUC. Reverting changes.
Training on augumented user 131192 11/50 current_auc = 0.6626016260162603
User 131192 AUC after training: 0.6614401858304297
User 131192 does not improve AUC. Reverting changes.
Training on augumented user 123026 12/50 current_auc = 0.6626016260162603
User 123026 AUC after training: 0.6614401858304297
User 123026 does not improve AUC. Reverting changes.
Training on augumented user 29330 13/50 current_auc = 0.6626016260162603
User 29330 AUC after training: 0.662020905923345
User 29330 does not improve AUC. Reverting changes.
Training on augumented user 105237 14/50 current_auc = 0.6626016260162603
User 105237 AUC after training: 0.6611498257839722
User 105237 does not improve AUC. Reverting changes.
Training on augumented user 7768 15/50 current_auc = 0.6626016260162603
User 7768 AUC after training: 0.6628919860627177
User 7768 improves AUC. Keeping the model.
Training on augumented user 46052 16/50 current_auc = 0.6628919860627177
User 46052 AUC after training: 0.6623112659698026
User 46052 does not improve AUC. Reverting changes.
Training on augumented user 2662 17/50 current_auc = 0.6628919860627177
User 2662 AUC after training: 0.6631823461091754
User 2662 improves AUC. Keeping the model.
Training on augumented user 55247 18/50 current_auc = 0.6631823461091754
User 55247 AUC after training: 0.6611498257839722
User 55247 does not improve AUC. Reverting changes.
Training on augumented user 126330 19/50 current_auc = 0.6631823461091754
User 126330 AUC after training: 0.6637630662020906
User 126330 improves AUC. Keeping the model.
Training on augumented user 100553 20/50 current_auc = 0.6637630662020906
User 100553 AUC after training: 0.6643437862950059
User 100553 improves AUC. Keeping the model.
Training on augumented user 105045 21/50 current_auc = 0.6643437862950059
User 105045 AUC after training: 0.6631823461091754
User 105045 does not improve AUC. Reverting changes.
Training on augumented user 33881 22/50 current_auc = 0.6643437862950059
User 33881 AUC after training: 0.6637630662020906
User 33881 does not improve AUC. Reverting changes.
Training on augumented user 42545 23/50 current_auc = 0.6643437862950059
User 42545 AUC after training: 0.6626016260162602
User 42545 does not improve AUC. Reverting changes.
Training on augumented user 61627 24/50 current_auc = 0.6643437862950059
User 61627 AUC after training: 0.6655052264808362
User 61627 improves AUC. Keeping the model.
Training on augumented user 75152 25/50 current_auc = 0.6655052264808362
User 75152 AUC after training: 0.6666666666666666
User 75152 improves AUC. Keeping the model.
Training on augumented user 24863 26/50 current_auc = 0.6666666666666666
User 24863 AUC after training: 0.664924506387921
User 24863 does not improve AUC. Reverting changes.
Training on augumented user 39834 27/50 current_auc = 0.6666666666666666
User 39834 AUC after training: 0.6655052264808362
User 39834 does not improve AUC. Reverting changes.
Training on augumented user 104262 28/50 current_auc = 0.6666666666666666
User 104262 AUC after training: 0.667247386759582
User 104262 improves AUC. Keeping the model.
Training on augumented user 91325 29/50 current_auc = 0.667247386759582
User 91325 AUC after training: 0.6678281068524972
User 91325 improves AUC. Keeping the model.
Training on augumented user 62047 30/50 current_auc = 0.6678281068524972
User 62047 AUC after training: 0.667828106852497
User 62047 does not improve AUC. Reverting changes.
Training on augumented user 1110 31/50 current_auc = 0.6678281068524972
User 1110 AUC after training: 0.6684088269454124
User 1110 improves AUC. Keeping the model.
Training on augumented user 111849 32/50 current_auc = 0.6684088269454124
User 111849 AUC after training: 0.667247386759582
User 111849 does not improve AUC. Reverting changes.
Training on augumented user 73881 33/50 current_auc = 0.6684088269454124
User 73881 AUC after training: 0.6678281068524972
User 73881 does not improve AUC. Reverting changes.
Training on augumented user 72451 34/50 current_auc = 0.6684088269454124
User 72451 AUC after training: 0.6655052264808363
User 72451 does not improve AUC. Reverting changes.
Training on augumented user 67100 35/50 current_auc = 0.6684088269454124
User 67100 AUC after training: 0.6660859465737515
User 67100 does not improve AUC. Reverting changes.
Training on augumented user 29846 36/50 current_auc = 0.6684088269454124
User 29846 AUC after training: 0.667828106852497
User 29846 does not improve AUC. Reverting changes.
Training on augumented user 99973 37/50 current_auc = 0.6684088269454124
User 99973 AUC after training: 0.6666666666666666
User 99973 does not improve AUC. Reverting changes.
Training on augumented user 103477 38/50 current_auc = 0.6684088269454124
User 103477 AUC after training: 0.6660859465737515
User 103477 does not improve AUC. Reverting changes.
Training on augumented user 130024 39/50 current_auc = 0.6684088269454124
User 130024 AUC after training: 0.6689895470383276
User 130024 improves AUC. Keeping the model.
Training on augumented user 89554 40/50 current_auc = 0.6689895470383276
User 89554 AUC after training: 0.6649245063879211
User 89554 does not improve AUC. Reverting changes.
Training on augumented user 56250 41/50 current_auc = 0.6689895470383276
User 56250 AUC after training: 0.6689895470383275
User 56250 does not improve AUC. Reverting changes.
Training on augumented user 10107 42/50 current_auc = 0.6689895470383276
User 10107 AUC after training: 0.6695702671312428
User 10107 improves AUC. Keeping the model.
Training on augumented user 38234 43/50 current_auc = 0.6695702671312428
User 38234 AUC after training: 0.6695702671312428
User 38234 does not improve AUC. Reverting changes.
Training on augumented user 59903 44/50 current_auc = 0.6695702671312428
User 59903 AUC after training: 0.6689895470383276
User 59903 does not improve AUC. Reverting changes.
Training on augumented user 3699 45/50 current_auc = 0.6695702671312428
User 3699 AUC after training: 0.6684088269454123
User 3699 does not improve AUC. Reverting changes.
Training on augumented user 67466 46/50 current_auc = 0.6695702671312428
User 67466 AUC after training: 0.6672473867595818
User 67466 does not improve AUC. Reverting changes.
Training on augumented user 55369 47/50 current_auc = 0.6695702671312428
User 55369 AUC after training: 0.6660859465737514
User 55369 does not improve AUC. Reverting changes.
Training on augumented user 91472 48/50 current_auc = 0.6695702671312428
User 91472 AUC after training: 0.670150987224158
User 91472 improves AUC. Keeping the model.
Training on augumented user 1437 49/50 current_auc = 0.670150987224158
User 1437 AUC after training: 0.6666666666666666
User 1437 does not improve AUC. Reverting changes.
[2024-12-02 19:49:02.870053] start test user 75220 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:03.287272] start test user 75220 241/568 recall augumented users by random, augumented_users = [131623, 35246, 41070, 114154, 98572, 59984, 27302, 11561, 118572, 51882, 108509, 58970, 120498, 69753, 58929, 47764, 95208, 82354, 133167, 102680, 31023, 110734, 16779, 43484, 100463, 23701, 83809, 5712, 112515, 53695, 50357, 96904, 58407, 61014, 674, 14709, 127054, 18324, 34563, 33300, 39420, 17753, 104243, 109283, 92466, 69080, 121695, 88003, 127998, 114228]
[2024-12-02 19:49:03.301715] user = 75220 Cloud 241/568
[2024-12-02 19:49:03.311940] user = 75220 Local 241/568
[2024-12-02 19:49:03.347954] user = 75220 Local+ 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:05.835779] user = 75220 MPDA- 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 131623 0/50 current_auc = 0.5555555555555556
User 131623 AUC after training: 0.5694444444444444
User 131623 improves AUC. Keeping the model.
Training on augumented user 35246 1/50 current_auc = 0.5694444444444444
User 35246 AUC after training: 0.5694444444444444
User 35246 does not improve AUC. Reverting changes.
Training on augumented user 41070 2/50 current_auc = 0.5694444444444444
User 41070 AUC after training: 0.5694444444444444
User 41070 does not improve AUC. Reverting changes.
Training on augumented user 114154 3/50 current_auc = 0.5694444444444444
User 114154 AUC after training: 0.5694444444444444
User 114154 does not improve AUC. Reverting changes.
Training on augumented user 98572 4/50 current_auc = 0.5694444444444444
User 98572 AUC after training: 0.5694444444444444
User 98572 does not improve AUC. Reverting changes.
Training on augumented user 59984 5/50 current_auc = 0.5694444444444444
User 59984 AUC after training: 0.5555555555555556
User 59984 does not improve AUC. Reverting changes.
Training on augumented user 27302 6/50 current_auc = 0.5694444444444444
User 27302 AUC after training: 0.5555555555555556
User 27302 does not improve AUC. Reverting changes.
Training on augumented user 11561 7/50 current_auc = 0.5694444444444444
User 11561 AUC after training: 0.5694444444444444
User 11561 does not improve AUC. Reverting changes.
Training on augumented user 118572 8/50 current_auc = 0.5694444444444444
User 118572 AUC after training: 0.5694444444444444
User 118572 does not improve AUC. Reverting changes.
Training on augumented user 51882 9/50 current_auc = 0.5694444444444444
User 51882 AUC after training: 0.5694444444444444
User 51882 does not improve AUC. Reverting changes.
Training on augumented user 108509 10/50 current_auc = 0.5694444444444444
User 108509 AUC after training: 0.5694444444444444
User 108509 does not improve AUC. Reverting changes.
Training on augumented user 58970 11/50 current_auc = 0.5694444444444444
User 58970 AUC after training: 0.5694444444444444
User 58970 does not improve AUC. Reverting changes.
Training on augumented user 120498 12/50 current_auc = 0.5694444444444444
User 120498 AUC after training: 0.5694444444444444
User 120498 does not improve AUC. Reverting changes.
Training on augumented user 69753 13/50 current_auc = 0.5694444444444444
User 69753 AUC after training: 0.5694444444444444
User 69753 does not improve AUC. Reverting changes.
Training on augumented user 58929 14/50 current_auc = 0.5694444444444444
User 58929 AUC after training: 0.5694444444444444
User 58929 does not improve AUC. Reverting changes.
Training on augumented user 47764 15/50 current_auc = 0.5694444444444444
User 47764 AUC after training: 0.5555555555555556
User 47764 does not improve AUC. Reverting changes.
Training on augumented user 95208 16/50 current_auc = 0.5694444444444444
User 95208 AUC after training: 0.5694444444444444
User 95208 does not improve AUC. Reverting changes.
Training on augumented user 82354 17/50 current_auc = 0.5694444444444444
User 82354 AUC after training: 0.5555555555555556
User 82354 does not improve AUC. Reverting changes.
Training on augumented user 133167 18/50 current_auc = 0.5694444444444444
User 133167 AUC after training: 0.5694444444444444
User 133167 does not improve AUC. Reverting changes.
Training on augumented user 102680 19/50 current_auc = 0.5694444444444444
User 102680 AUC after training: 0.5416666666666666
User 102680 does not improve AUC. Reverting changes.
Training on augumented user 31023 20/50 current_auc = 0.5694444444444444
User 31023 AUC after training: 0.5694444444444444
User 31023 does not improve AUC. Reverting changes.
Training on augumented user 110734 21/50 current_auc = 0.5694444444444444
User 110734 AUC after training: 0.5694444444444444
User 110734 does not improve AUC. Reverting changes.
Training on augumented user 16779 22/50 current_auc = 0.5694444444444444
User 16779 AUC after training: 0.5555555555555556
User 16779 does not improve AUC. Reverting changes.
Training on augumented user 43484 23/50 current_auc = 0.5694444444444444
User 43484 AUC after training: 0.5694444444444444
User 43484 does not improve AUC. Reverting changes.
Training on augumented user 100463 24/50 current_auc = 0.5694444444444444
User 100463 AUC after training: 0.5694444444444444
User 100463 does not improve AUC. Reverting changes.
Training on augumented user 23701 25/50 current_auc = 0.5694444444444444
User 23701 AUC after training: 0.5555555555555556
User 23701 does not improve AUC. Reverting changes.
Training on augumented user 83809 26/50 current_auc = 0.5694444444444444
User 83809 AUC after training: 0.5694444444444444
User 83809 does not improve AUC. Reverting changes.
Training on augumented user 5712 27/50 current_auc = 0.5694444444444444
User 5712 AUC after training: 0.5555555555555556
User 5712 does not improve AUC. Reverting changes.
Training on augumented user 112515 28/50 current_auc = 0.5694444444444444
User 112515 AUC after training: 0.5694444444444444
User 112515 does not improve AUC. Reverting changes.
Training on augumented user 53695 29/50 current_auc = 0.5694444444444444
User 53695 AUC after training: 0.5555555555555556
User 53695 does not improve AUC. Reverting changes.
Training on augumented user 50357 30/50 current_auc = 0.5694444444444444
User 50357 AUC after training: 0.5694444444444444
User 50357 does not improve AUC. Reverting changes.
Training on augumented user 96904 31/50 current_auc = 0.5694444444444444
User 96904 AUC after training: 0.5694444444444444
User 96904 does not improve AUC. Reverting changes.
Training on augumented user 58407 32/50 current_auc = 0.5694444444444444
User 58407 AUC after training: 0.5694444444444444
User 58407 does not improve AUC. Reverting changes.
Training on augumented user 61014 33/50 current_auc = 0.5694444444444444
User 61014 AUC after training: 0.5694444444444444
User 61014 does not improve AUC. Reverting changes.
Training on augumented user 674 34/50 current_auc = 0.5694444444444444
User 674 AUC after training: 0.5694444444444444
User 674 does not improve AUC. Reverting changes.
Training on augumented user 14709 35/50 current_auc = 0.5694444444444444
User 14709 AUC after training: 0.5555555555555556
User 14709 does not improve AUC. Reverting changes.
Training on augumented user 127054 36/50 current_auc = 0.5694444444444444
User 127054 AUC after training: 0.5694444444444444
User 127054 does not improve AUC. Reverting changes.
Training on augumented user 18324 37/50 current_auc = 0.5694444444444444
User 18324 AUC after training: 0.5694444444444444
User 18324 does not improve AUC. Reverting changes.
Training on augumented user 34563 38/50 current_auc = 0.5694444444444444
User 34563 AUC after training: 0.5694444444444444
User 34563 does not improve AUC. Reverting changes.
Training on augumented user 33300 39/50 current_auc = 0.5694444444444444
User 33300 AUC after training: 0.5694444444444444
User 33300 does not improve AUC. Reverting changes.
Training on augumented user 39420 40/50 current_auc = 0.5694444444444444
User 39420 AUC after training: 0.5694444444444444
User 39420 does not improve AUC. Reverting changes.
Training on augumented user 17753 41/50 current_auc = 0.5694444444444444
User 17753 AUC after training: 0.5694444444444444
User 17753 does not improve AUC. Reverting changes.
Training on augumented user 104243 42/50 current_auc = 0.5694444444444444
User 104243 AUC after training: 0.5694444444444444
User 104243 does not improve AUC. Reverting changes.
Training on augumented user 109283 43/50 current_auc = 0.5694444444444444
User 109283 AUC after training: 0.5694444444444444
User 109283 does not improve AUC. Reverting changes.
Training on augumented user 92466 44/50 current_auc = 0.5694444444444444
User 92466 AUC after training: 0.5694444444444444
User 92466 does not improve AUC. Reverting changes.
Training on augumented user 69080 45/50 current_auc = 0.5694444444444444
User 69080 AUC after training: 0.5555555555555556
User 69080 does not improve AUC. Reverting changes.
Training on augumented user 121695 46/50 current_auc = 0.5694444444444444
User 121695 AUC after training: 0.5555555555555556
User 121695 does not improve AUC. Reverting changes.
Training on augumented user 88003 47/50 current_auc = 0.5694444444444444
User 88003 AUC after training: 0.5555555555555556
User 88003 does not improve AUC. Reverting changes.
Training on augumented user 127998 48/50 current_auc = 0.5694444444444444
User 127998 AUC after training: 0.5694444444444444
User 127998 does not improve AUC. Reverting changes.
Training on augumented user 114228 49/50 current_auc = 0.5694444444444444
User 114228 AUC after training: 0.5694444444444444
User 114228 does not improve AUC. Reverting changes.
[2024-12-02 19:49:37.607957] start test user 75239 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:38.128341] start test user 75239 242/568 recall augumented users by random, augumented_users = [62917, 77201, 126951, 23890, 61695, 5377, 29031, 124445, 114313, 111901, 90286, 72610, 128521, 10231, 83801, 56037, 105468, 77130, 25364, 72703, 64929, 108248, 81366, 118152, 73681, 113706, 73125, 27521, 21581, 7830, 115101, 71326, 5883, 75588, 123422, 27811, 119187, 1179, 97057, 65996, 68756, 51792, 90071, 32025, 133700, 132823, 37943, 134339, 44032, 132836]
[2024-12-02 19:49:38.142615] user = 75239 Cloud 242/568
[2024-12-02 19:49:38.157323] user = 75239 Local 242/568
[2024-12-02 19:49:38.183500] user = 75239 Local+ 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:40.033723] user = 75239 MPDA- 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6090225563909774
Training on augumented user 62917 0/50 current_auc = 0.6090225563909774
User 62917 AUC after training: 0.6090225563909775
User 62917 improves AUC. Keeping the model.
Training on augumented user 77201 1/50 current_auc = 0.6090225563909775
User 77201 AUC after training: 0.6115288220551378
User 77201 improves AUC. Keeping the model.
Training on augumented user 126951 2/50 current_auc = 0.6115288220551378
User 126951 AUC after training: 0.606516290726817
User 126951 does not improve AUC. Reverting changes.
Training on augumented user 23890 3/50 current_auc = 0.6115288220551378
User 23890 AUC after training: 0.6115288220551378
User 23890 does not improve AUC. Reverting changes.
Training on augumented user 61695 4/50 current_auc = 0.6115288220551378
User 61695 AUC after training: 0.6115288220551378
User 61695 does not improve AUC. Reverting changes.
Training on augumented user 5377 5/50 current_auc = 0.6115288220551378
User 5377 AUC after training: 0.6090225563909775
User 5377 does not improve AUC. Reverting changes.
Training on augumented user 29031 6/50 current_auc = 0.6115288220551378
User 29031 AUC after training: 0.6090225563909775
User 29031 does not improve AUC. Reverting changes.
Training on augumented user 124445 7/50 current_auc = 0.6115288220551378
User 124445 AUC after training: 0.6090225563909775
User 124445 does not improve AUC. Reverting changes.
Training on augumented user 114313 8/50 current_auc = 0.6115288220551378
User 114313 AUC after training: 0.606516290726817
User 114313 does not improve AUC. Reverting changes.
Training on augumented user 111901 9/50 current_auc = 0.6115288220551378
User 111901 AUC after training: 0.6115288220551378
User 111901 does not improve AUC. Reverting changes.
Training on augumented user 90286 10/50 current_auc = 0.6115288220551378
User 90286 AUC after training: 0.6115288220551378
User 90286 does not improve AUC. Reverting changes.
Training on augumented user 72610 11/50 current_auc = 0.6115288220551378
User 72610 AUC after training: 0.6090225563909775
User 72610 does not improve AUC. Reverting changes.
Training on augumented user 128521 12/50 current_auc = 0.6115288220551378
User 128521 AUC after training: 0.6090225563909775
User 128521 does not improve AUC. Reverting changes.
Training on augumented user 10231 13/50 current_auc = 0.6115288220551378
User 10231 AUC after training: 0.6090225563909775
User 10231 does not improve AUC. Reverting changes.
Training on augumented user 83801 14/50 current_auc = 0.6115288220551378
User 83801 AUC after training: 0.6115288220551378
User 83801 does not improve AUC. Reverting changes.
Training on augumented user 56037 15/50 current_auc = 0.6115288220551378
User 56037 AUC after training: 0.6115288220551378
User 56037 does not improve AUC. Reverting changes.
Training on augumented user 105468 16/50 current_auc = 0.6115288220551378
User 105468 AUC after training: 0.6140350877192983
User 105468 improves AUC. Keeping the model.
Training on augumented user 77130 17/50 current_auc = 0.6140350877192983
User 77130 AUC after training: 0.6115288220551378
User 77130 does not improve AUC. Reverting changes.
Training on augumented user 25364 18/50 current_auc = 0.6140350877192983
User 25364 AUC after training: 0.6115288220551378
User 25364 does not improve AUC. Reverting changes.
Training on augumented user 72703 19/50 current_auc = 0.6140350877192983
User 72703 AUC after training: 0.6115288220551378
User 72703 does not improve AUC. Reverting changes.
Training on augumented user 64929 20/50 current_auc = 0.6140350877192983
User 64929 AUC after training: 0.6115288220551378
User 64929 does not improve AUC. Reverting changes.
Training on augumented user 108248 21/50 current_auc = 0.6140350877192983
User 108248 AUC after training: 0.6115288220551378
User 108248 does not improve AUC. Reverting changes.
Training on augumented user 81366 22/50 current_auc = 0.6140350877192983
User 81366 AUC after training: 0.6140350877192983
User 81366 does not improve AUC. Reverting changes.
Training on augumented user 118152 23/50 current_auc = 0.6140350877192983
User 118152 AUC after training: 0.6090225563909775
User 118152 does not improve AUC. Reverting changes.
Training on augumented user 73681 24/50 current_auc = 0.6140350877192983
User 73681 AUC after training: 0.6090225563909775
User 73681 does not improve AUC. Reverting changes.
Training on augumented user 113706 25/50 current_auc = 0.6140350877192983
User 113706 AUC after training: 0.6090225563909775
User 113706 does not improve AUC. Reverting changes.
Training on augumented user 73125 26/50 current_auc = 0.6140350877192983
User 73125 AUC after training: 0.6115288220551378
User 73125 does not improve AUC. Reverting changes.
Training on augumented user 27521 27/50 current_auc = 0.6140350877192983
User 27521 AUC after training: 0.6115288220551378
User 27521 does not improve AUC. Reverting changes.
Training on augumented user 21581 28/50 current_auc = 0.6140350877192983
User 21581 AUC after training: 0.606516290726817
User 21581 does not improve AUC. Reverting changes.
Training on augumented user 7830 29/50 current_auc = 0.6140350877192983
User 7830 AUC after training: 0.6090225563909775
User 7830 does not improve AUC. Reverting changes.
Training on augumented user 115101 30/50 current_auc = 0.6140350877192983
User 115101 AUC after training: 0.6090225563909775
User 115101 does not improve AUC. Reverting changes.
Training on augumented user 71326 31/50 current_auc = 0.6140350877192983
User 71326 AUC after training: 0.6090225563909775
User 71326 does not improve AUC. Reverting changes.
Training on augumented user 5883 32/50 current_auc = 0.6140350877192983
User 5883 AUC after training: 0.6115288220551378
User 5883 does not improve AUC. Reverting changes.
Training on augumented user 75588 33/50 current_auc = 0.6140350877192983
User 75588 AUC after training: 0.6140350877192983
User 75588 does not improve AUC. Reverting changes.
Training on augumented user 123422 34/50 current_auc = 0.6140350877192983
User 123422 AUC after training: 0.6090225563909775
User 123422 does not improve AUC. Reverting changes.
Training on augumented user 27811 35/50 current_auc = 0.6140350877192983
User 27811 AUC after training: 0.6115288220551378
User 27811 does not improve AUC. Reverting changes.
Training on augumented user 119187 36/50 current_auc = 0.6140350877192983
User 119187 AUC after training: 0.6090225563909775
User 119187 does not improve AUC. Reverting changes.
Training on augumented user 1179 37/50 current_auc = 0.6140350877192983
User 1179 AUC after training: 0.6140350877192983
User 1179 does not improve AUC. Reverting changes.
Training on augumented user 97057 38/50 current_auc = 0.6140350877192983
User 97057 AUC after training: 0.6090225563909775
User 97057 does not improve AUC. Reverting changes.
Training on augumented user 65996 39/50 current_auc = 0.6140350877192983
User 65996 AUC after training: 0.6090225563909775
User 65996 does not improve AUC. Reverting changes.
Training on augumented user 68756 40/50 current_auc = 0.6140350877192983
User 68756 AUC after training: 0.6140350877192983
User 68756 does not improve AUC. Reverting changes.
Training on augumented user 51792 41/50 current_auc = 0.6140350877192983
User 51792 AUC after training: 0.6115288220551378
User 51792 does not improve AUC. Reverting changes.
Training on augumented user 90071 42/50 current_auc = 0.6140350877192983
User 90071 AUC after training: 0.6115288220551378
User 90071 does not improve AUC. Reverting changes.
Training on augumented user 32025 43/50 current_auc = 0.6140350877192983
User 32025 AUC after training: 0.6115288220551378
User 32025 does not improve AUC. Reverting changes.
Training on augumented user 133700 44/50 current_auc = 0.6140350877192983
User 133700 AUC after training: 0.612781954887218
User 133700 does not improve AUC. Reverting changes.
Training on augumented user 132823 45/50 current_auc = 0.6140350877192983
User 132823 AUC after training: 0.6115288220551378
User 132823 does not improve AUC. Reverting changes.
Training on augumented user 37943 46/50 current_auc = 0.6140350877192983
User 37943 AUC after training: 0.6115288220551378
User 37943 does not improve AUC. Reverting changes.
Training on augumented user 134339 47/50 current_auc = 0.6140350877192983
User 134339 AUC after training: 0.6115288220551378
User 134339 does not improve AUC. Reverting changes.
Training on augumented user 44032 48/50 current_auc = 0.6140350877192983
User 44032 AUC after training: 0.6115288220551378
User 44032 does not improve AUC. Reverting changes.
Training on augumented user 132836 49/50 current_auc = 0.6140350877192983
User 132836 AUC after training: 0.6090225563909775
User 132836 does not improve AUC. Reverting changes.
[2024-12-02 19:50:08.928095] start test user 75268 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:09.844492] start test user 75268 243/568 recall augumented users by random, augumented_users = [69036, 8327, 97216, 6630, 3655, 33584, 14856, 53536, 63442, 117007, 110770, 73739, 118697, 103060, 119949, 116542, 45449, 8035, 13706, 80151, 26210, 14625, 70783, 70591, 14724, 899, 71494, 75594, 6038, 10353, 27481, 64583, 115473, 90710, 114580, 41486, 24708, 61531, 93616, 3343, 100961, 37562, 61808, 38883, 27782, 46018, 40954, 91057, 28297, 76670]
[2024-12-02 19:50:09.872738] user = 75268 Cloud 243/568
[2024-12-02 19:50:09.886060] user = 75268 Local 243/568
[2024-12-02 19:50:10.039019] user = 75268 Local+ 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:11.934188] user = 75268 MPDA- 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33333333333333337
Training on augumented user 69036 0/50 current_auc = 0.33333333333333337
User 69036 AUC after training: 0.33333333333333337
User 69036 does not improve AUC. Reverting changes.
Training on augumented user 8327 1/50 current_auc = 0.33333333333333337
User 8327 AUC after training: 0.33333333333333337
User 8327 does not improve AUC. Reverting changes.
Training on augumented user 97216 2/50 current_auc = 0.33333333333333337
User 97216 AUC after training: 0.33333333333333337
User 97216 does not improve AUC. Reverting changes.
Training on augumented user 6630 3/50 current_auc = 0.33333333333333337
User 6630 AUC after training: 0.33333333333333337
User 6630 does not improve AUC. Reverting changes.
Training on augumented user 3655 4/50 current_auc = 0.33333333333333337
User 3655 AUC after training: 0.33333333333333337
User 3655 does not improve AUC. Reverting changes.
Training on augumented user 33584 5/50 current_auc = 0.33333333333333337
User 33584 AUC after training: 0.33333333333333337
User 33584 does not improve AUC. Reverting changes.
Training on augumented user 14856 6/50 current_auc = 0.33333333333333337
User 14856 AUC after training: 0.33333333333333337
User 14856 does not improve AUC. Reverting changes.
Training on augumented user 53536 7/50 current_auc = 0.33333333333333337
User 53536 AUC after training: 0.33333333333333337
User 53536 does not improve AUC. Reverting changes.
Training on augumented user 63442 8/50 current_auc = 0.33333333333333337
User 63442 AUC after training: 0.33333333333333337
User 63442 does not improve AUC. Reverting changes.
Training on augumented user 117007 9/50 current_auc = 0.33333333333333337
User 117007 AUC after training: 0.33333333333333337
User 117007 does not improve AUC. Reverting changes.
Training on augumented user 110770 10/50 current_auc = 0.33333333333333337
User 110770 AUC after training: 0.33333333333333337
User 110770 does not improve AUC. Reverting changes.
Training on augumented user 73739 11/50 current_auc = 0.33333333333333337
User 73739 AUC after training: 0.33333333333333337
User 73739 does not improve AUC. Reverting changes.
Training on augumented user 118697 12/50 current_auc = 0.33333333333333337
User 118697 AUC after training: 0.33333333333333337
User 118697 does not improve AUC. Reverting changes.
Training on augumented user 103060 13/50 current_auc = 0.33333333333333337
User 103060 AUC after training: 0.33333333333333337
User 103060 does not improve AUC. Reverting changes.
Training on augumented user 119949 14/50 current_auc = 0.33333333333333337
User 119949 AUC after training: 0.33333333333333337
User 119949 does not improve AUC. Reverting changes.
Training on augumented user 116542 15/50 current_auc = 0.33333333333333337
User 116542 AUC after training: 0.33333333333333337
User 116542 does not improve AUC. Reverting changes.
Training on augumented user 45449 16/50 current_auc = 0.33333333333333337
User 45449 AUC after training: 0.33333333333333337
User 45449 does not improve AUC. Reverting changes.
Training on augumented user 8035 17/50 current_auc = 0.33333333333333337
User 8035 AUC after training: 0.33333333333333337
User 8035 does not improve AUC. Reverting changes.
Training on augumented user 13706 18/50 current_auc = 0.33333333333333337
User 13706 AUC after training: 0.33333333333333337
User 13706 does not improve AUC. Reverting changes.
Training on augumented user 80151 19/50 current_auc = 0.33333333333333337
User 80151 AUC after training: 0.33333333333333337
User 80151 does not improve AUC. Reverting changes.
Training on augumented user 26210 20/50 current_auc = 0.33333333333333337
User 26210 AUC after training: 0.33333333333333337
User 26210 does not improve AUC. Reverting changes.
Training on augumented user 14625 21/50 current_auc = 0.33333333333333337
User 14625 AUC after training: 0.33333333333333337
User 14625 does not improve AUC. Reverting changes.
Training on augumented user 70783 22/50 current_auc = 0.33333333333333337
User 70783 AUC after training: 0.33333333333333337
User 70783 does not improve AUC. Reverting changes.
Training on augumented user 70591 23/50 current_auc = 0.33333333333333337
User 70591 AUC after training: 0.33333333333333337
User 70591 does not improve AUC. Reverting changes.
Training on augumented user 14724 24/50 current_auc = 0.33333333333333337
User 14724 AUC after training: 0.33333333333333337
User 14724 does not improve AUC. Reverting changes.
Training on augumented user 899 25/50 current_auc = 0.33333333333333337
User 899 AUC after training: 0.33333333333333337
User 899 does not improve AUC. Reverting changes.
Training on augumented user 71494 26/50 current_auc = 0.33333333333333337
User 71494 AUC after training: 0.33333333333333337
User 71494 does not improve AUC. Reverting changes.
Training on augumented user 75594 27/50 current_auc = 0.33333333333333337
User 75594 AUC after training: 0.33333333333333337
User 75594 does not improve AUC. Reverting changes.
Training on augumented user 6038 28/50 current_auc = 0.33333333333333337
User 6038 AUC after training: 0.33333333333333337
User 6038 does not improve AUC. Reverting changes.
Training on augumented user 10353 29/50 current_auc = 0.33333333333333337
User 10353 AUC after training: 0.33333333333333337
User 10353 does not improve AUC. Reverting changes.
Training on augumented user 27481 30/50 current_auc = 0.33333333333333337
User 27481 AUC after training: 0.33333333333333337
User 27481 does not improve AUC. Reverting changes.
Training on augumented user 64583 31/50 current_auc = 0.33333333333333337
User 64583 AUC after training: 0.33333333333333337
User 64583 does not improve AUC. Reverting changes.
Training on augumented user 115473 32/50 current_auc = 0.33333333333333337
User 115473 AUC after training: 0.33333333333333337
User 115473 does not improve AUC. Reverting changes.
Training on augumented user 90710 33/50 current_auc = 0.33333333333333337
User 90710 AUC after training: 0.33333333333333337
User 90710 does not improve AUC. Reverting changes.
Training on augumented user 114580 34/50 current_auc = 0.33333333333333337
User 114580 AUC after training: 0.33333333333333337
User 114580 does not improve AUC. Reverting changes.
Training on augumented user 41486 35/50 current_auc = 0.33333333333333337
User 41486 AUC after training: 0.33333333333333337
User 41486 does not improve AUC. Reverting changes.
Training on augumented user 24708 36/50 current_auc = 0.33333333333333337
User 24708 AUC after training: 0.33333333333333337
User 24708 does not improve AUC. Reverting changes.
Training on augumented user 61531 37/50 current_auc = 0.33333333333333337
User 61531 AUC after training: 0.33333333333333337
User 61531 does not improve AUC. Reverting changes.
Training on augumented user 93616 38/50 current_auc = 0.33333333333333337
User 93616 AUC after training: 0.33333333333333337
User 93616 does not improve AUC. Reverting changes.
Training on augumented user 3343 39/50 current_auc = 0.33333333333333337
User 3343 AUC after training: 0.33333333333333337
User 3343 does not improve AUC. Reverting changes.
Training on augumented user 100961 40/50 current_auc = 0.33333333333333337
User 100961 AUC after training: 0.33333333333333337
User 100961 does not improve AUC. Reverting changes.
Training on augumented user 37562 41/50 current_auc = 0.33333333333333337
User 37562 AUC after training: 0.33333333333333337
User 37562 does not improve AUC. Reverting changes.
Training on augumented user 61808 42/50 current_auc = 0.33333333333333337
User 61808 AUC after training: 0.33333333333333337
User 61808 does not improve AUC. Reverting changes.
Training on augumented user 38883 43/50 current_auc = 0.33333333333333337
User 38883 AUC after training: 0.33333333333333337
User 38883 does not improve AUC. Reverting changes.
Training on augumented user 27782 44/50 current_auc = 0.33333333333333337
User 27782 AUC after training: 0.33333333333333337
User 27782 does not improve AUC. Reverting changes.
Training on augumented user 46018 45/50 current_auc = 0.33333333333333337
User 46018 AUC after training: 0.33333333333333337
User 46018 does not improve AUC. Reverting changes.
Training on augumented user 40954 46/50 current_auc = 0.33333333333333337
User 40954 AUC after training: 0.33333333333333337
User 40954 does not improve AUC. Reverting changes.
Training on augumented user 91057 47/50 current_auc = 0.33333333333333337
User 91057 AUC after training: 0.33333333333333337
User 91057 does not improve AUC. Reverting changes.
Training on augumented user 28297 48/50 current_auc = 0.33333333333333337
User 28297 AUC after training: 0.33333333333333337
User 28297 does not improve AUC. Reverting changes.
Training on augumented user 76670 49/50 current_auc = 0.33333333333333337
User 76670 AUC after training: 0.33333333333333337
User 76670 does not improve AUC. Reverting changes.
[2024-12-02 19:50:42.937700] start test user 75275 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:43.409398] start test user 75275 244/568 recall augumented users by random, augumented_users = [93760, 45668, 85817, 56693, 133225, 87832, 37360, 80404, 135768, 61405, 81149, 129403, 57277, 119597, 82558, 133856, 116838, 128705, 111944, 133371, 68163, 131100, 6194, 24929, 117923, 62103, 9193, 89349, 123807, 90771, 123920, 111519, 19678, 117867, 48502, 8879, 117892, 78300, 115064, 99223, 111506, 128177, 74185, 101719, 4795, 61875, 109979, 109574, 4115, 13101]
[2024-12-02 19:50:43.424678] user = 75275 Cloud 244/568
[2024-12-02 19:50:43.433984] user = 75275 Local 244/568
[2024-12-02 19:50:43.507682] user = 75275 Local+ 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:45.492300] user = 75275 MPDA- 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7777777777777778
Training on augumented user 93760 0/50 current_auc = 0.7777777777777778
User 93760 AUC after training: 0.7777777777777778
User 93760 does not improve AUC. Reverting changes.
Training on augumented user 45668 1/50 current_auc = 0.7777777777777778
User 45668 AUC after training: 0.7777777777777778
User 45668 does not improve AUC. Reverting changes.
Training on augumented user 85817 2/50 current_auc = 0.7777777777777778
User 85817 AUC after training: 0.7777777777777778
User 85817 does not improve AUC. Reverting changes.
Training on augumented user 56693 3/50 current_auc = 0.7777777777777778
User 56693 AUC after training: 0.7777777777777778
User 56693 does not improve AUC. Reverting changes.
Training on augumented user 133225 4/50 current_auc = 0.7777777777777778
User 133225 AUC after training: 0.7777777777777778
User 133225 does not improve AUC. Reverting changes.
Training on augumented user 87832 5/50 current_auc = 0.7777777777777778
User 87832 AUC after training: 0.7222222222222222
User 87832 does not improve AUC. Reverting changes.
Training on augumented user 37360 6/50 current_auc = 0.7777777777777778
User 37360 AUC after training: 0.7777777777777778
User 37360 does not improve AUC. Reverting changes.
Training on augumented user 80404 7/50 current_auc = 0.7777777777777778
User 80404 AUC after training: 0.7222222222222222
User 80404 does not improve AUC. Reverting changes.
Training on augumented user 135768 8/50 current_auc = 0.7777777777777778
User 135768 AUC after training: 0.7777777777777778
User 135768 does not improve AUC. Reverting changes.
Training on augumented user 61405 9/50 current_auc = 0.7777777777777778
User 61405 AUC after training: 0.7222222222222222
User 61405 does not improve AUC. Reverting changes.
Training on augumented user 81149 10/50 current_auc = 0.7777777777777778
User 81149 AUC after training: 0.7777777777777778
User 81149 does not improve AUC. Reverting changes.
Training on augumented user 129403 11/50 current_auc = 0.7777777777777778
User 129403 AUC after training: 0.8333333333333334
User 129403 improves AUC. Keeping the model.
Training on augumented user 57277 12/50 current_auc = 0.8333333333333334
User 57277 AUC after training: 0.7777777777777778
User 57277 does not improve AUC. Reverting changes.
Training on augumented user 119597 13/50 current_auc = 0.8333333333333334
User 119597 AUC after training: 0.8333333333333334
User 119597 does not improve AUC. Reverting changes.
Training on augumented user 82558 14/50 current_auc = 0.8333333333333334
User 82558 AUC after training: 0.8333333333333334
User 82558 does not improve AUC. Reverting changes.
Training on augumented user 133856 15/50 current_auc = 0.8333333333333334
User 133856 AUC after training: 0.7777777777777778
User 133856 does not improve AUC. Reverting changes.
Training on augumented user 116838 16/50 current_auc = 0.8333333333333334
User 116838 AUC after training: 0.7777777777777778
User 116838 does not improve AUC. Reverting changes.
Training on augumented user 128705 17/50 current_auc = 0.8333333333333334
User 128705 AUC after training: 0.8333333333333334
User 128705 does not improve AUC. Reverting changes.
Training on augumented user 111944 18/50 current_auc = 0.8333333333333334
User 111944 AUC after training: 0.7777777777777778
User 111944 does not improve AUC. Reverting changes.
Training on augumented user 133371 19/50 current_auc = 0.8333333333333334
User 133371 AUC after training: 0.7777777777777778
User 133371 does not improve AUC. Reverting changes.
Training on augumented user 68163 20/50 current_auc = 0.8333333333333334
User 68163 AUC after training: 0.8333333333333334
User 68163 does not improve AUC. Reverting changes.
Training on augumented user 131100 21/50 current_auc = 0.8333333333333334
User 131100 AUC after training: 0.7777777777777778
User 131100 does not improve AUC. Reverting changes.
Training on augumented user 6194 22/50 current_auc = 0.8333333333333334
User 6194 AUC after training: 0.8333333333333334
User 6194 does not improve AUC. Reverting changes.
Training on augumented user 24929 23/50 current_auc = 0.8333333333333334
User 24929 AUC after training: 0.8333333333333334
User 24929 does not improve AUC. Reverting changes.
Training on augumented user 117923 24/50 current_auc = 0.8333333333333334
User 117923 AUC after training: 0.8333333333333334
User 117923 does not improve AUC. Reverting changes.
Training on augumented user 62103 25/50 current_auc = 0.8333333333333334
User 62103 AUC after training: 0.7777777777777778
User 62103 does not improve AUC. Reverting changes.
Training on augumented user 9193 26/50 current_auc = 0.8333333333333334
User 9193 AUC after training: 0.7777777777777778
User 9193 does not improve AUC. Reverting changes.
Training on augumented user 89349 27/50 current_auc = 0.8333333333333334
User 89349 AUC after training: 0.8333333333333334
User 89349 does not improve AUC. Reverting changes.
Training on augumented user 123807 28/50 current_auc = 0.8333333333333334
User 123807 AUC after training: 0.8333333333333334
User 123807 does not improve AUC. Reverting changes.
Training on augumented user 90771 29/50 current_auc = 0.8333333333333334
User 90771 AUC after training: 0.7777777777777778
User 90771 does not improve AUC. Reverting changes.
Training on augumented user 123920 30/50 current_auc = 0.8333333333333334
User 123920 AUC after training: 0.7777777777777778
User 123920 does not improve AUC. Reverting changes.
Training on augumented user 111519 31/50 current_auc = 0.8333333333333334
User 111519 AUC after training: 0.8333333333333334
User 111519 does not improve AUC. Reverting changes.
Training on augumented user 19678 32/50 current_auc = 0.8333333333333334
User 19678 AUC after training: 0.7777777777777778
User 19678 does not improve AUC. Reverting changes.
Training on augumented user 117867 33/50 current_auc = 0.8333333333333334
User 117867 AUC after training: 0.7777777777777778
User 117867 does not improve AUC. Reverting changes.
Training on augumented user 48502 34/50 current_auc = 0.8333333333333334
User 48502 AUC after training: 0.7777777777777778
User 48502 does not improve AUC. Reverting changes.
Training on augumented user 8879 35/50 current_auc = 0.8333333333333334
User 8879 AUC after training: 0.7777777777777778
User 8879 does not improve AUC. Reverting changes.
Training on augumented user 117892 36/50 current_auc = 0.8333333333333334
User 117892 AUC after training: 0.7777777777777778
User 117892 does not improve AUC. Reverting changes.
Training on augumented user 78300 37/50 current_auc = 0.8333333333333334
User 78300 AUC after training: 0.7777777777777778
User 78300 does not improve AUC. Reverting changes.
Training on augumented user 115064 38/50 current_auc = 0.8333333333333334
User 115064 AUC after training: 0.7777777777777778
User 115064 does not improve AUC. Reverting changes.
Training on augumented user 99223 39/50 current_auc = 0.8333333333333334
User 99223 AUC after training: 0.8333333333333334
User 99223 does not improve AUC. Reverting changes.
Training on augumented user 111506 40/50 current_auc = 0.8333333333333334
User 111506 AUC after training: 0.7777777777777778
User 111506 does not improve AUC. Reverting changes.
Training on augumented user 128177 41/50 current_auc = 0.8333333333333334
User 128177 AUC after training: 0.8333333333333334
User 128177 does not improve AUC. Reverting changes.
Training on augumented user 74185 42/50 current_auc = 0.8333333333333334
User 74185 AUC after training: 0.7777777777777778
User 74185 does not improve AUC. Reverting changes.
Training on augumented user 101719 43/50 current_auc = 0.8333333333333334
User 101719 AUC after training: 0.7777777777777778
User 101719 does not improve AUC. Reverting changes.
Training on augumented user 4795 44/50 current_auc = 0.8333333333333334
User 4795 AUC after training: 0.8333333333333334
User 4795 does not improve AUC. Reverting changes.
Training on augumented user 61875 45/50 current_auc = 0.8333333333333334
User 61875 AUC after training: 0.8333333333333334
User 61875 does not improve AUC. Reverting changes.
Training on augumented user 109979 46/50 current_auc = 0.8333333333333334
User 109979 AUC after training: 0.7777777777777778
User 109979 does not improve AUC. Reverting changes.
Training on augumented user 109574 47/50 current_auc = 0.8333333333333334
User 109574 AUC after training: 0.8333333333333334
User 109574 does not improve AUC. Reverting changes.
Training on augumented user 4115 48/50 current_auc = 0.8333333333333334
User 4115 AUC after training: 0.8333333333333334
User 4115 does not improve AUC. Reverting changes.
Training on augumented user 13101 49/50 current_auc = 0.8333333333333334
User 13101 AUC after training: 0.8333333333333334
User 13101 does not improve AUC. Reverting changes.
[2024-12-02 19:51:19.381070] start test user 75332 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:20.250420] start test user 75332 245/568 recall augumented users by random, augumented_users = [80363, 130379, 104260, 134656, 60721, 22669, 63113, 27610, 98583, 61732, 113963, 116805, 113209, 86455, 103574, 125239, 84926, 36923, 19257, 100617, 67027, 95485, 68539, 129005, 91189, 33359, 107326, 137578, 47493, 130345, 127123, 121897, 33084, 58791, 34606, 68499, 70712, 52802, 114142, 10919, 39205, 77624, 113221, 31890, 40267, 90994, 27287, 50393, 38844, 31252]
[2024-12-02 19:51:20.265774] user = 75332 Cloud 245/568
[2024-12-02 19:51:20.281432] user = 75332 Local 245/568
[2024-12-02 19:51:20.484583] user = 75332 Local+ 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:23.685538] user = 75332 MPDA- 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6418300653594771
Training on augumented user 80363 0/50 current_auc = 0.6418300653594771
User 80363 AUC after training: 0.6411764705882352
User 80363 does not improve AUC. Reverting changes.
Training on augumented user 130379 1/50 current_auc = 0.6418300653594771
User 130379 AUC after training: 0.6424836601307189
User 130379 improves AUC. Keeping the model.
Training on augumented user 104260 2/50 current_auc = 0.6424836601307189
User 104260 AUC after training: 0.6437908496732027
User 104260 improves AUC. Keeping the model.
Training on augumented user 134656 3/50 current_auc = 0.6437908496732027
User 134656 AUC after training: 0.6424836601307189
User 134656 does not improve AUC. Reverting changes.
Training on augumented user 60721 4/50 current_auc = 0.6437908496732027
User 60721 AUC after training: 0.6437908496732025
User 60721 does not improve AUC. Reverting changes.
Training on augumented user 22669 5/50 current_auc = 0.6437908496732027
User 22669 AUC after training: 0.6444444444444444
User 22669 improves AUC. Keeping the model.
Training on augumented user 63113 6/50 current_auc = 0.6444444444444444
User 63113 AUC after training: 0.6444444444444444
User 63113 does not improve AUC. Reverting changes.
Training on augumented user 27610 7/50 current_auc = 0.6444444444444444
User 27610 AUC after training: 0.6424836601307189
User 27610 does not improve AUC. Reverting changes.
Training on augumented user 98583 8/50 current_auc = 0.6444444444444444
User 98583 AUC after training: 0.6437908496732025
User 98583 does not improve AUC. Reverting changes.
Training on augumented user 61732 9/50 current_auc = 0.6444444444444444
User 61732 AUC after training: 0.6444444444444444
User 61732 does not improve AUC. Reverting changes.
Training on augumented user 113963 10/50 current_auc = 0.6444444444444444
User 113963 AUC after training: 0.6450980392156862
User 113963 improves AUC. Keeping the model.
Training on augumented user 116805 11/50 current_auc = 0.6450980392156862
User 116805 AUC after training: 0.64640522875817
User 116805 improves AUC. Keeping the model.
Training on augumented user 113209 12/50 current_auc = 0.64640522875817
User 113209 AUC after training: 0.6431372549019608
User 113209 does not improve AUC. Reverting changes.
Training on augumented user 86455 13/50 current_auc = 0.64640522875817
User 86455 AUC after training: 0.64640522875817
User 86455 does not improve AUC. Reverting changes.
Training on augumented user 103574 14/50 current_auc = 0.64640522875817
User 103574 AUC after training: 0.6457516339869281
User 103574 does not improve AUC. Reverting changes.
Training on augumented user 125239 15/50 current_auc = 0.64640522875817
User 125239 AUC after training: 0.6431372549019607
User 125239 does not improve AUC. Reverting changes.
Training on augumented user 84926 16/50 current_auc = 0.64640522875817
User 84926 AUC after training: 0.6464052287581699
User 84926 does not improve AUC. Reverting changes.
Training on augumented user 36923 17/50 current_auc = 0.64640522875817
User 36923 AUC after training: 0.6450980392156863
User 36923 does not improve AUC. Reverting changes.
Training on augumented user 19257 18/50 current_auc = 0.64640522875817
User 19257 AUC after training: 0.6437908496732025
User 19257 does not improve AUC. Reverting changes.
Training on augumented user 100617 19/50 current_auc = 0.64640522875817
User 100617 AUC after training: 0.6437908496732025
User 100617 does not improve AUC. Reverting changes.
Training on augumented user 67027 20/50 current_auc = 0.64640522875817
User 67027 AUC after training: 0.6457516339869281
User 67027 does not improve AUC. Reverting changes.
Training on augumented user 95485 21/50 current_auc = 0.64640522875817
User 95485 AUC after training: 0.6450980392156863
User 95485 does not improve AUC. Reverting changes.
Training on augumented user 68539 22/50 current_auc = 0.64640522875817
User 68539 AUC after training: 0.64640522875817
User 68539 does not improve AUC. Reverting changes.
Training on augumented user 129005 23/50 current_auc = 0.64640522875817
User 129005 AUC after training: 0.645751633986928
User 129005 does not improve AUC. Reverting changes.
Training on augumented user 91189 24/50 current_auc = 0.64640522875817
User 91189 AUC after training: 0.6444444444444445
User 91189 does not improve AUC. Reverting changes.
Training on augumented user 33359 25/50 current_auc = 0.64640522875817
User 33359 AUC after training: 0.6450980392156862
User 33359 does not improve AUC. Reverting changes.
Training on augumented user 107326 26/50 current_auc = 0.64640522875817
User 107326 AUC after training: 0.6366013071895424
User 107326 does not improve AUC. Reverting changes.
Training on augumented user 137578 27/50 current_auc = 0.64640522875817
User 137578 AUC after training: 0.6450980392156863
User 137578 does not improve AUC. Reverting changes.
Training on augumented user 47493 28/50 current_auc = 0.64640522875817
User 47493 AUC after training: 0.6457516339869281
User 47493 does not improve AUC. Reverting changes.
Training on augumented user 130345 29/50 current_auc = 0.64640522875817
User 130345 AUC after training: 0.6470588235294118
User 130345 improves AUC. Keeping the model.
Training on augumented user 127123 30/50 current_auc = 0.6470588235294118
User 127123 AUC after training: 0.6450980392156862
User 127123 does not improve AUC. Reverting changes.
Training on augumented user 121897 31/50 current_auc = 0.6470588235294118
User 121897 AUC after training: 0.6450980392156862
User 121897 does not improve AUC. Reverting changes.
Training on augumented user 33084 32/50 current_auc = 0.6470588235294118
User 33084 AUC after training: 0.6450980392156862
User 33084 does not improve AUC. Reverting changes.
Training on augumented user 58791 33/50 current_auc = 0.6470588235294118
User 58791 AUC after training: 0.6444444444444444
User 58791 does not improve AUC. Reverting changes.
Training on augumented user 34606 34/50 current_auc = 0.6470588235294118
User 34606 AUC after training: 0.645751633986928
User 34606 does not improve AUC. Reverting changes.
Training on augumented user 68499 35/50 current_auc = 0.6470588235294118
User 68499 AUC after training: 0.6450980392156862
User 68499 does not improve AUC. Reverting changes.
Training on augumented user 70712 36/50 current_auc = 0.6470588235294118
User 70712 AUC after training: 0.6437908496732025
User 70712 does not improve AUC. Reverting changes.
Training on augumented user 52802 37/50 current_auc = 0.6470588235294118
User 52802 AUC after training: 0.6431372549019607
User 52802 does not improve AUC. Reverting changes.
Training on augumented user 114142 38/50 current_auc = 0.6470588235294118
User 114142 AUC after training: 0.6457516339869281
User 114142 does not improve AUC. Reverting changes.
Training on augumented user 10919 39/50 current_auc = 0.6470588235294118
User 10919 AUC after training: 0.6450980392156862
User 10919 does not improve AUC. Reverting changes.
Training on augumented user 39205 40/50 current_auc = 0.6470588235294118
User 39205 AUC after training: 0.645751633986928
User 39205 does not improve AUC. Reverting changes.
Training on augumented user 77624 41/50 current_auc = 0.6470588235294118
User 77624 AUC after training: 0.6464052287581699
User 77624 does not improve AUC. Reverting changes.
Training on augumented user 113221 42/50 current_auc = 0.6470588235294118
User 113221 AUC after training: 0.6450980392156862
User 113221 does not improve AUC. Reverting changes.
Training on augumented user 31890 43/50 current_auc = 0.6470588235294118
User 31890 AUC after training: 0.6431372549019607
User 31890 does not improve AUC. Reverting changes.
Training on augumented user 40267 44/50 current_auc = 0.6470588235294118
User 40267 AUC after training: 0.6464052287581699
User 40267 does not improve AUC. Reverting changes.
Training on augumented user 90994 45/50 current_auc = 0.6470588235294118
User 90994 AUC after training: 0.6450980392156862
User 90994 does not improve AUC. Reverting changes.
Training on augumented user 27287 46/50 current_auc = 0.6470588235294118
User 27287 AUC after training: 0.64640522875817
User 27287 does not improve AUC. Reverting changes.
Training on augumented user 50393 47/50 current_auc = 0.6470588235294118
User 50393 AUC after training: 0.645751633986928
User 50393 does not improve AUC. Reverting changes.
Training on augumented user 38844 48/50 current_auc = 0.6470588235294118
User 38844 AUC after training: 0.6431372549019608
User 38844 does not improve AUC. Reverting changes.
Training on augumented user 31252 49/50 current_auc = 0.6470588235294118
User 31252 AUC after training: 0.6450980392156862
User 31252 does not improve AUC. Reverting changes.
[2024-12-02 19:51:52.049596] start test user 75361 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:52.464761] start test user 75361 246/568 recall augumented users by random, augumented_users = [73525, 9734, 131516, 37401, 78057, 107029, 119703, 7385, 94772, 59343, 67714, 65824, 115713, 65563, 124795, 31694, 39826, 104417, 98388, 136633, 107018, 107980, 114987, 136701, 31951, 129448, 74478, 64930, 63531, 57597, 17091, 58548, 44639, 47948, 22846, 97515, 115917, 77102, 37394, 49908, 89529, 46096, 57786, 87902, 74053, 79337, 136526, 138067, 72539, 116404]
[2024-12-02 19:51:52.479592] user = 75361 Cloud 246/568
[2024-12-02 19:51:52.500127] user = 75361 Local 246/568
[2024-12-02 19:51:52.542934] user = 75361 Local+ 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:55.079762] user = 75361 MPDA- 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.685375067458176
Training on augumented user 73525 0/50 current_auc = 0.685375067458176
User 73525 AUC after training: 0.6856988667026443
User 73525 improves AUC. Keeping the model.
Training on augumented user 9734 1/50 current_auc = 0.6856988667026443
User 9734 AUC after training: 0.6863464651915813
User 9734 improves AUC. Keeping the model.
Training on augumented user 131516 2/50 current_auc = 0.6863464651915813
User 131516 AUC after training: 0.686994063680518
User 131516 improves AUC. Keeping the model.
Training on augumented user 37401 3/50 current_auc = 0.686994063680518
User 37401 AUC after training: 0.6878575283324339
User 37401 improves AUC. Keeping the model.
Training on augumented user 78057 4/50 current_auc = 0.6878575283324339
User 78057 AUC after training: 0.6891527253103075
User 78057 improves AUC. Keeping the model.
Training on augumented user 107029 5/50 current_auc = 0.6891527253103075
User 107029 AUC after training: 0.6893685914732866
User 107029 improves AUC. Keeping the model.
Training on augumented user 119703 6/50 current_auc = 0.6893685914732866
User 119703 AUC after training: 0.6901780895844576
User 119703 improves AUC. Keeping the model.
Training on augumented user 7385 7/50 current_auc = 0.6901780895844576
User 7385 AUC after training: 0.6900701565029681
User 7385 does not improve AUC. Reverting changes.
Training on augumented user 94772 8/50 current_auc = 0.6901780895844576
User 94772 AUC after training: 0.690933621154884
User 94772 improves AUC. Keeping the model.
Training on augumented user 59343 9/50 current_auc = 0.690933621154884
User 59343 AUC after training: 0.690501888828926
User 59343 does not improve AUC. Reverting changes.
Training on augumented user 67714 10/50 current_auc = 0.690933621154884
User 67714 AUC after training: 0.6896923907177549
User 67714 does not improve AUC. Reverting changes.
Training on augumented user 65824 11/50 current_auc = 0.690933621154884
User 65824 AUC after training: 0.6883971937398812
User 65824 does not improve AUC. Reverting changes.
Training on augumented user 115713 12/50 current_auc = 0.690933621154884
User 115713 AUC after training: 0.6903939557474366
User 115713 does not improve AUC. Reverting changes.
Training on augumented user 65563 13/50 current_auc = 0.690933621154884
User 65563 AUC after training: 0.690501888828926
User 65563 does not improve AUC. Reverting changes.
Training on augumented user 124795 14/50 current_auc = 0.690933621154884
User 124795 AUC after training: 0.6909336211548839
User 124795 does not improve AUC. Reverting changes.
Training on augumented user 31694 15/50 current_auc = 0.690933621154884
User 31694 AUC after training: 0.6901241230437128
User 31694 does not improve AUC. Reverting changes.
Training on augumented user 39826 16/50 current_auc = 0.690933621154884
User 39826 AUC after training: 0.6912574203993523
User 39826 improves AUC. Keeping the model.
Training on augumented user 104417 17/50 current_auc = 0.6912574203993523
User 104417 AUC after training: 0.6912034538586077
User 104417 does not improve AUC. Reverting changes.
Training on augumented user 98388 18/50 current_auc = 0.6912574203993523
User 98388 AUC after training: 0.6920129519697787
User 98388 improves AUC. Keeping the model.
Training on augumented user 136633 19/50 current_auc = 0.6920129519697787
User 136633 AUC after training: 0.6921208850512681
User 136633 improves AUC. Keeping the model.
Training on augumented user 107018 20/50 current_auc = 0.6921208850512681
User 107018 AUC after training: 0.6915812196438208
User 107018 does not improve AUC. Reverting changes.
Training on augumented user 107980 21/50 current_auc = 0.6921208850512681
User 107980 AUC after training: 0.6939557474365892
User 107980 improves AUC. Keeping the model.
Training on augumented user 114987 22/50 current_auc = 0.6939557474365892
User 114987 AUC after training: 0.6941176470588234
User 114987 improves AUC. Keeping the model.
Training on augumented user 136701 23/50 current_auc = 0.6941176470588234
User 136701 AUC after training: 0.692768483540205
User 136701 does not improve AUC. Reverting changes.
Training on augumented user 31951 24/50 current_auc = 0.6941176470588234
User 31951 AUC after training: 0.6942795466810576
User 31951 improves AUC. Keeping the model.
Training on augumented user 129448 25/50 current_auc = 0.6942795466810576
User 129448 AUC after training: 0.6928224500809497
User 129448 does not improve AUC. Reverting changes.
Training on augumented user 74478 26/50 current_auc = 0.6942795466810576
User 74478 AUC after training: 0.6951430113329735
User 74478 improves AUC. Keeping the model.
Training on augumented user 64930 27/50 current_auc = 0.6951430113329735
User 64930 AUC after training: 0.6949271451699947
User 64930 does not improve AUC. Reverting changes.
Training on augumented user 63531 28/50 current_auc = 0.6951430113329735
User 63531 AUC after training: 0.6951969778737183
User 63531 improves AUC. Keeping the model.
Training on augumented user 57597 29/50 current_auc = 0.6951969778737183
User 57597 AUC after training: 0.6951969778737183
User 57597 does not improve AUC. Reverting changes.
Training on augumented user 17091 30/50 current_auc = 0.6951969778737183
User 17091 AUC after training: 0.6947112790070156
User 17091 does not improve AUC. Reverting changes.
Training on augumented user 58548 31/50 current_auc = 0.6951969778737183
User 58548 AUC after training: 0.6953049109552077
User 58548 improves AUC. Keeping the model.
Training on augumented user 44639 32/50 current_auc = 0.6953049109552077
User 44639 AUC after training: 0.6949271451699944
User 44639 does not improve AUC. Reverting changes.
Training on augumented user 47948 33/50 current_auc = 0.6953049109552077
User 47948 AUC after training: 0.6954128440366971
User 47948 improves AUC. Keeping the model.
Training on augumented user 22846 34/50 current_auc = 0.6954128440366971
User 22846 AUC after training: 0.6951430113329734
User 22846 does not improve AUC. Reverting changes.
Training on augumented user 97515 35/50 current_auc = 0.6954128440366971
User 97515 AUC after training: 0.6951430113329735
User 97515 does not improve AUC. Reverting changes.
Training on augumented user 115917 36/50 current_auc = 0.6954128440366971
User 115917 AUC after training: 0.6944954128440366
User 115917 does not improve AUC. Reverting changes.
Training on augumented user 77102 37/50 current_auc = 0.6954128440366971
User 77102 AUC after training: 0.6946033459255261
User 77102 does not improve AUC. Reverting changes.
Training on augumented user 37394 38/50 current_auc = 0.6954128440366971
User 37394 AUC after training: 0.6954128440366971
User 37394 does not improve AUC. Reverting changes.
Training on augumented user 49908 39/50 current_auc = 0.6954128440366971
User 49908 AUC after training: 0.6957366432811656
User 49908 improves AUC. Keeping the model.
Training on augumented user 89529 40/50 current_auc = 0.6957366432811656
User 89529 AUC after training: 0.6955207771181866
User 89529 does not improve AUC. Reverting changes.
Training on augumented user 46096 41/50 current_auc = 0.6957366432811656
User 46096 AUC after training: 0.6953049109552076
User 46096 does not improve AUC. Reverting changes.
Training on augumented user 57786 42/50 current_auc = 0.6957366432811656
User 57786 AUC after training: 0.6949811117107393
User 57786 does not improve AUC. Reverting changes.
Training on augumented user 87902 43/50 current_auc = 0.6957366432811656
User 87902 AUC after training: 0.6954128440366972
User 87902 does not improve AUC. Reverting changes.
Training on augumented user 74053 44/50 current_auc = 0.6957366432811656
User 74053 AUC after training: 0.6950890447922288
User 74053 does not improve AUC. Reverting changes.
Training on augumented user 79337 45/50 current_auc = 0.6957366432811656
User 79337 AUC after training: 0.6961683756071236
User 79337 improves AUC. Keeping the model.
Training on augumented user 136526 46/50 current_auc = 0.6961683756071236
User 136526 AUC after training: 0.6950890447922287
User 136526 does not improve AUC. Reverting changes.
Training on augumented user 138067 47/50 current_auc = 0.6961683756071236
User 138067 AUC after training: 0.695682676740421
User 138067 does not improve AUC. Reverting changes.
Training on augumented user 72539 48/50 current_auc = 0.6961683756071236
User 72539 AUC after training: 0.6958445763626552
User 72539 does not improve AUC. Reverting changes.
Training on augumented user 116404 49/50 current_auc = 0.6961683756071236
User 116404 AUC after training: 0.6953588774959525
User 116404 does not improve AUC. Reverting changes.
[2024-12-02 19:52:25.831277] start test user 75362 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:26.282740] start test user 75362 247/568 recall augumented users by random, augumented_users = [31824, 9012, 43787, 29737, 105632, 59661, 110481, 94814, 107443, 113852, 49130, 55658, 12285, 61769, 136465, 34170, 107593, 58055, 91086, 31863, 123900, 128962, 111944, 33662, 37789, 17447, 2354, 21713, 76577, 48260, 109277, 93057, 112841, 102380, 86346, 79621, 83994, 68765, 78189, 44170, 103071, 15913, 26234, 104209, 67067, 28351, 75986, 115658, 18859, 78080]
[2024-12-02 19:52:26.297610] user = 75362 Cloud 247/568
[2024-12-02 19:52:26.318776] user = 75362 Local 247/568
[2024-12-02 19:52:26.346302] user = 75362 Local+ 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:28.786311] user = 75362 MPDA- 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5971139971139972
Training on augumented user 31824 0/50 current_auc = 0.5971139971139972
User 31824 AUC after training: 0.5955266955266956
User 31824 does not improve AUC. Reverting changes.
Training on augumented user 9012 1/50 current_auc = 0.5971139971139972
User 9012 AUC after training: 0.596969696969697
User 9012 does not improve AUC. Reverting changes.
Training on augumented user 43787 2/50 current_auc = 0.5971139971139972
User 43787 AUC after training: 0.5963924963924965
User 43787 does not improve AUC. Reverting changes.
Training on augumented user 29737 3/50 current_auc = 0.5971139971139972
User 29737 AUC after training: 0.5962481962481962
User 29737 does not improve AUC. Reverting changes.
Training on augumented user 105632 4/50 current_auc = 0.5971139971139972
User 105632 AUC after training: 0.5956709956709958
User 105632 does not improve AUC. Reverting changes.
Training on augumented user 59661 5/50 current_auc = 0.5971139971139972
User 59661 AUC after training: 0.5961038961038961
User 59661 does not improve AUC. Reverting changes.
Training on augumented user 110481 6/50 current_auc = 0.5971139971139972
User 110481 AUC after training: 0.5961038961038961
User 110481 does not improve AUC. Reverting changes.
Training on augumented user 94814 7/50 current_auc = 0.5971139971139972
User 94814 AUC after training: 0.5968253968253967
User 94814 does not improve AUC. Reverting changes.
Training on augumented user 107443 8/50 current_auc = 0.5971139971139972
User 107443 AUC after training: 0.5963924963924965
User 107443 does not improve AUC. Reverting changes.
Training on augumented user 113852 9/50 current_auc = 0.5971139971139972
User 113852 AUC after training: 0.5965367965367966
User 113852 does not improve AUC. Reverting changes.
Training on augumented user 49130 10/50 current_auc = 0.5971139971139972
User 49130 AUC after training: 0.5975468975468975
User 49130 improves AUC. Keeping the model.
Training on augumented user 55658 11/50 current_auc = 0.5975468975468975
User 55658 AUC after training: 0.5961038961038961
User 55658 does not improve AUC. Reverting changes.
Training on augumented user 12285 12/50 current_auc = 0.5975468975468975
User 12285 AUC after training: 0.5966810966810967
User 12285 does not improve AUC. Reverting changes.
Training on augumented user 61769 13/50 current_auc = 0.5975468975468975
User 61769 AUC after training: 0.5972582972582974
User 61769 does not improve AUC. Reverting changes.
Training on augumented user 136465 14/50 current_auc = 0.5975468975468975
User 136465 AUC after training: 0.5966810966810967
User 136465 does not improve AUC. Reverting changes.
Training on augumented user 34170 15/50 current_auc = 0.5975468975468975
User 34170 AUC after training: 0.5966810966810967
User 34170 does not improve AUC. Reverting changes.
Training on augumented user 107593 16/50 current_auc = 0.5975468975468975
User 107593 AUC after training: 0.5972582972582974
User 107593 does not improve AUC. Reverting changes.
Training on augumented user 58055 17/50 current_auc = 0.5975468975468975
User 58055 AUC after training: 0.5971139971139972
User 58055 does not improve AUC. Reverting changes.
Training on augumented user 91086 18/50 current_auc = 0.5975468975468975
User 91086 AUC after training: 0.5963924963924965
User 91086 does not improve AUC. Reverting changes.
Training on augumented user 31863 19/50 current_auc = 0.5975468975468975
User 31863 AUC after training: 0.5975468975468975
User 31863 does not improve AUC. Reverting changes.
Training on augumented user 123900 20/50 current_auc = 0.5975468975468975
User 123900 AUC after training: 0.5965367965367967
User 123900 does not improve AUC. Reverting changes.
Training on augumented user 128962 21/50 current_auc = 0.5975468975468975
User 128962 AUC after training: 0.5965367965367966
User 128962 does not improve AUC. Reverting changes.
Training on augumented user 111944 22/50 current_auc = 0.5975468975468975
User 111944 AUC after training: 0.5966810966810967
User 111944 does not improve AUC. Reverting changes.
Training on augumented user 33662 23/50 current_auc = 0.5975468975468975
User 33662 AUC after training: 0.5971139971139972
User 33662 does not improve AUC. Reverting changes.
Training on augumented user 37789 24/50 current_auc = 0.5975468975468975
User 37789 AUC after training: 0.5965367965367966
User 37789 does not improve AUC. Reverting changes.
Training on augumented user 17447 25/50 current_auc = 0.5975468975468975
User 17447 AUC after training: 0.596969696969697
User 17447 does not improve AUC. Reverting changes.
Training on augumented user 2354 26/50 current_auc = 0.5975468975468975
User 2354 AUC after training: 0.5963924963924964
User 2354 does not improve AUC. Reverting changes.
Training on augumented user 21713 27/50 current_auc = 0.5975468975468975
User 21713 AUC after training: 0.5966810966810967
User 21713 does not improve AUC. Reverting changes.
Training on augumented user 76577 28/50 current_auc = 0.5975468975468975
User 76577 AUC after training: 0.596969696969697
User 76577 does not improve AUC. Reverting changes.
Training on augumented user 48260 29/50 current_auc = 0.5975468975468975
User 48260 AUC after training: 0.5966810966810968
User 48260 does not improve AUC. Reverting changes.
Training on augumented user 109277 30/50 current_auc = 0.5975468975468975
User 109277 AUC after training: 0.5971139971139972
User 109277 does not improve AUC. Reverting changes.
Training on augumented user 93057 31/50 current_auc = 0.5975468975468975
User 93057 AUC after training: 0.5956709956709957
User 93057 does not improve AUC. Reverting changes.
Training on augumented user 112841 32/50 current_auc = 0.5975468975468975
User 112841 AUC after training: 0.5968253968253968
User 112841 does not improve AUC. Reverting changes.
Training on augumented user 102380 33/50 current_auc = 0.5975468975468975
User 102380 AUC after training: 0.5968253968253968
User 102380 does not improve AUC. Reverting changes.
Training on augumented user 86346 34/50 current_auc = 0.5975468975468975
User 86346 AUC after training: 0.5965367965367966
User 86346 does not improve AUC. Reverting changes.
Training on augumented user 79621 35/50 current_auc = 0.5975468975468975
User 79621 AUC after training: 0.5966810966810968
User 79621 does not improve AUC. Reverting changes.
Training on augumented user 83994 36/50 current_auc = 0.5975468975468975
User 83994 AUC after training: 0.5955266955266956
User 83994 does not improve AUC. Reverting changes.
Training on augumented user 68765 37/50 current_auc = 0.5975468975468975
User 68765 AUC after training: 0.5962481962481962
User 68765 does not improve AUC. Reverting changes.
Training on augumented user 78189 38/50 current_auc = 0.5975468975468975
User 78189 AUC after training: 0.5958152958152958
User 78189 does not improve AUC. Reverting changes.
Training on augumented user 44170 39/50 current_auc = 0.5975468975468975
User 44170 AUC after training: 0.5956709956709957
User 44170 does not improve AUC. Reverting changes.
Training on augumented user 103071 40/50 current_auc = 0.5975468975468975
User 103071 AUC after training: 0.5971139971139972
User 103071 does not improve AUC. Reverting changes.
Training on augumented user 15913 41/50 current_auc = 0.5975468975468975
User 15913 AUC after training: 0.5965367965367966
User 15913 does not improve AUC. Reverting changes.
Training on augumented user 26234 42/50 current_auc = 0.5975468975468975
User 26234 AUC after training: 0.5972582972582973
User 26234 does not improve AUC. Reverting changes.
Training on augumented user 104209 43/50 current_auc = 0.5975468975468975
User 104209 AUC after training: 0.5972582972582973
User 104209 does not improve AUC. Reverting changes.
Training on augumented user 67067 44/50 current_auc = 0.5975468975468975
User 67067 AUC after training: 0.5975468975468976
User 67067 improves AUC. Keeping the model.
Training on augumented user 28351 45/50 current_auc = 0.5975468975468976
User 28351 AUC after training: 0.5965367965367966
User 28351 does not improve AUC. Reverting changes.
Training on augumented user 75986 46/50 current_auc = 0.5975468975468976
User 75986 AUC after training: 0.5974025974025975
User 75986 does not improve AUC. Reverting changes.
Training on augumented user 115658 47/50 current_auc = 0.5975468975468976
User 115658 AUC after training: 0.5971139971139972
User 115658 does not improve AUC. Reverting changes.
Training on augumented user 18859 48/50 current_auc = 0.5975468975468976
User 18859 AUC after training: 0.5958152958152959
User 18859 does not improve AUC. Reverting changes.
Training on augumented user 78080 49/50 current_auc = 0.5975468975468976
User 78080 AUC after training: 0.5968253968253968
User 78080 does not improve AUC. Reverting changes.
[2024-12-02 19:52:54.523406] start test user 75372 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:54.970243] start test user 75372 248/568 recall augumented users by random, augumented_users = [98834, 23062, 114115, 74884, 126636, 51274, 105875, 120565, 112943, 113499, 106696, 29360, 41996, 67855, 94529, 122815, 64230, 88928, 24456, 25040, 71398, 43189, 72167, 103286, 43334, 124808, 36928, 102817, 90012, 119622, 105306, 80621, 69838, 86006, 110086, 101795, 37098, 106293, 5948, 3637, 38433, 41672, 22975, 2446, 113009, 91487, 2574, 20771, 41257, 36188]
[2024-12-02 19:52:54.984643] user = 75372 Cloud 248/568
[2024-12-02 19:52:55.003124] user = 75372 Local 248/568
[2024-12-02 19:52:55.057066] user = 75372 Local+ 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:57.548166] user = 75372 MPDA- 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6861016949152542
Training on augumented user 98834 0/50 current_auc = 0.6861016949152542
User 98834 AUC after training: 0.6867796610169492
User 98834 improves AUC. Keeping the model.
Training on augumented user 23062 1/50 current_auc = 0.6867796610169492
User 23062 AUC after training: 0.6852542372881356
User 23062 does not improve AUC. Reverting changes.
Training on augumented user 114115 2/50 current_auc = 0.6867796610169492
User 114115 AUC after training: 0.6840677966101695
User 114115 does not improve AUC. Reverting changes.
Training on augumented user 74884 3/50 current_auc = 0.6867796610169492
User 74884 AUC after training: 0.6838983050847457
User 74884 does not improve AUC. Reverting changes.
Training on augumented user 126636 4/50 current_auc = 0.6867796610169492
User 126636 AUC after training: 0.6849152542372882
User 126636 does not improve AUC. Reverting changes.
Training on augumented user 51274 5/50 current_auc = 0.6867796610169492
User 51274 AUC after training: 0.6852542372881356
User 51274 does not improve AUC. Reverting changes.
Training on augumented user 105875 6/50 current_auc = 0.6867796610169492
User 105875 AUC after training: 0.6849152542372882
User 105875 does not improve AUC. Reverting changes.
Training on augumented user 120565 7/50 current_auc = 0.6867796610169492
User 120565 AUC after training: 0.6866101694915253
User 120565 does not improve AUC. Reverting changes.
Training on augumented user 112943 8/50 current_auc = 0.6867796610169492
User 112943 AUC after training: 0.6849152542372882
User 112943 does not improve AUC. Reverting changes.
Training on augumented user 113499 9/50 current_auc = 0.6867796610169492
User 113499 AUC after training: 0.6861016949152542
User 113499 does not improve AUC. Reverting changes.
Training on augumented user 106696 10/50 current_auc = 0.6867796610169492
User 106696 AUC after training: 0.6861016949152542
User 106696 does not improve AUC. Reverting changes.
Training on augumented user 29360 11/50 current_auc = 0.6867796610169492
User 29360 AUC after training: 0.6861016949152542
User 29360 does not improve AUC. Reverting changes.
Training on augumented user 41996 12/50 current_auc = 0.6867796610169492
User 41996 AUC after training: 0.6820338983050848
User 41996 does not improve AUC. Reverting changes.
Training on augumented user 67855 13/50 current_auc = 0.6867796610169492
User 67855 AUC after training: 0.6857627118644067
User 67855 does not improve AUC. Reverting changes.
Training on augumented user 94529 14/50 current_auc = 0.6867796610169492
User 94529 AUC after training: 0.6864406779661018
User 94529 does not improve AUC. Reverting changes.
Training on augumented user 122815 15/50 current_auc = 0.6867796610169492
User 122815 AUC after training: 0.6849152542372882
User 122815 does not improve AUC. Reverting changes.
Training on augumented user 64230 16/50 current_auc = 0.6867796610169492
User 64230 AUC after training: 0.6844067796610169
User 64230 does not improve AUC. Reverting changes.
Training on augumented user 88928 17/50 current_auc = 0.6867796610169492
User 88928 AUC after training: 0.6854237288135594
User 88928 does not improve AUC. Reverting changes.
Training on augumented user 24456 18/50 current_auc = 0.6867796610169492
User 24456 AUC after training: 0.6857627118644068
User 24456 does not improve AUC. Reverting changes.
Training on augumented user 25040 19/50 current_auc = 0.6867796610169492
User 25040 AUC after training: 0.6859322033898305
User 25040 does not improve AUC. Reverting changes.
Training on augumented user 71398 20/50 current_auc = 0.6867796610169492
User 71398 AUC after training: 0.6866101694915255
User 71398 does not improve AUC. Reverting changes.
Training on augumented user 43189 21/50 current_auc = 0.6867796610169492
User 43189 AUC after training: 0.6852542372881355
User 43189 does not improve AUC. Reverting changes.
Training on augumented user 72167 22/50 current_auc = 0.6867796610169492
User 72167 AUC after training: 0.6854237288135592
User 72167 does not improve AUC. Reverting changes.
Training on augumented user 103286 23/50 current_auc = 0.6867796610169492
User 103286 AUC after training: 0.6859322033898305
User 103286 does not improve AUC. Reverting changes.
Training on augumented user 43334 24/50 current_auc = 0.6867796610169492
User 43334 AUC after training: 0.6861016949152543
User 43334 does not improve AUC. Reverting changes.
Training on augumented user 124808 25/50 current_auc = 0.6867796610169492
User 124808 AUC after training: 0.6854237288135593
User 124808 does not improve AUC. Reverting changes.
Training on augumented user 36928 26/50 current_auc = 0.6867796610169492
User 36928 AUC after training: 0.6852542372881355
User 36928 does not improve AUC. Reverting changes.
Training on augumented user 102817 27/50 current_auc = 0.6867796610169492
User 102817 AUC after training: 0.6844067796610169
User 102817 does not improve AUC. Reverting changes.
Training on augumented user 90012 28/50 current_auc = 0.6867796610169492
User 90012 AUC after training: 0.6850847457627118
User 90012 does not improve AUC. Reverting changes.
Training on augumented user 119622 29/50 current_auc = 0.6867796610169492
User 119622 AUC after training: 0.684915254237288
User 119622 does not improve AUC. Reverting changes.
Training on augumented user 105306 30/50 current_auc = 0.6867796610169492
User 105306 AUC after training: 0.6842372881355933
User 105306 does not improve AUC. Reverting changes.
Training on augumented user 80621 31/50 current_auc = 0.6867796610169492
User 80621 AUC after training: 0.6871186440677965
User 80621 improves AUC. Keeping the model.
Training on augumented user 69838 32/50 current_auc = 0.6871186440677965
User 69838 AUC after training: 0.6852542372881355
User 69838 does not improve AUC. Reverting changes.
Training on augumented user 86006 33/50 current_auc = 0.6871186440677965
User 86006 AUC after training: 0.6872881355932202
User 86006 improves AUC. Keeping the model.
Training on augumented user 110086 34/50 current_auc = 0.6872881355932202
User 110086 AUC after training: 0.6876271186440678
User 110086 improves AUC. Keeping the model.
Training on augumented user 101795 35/50 current_auc = 0.6876271186440678
User 101795 AUC after training: 0.6867796610169491
User 101795 does not improve AUC. Reverting changes.
Training on augumented user 37098 36/50 current_auc = 0.6876271186440678
User 37098 AUC after training: 0.6857627118644067
User 37098 does not improve AUC. Reverting changes.
Training on augumented user 106293 37/50 current_auc = 0.6876271186440678
User 106293 AUC after training: 0.6871186440677967
User 106293 does not improve AUC. Reverting changes.
Training on augumented user 5948 38/50 current_auc = 0.6876271186440678
User 5948 AUC after training: 0.6879661016949151
User 5948 improves AUC. Keeping the model.
Training on augumented user 3637 39/50 current_auc = 0.6879661016949151
User 3637 AUC after training: 0.6864406779661018
User 3637 does not improve AUC. Reverting changes.
Training on augumented user 38433 40/50 current_auc = 0.6879661016949151
User 38433 AUC after training: 0.688135593220339
User 38433 improves AUC. Keeping the model.
Training on augumented user 41672 41/50 current_auc = 0.688135593220339
User 41672 AUC after training: 0.6872881355932203
User 41672 does not improve AUC. Reverting changes.
Training on augumented user 22975 42/50 current_auc = 0.688135593220339
User 22975 AUC after training: 0.6891525423728814
User 22975 improves AUC. Keeping the model.
Training on augumented user 2446 43/50 current_auc = 0.6891525423728814
User 2446 AUC after training: 0.6883050847457627
User 2446 does not improve AUC. Reverting changes.
Training on augumented user 113009 44/50 current_auc = 0.6891525423728814
User 113009 AUC after training: 0.6854237288135593
User 113009 does not improve AUC. Reverting changes.
Training on augumented user 91487 45/50 current_auc = 0.6891525423728814
User 91487 AUC after training: 0.6905084745762712
User 91487 improves AUC. Keeping the model.
Training on augumented user 2574 46/50 current_auc = 0.6905084745762712
User 2574 AUC after training: 0.6896610169491525
User 2574 does not improve AUC. Reverting changes.
Training on augumented user 20771 47/50 current_auc = 0.6905084745762712
User 20771 AUC after training: 0.6901694915254236
User 20771 does not improve AUC. Reverting changes.
Training on augumented user 41257 48/50 current_auc = 0.6905084745762712
User 41257 AUC after training: 0.6900000000000001
User 41257 does not improve AUC. Reverting changes.
Training on augumented user 36188 49/50 current_auc = 0.6905084745762712
User 36188 AUC after training: 0.69
User 36188 does not improve AUC. Reverting changes.
[2024-12-02 19:53:23.893050] start test user 75397 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:24.453340] start test user 75397 249/568 recall augumented users by random, augumented_users = [93171, 685, 89556, 11805, 36611, 122, 70175, 66060, 64969, 32986, 96390, 24220, 60611, 83223, 134645, 84579, 72610, 130308, 74299, 120334, 9394, 122318, 26467, 110520, 104333, 12532, 38399, 84399, 136102, 100118, 94350, 76348, 72261, 99191, 19071, 108065, 101573, 138145, 45763, 21906, 52065, 44442, 102990, 56332, 78626, 135114, 2613, 137815, 103913, 131679]
[2024-12-02 19:53:24.468704] user = 75397 Cloud 249/568
[2024-12-02 19:53:24.479336] user = 75397 Local 249/568
[2024-12-02 19:53:24.556539] user = 75397 Local+ 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:26.895525] user = 75397 MPDA- 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6974921630094044
Training on augumented user 93171 0/50 current_auc = 0.6974921630094044
User 93171 AUC after training: 0.6974921630094044
User 93171 does not improve AUC. Reverting changes.
Training on augumented user 685 1/50 current_auc = 0.6974921630094044
User 685 AUC after training: 0.6990595611285266
User 685 improves AUC. Keeping the model.
Training on augumented user 89556 2/50 current_auc = 0.6990595611285266
User 89556 AUC after training: 0.6990595611285266
User 89556 does not improve AUC. Reverting changes.
Training on augumented user 11805 3/50 current_auc = 0.6990595611285266
User 11805 AUC after training: 0.6974921630094044
User 11805 does not improve AUC. Reverting changes.
Training on augumented user 36611 4/50 current_auc = 0.6990595611285266
User 36611 AUC after training: 0.6990595611285266
User 36611 does not improve AUC. Reverting changes.
Training on augumented user 122 5/50 current_auc = 0.6990595611285266
User 122 AUC after training: 0.6974921630094044
User 122 does not improve AUC. Reverting changes.
Training on augumented user 70175 6/50 current_auc = 0.6990595611285266
User 70175 AUC after training: 0.6974921630094044
User 70175 does not improve AUC. Reverting changes.
Training on augumented user 66060 7/50 current_auc = 0.6990595611285266
User 66060 AUC after training: 0.6990595611285266
User 66060 does not improve AUC. Reverting changes.
Training on augumented user 64969 8/50 current_auc = 0.6990595611285266
User 64969 AUC after training: 0.6990595611285266
User 64969 does not improve AUC. Reverting changes.
Training on augumented user 32986 9/50 current_auc = 0.6990595611285266
User 32986 AUC after training: 0.6974921630094044
User 32986 does not improve AUC. Reverting changes.
Training on augumented user 96390 10/50 current_auc = 0.6990595611285266
User 96390 AUC after training: 0.6990595611285266
User 96390 does not improve AUC. Reverting changes.
Training on augumented user 24220 11/50 current_auc = 0.6990595611285266
User 24220 AUC after training: 0.6990595611285266
User 24220 does not improve AUC. Reverting changes.
Training on augumented user 60611 12/50 current_auc = 0.6990595611285266
User 60611 AUC after training: 0.6974921630094044
User 60611 does not improve AUC. Reverting changes.
Training on augumented user 83223 13/50 current_auc = 0.6990595611285266
User 83223 AUC after training: 0.6974921630094044
User 83223 does not improve AUC. Reverting changes.
Training on augumented user 134645 14/50 current_auc = 0.6990595611285266
User 134645 AUC after training: 0.6974921630094044
User 134645 does not improve AUC. Reverting changes.
Training on augumented user 84579 15/50 current_auc = 0.6990595611285266
User 84579 AUC after training: 0.6959247648902821
User 84579 does not improve AUC. Reverting changes.
Training on augumented user 72610 16/50 current_auc = 0.6990595611285266
User 72610 AUC after training: 0.6974921630094044
User 72610 does not improve AUC. Reverting changes.
Training on augumented user 130308 17/50 current_auc = 0.6990595611285266
User 130308 AUC after training: 0.6974921630094044
User 130308 does not improve AUC. Reverting changes.
Training on augumented user 74299 18/50 current_auc = 0.6990595611285266
User 74299 AUC after training: 0.6974921630094044
User 74299 does not improve AUC. Reverting changes.
Training on augumented user 120334 19/50 current_auc = 0.6990595611285266
User 120334 AUC after training: 0.6974921630094044
User 120334 does not improve AUC. Reverting changes.
Training on augumented user 9394 20/50 current_auc = 0.6990595611285266
User 9394 AUC after training: 0.6990595611285266
User 9394 does not improve AUC. Reverting changes.
Training on augumented user 122318 21/50 current_auc = 0.6990595611285266
User 122318 AUC after training: 0.6959247648902822
User 122318 does not improve AUC. Reverting changes.
Training on augumented user 26467 22/50 current_auc = 0.6990595611285266
User 26467 AUC after training: 0.6974921630094044
User 26467 does not improve AUC. Reverting changes.
Training on augumented user 110520 23/50 current_auc = 0.6990595611285266
User 110520 AUC after training: 0.6974921630094044
User 110520 does not improve AUC. Reverting changes.
Training on augumented user 104333 24/50 current_auc = 0.6990595611285266
User 104333 AUC after training: 0.6959247648902821
User 104333 does not improve AUC. Reverting changes.
Training on augumented user 12532 25/50 current_auc = 0.6990595611285266
User 12532 AUC after training: 0.6990595611285266
User 12532 does not improve AUC. Reverting changes.
Training on augumented user 38399 26/50 current_auc = 0.6990595611285266
User 38399 AUC after training: 0.6990595611285266
User 38399 does not improve AUC. Reverting changes.
Training on augumented user 84399 27/50 current_auc = 0.6990595611285266
User 84399 AUC after training: 0.6974921630094044
User 84399 does not improve AUC. Reverting changes.
Training on augumented user 136102 28/50 current_auc = 0.6990595611285266
User 136102 AUC after training: 0.6959247648902821
User 136102 does not improve AUC. Reverting changes.
Training on augumented user 100118 29/50 current_auc = 0.6990595611285266
User 100118 AUC after training: 0.6990595611285266
User 100118 does not improve AUC. Reverting changes.
Training on augumented user 94350 30/50 current_auc = 0.6990595611285266
User 94350 AUC after training: 0.6990595611285266
User 94350 does not improve AUC. Reverting changes.
Training on augumented user 76348 31/50 current_auc = 0.6990595611285266
User 76348 AUC after training: 0.6990595611285266
User 76348 does not improve AUC. Reverting changes.
Training on augumented user 72261 32/50 current_auc = 0.6990595611285266
User 72261 AUC after training: 0.6974921630094044
User 72261 does not improve AUC. Reverting changes.
Training on augumented user 99191 33/50 current_auc = 0.6990595611285266
User 99191 AUC after training: 0.6974921630094044
User 99191 does not improve AUC. Reverting changes.
Training on augumented user 19071 34/50 current_auc = 0.6990595611285266
User 19071 AUC after training: 0.6990595611285266
User 19071 does not improve AUC. Reverting changes.
Training on augumented user 108065 35/50 current_auc = 0.6990595611285266
User 108065 AUC after training: 0.6974921630094044
User 108065 does not improve AUC. Reverting changes.
Training on augumented user 101573 36/50 current_auc = 0.6990595611285266
User 101573 AUC after training: 0.6959247648902821
User 101573 does not improve AUC. Reverting changes.
Training on augumented user 138145 37/50 current_auc = 0.6990595611285266
User 138145 AUC after training: 0.6990595611285266
User 138145 does not improve AUC. Reverting changes.
Training on augumented user 45763 38/50 current_auc = 0.6990595611285266
User 45763 AUC after training: 0.6974921630094044
User 45763 does not improve AUC. Reverting changes.
Training on augumented user 21906 39/50 current_auc = 0.6990595611285266
User 21906 AUC after training: 0.6974921630094044
User 21906 does not improve AUC. Reverting changes.
Training on augumented user 52065 40/50 current_auc = 0.6990595611285266
User 52065 AUC after training: 0.6990595611285266
User 52065 does not improve AUC. Reverting changes.
Training on augumented user 44442 41/50 current_auc = 0.6990595611285266
User 44442 AUC after training: 0.6974921630094044
User 44442 does not improve AUC. Reverting changes.
Training on augumented user 102990 42/50 current_auc = 0.6990595611285266
User 102990 AUC after training: 0.6974921630094044
User 102990 does not improve AUC. Reverting changes.
Training on augumented user 56332 43/50 current_auc = 0.6990595611285266
User 56332 AUC after training: 0.6959247648902821
User 56332 does not improve AUC. Reverting changes.
Training on augumented user 78626 44/50 current_auc = 0.6990595611285266
User 78626 AUC after training: 0.6990595611285266
User 78626 does not improve AUC. Reverting changes.
Training on augumented user 135114 45/50 current_auc = 0.6990595611285266
User 135114 AUC after training: 0.6974921630094044
User 135114 does not improve AUC. Reverting changes.
Training on augumented user 2613 46/50 current_auc = 0.6990595611285266
User 2613 AUC after training: 0.6959247648902821
User 2613 does not improve AUC. Reverting changes.
Training on augumented user 137815 47/50 current_auc = 0.6990595611285266
User 137815 AUC after training: 0.6990595611285266
User 137815 does not improve AUC. Reverting changes.
Training on augumented user 103913 48/50 current_auc = 0.6990595611285266
User 103913 AUC after training: 0.6974921630094044
User 103913 does not improve AUC. Reverting changes.
Training on augumented user 131679 49/50 current_auc = 0.6990595611285266
User 131679 AUC after training: 0.6990595611285266
User 131679 does not improve AUC. Reverting changes.
[2024-12-02 19:53:58.818214] start test user 75413 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:59.491415] start test user 75413 250/568 recall augumented users by random, augumented_users = [106798, 46841, 77542, 1430, 6252, 21720, 2436, 55280, 35779, 85112, 1760, 120694, 53770, 41975, 73377, 63679, 126067, 124078, 47858, 103207, 5913, 71433, 64142, 5263, 19118, 115080, 6165, 114262, 4821, 34515, 110883, 5254, 60407, 70506, 29863, 121986, 63963, 30436, 80391, 63750, 11712, 30688, 42015, 17438, 2567, 125408, 31657, 120489, 38504, 20515]
[2024-12-02 19:53:59.506277] user = 75413 Cloud 250/568
[2024-12-02 19:53:59.516103] user = 75413 Local 250/568
[2024-12-02 19:53:59.541831] user = 75413 Local+ 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:02.079645] user = 75413 MPDA- 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5384615384615384
Training on augumented user 106798 0/50 current_auc = 0.5384615384615384
User 106798 AUC after training: 0.5384615384615384
User 106798 does not improve AUC. Reverting changes.
Training on augumented user 46841 1/50 current_auc = 0.5384615384615384
User 46841 AUC after training: 0.5384615384615384
User 46841 does not improve AUC. Reverting changes.
Training on augumented user 77542 2/50 current_auc = 0.5384615384615384
User 77542 AUC after training: 0.5384615384615384
User 77542 does not improve AUC. Reverting changes.
Training on augumented user 1430 3/50 current_auc = 0.5384615384615384
User 1430 AUC after training: 0.5384615384615384
User 1430 does not improve AUC. Reverting changes.
Training on augumented user 6252 4/50 current_auc = 0.5384615384615384
User 6252 AUC after training: 0.5384615384615384
User 6252 does not improve AUC. Reverting changes.
Training on augumented user 21720 5/50 current_auc = 0.5384615384615384
User 21720 AUC after training: 0.5384615384615384
User 21720 does not improve AUC. Reverting changes.
Training on augumented user 2436 6/50 current_auc = 0.5384615384615384
User 2436 AUC after training: 0.5384615384615384
User 2436 does not improve AUC. Reverting changes.
Training on augumented user 55280 7/50 current_auc = 0.5384615384615384
User 55280 AUC after training: 0.5384615384615384
User 55280 does not improve AUC. Reverting changes.
Training on augumented user 35779 8/50 current_auc = 0.5384615384615384
User 35779 AUC after training: 0.5384615384615384
User 35779 does not improve AUC. Reverting changes.
Training on augumented user 85112 9/50 current_auc = 0.5384615384615384
User 85112 AUC after training: 0.5384615384615384
User 85112 does not improve AUC. Reverting changes.
Training on augumented user 1760 10/50 current_auc = 0.5384615384615384
User 1760 AUC after training: 0.5384615384615384
User 1760 does not improve AUC. Reverting changes.
Training on augumented user 120694 11/50 current_auc = 0.5384615384615384
User 120694 AUC after training: 0.5384615384615384
User 120694 does not improve AUC. Reverting changes.
Training on augumented user 53770 12/50 current_auc = 0.5384615384615384
User 53770 AUC after training: 0.5384615384615384
User 53770 does not improve AUC. Reverting changes.
Training on augumented user 41975 13/50 current_auc = 0.5384615384615384
User 41975 AUC after training: 0.5384615384615384
User 41975 does not improve AUC. Reverting changes.
Training on augumented user 73377 14/50 current_auc = 0.5384615384615384
User 73377 AUC after training: 0.5384615384615384
User 73377 does not improve AUC. Reverting changes.
Training on augumented user 63679 15/50 current_auc = 0.5384615384615384
User 63679 AUC after training: 0.5384615384615384
User 63679 does not improve AUC. Reverting changes.
Training on augumented user 126067 16/50 current_auc = 0.5384615384615384
User 126067 AUC after training: 0.5384615384615384
User 126067 does not improve AUC. Reverting changes.
Training on augumented user 124078 17/50 current_auc = 0.5384615384615384
User 124078 AUC after training: 0.46153846153846156
User 124078 does not improve AUC. Reverting changes.
Training on augumented user 47858 18/50 current_auc = 0.5384615384615384
User 47858 AUC after training: 0.5384615384615384
User 47858 does not improve AUC. Reverting changes.
Training on augumented user 103207 19/50 current_auc = 0.5384615384615384
User 103207 AUC after training: 0.5384615384615384
User 103207 does not improve AUC. Reverting changes.
Training on augumented user 5913 20/50 current_auc = 0.5384615384615384
User 5913 AUC after training: 0.5384615384615384
User 5913 does not improve AUC. Reverting changes.
Training on augumented user 71433 21/50 current_auc = 0.5384615384615384
User 71433 AUC after training: 0.5384615384615384
User 71433 does not improve AUC. Reverting changes.
Training on augumented user 64142 22/50 current_auc = 0.5384615384615384
User 64142 AUC after training: 0.5384615384615384
User 64142 does not improve AUC. Reverting changes.
Training on augumented user 5263 23/50 current_auc = 0.5384615384615384
User 5263 AUC after training: 0.5384615384615384
User 5263 does not improve AUC. Reverting changes.
Training on augumented user 19118 24/50 current_auc = 0.5384615384615384
User 19118 AUC after training: 0.5384615384615384
User 19118 does not improve AUC. Reverting changes.
Training on augumented user 115080 25/50 current_auc = 0.5384615384615384
User 115080 AUC after training: 0.5384615384615384
User 115080 does not improve AUC. Reverting changes.
Training on augumented user 6165 26/50 current_auc = 0.5384615384615384
User 6165 AUC after training: 0.5384615384615384
User 6165 does not improve AUC. Reverting changes.
Training on augumented user 114262 27/50 current_auc = 0.5384615384615384
User 114262 AUC after training: 0.5384615384615384
User 114262 does not improve AUC. Reverting changes.
Training on augumented user 4821 28/50 current_auc = 0.5384615384615384
User 4821 AUC after training: 0.5384615384615384
User 4821 does not improve AUC. Reverting changes.
Training on augumented user 34515 29/50 current_auc = 0.5384615384615384
User 34515 AUC after training: 0.5384615384615384
User 34515 does not improve AUC. Reverting changes.
Training on augumented user 110883 30/50 current_auc = 0.5384615384615384
User 110883 AUC after training: 0.5384615384615384
User 110883 does not improve AUC. Reverting changes.
Training on augumented user 5254 31/50 current_auc = 0.5384615384615384
User 5254 AUC after training: 0.5384615384615384
User 5254 does not improve AUC. Reverting changes.
Training on augumented user 60407 32/50 current_auc = 0.5384615384615384
User 60407 AUC after training: 0.5384615384615384
User 60407 does not improve AUC. Reverting changes.
Training on augumented user 70506 33/50 current_auc = 0.5384615384615384
User 70506 AUC after training: 0.5384615384615384
User 70506 does not improve AUC. Reverting changes.
Training on augumented user 29863 34/50 current_auc = 0.5384615384615384
User 29863 AUC after training: 0.5384615384615384
User 29863 does not improve AUC. Reverting changes.
Training on augumented user 121986 35/50 current_auc = 0.5384615384615384
User 121986 AUC after training: 0.5384615384615384
User 121986 does not improve AUC. Reverting changes.
Training on augumented user 63963 36/50 current_auc = 0.5384615384615384
User 63963 AUC after training: 0.5384615384615384
User 63963 does not improve AUC. Reverting changes.
Training on augumented user 30436 37/50 current_auc = 0.5384615384615384
User 30436 AUC after training: 0.5384615384615384
User 30436 does not improve AUC. Reverting changes.
Training on augumented user 80391 38/50 current_auc = 0.5384615384615384
User 80391 AUC after training: 0.46153846153846156
User 80391 does not improve AUC. Reverting changes.
Training on augumented user 63750 39/50 current_auc = 0.5384615384615384
User 63750 AUC after training: 0.5384615384615384
User 63750 does not improve AUC. Reverting changes.
Training on augumented user 11712 40/50 current_auc = 0.5384615384615384
User 11712 AUC after training: 0.5384615384615384
User 11712 does not improve AUC. Reverting changes.
Training on augumented user 30688 41/50 current_auc = 0.5384615384615384
User 30688 AUC after training: 0.5384615384615384
User 30688 does not improve AUC. Reverting changes.
Training on augumented user 42015 42/50 current_auc = 0.5384615384615384
User 42015 AUC after training: 0.5384615384615384
User 42015 does not improve AUC. Reverting changes.
Training on augumented user 17438 43/50 current_auc = 0.5384615384615384
User 17438 AUC after training: 0.5384615384615384
User 17438 does not improve AUC. Reverting changes.
Training on augumented user 2567 44/50 current_auc = 0.5384615384615384
User 2567 AUC after training: 0.5384615384615384
User 2567 does not improve AUC. Reverting changes.
Training on augumented user 125408 45/50 current_auc = 0.5384615384615384
User 125408 AUC after training: 0.5384615384615384
User 125408 does not improve AUC. Reverting changes.
Training on augumented user 31657 46/50 current_auc = 0.5384615384615384
User 31657 AUC after training: 0.5384615384615384
User 31657 does not improve AUC. Reverting changes.
Training on augumented user 120489 47/50 current_auc = 0.5384615384615384
User 120489 AUC after training: 0.5384615384615384
User 120489 does not improve AUC. Reverting changes.
Training on augumented user 38504 48/50 current_auc = 0.5384615384615384
User 38504 AUC after training: 0.5384615384615384
User 38504 does not improve AUC. Reverting changes.
Training on augumented user 20515 49/50 current_auc = 0.5384615384615384
User 20515 AUC after training: 0.5384615384615384
User 20515 does not improve AUC. Reverting changes.
[2024-12-02 19:54:27.550924] start test user 75434 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:28.013213] start test user 75434 251/568 recall augumented users by random, augumented_users = [102997, 131586, 133975, 130665, 46353, 121660, 97216, 121091, 86733, 39359, 18772, 10764, 56292, 120671, 5174, 117524, 28854, 110842, 108287, 31394, 96114, 128338, 71766, 124498, 102184, 57261, 18294, 1120, 78184, 104438, 35258, 137672, 102563, 22940, 34970, 107749, 68197, 59869, 9260, 118089, 58948, 32417, 127993, 81289, 42032, 71058, 124190, 21585, 135430, 104237]
[2024-12-02 19:54:28.028602] user = 75434 Cloud 251/568
[2024-12-02 19:54:28.045967] user = 75434 Local 251/568
[2024-12-02 19:54:28.103282] user = 75434 Local+ 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:30.629352] user = 75434 MPDA- 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8156565656565656
Training on augumented user 102997 0/50 current_auc = 0.8156565656565656
User 102997 AUC after training: 0.8159090909090909
User 102997 improves AUC. Keeping the model.
Training on augumented user 131586 1/50 current_auc = 0.8159090909090909
User 131586 AUC after training: 0.8159090909090909
User 131586 does not improve AUC. Reverting changes.
Training on augumented user 133975 2/50 current_auc = 0.8159090909090909
User 133975 AUC after training: 0.8161616161616162
User 133975 improves AUC. Keeping the model.
Training on augumented user 130665 3/50 current_auc = 0.8161616161616162
User 130665 AUC after training: 0.8154040404040404
User 130665 does not improve AUC. Reverting changes.
Training on augumented user 46353 4/50 current_auc = 0.8161616161616162
User 46353 AUC after training: 0.8154040404040404
User 46353 does not improve AUC. Reverting changes.
Training on augumented user 121660 5/50 current_auc = 0.8161616161616162
User 121660 AUC after training: 0.8156565656565656
User 121660 does not improve AUC. Reverting changes.
Training on augumented user 97216 6/50 current_auc = 0.8161616161616162
User 97216 AUC after training: 0.8154040404040404
User 97216 does not improve AUC. Reverting changes.
Training on augumented user 121091 7/50 current_auc = 0.8161616161616162
User 121091 AUC after training: 0.8161616161616161
User 121091 does not improve AUC. Reverting changes.
Training on augumented user 86733 8/50 current_auc = 0.8161616161616162
User 86733 AUC after training: 0.8161616161616161
User 86733 does not improve AUC. Reverting changes.
Training on augumented user 39359 9/50 current_auc = 0.8161616161616162
User 39359 AUC after training: 0.8159090909090909
User 39359 does not improve AUC. Reverting changes.
Training on augumented user 18772 10/50 current_auc = 0.8161616161616162
User 18772 AUC after training: 0.8159090909090909
User 18772 does not improve AUC. Reverting changes.
Training on augumented user 10764 11/50 current_auc = 0.8161616161616162
User 10764 AUC after training: 0.8161616161616161
User 10764 does not improve AUC. Reverting changes.
Training on augumented user 56292 12/50 current_auc = 0.8161616161616162
User 56292 AUC after training: 0.8161616161616161
User 56292 does not improve AUC. Reverting changes.
Training on augumented user 120671 13/50 current_auc = 0.8161616161616162
User 120671 AUC after training: 0.8169191919191919
User 120671 improves AUC. Keeping the model.
Training on augumented user 5174 14/50 current_auc = 0.8169191919191919
User 5174 AUC after training: 0.8164141414141415
User 5174 does not improve AUC. Reverting changes.
Training on augumented user 117524 15/50 current_auc = 0.8169191919191919
User 117524 AUC after training: 0.8161616161616161
User 117524 does not improve AUC. Reverting changes.
Training on augumented user 28854 16/50 current_auc = 0.8169191919191919
User 28854 AUC after training: 0.8166666666666667
User 28854 does not improve AUC. Reverting changes.
Training on augumented user 110842 17/50 current_auc = 0.8169191919191919
User 110842 AUC after training: 0.8151515151515152
User 110842 does not improve AUC. Reverting changes.
Training on augumented user 108287 18/50 current_auc = 0.8169191919191919
User 108287 AUC after training: 0.8159090909090909
User 108287 does not improve AUC. Reverting changes.
Training on augumented user 31394 19/50 current_auc = 0.8169191919191919
User 31394 AUC after training: 0.8166666666666667
User 31394 does not improve AUC. Reverting changes.
Training on augumented user 96114 20/50 current_auc = 0.8169191919191919
User 96114 AUC after training: 0.8161616161616162
User 96114 does not improve AUC. Reverting changes.
Training on augumented user 128338 21/50 current_auc = 0.8169191919191919
User 128338 AUC after training: 0.8169191919191919
User 128338 does not improve AUC. Reverting changes.
Training on augumented user 71766 22/50 current_auc = 0.8169191919191919
User 71766 AUC after training: 0.8164141414141415
User 71766 does not improve AUC. Reverting changes.
Training on augumented user 124498 23/50 current_auc = 0.8169191919191919
User 124498 AUC after training: 0.8166666666666667
User 124498 does not improve AUC. Reverting changes.
Training on augumented user 102184 24/50 current_auc = 0.8169191919191919
User 102184 AUC after training: 0.8169191919191919
User 102184 does not improve AUC. Reverting changes.
Training on augumented user 57261 25/50 current_auc = 0.8169191919191919
User 57261 AUC after training: 0.8169191919191919
User 57261 does not improve AUC. Reverting changes.
Training on augumented user 18294 26/50 current_auc = 0.8169191919191919
User 18294 AUC after training: 0.8166666666666667
User 18294 does not improve AUC. Reverting changes.
Training on augumented user 1120 27/50 current_auc = 0.8169191919191919
User 1120 AUC after training: 0.8164141414141415
User 1120 does not improve AUC. Reverting changes.
Training on augumented user 78184 28/50 current_auc = 0.8169191919191919
User 78184 AUC after training: 0.8169191919191919
User 78184 does not improve AUC. Reverting changes.
Training on augumented user 104438 29/50 current_auc = 0.8169191919191919
User 104438 AUC after training: 0.8164141414141415
User 104438 does not improve AUC. Reverting changes.
Training on augumented user 35258 30/50 current_auc = 0.8169191919191919
User 35258 AUC after training: 0.8159090909090909
User 35258 does not improve AUC. Reverting changes.
Training on augumented user 137672 31/50 current_auc = 0.8169191919191919
User 137672 AUC after training: 0.8154040404040404
User 137672 does not improve AUC. Reverting changes.
Training on augumented user 102563 32/50 current_auc = 0.8169191919191919
User 102563 AUC after training: 0.8164141414141415
User 102563 does not improve AUC. Reverting changes.
Training on augumented user 22940 33/50 current_auc = 0.8169191919191919
User 22940 AUC after training: 0.8169191919191919
User 22940 does not improve AUC. Reverting changes.
Training on augumented user 34970 34/50 current_auc = 0.8169191919191919
User 34970 AUC after training: 0.8166666666666667
User 34970 does not improve AUC. Reverting changes.
Training on augumented user 107749 35/50 current_auc = 0.8169191919191919
User 107749 AUC after training: 0.8166666666666667
User 107749 does not improve AUC. Reverting changes.
Training on augumented user 68197 36/50 current_auc = 0.8169191919191919
User 68197 AUC after training: 0.8166666666666667
User 68197 does not improve AUC. Reverting changes.
Training on augumented user 59869 37/50 current_auc = 0.8169191919191919
User 59869 AUC after training: 0.8169191919191919
User 59869 does not improve AUC. Reverting changes.
Training on augumented user 9260 38/50 current_auc = 0.8169191919191919
User 9260 AUC after training: 0.8164141414141414
User 9260 does not improve AUC. Reverting changes.
Training on augumented user 118089 39/50 current_auc = 0.8169191919191919
User 118089 AUC after training: 0.8166666666666667
User 118089 does not improve AUC. Reverting changes.
Training on augumented user 58948 40/50 current_auc = 0.8169191919191919
User 58948 AUC after training: 0.8156565656565656
User 58948 does not improve AUC. Reverting changes.
Training on augumented user 32417 41/50 current_auc = 0.8169191919191919
User 32417 AUC after training: 0.8171717171717172
User 32417 improves AUC. Keeping the model.
Training on augumented user 127993 42/50 current_auc = 0.8171717171717172
User 127993 AUC after training: 0.8166666666666667
User 127993 does not improve AUC. Reverting changes.
Training on augumented user 81289 43/50 current_auc = 0.8171717171717172
User 81289 AUC after training: 0.8166666666666667
User 81289 does not improve AUC. Reverting changes.
Training on augumented user 42032 44/50 current_auc = 0.8171717171717172
User 42032 AUC after training: 0.8166666666666667
User 42032 does not improve AUC. Reverting changes.
Training on augumented user 71058 45/50 current_auc = 0.8171717171717172
User 71058 AUC after training: 0.8171717171717172
User 71058 does not improve AUC. Reverting changes.
Training on augumented user 124190 46/50 current_auc = 0.8171717171717172
User 124190 AUC after training: 0.8169191919191919
User 124190 does not improve AUC. Reverting changes.
Training on augumented user 21585 47/50 current_auc = 0.8171717171717172
User 21585 AUC after training: 0.8169191919191919
User 21585 does not improve AUC. Reverting changes.
Training on augumented user 135430 48/50 current_auc = 0.8171717171717172
User 135430 AUC after training: 0.8169191919191919
User 135430 does not improve AUC. Reverting changes.
Training on augumented user 104237 49/50 current_auc = 0.8171717171717172
User 104237 AUC after training: 0.8169191919191919
User 104237 does not improve AUC. Reverting changes.
[2024-12-02 19:54:58.325258] start test user 75447 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:59.003761] start test user 75447 252/568 recall augumented users by random, augumented_users = [130969, 20939, 132368, 36169, 360, 94246, 17684, 56741, 121579, 61405, 99371, 90587, 58776, 29291, 71486, 119334, 23628, 92260, 115612, 15205, 97278, 15091, 53258, 74277, 62306, 64123, 114985, 100147, 135578, 4520, 57580, 18086, 128625, 96396, 76796, 48853, 67490, 73733, 80155, 49123, 13245, 32554, 57468, 32015, 52441, 126666, 130830, 21975, 65482, 89866]
[2024-12-02 19:54:59.027407] user = 75447 Cloud 252/568
[2024-12-02 19:54:59.047691] user = 75447 Local 252/568
[2024-12-02 19:54:59.135538] user = 75447 Local+ 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:01.584363] user = 75447 MPDA- 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8685031185031186
Training on augumented user 130969 0/50 current_auc = 0.8685031185031186
User 130969 AUC after training: 0.8685031185031186
User 130969 does not improve AUC. Reverting changes.
Training on augumented user 20939 1/50 current_auc = 0.8685031185031186
User 20939 AUC after training: 0.8695426195426196
User 20939 improves AUC. Keeping the model.
Training on augumented user 132368 2/50 current_auc = 0.8695426195426196
User 132368 AUC after training: 0.8685031185031186
User 132368 does not improve AUC. Reverting changes.
Training on augumented user 36169 3/50 current_auc = 0.8695426195426196
User 36169 AUC after training: 0.8685031185031186
User 36169 does not improve AUC. Reverting changes.
Training on augumented user 360 4/50 current_auc = 0.8695426195426196
User 360 AUC after training: 0.8679833679833681
User 360 does not improve AUC. Reverting changes.
Training on augumented user 94246 5/50 current_auc = 0.8695426195426196
User 94246 AUC after training: 0.8690228690228691
User 94246 does not improve AUC. Reverting changes.
Training on augumented user 17684 6/50 current_auc = 0.8695426195426196
User 17684 AUC after training: 0.8679833679833681
User 17684 does not improve AUC. Reverting changes.
Training on augumented user 56741 7/50 current_auc = 0.8695426195426196
User 56741 AUC after training: 0.8695426195426196
User 56741 does not improve AUC. Reverting changes.
Training on augumented user 121579 8/50 current_auc = 0.8695426195426196
User 121579 AUC after training: 0.8679833679833681
User 121579 does not improve AUC. Reverting changes.
Training on augumented user 61405 9/50 current_auc = 0.8695426195426196
User 61405 AUC after training: 0.8700623700623701
User 61405 improves AUC. Keeping the model.
Training on augumented user 99371 10/50 current_auc = 0.8700623700623701
User 99371 AUC after training: 0.8695426195426196
User 99371 does not improve AUC. Reverting changes.
Training on augumented user 90587 11/50 current_auc = 0.8700623700623701
User 90587 AUC after training: 0.8700623700623701
User 90587 does not improve AUC. Reverting changes.
Training on augumented user 58776 12/50 current_auc = 0.8700623700623701
User 58776 AUC after training: 0.8700623700623701
User 58776 does not improve AUC. Reverting changes.
Training on augumented user 29291 13/50 current_auc = 0.8700623700623701
User 29291 AUC after training: 0.8705821205821206
User 29291 improves AUC. Keeping the model.
Training on augumented user 71486 14/50 current_auc = 0.8705821205821206
User 71486 AUC after training: 0.8700623700623701
User 71486 does not improve AUC. Reverting changes.
Training on augumented user 119334 15/50 current_auc = 0.8705821205821206
User 119334 AUC after training: 0.8705821205821206
User 119334 does not improve AUC. Reverting changes.
Training on augumented user 23628 16/50 current_auc = 0.8705821205821206
User 23628 AUC after training: 0.8692827442827443
User 23628 does not improve AUC. Reverting changes.
Training on augumented user 92260 17/50 current_auc = 0.8705821205821206
User 92260 AUC after training: 0.8690228690228691
User 92260 does not improve AUC. Reverting changes.
Training on augumented user 115612 18/50 current_auc = 0.8705821205821206
User 115612 AUC after training: 0.8711018711018712
User 115612 improves AUC. Keeping the model.
Training on augumented user 15205 19/50 current_auc = 0.8711018711018712
User 15205 AUC after training: 0.8705821205821206
User 15205 does not improve AUC. Reverting changes.
Training on augumented user 97278 20/50 current_auc = 0.8711018711018712
User 97278 AUC after training: 0.8711018711018711
User 97278 does not improve AUC. Reverting changes.
Training on augumented user 15091 21/50 current_auc = 0.8711018711018712
User 15091 AUC after training: 0.8705821205821206
User 15091 does not improve AUC. Reverting changes.
Training on augumented user 53258 22/50 current_auc = 0.8711018711018712
User 53258 AUC after training: 0.8674636174636176
User 53258 does not improve AUC. Reverting changes.
Training on augumented user 74277 23/50 current_auc = 0.8711018711018712
User 74277 AUC after training: 0.8716216216216217
User 74277 improves AUC. Keeping the model.
Training on augumented user 62306 24/50 current_auc = 0.8716216216216217
User 62306 AUC after training: 0.8716216216216217
User 62306 does not improve AUC. Reverting changes.
Training on augumented user 64123 25/50 current_auc = 0.8716216216216217
User 64123 AUC after training: 0.8705821205821206
User 64123 does not improve AUC. Reverting changes.
Training on augumented user 114985 26/50 current_auc = 0.8716216216216217
User 114985 AUC after training: 0.8711018711018711
User 114985 does not improve AUC. Reverting changes.
Training on augumented user 100147 27/50 current_auc = 0.8716216216216217
User 100147 AUC after training: 0.8716216216216217
User 100147 does not improve AUC. Reverting changes.
Training on augumented user 135578 28/50 current_auc = 0.8716216216216217
User 135578 AUC after training: 0.8716216216216217
User 135578 does not improve AUC. Reverting changes.
Training on augumented user 4520 29/50 current_auc = 0.8716216216216217
User 4520 AUC after training: 0.8711018711018711
User 4520 does not improve AUC. Reverting changes.
Training on augumented user 57580 30/50 current_auc = 0.8716216216216217
User 57580 AUC after training: 0.8705821205821206
User 57580 does not improve AUC. Reverting changes.
Training on augumented user 18086 31/50 current_auc = 0.8716216216216217
User 18086 AUC after training: 0.8700623700623701
User 18086 does not improve AUC. Reverting changes.
Training on augumented user 128625 32/50 current_auc = 0.8716216216216217
User 128625 AUC after training: 0.8731808731808732
User 128625 improves AUC. Keeping the model.
Training on augumented user 96396 33/50 current_auc = 0.8731808731808732
User 96396 AUC after training: 0.8726611226611227
User 96396 does not improve AUC. Reverting changes.
Training on augumented user 76796 34/50 current_auc = 0.8731808731808732
User 76796 AUC after training: 0.8726611226611227
User 76796 does not improve AUC. Reverting changes.
Training on augumented user 48853 35/50 current_auc = 0.8731808731808732
User 48853 AUC after training: 0.8731808731808732
User 48853 does not improve AUC. Reverting changes.
Training on augumented user 67490 36/50 current_auc = 0.8731808731808732
User 67490 AUC after training: 0.8721413721413722
User 67490 does not improve AUC. Reverting changes.
Training on augumented user 73733 37/50 current_auc = 0.8731808731808732
User 73733 AUC after training: 0.8711018711018711
User 73733 does not improve AUC. Reverting changes.
Training on augumented user 80155 38/50 current_auc = 0.8731808731808732
User 80155 AUC after training: 0.8731808731808732
User 80155 does not improve AUC. Reverting changes.
Training on augumented user 49123 39/50 current_auc = 0.8731808731808732
User 49123 AUC after training: 0.8731808731808732
User 49123 does not improve AUC. Reverting changes.
Training on augumented user 13245 40/50 current_auc = 0.8731808731808732
User 13245 AUC after training: 0.8726611226611227
User 13245 does not improve AUC. Reverting changes.
Training on augumented user 32554 41/50 current_auc = 0.8731808731808732
User 32554 AUC after training: 0.8685031185031186
User 32554 does not improve AUC. Reverting changes.
Training on augumented user 57468 42/50 current_auc = 0.8731808731808732
User 57468 AUC after training: 0.8726611226611227
User 57468 does not improve AUC. Reverting changes.
Training on augumented user 32015 43/50 current_auc = 0.8731808731808732
User 32015 AUC after training: 0.8731808731808732
User 32015 does not improve AUC. Reverting changes.
Training on augumented user 52441 44/50 current_auc = 0.8731808731808732
User 52441 AUC after training: 0.8731808731808732
User 52441 does not improve AUC. Reverting changes.
Training on augumented user 126666 45/50 current_auc = 0.8731808731808732
User 126666 AUC after training: 0.8731808731808732
User 126666 does not improve AUC. Reverting changes.
Training on augumented user 130830 46/50 current_auc = 0.8731808731808732
User 130830 AUC after training: 0.8726611226611227
User 130830 does not improve AUC. Reverting changes.
Training on augumented user 21975 47/50 current_auc = 0.8731808731808732
User 21975 AUC after training: 0.8731808731808732
User 21975 does not improve AUC. Reverting changes.
Training on augumented user 65482 48/50 current_auc = 0.8731808731808732
User 65482 AUC after training: 0.8726611226611227
User 65482 does not improve AUC. Reverting changes.
Training on augumented user 89866 49/50 current_auc = 0.8731808731808732
User 89866 AUC after training: 0.8731808731808732
User 89866 does not improve AUC. Reverting changes.
[2024-12-02 19:55:30.078210] start test user 75455 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:30.759190] start test user 75455 253/568 recall augumented users by random, augumented_users = [114195, 47963, 8326, 124804, 70858, 104746, 45687, 124929, 127379, 66575, 54834, 27650, 75808, 132902, 78081, 82776, 4768, 642, 66826, 100006, 5035, 41242, 109679, 63995, 42395, 39153, 127738, 45464, 51082, 127506, 85066, 20351, 95553, 998, 117704, 43580, 54067, 40770, 19498, 43010, 120716, 23771, 89343, 65281, 12772, 133732, 88813, 127403, 65633, 124157]
[2024-12-02 19:55:30.776009] user = 75455 Cloud 253/568
[2024-12-02 19:55:30.791626] user = 75455 Local 253/568
[2024-12-02 19:55:30.889427] user = 75455 Local+ 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:33.406807] user = 75455 MPDA- 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 114195 0/50 current_auc = 1.0
User 114195 AUC after training: 1.0
User 114195 does not improve AUC. Reverting changes.
Training on augumented user 47963 1/50 current_auc = 1.0
User 47963 AUC after training: 1.0
User 47963 does not improve AUC. Reverting changes.
Training on augumented user 8326 2/50 current_auc = 1.0
User 8326 AUC after training: 1.0
User 8326 does not improve AUC. Reverting changes.
Training on augumented user 124804 3/50 current_auc = 1.0
User 124804 AUC after training: 1.0
User 124804 does not improve AUC. Reverting changes.
Training on augumented user 70858 4/50 current_auc = 1.0
User 70858 AUC after training: 1.0
User 70858 does not improve AUC. Reverting changes.
Training on augumented user 104746 5/50 current_auc = 1.0
User 104746 AUC after training: 1.0
User 104746 does not improve AUC. Reverting changes.
Training on augumented user 45687 6/50 current_auc = 1.0
User 45687 AUC after training: 1.0
User 45687 does not improve AUC. Reverting changes.
Training on augumented user 124929 7/50 current_auc = 1.0
User 124929 AUC after training: 1.0
User 124929 does not improve AUC. Reverting changes.
Training on augumented user 127379 8/50 current_auc = 1.0
User 127379 AUC after training: 1.0
User 127379 does not improve AUC. Reverting changes.
Training on augumented user 66575 9/50 current_auc = 1.0
User 66575 AUC after training: 1.0
User 66575 does not improve AUC. Reverting changes.
Training on augumented user 54834 10/50 current_auc = 1.0
User 54834 AUC after training: 1.0
User 54834 does not improve AUC. Reverting changes.
Training on augumented user 27650 11/50 current_auc = 1.0
User 27650 AUC after training: 1.0
User 27650 does not improve AUC. Reverting changes.
Training on augumented user 75808 12/50 current_auc = 1.0
User 75808 AUC after training: 1.0
User 75808 does not improve AUC. Reverting changes.
Training on augumented user 132902 13/50 current_auc = 1.0
User 132902 AUC after training: 1.0
User 132902 does not improve AUC. Reverting changes.
Training on augumented user 78081 14/50 current_auc = 1.0
User 78081 AUC after training: 1.0
User 78081 does not improve AUC. Reverting changes.
Training on augumented user 82776 15/50 current_auc = 1.0
User 82776 AUC after training: 1.0
User 82776 does not improve AUC. Reverting changes.
Training on augumented user 4768 16/50 current_auc = 1.0
User 4768 AUC after training: 1.0
User 4768 does not improve AUC. Reverting changes.
Training on augumented user 642 17/50 current_auc = 1.0
User 642 AUC after training: 1.0
User 642 does not improve AUC. Reverting changes.
Training on augumented user 66826 18/50 current_auc = 1.0
User 66826 AUC after training: 1.0
User 66826 does not improve AUC. Reverting changes.
Training on augumented user 100006 19/50 current_auc = 1.0
User 100006 AUC after training: 1.0
User 100006 does not improve AUC. Reverting changes.
Training on augumented user 5035 20/50 current_auc = 1.0
User 5035 AUC after training: 1.0
User 5035 does not improve AUC. Reverting changes.
Training on augumented user 41242 21/50 current_auc = 1.0
User 41242 AUC after training: 1.0
User 41242 does not improve AUC. Reverting changes.
Training on augumented user 109679 22/50 current_auc = 1.0
User 109679 AUC after training: 1.0
User 109679 does not improve AUC. Reverting changes.
Training on augumented user 63995 23/50 current_auc = 1.0
User 63995 AUC after training: 1.0
User 63995 does not improve AUC. Reverting changes.
Training on augumented user 42395 24/50 current_auc = 1.0
User 42395 AUC after training: 1.0
User 42395 does not improve AUC. Reverting changes.
Training on augumented user 39153 25/50 current_auc = 1.0
User 39153 AUC after training: 1.0
User 39153 does not improve AUC. Reverting changes.
Training on augumented user 127738 26/50 current_auc = 1.0
User 127738 AUC after training: 1.0
User 127738 does not improve AUC. Reverting changes.
Training on augumented user 45464 27/50 current_auc = 1.0
User 45464 AUC after training: 1.0
User 45464 does not improve AUC. Reverting changes.
Training on augumented user 51082 28/50 current_auc = 1.0
User 51082 AUC after training: 1.0
User 51082 does not improve AUC. Reverting changes.
Training on augumented user 127506 29/50 current_auc = 1.0
User 127506 AUC after training: 1.0
User 127506 does not improve AUC. Reverting changes.
Training on augumented user 85066 30/50 current_auc = 1.0
User 85066 AUC after training: 1.0
User 85066 does not improve AUC. Reverting changes.
Training on augumented user 20351 31/50 current_auc = 1.0
User 20351 AUC after training: 1.0
User 20351 does not improve AUC. Reverting changes.
Training on augumented user 95553 32/50 current_auc = 1.0
User 95553 AUC after training: 1.0
User 95553 does not improve AUC. Reverting changes.
Training on augumented user 998 33/50 current_auc = 1.0
User 998 AUC after training: 1.0
User 998 does not improve AUC. Reverting changes.
Training on augumented user 117704 34/50 current_auc = 1.0
User 117704 AUC after training: 1.0
User 117704 does not improve AUC. Reverting changes.
Training on augumented user 43580 35/50 current_auc = 1.0
User 43580 AUC after training: 1.0
User 43580 does not improve AUC. Reverting changes.
Training on augumented user 54067 36/50 current_auc = 1.0
User 54067 AUC after training: 1.0
User 54067 does not improve AUC. Reverting changes.
Training on augumented user 40770 37/50 current_auc = 1.0
User 40770 AUC after training: 1.0
User 40770 does not improve AUC. Reverting changes.
Training on augumented user 19498 38/50 current_auc = 1.0
User 19498 AUC after training: 1.0
User 19498 does not improve AUC. Reverting changes.
Training on augumented user 43010 39/50 current_auc = 1.0
User 43010 AUC after training: 1.0
User 43010 does not improve AUC. Reverting changes.
Training on augumented user 120716 40/50 current_auc = 1.0
User 120716 AUC after training: 1.0
User 120716 does not improve AUC. Reverting changes.
Training on augumented user 23771 41/50 current_auc = 1.0
User 23771 AUC after training: 1.0
User 23771 does not improve AUC. Reverting changes.
Training on augumented user 89343 42/50 current_auc = 1.0
User 89343 AUC after training: 1.0
User 89343 does not improve AUC. Reverting changes.
Training on augumented user 65281 43/50 current_auc = 1.0
User 65281 AUC after training: 1.0
User 65281 does not improve AUC. Reverting changes.
Training on augumented user 12772 44/50 current_auc = 1.0
User 12772 AUC after training: 1.0
User 12772 does not improve AUC. Reverting changes.
Training on augumented user 133732 45/50 current_auc = 1.0
User 133732 AUC after training: 1.0
User 133732 does not improve AUC. Reverting changes.
Training on augumented user 88813 46/50 current_auc = 1.0
User 88813 AUC after training: 1.0
User 88813 does not improve AUC. Reverting changes.
Training on augumented user 127403 47/50 current_auc = 1.0
User 127403 AUC after training: 1.0
User 127403 does not improve AUC. Reverting changes.
Training on augumented user 65633 48/50 current_auc = 1.0
User 65633 AUC after training: 1.0
User 65633 does not improve AUC. Reverting changes.
Training on augumented user 124157 49/50 current_auc = 1.0
User 124157 AUC after training: 1.0
User 124157 does not improve AUC. Reverting changes.
[2024-12-02 19:56:03.728597] start test user 75463 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:04.160104] start test user 75463 254/568 recall augumented users by random, augumented_users = [88323, 99930, 29320, 101174, 50174, 74525, 123964, 124990, 13944, 116170, 64598, 135190, 90600, 38727, 17772, 6982, 10974, 88831, 63270, 37862, 132993, 138279, 54527, 65120, 129902, 113494, 17415, 56877, 92043, 26242, 35952, 5938, 117712, 19443, 137367, 99470, 108351, 132941, 118558, 79573, 82299, 41584, 121636, 103666, 101955, 60439, 45355, 110233, 134326, 118516]
[2024-12-02 19:56:04.175011] user = 75463 Cloud 254/568
[2024-12-02 19:56:04.187937] user = 75463 Local 254/568
[2024-12-02 19:56:04.224308] user = 75463 Local+ 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:06.656870] user = 75463 MPDA- 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5409999999999999
Training on augumented user 88323 0/50 current_auc = 0.5409999999999999
User 88323 AUC after training: 0.541
User 88323 improves AUC. Keeping the model.
Training on augumented user 99930 1/50 current_auc = 0.541
User 99930 AUC after training: 0.54
User 99930 does not improve AUC. Reverting changes.
Training on augumented user 29320 2/50 current_auc = 0.541
User 29320 AUC after training: 0.538
User 29320 does not improve AUC. Reverting changes.
Training on augumented user 101174 3/50 current_auc = 0.541
User 101174 AUC after training: 0.542
User 101174 improves AUC. Keeping the model.
Training on augumented user 50174 4/50 current_auc = 0.542
User 50174 AUC after training: 0.542
User 50174 does not improve AUC. Reverting changes.
Training on augumented user 74525 5/50 current_auc = 0.542
User 74525 AUC after training: 0.542
User 74525 does not improve AUC. Reverting changes.
Training on augumented user 123964 6/50 current_auc = 0.542
User 123964 AUC after training: 0.542
User 123964 does not improve AUC. Reverting changes.
Training on augumented user 124990 7/50 current_auc = 0.542
User 124990 AUC after training: 0.542
User 124990 does not improve AUC. Reverting changes.
Training on augumented user 13944 8/50 current_auc = 0.542
User 13944 AUC after training: 0.544
User 13944 improves AUC. Keeping the model.
Training on augumented user 116170 9/50 current_auc = 0.544
User 116170 AUC after training: 0.54
User 116170 does not improve AUC. Reverting changes.
Training on augumented user 64598 10/50 current_auc = 0.544
User 64598 AUC after training: 0.54
User 64598 does not improve AUC. Reverting changes.
Training on augumented user 135190 11/50 current_auc = 0.544
User 135190 AUC after training: 0.5449999999999999
User 135190 improves AUC. Keeping the model.
Training on augumented user 90600 12/50 current_auc = 0.5449999999999999
User 90600 AUC after training: 0.5409999999999999
User 90600 does not improve AUC. Reverting changes.
Training on augumented user 38727 13/50 current_auc = 0.5449999999999999
User 38727 AUC after training: 0.545
User 38727 improves AUC. Keeping the model.
Training on augumented user 17772 14/50 current_auc = 0.545
User 17772 AUC after training: 0.544
User 17772 does not improve AUC. Reverting changes.
Training on augumented user 6982 15/50 current_auc = 0.545
User 6982 AUC after training: 0.545
User 6982 does not improve AUC. Reverting changes.
Training on augumented user 10974 16/50 current_auc = 0.545
User 10974 AUC after training: 0.5409999999999999
User 10974 does not improve AUC. Reverting changes.
Training on augumented user 88831 17/50 current_auc = 0.545
User 88831 AUC after training: 0.5429999999999999
User 88831 does not improve AUC. Reverting changes.
Training on augumented user 63270 18/50 current_auc = 0.545
User 63270 AUC after training: 0.544
User 63270 does not improve AUC. Reverting changes.
Training on augumented user 37862 19/50 current_auc = 0.545
User 37862 AUC after training: 0.5429999999999999
User 37862 does not improve AUC. Reverting changes.
Training on augumented user 132993 20/50 current_auc = 0.545
User 132993 AUC after training: 0.544
User 132993 does not improve AUC. Reverting changes.
Training on augumented user 138279 21/50 current_auc = 0.545
User 138279 AUC after training: 0.544
User 138279 does not improve AUC. Reverting changes.
Training on augumented user 54527 22/50 current_auc = 0.545
User 54527 AUC after training: 0.544
User 54527 does not improve AUC. Reverting changes.
Training on augumented user 65120 23/50 current_auc = 0.545
User 65120 AUC after training: 0.5449999999999999
User 65120 does not improve AUC. Reverting changes.
Training on augumented user 129902 24/50 current_auc = 0.545
User 129902 AUC after training: 0.544
User 129902 does not improve AUC. Reverting changes.
Training on augumented user 113494 25/50 current_auc = 0.545
User 113494 AUC after training: 0.545
User 113494 does not improve AUC. Reverting changes.
Training on augumented user 17415 26/50 current_auc = 0.545
User 17415 AUC after training: 0.5449999999999999
User 17415 does not improve AUC. Reverting changes.
Training on augumented user 56877 27/50 current_auc = 0.545
User 56877 AUC after training: 0.542
User 56877 does not improve AUC. Reverting changes.
Training on augumented user 92043 28/50 current_auc = 0.545
User 92043 AUC after training: 0.545
User 92043 does not improve AUC. Reverting changes.
Training on augumented user 26242 29/50 current_auc = 0.545
User 26242 AUC after training: 0.544
User 26242 does not improve AUC. Reverting changes.
Training on augumented user 35952 30/50 current_auc = 0.545
User 35952 AUC after training: 0.544
User 35952 does not improve AUC. Reverting changes.
Training on augumented user 5938 31/50 current_auc = 0.545
User 5938 AUC after training: 0.5409999999999999
User 5938 does not improve AUC. Reverting changes.
Training on augumented user 117712 32/50 current_auc = 0.545
User 117712 AUC after training: 0.544
User 117712 does not improve AUC. Reverting changes.
Training on augumented user 19443 33/50 current_auc = 0.545
User 19443 AUC after training: 0.544
User 19443 does not improve AUC. Reverting changes.
Training on augumented user 137367 34/50 current_auc = 0.545
User 137367 AUC after training: 0.5429999999999999
User 137367 does not improve AUC. Reverting changes.
Training on augumented user 99470 35/50 current_auc = 0.545
User 99470 AUC after training: 0.5449999999999999
User 99470 does not improve AUC. Reverting changes.
Training on augumented user 108351 36/50 current_auc = 0.545
User 108351 AUC after training: 0.545
User 108351 does not improve AUC. Reverting changes.
Training on augumented user 132941 37/50 current_auc = 0.545
User 132941 AUC after training: 0.5429999999999999
User 132941 does not improve AUC. Reverting changes.
Training on augumented user 118558 38/50 current_auc = 0.545
User 118558 AUC after training: 0.543
User 118558 does not improve AUC. Reverting changes.
Training on augumented user 79573 39/50 current_auc = 0.545
User 79573 AUC after training: 0.545
User 79573 does not improve AUC. Reverting changes.
Training on augumented user 82299 40/50 current_auc = 0.545
User 82299 AUC after training: 0.545
User 82299 does not improve AUC. Reverting changes.
Training on augumented user 41584 41/50 current_auc = 0.545
User 41584 AUC after training: 0.5449999999999999
User 41584 does not improve AUC. Reverting changes.
Training on augumented user 121636 42/50 current_auc = 0.545
User 121636 AUC after training: 0.542
User 121636 does not improve AUC. Reverting changes.
Training on augumented user 103666 43/50 current_auc = 0.545
User 103666 AUC after training: 0.545
User 103666 does not improve AUC. Reverting changes.
Training on augumented user 101955 44/50 current_auc = 0.545
User 101955 AUC after training: 0.542
User 101955 does not improve AUC. Reverting changes.
Training on augumented user 60439 45/50 current_auc = 0.545
User 60439 AUC after training: 0.542
User 60439 does not improve AUC. Reverting changes.
Training on augumented user 45355 46/50 current_auc = 0.545
User 45355 AUC after training: 0.544
User 45355 does not improve AUC. Reverting changes.
Training on augumented user 110233 47/50 current_auc = 0.545
User 110233 AUC after training: 0.544
User 110233 does not improve AUC. Reverting changes.
Training on augumented user 134326 48/50 current_auc = 0.545
User 134326 AUC after training: 0.5429999999999999
User 134326 does not improve AUC. Reverting changes.
Training on augumented user 118516 49/50 current_auc = 0.545
User 118516 AUC after training: 0.544
User 118516 does not improve AUC. Reverting changes.
[2024-12-02 19:56:36.144855] start test user 75486 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:37.051693] start test user 75486 255/568 recall augumented users by random, augumented_users = [36216, 73969, 26242, 77921, 129489, 10572, 91939, 62617, 114345, 129312, 134171, 110160, 115599, 65423, 129364, 112945, 11691, 26372, 133736, 6555, 96094, 27341, 110915, 21069, 101553, 107139, 53196, 18123, 5652, 68801, 73441, 71665, 69523, 77082, 106660, 124611, 121423, 135099, 87070, 129146, 44337, 96190, 80537, 37707, 80838, 91209, 38631, 30616, 117118, 76030]
[2024-12-02 19:56:37.086777] user = 75486 Cloud 255/568
[2024-12-02 19:56:37.147117] user = 75486 Local 255/568
[2024-12-02 19:56:37.293310] user = 75486 Local+ 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:39.752038] user = 75486 MPDA- 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6667567567567568
Training on augumented user 36216 0/50 current_auc = 0.6667567567567568
User 36216 AUC after training: 0.6667567567567568
User 36216 does not improve AUC. Reverting changes.
Training on augumented user 73969 1/50 current_auc = 0.6667567567567568
User 73969 AUC after training: 0.6662162162162163
User 73969 does not improve AUC. Reverting changes.
Training on augumented user 26242 2/50 current_auc = 0.6667567567567568
User 26242 AUC after training: 0.6662162162162163
User 26242 does not improve AUC. Reverting changes.
Training on augumented user 77921 3/50 current_auc = 0.6667567567567568
User 77921 AUC after training: 0.6667567567567568
User 77921 does not improve AUC. Reverting changes.
Training on augumented user 129489 4/50 current_auc = 0.6667567567567568
User 129489 AUC after training: 0.6667567567567568
User 129489 does not improve AUC. Reverting changes.
Training on augumented user 10572 5/50 current_auc = 0.6667567567567568
User 10572 AUC after training: 0.6667567567567568
User 10572 does not improve AUC. Reverting changes.
Training on augumented user 91939 6/50 current_auc = 0.6667567567567568
User 91939 AUC after training: 0.6667567567567568
User 91939 does not improve AUC. Reverting changes.
Training on augumented user 62617 7/50 current_auc = 0.6667567567567568
User 62617 AUC after training: 0.6667567567567568
User 62617 does not improve AUC. Reverting changes.
Training on augumented user 114345 8/50 current_auc = 0.6667567567567568
User 114345 AUC after training: 0.6667567567567568
User 114345 does not improve AUC. Reverting changes.
Training on augumented user 129312 9/50 current_auc = 0.6667567567567568
User 129312 AUC after training: 0.6667567567567568
User 129312 does not improve AUC. Reverting changes.
Training on augumented user 134171 10/50 current_auc = 0.6667567567567568
User 134171 AUC after training: 0.6662162162162163
User 134171 does not improve AUC. Reverting changes.
Training on augumented user 110160 11/50 current_auc = 0.6667567567567568
User 110160 AUC after training: 0.6667567567567568
User 110160 does not improve AUC. Reverting changes.
Training on augumented user 115599 12/50 current_auc = 0.6667567567567568
User 115599 AUC after training: 0.6667567567567568
User 115599 does not improve AUC. Reverting changes.
Training on augumented user 65423 13/50 current_auc = 0.6667567567567568
User 65423 AUC after training: 0.6667567567567568
User 65423 does not improve AUC. Reverting changes.
Training on augumented user 129364 14/50 current_auc = 0.6667567567567568
User 129364 AUC after training: 0.6662162162162163
User 129364 does not improve AUC. Reverting changes.
Training on augumented user 112945 15/50 current_auc = 0.6667567567567568
User 112945 AUC after training: 0.6667567567567568
User 112945 does not improve AUC. Reverting changes.
Training on augumented user 11691 16/50 current_auc = 0.6667567567567568
User 11691 AUC after training: 0.6667567567567568
User 11691 does not improve AUC. Reverting changes.
Training on augumented user 26372 17/50 current_auc = 0.6667567567567568
User 26372 AUC after training: 0.6662162162162163
User 26372 does not improve AUC. Reverting changes.
Training on augumented user 133736 18/50 current_auc = 0.6667567567567568
User 133736 AUC after training: 0.6678378378378379
User 133736 improves AUC. Keeping the model.
Training on augumented user 6555 19/50 current_auc = 0.6678378378378379
User 6555 AUC after training: 0.6678378378378379
User 6555 does not improve AUC. Reverting changes.
Training on augumented user 96094 20/50 current_auc = 0.6678378378378379
User 96094 AUC after training: 0.6686486486486487
User 96094 improves AUC. Keeping the model.
Training on augumented user 27341 21/50 current_auc = 0.6686486486486487
User 27341 AUC after training: 0.6683783783783783
User 27341 does not improve AUC. Reverting changes.
Training on augumented user 110915 22/50 current_auc = 0.6686486486486487
User 110915 AUC after training: 0.6686486486486487
User 110915 does not improve AUC. Reverting changes.
Training on augumented user 21069 23/50 current_auc = 0.6686486486486487
User 21069 AUC after training: 0.6683783783783783
User 21069 does not improve AUC. Reverting changes.
Training on augumented user 101553 24/50 current_auc = 0.6686486486486487
User 101553 AUC after training: 0.6678378378378379
User 101553 does not improve AUC. Reverting changes.
Training on augumented user 107139 25/50 current_auc = 0.6686486486486487
User 107139 AUC after training: 0.6683783783783783
User 107139 does not improve AUC. Reverting changes.
Training on augumented user 53196 26/50 current_auc = 0.6686486486486487
User 53196 AUC after training: 0.6686486486486487
User 53196 does not improve AUC. Reverting changes.
Training on augumented user 18123 27/50 current_auc = 0.6686486486486487
User 18123 AUC after training: 0.6686486486486487
User 18123 does not improve AUC. Reverting changes.
Training on augumented user 5652 28/50 current_auc = 0.6686486486486487
User 5652 AUC after training: 0.6686486486486487
User 5652 does not improve AUC. Reverting changes.
Training on augumented user 68801 29/50 current_auc = 0.6686486486486487
User 68801 AUC after training: 0.668918918918919
User 68801 improves AUC. Keeping the model.
Training on augumented user 73441 30/50 current_auc = 0.668918918918919
User 73441 AUC after training: 0.6651351351351352
User 73441 does not improve AUC. Reverting changes.
Training on augumented user 71665 31/50 current_auc = 0.668918918918919
User 71665 AUC after training: 0.6683783783783784
User 71665 does not improve AUC. Reverting changes.
Training on augumented user 69523 32/50 current_auc = 0.668918918918919
User 69523 AUC after training: 0.6678378378378379
User 69523 does not improve AUC. Reverting changes.
Training on augumented user 77082 33/50 current_auc = 0.668918918918919
User 77082 AUC after training: 0.6683783783783784
User 77082 does not improve AUC. Reverting changes.
Training on augumented user 106660 34/50 current_auc = 0.668918918918919
User 106660 AUC after training: 0.6683783783783784
User 106660 does not improve AUC. Reverting changes.
Training on augumented user 124611 35/50 current_auc = 0.668918918918919
User 124611 AUC after training: 0.6683783783783784
User 124611 does not improve AUC. Reverting changes.
Training on augumented user 121423 36/50 current_auc = 0.668918918918919
User 121423 AUC after training: 0.6681081081081082
User 121423 does not improve AUC. Reverting changes.
Training on augumented user 135099 37/50 current_auc = 0.668918918918919
User 135099 AUC after training: 0.6683783783783784
User 135099 does not improve AUC. Reverting changes.
Training on augumented user 87070 38/50 current_auc = 0.668918918918919
User 87070 AUC after training: 0.6683783783783784
User 87070 does not improve AUC. Reverting changes.
Training on augumented user 129146 39/50 current_auc = 0.668918918918919
User 129146 AUC after training: 0.6683783783783784
User 129146 does not improve AUC. Reverting changes.
Training on augumented user 44337 40/50 current_auc = 0.668918918918919
User 44337 AUC after training: 0.6683783783783784
User 44337 does not improve AUC. Reverting changes.
Training on augumented user 96190 41/50 current_auc = 0.668918918918919
User 96190 AUC after training: 0.668918918918919
User 96190 does not improve AUC. Reverting changes.
Training on augumented user 80537 42/50 current_auc = 0.668918918918919
User 80537 AUC after training: 0.6683783783783784
User 80537 does not improve AUC. Reverting changes.
Training on augumented user 37707 43/50 current_auc = 0.668918918918919
User 37707 AUC after training: 0.6672972972972974
User 37707 does not improve AUC. Reverting changes.
Training on augumented user 80838 44/50 current_auc = 0.668918918918919
User 80838 AUC after training: 0.6678378378378379
User 80838 does not improve AUC. Reverting changes.
Training on augumented user 91209 45/50 current_auc = 0.668918918918919
User 91209 AUC after training: 0.668918918918919
User 91209 does not improve AUC. Reverting changes.
Training on augumented user 38631 46/50 current_auc = 0.668918918918919
User 38631 AUC after training: 0.668918918918919
User 38631 does not improve AUC. Reverting changes.
Training on augumented user 30616 47/50 current_auc = 0.668918918918919
User 30616 AUC after training: 0.668918918918919
User 30616 does not improve AUC. Reverting changes.
Training on augumented user 117118 48/50 current_auc = 0.668918918918919
User 117118 AUC after training: 0.668918918918919
User 117118 does not improve AUC. Reverting changes.
Training on augumented user 76030 49/50 current_auc = 0.668918918918919
User 76030 AUC after training: 0.6675675675675676
User 76030 does not improve AUC. Reverting changes.
[2024-12-02 19:57:04.915744] start test user 75506 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:05.695524] start test user 75506 256/568 recall augumented users by random, augumented_users = [84936, 74668, 131046, 40326, 55757, 49383, 78052, 79520, 93276, 117779, 12366, 127519, 36654, 102104, 87851, 97943, 102004, 134504, 117983, 55330, 124535, 58937, 17516, 69894, 30466, 21372, 41098, 58369, 66339, 104676, 17334, 29406, 132027, 91278, 33985, 133875, 51273, 114803, 120676, 80545, 49054, 30341, 3910, 29588, 52531, 106772, 100013, 76155, 83286, 3706]
[2024-12-02 19:57:05.724812] user = 75506 Cloud 256/568
[2024-12-02 19:57:05.807454] user = 75506 Local 256/568
[2024-12-02 19:57:06.015977] user = 75506 Local+ 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:09.224598] user = 75506 MPDA- 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6127431520444621
Training on augumented user 84936 0/50 current_auc = 0.6127431520444621
User 84936 AUC after training: 0.6120033202208668
User 84936 does not improve AUC. Reverting changes.
Training on augumented user 74668 1/50 current_auc = 0.6127431520444621
User 74668 AUC after training: 0.6129777328665775
User 74668 improves AUC. Keeping the model.
Training on augumented user 131046 2/50 current_auc = 0.6129777328665775
User 131046 AUC after training: 0.6134829838680573
User 131046 improves AUC. Keeping the model.
Training on augumented user 40326 3/50 current_auc = 0.6134829838680573
User 40326 AUC after training: 0.6135190732253059
User 40326 improves AUC. Keeping the model.
Training on augumented user 55757 4/50 current_auc = 0.6135190732253059
User 55757 AUC after training: 0.6124363925078494
User 55757 does not improve AUC. Reverting changes.
Training on augumented user 49383 5/50 current_auc = 0.6135190732253059
User 49383 AUC after training: 0.6130860009383233
User 49383 does not improve AUC. Reverting changes.
Training on augumented user 78052 6/50 current_auc = 0.6135190732253059
User 78052 AUC after training: 0.6131942690100689
User 78052 does not improve AUC. Reverting changes.
Training on augumented user 79520 7/50 current_auc = 0.6135190732253059
User 79520 AUC after training: 0.6133205817604388
User 79520 does not improve AUC. Reverting changes.
Training on augumented user 93276 8/50 current_auc = 0.6135190732253059
User 93276 AUC after training: 0.6119672308636184
User 93276 does not improve AUC. Reverting changes.
Training on augumented user 117779 9/50 current_auc = 0.6135190732253059
User 117779 AUC after training: 0.6145656645855138
User 117779 improves AUC. Keeping the model.
Training on augumented user 12366 10/50 current_auc = 0.6145656645855138
User 12366 AUC after training: 0.6150348262297449
User 12366 improves AUC. Keeping the model.
Training on augumented user 127519 11/50 current_auc = 0.6150348262297449
User 127519 AUC after training: 0.6146739326572594
User 127519 does not improve AUC. Reverting changes.
Training on augumented user 36654 12/50 current_auc = 0.6150348262297449
User 36654 AUC after training: 0.6146739326572593
User 36654 does not improve AUC. Reverting changes.
Training on augumented user 102104 13/50 current_auc = 0.6150348262297449
User 102104 AUC after training: 0.6152874517304847
User 102104 improves AUC. Keeping the model.
Training on augumented user 87851 14/50 current_auc = 0.6152874517304847
User 87851 AUC after training: 0.614710022014508
User 87851 does not improve AUC. Reverting changes.
Training on augumented user 97943 15/50 current_auc = 0.6152874517304847
User 97943 AUC after training: 0.6152152730159876
User 97943 does not improve AUC. Reverting changes.
Training on augumented user 102004 16/50 current_auc = 0.6152874517304847
User 102004 AUC after training: 0.6116424266483813
User 102004 does not improve AUC. Reverting changes.
Training on augumented user 134504 17/50 current_auc = 0.6152874517304847
User 134504 AUC after training: 0.6147461113717565
User 134504 does not improve AUC. Reverting changes.
Training on augumented user 117983 18/50 current_auc = 0.6152874517304847
User 117983 AUC after training: 0.6144934858710167
User 117983 does not improve AUC. Reverting changes.
Training on augumented user 55330 19/50 current_auc = 0.6152874517304847
User 55330 AUC after training: 0.614782200729005
User 55330 does not improve AUC. Reverting changes.
Training on augumented user 124535 20/50 current_auc = 0.6152874517304847
User 124535 AUC after training: 0.6148543794435022
User 124535 does not improve AUC. Reverting changes.
Training on augumented user 58937 21/50 current_auc = 0.6152874517304847
User 58937 AUC after training: 0.6149265581579992
User 58937 does not improve AUC. Reverting changes.
Training on augumented user 17516 22/50 current_auc = 0.6152874517304847
User 17516 AUC after training: 0.6149626475152478
User 17516 does not improve AUC. Reverting changes.
Training on augumented user 69894 23/50 current_auc = 0.6152874517304847
User 69894 AUC after training: 0.6144213071565195
User 69894 does not improve AUC. Reverting changes.
Training on augumented user 30466 24/50 current_auc = 0.6152874517304847
User 30466 AUC after training: 0.6149987368724963
User 30466 does not improve AUC. Reverting changes.
Training on augumented user 21372 25/50 current_auc = 0.6152874517304847
User 21372 AUC after training: 0.6148543794435022
User 21372 does not improve AUC. Reverting changes.
Training on augumented user 41098 26/50 current_auc = 0.6152874517304847
User 41098 AUC after training: 0.6140604135840342
User 41098 does not improve AUC. Reverting changes.
Training on augumented user 58369 27/50 current_auc = 0.6152874517304847
User 58369 AUC after training: 0.6146378433000108
User 58369 does not improve AUC. Reverting changes.
Training on augumented user 66339 28/50 current_auc = 0.6152874517304847
User 66339 AUC after training: 0.6136634306543001
User 66339 does not improve AUC. Reverting changes.
Training on augumented user 104676 29/50 current_auc = 0.6152874517304847
User 104676 AUC after training: 0.6149987368724964
User 104676 does not improve AUC. Reverting changes.
Training on augumented user 17334 30/50 current_auc = 0.6152874517304847
User 17334 AUC after training: 0.6157566133747159
User 17334 improves AUC. Keeping the model.
Training on augumented user 29406 31/50 current_auc = 0.6157566133747159
User 29406 AUC after training: 0.6155761665884731
User 29406 does not improve AUC. Reverting changes.
Training on augumented user 132027 32/50 current_auc = 0.6157566133747159
User 132027 AUC after training: 0.6150348262297449
User 132027 does not improve AUC. Reverting changes.
Training on augumented user 91278 33/50 current_auc = 0.6157566133747159
User 91278 AUC after training: 0.6163701324479411
User 91278 improves AUC. Keeping the model.
Training on augumented user 33985 34/50 current_auc = 0.6163701324479411
User 33985 AUC after training: 0.6173806344509004
User 33985 improves AUC. Keeping the model.
Training on augumented user 133875 35/50 current_auc = 0.6173806344509004
User 133875 AUC after training: 0.6172001876646578
User 133875 does not improve AUC. Reverting changes.
Training on augumented user 51273 36/50 current_auc = 0.6173806344509004
User 51273 AUC after training: 0.6169836515211664
User 51273 does not improve AUC. Reverting changes.
Training on augumented user 114803 37/50 current_auc = 0.6173806344509004
User 114803 AUC after training: 0.6165144898769352
User 114803 does not improve AUC. Reverting changes.
Training on augumented user 120676 38/50 current_auc = 0.6173806344509004
User 120676 AUC after training: 0.6182467790248656
User 120676 improves AUC. Keeping the model.
Training on augumented user 80545 39/50 current_auc = 0.6182467790248656
User 80545 AUC after training: 0.6178497960951316
User 80545 does not improve AUC. Reverting changes.
Training on augumented user 49054 40/50 current_auc = 0.6182467790248656
User 49054 AUC after training: 0.6179219748096286
User 49054 does not improve AUC. Reverting changes.
Training on augumented user 30341 41/50 current_auc = 0.6182467790248656
User 30341 AUC after training: 0.6174167238081489
User 30341 does not improve AUC. Reverting changes.
Training on augumented user 3910 42/50 current_auc = 0.6182467790248656
User 3910 AUC after training: 0.6173445450936519
User 3910 does not improve AUC. Reverting changes.
Training on augumented user 29588 43/50 current_auc = 0.6182467790248656
User 29588 AUC after training: 0.6173806344509005
User 29588 does not improve AUC. Reverting changes.
Training on augumented user 52531 44/50 current_auc = 0.6182467790248656
User 52531 AUC after training: 0.6173806344509004
User 52531 does not improve AUC. Reverting changes.
Training on augumented user 106772 45/50 current_auc = 0.6182467790248656
User 106772 AUC after training: 0.6171640983074093
User 106772 does not improve AUC. Reverting changes.
Training on augumented user 100013 46/50 current_auc = 0.6182467790248656
User 100013 AUC after training: 0.6170558302356635
User 100013 does not improve AUC. Reverting changes.
Training on augumented user 76155 47/50 current_auc = 0.6182467790248656
User 76155 AUC after training: 0.6149446028366234
User 76155 does not improve AUC. Reverting changes.
Training on augumented user 83286 48/50 current_auc = 0.6182467790248656
User 83286 AUC after training: 0.6177054386661374
User 83286 does not improve AUC. Reverting changes.
Training on augumented user 3706 49/50 current_auc = 0.6182467790248656
User 3706 AUC after training: 0.6175069472012702
User 3706 does not improve AUC. Reverting changes.
[2024-12-02 19:57:41.612773] start test user 75572 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:42.130047] start test user 75572 257/568 recall augumented users by random, augumented_users = [48712, 18054, 6975, 48034, 66058, 108954, 108422, 47592, 118034, 89296, 106318, 14929, 25149, 1895, 50005, 125739, 25438, 17049, 45438, 107698, 85994, 76702, 108656, 78993, 77094, 35506, 113671, 66969, 137476, 12769, 13421, 76426, 127249, 110361, 131123, 66778, 25270, 11379, 85450, 66301, 61646, 56533, 113089, 8136, 35431, 96051, 134206, 131640, 74611, 50480]
[2024-12-02 19:57:42.151137] user = 75572 Cloud 257/568
[2024-12-02 19:57:42.177566] user = 75572 Local 257/568
[2024-12-02 19:57:42.361757] user = 75572 Local+ 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:44.028552] user = 75572 MPDA- 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 48712 0/50 current_auc = 0.6666666666666666
User 48712 AUC after training: 0.6666666666666666
User 48712 does not improve AUC. Reverting changes.
Training on augumented user 18054 1/50 current_auc = 0.6666666666666666
User 18054 AUC after training: 0.6666666666666666
User 18054 does not improve AUC. Reverting changes.
Training on augumented user 6975 2/50 current_auc = 0.6666666666666666
User 6975 AUC after training: 0.6666666666666666
User 6975 does not improve AUC. Reverting changes.
Training on augumented user 48034 3/50 current_auc = 0.6666666666666666
User 48034 AUC after training: 0.6666666666666666
User 48034 does not improve AUC. Reverting changes.
Training on augumented user 66058 4/50 current_auc = 0.6666666666666666
User 66058 AUC after training: 0.6666666666666666
User 66058 does not improve AUC. Reverting changes.
Training on augumented user 108954 5/50 current_auc = 0.6666666666666666
User 108954 AUC after training: 0.6666666666666666
User 108954 does not improve AUC. Reverting changes.
Training on augumented user 108422 6/50 current_auc = 0.6666666666666666
User 108422 AUC after training: 0.6666666666666666
User 108422 does not improve AUC. Reverting changes.
Training on augumented user 47592 7/50 current_auc = 0.6666666666666666
User 47592 AUC after training: 0.6666666666666666
User 47592 does not improve AUC. Reverting changes.
Training on augumented user 118034 8/50 current_auc = 0.6666666666666666
User 118034 AUC after training: 0.6666666666666666
User 118034 does not improve AUC. Reverting changes.
Training on augumented user 89296 9/50 current_auc = 0.6666666666666666
User 89296 AUC after training: 0.6666666666666666
User 89296 does not improve AUC. Reverting changes.
Training on augumented user 106318 10/50 current_auc = 0.6666666666666666
User 106318 AUC after training: 0.6666666666666666
User 106318 does not improve AUC. Reverting changes.
Training on augumented user 14929 11/50 current_auc = 0.6666666666666666
User 14929 AUC after training: 0.6666666666666666
User 14929 does not improve AUC. Reverting changes.
Training on augumented user 25149 12/50 current_auc = 0.6666666666666666
User 25149 AUC after training: 0.6666666666666666
User 25149 does not improve AUC. Reverting changes.
Training on augumented user 1895 13/50 current_auc = 0.6666666666666666
User 1895 AUC after training: 0.6666666666666666
User 1895 does not improve AUC. Reverting changes.
Training on augumented user 50005 14/50 current_auc = 0.6666666666666666
User 50005 AUC after training: 0.6666666666666666
User 50005 does not improve AUC. Reverting changes.
Training on augumented user 125739 15/50 current_auc = 0.6666666666666666
User 125739 AUC after training: 0.6666666666666666
User 125739 does not improve AUC. Reverting changes.
Training on augumented user 25438 16/50 current_auc = 0.6666666666666666
User 25438 AUC after training: 0.6666666666666666
User 25438 does not improve AUC. Reverting changes.
Training on augumented user 17049 17/50 current_auc = 0.6666666666666666
User 17049 AUC after training: 0.6666666666666666
User 17049 does not improve AUC. Reverting changes.
Training on augumented user 45438 18/50 current_auc = 0.6666666666666666
User 45438 AUC after training: 0.6666666666666666
User 45438 does not improve AUC. Reverting changes.
Training on augumented user 107698 19/50 current_auc = 0.6666666666666666
User 107698 AUC after training: 0.6666666666666666
User 107698 does not improve AUC. Reverting changes.
Training on augumented user 85994 20/50 current_auc = 0.6666666666666666
User 85994 AUC after training: 0.6666666666666666
User 85994 does not improve AUC. Reverting changes.
Training on augumented user 76702 21/50 current_auc = 0.6666666666666666
User 76702 AUC after training: 0.6666666666666666
User 76702 does not improve AUC. Reverting changes.
Training on augumented user 108656 22/50 current_auc = 0.6666666666666666
User 108656 AUC after training: 0.6666666666666666
User 108656 does not improve AUC. Reverting changes.
Training on augumented user 78993 23/50 current_auc = 0.6666666666666666
User 78993 AUC after training: 0.6666666666666666
User 78993 does not improve AUC. Reverting changes.
Training on augumented user 77094 24/50 current_auc = 0.6666666666666666
User 77094 AUC after training: 0.6666666666666666
User 77094 does not improve AUC. Reverting changes.
Training on augumented user 35506 25/50 current_auc = 0.6666666666666666
User 35506 AUC after training: 0.6666666666666666
User 35506 does not improve AUC. Reverting changes.
Training on augumented user 113671 26/50 current_auc = 0.6666666666666666
User 113671 AUC after training: 0.6666666666666666
User 113671 does not improve AUC. Reverting changes.
Training on augumented user 66969 27/50 current_auc = 0.6666666666666666
User 66969 AUC after training: 0.6666666666666666
User 66969 does not improve AUC. Reverting changes.
Training on augumented user 137476 28/50 current_auc = 0.6666666666666666
User 137476 AUC after training: 0.6666666666666666
User 137476 does not improve AUC. Reverting changes.
Training on augumented user 12769 29/50 current_auc = 0.6666666666666666
User 12769 AUC after training: 0.6666666666666666
User 12769 does not improve AUC. Reverting changes.
Training on augumented user 13421 30/50 current_auc = 0.6666666666666666
User 13421 AUC after training: 0.6666666666666666
User 13421 does not improve AUC. Reverting changes.
Training on augumented user 76426 31/50 current_auc = 0.6666666666666666
User 76426 AUC after training: 0.6666666666666666
User 76426 does not improve AUC. Reverting changes.
Training on augumented user 127249 32/50 current_auc = 0.6666666666666666
User 127249 AUC after training: 0.6666666666666666
User 127249 does not improve AUC. Reverting changes.
Training on augumented user 110361 33/50 current_auc = 0.6666666666666666
User 110361 AUC after training: 0.6666666666666666
User 110361 does not improve AUC. Reverting changes.
Training on augumented user 131123 34/50 current_auc = 0.6666666666666666
User 131123 AUC after training: 0.6666666666666666
User 131123 does not improve AUC. Reverting changes.
Training on augumented user 66778 35/50 current_auc = 0.6666666666666666
User 66778 AUC after training: 0.6666666666666666
User 66778 does not improve AUC. Reverting changes.
Training on augumented user 25270 36/50 current_auc = 0.6666666666666666
User 25270 AUC after training: 0.6666666666666666
User 25270 does not improve AUC. Reverting changes.
Training on augumented user 11379 37/50 current_auc = 0.6666666666666666
User 11379 AUC after training: 0.6666666666666666
User 11379 does not improve AUC. Reverting changes.
Training on augumented user 85450 38/50 current_auc = 0.6666666666666666
User 85450 AUC after training: 0.6666666666666666
User 85450 does not improve AUC. Reverting changes.
Training on augumented user 66301 39/50 current_auc = 0.6666666666666666
User 66301 AUC after training: 0.6666666666666666
User 66301 does not improve AUC. Reverting changes.
Training on augumented user 61646 40/50 current_auc = 0.6666666666666666
User 61646 AUC after training: 0.6666666666666666
User 61646 does not improve AUC. Reverting changes.
Training on augumented user 56533 41/50 current_auc = 0.6666666666666666
User 56533 AUC after training: 0.6666666666666666
User 56533 does not improve AUC. Reverting changes.
Training on augumented user 113089 42/50 current_auc = 0.6666666666666666
User 113089 AUC after training: 0.6666666666666666
User 113089 does not improve AUC. Reverting changes.
Training on augumented user 8136 43/50 current_auc = 0.6666666666666666
User 8136 AUC after training: 0.6666666666666666
User 8136 does not improve AUC. Reverting changes.
Training on augumented user 35431 44/50 current_auc = 0.6666666666666666
User 35431 AUC after training: 0.6666666666666666
User 35431 does not improve AUC. Reverting changes.
Training on augumented user 96051 45/50 current_auc = 0.6666666666666666
User 96051 AUC after training: 0.6666666666666666
User 96051 does not improve AUC. Reverting changes.
Training on augumented user 134206 46/50 current_auc = 0.6666666666666666
User 134206 AUC after training: 0.6666666666666666
User 134206 does not improve AUC. Reverting changes.
Training on augumented user 131640 47/50 current_auc = 0.6666666666666666
User 131640 AUC after training: 0.6666666666666666
User 131640 does not improve AUC. Reverting changes.
Training on augumented user 74611 48/50 current_auc = 0.6666666666666666
User 74611 AUC after training: 0.6666666666666666
User 74611 does not improve AUC. Reverting changes.
Training on augumented user 50480 49/50 current_auc = 0.6666666666666666
User 50480 AUC after training: 0.6666666666666666
User 50480 does not improve AUC. Reverting changes.
[2024-12-02 19:58:12.120349] start test user 75580 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:12.803694] start test user 75580 258/568 recall augumented users by random, augumented_users = [101975, 17907, 52923, 6526, 58778, 123566, 36842, 25200, 44066, 18124, 63448, 64755, 110410, 2035, 34607, 74261, 61387, 11812, 115125, 91290, 46519, 79792, 34241, 104669, 102314, 105251, 30454, 95834, 122870, 114674, 3842, 85988, 10892, 78158, 12566, 96763, 36488, 106977, 64916, 88649, 59144, 44496, 43836, 102313, 80848, 66944, 32774, 123524, 73939, 25948]
[2024-12-02 19:58:12.821627] user = 75580 Cloud 258/568
[2024-12-02 19:58:12.836392] user = 75580 Local 258/568
[2024-12-02 19:58:12.955684] user = 75580 Local+ 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:15.726785] user = 75580 MPDA- 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6619897959183674
Training on augumented user 101975 0/50 current_auc = 0.6619897959183674
User 101975 AUC after training: 0.6626275510204082
User 101975 improves AUC. Keeping the model.
Training on augumented user 17907 1/50 current_auc = 0.6626275510204082
User 17907 AUC after training: 0.6626275510204082
User 17907 does not improve AUC. Reverting changes.
Training on augumented user 52923 2/50 current_auc = 0.6626275510204082
User 52923 AUC after training: 0.6626275510204082
User 52923 does not improve AUC. Reverting changes.
Training on augumented user 6526 3/50 current_auc = 0.6626275510204082
User 6526 AUC after training: 0.6632653061224489
User 6526 improves AUC. Keeping the model.
Training on augumented user 58778 4/50 current_auc = 0.6632653061224489
User 58778 AUC after training: 0.6613520408163266
User 58778 does not improve AUC. Reverting changes.
Training on augumented user 123566 5/50 current_auc = 0.6632653061224489
User 123566 AUC after training: 0.6613520408163265
User 123566 does not improve AUC. Reverting changes.
Training on augumented user 36842 6/50 current_auc = 0.6632653061224489
User 36842 AUC after training: 0.6639030612244898
User 36842 improves AUC. Keeping the model.
Training on augumented user 25200 7/50 current_auc = 0.6639030612244898
User 25200 AUC after training: 0.6632653061224489
User 25200 does not improve AUC. Reverting changes.
Training on augumented user 44066 8/50 current_auc = 0.6639030612244898
User 44066 AUC after training: 0.6664540816326531
User 44066 improves AUC. Keeping the model.
Training on augumented user 18124 9/50 current_auc = 0.6664540816326531
User 18124 AUC after training: 0.6645408163265306
User 18124 does not improve AUC. Reverting changes.
Training on augumented user 63448 10/50 current_auc = 0.6664540816326531
User 63448 AUC after training: 0.6645408163265306
User 63448 does not improve AUC. Reverting changes.
Training on augumented user 64755 11/50 current_auc = 0.6664540816326531
User 64755 AUC after training: 0.6632653061224489
User 64755 does not improve AUC. Reverting changes.
Training on augumented user 110410 12/50 current_auc = 0.6664540816326531
User 110410 AUC after training: 0.6658163265306122
User 110410 does not improve AUC. Reverting changes.
Training on augumented user 2035 13/50 current_auc = 0.6664540816326531
User 2035 AUC after training: 0.6639030612244897
User 2035 does not improve AUC. Reverting changes.
Training on augumented user 34607 14/50 current_auc = 0.6664540816326531
User 34607 AUC after training: 0.6626275510204082
User 34607 does not improve AUC. Reverting changes.
Training on augumented user 74261 15/50 current_auc = 0.6664540816326531
User 74261 AUC after training: 0.6658163265306122
User 74261 does not improve AUC. Reverting changes.
Training on augumented user 61387 16/50 current_auc = 0.6664540816326531
User 61387 AUC after training: 0.6645408163265306
User 61387 does not improve AUC. Reverting changes.
Training on augumented user 11812 17/50 current_auc = 0.6664540816326531
User 11812 AUC after training: 0.6639030612244898
User 11812 does not improve AUC. Reverting changes.
Training on augumented user 115125 18/50 current_auc = 0.6664540816326531
User 115125 AUC after training: 0.6639030612244897
User 115125 does not improve AUC. Reverting changes.
Training on augumented user 91290 19/50 current_auc = 0.6664540816326531
User 91290 AUC after training: 0.6651785714285714
User 91290 does not improve AUC. Reverting changes.
Training on augumented user 46519 20/50 current_auc = 0.6664540816326531
User 46519 AUC after training: 0.6645408163265307
User 46519 does not improve AUC. Reverting changes.
Training on augumented user 79792 21/50 current_auc = 0.6664540816326531
User 79792 AUC after training: 0.6658163265306122
User 79792 does not improve AUC. Reverting changes.
Training on augumented user 34241 22/50 current_auc = 0.6664540816326531
User 34241 AUC after training: 0.6632653061224489
User 34241 does not improve AUC. Reverting changes.
Training on augumented user 104669 23/50 current_auc = 0.6664540816326531
User 104669 AUC after training: 0.6651785714285714
User 104669 does not improve AUC. Reverting changes.
Training on augumented user 102314 24/50 current_auc = 0.6664540816326531
User 102314 AUC after training: 0.6639030612244898
User 102314 does not improve AUC. Reverting changes.
Training on augumented user 105251 25/50 current_auc = 0.6664540816326531
User 105251 AUC after training: 0.6651785714285715
User 105251 does not improve AUC. Reverting changes.
Training on augumented user 30454 26/50 current_auc = 0.6664540816326531
User 30454 AUC after training: 0.6645408163265306
User 30454 does not improve AUC. Reverting changes.
Training on augumented user 95834 27/50 current_auc = 0.6664540816326531
User 95834 AUC after training: 0.6651785714285714
User 95834 does not improve AUC. Reverting changes.
Training on augumented user 122870 28/50 current_auc = 0.6664540816326531
User 122870 AUC after training: 0.6639030612244898
User 122870 does not improve AUC. Reverting changes.
Training on augumented user 114674 29/50 current_auc = 0.6664540816326531
User 114674 AUC after training: 0.6651785714285715
User 114674 does not improve AUC. Reverting changes.
Training on augumented user 3842 30/50 current_auc = 0.6664540816326531
User 3842 AUC after training: 0.6626275510204082
User 3842 does not improve AUC. Reverting changes.
Training on augumented user 85988 31/50 current_auc = 0.6664540816326531
User 85988 AUC after training: 0.6639030612244898
User 85988 does not improve AUC. Reverting changes.
Training on augumented user 10892 32/50 current_auc = 0.6664540816326531
User 10892 AUC after training: 0.6658163265306122
User 10892 does not improve AUC. Reverting changes.
Training on augumented user 78158 33/50 current_auc = 0.6664540816326531
User 78158 AUC after training: 0.6639030612244898
User 78158 does not improve AUC. Reverting changes.
Training on augumented user 12566 34/50 current_auc = 0.6664540816326531
User 12566 AUC after training: 0.6670918367346939
User 12566 improves AUC. Keeping the model.
Training on augumented user 96763 35/50 current_auc = 0.6670918367346939
User 96763 AUC after training: 0.6670918367346939
User 96763 does not improve AUC. Reverting changes.
Training on augumented user 36488 36/50 current_auc = 0.6670918367346939
User 36488 AUC after training: 0.6677295918367346
User 36488 improves AUC. Keeping the model.
Training on augumented user 106977 37/50 current_auc = 0.6677295918367346
User 106977 AUC after training: 0.6670918367346939
User 106977 does not improve AUC. Reverting changes.
Training on augumented user 64916 38/50 current_auc = 0.6677295918367346
User 64916 AUC after training: 0.6664540816326531
User 64916 does not improve AUC. Reverting changes.
Training on augumented user 88649 39/50 current_auc = 0.6677295918367346
User 88649 AUC after training: 0.6670918367346939
User 88649 does not improve AUC. Reverting changes.
Training on augumented user 59144 40/50 current_auc = 0.6677295918367346
User 59144 AUC after training: 0.6683673469387755
User 59144 improves AUC. Keeping the model.
Training on augumented user 44496 41/50 current_auc = 0.6683673469387755
User 44496 AUC after training: 0.6639030612244897
User 44496 does not improve AUC. Reverting changes.
Training on augumented user 43836 42/50 current_auc = 0.6683673469387755
User 43836 AUC after training: 0.6670918367346939
User 43836 does not improve AUC. Reverting changes.
Training on augumented user 102313 43/50 current_auc = 0.6683673469387755
User 102313 AUC after training: 0.6677295918367346
User 102313 does not improve AUC. Reverting changes.
Training on augumented user 80848 44/50 current_auc = 0.6683673469387755
User 80848 AUC after training: 0.6670918367346939
User 80848 does not improve AUC. Reverting changes.
Training on augumented user 66944 45/50 current_auc = 0.6683673469387755
User 66944 AUC after training: 0.6664540816326531
User 66944 does not improve AUC. Reverting changes.
Training on augumented user 32774 46/50 current_auc = 0.6683673469387755
User 32774 AUC after training: 0.6664540816326531
User 32774 does not improve AUC. Reverting changes.
Training on augumented user 123524 47/50 current_auc = 0.6683673469387755
User 123524 AUC after training: 0.6683673469387755
User 123524 does not improve AUC. Reverting changes.
Training on augumented user 73939 48/50 current_auc = 0.6683673469387755
User 73939 AUC after training: 0.6683673469387755
User 73939 does not improve AUC. Reverting changes.
Training on augumented user 25948 49/50 current_auc = 0.6683673469387755
User 25948 AUC after training: 0.6677295918367346
User 25948 does not improve AUC. Reverting changes.
[2024-12-02 19:58:45.610032] start test user 75618 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:46.224514] start test user 75618 259/568 recall augumented users by random, augumented_users = [4898, 90593, 69368, 25719, 6658, 39667, 130940, 15686, 113240, 16972, 65563, 123354, 37124, 75723, 7841, 68513, 44551, 28308, 46905, 103995, 27180, 702, 100525, 69584, 107899, 121024, 89509, 82647, 91679, 99972, 84631, 112490, 72463, 59047, 82242, 100648, 82599, 115358, 40107, 4995, 62580, 31726, 79180, 53742, 9709, 46371, 32757, 685, 35797, 56539]
[2024-12-02 19:58:46.243540] user = 75618 Cloud 259/568
[2024-12-02 19:58:46.282781] user = 75618 Local 259/568
[2024-12-02 19:58:46.481084] user = 75618 Local+ 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:48.772592] user = 75618 MPDA- 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4863053613053613
Training on augumented user 4898 0/50 current_auc = 0.4863053613053613
User 4898 AUC after training: 0.48543123543123534
User 4898 does not improve AUC. Reverting changes.
Training on augumented user 90593 1/50 current_auc = 0.4863053613053613
User 90593 AUC after training: 0.4871794871794872
User 90593 improves AUC. Keeping the model.
Training on augumented user 69368 2/50 current_auc = 0.4871794871794872
User 69368 AUC after training: 0.48805361305361306
User 69368 improves AUC. Keeping the model.
Training on augumented user 25719 3/50 current_auc = 0.48805361305361306
User 25719 AUC after training: 0.49067599067599066
User 25719 improves AUC. Keeping the model.
Training on augumented user 6658 4/50 current_auc = 0.49067599067599066
User 6658 AUC after training: 0.49184149184149184
User 6658 improves AUC. Keeping the model.
Training on augumented user 39667 5/50 current_auc = 0.49184149184149184
User 39667 AUC after training: 0.4895104895104895
User 39667 does not improve AUC. Reverting changes.
Training on augumented user 130940 6/50 current_auc = 0.49184149184149184
User 130940 AUC after training: 0.49125874125874125
User 130940 does not improve AUC. Reverting changes.
Training on augumented user 15686 7/50 current_auc = 0.49184149184149184
User 15686 AUC after training: 0.490967365967366
User 15686 does not improve AUC. Reverting changes.
Training on augumented user 113240 8/50 current_auc = 0.49184149184149184
User 113240 AUC after training: 0.490967365967366
User 113240 does not improve AUC. Reverting changes.
Training on augumented user 16972 9/50 current_auc = 0.49184149184149184
User 16972 AUC after training: 0.4915501165501166
User 16972 does not improve AUC. Reverting changes.
Training on augumented user 65563 10/50 current_auc = 0.49184149184149184
User 65563 AUC after training: 0.4915501165501165
User 65563 does not improve AUC. Reverting changes.
Training on augumented user 123354 11/50 current_auc = 0.49184149184149184
User 123354 AUC after training: 0.49125874125874125
User 123354 does not improve AUC. Reverting changes.
Training on augumented user 37124 12/50 current_auc = 0.49184149184149184
User 37124 AUC after training: 0.4915501165501165
User 37124 does not improve AUC. Reverting changes.
Training on augumented user 75723 13/50 current_auc = 0.49184149184149184
User 75723 AUC after training: 0.4903846153846154
User 75723 does not improve AUC. Reverting changes.
Training on augumented user 7841 14/50 current_auc = 0.49184149184149184
User 7841 AUC after training: 0.4915501165501166
User 7841 does not improve AUC. Reverting changes.
Training on augumented user 68513 15/50 current_auc = 0.49184149184149184
User 68513 AUC after training: 0.49067599067599066
User 68513 does not improve AUC. Reverting changes.
Training on augumented user 44551 16/50 current_auc = 0.49184149184149184
User 44551 AUC after training: 0.49067599067599066
User 44551 does not improve AUC. Reverting changes.
Training on augumented user 28308 17/50 current_auc = 0.49184149184149184
User 28308 AUC after training: 0.4903846153846154
User 28308 does not improve AUC. Reverting changes.
Training on augumented user 46905 18/50 current_auc = 0.49184149184149184
User 46905 AUC after training: 0.490967365967366
User 46905 does not improve AUC. Reverting changes.
Training on augumented user 103995 19/50 current_auc = 0.49184149184149184
User 103995 AUC after training: 0.49009324009324007
User 103995 does not improve AUC. Reverting changes.
Training on augumented user 27180 20/50 current_auc = 0.49184149184149184
User 27180 AUC after training: 0.4915501165501166
User 27180 does not improve AUC. Reverting changes.
Training on augumented user 702 21/50 current_auc = 0.49184149184149184
User 702 AUC after training: 0.49067599067599066
User 702 does not improve AUC. Reverting changes.
Training on augumented user 100525 22/50 current_auc = 0.49184149184149184
User 100525 AUC after training: 0.49009324009324007
User 100525 does not improve AUC. Reverting changes.
Training on augumented user 69584 23/50 current_auc = 0.49184149184149184
User 69584 AUC after training: 0.49067599067599066
User 69584 does not improve AUC. Reverting changes.
Training on augumented user 107899 24/50 current_auc = 0.49184149184149184
User 107899 AUC after training: 0.4903846153846154
User 107899 does not improve AUC. Reverting changes.
Training on augumented user 121024 25/50 current_auc = 0.49184149184149184
User 121024 AUC after training: 0.4895104895104895
User 121024 does not improve AUC. Reverting changes.
Training on augumented user 89509 26/50 current_auc = 0.49184149184149184
User 89509 AUC after training: 0.49009324009324007
User 89509 does not improve AUC. Reverting changes.
Training on augumented user 82647 27/50 current_auc = 0.49184149184149184
User 82647 AUC after training: 0.49009324009324007
User 82647 does not improve AUC. Reverting changes.
Training on augumented user 91679 28/50 current_auc = 0.49184149184149184
User 91679 AUC after training: 0.490967365967366
User 91679 does not improve AUC. Reverting changes.
Training on augumented user 99972 29/50 current_auc = 0.49184149184149184
User 99972 AUC after training: 0.4915501165501165
User 99972 does not improve AUC. Reverting changes.
Training on augumented user 84631 30/50 current_auc = 0.49184149184149184
User 84631 AUC after training: 0.490967365967366
User 84631 does not improve AUC. Reverting changes.
Training on augumented user 112490 31/50 current_auc = 0.49184149184149184
User 112490 AUC after training: 0.4909673659673659
User 112490 does not improve AUC. Reverting changes.
Training on augumented user 72463 32/50 current_auc = 0.49184149184149184
User 72463 AUC after training: 0.4909673659673659
User 72463 does not improve AUC. Reverting changes.
Training on augumented user 59047 33/50 current_auc = 0.49184149184149184
User 59047 AUC after training: 0.49009324009324007
User 59047 does not improve AUC. Reverting changes.
Training on augumented user 82242 34/50 current_auc = 0.49184149184149184
User 82242 AUC after training: 0.490967365967366
User 82242 does not improve AUC. Reverting changes.
Training on augumented user 100648 35/50 current_auc = 0.49184149184149184
User 100648 AUC after training: 0.49213286713286714
User 100648 improves AUC. Keeping the model.
Training on augumented user 82599 36/50 current_auc = 0.49213286713286714
User 82599 AUC after training: 0.4915501165501165
User 82599 does not improve AUC. Reverting changes.
Training on augumented user 115358 37/50 current_auc = 0.49213286713286714
User 115358 AUC after training: 0.49184149184149184
User 115358 does not improve AUC. Reverting changes.
Training on augumented user 40107 38/50 current_auc = 0.49213286713286714
User 40107 AUC after training: 0.49096736596736595
User 40107 does not improve AUC. Reverting changes.
Training on augumented user 4995 39/50 current_auc = 0.49213286713286714
User 4995 AUC after training: 0.490967365967366
User 4995 does not improve AUC. Reverting changes.
Training on augumented user 62580 40/50 current_auc = 0.49213286713286714
User 62580 AUC after training: 0.490967365967366
User 62580 does not improve AUC. Reverting changes.
Training on augumented user 31726 41/50 current_auc = 0.49213286713286714
User 31726 AUC after training: 0.4915501165501165
User 31726 does not improve AUC. Reverting changes.
Training on augumented user 79180 42/50 current_auc = 0.49213286713286714
User 79180 AUC after training: 0.4915501165501165
User 79180 does not improve AUC. Reverting changes.
Training on augumented user 53742 43/50 current_auc = 0.49213286713286714
User 53742 AUC after training: 0.4903846153846154
User 53742 does not improve AUC. Reverting changes.
Training on augumented user 9709 44/50 current_auc = 0.49213286713286714
User 9709 AUC after training: 0.4903846153846154
User 9709 does not improve AUC. Reverting changes.
Training on augumented user 46371 45/50 current_auc = 0.49213286713286714
User 46371 AUC after training: 0.49067599067599066
User 46371 does not improve AUC. Reverting changes.
Training on augumented user 32757 46/50 current_auc = 0.49213286713286714
User 32757 AUC after training: 0.49067599067599066
User 32757 does not improve AUC. Reverting changes.
Training on augumented user 685 47/50 current_auc = 0.49213286713286714
User 685 AUC after training: 0.49125874125874125
User 685 does not improve AUC. Reverting changes.
Training on augumented user 35797 48/50 current_auc = 0.49213286713286714
User 35797 AUC after training: 0.49155011655011654
User 35797 does not improve AUC. Reverting changes.
Training on augumented user 56539 49/50 current_auc = 0.49213286713286714
User 56539 AUC after training: 0.4915501165501165
User 56539 does not improve AUC. Reverting changes.
[2024-12-02 19:59:17.806600] start test user 75654 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:18.259899] start test user 75654 260/568 recall augumented users by random, augumented_users = [114807, 35280, 8015, 82997, 113076, 119461, 13527, 122214, 62034, 4511, 34629, 13394, 134589, 14466, 42145, 104406, 23333, 55741, 129472, 5948, 96488, 117528, 88675, 19517, 106222, 12649, 124253, 55992, 109895, 65531, 30110, 33865, 30509, 138258, 101859, 50800, 9826, 123288, 14620, 124917, 59913, 91468, 10126, 114649, 93746, 2456, 9523, 106421, 34554, 56017]
[2024-12-02 19:59:18.275099] user = 75654 Cloud 260/568
[2024-12-02 19:59:18.319483] user = 75654 Local 260/568
[2024-12-02 19:59:18.372285] user = 75654 Local+ 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:19.935764] user = 75654 MPDA- 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6609430816861157
Training on augumented user 114807 0/50 current_auc = 0.6609430816861157
User 114807 AUC after training: 0.6616337223148369
User 114807 improves AUC. Keeping the model.
Training on augumented user 35280 1/50 current_auc = 0.6616337223148369
User 35280 AUC after training: 0.6623481781376518
User 35280 improves AUC. Keeping the model.
Training on augumented user 8015 2/50 current_auc = 0.6623481781376518
User 8015 AUC after training: 0.6620623958085259
User 8015 does not improve AUC. Reverting changes.
Training on augumented user 82997 3/50 current_auc = 0.6623481781376518
User 82997 AUC after training: 0.6620623958085258
User 82997 does not improve AUC. Reverting changes.
Training on augumented user 113076 4/50 current_auc = 0.6623481781376518
User 113076 AUC after training: 0.6620623958085258
User 113076 does not improve AUC. Reverting changes.
Training on augumented user 119461 5/50 current_auc = 0.6623481781376518
User 119461 AUC after training: 0.6618242438675875
User 119461 does not improve AUC. Reverting changes.
Training on augumented user 13527 6/50 current_auc = 0.6623481781376518
User 13527 AUC after training: 0.6613955703738985
User 13527 does not improve AUC. Reverting changes.
Training on augumented user 122214 7/50 current_auc = 0.6623481781376518
User 122214 AUC after training: 0.6609192664920218
User 122214 does not improve AUC. Reverting changes.
Training on augumented user 62034 8/50 current_auc = 0.6623481781376518
User 62034 AUC after training: 0.6619433198380568
User 62034 does not improve AUC. Reverting changes.
Training on augumented user 4511 9/50 current_auc = 0.6623481781376518
User 4511 AUC after training: 0.6624434389140271
User 4511 improves AUC. Keeping the model.
Training on augumented user 34629 10/50 current_auc = 0.6624434389140271
User 34629 AUC after training: 0.6618242438675875
User 34629 does not improve AUC. Reverting changes.
Training on augumented user 13394 11/50 current_auc = 0.6624434389140271
User 13394 AUC after training: 0.6627292212431531
User 13394 improves AUC. Keeping the model.
Training on augumented user 134589 12/50 current_auc = 0.6627292212431531
User 134589 AUC after training: 0.6622052869730889
User 134589 does not improve AUC. Reverting changes.
Training on augumented user 14466 13/50 current_auc = 0.6627292212431531
User 14466 AUC after training: 0.6623005477494642
User 14466 does not improve AUC. Reverting changes.
Training on augumented user 42145 14/50 current_auc = 0.6627292212431531
User 42145 AUC after training: 0.6621100261967134
User 42145 does not improve AUC. Reverting changes.
Training on augumented user 104406 15/50 current_auc = 0.6627292212431531
User 104406 AUC after training: 0.6624910693022148
User 104406 does not improve AUC. Reverting changes.
Training on augumented user 23333 16/50 current_auc = 0.6627292212431531
User 23333 AUC after training: 0.6625386996904025
User 23333 does not improve AUC. Reverting changes.
Training on augumented user 55741 17/50 current_auc = 0.6627292212431531
User 55741 AUC after training: 0.6624910693022148
User 55741 does not improve AUC. Reverting changes.
Training on augumented user 129472 18/50 current_auc = 0.6627292212431531
User 129472 AUC after training: 0.6625863300785901
User 129472 does not improve AUC. Reverting changes.
Training on augumented user 5948 19/50 current_auc = 0.6627292212431531
User 5948 AUC after training: 0.6628244820195284
User 5948 improves AUC. Keeping the model.
Training on augumented user 96488 20/50 current_auc = 0.6628244820195284
User 96488 AUC after training: 0.6612288640152417
User 96488 does not improve AUC. Reverting changes.
Training on augumented user 117528 21/50 current_auc = 0.6628244820195284
User 117528 AUC after training: 0.6627530364372469
User 117528 does not improve AUC. Reverting changes.
Training on augumented user 88675 22/50 current_auc = 0.6628244820195284
User 88675 AUC after training: 0.6625386996904024
User 88675 does not improve AUC. Reverting changes.
Training on augumented user 19517 23/50 current_auc = 0.6628244820195284
User 19517 AUC after training: 0.662729221243153
User 19517 does not improve AUC. Reverting changes.
Training on augumented user 106222 24/50 current_auc = 0.6628244820195284
User 106222 AUC after training: 0.6623719933317456
User 106222 does not improve AUC. Reverting changes.
Training on augumented user 12649 25/50 current_auc = 0.6628244820195284
User 12649 AUC after training: 0.6622052869730889
User 12649 does not improve AUC. Reverting changes.
Training on augumented user 124253 26/50 current_auc = 0.6628244820195284
User 124253 AUC after training: 0.6623958085258395
User 124253 does not improve AUC. Reverting changes.
Training on augumented user 55992 27/50 current_auc = 0.6628244820195284
User 55992 AUC after training: 0.6620862110026197
User 55992 does not improve AUC. Reverting changes.
Training on augumented user 109895 28/50 current_auc = 0.6628244820195284
User 109895 AUC after training: 0.6615146463443677
User 109895 does not improve AUC. Reverting changes.
Training on augumented user 65531 29/50 current_auc = 0.6628244820195284
User 65531 AUC after training: 0.6622052869730888
User 65531 does not improve AUC. Reverting changes.
Training on augumented user 30110 30/50 current_auc = 0.6628244820195284
User 30110 AUC after training: 0.6626815908549655
User 30110 does not improve AUC. Reverting changes.
Training on augumented user 33865 31/50 current_auc = 0.6628244820195284
User 33865 AUC after training: 0.6624196237199333
User 33865 does not improve AUC. Reverting changes.
Training on augumented user 30509 32/50 current_auc = 0.6628244820195284
User 30509 AUC after training: 0.6627768516313407
User 30509 does not improve AUC. Reverting changes.
Training on augumented user 138258 33/50 current_auc = 0.6628244820195284
User 138258 AUC after training: 0.6627530364372469
User 138258 does not improve AUC. Reverting changes.
Training on augumented user 101859 34/50 current_auc = 0.6628244820195284
User 101859 AUC after training: 0.6627768516313407
User 101859 does not improve AUC. Reverting changes.
Training on augumented user 50800 35/50 current_auc = 0.6628244820195284
User 50800 AUC after training: 0.6629673731840914
User 50800 improves AUC. Keeping the model.
Training on augumented user 9826 36/50 current_auc = 0.6629673731840914
User 9826 AUC after training: 0.6627292212431531
User 9826 does not improve AUC. Reverting changes.
Training on augumented user 123288 37/50 current_auc = 0.6629673731840914
User 123288 AUC after training: 0.662324362943558
User 123288 does not improve AUC. Reverting changes.
Training on augumented user 14620 38/50 current_auc = 0.6629673731840914
User 14620 AUC after training: 0.6628482972136224
User 14620 does not improve AUC. Reverting changes.
Training on augumented user 124917 39/50 current_auc = 0.6629673731840914
User 124917 AUC after training: 0.6620623958085259
User 124917 does not improve AUC. Reverting changes.
Training on augumented user 59913 40/50 current_auc = 0.6629673731840914
User 59913 AUC after training: 0.6627768516313408
User 59913 does not improve AUC. Reverting changes.
Training on augumented user 91468 41/50 current_auc = 0.6629673731840914
User 91468 AUC after training: 0.6624910693022148
User 91468 does not improve AUC. Reverting changes.
Training on augumented user 10126 42/50 current_auc = 0.6629673731840914
User 10126 AUC after training: 0.6625386996904024
User 10126 does not improve AUC. Reverting changes.
Training on augumented user 114649 43/50 current_auc = 0.6629673731840914
User 114649 AUC after training: 0.6625386996904025
User 114649 does not improve AUC. Reverting changes.
Training on augumented user 93746 44/50 current_auc = 0.6629673731840914
User 93746 AUC after training: 0.6625863300785901
User 93746 does not improve AUC. Reverting changes.
Training on augumented user 2456 45/50 current_auc = 0.6629673731840914
User 2456 AUC after training: 0.6622529173612764
User 2456 does not improve AUC. Reverting changes.
Training on augumented user 9523 46/50 current_auc = 0.6629673731840914
User 9523 AUC after training: 0.6622052869730889
User 9523 does not improve AUC. Reverting changes.
Training on augumented user 106421 47/50 current_auc = 0.6629673731840914
User 106421 AUC after training: 0.6629911883781853
User 106421 improves AUC. Keeping the model.
Training on augumented user 34554 48/50 current_auc = 0.6629911883781853
User 34554 AUC after training: 0.6623958085258395
User 34554 does not improve AUC. Reverting changes.
Training on augumented user 56017 49/50 current_auc = 0.6629911883781853
User 56017 AUC after training: 0.663038818766373
User 56017 improves AUC. Keeping the model.
[2024-12-02 19:59:48.948895] start test user 75677 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:49.517709] start test user 75677 261/568 recall augumented users by random, augumented_users = [121732, 51018, 60438, 2863, 84232, 85322, 3117, 126218, 133159, 71016, 2399, 14965, 412, 79405, 125400, 59715, 104040, 129772, 71928, 3810, 64844, 99806, 20839, 113868, 114937, 131676, 24432, 127057, 114994, 67585, 16299, 134781, 13451, 23816, 6198, 114050, 94001, 41670, 129862, 4323, 126679, 71890, 82854, 25893, 45179, 18089, 84782, 74143, 116774, 47436]
[2024-12-02 19:59:49.532736] user = 75677 Cloud 261/568
[2024-12-02 19:59:49.546608] user = 75677 Local 261/568
[2024-12-02 19:59:49.571018] user = 75677 Local+ 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:51.299988] user = 75677 MPDA- 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5981507823613087
Training on augumented user 121732 0/50 current_auc = 0.5981507823613087
User 121732 AUC after training: 0.59850640113798
User 121732 improves AUC. Keeping the model.
Training on augumented user 51018 1/50 current_auc = 0.59850640113798
User 51018 AUC after training: 0.5977951635846372
User 51018 does not improve AUC. Reverting changes.
Training on augumented user 60438 2/50 current_auc = 0.59850640113798
User 60438 AUC after training: 0.5974395448079659
User 60438 does not improve AUC. Reverting changes.
Training on augumented user 2863 3/50 current_auc = 0.59850640113798
User 2863 AUC after training: 0.5956614509246088
User 2863 does not improve AUC. Reverting changes.
Training on augumented user 84232 4/50 current_auc = 0.59850640113798
User 84232 AUC after training: 0.5981507823613087
User 84232 does not improve AUC. Reverting changes.
Training on augumented user 85322 5/50 current_auc = 0.59850640113798
User 85322 AUC after training: 0.59850640113798
User 85322 does not improve AUC. Reverting changes.
Training on augumented user 3117 6/50 current_auc = 0.59850640113798
User 3117 AUC after training: 0.5974395448079659
User 3117 does not improve AUC. Reverting changes.
Training on augumented user 126218 7/50 current_auc = 0.59850640113798
User 126218 AUC after training: 0.5977951635846372
User 126218 does not improve AUC. Reverting changes.
Training on augumented user 133159 8/50 current_auc = 0.59850640113798
User 133159 AUC after training: 0.5974395448079659
User 133159 does not improve AUC. Reverting changes.
Training on augumented user 71016 9/50 current_auc = 0.59850640113798
User 71016 AUC after training: 0.5974395448079659
User 71016 does not improve AUC. Reverting changes.
Training on augumented user 2399 10/50 current_auc = 0.59850640113798
User 2399 AUC after training: 0.5981507823613086
User 2399 does not improve AUC. Reverting changes.
Training on augumented user 14965 11/50 current_auc = 0.59850640113798
User 14965 AUC after training: 0.5977951635846372
User 14965 does not improve AUC. Reverting changes.
Training on augumented user 412 12/50 current_auc = 0.59850640113798
User 412 AUC after training: 0.5963726884779517
User 412 does not improve AUC. Reverting changes.
Training on augumented user 79405 13/50 current_auc = 0.59850640113798
User 79405 AUC after training: 0.5992176386913228
User 79405 improves AUC. Keeping the model.
Training on augumented user 125400 14/50 current_auc = 0.5992176386913228
User 125400 AUC after training: 0.5999288762446657
User 125400 improves AUC. Keeping the model.
Training on augumented user 59715 15/50 current_auc = 0.5999288762446657
User 59715 AUC after training: 0.5992176386913228
User 59715 does not improve AUC. Reverting changes.
Training on augumented user 104040 16/50 current_auc = 0.5999288762446657
User 104040 AUC after training: 0.59850640113798
User 104040 does not improve AUC. Reverting changes.
Training on augumented user 129772 17/50 current_auc = 0.5999288762446657
User 129772 AUC after training: 0.6002844950213372
User 129772 improves AUC. Keeping the model.
Training on augumented user 71928 18/50 current_auc = 0.6002844950213372
User 71928 AUC after training: 0.5960170697012803
User 71928 does not improve AUC. Reverting changes.
Training on augumented user 3810 19/50 current_auc = 0.6002844950213372
User 3810 AUC after training: 0.5992176386913229
User 3810 does not improve AUC. Reverting changes.
Training on augumented user 64844 20/50 current_auc = 0.6002844950213372
User 64844 AUC after training: 0.5988620199146515
User 64844 does not improve AUC. Reverting changes.
Training on augumented user 99806 21/50 current_auc = 0.6002844950213372
User 99806 AUC after training: 0.5988620199146515
User 99806 does not improve AUC. Reverting changes.
Training on augumented user 20839 22/50 current_auc = 0.6002844950213372
User 20839 AUC after training: 0.5992176386913229
User 20839 does not improve AUC. Reverting changes.
Training on augumented user 113868 23/50 current_auc = 0.6002844950213372
User 113868 AUC after training: 0.5974395448079659
User 113868 does not improve AUC. Reverting changes.
Training on augumented user 114937 24/50 current_auc = 0.6002844950213372
User 114937 AUC after training: 0.5988620199146514
User 114937 does not improve AUC. Reverting changes.
Training on augumented user 131676 25/50 current_auc = 0.6002844950213372
User 131676 AUC after training: 0.5992176386913229
User 131676 does not improve AUC. Reverting changes.
Training on augumented user 24432 26/50 current_auc = 0.6002844950213372
User 24432 AUC after training: 0.5981507823613087
User 24432 does not improve AUC. Reverting changes.
Training on augumented user 127057 27/50 current_auc = 0.6002844950213372
User 127057 AUC after training: 0.5999288762446657
User 127057 does not improve AUC. Reverting changes.
Training on augumented user 114994 28/50 current_auc = 0.6002844950213372
User 114994 AUC after training: 0.5992176386913229
User 114994 does not improve AUC. Reverting changes.
Training on augumented user 67585 29/50 current_auc = 0.6002844950213372
User 67585 AUC after training: 0.5981507823613086
User 67585 does not improve AUC. Reverting changes.
Training on augumented user 16299 30/50 current_auc = 0.6002844950213372
User 16299 AUC after training: 0.5992176386913229
User 16299 does not improve AUC. Reverting changes.
Training on augumented user 134781 31/50 current_auc = 0.6002844950213372
User 134781 AUC after training: 0.5995732574679943
User 134781 does not improve AUC. Reverting changes.
Training on augumented user 13451 32/50 current_auc = 0.6002844950213372
User 13451 AUC after training: 0.6002844950213372
User 13451 does not improve AUC. Reverting changes.
Training on augumented user 23816 33/50 current_auc = 0.6002844950213372
User 23816 AUC after training: 0.59850640113798
User 23816 does not improve AUC. Reverting changes.
Training on augumented user 6198 34/50 current_auc = 0.6002844950213372
User 6198 AUC after training: 0.5992176386913229
User 6198 does not improve AUC. Reverting changes.
Training on augumented user 114050 35/50 current_auc = 0.6002844950213372
User 114050 AUC after training: 0.5988620199146515
User 114050 does not improve AUC. Reverting changes.
Training on augumented user 94001 36/50 current_auc = 0.6002844950213372
User 94001 AUC after training: 0.5988620199146515
User 94001 does not improve AUC. Reverting changes.
Training on augumented user 41670 37/50 current_auc = 0.6002844950213372
User 41670 AUC after training: 0.5992176386913228
User 41670 does not improve AUC. Reverting changes.
Training on augumented user 129862 38/50 current_auc = 0.6002844950213372
User 129862 AUC after training: 0.5999288762446657
User 129862 does not improve AUC. Reverting changes.
Training on augumented user 4323 39/50 current_auc = 0.6002844950213372
User 4323 AUC after training: 0.5988620199146515
User 4323 does not improve AUC. Reverting changes.
Training on augumented user 126679 40/50 current_auc = 0.6002844950213372
User 126679 AUC after training: 0.5981507823613086
User 126679 does not improve AUC. Reverting changes.
Training on augumented user 71890 41/50 current_auc = 0.6002844950213372
User 71890 AUC after training: 0.59850640113798
User 71890 does not improve AUC. Reverting changes.
Training on augumented user 82854 42/50 current_auc = 0.6002844950213372
User 82854 AUC after training: 0.5992176386913228
User 82854 does not improve AUC. Reverting changes.
Training on augumented user 25893 43/50 current_auc = 0.6002844950213372
User 25893 AUC after training: 0.5995732574679943
User 25893 does not improve AUC. Reverting changes.
Training on augumented user 45179 44/50 current_auc = 0.6002844950213372
User 45179 AUC after training: 0.5974395448079659
User 45179 does not improve AUC. Reverting changes.
Training on augumented user 18089 45/50 current_auc = 0.6002844950213372
User 18089 AUC after training: 0.5988620199146515
User 18089 does not improve AUC. Reverting changes.
Training on augumented user 84782 46/50 current_auc = 0.6002844950213372
User 84782 AUC after training: 0.5995732574679943
User 84782 does not improve AUC. Reverting changes.
Training on augumented user 74143 47/50 current_auc = 0.6002844950213372
User 74143 AUC after training: 0.5988620199146515
User 74143 does not improve AUC. Reverting changes.
Training on augumented user 116774 48/50 current_auc = 0.6002844950213372
User 116774 AUC after training: 0.5988620199146515
User 116774 does not improve AUC. Reverting changes.
Training on augumented user 47436 49/50 current_auc = 0.6002844950213372
User 47436 AUC after training: 0.5992176386913229
User 47436 does not improve AUC. Reverting changes.
[2024-12-02 20:00:18.814517] start test user 75689 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:19.259096] start test user 75689 262/568 recall augumented users by random, augumented_users = [131839, 35624, 93406, 127186, 7670, 95778, 92255, 50736, 29621, 87094, 33556, 128113, 101694, 68520, 114180, 84179, 10308, 111592, 2345, 26124, 111561, 57490, 106216, 72043, 65716, 115080, 130472, 68776, 122771, 10710, 20191, 65131, 13600, 118741, 34784, 75011, 129479, 40329, 87382, 74148, 63426, 2980, 57997, 7084, 36873, 66605, 33674, 28963, 47324, 44711]
[2024-12-02 20:00:19.273300] user = 75689 Cloud 262/568
[2024-12-02 20:00:19.288452] user = 75689 Local 262/568
[2024-12-02 20:00:19.313052] user = 75689 Local+ 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:21.200691] user = 75689 MPDA- 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7384615384615385
Training on augumented user 131839 0/50 current_auc = 0.7384615384615385
User 131839 AUC after training: 0.7378205128205129
User 131839 does not improve AUC. Reverting changes.
Training on augumented user 35624 1/50 current_auc = 0.7384615384615385
User 35624 AUC after training: 0.7378205128205129
User 35624 does not improve AUC. Reverting changes.
Training on augumented user 93406 2/50 current_auc = 0.7384615384615385
User 93406 AUC after training: 0.7378205128205129
User 93406 does not improve AUC. Reverting changes.
Training on augumented user 127186 3/50 current_auc = 0.7384615384615385
User 127186 AUC after training: 0.7384615384615385
User 127186 does not improve AUC. Reverting changes.
Training on augumented user 7670 4/50 current_auc = 0.7384615384615385
User 7670 AUC after training: 0.7448717948717949
User 7670 improves AUC. Keeping the model.
Training on augumented user 95778 5/50 current_auc = 0.7448717948717949
User 95778 AUC after training: 0.7461538461538462
User 95778 improves AUC. Keeping the model.
Training on augumented user 92255 6/50 current_auc = 0.7461538461538462
User 92255 AUC after training: 0.7512820512820513
User 92255 improves AUC. Keeping the model.
Training on augumented user 50736 7/50 current_auc = 0.7512820512820513
User 50736 AUC after training: 0.7525641025641026
User 50736 improves AUC. Keeping the model.
Training on augumented user 29621 8/50 current_auc = 0.7525641025641026
User 29621 AUC after training: 0.7474358974358976
User 29621 does not improve AUC. Reverting changes.
Training on augumented user 87094 9/50 current_auc = 0.7525641025641026
User 87094 AUC after training: 0.7410256410256411
User 87094 does not improve AUC. Reverting changes.
Training on augumented user 33556 10/50 current_auc = 0.7525641025641026
User 33556 AUC after training: 0.7512820512820513
User 33556 does not improve AUC. Reverting changes.
Training on augumented user 128113 11/50 current_auc = 0.7525641025641026
User 128113 AUC after training: 0.7532051282051282
User 128113 improves AUC. Keeping the model.
Training on augumented user 101694 12/50 current_auc = 0.7532051282051282
User 101694 AUC after training: 0.7538461538461538
User 101694 improves AUC. Keeping the model.
Training on augumented user 68520 13/50 current_auc = 0.7538461538461538
User 68520 AUC after training: 0.7519230769230769
User 68520 does not improve AUC. Reverting changes.
Training on augumented user 114180 14/50 current_auc = 0.7538461538461538
User 114180 AUC after training: 0.7493589743589744
User 114180 does not improve AUC. Reverting changes.
Training on augumented user 84179 15/50 current_auc = 0.7538461538461538
User 84179 AUC after training: 0.7538461538461538
User 84179 does not improve AUC. Reverting changes.
Training on augumented user 10308 16/50 current_auc = 0.7538461538461538
User 10308 AUC after training: 0.7544871794871795
User 10308 improves AUC. Keeping the model.
Training on augumented user 111592 17/50 current_auc = 0.7544871794871795
User 111592 AUC after training: 0.7544871794871795
User 111592 does not improve AUC. Reverting changes.
Training on augumented user 2345 18/50 current_auc = 0.7544871794871795
User 2345 AUC after training: 0.7525641025641026
User 2345 does not improve AUC. Reverting changes.
Training on augumented user 26124 19/50 current_auc = 0.7544871794871795
User 26124 AUC after training: 0.7519230769230769
User 26124 does not improve AUC. Reverting changes.
Training on augumented user 111561 20/50 current_auc = 0.7544871794871795
User 111561 AUC after training: 0.7532051282051282
User 111561 does not improve AUC. Reverting changes.
Training on augumented user 57490 21/50 current_auc = 0.7544871794871795
User 57490 AUC after training: 0.7532051282051282
User 57490 does not improve AUC. Reverting changes.
Training on augumented user 106216 22/50 current_auc = 0.7544871794871795
User 106216 AUC after training: 0.7544871794871795
User 106216 does not improve AUC. Reverting changes.
Training on augumented user 72043 23/50 current_auc = 0.7544871794871795
User 72043 AUC after training: 0.7557692307692307
User 72043 improves AUC. Keeping the model.
Training on augumented user 65716 24/50 current_auc = 0.7557692307692307
User 65716 AUC after training: 0.757051282051282
User 65716 improves AUC. Keeping the model.
Training on augumented user 115080 25/50 current_auc = 0.757051282051282
User 115080 AUC after training: 0.758974358974359
User 115080 improves AUC. Keeping the model.
Training on augumented user 130472 26/50 current_auc = 0.758974358974359
User 130472 AUC after training: 0.7557692307692307
User 130472 does not improve AUC. Reverting changes.
Training on augumented user 68776 27/50 current_auc = 0.758974358974359
User 68776 AUC after training: 0.7576923076923077
User 68776 does not improve AUC. Reverting changes.
Training on augumented user 122771 28/50 current_auc = 0.758974358974359
User 122771 AUC after training: 0.7583333333333334
User 122771 does not improve AUC. Reverting changes.
Training on augumented user 10710 29/50 current_auc = 0.758974358974359
User 10710 AUC after training: 0.7570512820512821
User 10710 does not improve AUC. Reverting changes.
Training on augumented user 20191 30/50 current_auc = 0.758974358974359
User 20191 AUC after training: 0.7576923076923077
User 20191 does not improve AUC. Reverting changes.
Training on augumented user 65131 31/50 current_auc = 0.758974358974359
User 65131 AUC after training: 0.7583333333333333
User 65131 does not improve AUC. Reverting changes.
Training on augumented user 13600 32/50 current_auc = 0.758974358974359
User 13600 AUC after training: 0.7596153846153846
User 13600 improves AUC. Keeping the model.
Training on augumented user 118741 33/50 current_auc = 0.7596153846153846
User 118741 AUC after training: 0.757051282051282
User 118741 does not improve AUC. Reverting changes.
Training on augumented user 34784 34/50 current_auc = 0.7596153846153846
User 34784 AUC after training: 0.7602564102564102
User 34784 improves AUC. Keeping the model.
Training on augumented user 75011 35/50 current_auc = 0.7602564102564102
User 75011 AUC after training: 0.7596153846153847
User 75011 does not improve AUC. Reverting changes.
Training on augumented user 129479 36/50 current_auc = 0.7602564102564102
User 129479 AUC after training: 0.7576923076923078
User 129479 does not improve AUC. Reverting changes.
Training on augumented user 40329 37/50 current_auc = 0.7602564102564102
User 40329 AUC after training: 0.7576923076923078
User 40329 does not improve AUC. Reverting changes.
Training on augumented user 87382 38/50 current_auc = 0.7602564102564102
User 87382 AUC after training: 0.7576923076923077
User 87382 does not improve AUC. Reverting changes.
Training on augumented user 74148 39/50 current_auc = 0.7602564102564102
User 74148 AUC after training: 0.7583333333333334
User 74148 does not improve AUC. Reverting changes.
Training on augumented user 63426 40/50 current_auc = 0.7602564102564102
User 63426 AUC after training: 0.7576923076923077
User 63426 does not improve AUC. Reverting changes.
Training on augumented user 2980 41/50 current_auc = 0.7602564102564102
User 2980 AUC after training: 0.760897435897436
User 2980 improves AUC. Keeping the model.
Training on augumented user 57997 42/50 current_auc = 0.760897435897436
User 57997 AUC after training: 0.7602564102564103
User 57997 does not improve AUC. Reverting changes.
Training on augumented user 7084 43/50 current_auc = 0.760897435897436
User 7084 AUC after training: 0.758974358974359
User 7084 does not improve AUC. Reverting changes.
Training on augumented user 36873 44/50 current_auc = 0.760897435897436
User 36873 AUC after training: 0.7576923076923078
User 36873 does not improve AUC. Reverting changes.
Training on augumented user 66605 45/50 current_auc = 0.760897435897436
User 66605 AUC after training: 0.7551282051282051
User 66605 does not improve AUC. Reverting changes.
Training on augumented user 33674 46/50 current_auc = 0.760897435897436
User 33674 AUC after training: 0.7596153846153847
User 33674 does not improve AUC. Reverting changes.
Training on augumented user 28963 47/50 current_auc = 0.760897435897436
User 28963 AUC after training: 0.758974358974359
User 28963 does not improve AUC. Reverting changes.
Training on augumented user 47324 48/50 current_auc = 0.760897435897436
User 47324 AUC after training: 0.7576923076923078
User 47324 does not improve AUC. Reverting changes.
Training on augumented user 44711 49/50 current_auc = 0.760897435897436
User 44711 AUC after training: 0.7596153846153846
User 44711 does not improve AUC. Reverting changes.
[2024-12-02 20:00:51.021222] start test user 75731 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:51.426793] start test user 75731 263/568 recall augumented users by random, augumented_users = [61964, 32325, 69329, 131944, 11128, 73272, 3621, 134428, 102202, 25131, 57532, 102002, 125348, 14568, 97131, 58996, 95679, 42595, 2721, 131811, 94473, 30608, 108483, 64384, 313, 115746, 81372, 19430, 101309, 86727, 102371, 12593, 41133, 28181, 56866, 99782, 111752, 37274, 135613, 3814, 63332, 77102, 6919, 72692, 100194, 6850, 35852, 41037, 39506, 74257]
[2024-12-02 20:00:51.441435] user = 75731 Cloud 263/568
[2024-12-02 20:00:51.453859] user = 75731 Local 263/568
[2024-12-02 20:00:51.539225] user = 75731 Local+ 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:54.155842] user = 75731 MPDA- 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7943661971830986
Training on augumented user 61964 0/50 current_auc = 0.7943661971830986
User 61964 AUC after training: 0.7943661971830986
User 61964 does not improve AUC. Reverting changes.
Training on augumented user 32325 1/50 current_auc = 0.7943661971830986
User 32325 AUC after training: 0.7943661971830986
User 32325 does not improve AUC. Reverting changes.
Training on augumented user 69329 2/50 current_auc = 0.7943661971830986
User 69329 AUC after training: 0.7943661971830986
User 69329 does not improve AUC. Reverting changes.
Training on augumented user 131944 3/50 current_auc = 0.7943661971830986
User 131944 AUC after training: 0.7943661971830986
User 131944 does not improve AUC. Reverting changes.
Training on augumented user 11128 4/50 current_auc = 0.7943661971830986
User 11128 AUC after training: 0.7943661971830986
User 11128 does not improve AUC. Reverting changes.
Training on augumented user 73272 5/50 current_auc = 0.7943661971830986
User 73272 AUC after training: 0.7943661971830986
User 73272 does not improve AUC. Reverting changes.
Training on augumented user 3621 6/50 current_auc = 0.7943661971830986
User 3621 AUC after training: 0.7943661971830986
User 3621 does not improve AUC. Reverting changes.
Training on augumented user 134428 7/50 current_auc = 0.7943661971830986
User 134428 AUC after training: 0.7943661971830986
User 134428 does not improve AUC. Reverting changes.
Training on augumented user 102202 8/50 current_auc = 0.7943661971830986
User 102202 AUC after training: 0.7943661971830986
User 102202 does not improve AUC. Reverting changes.
Training on augumented user 25131 9/50 current_auc = 0.7943661971830986
User 25131 AUC after training: 0.7943661971830986
User 25131 does not improve AUC. Reverting changes.
Training on augumented user 57532 10/50 current_auc = 0.7943661971830986
User 57532 AUC after training: 0.7943661971830986
User 57532 does not improve AUC. Reverting changes.
Training on augumented user 102002 11/50 current_auc = 0.7943661971830986
User 102002 AUC after training: 0.7943661971830986
User 102002 does not improve AUC. Reverting changes.
Training on augumented user 125348 12/50 current_auc = 0.7943661971830986
User 125348 AUC after training: 0.7943661971830986
User 125348 does not improve AUC. Reverting changes.
Training on augumented user 14568 13/50 current_auc = 0.7943661971830986
User 14568 AUC after training: 0.7943661971830986
User 14568 does not improve AUC. Reverting changes.
Training on augumented user 97131 14/50 current_auc = 0.7943661971830986
User 97131 AUC after training: 0.7943661971830986
User 97131 does not improve AUC. Reverting changes.
Training on augumented user 58996 15/50 current_auc = 0.7943661971830986
User 58996 AUC after training: 0.7943661971830986
User 58996 does not improve AUC. Reverting changes.
Training on augumented user 95679 16/50 current_auc = 0.7943661971830986
User 95679 AUC after training: 0.7943661971830986
User 95679 does not improve AUC. Reverting changes.
Training on augumented user 42595 17/50 current_auc = 0.7943661971830986
User 42595 AUC after training: 0.7943661971830986
User 42595 does not improve AUC. Reverting changes.
Training on augumented user 2721 18/50 current_auc = 0.7943661971830986
User 2721 AUC after training: 0.7943661971830986
User 2721 does not improve AUC. Reverting changes.
Training on augumented user 131811 19/50 current_auc = 0.7943661971830986
User 131811 AUC after training: 0.7943661971830986
User 131811 does not improve AUC. Reverting changes.
Training on augumented user 94473 20/50 current_auc = 0.7943661971830986
User 94473 AUC after training: 0.7943661971830986
User 94473 does not improve AUC. Reverting changes.
Training on augumented user 30608 21/50 current_auc = 0.7943661971830986
User 30608 AUC after training: 0.7943661971830986
User 30608 does not improve AUC. Reverting changes.
Training on augumented user 108483 22/50 current_auc = 0.7943661971830986
User 108483 AUC after training: 0.7943661971830986
User 108483 does not improve AUC. Reverting changes.
Training on augumented user 64384 23/50 current_auc = 0.7943661971830986
User 64384 AUC after training: 0.7943661971830986
User 64384 does not improve AUC. Reverting changes.
Training on augumented user 313 24/50 current_auc = 0.7943661971830986
User 313 AUC after training: 0.7943661971830986
User 313 does not improve AUC. Reverting changes.
Training on augumented user 115746 25/50 current_auc = 0.7943661971830986
User 115746 AUC after training: 0.7943661971830986
User 115746 does not improve AUC. Reverting changes.
Training on augumented user 81372 26/50 current_auc = 0.7943661971830986
User 81372 AUC after training: 0.7943661971830986
User 81372 does not improve AUC. Reverting changes.
Training on augumented user 19430 27/50 current_auc = 0.7943661971830986
User 19430 AUC after training: 0.7943661971830986
User 19430 does not improve AUC. Reverting changes.
Training on augumented user 101309 28/50 current_auc = 0.7943661971830986
User 101309 AUC after training: 0.7943661971830986
User 101309 does not improve AUC. Reverting changes.
Training on augumented user 86727 29/50 current_auc = 0.7943661971830986
User 86727 AUC after training: 0.7943661971830986
User 86727 does not improve AUC. Reverting changes.
Training on augumented user 102371 30/50 current_auc = 0.7943661971830986
User 102371 AUC after training: 0.7943661971830986
User 102371 does not improve AUC. Reverting changes.
Training on augumented user 12593 31/50 current_auc = 0.7943661971830986
User 12593 AUC after training: 0.7943661971830986
User 12593 does not improve AUC. Reverting changes.
Training on augumented user 41133 32/50 current_auc = 0.7943661971830986
User 41133 AUC after training: 0.7943661971830986
User 41133 does not improve AUC. Reverting changes.
Training on augumented user 28181 33/50 current_auc = 0.7943661971830986
User 28181 AUC after training: 0.7943661971830986
User 28181 does not improve AUC. Reverting changes.
Training on augumented user 56866 34/50 current_auc = 0.7943661971830986
User 56866 AUC after training: 0.7943661971830986
User 56866 does not improve AUC. Reverting changes.
Training on augumented user 99782 35/50 current_auc = 0.7943661971830986
User 99782 AUC after training: 0.7943661971830986
User 99782 does not improve AUC. Reverting changes.
Training on augumented user 111752 36/50 current_auc = 0.7943661971830986
User 111752 AUC after training: 0.7943661971830986
User 111752 does not improve AUC. Reverting changes.
Training on augumented user 37274 37/50 current_auc = 0.7943661971830986
User 37274 AUC after training: 0.7943661971830986
User 37274 does not improve AUC. Reverting changes.
Training on augumented user 135613 38/50 current_auc = 0.7943661971830986
User 135613 AUC after training: 0.7943661971830986
User 135613 does not improve AUC. Reverting changes.
Training on augumented user 3814 39/50 current_auc = 0.7943661971830986
User 3814 AUC after training: 0.7943661971830986
User 3814 does not improve AUC. Reverting changes.
Training on augumented user 63332 40/50 current_auc = 0.7943661971830986
User 63332 AUC after training: 0.7943661971830986
User 63332 does not improve AUC. Reverting changes.
Training on augumented user 77102 41/50 current_auc = 0.7943661971830986
User 77102 AUC after training: 0.7915492957746479
User 77102 does not improve AUC. Reverting changes.
Training on augumented user 6919 42/50 current_auc = 0.7943661971830986
User 6919 AUC after training: 0.7943661971830986
User 6919 does not improve AUC. Reverting changes.
Training on augumented user 72692 43/50 current_auc = 0.7943661971830986
User 72692 AUC after training: 0.7943661971830986
User 72692 does not improve AUC. Reverting changes.
Training on augumented user 100194 44/50 current_auc = 0.7943661971830986
User 100194 AUC after training: 0.7943661971830986
User 100194 does not improve AUC. Reverting changes.
Training on augumented user 6850 45/50 current_auc = 0.7943661971830986
User 6850 AUC after training: 0.7943661971830986
User 6850 does not improve AUC. Reverting changes.
Training on augumented user 35852 46/50 current_auc = 0.7943661971830986
User 35852 AUC after training: 0.7943661971830986
User 35852 does not improve AUC. Reverting changes.
Training on augumented user 41037 47/50 current_auc = 0.7943661971830986
User 41037 AUC after training: 0.7943661971830986
User 41037 does not improve AUC. Reverting changes.
Training on augumented user 39506 48/50 current_auc = 0.7943661971830986
User 39506 AUC after training: 0.7943661971830986
User 39506 does not improve AUC. Reverting changes.
Training on augumented user 74257 49/50 current_auc = 0.7943661971830986
User 74257 AUC after training: 0.7943661971830986
User 74257 does not improve AUC. Reverting changes.
[2024-12-02 20:01:25.026017] start test user 75775 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:25.755075] start test user 75775 264/568 recall augumented users by random, augumented_users = [109829, 126644, 127600, 100338, 21864, 95014, 108764, 87565, 36841, 61082, 45473, 99914, 52319, 93440, 27563, 74007, 65249, 89357, 7480, 105008, 96463, 30072, 14800, 16249, 56291, 37382, 14392, 118538, 60112, 27168, 9207, 86619, 69770, 39219, 69092, 71287, 59494, 53469, 10818, 96236, 136992, 109929, 57978, 37900, 73380, 79329, 28659, 84267, 102803, 46705]
[2024-12-02 20:01:25.770357] user = 75775 Cloud 264/568
[2024-12-02 20:01:25.784899] user = 75775 Local 264/568
[2024-12-02 20:01:25.835998] user = 75775 Local+ 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:27.998723] user = 75775 MPDA- 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8272727272727273
Training on augumented user 109829 0/50 current_auc = 0.8272727272727273
User 109829 AUC after training: 0.8272727272727273
User 109829 does not improve AUC. Reverting changes.
Training on augumented user 126644 1/50 current_auc = 0.8272727272727273
User 126644 AUC after training: 0.8272727272727273
User 126644 does not improve AUC. Reverting changes.
Training on augumented user 127600 2/50 current_auc = 0.8272727272727273
User 127600 AUC after training: 0.8272727272727273
User 127600 does not improve AUC. Reverting changes.
Training on augumented user 100338 3/50 current_auc = 0.8272727272727273
User 100338 AUC after training: 0.8272727272727273
User 100338 does not improve AUC. Reverting changes.
Training on augumented user 21864 4/50 current_auc = 0.8272727272727273
User 21864 AUC after training: 0.8272727272727273
User 21864 does not improve AUC. Reverting changes.
Training on augumented user 95014 5/50 current_auc = 0.8272727272727273
User 95014 AUC after training: 0.8272727272727273
User 95014 does not improve AUC. Reverting changes.
Training on augumented user 108764 6/50 current_auc = 0.8272727272727273
User 108764 AUC after training: 0.8263636363636364
User 108764 does not improve AUC. Reverting changes.
Training on augumented user 87565 7/50 current_auc = 0.8272727272727273
User 87565 AUC after training: 0.8254545454545454
User 87565 does not improve AUC. Reverting changes.
Training on augumented user 36841 8/50 current_auc = 0.8272727272727273
User 36841 AUC after training: 0.8254545454545454
User 36841 does not improve AUC. Reverting changes.
Training on augumented user 61082 9/50 current_auc = 0.8272727272727273
User 61082 AUC after training: 0.8272727272727273
User 61082 does not improve AUC. Reverting changes.
Training on augumented user 45473 10/50 current_auc = 0.8272727272727273
User 45473 AUC after training: 0.8290909090909091
User 45473 improves AUC. Keeping the model.
Training on augumented user 99914 11/50 current_auc = 0.8290909090909091
User 99914 AUC after training: 0.8272727272727273
User 99914 does not improve AUC. Reverting changes.
Training on augumented user 52319 12/50 current_auc = 0.8290909090909091
User 52319 AUC after training: 0.8290909090909091
User 52319 does not improve AUC. Reverting changes.
Training on augumented user 93440 13/50 current_auc = 0.8290909090909091
User 93440 AUC after training: 0.8290909090909091
User 93440 does not improve AUC. Reverting changes.
Training on augumented user 27563 14/50 current_auc = 0.8290909090909091
User 27563 AUC after training: 0.8281818181818181
User 27563 does not improve AUC. Reverting changes.
Training on augumented user 74007 15/50 current_auc = 0.8290909090909091
User 74007 AUC after training: 0.8290909090909091
User 74007 does not improve AUC. Reverting changes.
Training on augumented user 65249 16/50 current_auc = 0.8290909090909091
User 65249 AUC after training: 0.8281818181818181
User 65249 does not improve AUC. Reverting changes.
Training on augumented user 89357 17/50 current_auc = 0.8290909090909091
User 89357 AUC after training: 0.8254545454545454
User 89357 does not improve AUC. Reverting changes.
Training on augumented user 7480 18/50 current_auc = 0.8290909090909091
User 7480 AUC after training: 0.8290909090909091
User 7480 does not improve AUC. Reverting changes.
Training on augumented user 105008 19/50 current_auc = 0.8290909090909091
User 105008 AUC after training: 0.8290909090909091
User 105008 does not improve AUC. Reverting changes.
Training on augumented user 96463 20/50 current_auc = 0.8290909090909091
User 96463 AUC after training: 0.8290909090909091
User 96463 does not improve AUC. Reverting changes.
Training on augumented user 30072 21/50 current_auc = 0.8290909090909091
User 30072 AUC after training: 0.8281818181818181
User 30072 does not improve AUC. Reverting changes.
Training on augumented user 14800 22/50 current_auc = 0.8290909090909091
User 14800 AUC after training: 0.8281818181818181
User 14800 does not improve AUC. Reverting changes.
Training on augumented user 16249 23/50 current_auc = 0.8290909090909091
User 16249 AUC after training: 0.8272727272727273
User 16249 does not improve AUC. Reverting changes.
Training on augumented user 56291 24/50 current_auc = 0.8290909090909091
User 56291 AUC after training: 0.8290909090909091
User 56291 does not improve AUC. Reverting changes.
Training on augumented user 37382 25/50 current_auc = 0.8290909090909091
User 37382 AUC after training: 0.8290909090909091
User 37382 does not improve AUC. Reverting changes.
Training on augumented user 14392 26/50 current_auc = 0.8290909090909091
User 14392 AUC after training: 0.8290909090909091
User 14392 does not improve AUC. Reverting changes.
Training on augumented user 118538 27/50 current_auc = 0.8290909090909091
User 118538 AUC after training: 0.8272727272727273
User 118538 does not improve AUC. Reverting changes.
Training on augumented user 60112 28/50 current_auc = 0.8290909090909091
User 60112 AUC after training: 0.8263636363636363
User 60112 does not improve AUC. Reverting changes.
Training on augumented user 27168 29/50 current_auc = 0.8290909090909091
User 27168 AUC after training: 0.8281818181818181
User 27168 does not improve AUC. Reverting changes.
Training on augumented user 9207 30/50 current_auc = 0.8290909090909091
User 9207 AUC after training: 0.8254545454545454
User 9207 does not improve AUC. Reverting changes.
Training on augumented user 86619 31/50 current_auc = 0.8290909090909091
User 86619 AUC after training: 0.8281818181818181
User 86619 does not improve AUC. Reverting changes.
Training on augumented user 69770 32/50 current_auc = 0.8290909090909091
User 69770 AUC after training: 0.8281818181818181
User 69770 does not improve AUC. Reverting changes.
Training on augumented user 39219 33/50 current_auc = 0.8290909090909091
User 39219 AUC after training: 0.8290909090909091
User 39219 does not improve AUC. Reverting changes.
Training on augumented user 69092 34/50 current_auc = 0.8290909090909091
User 69092 AUC after training: 0.8281818181818181
User 69092 does not improve AUC. Reverting changes.
Training on augumented user 71287 35/50 current_auc = 0.8290909090909091
User 71287 AUC after training: 0.8290909090909091
User 71287 does not improve AUC. Reverting changes.
Training on augumented user 59494 36/50 current_auc = 0.8290909090909091
User 59494 AUC after training: 0.8290909090909091
User 59494 does not improve AUC. Reverting changes.
Training on augumented user 53469 37/50 current_auc = 0.8290909090909091
User 53469 AUC after training: 0.8281818181818181
User 53469 does not improve AUC. Reverting changes.
Training on augumented user 10818 38/50 current_auc = 0.8290909090909091
User 10818 AUC after training: 0.8290909090909091
User 10818 does not improve AUC. Reverting changes.
Training on augumented user 96236 39/50 current_auc = 0.8290909090909091
User 96236 AUC after training: 0.8272727272727273
User 96236 does not improve AUC. Reverting changes.
Training on augumented user 136992 40/50 current_auc = 0.8290909090909091
User 136992 AUC after training: 0.8290909090909091
User 136992 does not improve AUC. Reverting changes.
Training on augumented user 109929 41/50 current_auc = 0.8290909090909091
User 109929 AUC after training: 0.8290909090909091
User 109929 does not improve AUC. Reverting changes.
Training on augumented user 57978 42/50 current_auc = 0.8290909090909091
User 57978 AUC after training: 0.8290909090909091
User 57978 does not improve AUC. Reverting changes.
Training on augumented user 37900 43/50 current_auc = 0.8290909090909091
User 37900 AUC after training: 0.8290909090909091
User 37900 does not improve AUC. Reverting changes.
Training on augumented user 73380 44/50 current_auc = 0.8290909090909091
User 73380 AUC after training: 0.8272727272727273
User 73380 does not improve AUC. Reverting changes.
Training on augumented user 79329 45/50 current_auc = 0.8290909090909091
User 79329 AUC after training: 0.8290909090909091
User 79329 does not improve AUC. Reverting changes.
Training on augumented user 28659 46/50 current_auc = 0.8290909090909091
User 28659 AUC after training: 0.8309090909090908
User 28659 improves AUC. Keeping the model.
Training on augumented user 84267 47/50 current_auc = 0.8309090909090908
User 84267 AUC after training: 0.8290909090909091
User 84267 does not improve AUC. Reverting changes.
Training on augumented user 102803 48/50 current_auc = 0.8309090909090908
User 102803 AUC after training: 0.8309090909090908
User 102803 does not improve AUC. Reverting changes.
Training on augumented user 46705 49/50 current_auc = 0.8309090909090908
User 46705 AUC after training: 0.8318181818181818
User 46705 improves AUC. Keeping the model.
[2024-12-02 20:01:58.082336] start test user 75842 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:58.758162] start test user 75842 265/568 recall augumented users by random, augumented_users = [116673, 109692, 134306, 13573, 94239, 18315, 59926, 114309, 52547, 84239, 112597, 118490, 75910, 15015, 63850, 43439, 14313, 65929, 66830, 92591, 120, 59636, 51434, 27598, 63103, 127574, 110301, 12788, 63657, 71252, 110751, 56404, 56856, 82746, 64661, 72779, 80043, 62323, 43179, 54537, 93744, 87703, 135080, 39748, 98459, 39483, 42854, 12387, 76745, 221]
[2024-12-02 20:01:58.811049] user = 75842 Cloud 265/568
[2024-12-02 20:01:58.840795] user = 75842 Local 265/568
[2024-12-02 20:01:58.914466] user = 75842 Local+ 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:00.669643] user = 75842 MPDA- 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6692708333333333
Training on augumented user 116673 0/50 current_auc = 0.6692708333333333
User 116673 AUC after training: 0.6666666666666666
User 116673 does not improve AUC. Reverting changes.
Training on augumented user 109692 1/50 current_auc = 0.6692708333333333
User 109692 AUC after training: 0.671875
User 109692 improves AUC. Keeping the model.
Training on augumented user 134306 2/50 current_auc = 0.671875
User 134306 AUC after training: 0.671875
User 134306 does not improve AUC. Reverting changes.
Training on augumented user 13573 3/50 current_auc = 0.671875
User 13573 AUC after training: 0.6692708333333333
User 13573 does not improve AUC. Reverting changes.
Training on augumented user 94239 4/50 current_auc = 0.671875
User 94239 AUC after training: 0.6692708333333333
User 94239 does not improve AUC. Reverting changes.
Training on augumented user 18315 5/50 current_auc = 0.671875
User 18315 AUC after training: 0.6692708333333333
User 18315 does not improve AUC. Reverting changes.
Training on augumented user 59926 6/50 current_auc = 0.671875
User 59926 AUC after training: 0.6692708333333333
User 59926 does not improve AUC. Reverting changes.
Training on augumented user 114309 7/50 current_auc = 0.671875
User 114309 AUC after training: 0.6692708333333333
User 114309 does not improve AUC. Reverting changes.
Training on augumented user 52547 8/50 current_auc = 0.671875
User 52547 AUC after training: 0.6692708333333333
User 52547 does not improve AUC. Reverting changes.
Training on augumented user 84239 9/50 current_auc = 0.671875
User 84239 AUC after training: 0.6692708333333333
User 84239 does not improve AUC. Reverting changes.
Training on augumented user 112597 10/50 current_auc = 0.671875
User 112597 AUC after training: 0.6692708333333333
User 112597 does not improve AUC. Reverting changes.
Training on augumented user 118490 11/50 current_auc = 0.671875
User 118490 AUC after training: 0.6692708333333333
User 118490 does not improve AUC. Reverting changes.
Training on augumented user 75910 12/50 current_auc = 0.671875
User 75910 AUC after training: 0.6692708333333333
User 75910 does not improve AUC. Reverting changes.
Training on augumented user 15015 13/50 current_auc = 0.671875
User 15015 AUC after training: 0.6692708333333333
User 15015 does not improve AUC. Reverting changes.
Training on augumented user 63850 14/50 current_auc = 0.671875
User 63850 AUC after training: 0.671875
User 63850 does not improve AUC. Reverting changes.
Training on augumented user 43439 15/50 current_auc = 0.671875
User 43439 AUC after training: 0.6692708333333333
User 43439 does not improve AUC. Reverting changes.
Training on augumented user 14313 16/50 current_auc = 0.671875
User 14313 AUC after training: 0.671875
User 14313 does not improve AUC. Reverting changes.
Training on augumented user 65929 17/50 current_auc = 0.671875
User 65929 AUC after training: 0.671875
User 65929 does not improve AUC. Reverting changes.
Training on augumented user 66830 18/50 current_auc = 0.671875
User 66830 AUC after training: 0.6692708333333333
User 66830 does not improve AUC. Reverting changes.
Training on augumented user 92591 19/50 current_auc = 0.671875
User 92591 AUC after training: 0.6666666666666666
User 92591 does not improve AUC. Reverting changes.
Training on augumented user 120 20/50 current_auc = 0.671875
User 120 AUC after training: 0.6692708333333333
User 120 does not improve AUC. Reverting changes.
Training on augumented user 59636 21/50 current_auc = 0.671875
User 59636 AUC after training: 0.6692708333333333
User 59636 does not improve AUC. Reverting changes.
Training on augumented user 51434 22/50 current_auc = 0.671875
User 51434 AUC after training: 0.6692708333333333
User 51434 does not improve AUC. Reverting changes.
Training on augumented user 27598 23/50 current_auc = 0.671875
User 27598 AUC after training: 0.6666666666666666
User 27598 does not improve AUC. Reverting changes.
Training on augumented user 63103 24/50 current_auc = 0.671875
User 63103 AUC after training: 0.6692708333333333
User 63103 does not improve AUC. Reverting changes.
Training on augumented user 127574 25/50 current_auc = 0.671875
User 127574 AUC after training: 0.6692708333333333
User 127574 does not improve AUC. Reverting changes.
Training on augumented user 110301 26/50 current_auc = 0.671875
User 110301 AUC after training: 0.671875
User 110301 does not improve AUC. Reverting changes.
Training on augumented user 12788 27/50 current_auc = 0.671875
User 12788 AUC after training: 0.6692708333333333
User 12788 does not improve AUC. Reverting changes.
Training on augumented user 63657 28/50 current_auc = 0.671875
User 63657 AUC after training: 0.671875
User 63657 does not improve AUC. Reverting changes.
Training on augumented user 71252 29/50 current_auc = 0.671875
User 71252 AUC after training: 0.671875
User 71252 does not improve AUC. Reverting changes.
Training on augumented user 110751 30/50 current_auc = 0.671875
User 110751 AUC after training: 0.6692708333333333
User 110751 does not improve AUC. Reverting changes.
Training on augumented user 56404 31/50 current_auc = 0.671875
User 56404 AUC after training: 0.671875
User 56404 does not improve AUC. Reverting changes.
Training on augumented user 56856 32/50 current_auc = 0.671875
User 56856 AUC after training: 0.6692708333333333
User 56856 does not improve AUC. Reverting changes.
Training on augumented user 82746 33/50 current_auc = 0.671875
User 82746 AUC after training: 0.6692708333333333
User 82746 does not improve AUC. Reverting changes.
Training on augumented user 64661 34/50 current_auc = 0.671875
User 64661 AUC after training: 0.671875
User 64661 does not improve AUC. Reverting changes.
Training on augumented user 72779 35/50 current_auc = 0.671875
User 72779 AUC after training: 0.6692708333333333
User 72779 does not improve AUC. Reverting changes.
Training on augumented user 80043 36/50 current_auc = 0.671875
User 80043 AUC after training: 0.6692708333333333
User 80043 does not improve AUC. Reverting changes.
Training on augumented user 62323 37/50 current_auc = 0.671875
User 62323 AUC after training: 0.671875
User 62323 does not improve AUC. Reverting changes.
Training on augumented user 43179 38/50 current_auc = 0.671875
User 43179 AUC after training: 0.6666666666666666
User 43179 does not improve AUC. Reverting changes.
Training on augumented user 54537 39/50 current_auc = 0.671875
User 54537 AUC after training: 0.6692708333333333
User 54537 does not improve AUC. Reverting changes.
Training on augumented user 93744 40/50 current_auc = 0.671875
User 93744 AUC after training: 0.671875
User 93744 does not improve AUC. Reverting changes.
Training on augumented user 87703 41/50 current_auc = 0.671875
User 87703 AUC after training: 0.6692708333333333
User 87703 does not improve AUC. Reverting changes.
Training on augumented user 135080 42/50 current_auc = 0.671875
User 135080 AUC after training: 0.6692708333333333
User 135080 does not improve AUC. Reverting changes.
Training on augumented user 39748 43/50 current_auc = 0.671875
User 39748 AUC after training: 0.6692708333333333
User 39748 does not improve AUC. Reverting changes.
Training on augumented user 98459 44/50 current_auc = 0.671875
User 98459 AUC after training: 0.6692708333333333
User 98459 does not improve AUC. Reverting changes.
Training on augumented user 39483 45/50 current_auc = 0.671875
User 39483 AUC after training: 0.671875
User 39483 does not improve AUC. Reverting changes.
Training on augumented user 42854 46/50 current_auc = 0.671875
User 42854 AUC after training: 0.6666666666666666
User 42854 does not improve AUC. Reverting changes.
Training on augumented user 12387 47/50 current_auc = 0.671875
User 12387 AUC after training: 0.6692708333333333
User 12387 does not improve AUC. Reverting changes.
Training on augumented user 76745 48/50 current_auc = 0.671875
User 76745 AUC after training: 0.671875
User 76745 does not improve AUC. Reverting changes.
Training on augumented user 221 49/50 current_auc = 0.671875
User 221 AUC after training: 0.671875
User 221 does not improve AUC. Reverting changes.
[2024-12-02 20:02:26.538544] start test user 75856 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:27.062898] start test user 75856 266/568 recall augumented users by random, augumented_users = [28428, 46566, 46270, 94626, 64314, 39881, 125769, 121763, 11595, 50837, 51786, 12173, 5265, 56748, 10364, 91774, 124877, 10414, 132632, 125886, 103115, 75924, 57219, 70387, 70997, 121560, 22549, 43844, 87947, 137487, 68764, 135947, 94158, 118123, 43851, 807, 91048, 76061, 46259, 76351, 113466, 123458, 21048, 70986, 57441, 49588, 109422, 121081, 62218, 137770]
[2024-12-02 20:02:27.080208] user = 75856 Cloud 266/568
[2024-12-02 20:02:27.091262] user = 75856 Local 266/568
[2024-12-02 20:02:27.151488] user = 75856 Local+ 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:29.925769] user = 75856 MPDA- 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.62
Training on augumented user 28428 0/50 current_auc = 0.62
User 28428 AUC after training: 0.62
User 28428 does not improve AUC. Reverting changes.
Training on augumented user 46566 1/50 current_auc = 0.62
User 46566 AUC after training: 0.61
User 46566 does not improve AUC. Reverting changes.
Training on augumented user 46270 2/50 current_auc = 0.62
User 46270 AUC after training: 0.6
User 46270 does not improve AUC. Reverting changes.
Training on augumented user 94626 3/50 current_auc = 0.62
User 94626 AUC after training: 0.61
User 94626 does not improve AUC. Reverting changes.
Training on augumented user 64314 4/50 current_auc = 0.62
User 64314 AUC after training: 0.62
User 64314 does not improve AUC. Reverting changes.
Training on augumented user 39881 5/50 current_auc = 0.62
User 39881 AUC after training: 0.61
User 39881 does not improve AUC. Reverting changes.
Training on augumented user 125769 6/50 current_auc = 0.62
User 125769 AUC after training: 0.61
User 125769 does not improve AUC. Reverting changes.
Training on augumented user 121763 7/50 current_auc = 0.62
User 121763 AUC after training: 0.6
User 121763 does not improve AUC. Reverting changes.
Training on augumented user 11595 8/50 current_auc = 0.62
User 11595 AUC after training: 0.61
User 11595 does not improve AUC. Reverting changes.
Training on augumented user 50837 9/50 current_auc = 0.62
User 50837 AUC after training: 0.6
User 50837 does not improve AUC. Reverting changes.
Training on augumented user 51786 10/50 current_auc = 0.62
User 51786 AUC after training: 0.61
User 51786 does not improve AUC. Reverting changes.
Training on augumented user 12173 11/50 current_auc = 0.62
User 12173 AUC after training: 0.62
User 12173 does not improve AUC. Reverting changes.
Training on augumented user 5265 12/50 current_auc = 0.62
User 5265 AUC after training: 0.6
User 5265 does not improve AUC. Reverting changes.
Training on augumented user 56748 13/50 current_auc = 0.62
User 56748 AUC after training: 0.62
User 56748 does not improve AUC. Reverting changes.
Training on augumented user 10364 14/50 current_auc = 0.62
User 10364 AUC after training: 0.61
User 10364 does not improve AUC. Reverting changes.
Training on augumented user 91774 15/50 current_auc = 0.62
User 91774 AUC after training: 0.63
User 91774 improves AUC. Keeping the model.
Training on augumented user 124877 16/50 current_auc = 0.63
User 124877 AUC after training: 0.62
User 124877 does not improve AUC. Reverting changes.
Training on augumented user 10414 17/50 current_auc = 0.63
User 10414 AUC after training: 0.62
User 10414 does not improve AUC. Reverting changes.
Training on augumented user 132632 18/50 current_auc = 0.63
User 132632 AUC after training: 0.62
User 132632 does not improve AUC. Reverting changes.
Training on augumented user 125886 19/50 current_auc = 0.63
User 125886 AUC after training: 0.63
User 125886 does not improve AUC. Reverting changes.
Training on augumented user 103115 20/50 current_auc = 0.63
User 103115 AUC after training: 0.62
User 103115 does not improve AUC. Reverting changes.
Training on augumented user 75924 21/50 current_auc = 0.63
User 75924 AUC after training: 0.64
User 75924 improves AUC. Keeping the model.
Training on augumented user 57219 22/50 current_auc = 0.64
User 57219 AUC after training: 0.65
User 57219 improves AUC. Keeping the model.
Training on augumented user 70387 23/50 current_auc = 0.65
User 70387 AUC after training: 0.63
User 70387 does not improve AUC. Reverting changes.
Training on augumented user 70997 24/50 current_auc = 0.65
User 70997 AUC after training: 0.65
User 70997 does not improve AUC. Reverting changes.
Training on augumented user 121560 25/50 current_auc = 0.65
User 121560 AUC after training: 0.64
User 121560 does not improve AUC. Reverting changes.
Training on augumented user 22549 26/50 current_auc = 0.65
User 22549 AUC after training: 0.62
User 22549 does not improve AUC. Reverting changes.
Training on augumented user 43844 27/50 current_auc = 0.65
User 43844 AUC after training: 0.63
User 43844 does not improve AUC. Reverting changes.
Training on augumented user 87947 28/50 current_auc = 0.65
User 87947 AUC after training: 0.62
User 87947 does not improve AUC. Reverting changes.
Training on augumented user 137487 29/50 current_auc = 0.65
User 137487 AUC after training: 0.63
User 137487 does not improve AUC. Reverting changes.
Training on augumented user 68764 30/50 current_auc = 0.65
User 68764 AUC after training: 0.65
User 68764 does not improve AUC. Reverting changes.
Training on augumented user 135947 31/50 current_auc = 0.65
User 135947 AUC after training: 0.66
User 135947 improves AUC. Keeping the model.
Training on augumented user 94158 32/50 current_auc = 0.66
User 94158 AUC after training: 0.65
User 94158 does not improve AUC. Reverting changes.
Training on augumented user 118123 33/50 current_auc = 0.66
User 118123 AUC after training: 0.63
User 118123 does not improve AUC. Reverting changes.
Training on augumented user 43851 34/50 current_auc = 0.66
User 43851 AUC after training: 0.65
User 43851 does not improve AUC. Reverting changes.
Training on augumented user 807 35/50 current_auc = 0.66
User 807 AUC after training: 0.63
User 807 does not improve AUC. Reverting changes.
Training on augumented user 91048 36/50 current_auc = 0.66
User 91048 AUC after training: 0.65
User 91048 does not improve AUC. Reverting changes.
Training on augumented user 76061 37/50 current_auc = 0.66
User 76061 AUC after training: 0.65
User 76061 does not improve AUC. Reverting changes.
Training on augumented user 46259 38/50 current_auc = 0.66
User 46259 AUC after training: 0.66
User 46259 does not improve AUC. Reverting changes.
Training on augumented user 76351 39/50 current_auc = 0.66
User 76351 AUC after training: 0.66
User 76351 does not improve AUC. Reverting changes.
Training on augumented user 113466 40/50 current_auc = 0.66
User 113466 AUC after training: 0.66
User 113466 does not improve AUC. Reverting changes.
Training on augumented user 123458 41/50 current_auc = 0.66
User 123458 AUC after training: 0.66
User 123458 does not improve AUC. Reverting changes.
Training on augumented user 21048 42/50 current_auc = 0.66
User 21048 AUC after training: 0.65
User 21048 does not improve AUC. Reverting changes.
Training on augumented user 70986 43/50 current_auc = 0.66
User 70986 AUC after training: 0.65
User 70986 does not improve AUC. Reverting changes.
Training on augumented user 57441 44/50 current_auc = 0.66
User 57441 AUC after training: 0.62
User 57441 does not improve AUC. Reverting changes.
Training on augumented user 49588 45/50 current_auc = 0.66
User 49588 AUC after training: 0.63
User 49588 does not improve AUC. Reverting changes.
Training on augumented user 109422 46/50 current_auc = 0.66
User 109422 AUC after training: 0.66
User 109422 does not improve AUC. Reverting changes.
Training on augumented user 121081 47/50 current_auc = 0.66
User 121081 AUC after training: 0.65
User 121081 does not improve AUC. Reverting changes.
Training on augumented user 62218 48/50 current_auc = 0.66
User 62218 AUC after training: 0.64
User 62218 does not improve AUC. Reverting changes.
Training on augumented user 137770 49/50 current_auc = 0.66
User 137770 AUC after training: 0.63
User 137770 does not improve AUC. Reverting changes.
[2024-12-02 20:02:56.895045] start test user 75867 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:57.380333] start test user 75867 267/568 recall augumented users by random, augumented_users = [125020, 53803, 40771, 101456, 61606, 98380, 98791, 121072, 106398, 65722, 116539, 14408, 79213, 119991, 63670, 32821, 108567, 88609, 105395, 41329, 2395, 53129, 130336, 124964, 83023, 76417, 115258, 98461, 69825, 121401, 50906, 81789, 127413, 102808, 84171, 25921, 71353, 113607, 39761, 648, 116770, 44092, 18058, 94782, 54959, 131133, 60439, 9266, 14222, 94078]
[2024-12-02 20:02:57.401364] user = 75867 Cloud 267/568
[2024-12-02 20:02:57.417910] user = 75867 Local 267/568
[2024-12-02 20:02:57.506655] user = 75867 Local+ 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:00.984982] user = 75867 MPDA- 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7222222222222222
Training on augumented user 125020 0/50 current_auc = 0.7222222222222222
User 125020 AUC after training: 0.7222222222222222
User 125020 does not improve AUC. Reverting changes.
Training on augumented user 53803 1/50 current_auc = 0.7222222222222222
User 53803 AUC after training: 0.7222222222222222
User 53803 does not improve AUC. Reverting changes.
Training on augumented user 40771 2/50 current_auc = 0.7222222222222222
User 40771 AUC after training: 0.7222222222222222
User 40771 does not improve AUC. Reverting changes.
Training on augumented user 101456 3/50 current_auc = 0.7222222222222222
User 101456 AUC after training: 0.7166666666666666
User 101456 does not improve AUC. Reverting changes.
Training on augumented user 61606 4/50 current_auc = 0.7222222222222222
User 61606 AUC after training: 0.7222222222222222
User 61606 does not improve AUC. Reverting changes.
Training on augumented user 98380 5/50 current_auc = 0.7222222222222222
User 98380 AUC after training: 0.7222222222222222
User 98380 does not improve AUC. Reverting changes.
Training on augumented user 98791 6/50 current_auc = 0.7222222222222222
User 98791 AUC after training: 0.7222222222222222
User 98791 does not improve AUC. Reverting changes.
Training on augumented user 121072 7/50 current_auc = 0.7222222222222222
User 121072 AUC after training: 0.7222222222222222
User 121072 does not improve AUC. Reverting changes.
Training on augumented user 106398 8/50 current_auc = 0.7222222222222222
User 106398 AUC after training: 0.7222222222222222
User 106398 does not improve AUC. Reverting changes.
Training on augumented user 65722 9/50 current_auc = 0.7222222222222222
User 65722 AUC after training: 0.7222222222222221
User 65722 does not improve AUC. Reverting changes.
Training on augumented user 116539 10/50 current_auc = 0.7222222222222222
User 116539 AUC after training: 0.7222222222222222
User 116539 does not improve AUC. Reverting changes.
Training on augumented user 14408 11/50 current_auc = 0.7222222222222222
User 14408 AUC after training: 0.7222222222222222
User 14408 does not improve AUC. Reverting changes.
Training on augumented user 79213 12/50 current_auc = 0.7222222222222222
User 79213 AUC after training: 0.7222222222222222
User 79213 does not improve AUC. Reverting changes.
Training on augumented user 119991 13/50 current_auc = 0.7222222222222222
User 119991 AUC after training: 0.7222222222222222
User 119991 does not improve AUC. Reverting changes.
Training on augumented user 63670 14/50 current_auc = 0.7222222222222222
User 63670 AUC after training: 0.7222222222222222
User 63670 does not improve AUC. Reverting changes.
Training on augumented user 32821 15/50 current_auc = 0.7222222222222222
User 32821 AUC after training: 0.7222222222222222
User 32821 does not improve AUC. Reverting changes.
Training on augumented user 108567 16/50 current_auc = 0.7222222222222222
User 108567 AUC after training: 0.7222222222222222
User 108567 does not improve AUC. Reverting changes.
Training on augumented user 88609 17/50 current_auc = 0.7222222222222222
User 88609 AUC after training: 0.7222222222222222
User 88609 does not improve AUC. Reverting changes.
Training on augumented user 105395 18/50 current_auc = 0.7222222222222222
User 105395 AUC after training: 0.7222222222222222
User 105395 does not improve AUC. Reverting changes.
Training on augumented user 41329 19/50 current_auc = 0.7222222222222222
User 41329 AUC after training: 0.7222222222222222
User 41329 does not improve AUC. Reverting changes.
Training on augumented user 2395 20/50 current_auc = 0.7222222222222222
User 2395 AUC after training: 0.7222222222222221
User 2395 does not improve AUC. Reverting changes.
Training on augumented user 53129 21/50 current_auc = 0.7222222222222222
User 53129 AUC after training: 0.7277777777777777
User 53129 improves AUC. Keeping the model.
Training on augumented user 130336 22/50 current_auc = 0.7277777777777777
User 130336 AUC after training: 0.7277777777777777
User 130336 does not improve AUC. Reverting changes.
Training on augumented user 124964 23/50 current_auc = 0.7277777777777777
User 124964 AUC after training: 0.7277777777777777
User 124964 does not improve AUC. Reverting changes.
Training on augumented user 83023 24/50 current_auc = 0.7277777777777777
User 83023 AUC after training: 0.7277777777777777
User 83023 does not improve AUC. Reverting changes.
Training on augumented user 76417 25/50 current_auc = 0.7277777777777777
User 76417 AUC after training: 0.7277777777777777
User 76417 does not improve AUC. Reverting changes.
Training on augumented user 115258 26/50 current_auc = 0.7277777777777777
User 115258 AUC after training: 0.7277777777777777
User 115258 does not improve AUC. Reverting changes.
Training on augumented user 98461 27/50 current_auc = 0.7277777777777777
User 98461 AUC after training: 0.7277777777777777
User 98461 does not improve AUC. Reverting changes.
Training on augumented user 69825 28/50 current_auc = 0.7277777777777777
User 69825 AUC after training: 0.7277777777777777
User 69825 does not improve AUC. Reverting changes.
Training on augumented user 121401 29/50 current_auc = 0.7277777777777777
User 121401 AUC after training: 0.7222222222222222
User 121401 does not improve AUC. Reverting changes.
Training on augumented user 50906 30/50 current_auc = 0.7277777777777777
User 50906 AUC after training: 0.7277777777777777
User 50906 does not improve AUC. Reverting changes.
Training on augumented user 81789 31/50 current_auc = 0.7277777777777777
User 81789 AUC after training: 0.7277777777777777
User 81789 does not improve AUC. Reverting changes.
Training on augumented user 127413 32/50 current_auc = 0.7277777777777777
User 127413 AUC after training: 0.7277777777777777
User 127413 does not improve AUC. Reverting changes.
Training on augumented user 102808 33/50 current_auc = 0.7277777777777777
User 102808 AUC after training: 0.7277777777777777
User 102808 does not improve AUC. Reverting changes.
Training on augumented user 84171 34/50 current_auc = 0.7277777777777777
User 84171 AUC after training: 0.7277777777777777
User 84171 does not improve AUC. Reverting changes.
Training on augumented user 25921 35/50 current_auc = 0.7277777777777777
User 25921 AUC after training: 0.7277777777777777
User 25921 does not improve AUC. Reverting changes.
Training on augumented user 71353 36/50 current_auc = 0.7277777777777777
User 71353 AUC after training: 0.7277777777777777
User 71353 does not improve AUC. Reverting changes.
Training on augumented user 113607 37/50 current_auc = 0.7277777777777777
User 113607 AUC after training: 0.7277777777777777
User 113607 does not improve AUC. Reverting changes.
Training on augumented user 39761 38/50 current_auc = 0.7277777777777777
User 39761 AUC after training: 0.7277777777777777
User 39761 does not improve AUC. Reverting changes.
Training on augumented user 648 39/50 current_auc = 0.7277777777777777
User 648 AUC after training: 0.7277777777777777
User 648 does not improve AUC. Reverting changes.
Training on augumented user 116770 40/50 current_auc = 0.7277777777777777
User 116770 AUC after training: 0.7277777777777777
User 116770 does not improve AUC. Reverting changes.
Training on augumented user 44092 41/50 current_auc = 0.7277777777777777
User 44092 AUC after training: 0.7277777777777777
User 44092 does not improve AUC. Reverting changes.
Training on augumented user 18058 42/50 current_auc = 0.7277777777777777
User 18058 AUC after training: 0.7222222222222222
User 18058 does not improve AUC. Reverting changes.
Training on augumented user 94782 43/50 current_auc = 0.7277777777777777
User 94782 AUC after training: 0.7277777777777777
User 94782 does not improve AUC. Reverting changes.
Training on augumented user 54959 44/50 current_auc = 0.7277777777777777
User 54959 AUC after training: 0.7277777777777777
User 54959 does not improve AUC. Reverting changes.
Training on augumented user 131133 45/50 current_auc = 0.7277777777777777
User 131133 AUC after training: 0.7277777777777777
User 131133 does not improve AUC. Reverting changes.
Training on augumented user 60439 46/50 current_auc = 0.7277777777777777
User 60439 AUC after training: 0.7277777777777777
User 60439 does not improve AUC. Reverting changes.
Training on augumented user 9266 47/50 current_auc = 0.7277777777777777
User 9266 AUC after training: 0.7277777777777777
User 9266 does not improve AUC. Reverting changes.
Training on augumented user 14222 48/50 current_auc = 0.7277777777777777
User 14222 AUC after training: 0.7277777777777777
User 14222 does not improve AUC. Reverting changes.
Training on augumented user 94078 49/50 current_auc = 0.7277777777777777
User 94078 AUC after training: 0.7277777777777777
User 94078 does not improve AUC. Reverting changes.
[2024-12-02 20:03:30.750013] start test user 75948 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:31.164127] start test user 75948 268/568 recall augumented users by random, augumented_users = [47257, 14006, 125406, 62292, 40563, 12226, 119845, 83742, 69921, 18296, 112351, 41334, 34737, 15503, 82189, 41875, 124957, 60370, 24638, 118263, 76574, 115593, 2061, 47153, 33230, 44178, 109603, 989, 53876, 7542, 61920, 55664, 102583, 75596, 33820, 69882, 67057, 62491, 63, 21205, 116272, 26834, 96133, 21120, 66097, 125266, 79856, 49086, 87681, 118612]
[2024-12-02 20:03:31.179434] user = 75948 Cloud 268/568
[2024-12-02 20:03:31.208311] user = 75948 Local 268/568
[2024-12-02 20:03:31.259373] user = 75948 Local+ 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:33.780157] user = 75948 MPDA- 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.787114337568058
Training on augumented user 47257 0/50 current_auc = 0.787114337568058
User 47257 AUC after training: 0.7872958257713248
User 47257 improves AUC. Keeping the model.
Training on augumented user 14006 1/50 current_auc = 0.7872958257713248
User 14006 AUC after training: 0.7875226860254084
User 14006 improves AUC. Keeping the model.
Training on augumented user 125406 2/50 current_auc = 0.7875226860254084
User 125406 AUC after training: 0.7874773139745916
User 125406 does not improve AUC. Reverting changes.
Training on augumented user 62292 3/50 current_auc = 0.7875226860254084
User 62292 AUC after training: 0.787114337568058
User 62292 does not improve AUC. Reverting changes.
Training on augumented user 40563 4/50 current_auc = 0.7875226860254084
User 40563 AUC after training: 0.7873865698729583
User 40563 does not improve AUC. Reverting changes.
Training on augumented user 12226 5/50 current_auc = 0.7875226860254084
User 12226 AUC after training: 0.7872504537205082
User 12226 does not improve AUC. Reverting changes.
Training on augumented user 119845 6/50 current_auc = 0.7875226860254084
User 119845 AUC after training: 0.787431941923775
User 119845 does not improve AUC. Reverting changes.
Training on augumented user 83742 7/50 current_auc = 0.7875226860254084
User 83742 AUC after training: 0.78736388384755
User 83742 does not improve AUC. Reverting changes.
Training on augumented user 69921 8/50 current_auc = 0.7875226860254084
User 69921 AUC after training: 0.7873638838475499
User 69921 does not improve AUC. Reverting changes.
Training on augumented user 18296 9/50 current_auc = 0.7875226860254084
User 18296 AUC after training: 0.78736388384755
User 18296 does not improve AUC. Reverting changes.
Training on augumented user 112351 10/50 current_auc = 0.7875226860254084
User 112351 AUC after training: 0.7863883847549908
User 112351 does not improve AUC. Reverting changes.
Training on augumented user 41334 11/50 current_auc = 0.7875226860254084
User 41334 AUC after training: 0.7873865698729583
User 41334 does not improve AUC. Reverting changes.
Training on augumented user 34737 12/50 current_auc = 0.7875226860254084
User 34737 AUC after training: 0.7872504537205082
User 34737 does not improve AUC. Reverting changes.
Training on augumented user 15503 13/50 current_auc = 0.7875226860254084
User 15503 AUC after training: 0.7868874773139746
User 15503 does not improve AUC. Reverting changes.
Training on augumented user 82189 14/50 current_auc = 0.7875226860254084
User 82189 AUC after training: 0.7872504537205082
User 82189 does not improve AUC. Reverting changes.
Training on augumented user 41875 15/50 current_auc = 0.7875226860254084
User 41875 AUC after training: 0.7875226860254084
User 41875 does not improve AUC. Reverting changes.
Training on augumented user 124957 16/50 current_auc = 0.7875226860254084
User 124957 AUC after training: 0.7863430127041742
User 124957 does not improve AUC. Reverting changes.
Training on augumented user 60370 17/50 current_auc = 0.7875226860254084
User 60370 AUC after training: 0.7872504537205082
User 60370 does not improve AUC. Reverting changes.
Training on augumented user 24638 18/50 current_auc = 0.7875226860254084
User 24638 AUC after training: 0.7873411978221416
User 24638 does not improve AUC. Reverting changes.
Training on augumented user 118263 19/50 current_auc = 0.7875226860254084
User 118263 AUC after training: 0.7872958257713248
User 118263 does not improve AUC. Reverting changes.
Training on augumented user 76574 20/50 current_auc = 0.7875226860254084
User 76574 AUC after training: 0.7873865698729583
User 76574 does not improve AUC. Reverting changes.
Training on augumented user 115593 21/50 current_auc = 0.7875226860254084
User 115593 AUC after training: 0.7874546279491833
User 115593 does not improve AUC. Reverting changes.
Training on augumented user 2061 22/50 current_auc = 0.7875226860254084
User 2061 AUC after training: 0.7874092558983666
User 2061 does not improve AUC. Reverting changes.
Training on augumented user 47153 23/50 current_auc = 0.7875226860254084
User 47153 AUC after training: 0.7872050816696915
User 47153 does not improve AUC. Reverting changes.
Training on augumented user 33230 24/50 current_auc = 0.7875226860254084
User 33230 AUC after training: 0.7872958257713248
User 33230 does not improve AUC. Reverting changes.
Training on augumented user 44178 25/50 current_auc = 0.7875226860254084
User 44178 AUC after training: 0.7875226860254083
User 44178 does not improve AUC. Reverting changes.
Training on augumented user 109603 26/50 current_auc = 0.7875226860254084
User 109603 AUC after training: 0.7873865698729583
User 109603 does not improve AUC. Reverting changes.
Training on augumented user 989 27/50 current_auc = 0.7875226860254084
User 989 AUC after training: 0.7877495462794919
User 989 improves AUC. Keeping the model.
Training on augumented user 53876 28/50 current_auc = 0.7877495462794919
User 53876 AUC after training: 0.7879310344827586
User 53876 improves AUC. Keeping the model.
Training on augumented user 7542 29/50 current_auc = 0.7879310344827586
User 7542 AUC after training: 0.7877041742286751
User 7542 does not improve AUC. Reverting changes.
Training on augumented user 61920 30/50 current_auc = 0.7879310344827586
User 61920 AUC after training: 0.7878856624319419
User 61920 does not improve AUC. Reverting changes.
Training on augumented user 55664 31/50 current_auc = 0.7879310344827586
User 55664 AUC after training: 0.7878856624319419
User 55664 does not improve AUC. Reverting changes.
Training on augumented user 102583 32/50 current_auc = 0.7879310344827586
User 102583 AUC after training: 0.7879310344827586
User 102583 does not improve AUC. Reverting changes.
Training on augumented user 75596 33/50 current_auc = 0.7879310344827586
User 75596 AUC after training: 0.7877949183303086
User 75596 does not improve AUC. Reverting changes.
Training on augumented user 33820 34/50 current_auc = 0.7879310344827586
User 33820 AUC after training: 0.7874319419237749
User 33820 does not improve AUC. Reverting changes.
Training on augumented user 69882 35/50 current_auc = 0.7879310344827586
User 69882 AUC after training: 0.7876814882032668
User 69882 does not improve AUC. Reverting changes.
Training on augumented user 67057 36/50 current_auc = 0.7879310344827586
User 67057 AUC after training: 0.7872958257713248
User 67057 does not improve AUC. Reverting changes.
Training on augumented user 62491 37/50 current_auc = 0.7879310344827586
User 62491 AUC after training: 0.7879764065335753
User 62491 improves AUC. Keeping the model.
Training on augumented user 63 38/50 current_auc = 0.7879764065335753
User 63 AUC after training: 0.7877495462794918
User 63 does not improve AUC. Reverting changes.
Training on augumented user 21205 39/50 current_auc = 0.7879764065335753
User 21205 AUC after training: 0.7879310344827586
User 21205 does not improve AUC. Reverting changes.
Training on augumented user 116272 40/50 current_auc = 0.7879764065335753
User 116272 AUC after training: 0.7874773139745916
User 116272 does not improve AUC. Reverting changes.
Training on augumented user 26834 41/50 current_auc = 0.7879764065335753
User 26834 AUC after training: 0.7879764065335753
User 26834 does not improve AUC. Reverting changes.
Training on augumented user 96133 42/50 current_auc = 0.7879764065335753
User 96133 AUC after training: 0.7879310344827586
User 96133 does not improve AUC. Reverting changes.
Training on augumented user 21120 43/50 current_auc = 0.7879764065335753
User 21120 AUC after training: 0.7876134301270418
User 21120 does not improve AUC. Reverting changes.
Training on augumented user 66097 44/50 current_auc = 0.7879764065335753
User 66097 AUC after training: 0.7865698729582578
User 66097 does not improve AUC. Reverting changes.
Training on augumented user 125266 45/50 current_auc = 0.7879764065335753
User 125266 AUC after training: 0.7879310344827587
User 125266 does not improve AUC. Reverting changes.
Training on augumented user 79856 46/50 current_auc = 0.7879764065335753
User 79856 AUC after training: 0.7878402903811252
User 79856 does not improve AUC. Reverting changes.
Training on augumented user 49086 47/50 current_auc = 0.7879764065335753
User 49086 AUC after training: 0.7870689655172415
User 49086 does not improve AUC. Reverting changes.
Training on augumented user 87681 48/50 current_auc = 0.7879764065335753
User 87681 AUC after training: 0.7878856624319419
User 87681 does not improve AUC. Reverting changes.
Training on augumented user 118612 49/50 current_auc = 0.7879764065335753
User 118612 AUC after training: 0.7879764065335753
User 118612 does not improve AUC. Reverting changes.
[2024-12-02 20:04:03.181262] start test user 75972 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:03.870192] start test user 75972 269/568 recall augumented users by random, augumented_users = [15354, 88036, 116470, 115447, 36192, 15214, 73930, 132549, 90475, 100005, 28062, 128297, 132517, 123346, 83203, 117869, 37031, 98241, 35399, 72607, 7110, 76077, 4387, 133538, 127365, 27064, 73233, 80368, 96266, 137456, 64862, 108644, 133634, 32203, 87332, 63901, 79803, 59548, 45093, 42694, 67733, 101062, 85513, 79099, 47450, 78743, 48627, 50725, 9592, 91623]
[2024-12-02 20:04:03.893196] user = 75972 Cloud 269/568
[2024-12-02 20:04:03.929387] user = 75972 Local 269/568
[2024-12-02 20:04:04.108090] user = 75972 Local+ 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:06.466089] user = 75972 MPDA- 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6704545454545454
Training on augumented user 15354 0/50 current_auc = 0.6704545454545454
User 15354 AUC after training: 0.671875
User 15354 improves AUC. Keeping the model.
Training on augumented user 88036 1/50 current_auc = 0.671875
User 88036 AUC after training: 0.6690340909090908
User 88036 does not improve AUC. Reverting changes.
Training on augumented user 116470 2/50 current_auc = 0.671875
User 116470 AUC after training: 0.671875
User 116470 does not improve AUC. Reverting changes.
Training on augumented user 115447 3/50 current_auc = 0.671875
User 115447 AUC after training: 0.671875
User 115447 does not improve AUC. Reverting changes.
Training on augumented user 36192 4/50 current_auc = 0.671875
User 36192 AUC after training: 0.6690340909090909
User 36192 does not improve AUC. Reverting changes.
Training on augumented user 15214 5/50 current_auc = 0.671875
User 15214 AUC after training: 0.6676136363636365
User 15214 does not improve AUC. Reverting changes.
Training on augumented user 73930 6/50 current_auc = 0.671875
User 73930 AUC after training: 0.671875
User 73930 does not improve AUC. Reverting changes.
Training on augumented user 132549 7/50 current_auc = 0.671875
User 132549 AUC after training: 0.6732954545454546
User 132549 improves AUC. Keeping the model.
Training on augumented user 90475 8/50 current_auc = 0.6732954545454546
User 90475 AUC after training: 0.6747159090909092
User 90475 improves AUC. Keeping the model.
Training on augumented user 100005 9/50 current_auc = 0.6747159090909092
User 100005 AUC after training: 0.6732954545454546
User 100005 does not improve AUC. Reverting changes.
Training on augumented user 28062 10/50 current_auc = 0.6747159090909092
User 28062 AUC after training: 0.6747159090909091
User 28062 does not improve AUC. Reverting changes.
Training on augumented user 128297 11/50 current_auc = 0.6747159090909092
User 128297 AUC after training: 0.671875
User 128297 does not improve AUC. Reverting changes.
Training on augumented user 132517 12/50 current_auc = 0.6747159090909092
User 132517 AUC after training: 0.6761363636363638
User 132517 improves AUC. Keeping the model.
Training on augumented user 123346 13/50 current_auc = 0.6761363636363638
User 123346 AUC after training: 0.6747159090909091
User 123346 does not improve AUC. Reverting changes.
Training on augumented user 83203 14/50 current_auc = 0.6761363636363638
User 83203 AUC after training: 0.6732954545454546
User 83203 does not improve AUC. Reverting changes.
Training on augumented user 117869 15/50 current_auc = 0.6761363636363638
User 117869 AUC after training: 0.6704545454545454
User 117869 does not improve AUC. Reverting changes.
Training on augumented user 37031 16/50 current_auc = 0.6761363636363638
User 37031 AUC after training: 0.6732954545454546
User 37031 does not improve AUC. Reverting changes.
Training on augumented user 98241 17/50 current_auc = 0.6761363636363638
User 98241 AUC after training: 0.671875
User 98241 does not improve AUC. Reverting changes.
Training on augumented user 35399 18/50 current_auc = 0.6761363636363638
User 35399 AUC after training: 0.6732954545454546
User 35399 does not improve AUC. Reverting changes.
Training on augumented user 72607 19/50 current_auc = 0.6761363636363638
User 72607 AUC after training: 0.6747159090909092
User 72607 does not improve AUC. Reverting changes.
Training on augumented user 7110 20/50 current_auc = 0.6761363636363638
User 7110 AUC after training: 0.6761363636363636
User 7110 does not improve AUC. Reverting changes.
Training on augumented user 76077 21/50 current_auc = 0.6761363636363638
User 76077 AUC after training: 0.6704545454545454
User 76077 does not improve AUC. Reverting changes.
Training on augumented user 4387 22/50 current_auc = 0.6761363636363638
User 4387 AUC after training: 0.671875
User 4387 does not improve AUC. Reverting changes.
Training on augumented user 133538 23/50 current_auc = 0.6761363636363638
User 133538 AUC after training: 0.6732954545454546
User 133538 does not improve AUC. Reverting changes.
Training on augumented user 127365 24/50 current_auc = 0.6761363636363638
User 127365 AUC after training: 0.6704545454545454
User 127365 does not improve AUC. Reverting changes.
Training on augumented user 27064 25/50 current_auc = 0.6761363636363638
User 27064 AUC after training: 0.671875
User 27064 does not improve AUC. Reverting changes.
Training on augumented user 73233 26/50 current_auc = 0.6761363636363638
User 73233 AUC after training: 0.6747159090909091
User 73233 does not improve AUC. Reverting changes.
Training on augumented user 80368 27/50 current_auc = 0.6761363636363638
User 80368 AUC after training: 0.6676136363636365
User 80368 does not improve AUC. Reverting changes.
Training on augumented user 96266 28/50 current_auc = 0.6761363636363638
User 96266 AUC after training: 0.6732954545454546
User 96266 does not improve AUC. Reverting changes.
Training on augumented user 137456 29/50 current_auc = 0.6761363636363638
User 137456 AUC after training: 0.671875
User 137456 does not improve AUC. Reverting changes.
Training on augumented user 64862 30/50 current_auc = 0.6761363636363638
User 64862 AUC after training: 0.6704545454545454
User 64862 does not improve AUC. Reverting changes.
Training on augumented user 108644 31/50 current_auc = 0.6761363636363638
User 108644 AUC after training: 0.6704545454545454
User 108644 does not improve AUC. Reverting changes.
Training on augumented user 133634 32/50 current_auc = 0.6761363636363638
User 133634 AUC after training: 0.6747159090909091
User 133634 does not improve AUC. Reverting changes.
Training on augumented user 32203 33/50 current_auc = 0.6761363636363638
User 32203 AUC after training: 0.671875
User 32203 does not improve AUC. Reverting changes.
Training on augumented user 87332 34/50 current_auc = 0.6761363636363638
User 87332 AUC after training: 0.671875
User 87332 does not improve AUC. Reverting changes.
Training on augumented user 63901 35/50 current_auc = 0.6761363636363638
User 63901 AUC after training: 0.671875
User 63901 does not improve AUC. Reverting changes.
Training on augumented user 79803 36/50 current_auc = 0.6761363636363638
User 79803 AUC after training: 0.671875
User 79803 does not improve AUC. Reverting changes.
Training on augumented user 59548 37/50 current_auc = 0.6761363636363638
User 59548 AUC after training: 0.6761363636363638
User 59548 does not improve AUC. Reverting changes.
Training on augumented user 45093 38/50 current_auc = 0.6761363636363638
User 45093 AUC after training: 0.6704545454545454
User 45093 does not improve AUC. Reverting changes.
Training on augumented user 42694 39/50 current_auc = 0.6761363636363638
User 42694 AUC after training: 0.671875
User 42694 does not improve AUC. Reverting changes.
Training on augumented user 67733 40/50 current_auc = 0.6761363636363638
User 67733 AUC after training: 0.6732954545454546
User 67733 does not improve AUC. Reverting changes.
Training on augumented user 101062 41/50 current_auc = 0.6761363636363638
User 101062 AUC after training: 0.6747159090909092
User 101062 does not improve AUC. Reverting changes.
Training on augumented user 85513 42/50 current_auc = 0.6761363636363638
User 85513 AUC after training: 0.6704545454545454
User 85513 does not improve AUC. Reverting changes.
Training on augumented user 79099 43/50 current_auc = 0.6761363636363638
User 79099 AUC after training: 0.671875
User 79099 does not improve AUC. Reverting changes.
Training on augumented user 47450 44/50 current_auc = 0.6761363636363638
User 47450 AUC after training: 0.6704545454545454
User 47450 does not improve AUC. Reverting changes.
Training on augumented user 78743 45/50 current_auc = 0.6761363636363638
User 78743 AUC after training: 0.6732954545454546
User 78743 does not improve AUC. Reverting changes.
Training on augumented user 48627 46/50 current_auc = 0.6761363636363638
User 48627 AUC after training: 0.6690340909090908
User 48627 does not improve AUC. Reverting changes.
Training on augumented user 50725 47/50 current_auc = 0.6761363636363638
User 50725 AUC after training: 0.6732954545454546
User 50725 does not improve AUC. Reverting changes.
Training on augumented user 9592 48/50 current_auc = 0.6761363636363638
User 9592 AUC after training: 0.671875
User 9592 does not improve AUC. Reverting changes.
Training on augumented user 91623 49/50 current_auc = 0.6761363636363638
User 91623 AUC after training: 0.6732954545454546
User 91623 does not improve AUC. Reverting changes.
[2024-12-02 20:04:35.313163] start test user 75986 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:36.132001] start test user 75986 270/568 recall augumented users by random, augumented_users = [106354, 68673, 46876, 9175, 18363, 79176, 13782, 92945, 20124, 49371, 35954, 99817, 6730, 88662, 30204, 55023, 44937, 48566, 122294, 135518, 131098, 7630, 56686, 120085, 6912, 128574, 22378, 49850, 1768, 68112, 49347, 12743, 131193, 100059, 53223, 96760, 121839, 76940, 57042, 13090, 48897, 3330, 87703, 32821, 123850, 44165, 7917, 44554, 69455, 19508]
[2024-12-02 20:04:36.156567] user = 75986 Cloud 270/568
[2024-12-02 20:04:36.219320] user = 75986 Local 270/568
[2024-12-02 20:04:36.302133] user = 75986 Local+ 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:39.309135] user = 75986 MPDA- 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7346280325122541
Training on augumented user 106354 0/50 current_auc = 0.7346280325122541
User 106354 AUC after training: 0.7337904076441024
User 106354 does not improve AUC. Reverting changes.
Training on augumented user 68673 1/50 current_auc = 0.7346280325122541
User 68673 AUC after training: 0.7345970093689893
User 68673 does not improve AUC. Reverting changes.
Training on augumented user 46876 2/50 current_auc = 0.7346280325122541
User 46876 AUC after training: 0.7345039399391946
User 46876 does not improve AUC. Reverting changes.
Training on augumented user 9175 3/50 current_auc = 0.7346280325122541
User 9175 AUC after training: 0.7345970093689893
User 9175 does not improve AUC. Reverting changes.
Training on augumented user 18363 4/50 current_auc = 0.7346280325122541
User 18363 AUC after training: 0.7343798473661352
User 18363 does not improve AUC. Reverting changes.
Training on augumented user 79176 5/50 current_auc = 0.7346280325122541
User 79176 AUC after training: 0.7345970093689893
User 79176 does not improve AUC. Reverting changes.
Training on augumented user 13782 6/50 current_auc = 0.7346280325122541
User 13782 AUC after training: 0.7348451945151082
User 13782 improves AUC. Keeping the model.
Training on augumented user 92945 7/50 current_auc = 0.7348451945151082
User 92945 AUC after training: 0.7350623565179624
User 92945 improves AUC. Keeping the model.
Training on augumented user 20124 8/50 current_auc = 0.7350623565179624
User 20124 AUC after training: 0.7350933796612273
User 20124 improves AUC. Keeping the model.
Training on augumented user 49371 9/50 current_auc = 0.7350933796612273
User 49371 AUC after training: 0.7350313333746975
User 49371 does not improve AUC. Reverting changes.
Training on augumented user 35954 10/50 current_auc = 0.7350933796612273
User 35954 AUC after training: 0.7342247316498107
User 35954 does not improve AUC. Reverting changes.
Training on augumented user 99817 11/50 current_auc = 0.7350933796612273
User 99817 AUC after training: 0.7348762176583732
User 99817 does not improve AUC. Reverting changes.
Training on augumented user 6730 12/50 current_auc = 0.7350933796612273
User 6730 AUC after training: 0.7351554259477571
User 6730 improves AUC. Keeping the model.
Training on augumented user 88662 13/50 current_auc = 0.7351554259477571
User 88662 AUC after training: 0.7352174722342868
User 88662 improves AUC. Keeping the model.
Training on augumented user 30204 14/50 current_auc = 0.7352174722342868
User 30204 AUC after training: 0.7349692870881678
User 30204 does not improve AUC. Reverting changes.
Training on augumented user 55023 15/50 current_auc = 0.7352174722342868
User 55023 AUC after training: 0.7357448656697898
User 55023 improves AUC. Keeping the model.
Training on augumented user 44937 16/50 current_auc = 0.7357448656697898
User 44937 AUC after training: 0.7359310045293789
User 44937 improves AUC. Keeping the model.
Training on augumented user 48566 17/50 current_auc = 0.7359310045293789
User 48566 AUC after training: 0.7358069119563194
User 48566 does not improve AUC. Reverting changes.
Training on augumented user 122294 18/50 current_auc = 0.7359310045293789
User 122294 AUC after training: 0.7359620276726437
User 122294 improves AUC. Keeping the model.
Training on augumented user 135518 19/50 current_auc = 0.7359620276726437
User 135518 AUC after training: 0.7352795185208165
User 135518 does not improve AUC. Reverting changes.
Training on augumented user 131098 20/50 current_auc = 0.7359620276726437
User 131098 AUC after training: 0.7352174722342868
User 131098 does not improve AUC. Reverting changes.
Training on augumented user 7630 21/50 current_auc = 0.7359620276726437
User 7630 AUC after training: 0.7354966805236707
User 7630 does not improve AUC. Reverting changes.
Training on augumented user 56686 22/50 current_auc = 0.7359620276726437
User 56686 AUC after training: 0.735868958242849
User 56686 does not improve AUC. Reverting changes.
Training on augumented user 120085 23/50 current_auc = 0.7359620276726437
User 120085 AUC after training: 0.7354966805236707
User 120085 does not improve AUC. Reverting changes.
Training on augumented user 6912 24/50 current_auc = 0.7359620276726437
User 6912 AUC after training: 0.7356828193832599
User 6912 does not improve AUC. Reverting changes.
Training on augumented user 128574 25/50 current_auc = 0.7359620276726437
User 128574 AUC after training: 0.7349847986598003
User 128574 does not improve AUC. Reverting changes.
Training on augumented user 22378 26/50 current_auc = 0.7359620276726437
User 22378 AUC after training: 0.7352484953775518
User 22378 does not improve AUC. Reverting changes.
Training on augumented user 49850 27/50 current_auc = 0.7359620276726437
User 49850 AUC after training: 0.7360240739591737
User 49850 improves AUC. Keeping the model.
Training on augumented user 1768 28/50 current_auc = 0.7360240739591737
User 1768 AUC after training: 0.7360240739591737
User 1768 does not improve AUC. Reverting changes.
Training on augumented user 68112 29/50 current_auc = 0.7360240739591737
User 68112 AUC after training: 0.7359620276726438
User 68112 does not improve AUC. Reverting changes.
Training on augumented user 49347 30/50 current_auc = 0.7360240739591737
User 49347 AUC after training: 0.7355277036669355
User 49347 does not improve AUC. Reverting changes.
Training on augumented user 12743 31/50 current_auc = 0.7360240739591737
User 12743 AUC after training: 0.7360240739591735
User 12743 does not improve AUC. Reverting changes.
Training on augumented user 131193 32/50 current_auc = 0.7360240739591737
User 131193 AUC after training: 0.73568281938326
User 131193 does not improve AUC. Reverting changes.
Training on augumented user 100059 33/50 current_auc = 0.7360240739591737
User 100059 AUC after training: 0.7362722591052925
User 100059 improves AUC. Keeping the model.
Training on augumented user 53223 34/50 current_auc = 0.7362722591052925
User 53223 AUC after training: 0.7358069119563193
User 53223 does not improve AUC. Reverting changes.
Training on augumented user 96760 35/50 current_auc = 0.7362722591052925
User 96760 AUC after training: 0.7360240739591735
User 96760 does not improve AUC. Reverting changes.
Training on augumented user 121839 36/50 current_auc = 0.7362722591052925
User 121839 AUC after training: 0.7353725879506111
User 121839 does not improve AUC. Reverting changes.
Training on augumented user 76940 37/50 current_auc = 0.7362722591052925
User 76940 AUC after training: 0.7359310045293789
User 76940 does not improve AUC. Reverting changes.
Training on augumented user 57042 38/50 current_auc = 0.7362722591052925
User 57042 AUC after training: 0.7357448656697896
User 57042 does not improve AUC. Reverting changes.
Training on augumented user 13090 39/50 current_auc = 0.7362722591052925
User 13090 AUC after training: 0.7357758888130546
User 13090 does not improve AUC. Reverting changes.
Training on augumented user 48897 40/50 current_auc = 0.7362722591052925
User 48897 AUC after training: 0.7359620276726437
User 48897 does not improve AUC. Reverting changes.
Training on augumented user 3330 41/50 current_auc = 0.7362722591052925
User 3330 AUC after training: 0.7360550971024384
User 3330 does not improve AUC. Reverting changes.
Training on augumented user 87703 42/50 current_auc = 0.7362722591052925
User 87703 AUC after training: 0.7360550971024384
User 87703 does not improve AUC. Reverting changes.
Training on augumented user 32821 43/50 current_auc = 0.7362722591052925
User 32821 AUC after training: 0.735899981386114
User 32821 does not improve AUC. Reverting changes.
Training on augumented user 123850 44/50 current_auc = 0.7362722591052925
User 123850 AUC after training: 0.7358534466712168
User 123850 does not improve AUC. Reverting changes.
Training on augumented user 44165 45/50 current_auc = 0.7362722591052925
User 44165 AUC after training: 0.7360550971024384
User 44165 does not improve AUC. Reverting changes.
Training on augumented user 7917 46/50 current_auc = 0.7362722591052925
User 7917 AUC after training: 0.735899981386114
User 7917 does not improve AUC. Reverting changes.
Training on augumented user 44554 47/50 current_auc = 0.7362722591052925
User 44554 AUC after training: 0.7359620276726438
User 44554 does not improve AUC. Reverting changes.
Training on augumented user 69455 48/50 current_auc = 0.7362722591052925
User 69455 AUC after training: 0.7364739095365143
User 69455 improves AUC. Keeping the model.
Training on augumented user 19508 49/50 current_auc = 0.7364739095365143
User 19508 AUC after training: 0.7367065831110008
User 19508 improves AUC. Keeping the model.
[2024-12-02 20:05:08.847374] start test user 76008 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:09.500313] start test user 76008 271/568 recall augumented users by random, augumented_users = [52662, 135984, 112859, 5630, 21544, 857, 34625, 115385, 89587, 5731, 108107, 20867, 136083, 67921, 56178, 79027, 128125, 23411, 85450, 29615, 21898, 22075, 79952, 55711, 21531, 52696, 32586, 113365, 118499, 50413, 17262, 90646, 112116, 25037, 133657, 115307, 77013, 85041, 98164, 104256, 24168, 38227, 131585, 620, 41396, 36044, 65015, 117886, 106121, 67496]
[2024-12-02 20:05:09.524233] user = 76008 Cloud 271/568
[2024-12-02 20:05:09.541693] user = 76008 Local 271/568
[2024-12-02 20:05:09.717296] user = 76008 Local+ 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:12.089217] user = 76008 MPDA- 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7037037037037037
Training on augumented user 52662 0/50 current_auc = 0.7037037037037037
User 52662 AUC after training: 0.7037037037037037
User 52662 does not improve AUC. Reverting changes.
Training on augumented user 135984 1/50 current_auc = 0.7037037037037037
User 135984 AUC after training: 0.7037037037037037
User 135984 does not improve AUC. Reverting changes.
Training on augumented user 112859 2/50 current_auc = 0.7037037037037037
User 112859 AUC after training: 0.7037037037037037
User 112859 does not improve AUC. Reverting changes.
Training on augumented user 5630 3/50 current_auc = 0.7037037037037037
User 5630 AUC after training: 0.7037037037037037
User 5630 does not improve AUC. Reverting changes.
Training on augumented user 21544 4/50 current_auc = 0.7037037037037037
User 21544 AUC after training: 0.7037037037037037
User 21544 does not improve AUC. Reverting changes.
Training on augumented user 857 5/50 current_auc = 0.7037037037037037
User 857 AUC after training: 0.7037037037037037
User 857 does not improve AUC. Reverting changes.
Training on augumented user 34625 6/50 current_auc = 0.7037037037037037
User 34625 AUC after training: 0.7037037037037037
User 34625 does not improve AUC. Reverting changes.
Training on augumented user 115385 7/50 current_auc = 0.7037037037037037
User 115385 AUC after training: 0.7037037037037037
User 115385 does not improve AUC. Reverting changes.
Training on augumented user 89587 8/50 current_auc = 0.7037037037037037
User 89587 AUC after training: 0.7037037037037037
User 89587 does not improve AUC. Reverting changes.
Training on augumented user 5731 9/50 current_auc = 0.7037037037037037
User 5731 AUC after training: 0.7037037037037037
User 5731 does not improve AUC. Reverting changes.
Training on augumented user 108107 10/50 current_auc = 0.7037037037037037
User 108107 AUC after training: 0.7037037037037037
User 108107 does not improve AUC. Reverting changes.
Training on augumented user 20867 11/50 current_auc = 0.7037037037037037
User 20867 AUC after training: 0.7037037037037037
User 20867 does not improve AUC. Reverting changes.
Training on augumented user 136083 12/50 current_auc = 0.7037037037037037
User 136083 AUC after training: 0.7037037037037037
User 136083 does not improve AUC. Reverting changes.
Training on augumented user 67921 13/50 current_auc = 0.7037037037037037
User 67921 AUC after training: 0.7037037037037037
User 67921 does not improve AUC. Reverting changes.
Training on augumented user 56178 14/50 current_auc = 0.7037037037037037
User 56178 AUC after training: 0.7037037037037037
User 56178 does not improve AUC. Reverting changes.
Training on augumented user 79027 15/50 current_auc = 0.7037037037037037
User 79027 AUC after training: 0.7037037037037037
User 79027 does not improve AUC. Reverting changes.
Training on augumented user 128125 16/50 current_auc = 0.7037037037037037
User 128125 AUC after training: 0.7037037037037037
User 128125 does not improve AUC. Reverting changes.
Training on augumented user 23411 17/50 current_auc = 0.7037037037037037
User 23411 AUC after training: 0.7037037037037037
User 23411 does not improve AUC. Reverting changes.
Training on augumented user 85450 18/50 current_auc = 0.7037037037037037
User 85450 AUC after training: 0.7037037037037037
User 85450 does not improve AUC. Reverting changes.
Training on augumented user 29615 19/50 current_auc = 0.7037037037037037
User 29615 AUC after training: 0.7037037037037037
User 29615 does not improve AUC. Reverting changes.
Training on augumented user 21898 20/50 current_auc = 0.7037037037037037
User 21898 AUC after training: 0.7037037037037037
User 21898 does not improve AUC. Reverting changes.
Training on augumented user 22075 21/50 current_auc = 0.7037037037037037
User 22075 AUC after training: 0.7037037037037037
User 22075 does not improve AUC. Reverting changes.
Training on augumented user 79952 22/50 current_auc = 0.7037037037037037
User 79952 AUC after training: 0.7037037037037037
User 79952 does not improve AUC. Reverting changes.
Training on augumented user 55711 23/50 current_auc = 0.7037037037037037
User 55711 AUC after training: 0.7037037037037037
User 55711 does not improve AUC. Reverting changes.
Training on augumented user 21531 24/50 current_auc = 0.7037037037037037
User 21531 AUC after training: 0.7037037037037037
User 21531 does not improve AUC. Reverting changes.
Training on augumented user 52696 25/50 current_auc = 0.7037037037037037
User 52696 AUC after training: 0.7037037037037037
User 52696 does not improve AUC. Reverting changes.
Training on augumented user 32586 26/50 current_auc = 0.7037037037037037
User 32586 AUC after training: 0.7037037037037037
User 32586 does not improve AUC. Reverting changes.
Training on augumented user 113365 27/50 current_auc = 0.7037037037037037
User 113365 AUC after training: 0.7037037037037037
User 113365 does not improve AUC. Reverting changes.
Training on augumented user 118499 28/50 current_auc = 0.7037037037037037
User 118499 AUC after training: 0.7037037037037037
User 118499 does not improve AUC. Reverting changes.
Training on augumented user 50413 29/50 current_auc = 0.7037037037037037
User 50413 AUC after training: 0.7037037037037037
User 50413 does not improve AUC. Reverting changes.
Training on augumented user 17262 30/50 current_auc = 0.7037037037037037
User 17262 AUC after training: 0.7037037037037037
User 17262 does not improve AUC. Reverting changes.
Training on augumented user 90646 31/50 current_auc = 0.7037037037037037
User 90646 AUC after training: 0.7037037037037037
User 90646 does not improve AUC. Reverting changes.
Training on augumented user 112116 32/50 current_auc = 0.7037037037037037
User 112116 AUC after training: 0.7037037037037037
User 112116 does not improve AUC. Reverting changes.
Training on augumented user 25037 33/50 current_auc = 0.7037037037037037
User 25037 AUC after training: 0.7037037037037037
User 25037 does not improve AUC. Reverting changes.
Training on augumented user 133657 34/50 current_auc = 0.7037037037037037
User 133657 AUC after training: 0.7037037037037037
User 133657 does not improve AUC. Reverting changes.
Training on augumented user 115307 35/50 current_auc = 0.7037037037037037
User 115307 AUC after training: 0.7037037037037037
User 115307 does not improve AUC. Reverting changes.
Training on augumented user 77013 36/50 current_auc = 0.7037037037037037
User 77013 AUC after training: 0.7037037037037037
User 77013 does not improve AUC. Reverting changes.
Training on augumented user 85041 37/50 current_auc = 0.7037037037037037
User 85041 AUC after training: 0.7037037037037037
User 85041 does not improve AUC. Reverting changes.
Training on augumented user 98164 38/50 current_auc = 0.7037037037037037
User 98164 AUC after training: 0.7037037037037037
User 98164 does not improve AUC. Reverting changes.
Training on augumented user 104256 39/50 current_auc = 0.7037037037037037
User 104256 AUC after training: 0.7037037037037037
User 104256 does not improve AUC. Reverting changes.
Training on augumented user 24168 40/50 current_auc = 0.7037037037037037
User 24168 AUC after training: 0.7037037037037037
User 24168 does not improve AUC. Reverting changes.
Training on augumented user 38227 41/50 current_auc = 0.7037037037037037
User 38227 AUC after training: 0.7037037037037037
User 38227 does not improve AUC. Reverting changes.
Training on augumented user 131585 42/50 current_auc = 0.7037037037037037
User 131585 AUC after training: 0.7037037037037037
User 131585 does not improve AUC. Reverting changes.
Training on augumented user 620 43/50 current_auc = 0.7037037037037037
User 620 AUC after training: 0.7037037037037037
User 620 does not improve AUC. Reverting changes.
Training on augumented user 41396 44/50 current_auc = 0.7037037037037037
User 41396 AUC after training: 0.7037037037037037
User 41396 does not improve AUC. Reverting changes.
Training on augumented user 36044 45/50 current_auc = 0.7037037037037037
User 36044 AUC after training: 0.7037037037037037
User 36044 does not improve AUC. Reverting changes.
Training on augumented user 65015 46/50 current_auc = 0.7037037037037037
User 65015 AUC after training: 0.7037037037037037
User 65015 does not improve AUC. Reverting changes.
Training on augumented user 117886 47/50 current_auc = 0.7037037037037037
User 117886 AUC after training: 0.7037037037037037
User 117886 does not improve AUC. Reverting changes.
Training on augumented user 106121 48/50 current_auc = 0.7037037037037037
User 106121 AUC after training: 0.7037037037037037
User 106121 does not improve AUC. Reverting changes.
Training on augumented user 67496 49/50 current_auc = 0.7037037037037037
User 67496 AUC after training: 0.7037037037037037
User 67496 does not improve AUC. Reverting changes.
[2024-12-02 20:05:42.351712] start test user 76079 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:42.890488] start test user 76079 272/568 recall augumented users by random, augumented_users = [68698, 122286, 62097, 103504, 130758, 61881, 106660, 119732, 128049, 97115, 97577, 99921, 113333, 35634, 66351, 129041, 4549, 18351, 33182, 61646, 131934, 107895, 93532, 41611, 109166, 19575, 99591, 134152, 91436, 65036, 110261, 69534, 99096, 53810, 52124, 73122, 26069, 30663, 4612, 49053, 19664, 82772, 93771, 47851, 100518, 98976, 61842, 93421, 2955, 112475]
[2024-12-02 20:05:42.908448] user = 76079 Cloud 272/568
[2024-12-02 20:05:42.919726] user = 76079 Local 272/568
[2024-12-02 20:05:42.978853] user = 76079 Local+ 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:46.434208] user = 76079 MPDA- 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 68698 0/50 current_auc = 1.0
User 68698 AUC after training: 1.0
User 68698 does not improve AUC. Reverting changes.
Training on augumented user 122286 1/50 current_auc = 1.0
User 122286 AUC after training: 1.0
User 122286 does not improve AUC. Reverting changes.
Training on augumented user 62097 2/50 current_auc = 1.0
User 62097 AUC after training: 1.0
User 62097 does not improve AUC. Reverting changes.
Training on augumented user 103504 3/50 current_auc = 1.0
User 103504 AUC after training: 1.0
User 103504 does not improve AUC. Reverting changes.
Training on augumented user 130758 4/50 current_auc = 1.0
User 130758 AUC after training: 1.0
User 130758 does not improve AUC. Reverting changes.
Training on augumented user 61881 5/50 current_auc = 1.0
User 61881 AUC after training: 1.0
User 61881 does not improve AUC. Reverting changes.
Training on augumented user 106660 6/50 current_auc = 1.0
User 106660 AUC after training: 1.0
User 106660 does not improve AUC. Reverting changes.
Training on augumented user 119732 7/50 current_auc = 1.0
User 119732 AUC after training: 1.0
User 119732 does not improve AUC. Reverting changes.
Training on augumented user 128049 8/50 current_auc = 1.0
User 128049 AUC after training: 1.0
User 128049 does not improve AUC. Reverting changes.
Training on augumented user 97115 9/50 current_auc = 1.0
User 97115 AUC after training: 1.0
User 97115 does not improve AUC. Reverting changes.
Training on augumented user 97577 10/50 current_auc = 1.0
User 97577 AUC after training: 1.0
User 97577 does not improve AUC. Reverting changes.
Training on augumented user 99921 11/50 current_auc = 1.0
User 99921 AUC after training: 1.0
User 99921 does not improve AUC. Reverting changes.
Training on augumented user 113333 12/50 current_auc = 1.0
User 113333 AUC after training: 1.0
User 113333 does not improve AUC. Reverting changes.
Training on augumented user 35634 13/50 current_auc = 1.0
User 35634 AUC after training: 1.0
User 35634 does not improve AUC. Reverting changes.
Training on augumented user 66351 14/50 current_auc = 1.0
User 66351 AUC after training: 1.0
User 66351 does not improve AUC. Reverting changes.
Training on augumented user 129041 15/50 current_auc = 1.0
User 129041 AUC after training: 1.0
User 129041 does not improve AUC. Reverting changes.
Training on augumented user 4549 16/50 current_auc = 1.0
User 4549 AUC after training: 1.0
User 4549 does not improve AUC. Reverting changes.
Training on augumented user 18351 17/50 current_auc = 1.0
User 18351 AUC after training: 1.0
User 18351 does not improve AUC. Reverting changes.
Training on augumented user 33182 18/50 current_auc = 1.0
User 33182 AUC after training: 1.0
User 33182 does not improve AUC. Reverting changes.
Training on augumented user 61646 19/50 current_auc = 1.0
User 61646 AUC after training: 1.0
User 61646 does not improve AUC. Reverting changes.
Training on augumented user 131934 20/50 current_auc = 1.0
User 131934 AUC after training: 1.0
User 131934 does not improve AUC. Reverting changes.
Training on augumented user 107895 21/50 current_auc = 1.0
User 107895 AUC after training: 1.0
User 107895 does not improve AUC. Reverting changes.
Training on augumented user 93532 22/50 current_auc = 1.0
User 93532 AUC after training: 1.0
User 93532 does not improve AUC. Reverting changes.
Training on augumented user 41611 23/50 current_auc = 1.0
User 41611 AUC after training: 1.0
User 41611 does not improve AUC. Reverting changes.
Training on augumented user 109166 24/50 current_auc = 1.0
User 109166 AUC after training: 1.0
User 109166 does not improve AUC. Reverting changes.
Training on augumented user 19575 25/50 current_auc = 1.0
User 19575 AUC after training: 1.0
User 19575 does not improve AUC. Reverting changes.
Training on augumented user 99591 26/50 current_auc = 1.0
User 99591 AUC after training: 1.0
User 99591 does not improve AUC. Reverting changes.
Training on augumented user 134152 27/50 current_auc = 1.0
User 134152 AUC after training: 1.0
User 134152 does not improve AUC. Reverting changes.
Training on augumented user 91436 28/50 current_auc = 1.0
User 91436 AUC after training: 1.0
User 91436 does not improve AUC. Reverting changes.
Training on augumented user 65036 29/50 current_auc = 1.0
User 65036 AUC after training: 1.0
User 65036 does not improve AUC. Reverting changes.
Training on augumented user 110261 30/50 current_auc = 1.0
User 110261 AUC after training: 1.0
User 110261 does not improve AUC. Reverting changes.
Training on augumented user 69534 31/50 current_auc = 1.0
User 69534 AUC after training: 1.0
User 69534 does not improve AUC. Reverting changes.
Training on augumented user 99096 32/50 current_auc = 1.0
User 99096 AUC after training: 1.0
User 99096 does not improve AUC. Reverting changes.
Training on augumented user 53810 33/50 current_auc = 1.0
User 53810 AUC after training: 1.0
User 53810 does not improve AUC. Reverting changes.
Training on augumented user 52124 34/50 current_auc = 1.0
User 52124 AUC after training: 1.0
User 52124 does not improve AUC. Reverting changes.
Training on augumented user 73122 35/50 current_auc = 1.0
User 73122 AUC after training: 1.0
User 73122 does not improve AUC. Reverting changes.
Training on augumented user 26069 36/50 current_auc = 1.0
User 26069 AUC after training: 1.0
User 26069 does not improve AUC. Reverting changes.
Training on augumented user 30663 37/50 current_auc = 1.0
User 30663 AUC after training: 1.0
User 30663 does not improve AUC. Reverting changes.
Training on augumented user 4612 38/50 current_auc = 1.0
User 4612 AUC after training: 1.0
User 4612 does not improve AUC. Reverting changes.
Training on augumented user 49053 39/50 current_auc = 1.0
User 49053 AUC after training: 1.0
User 49053 does not improve AUC. Reverting changes.
Training on augumented user 19664 40/50 current_auc = 1.0
User 19664 AUC after training: 1.0
User 19664 does not improve AUC. Reverting changes.
Training on augumented user 82772 41/50 current_auc = 1.0
User 82772 AUC after training: 1.0
User 82772 does not improve AUC. Reverting changes.
Training on augumented user 93771 42/50 current_auc = 1.0
User 93771 AUC after training: 1.0
User 93771 does not improve AUC. Reverting changes.
Training on augumented user 47851 43/50 current_auc = 1.0
User 47851 AUC after training: 1.0
User 47851 does not improve AUC. Reverting changes.
Training on augumented user 100518 44/50 current_auc = 1.0
User 100518 AUC after training: 1.0
User 100518 does not improve AUC. Reverting changes.
Training on augumented user 98976 45/50 current_auc = 1.0
User 98976 AUC after training: 1.0
User 98976 does not improve AUC. Reverting changes.
Training on augumented user 61842 46/50 current_auc = 1.0
User 61842 AUC after training: 1.0
User 61842 does not improve AUC. Reverting changes.
Training on augumented user 93421 47/50 current_auc = 1.0
User 93421 AUC after training: 1.0
User 93421 does not improve AUC. Reverting changes.
Training on augumented user 2955 48/50 current_auc = 1.0
User 2955 AUC after training: 1.0
User 2955 does not improve AUC. Reverting changes.
Training on augumented user 112475 49/50 current_auc = 1.0
User 112475 AUC after training: 1.0
User 112475 does not improve AUC. Reverting changes.
[2024-12-02 20:06:14.894934] start test user 76085 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:15.418292] start test user 76085 273/568 recall augumented users by random, augumented_users = [6985, 19634, 3900, 130532, 118118, 19824, 8310, 60680, 6358, 90150, 38466, 77023, 116898, 94479, 28639, 137064, 80500, 17750, 70876, 42050, 83315, 28053, 130355, 133078, 131708, 44090, 67962, 124732, 100684, 87958, 18, 68730, 122147, 39181, 86954, 2676, 35115, 57336, 58386, 8184, 66665, 42912, 34863, 89699, 86158, 3982, 35934, 77881, 94962, 123954]
[2024-12-02 20:06:15.434270] user = 76085 Cloud 273/568
[2024-12-02 20:06:15.443976] user = 76085 Local 273/568
[2024-12-02 20:06:15.531379] user = 76085 Local+ 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:18.597768] user = 76085 MPDA- 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7333333333333334
Training on augumented user 6985 0/50 current_auc = 0.7333333333333334
User 6985 AUC after training: 0.7333333333333334
User 6985 does not improve AUC. Reverting changes.
Training on augumented user 19634 1/50 current_auc = 0.7333333333333334
User 19634 AUC after training: 0.7333333333333334
User 19634 does not improve AUC. Reverting changes.
Training on augumented user 3900 2/50 current_auc = 0.7333333333333334
User 3900 AUC after training: 0.7333333333333334
User 3900 does not improve AUC. Reverting changes.
Training on augumented user 130532 3/50 current_auc = 0.7333333333333334
User 130532 AUC after training: 0.7333333333333334
User 130532 does not improve AUC. Reverting changes.
Training on augumented user 118118 4/50 current_auc = 0.7333333333333334
User 118118 AUC after training: 0.7333333333333334
User 118118 does not improve AUC. Reverting changes.
Training on augumented user 19824 5/50 current_auc = 0.7333333333333334
User 19824 AUC after training: 0.7333333333333334
User 19824 does not improve AUC. Reverting changes.
Training on augumented user 8310 6/50 current_auc = 0.7333333333333334
User 8310 AUC after training: 0.7333333333333334
User 8310 does not improve AUC. Reverting changes.
Training on augumented user 60680 7/50 current_auc = 0.7333333333333334
User 60680 AUC after training: 0.7333333333333334
User 60680 does not improve AUC. Reverting changes.
Training on augumented user 6358 8/50 current_auc = 0.7333333333333334
User 6358 AUC after training: 0.7333333333333334
User 6358 does not improve AUC. Reverting changes.
Training on augumented user 90150 9/50 current_auc = 0.7333333333333334
User 90150 AUC after training: 0.7333333333333334
User 90150 does not improve AUC. Reverting changes.
Training on augumented user 38466 10/50 current_auc = 0.7333333333333334
User 38466 AUC after training: 0.7333333333333334
User 38466 does not improve AUC. Reverting changes.
Training on augumented user 77023 11/50 current_auc = 0.7333333333333334
User 77023 AUC after training: 0.7333333333333334
User 77023 does not improve AUC. Reverting changes.
Training on augumented user 116898 12/50 current_auc = 0.7333333333333334
User 116898 AUC after training: 0.7333333333333334
User 116898 does not improve AUC. Reverting changes.
Training on augumented user 94479 13/50 current_auc = 0.7333333333333334
User 94479 AUC after training: 0.7333333333333334
User 94479 does not improve AUC. Reverting changes.
Training on augumented user 28639 14/50 current_auc = 0.7333333333333334
User 28639 AUC after training: 0.7333333333333334
User 28639 does not improve AUC. Reverting changes.
Training on augumented user 137064 15/50 current_auc = 0.7333333333333334
User 137064 AUC after training: 0.7333333333333334
User 137064 does not improve AUC. Reverting changes.
Training on augumented user 80500 16/50 current_auc = 0.7333333333333334
User 80500 AUC after training: 0.7333333333333334
User 80500 does not improve AUC. Reverting changes.
Training on augumented user 17750 17/50 current_auc = 0.7333333333333334
User 17750 AUC after training: 0.7333333333333334
User 17750 does not improve AUC. Reverting changes.
Training on augumented user 70876 18/50 current_auc = 0.7333333333333334
User 70876 AUC after training: 0.7333333333333334
User 70876 does not improve AUC. Reverting changes.
Training on augumented user 42050 19/50 current_auc = 0.7333333333333334
User 42050 AUC after training: 0.7333333333333334
User 42050 does not improve AUC. Reverting changes.
Training on augumented user 83315 20/50 current_auc = 0.7333333333333334
User 83315 AUC after training: 0.7333333333333334
User 83315 does not improve AUC. Reverting changes.
Training on augumented user 28053 21/50 current_auc = 0.7333333333333334
User 28053 AUC after training: 0.7333333333333334
User 28053 does not improve AUC. Reverting changes.
Training on augumented user 130355 22/50 current_auc = 0.7333333333333334
User 130355 AUC after training: 0.7333333333333334
User 130355 does not improve AUC. Reverting changes.
Training on augumented user 133078 23/50 current_auc = 0.7333333333333334
User 133078 AUC after training: 0.7333333333333334
User 133078 does not improve AUC. Reverting changes.
Training on augumented user 131708 24/50 current_auc = 0.7333333333333334
User 131708 AUC after training: 0.7333333333333334
User 131708 does not improve AUC. Reverting changes.
Training on augumented user 44090 25/50 current_auc = 0.7333333333333334
User 44090 AUC after training: 0.7333333333333334
User 44090 does not improve AUC. Reverting changes.
Training on augumented user 67962 26/50 current_auc = 0.7333333333333334
User 67962 AUC after training: 0.7333333333333334
User 67962 does not improve AUC. Reverting changes.
Training on augumented user 124732 27/50 current_auc = 0.7333333333333334
User 124732 AUC after training: 0.7333333333333334
User 124732 does not improve AUC. Reverting changes.
Training on augumented user 100684 28/50 current_auc = 0.7333333333333334
User 100684 AUC after training: 0.7333333333333334
User 100684 does not improve AUC. Reverting changes.
Training on augumented user 87958 29/50 current_auc = 0.7333333333333334
User 87958 AUC after training: 0.7333333333333334
User 87958 does not improve AUC. Reverting changes.
Training on augumented user 18 30/50 current_auc = 0.7333333333333334
User 18 AUC after training: 0.7333333333333334
User 18 does not improve AUC. Reverting changes.
Training on augumented user 68730 31/50 current_auc = 0.7333333333333334
User 68730 AUC after training: 0.7333333333333334
User 68730 does not improve AUC. Reverting changes.
Training on augumented user 122147 32/50 current_auc = 0.7333333333333334
User 122147 AUC after training: 0.7333333333333334
User 122147 does not improve AUC. Reverting changes.
Training on augumented user 39181 33/50 current_auc = 0.7333333333333334
User 39181 AUC after training: 0.7333333333333334
User 39181 does not improve AUC. Reverting changes.
Training on augumented user 86954 34/50 current_auc = 0.7333333333333334
User 86954 AUC after training: 0.7333333333333334
User 86954 does not improve AUC. Reverting changes.
Training on augumented user 2676 35/50 current_auc = 0.7333333333333334
User 2676 AUC after training: 0.7333333333333334
User 2676 does not improve AUC. Reverting changes.
Training on augumented user 35115 36/50 current_auc = 0.7333333333333334
User 35115 AUC after training: 0.7333333333333334
User 35115 does not improve AUC. Reverting changes.
Training on augumented user 57336 37/50 current_auc = 0.7333333333333334
User 57336 AUC after training: 0.7333333333333334
User 57336 does not improve AUC. Reverting changes.
Training on augumented user 58386 38/50 current_auc = 0.7333333333333334
User 58386 AUC after training: 0.7333333333333334
User 58386 does not improve AUC. Reverting changes.
Training on augumented user 8184 39/50 current_auc = 0.7333333333333334
User 8184 AUC after training: 0.7333333333333334
User 8184 does not improve AUC. Reverting changes.
Training on augumented user 66665 40/50 current_auc = 0.7333333333333334
User 66665 AUC after training: 0.7333333333333334
User 66665 does not improve AUC. Reverting changes.
Training on augumented user 42912 41/50 current_auc = 0.7333333333333334
User 42912 AUC after training: 0.7333333333333334
User 42912 does not improve AUC. Reverting changes.
Training on augumented user 34863 42/50 current_auc = 0.7333333333333334
User 34863 AUC after training: 0.7333333333333334
User 34863 does not improve AUC. Reverting changes.
Training on augumented user 89699 43/50 current_auc = 0.7333333333333334
User 89699 AUC after training: 0.7333333333333334
User 89699 does not improve AUC. Reverting changes.
Training on augumented user 86158 44/50 current_auc = 0.7333333333333334
User 86158 AUC after training: 0.7333333333333334
User 86158 does not improve AUC. Reverting changes.
Training on augumented user 3982 45/50 current_auc = 0.7333333333333334
User 3982 AUC after training: 0.7333333333333334
User 3982 does not improve AUC. Reverting changes.
Training on augumented user 35934 46/50 current_auc = 0.7333333333333334
User 35934 AUC after training: 0.7333333333333334
User 35934 does not improve AUC. Reverting changes.
Training on augumented user 77881 47/50 current_auc = 0.7333333333333334
User 77881 AUC after training: 0.7333333333333334
User 77881 does not improve AUC. Reverting changes.
Training on augumented user 94962 48/50 current_auc = 0.7333333333333334
User 94962 AUC after training: 0.7333333333333334
User 94962 does not improve AUC. Reverting changes.
Training on augumented user 123954 49/50 current_auc = 0.7333333333333334
User 123954 AUC after training: 0.7333333333333334
User 123954 does not improve AUC. Reverting changes.
[2024-12-02 20:06:48.559685] start test user 76104 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:49.245286] start test user 76104 274/568 recall augumented users by random, augumented_users = [101398, 19611, 85330, 99765, 14711, 118718, 65328, 49163, 3859, 46356, 6448, 51608, 1783, 105825, 80655, 33453, 14451, 48762, 74733, 130, 54759, 56245, 62245, 74669, 52514, 130562, 6114, 83134, 118617, 108397, 100364, 22725, 10036, 72460, 114020, 30588, 9961, 130442, 23520, 129435, 82567, 83611, 101181, 11737, 30178, 93759, 40467, 105065, 47684, 17377]
[2024-12-02 20:06:49.284641] user = 76104 Cloud 274/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:49.306641] user = 76104 Local 274/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:49.565619] user = 76104 Local+ 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:52.414842] user = 76104 MPDA- 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 101398 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101398 AUC after training: 0.5
User 101398 does not improve AUC. Reverting changes.
Training on augumented user 19611 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19611 AUC after training: 0.5
User 19611 does not improve AUC. Reverting changes.
Training on augumented user 85330 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85330 AUC after training: 0.5
User 85330 does not improve AUC. Reverting changes.
Training on augumented user 99765 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99765 AUC after training: 0.5
User 99765 does not improve AUC. Reverting changes.
Training on augumented user 14711 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14711 AUC after training: 0.5
User 14711 does not improve AUC. Reverting changes.
Training on augumented user 118718 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118718 AUC after training: 0.5
User 118718 does not improve AUC. Reverting changes.
Training on augumented user 65328 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65328 AUC after training: 0.5
User 65328 does not improve AUC. Reverting changes.
Training on augumented user 49163 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49163 AUC after training: 0.5
User 49163 does not improve AUC. Reverting changes.
Training on augumented user 3859 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3859 AUC after training: 0.5
User 3859 does not improve AUC. Reverting changes.
Training on augumented user 46356 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46356 AUC after training: 0.5
User 46356 does not improve AUC. Reverting changes.
Training on augumented user 6448 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6448 AUC after training: 0.5
User 6448 does not improve AUC. Reverting changes.
Training on augumented user 51608 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51608 AUC after training: 0.5
User 51608 does not improve AUC. Reverting changes.
Training on augumented user 1783 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1783 AUC after training: 0.5
User 1783 does not improve AUC. Reverting changes.
Training on augumented user 105825 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105825 AUC after training: 0.5
User 105825 does not improve AUC. Reverting changes.
Training on augumented user 80655 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80655 AUC after training: 0.5
User 80655 does not improve AUC. Reverting changes.
Training on augumented user 33453 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33453 AUC after training: 0.5
User 33453 does not improve AUC. Reverting changes.
Training on augumented user 14451 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14451 AUC after training: 0.5
User 14451 does not improve AUC. Reverting changes.
Training on augumented user 48762 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48762 AUC after training: 0.5
User 48762 does not improve AUC. Reverting changes.
Training on augumented user 74733 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74733 AUC after training: 0.5
User 74733 does not improve AUC. Reverting changes.
Training on augumented user 130 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130 AUC after training: 0.5
User 130 does not improve AUC. Reverting changes.
Training on augumented user 54759 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54759 AUC after training: 0.5
User 54759 does not improve AUC. Reverting changes.
Training on augumented user 56245 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56245 AUC after training: 0.5
User 56245 does not improve AUC. Reverting changes.
Training on augumented user 62245 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62245 AUC after training: 0.5
User 62245 does not improve AUC. Reverting changes.
Training on augumented user 74669 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74669 AUC after training: 0.5
User 74669 does not improve AUC. Reverting changes.
Training on augumented user 52514 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52514 AUC after training: 0.5
User 52514 does not improve AUC. Reverting changes.
Training on augumented user 130562 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130562 AUC after training: 0.5
User 130562 does not improve AUC. Reverting changes.
Training on augumented user 6114 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6114 AUC after training: 0.5
User 6114 does not improve AUC. Reverting changes.
Training on augumented user 83134 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83134 AUC after training: 0.5
User 83134 does not improve AUC. Reverting changes.
Training on augumented user 118617 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118617 AUC after training: 0.5
User 118617 does not improve AUC. Reverting changes.
Training on augumented user 108397 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108397 AUC after training: 0.5
User 108397 does not improve AUC. Reverting changes.
Training on augumented user 100364 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100364 AUC after training: 0.5
User 100364 does not improve AUC. Reverting changes.
Training on augumented user 22725 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22725 AUC after training: 0.5
User 22725 does not improve AUC. Reverting changes.
Training on augumented user 10036 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10036 AUC after training: 0.5
User 10036 does not improve AUC. Reverting changes.
Training on augumented user 72460 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72460 AUC after training: 0.5
User 72460 does not improve AUC. Reverting changes.
Training on augumented user 114020 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114020 AUC after training: 0.5
User 114020 does not improve AUC. Reverting changes.
Training on augumented user 30588 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30588 AUC after training: 0.5
User 30588 does not improve AUC. Reverting changes.
Training on augumented user 9961 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9961 AUC after training: 0.5
User 9961 does not improve AUC. Reverting changes.
Training on augumented user 130442 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130442 AUC after training: 0.5
User 130442 does not improve AUC. Reverting changes.
Training on augumented user 23520 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23520 AUC after training: 0.5
User 23520 does not improve AUC. Reverting changes.
Training on augumented user 129435 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129435 AUC after training: 0.5
User 129435 does not improve AUC. Reverting changes.
Training on augumented user 82567 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82567 AUC after training: 0.5
User 82567 does not improve AUC. Reverting changes.
Training on augumented user 83611 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83611 AUC after training: 0.5
User 83611 does not improve AUC. Reverting changes.
Training on augumented user 101181 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101181 AUC after training: 0.5
User 101181 does not improve AUC. Reverting changes.
Training on augumented user 11737 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11737 AUC after training: 0.5
User 11737 does not improve AUC. Reverting changes.
Training on augumented user 30178 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30178 AUC after training: 0.5
User 30178 does not improve AUC. Reverting changes.
Training on augumented user 93759 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93759 AUC after training: 0.5
User 93759 does not improve AUC. Reverting changes.
Training on augumented user 40467 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40467 AUC after training: 0.5
User 40467 does not improve AUC. Reverting changes.
Training on augumented user 105065 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105065 AUC after training: 0.5
User 105065 does not improve AUC. Reverting changes.
Training on augumented user 47684 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47684 AUC after training: 0.5
User 47684 does not improve AUC. Reverting changes.
Training on augumented user 17377 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17377 AUC after training: 0.5
User 17377 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:26.211715] start test user 76138 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:26.752433] start test user 76138 275/568 recall augumented users by random, augumented_users = [64686, 60258, 47176, 12274, 41662, 96713, 113249, 33819, 10839, 100680, 63438, 98194, 15411, 50583, 5884, 23831, 29844, 122120, 24164, 22068, 19001, 133541, 54314, 100001, 105154, 132709, 37856, 104425, 103477, 86855, 31054, 23315, 76069, 74843, 73233, 125715, 71370, 123154, 51960, 40347, 63113, 113390, 4940, 26890, 81252, 120527, 19267, 76335, 127661, 105161]
[2024-12-02 20:07:26.770024] user = 76138 Cloud 275/568
[2024-12-02 20:07:26.783066] user = 76138 Local 275/568
[2024-12-02 20:07:26.920968] user = 76138 Local+ 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:29.282051] user = 76138 MPDA- 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5563063063063063
Training on augumented user 64686 0/50 current_auc = 0.5563063063063063
User 64686 AUC after training: 0.5585585585585586
User 64686 improves AUC. Keeping the model.
Training on augumented user 60258 1/50 current_auc = 0.5585585585585586
User 60258 AUC after training: 0.5563063063063064
User 60258 does not improve AUC. Reverting changes.
Training on augumented user 47176 2/50 current_auc = 0.5585585585585586
User 47176 AUC after training: 0.5563063063063064
User 47176 does not improve AUC. Reverting changes.
Training on augumented user 12274 3/50 current_auc = 0.5585585585585586
User 12274 AUC after training: 0.5563063063063063
User 12274 does not improve AUC. Reverting changes.
Training on augumented user 41662 4/50 current_auc = 0.5585585585585586
User 41662 AUC after training: 0.5540540540540542
User 41662 does not improve AUC. Reverting changes.
Training on augumented user 96713 5/50 current_auc = 0.5585585585585586
User 96713 AUC after training: 0.5540540540540542
User 96713 does not improve AUC. Reverting changes.
Training on augumented user 113249 6/50 current_auc = 0.5585585585585586
User 113249 AUC after training: 0.5563063063063064
User 113249 does not improve AUC. Reverting changes.
Training on augumented user 33819 7/50 current_auc = 0.5585585585585586
User 33819 AUC after training: 0.5540540540540542
User 33819 does not improve AUC. Reverting changes.
Training on augumented user 10839 8/50 current_auc = 0.5585585585585586
User 10839 AUC after training: 0.5585585585585586
User 10839 does not improve AUC. Reverting changes.
Training on augumented user 100680 9/50 current_auc = 0.5585585585585586
User 100680 AUC after training: 0.5585585585585586
User 100680 does not improve AUC. Reverting changes.
Training on augumented user 63438 10/50 current_auc = 0.5585585585585586
User 63438 AUC after training: 0.5585585585585586
User 63438 does not improve AUC. Reverting changes.
Training on augumented user 98194 11/50 current_auc = 0.5585585585585586
User 98194 AUC after training: 0.5540540540540542
User 98194 does not improve AUC. Reverting changes.
Training on augumented user 15411 12/50 current_auc = 0.5585585585585586
User 15411 AUC after training: 0.5563063063063064
User 15411 does not improve AUC. Reverting changes.
Training on augumented user 50583 13/50 current_auc = 0.5585585585585586
User 50583 AUC after training: 0.5518018018018018
User 50583 does not improve AUC. Reverting changes.
Training on augumented user 5884 14/50 current_auc = 0.5585585585585586
User 5884 AUC after training: 0.5585585585585586
User 5884 does not improve AUC. Reverting changes.
Training on augumented user 23831 15/50 current_auc = 0.5585585585585586
User 23831 AUC after training: 0.5664414414414414
User 23831 improves AUC. Keeping the model.
Training on augumented user 29844 16/50 current_auc = 0.5664414414414414
User 29844 AUC after training: 0.5585585585585586
User 29844 does not improve AUC. Reverting changes.
Training on augumented user 122120 17/50 current_auc = 0.5664414414414414
User 122120 AUC after training: 0.5664414414414414
User 122120 does not improve AUC. Reverting changes.
Training on augumented user 24164 18/50 current_auc = 0.5664414414414414
User 24164 AUC after training: 0.5585585585585586
User 24164 does not improve AUC. Reverting changes.
Training on augumented user 22068 19/50 current_auc = 0.5664414414414414
User 22068 AUC after training: 0.5664414414414414
User 22068 does not improve AUC. Reverting changes.
Training on augumented user 19001 20/50 current_auc = 0.5664414414414414
User 19001 AUC after training: 0.5664414414414414
User 19001 does not improve AUC. Reverting changes.
Training on augumented user 133541 21/50 current_auc = 0.5664414414414414
User 133541 AUC after training: 0.5630630630630631
User 133541 does not improve AUC. Reverting changes.
Training on augumented user 54314 22/50 current_auc = 0.5664414414414414
User 54314 AUC after training: 0.5540540540540542
User 54314 does not improve AUC. Reverting changes.
Training on augumented user 100001 23/50 current_auc = 0.5664414414414414
User 100001 AUC after training: 0.5664414414414414
User 100001 does not improve AUC. Reverting changes.
Training on augumented user 105154 24/50 current_auc = 0.5664414414414414
User 105154 AUC after training: 0.5608108108108109
User 105154 does not improve AUC. Reverting changes.
Training on augumented user 132709 25/50 current_auc = 0.5664414414414414
User 132709 AUC after training: 0.5664414414414414
User 132709 does not improve AUC. Reverting changes.
Training on augumented user 37856 26/50 current_auc = 0.5664414414414414
User 37856 AUC after training: 0.5585585585585586
User 37856 does not improve AUC. Reverting changes.
Training on augumented user 104425 27/50 current_auc = 0.5664414414414414
User 104425 AUC after training: 0.5608108108108109
User 104425 does not improve AUC. Reverting changes.
Training on augumented user 103477 28/50 current_auc = 0.5664414414414414
User 103477 AUC after training: 0.5630630630630631
User 103477 does not improve AUC. Reverting changes.
Training on augumented user 86855 29/50 current_auc = 0.5664414414414414
User 86855 AUC after training: 0.5630630630630631
User 86855 does not improve AUC. Reverting changes.
Training on augumented user 31054 30/50 current_auc = 0.5664414414414414
User 31054 AUC after training: 0.5630630630630631
User 31054 does not improve AUC. Reverting changes.
Training on augumented user 23315 31/50 current_auc = 0.5664414414414414
User 23315 AUC after training: 0.5664414414414414
User 23315 does not improve AUC. Reverting changes.
Training on augumented user 76069 32/50 current_auc = 0.5664414414414414
User 76069 AUC after training: 0.5608108108108109
User 76069 does not improve AUC. Reverting changes.
Training on augumented user 74843 33/50 current_auc = 0.5664414414414414
User 74843 AUC after training: 0.5664414414414414
User 74843 does not improve AUC. Reverting changes.
Training on augumented user 73233 34/50 current_auc = 0.5664414414414414
User 73233 AUC after training: 0.5664414414414414
User 73233 does not improve AUC. Reverting changes.
Training on augumented user 125715 35/50 current_auc = 0.5664414414414414
User 125715 AUC after training: 0.5641891891891891
User 125715 does not improve AUC. Reverting changes.
Training on augumented user 71370 36/50 current_auc = 0.5664414414414414
User 71370 AUC after training: 0.5664414414414414
User 71370 does not improve AUC. Reverting changes.
Training on augumented user 123154 37/50 current_auc = 0.5664414414414414
User 123154 AUC after training: 0.5664414414414414
User 123154 does not improve AUC. Reverting changes.
Training on augumented user 51960 38/50 current_auc = 0.5664414414414414
User 51960 AUC after training: 0.5608108108108109
User 51960 does not improve AUC. Reverting changes.
Training on augumented user 40347 39/50 current_auc = 0.5664414414414414
User 40347 AUC after training: 0.5664414414414414
User 40347 does not improve AUC. Reverting changes.
Training on augumented user 63113 40/50 current_auc = 0.5664414414414414
User 63113 AUC after training: 0.5664414414414414
User 63113 does not improve AUC. Reverting changes.
Training on augumented user 113390 41/50 current_auc = 0.5664414414414414
User 113390 AUC after training: 0.5608108108108109
User 113390 does not improve AUC. Reverting changes.
Training on augumented user 4940 42/50 current_auc = 0.5664414414414414
User 4940 AUC after training: 0.5608108108108109
User 4940 does not improve AUC. Reverting changes.
Training on augumented user 26890 43/50 current_auc = 0.5664414414414414
User 26890 AUC after training: 0.5608108108108109
User 26890 does not improve AUC. Reverting changes.
Training on augumented user 81252 44/50 current_auc = 0.5664414414414414
User 81252 AUC after training: 0.5608108108108109
User 81252 does not improve AUC. Reverting changes.
Training on augumented user 120527 45/50 current_auc = 0.5664414414414414
User 120527 AUC after training: 0.5585585585585586
User 120527 does not improve AUC. Reverting changes.
Training on augumented user 19267 46/50 current_auc = 0.5664414414414414
User 19267 AUC after training: 0.5664414414414414
User 19267 does not improve AUC. Reverting changes.
Training on augumented user 76335 47/50 current_auc = 0.5664414414414414
User 76335 AUC after training: 0.5608108108108109
User 76335 does not improve AUC. Reverting changes.
Training on augumented user 127661 48/50 current_auc = 0.5664414414414414
User 127661 AUC after training: 0.5641891891891891
User 127661 does not improve AUC. Reverting changes.
Training on augumented user 105161 49/50 current_auc = 0.5664414414414414
User 105161 AUC after training: 0.5585585585585585
User 105161 does not improve AUC. Reverting changes.
[2024-12-02 20:07:56.333401] start test user 76155 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:56.777776] start test user 76155 276/568 recall augumented users by random, augumented_users = [37045, 128902, 67914, 115159, 123893, 10825, 115759, 25054, 81929, 133334, 104134, 84765, 77253, 38177, 94806, 148, 64995, 74615, 132994, 65346, 78633, 1008, 103374, 96816, 68738, 1890, 21266, 86225, 134853, 67209, 51419, 107344, 117381, 8581, 38325, 31067, 28149, 94826, 103467, 32677, 101959, 133719, 105922, 106548, 6199, 119696, 107046, 49309, 82233, 111275]
[2024-12-02 20:07:56.797166] user = 76155 Cloud 276/568
[2024-12-02 20:07:56.838511] user = 76155 Local 276/568
[2024-12-02 20:07:57.167306] user = 76155 Local+ 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:58.543575] user = 76155 MPDA- 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7088443904541715
Training on augumented user 37045 0/50 current_auc = 0.7088443904541715
User 37045 AUC after training: 0.7086288647674281
User 37045 does not improve AUC. Reverting changes.
Training on augumented user 128902 1/50 current_auc = 0.7088443904541715
User 128902 AUC after training: 0.7083937458364356
User 128902 does not improve AUC. Reverting changes.
Training on augumented user 67914 2/50 current_auc = 0.7088443904541715
User 67914 AUC after training: 0.7086680512559269
User 67914 does not improve AUC. Reverting changes.
Training on augumented user 115159 3/50 current_auc = 0.7088443904541715
User 115159 AUC after training: 0.7089619499196678
User 115159 improves AUC. Keeping the model.
Training on augumented user 123893 4/50 current_auc = 0.7089619499196678
User 123893 AUC after training: 0.7086876445001763
User 123893 does not improve AUC. Reverting changes.
Training on augumented user 10825 5/50 current_auc = 0.7089619499196678
User 10825 AUC after training: 0.708511305301932
User 10825 does not improve AUC. Reverting changes.
Training on augumented user 115759 6/50 current_auc = 0.7089619499196678
User 115759 AUC after training: 0.7088052039656727
User 115759 does not improve AUC. Reverting changes.
Training on augumented user 25054 7/50 current_auc = 0.7089619499196678
User 25054 AUC after training: 0.7090599161409146
User 25054 improves AUC. Keeping the model.
Training on augumented user 81929 8/50 current_auc = 0.7090599161409146
User 81929 AUC after training: 0.7083741525921862
User 81929 does not improve AUC. Reverting changes.
Training on augumented user 133334 9/50 current_auc = 0.7090599161409146
User 133334 AUC after training: 0.7084525255691837
User 133334 does not improve AUC. Reverting changes.
Training on augumented user 104134 10/50 current_auc = 0.7090599161409146
User 104134 AUC after training: 0.7089227634311689
User 104134 does not improve AUC. Reverting changes.
Training on augumented user 84765 11/50 current_auc = 0.7090599161409146
User 84765 AUC after training: 0.7091970688506603
User 84765 improves AUC. Keeping the model.
Training on augumented user 77253 12/50 current_auc = 0.7091970688506603
User 77253 AUC after training: 0.7091382891179121
User 77253 does not improve AUC. Reverting changes.
Training on augumented user 38177 13/50 current_auc = 0.7091970688506603
User 38177 AUC after training: 0.7093734080489047
User 38177 improves AUC. Keeping the model.
Training on augumented user 94806 14/50 current_auc = 0.7093734080489047
User 94806 AUC after training: 0.7092950350719072
User 94806 does not improve AUC. Reverting changes.
Training on augumented user 148 15/50 current_auc = 0.7093734080489047
User 148 AUC after training: 0.7090403228966652
User 148 does not improve AUC. Reverting changes.
Training on augumented user 64995 16/50 current_auc = 0.7093734080489047
User 64995 AUC after training: 0.7099612053763862
User 64995 improves AUC. Keeping the model.
Training on augumented user 74615 17/50 current_auc = 0.7099612053763862
User 74615 AUC after training: 0.7092950350719072
User 74615 does not improve AUC. Reverting changes.
Training on augumented user 132994 18/50 current_auc = 0.7099612053763862
User 132994 AUC after training: 0.7092950350719072
User 132994 does not improve AUC. Reverting changes.
Training on augumented user 65346 19/50 current_auc = 0.7099612053763862
User 65346 AUC after training: 0.7095105607586504
User 65346 does not improve AUC. Reverting changes.
Training on augumented user 78633 20/50 current_auc = 0.7099612053763862
User 78633 AUC after training: 0.7093734080489047
User 78633 does not improve AUC. Reverting changes.
Training on augumented user 1008 21/50 current_auc = 0.7099612053763862
User 1008 AUC after training: 0.7093734080489047
User 1008 does not improve AUC. Reverting changes.
Training on augumented user 103374 22/50 current_auc = 0.7099612053763862
User 103374 AUC after training: 0.7097260864453937
User 103374 does not improve AUC. Reverting changes.
Training on augumented user 96816 23/50 current_auc = 0.7099612053763862
User 96816 AUC after training: 0.710000391864885
User 96816 improves AUC. Keeping the model.
Training on augumented user 68738 24/50 current_auc = 0.710000391864885
User 68738 AUC after training: 0.7094909675144011
User 68738 does not improve AUC. Reverting changes.
Training on augumented user 1890 25/50 current_auc = 0.710000391864885
User 1890 AUC after training: 0.7079039147302011
User 1890 does not improve AUC. Reverting changes.
Training on augumented user 21266 26/50 current_auc = 0.710000391864885
User 21266 AUC after training: 0.7098632391551394
User 21266 does not improve AUC. Reverting changes.
Training on augumented user 86225 27/50 current_auc = 0.710000391864885
User 86225 AUC after training: 0.7095301540028998
User 86225 does not improve AUC. Reverting changes.
Training on augumented user 134853 28/50 current_auc = 0.710000391864885
User 134853 AUC after training: 0.709745679689643
User 134853 does not improve AUC. Reverting changes.
Training on augumented user 67209 29/50 current_auc = 0.710000391864885
User 67209 AUC after training: 0.7097260864453936
User 67209 does not improve AUC. Reverting changes.
Training on augumented user 51419 30/50 current_auc = 0.710000391864885
User 51419 AUC after training: 0.7095693404913985
User 51419 does not improve AUC. Reverting changes.
Training on augumented user 107344 31/50 current_auc = 0.710000391864885
User 107344 AUC after training: 0.7101179513303812
User 107344 improves AUC. Keeping the model.
Training on augumented user 117381 32/50 current_auc = 0.7101179513303812
User 117381 AUC after training: 0.7100983580861319
User 117381 does not improve AUC. Reverting changes.
Training on augumented user 8581 33/50 current_auc = 0.7101179513303812
User 8581 AUC after training: 0.7098632391551393
User 8581 does not improve AUC. Reverting changes.
Training on augumented user 38325 34/50 current_auc = 0.7101179513303812
User 38325 AUC after training: 0.708922763431169
User 38325 does not improve AUC. Reverting changes.
Training on augumented user 31067 35/50 current_auc = 0.7101179513303812
User 31067 AUC after training: 0.7100199851091344
User 31067 does not improve AUC. Reverting changes.
Training on augumented user 28149 36/50 current_auc = 0.7101179513303812
User 28149 AUC after training: 0.710255104040127
User 28149 improves AUC. Keeping the model.
Training on augumented user 94826 37/50 current_auc = 0.710255104040127
User 94826 AUC after training: 0.7098436459108899
User 94826 does not improve AUC. Reverting changes.
Training on augumented user 103467 38/50 current_auc = 0.710255104040127
User 103467 AUC after training: 0.7101375445746306
User 103467 does not improve AUC. Reverting changes.
Training on augumented user 32677 39/50 current_auc = 0.710255104040127
User 32677 AUC after training: 0.7081782201496925
User 32677 does not improve AUC. Reverting changes.
Training on augumented user 101959 40/50 current_auc = 0.710255104040127
User 101959 AUC after training: 0.7103922567498726
User 101959 improves AUC. Keeping the model.
Training on augumented user 133719 41/50 current_auc = 0.7103922567498726
User 133719 AUC after training: 0.7114111054508405
User 133719 improves AUC. Keeping the model.
Training on augumented user 105922 42/50 current_auc = 0.7114111054508405
User 105922 AUC after training: 0.7110584270543517
User 105922 does not improve AUC. Reverting changes.
Training on augumented user 106548 43/50 current_auc = 0.7114111054508405
User 106548 AUC after training: 0.7116462243818331
User 106548 improves AUC. Keeping the model.
Training on augumented user 6199 44/50 current_auc = 0.7116462243818331
User 6199 AUC after training: 0.7106077824366158
User 6199 does not improve AUC. Reverting changes.
Training on augumented user 119696 45/50 current_auc = 0.7116462243818331
User 119696 AUC after training: 0.7119009365570751
User 119696 improves AUC. Keeping the model.
Training on augumented user 107046 46/50 current_auc = 0.7119009365570751
User 107046 AUC after training: 0.7106861554136134
User 107046 does not improve AUC. Reverting changes.
Training on augumented user 49309 47/50 current_auc = 0.7119009365570751
User 49309 AUC after training: 0.711587444649085
User 49309 does not improve AUC. Reverting changes.
Training on augumented user 82233 48/50 current_auc = 0.7119009365570751
User 82233 AUC after training: 0.7084721188134331
User 82233 does not improve AUC. Reverting changes.
Training on augumented user 111275 49/50 current_auc = 0.7119009365570751
User 111275 AUC after training: 0.7108429013676084
User 111275 does not improve AUC. Reverting changes.
[2024-12-02 20:08:29.302309] start test user 76164 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:29.991138] start test user 76164 277/568 recall augumented users by random, augumented_users = [63588, 135226, 92854, 118564, 72094, 92063, 117422, 137746, 115049, 7517, 2213, 109576, 98872, 101605, 33034, 129006, 11074, 102817, 145, 75004, 94431, 93924, 125714, 126206, 18922, 90309, 22553, 129537, 9072, 127493, 84002, 57079, 26273, 94235, 133011, 2245, 101126, 136062, 43704, 35385, 2520, 82306, 33649, 92845, 105587, 105074, 79491, 115176, 63456, 41573]
[2024-12-02 20:08:30.013589] user = 76164 Cloud 277/568
[2024-12-02 20:08:30.026227] user = 76164 Local 277/568
[2024-12-02 20:08:30.164640] user = 76164 Local+ 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:32.742487] user = 76164 MPDA- 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48307692307692307
Training on augumented user 63588 0/50 current_auc = 0.48307692307692307
User 63588 AUC after training: 0.48615384615384616
User 63588 improves AUC. Keeping the model.
Training on augumented user 135226 1/50 current_auc = 0.48615384615384616
User 135226 AUC after training: 0.48307692307692307
User 135226 does not improve AUC. Reverting changes.
Training on augumented user 92854 2/50 current_auc = 0.48615384615384616
User 92854 AUC after training: 0.48615384615384616
User 92854 does not improve AUC. Reverting changes.
Training on augumented user 118564 3/50 current_auc = 0.48615384615384616
User 118564 AUC after training: 0.48615384615384616
User 118564 does not improve AUC. Reverting changes.
Training on augumented user 72094 4/50 current_auc = 0.48615384615384616
User 72094 AUC after training: 0.48923076923076925
User 72094 improves AUC. Keeping the model.
Training on augumented user 92063 5/50 current_auc = 0.48923076923076925
User 92063 AUC after training: 0.48615384615384616
User 92063 does not improve AUC. Reverting changes.
Training on augumented user 117422 6/50 current_auc = 0.48923076923076925
User 117422 AUC after training: 0.48923076923076925
User 117422 does not improve AUC. Reverting changes.
Training on augumented user 137746 7/50 current_auc = 0.48923076923076925
User 137746 AUC after training: 0.48
User 137746 does not improve AUC. Reverting changes.
Training on augumented user 115049 8/50 current_auc = 0.48923076923076925
User 115049 AUC after training: 0.48923076923076925
User 115049 does not improve AUC. Reverting changes.
Training on augumented user 7517 9/50 current_auc = 0.48923076923076925
User 7517 AUC after training: 0.48615384615384616
User 7517 does not improve AUC. Reverting changes.
Training on augumented user 2213 10/50 current_auc = 0.48923076923076925
User 2213 AUC after training: 0.49230769230769234
User 2213 improves AUC. Keeping the model.
Training on augumented user 109576 11/50 current_auc = 0.49230769230769234
User 109576 AUC after training: 0.48923076923076925
User 109576 does not improve AUC. Reverting changes.
Training on augumented user 98872 12/50 current_auc = 0.49230769230769234
User 98872 AUC after training: 0.48923076923076925
User 98872 does not improve AUC. Reverting changes.
Training on augumented user 101605 13/50 current_auc = 0.49230769230769234
User 101605 AUC after training: 0.48923076923076925
User 101605 does not improve AUC. Reverting changes.
Training on augumented user 33034 14/50 current_auc = 0.49230769230769234
User 33034 AUC after training: 0.48923076923076925
User 33034 does not improve AUC. Reverting changes.
Training on augumented user 129006 15/50 current_auc = 0.49230769230769234
User 129006 AUC after training: 0.48615384615384616
User 129006 does not improve AUC. Reverting changes.
Training on augumented user 11074 16/50 current_auc = 0.49230769230769234
User 11074 AUC after training: 0.48923076923076925
User 11074 does not improve AUC. Reverting changes.
Training on augumented user 102817 17/50 current_auc = 0.49230769230769234
User 102817 AUC after training: 0.49230769230769234
User 102817 does not improve AUC. Reverting changes.
Training on augumented user 145 18/50 current_auc = 0.49230769230769234
User 145 AUC after training: 0.48923076923076925
User 145 does not improve AUC. Reverting changes.
Training on augumented user 75004 19/50 current_auc = 0.49230769230769234
User 75004 AUC after training: 0.49230769230769234
User 75004 does not improve AUC. Reverting changes.
Training on augumented user 94431 20/50 current_auc = 0.49230769230769234
User 94431 AUC after training: 0.48923076923076925
User 94431 does not improve AUC. Reverting changes.
Training on augumented user 93924 21/50 current_auc = 0.49230769230769234
User 93924 AUC after training: 0.49230769230769234
User 93924 does not improve AUC. Reverting changes.
Training on augumented user 125714 22/50 current_auc = 0.49230769230769234
User 125714 AUC after training: 0.49230769230769234
User 125714 does not improve AUC. Reverting changes.
Training on augumented user 126206 23/50 current_auc = 0.49230769230769234
User 126206 AUC after training: 0.49230769230769234
User 126206 does not improve AUC. Reverting changes.
Training on augumented user 18922 24/50 current_auc = 0.49230769230769234
User 18922 AUC after training: 0.48615384615384616
User 18922 does not improve AUC. Reverting changes.
Training on augumented user 90309 25/50 current_auc = 0.49230769230769234
User 90309 AUC after training: 0.48923076923076925
User 90309 does not improve AUC. Reverting changes.
Training on augumented user 22553 26/50 current_auc = 0.49230769230769234
User 22553 AUC after training: 0.48923076923076925
User 22553 does not improve AUC. Reverting changes.
Training on augumented user 129537 27/50 current_auc = 0.49230769230769234
User 129537 AUC after training: 0.48923076923076925
User 129537 does not improve AUC. Reverting changes.
Training on augumented user 9072 28/50 current_auc = 0.49230769230769234
User 9072 AUC after training: 0.49230769230769234
User 9072 does not improve AUC. Reverting changes.
Training on augumented user 127493 29/50 current_auc = 0.49230769230769234
User 127493 AUC after training: 0.48923076923076925
User 127493 does not improve AUC. Reverting changes.
Training on augumented user 84002 30/50 current_auc = 0.49230769230769234
User 84002 AUC after training: 0.48923076923076925
User 84002 does not improve AUC. Reverting changes.
Training on augumented user 57079 31/50 current_auc = 0.49230769230769234
User 57079 AUC after training: 0.48923076923076925
User 57079 does not improve AUC. Reverting changes.
Training on augumented user 26273 32/50 current_auc = 0.49230769230769234
User 26273 AUC after training: 0.48307692307692307
User 26273 does not improve AUC. Reverting changes.
Training on augumented user 94235 33/50 current_auc = 0.49230769230769234
User 94235 AUC after training: 0.48923076923076925
User 94235 does not improve AUC. Reverting changes.
Training on augumented user 133011 34/50 current_auc = 0.49230769230769234
User 133011 AUC after training: 0.48923076923076925
User 133011 does not improve AUC. Reverting changes.
Training on augumented user 2245 35/50 current_auc = 0.49230769230769234
User 2245 AUC after training: 0.49230769230769234
User 2245 does not improve AUC. Reverting changes.
Training on augumented user 101126 36/50 current_auc = 0.49230769230769234
User 101126 AUC after training: 0.48923076923076925
User 101126 does not improve AUC. Reverting changes.
Training on augumented user 136062 37/50 current_auc = 0.49230769230769234
User 136062 AUC after training: 0.48923076923076925
User 136062 does not improve AUC. Reverting changes.
Training on augumented user 43704 38/50 current_auc = 0.49230769230769234
User 43704 AUC after training: 0.49230769230769234
User 43704 does not improve AUC. Reverting changes.
Training on augumented user 35385 39/50 current_auc = 0.49230769230769234
User 35385 AUC after training: 0.49230769230769234
User 35385 does not improve AUC. Reverting changes.
Training on augumented user 2520 40/50 current_auc = 0.49230769230769234
User 2520 AUC after training: 0.48923076923076925
User 2520 does not improve AUC. Reverting changes.
Training on augumented user 82306 41/50 current_auc = 0.49230769230769234
User 82306 AUC after training: 0.48923076923076925
User 82306 does not improve AUC. Reverting changes.
Training on augumented user 33649 42/50 current_auc = 0.49230769230769234
User 33649 AUC after training: 0.48615384615384616
User 33649 does not improve AUC. Reverting changes.
Training on augumented user 92845 43/50 current_auc = 0.49230769230769234
User 92845 AUC after training: 0.48923076923076925
User 92845 does not improve AUC. Reverting changes.
Training on augumented user 105587 44/50 current_auc = 0.49230769230769234
User 105587 AUC after training: 0.48923076923076925
User 105587 does not improve AUC. Reverting changes.
Training on augumented user 105074 45/50 current_auc = 0.49230769230769234
User 105074 AUC after training: 0.48923076923076925
User 105074 does not improve AUC. Reverting changes.
Training on augumented user 79491 46/50 current_auc = 0.49230769230769234
User 79491 AUC after training: 0.49230769230769234
User 79491 does not improve AUC. Reverting changes.
Training on augumented user 115176 47/50 current_auc = 0.49230769230769234
User 115176 AUC after training: 0.49230769230769234
User 115176 does not improve AUC. Reverting changes.
Training on augumented user 63456 48/50 current_auc = 0.49230769230769234
User 63456 AUC after training: 0.48923076923076925
User 63456 does not improve AUC. Reverting changes.
Training on augumented user 41573 49/50 current_auc = 0.49230769230769234
User 41573 AUC after training: 0.48923076923076925
User 41573 does not improve AUC. Reverting changes.
[2024-12-02 20:09:03.186694] start test user 76213 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:03.827707] start test user 76213 278/568 recall augumented users by random, augumented_users = [95014, 54301, 14275, 122410, 118055, 60146, 111613, 34600, 118350, 31380, 65430, 27955, 6700, 11350, 93769, 93972, 132158, 122121, 116460, 53779, 72129, 22935, 14794, 128517, 123752, 89265, 121332, 55241, 85096, 18564, 68013, 28440, 111755, 108096, 74212, 2403, 78736, 77955, 50925, 114552, 82401, 75750, 96788, 137441, 43650, 14914, 118058, 77402, 79430, 10159]
[2024-12-02 20:09:03.885964] user = 76213 Cloud 278/568
[2024-12-02 20:09:03.903057] user = 76213 Local 278/568
[2024-12-02 20:09:04.393917] user = 76213 Local+ 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:07.014460] user = 76213 MPDA- 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.41258741258741255
Training on augumented user 95014 0/50 current_auc = 0.41258741258741255
User 95014 AUC after training: 0.41258741258741255
User 95014 does not improve AUC. Reverting changes.
Training on augumented user 54301 1/50 current_auc = 0.41258741258741255
User 54301 AUC after training: 0.41258741258741255
User 54301 does not improve AUC. Reverting changes.
Training on augumented user 14275 2/50 current_auc = 0.41258741258741255
User 14275 AUC after training: 0.41258741258741255
User 14275 does not improve AUC. Reverting changes.
Training on augumented user 122410 3/50 current_auc = 0.41258741258741255
User 122410 AUC after training: 0.41258741258741255
User 122410 does not improve AUC. Reverting changes.
Training on augumented user 118055 4/50 current_auc = 0.41258741258741255
User 118055 AUC after training: 0.41258741258741255
User 118055 does not improve AUC. Reverting changes.
Training on augumented user 60146 5/50 current_auc = 0.41258741258741255
User 60146 AUC after training: 0.41258741258741255
User 60146 does not improve AUC. Reverting changes.
Training on augumented user 111613 6/50 current_auc = 0.41258741258741255
User 111613 AUC after training: 0.41258741258741255
User 111613 does not improve AUC. Reverting changes.
Training on augumented user 34600 7/50 current_auc = 0.41258741258741255
User 34600 AUC after training: 0.41258741258741255
User 34600 does not improve AUC. Reverting changes.
Training on augumented user 118350 8/50 current_auc = 0.41258741258741255
User 118350 AUC after training: 0.41258741258741255
User 118350 does not improve AUC. Reverting changes.
Training on augumented user 31380 9/50 current_auc = 0.41258741258741255
User 31380 AUC after training: 0.41258741258741255
User 31380 does not improve AUC. Reverting changes.
Training on augumented user 65430 10/50 current_auc = 0.41258741258741255
User 65430 AUC after training: 0.41258741258741255
User 65430 does not improve AUC. Reverting changes.
Training on augumented user 27955 11/50 current_auc = 0.41258741258741255
User 27955 AUC after training: 0.41258741258741255
User 27955 does not improve AUC. Reverting changes.
Training on augumented user 6700 12/50 current_auc = 0.41258741258741255
User 6700 AUC after training: 0.41258741258741255
User 6700 does not improve AUC. Reverting changes.
Training on augumented user 11350 13/50 current_auc = 0.41258741258741255
User 11350 AUC after training: 0.4195804195804196
User 11350 improves AUC. Keeping the model.
Training on augumented user 93769 14/50 current_auc = 0.4195804195804196
User 93769 AUC after training: 0.4195804195804196
User 93769 does not improve AUC. Reverting changes.
Training on augumented user 93972 15/50 current_auc = 0.4195804195804196
User 93972 AUC after training: 0.4195804195804196
User 93972 does not improve AUC. Reverting changes.
Training on augumented user 132158 16/50 current_auc = 0.4195804195804196
User 132158 AUC after training: 0.4195804195804196
User 132158 does not improve AUC. Reverting changes.
Training on augumented user 122121 17/50 current_auc = 0.4195804195804196
User 122121 AUC after training: 0.4195804195804196
User 122121 does not improve AUC. Reverting changes.
Training on augumented user 116460 18/50 current_auc = 0.4195804195804196
User 116460 AUC after training: 0.4195804195804196
User 116460 does not improve AUC. Reverting changes.
Training on augumented user 53779 19/50 current_auc = 0.4195804195804196
User 53779 AUC after training: 0.4195804195804196
User 53779 does not improve AUC. Reverting changes.
Training on augumented user 72129 20/50 current_auc = 0.4195804195804196
User 72129 AUC after training: 0.4195804195804196
User 72129 does not improve AUC. Reverting changes.
Training on augumented user 22935 21/50 current_auc = 0.4195804195804196
User 22935 AUC after training: 0.4195804195804196
User 22935 does not improve AUC. Reverting changes.
Training on augumented user 14794 22/50 current_auc = 0.4195804195804196
User 14794 AUC after training: 0.4195804195804196
User 14794 does not improve AUC. Reverting changes.
Training on augumented user 128517 23/50 current_auc = 0.4195804195804196
User 128517 AUC after training: 0.4195804195804196
User 128517 does not improve AUC. Reverting changes.
Training on augumented user 123752 24/50 current_auc = 0.4195804195804196
User 123752 AUC after training: 0.4195804195804196
User 123752 does not improve AUC. Reverting changes.
Training on augumented user 89265 25/50 current_auc = 0.4195804195804196
User 89265 AUC after training: 0.4195804195804196
User 89265 does not improve AUC. Reverting changes.
Training on augumented user 121332 26/50 current_auc = 0.4195804195804196
User 121332 AUC after training: 0.4195804195804196
User 121332 does not improve AUC. Reverting changes.
Training on augumented user 55241 27/50 current_auc = 0.4195804195804196
User 55241 AUC after training: 0.4195804195804196
User 55241 does not improve AUC. Reverting changes.
Training on augumented user 85096 28/50 current_auc = 0.4195804195804196
User 85096 AUC after training: 0.4195804195804196
User 85096 does not improve AUC. Reverting changes.
Training on augumented user 18564 29/50 current_auc = 0.4195804195804196
User 18564 AUC after training: 0.4195804195804196
User 18564 does not improve AUC. Reverting changes.
Training on augumented user 68013 30/50 current_auc = 0.4195804195804196
User 68013 AUC after training: 0.4195804195804196
User 68013 does not improve AUC. Reverting changes.
Training on augumented user 28440 31/50 current_auc = 0.4195804195804196
User 28440 AUC after training: 0.4195804195804196
User 28440 does not improve AUC. Reverting changes.
Training on augumented user 111755 32/50 current_auc = 0.4195804195804196
User 111755 AUC after training: 0.4195804195804196
User 111755 does not improve AUC. Reverting changes.
Training on augumented user 108096 33/50 current_auc = 0.4195804195804196
User 108096 AUC after training: 0.4195804195804196
User 108096 does not improve AUC. Reverting changes.
Training on augumented user 74212 34/50 current_auc = 0.4195804195804196
User 74212 AUC after training: 0.4195804195804196
User 74212 does not improve AUC. Reverting changes.
Training on augumented user 2403 35/50 current_auc = 0.4195804195804196
User 2403 AUC after training: 0.4195804195804196
User 2403 does not improve AUC. Reverting changes.
Training on augumented user 78736 36/50 current_auc = 0.4195804195804196
User 78736 AUC after training: 0.4195804195804196
User 78736 does not improve AUC. Reverting changes.
Training on augumented user 77955 37/50 current_auc = 0.4195804195804196
User 77955 AUC after training: 0.4195804195804196
User 77955 does not improve AUC. Reverting changes.
Training on augumented user 50925 38/50 current_auc = 0.4195804195804196
User 50925 AUC after training: 0.4195804195804196
User 50925 does not improve AUC. Reverting changes.
Training on augumented user 114552 39/50 current_auc = 0.4195804195804196
User 114552 AUC after training: 0.42657342657342656
User 114552 improves AUC. Keeping the model.
Training on augumented user 82401 40/50 current_auc = 0.42657342657342656
User 82401 AUC after training: 0.4195804195804196
User 82401 does not improve AUC. Reverting changes.
Training on augumented user 75750 41/50 current_auc = 0.42657342657342656
User 75750 AUC after training: 0.42657342657342656
User 75750 does not improve AUC. Reverting changes.
Training on augumented user 96788 42/50 current_auc = 0.42657342657342656
User 96788 AUC after training: 0.43356643356643354
User 96788 improves AUC. Keeping the model.
Training on augumented user 137441 43/50 current_auc = 0.43356643356643354
User 137441 AUC after training: 0.43356643356643354
User 137441 does not improve AUC. Reverting changes.
Training on augumented user 43650 44/50 current_auc = 0.43356643356643354
User 43650 AUC after training: 0.43356643356643354
User 43650 does not improve AUC. Reverting changes.
Training on augumented user 14914 45/50 current_auc = 0.43356643356643354
User 14914 AUC after training: 0.42657342657342656
User 14914 does not improve AUC. Reverting changes.
Training on augumented user 118058 46/50 current_auc = 0.43356643356643354
User 118058 AUC after training: 0.43356643356643354
User 118058 does not improve AUC. Reverting changes.
Training on augumented user 77402 47/50 current_auc = 0.43356643356643354
User 77402 AUC after training: 0.43356643356643354
User 77402 does not improve AUC. Reverting changes.
Training on augumented user 79430 48/50 current_auc = 0.43356643356643354
User 79430 AUC after training: 0.43356643356643354
User 79430 does not improve AUC. Reverting changes.
Training on augumented user 10159 49/50 current_auc = 0.43356643356643354
User 10159 AUC after training: 0.43356643356643354
User 10159 does not improve AUC. Reverting changes.
[2024-12-02 20:09:35.382746] start test user 76245 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:36.021509] start test user 76245 279/568 recall augumented users by random, augumented_users = [95867, 19992, 5878, 51641, 120338, 93597, 80138, 134106, 90060, 73009, 48126, 132072, 80708, 117968, 105311, 123095, 122181, 717, 78156, 117665, 106781, 118263, 42304, 93330, 117279, 112460, 47899, 128706, 56063, 54181, 97710, 119805, 20739, 118403, 111345, 131014, 75313, 16878, 48436, 58134, 43844, 75326, 110698, 82577, 129351, 34293, 42255, 53209, 22435, 97582]
[2024-12-02 20:09:36.037235] user = 76245 Cloud 279/568
[2024-12-02 20:09:36.048649] user = 76245 Local 279/568
[2024-12-02 20:09:36.148145] user = 76245 Local+ 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:39.053511] user = 76245 MPDA- 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6177285318559557
Training on augumented user 95867 0/50 current_auc = 0.6177285318559557
User 95867 AUC after training: 0.6218836565096953
User 95867 improves AUC. Keeping the model.
Training on augumented user 19992 1/50 current_auc = 0.6218836565096953
User 19992 AUC after training: 0.6232686980609419
User 19992 improves AUC. Keeping the model.
Training on augumented user 5878 2/50 current_auc = 0.6232686980609419
User 5878 AUC after training: 0.6246537396121884
User 5878 improves AUC. Keeping the model.
Training on augumented user 51641 3/50 current_auc = 0.6246537396121884
User 51641 AUC after training: 0.6260387811634349
User 51641 improves AUC. Keeping the model.
Training on augumented user 120338 4/50 current_auc = 0.6260387811634349
User 120338 AUC after training: 0.6260387811634349
User 120338 does not improve AUC. Reverting changes.
Training on augumented user 93597 5/50 current_auc = 0.6260387811634349
User 93597 AUC after training: 0.6246537396121884
User 93597 does not improve AUC. Reverting changes.
Training on augumented user 80138 6/50 current_auc = 0.6260387811634349
User 80138 AUC after training: 0.6246537396121884
User 80138 does not improve AUC. Reverting changes.
Training on augumented user 134106 7/50 current_auc = 0.6260387811634349
User 134106 AUC after training: 0.6260387811634349
User 134106 does not improve AUC. Reverting changes.
Training on augumented user 90060 8/50 current_auc = 0.6260387811634349
User 90060 AUC after training: 0.6260387811634349
User 90060 does not improve AUC. Reverting changes.
Training on augumented user 73009 9/50 current_auc = 0.6260387811634349
User 73009 AUC after training: 0.6246537396121884
User 73009 does not improve AUC. Reverting changes.
Training on augumented user 48126 10/50 current_auc = 0.6260387811634349
User 48126 AUC after training: 0.6260387811634349
User 48126 does not improve AUC. Reverting changes.
Training on augumented user 132072 11/50 current_auc = 0.6260387811634349
User 132072 AUC after training: 0.6260387811634349
User 132072 does not improve AUC. Reverting changes.
Training on augumented user 80708 12/50 current_auc = 0.6260387811634349
User 80708 AUC after training: 0.6232686980609419
User 80708 does not improve AUC. Reverting changes.
Training on augumented user 117968 13/50 current_auc = 0.6260387811634349
User 117968 AUC after training: 0.6246537396121884
User 117968 does not improve AUC. Reverting changes.
Training on augumented user 105311 14/50 current_auc = 0.6260387811634349
User 105311 AUC after training: 0.6246537396121884
User 105311 does not improve AUC. Reverting changes.
Training on augumented user 123095 15/50 current_auc = 0.6260387811634349
User 123095 AUC after training: 0.6246537396121884
User 123095 does not improve AUC. Reverting changes.
Training on augumented user 122181 16/50 current_auc = 0.6260387811634349
User 122181 AUC after training: 0.6260387811634349
User 122181 does not improve AUC. Reverting changes.
Training on augumented user 717 17/50 current_auc = 0.6260387811634349
User 717 AUC after training: 0.6246537396121884
User 717 does not improve AUC. Reverting changes.
Training on augumented user 78156 18/50 current_auc = 0.6260387811634349
User 78156 AUC after training: 0.6260387811634349
User 78156 does not improve AUC. Reverting changes.
Training on augumented user 117665 19/50 current_auc = 0.6260387811634349
User 117665 AUC after training: 0.6260387811634349
User 117665 does not improve AUC. Reverting changes.
Training on augumented user 106781 20/50 current_auc = 0.6260387811634349
User 106781 AUC after training: 0.6260387811634349
User 106781 does not improve AUC. Reverting changes.
Training on augumented user 118263 21/50 current_auc = 0.6260387811634349
User 118263 AUC after training: 0.6260387811634349
User 118263 does not improve AUC. Reverting changes.
Training on augumented user 42304 22/50 current_auc = 0.6260387811634349
User 42304 AUC after training: 0.6246537396121884
User 42304 does not improve AUC. Reverting changes.
Training on augumented user 93330 23/50 current_auc = 0.6260387811634349
User 93330 AUC after training: 0.6260387811634349
User 93330 does not improve AUC. Reverting changes.
Training on augumented user 117279 24/50 current_auc = 0.6260387811634349
User 117279 AUC after training: 0.6218836565096953
User 117279 does not improve AUC. Reverting changes.
Training on augumented user 112460 25/50 current_auc = 0.6260387811634349
User 112460 AUC after training: 0.6246537396121884
User 112460 does not improve AUC. Reverting changes.
Training on augumented user 47899 26/50 current_auc = 0.6260387811634349
User 47899 AUC after training: 0.6246537396121884
User 47899 does not improve AUC. Reverting changes.
Training on augumented user 128706 27/50 current_auc = 0.6260387811634349
User 128706 AUC after training: 0.6260387811634349
User 128706 does not improve AUC. Reverting changes.
Training on augumented user 56063 28/50 current_auc = 0.6260387811634349
User 56063 AUC after training: 0.6260387811634349
User 56063 does not improve AUC. Reverting changes.
Training on augumented user 54181 29/50 current_auc = 0.6260387811634349
User 54181 AUC after training: 0.6260387811634349
User 54181 does not improve AUC. Reverting changes.
Training on augumented user 97710 30/50 current_auc = 0.6260387811634349
User 97710 AUC after training: 0.6246537396121884
User 97710 does not improve AUC. Reverting changes.
Training on augumented user 119805 31/50 current_auc = 0.6260387811634349
User 119805 AUC after training: 0.6260387811634349
User 119805 does not improve AUC. Reverting changes.
Training on augumented user 20739 32/50 current_auc = 0.6260387811634349
User 20739 AUC after training: 0.6260387811634349
User 20739 does not improve AUC. Reverting changes.
Training on augumented user 118403 33/50 current_auc = 0.6260387811634349
User 118403 AUC after training: 0.6260387811634349
User 118403 does not improve AUC. Reverting changes.
Training on augumented user 111345 34/50 current_auc = 0.6260387811634349
User 111345 AUC after training: 0.6260387811634349
User 111345 does not improve AUC. Reverting changes.
Training on augumented user 131014 35/50 current_auc = 0.6260387811634349
User 131014 AUC after training: 0.6260387811634349
User 131014 does not improve AUC. Reverting changes.
Training on augumented user 75313 36/50 current_auc = 0.6260387811634349
User 75313 AUC after training: 0.6246537396121884
User 75313 does not improve AUC. Reverting changes.
Training on augumented user 16878 37/50 current_auc = 0.6260387811634349
User 16878 AUC after training: 0.6246537396121884
User 16878 does not improve AUC. Reverting changes.
Training on augumented user 48436 38/50 current_auc = 0.6260387811634349
User 48436 AUC after training: 0.6246537396121884
User 48436 does not improve AUC. Reverting changes.
Training on augumented user 58134 39/50 current_auc = 0.6260387811634349
User 58134 AUC after training: 0.6246537396121884
User 58134 does not improve AUC. Reverting changes.
Training on augumented user 43844 40/50 current_auc = 0.6260387811634349
User 43844 AUC after training: 0.6260387811634349
User 43844 does not improve AUC. Reverting changes.
Training on augumented user 75326 41/50 current_auc = 0.6260387811634349
User 75326 AUC after training: 0.6260387811634349
User 75326 does not improve AUC. Reverting changes.
Training on augumented user 110698 42/50 current_auc = 0.6260387811634349
User 110698 AUC after training: 0.6260387811634349
User 110698 does not improve AUC. Reverting changes.
Training on augumented user 82577 43/50 current_auc = 0.6260387811634349
User 82577 AUC after training: 0.6260387811634349
User 82577 does not improve AUC. Reverting changes.
Training on augumented user 129351 44/50 current_auc = 0.6260387811634349
User 129351 AUC after training: 0.6246537396121884
User 129351 does not improve AUC. Reverting changes.
Training on augumented user 34293 45/50 current_auc = 0.6260387811634349
User 34293 AUC after training: 0.6260387811634349
User 34293 does not improve AUC. Reverting changes.
Training on augumented user 42255 46/50 current_auc = 0.6260387811634349
User 42255 AUC after training: 0.6246537396121884
User 42255 does not improve AUC. Reverting changes.
Training on augumented user 53209 47/50 current_auc = 0.6260387811634349
User 53209 AUC after training: 0.6260387811634349
User 53209 does not improve AUC. Reverting changes.
Training on augumented user 22435 48/50 current_auc = 0.6260387811634349
User 22435 AUC after training: 0.6260387811634349
User 22435 does not improve AUC. Reverting changes.
Training on augumented user 97582 49/50 current_auc = 0.6260387811634349
User 97582 AUC after training: 0.6246537396121884
User 97582 does not improve AUC. Reverting changes.
[2024-12-02 20:10:10.445270] start test user 76263 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:10.864970] start test user 76263 280/568 recall augumented users by random, augumented_users = [4438, 93330, 114531, 12103, 13779, 45183, 2806, 115923, 120896, 43100, 25301, 33101, 133645, 116010, 42051, 38288, 50695, 716, 51202, 122196, 124781, 69147, 77400, 40416, 75536, 74707, 67327, 131780, 82692, 31465, 80110, 54435, 51366, 64883, 135526, 28417, 103868, 70991, 2711, 50870, 119952, 102412, 22149, 74920, 18150, 134217, 60314, 126855, 89137, 10592]
[2024-12-02 20:10:10.880127] user = 76263 Cloud 280/568
[2024-12-02 20:10:10.890444] user = 76263 Local 280/568
[2024-12-02 20:10:10.931254] user = 76263 Local+ 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:13.068265] user = 76263 MPDA- 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6077586206896552
Training on augumented user 4438 0/50 current_auc = 0.6077586206896552
User 4438 AUC after training: 0.6077586206896552
User 4438 does not improve AUC. Reverting changes.
Training on augumented user 93330 1/50 current_auc = 0.6077586206896552
User 93330 AUC after training: 0.6077586206896552
User 93330 does not improve AUC. Reverting changes.
Training on augumented user 114531 2/50 current_auc = 0.6077586206896552
User 114531 AUC after training: 0.6185344827586207
User 114531 improves AUC. Keeping the model.
Training on augumented user 12103 3/50 current_auc = 0.6185344827586207
User 12103 AUC after training: 0.603448275862069
User 12103 does not improve AUC. Reverting changes.
Training on augumented user 13779 4/50 current_auc = 0.6185344827586207
User 13779 AUC after training: 0.6185344827586207
User 13779 does not improve AUC. Reverting changes.
Training on augumented user 45183 5/50 current_auc = 0.6185344827586207
User 45183 AUC after training: 0.6206896551724138
User 45183 improves AUC. Keeping the model.
Training on augumented user 2806 6/50 current_auc = 0.6206896551724138
User 2806 AUC after training: 0.6206896551724138
User 2806 does not improve AUC. Reverting changes.
Training on augumented user 115923 7/50 current_auc = 0.6206896551724138
User 115923 AUC after training: 0.6142241379310345
User 115923 does not improve AUC. Reverting changes.
Training on augumented user 120896 8/50 current_auc = 0.6206896551724138
User 120896 AUC after training: 0.6120689655172414
User 120896 does not improve AUC. Reverting changes.
Training on augumented user 43100 9/50 current_auc = 0.6206896551724138
User 43100 AUC after training: 0.6099137931034483
User 43100 does not improve AUC. Reverting changes.
Training on augumented user 25301 10/50 current_auc = 0.6206896551724138
User 25301 AUC after training: 0.6206896551724138
User 25301 does not improve AUC. Reverting changes.
Training on augumented user 33101 11/50 current_auc = 0.6206896551724138
User 33101 AUC after training: 0.6120689655172414
User 33101 does not improve AUC. Reverting changes.
Training on augumented user 133645 12/50 current_auc = 0.6206896551724138
User 133645 AUC after training: 0.6206896551724138
User 133645 does not improve AUC. Reverting changes.
Training on augumented user 116010 13/50 current_auc = 0.6206896551724138
User 116010 AUC after training: 0.6099137931034483
User 116010 does not improve AUC. Reverting changes.
Training on augumented user 42051 14/50 current_auc = 0.6206896551724138
User 42051 AUC after training: 0.6185344827586207
User 42051 does not improve AUC. Reverting changes.
Training on augumented user 38288 15/50 current_auc = 0.6206896551724138
User 38288 AUC after training: 0.6206896551724138
User 38288 does not improve AUC. Reverting changes.
Training on augumented user 50695 16/50 current_auc = 0.6206896551724138
User 50695 AUC after training: 0.6163793103448276
User 50695 does not improve AUC. Reverting changes.
Training on augumented user 716 17/50 current_auc = 0.6206896551724138
User 716 AUC after training: 0.6142241379310345
User 716 does not improve AUC. Reverting changes.
Training on augumented user 51202 18/50 current_auc = 0.6206896551724138
User 51202 AUC after training: 0.6163793103448276
User 51202 does not improve AUC. Reverting changes.
Training on augumented user 122196 19/50 current_auc = 0.6206896551724138
User 122196 AUC after training: 0.6142241379310345
User 122196 does not improve AUC. Reverting changes.
Training on augumented user 124781 20/50 current_auc = 0.6206896551724138
User 124781 AUC after training: 0.6206896551724138
User 124781 does not improve AUC. Reverting changes.
Training on augumented user 69147 21/50 current_auc = 0.6206896551724138
User 69147 AUC after training: 0.6120689655172414
User 69147 does not improve AUC. Reverting changes.
Training on augumented user 77400 22/50 current_auc = 0.6206896551724138
User 77400 AUC after training: 0.6163793103448276
User 77400 does not improve AUC. Reverting changes.
Training on augumented user 40416 23/50 current_auc = 0.6206896551724138
User 40416 AUC after training: 0.6163793103448276
User 40416 does not improve AUC. Reverting changes.
Training on augumented user 75536 24/50 current_auc = 0.6206896551724138
User 75536 AUC after training: 0.6099137931034483
User 75536 does not improve AUC. Reverting changes.
Training on augumented user 74707 25/50 current_auc = 0.6206896551724138
User 74707 AUC after training: 0.6099137931034483
User 74707 does not improve AUC. Reverting changes.
Training on augumented user 67327 26/50 current_auc = 0.6206896551724138
User 67327 AUC after training: 0.6077586206896552
User 67327 does not improve AUC. Reverting changes.
Training on augumented user 131780 27/50 current_auc = 0.6206896551724138
User 131780 AUC after training: 0.6163793103448276
User 131780 does not improve AUC. Reverting changes.
Training on augumented user 82692 28/50 current_auc = 0.6206896551724138
User 82692 AUC after training: 0.6185344827586207
User 82692 does not improve AUC. Reverting changes.
Training on augumented user 31465 29/50 current_auc = 0.6206896551724138
User 31465 AUC after training: 0.6120689655172414
User 31465 does not improve AUC. Reverting changes.
Training on augumented user 80110 30/50 current_auc = 0.6206896551724138
User 80110 AUC after training: 0.6206896551724138
User 80110 does not improve AUC. Reverting changes.
Training on augumented user 54435 31/50 current_auc = 0.6206896551724138
User 54435 AUC after training: 0.6142241379310345
User 54435 does not improve AUC. Reverting changes.
Training on augumented user 51366 32/50 current_auc = 0.6206896551724138
User 51366 AUC after training: 0.6185344827586207
User 51366 does not improve AUC. Reverting changes.
Training on augumented user 64883 33/50 current_auc = 0.6206896551724138
User 64883 AUC after training: 0.6120689655172414
User 64883 does not improve AUC. Reverting changes.
Training on augumented user 135526 34/50 current_auc = 0.6206896551724138
User 135526 AUC after training: 0.6163793103448276
User 135526 does not improve AUC. Reverting changes.
Training on augumented user 28417 35/50 current_auc = 0.6206896551724138
User 28417 AUC after training: 0.6163793103448276
User 28417 does not improve AUC. Reverting changes.
Training on augumented user 103868 36/50 current_auc = 0.6206896551724138
User 103868 AUC after training: 0.6163793103448276
User 103868 does not improve AUC. Reverting changes.
Training on augumented user 70991 37/50 current_auc = 0.6206896551724138
User 70991 AUC after training: 0.6099137931034483
User 70991 does not improve AUC. Reverting changes.
Training on augumented user 2711 38/50 current_auc = 0.6206896551724138
User 2711 AUC after training: 0.6379310344827587
User 2711 improves AUC. Keeping the model.
Training on augumented user 50870 39/50 current_auc = 0.6379310344827587
User 50870 AUC after training: 0.6379310344827587
User 50870 does not improve AUC. Reverting changes.
Training on augumented user 119952 40/50 current_auc = 0.6379310344827587
User 119952 AUC after training: 0.6379310344827587
User 119952 does not improve AUC. Reverting changes.
Training on augumented user 102412 41/50 current_auc = 0.6379310344827587
User 102412 AUC after training: 0.6379310344827587
User 102412 does not improve AUC. Reverting changes.
Training on augumented user 22149 42/50 current_auc = 0.6379310344827587
User 22149 AUC after training: 0.6379310344827587
User 22149 does not improve AUC. Reverting changes.
Training on augumented user 74920 43/50 current_auc = 0.6379310344827587
User 74920 AUC after training: 0.6163793103448276
User 74920 does not improve AUC. Reverting changes.
Training on augumented user 18150 44/50 current_auc = 0.6379310344827587
User 18150 AUC after training: 0.6379310344827587
User 18150 does not improve AUC. Reverting changes.
Training on augumented user 134217 45/50 current_auc = 0.6379310344827587
User 134217 AUC after training: 0.6379310344827587
User 134217 does not improve AUC. Reverting changes.
Training on augumented user 60314 46/50 current_auc = 0.6379310344827587
User 60314 AUC after training: 0.6379310344827587
User 60314 does not improve AUC. Reverting changes.
Training on augumented user 126855 47/50 current_auc = 0.6379310344827587
User 126855 AUC after training: 0.6379310344827587
User 126855 does not improve AUC. Reverting changes.
Training on augumented user 89137 48/50 current_auc = 0.6379310344827587
User 89137 AUC after training: 0.6163793103448276
User 89137 does not improve AUC. Reverting changes.
Training on augumented user 10592 49/50 current_auc = 0.6379310344827587
User 10592 AUC after training: 0.6379310344827587
User 10592 does not improve AUC. Reverting changes.
[2024-12-02 20:10:41.803606] start test user 76292 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:42.238893] start test user 76292 281/568 recall augumented users by random, augumented_users = [5036, 133548, 103580, 72721, 2293, 28434, 128739, 77854, 113598, 59852, 80239, 37493, 121487, 30241, 105877, 16298, 99992, 120165, 63210, 70934, 69608, 36955, 118550, 132483, 44250, 112071, 118050, 106690, 97963, 17106, 82288, 34832, 17390, 13481, 44482, 26885, 79333, 117766, 6017, 59263, 53832, 110208, 88949, 7953, 133705, 94665, 101736, 76438, 31954, 87326]
[2024-12-02 20:10:42.257474] user = 76292 Cloud 281/568
[2024-12-02 20:10:42.266566] user = 76292 Local 281/568
[2024-12-02 20:10:42.574876] user = 76292 Local+ 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:44.626908] user = 76292 MPDA- 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 5036 0/50 current_auc = 1.0
User 5036 AUC after training: 1.0
User 5036 does not improve AUC. Reverting changes.
Training on augumented user 133548 1/50 current_auc = 1.0
User 133548 AUC after training: 1.0
User 133548 does not improve AUC. Reverting changes.
Training on augumented user 103580 2/50 current_auc = 1.0
User 103580 AUC after training: 1.0
User 103580 does not improve AUC. Reverting changes.
Training on augumented user 72721 3/50 current_auc = 1.0
User 72721 AUC after training: 1.0
User 72721 does not improve AUC. Reverting changes.
Training on augumented user 2293 4/50 current_auc = 1.0
User 2293 AUC after training: 1.0
User 2293 does not improve AUC. Reverting changes.
Training on augumented user 28434 5/50 current_auc = 1.0
User 28434 AUC after training: 1.0
User 28434 does not improve AUC. Reverting changes.
Training on augumented user 128739 6/50 current_auc = 1.0
User 128739 AUC after training: 1.0
User 128739 does not improve AUC. Reverting changes.
Training on augumented user 77854 7/50 current_auc = 1.0
User 77854 AUC after training: 1.0
User 77854 does not improve AUC. Reverting changes.
Training on augumented user 113598 8/50 current_auc = 1.0
User 113598 AUC after training: 1.0
User 113598 does not improve AUC. Reverting changes.
Training on augumented user 59852 9/50 current_auc = 1.0
User 59852 AUC after training: 1.0
User 59852 does not improve AUC. Reverting changes.
Training on augumented user 80239 10/50 current_auc = 1.0
User 80239 AUC after training: 1.0
User 80239 does not improve AUC. Reverting changes.
Training on augumented user 37493 11/50 current_auc = 1.0
User 37493 AUC after training: 1.0
User 37493 does not improve AUC. Reverting changes.
Training on augumented user 121487 12/50 current_auc = 1.0
User 121487 AUC after training: 1.0
User 121487 does not improve AUC. Reverting changes.
Training on augumented user 30241 13/50 current_auc = 1.0
User 30241 AUC after training: 1.0
User 30241 does not improve AUC. Reverting changes.
Training on augumented user 105877 14/50 current_auc = 1.0
User 105877 AUC after training: 1.0
User 105877 does not improve AUC. Reverting changes.
Training on augumented user 16298 15/50 current_auc = 1.0
User 16298 AUC after training: 1.0
User 16298 does not improve AUC. Reverting changes.
Training on augumented user 99992 16/50 current_auc = 1.0
User 99992 AUC after training: 1.0
User 99992 does not improve AUC. Reverting changes.
Training on augumented user 120165 17/50 current_auc = 1.0
User 120165 AUC after training: 1.0
User 120165 does not improve AUC. Reverting changes.
Training on augumented user 63210 18/50 current_auc = 1.0
User 63210 AUC after training: 1.0
User 63210 does not improve AUC. Reverting changes.
Training on augumented user 70934 19/50 current_auc = 1.0
User 70934 AUC after training: 1.0
User 70934 does not improve AUC. Reverting changes.
Training on augumented user 69608 20/50 current_auc = 1.0
User 69608 AUC after training: 1.0
User 69608 does not improve AUC. Reverting changes.
Training on augumented user 36955 21/50 current_auc = 1.0
User 36955 AUC after training: 1.0
User 36955 does not improve AUC. Reverting changes.
Training on augumented user 118550 22/50 current_auc = 1.0
User 118550 AUC after training: 1.0
User 118550 does not improve AUC. Reverting changes.
Training on augumented user 132483 23/50 current_auc = 1.0
User 132483 AUC after training: 1.0
User 132483 does not improve AUC. Reverting changes.
Training on augumented user 44250 24/50 current_auc = 1.0
User 44250 AUC after training: 1.0
User 44250 does not improve AUC. Reverting changes.
Training on augumented user 112071 25/50 current_auc = 1.0
User 112071 AUC after training: 1.0
User 112071 does not improve AUC. Reverting changes.
Training on augumented user 118050 26/50 current_auc = 1.0
User 118050 AUC after training: 1.0
User 118050 does not improve AUC. Reverting changes.
Training on augumented user 106690 27/50 current_auc = 1.0
User 106690 AUC after training: 1.0
User 106690 does not improve AUC. Reverting changes.
Training on augumented user 97963 28/50 current_auc = 1.0
User 97963 AUC after training: 1.0
User 97963 does not improve AUC. Reverting changes.
Training on augumented user 17106 29/50 current_auc = 1.0
User 17106 AUC after training: 1.0
User 17106 does not improve AUC. Reverting changes.
Training on augumented user 82288 30/50 current_auc = 1.0
User 82288 AUC after training: 1.0
User 82288 does not improve AUC. Reverting changes.
Training on augumented user 34832 31/50 current_auc = 1.0
User 34832 AUC after training: 1.0
User 34832 does not improve AUC. Reverting changes.
Training on augumented user 17390 32/50 current_auc = 1.0
User 17390 AUC after training: 1.0
User 17390 does not improve AUC. Reverting changes.
Training on augumented user 13481 33/50 current_auc = 1.0
User 13481 AUC after training: 1.0
User 13481 does not improve AUC. Reverting changes.
Training on augumented user 44482 34/50 current_auc = 1.0
User 44482 AUC after training: 1.0
User 44482 does not improve AUC. Reverting changes.
Training on augumented user 26885 35/50 current_auc = 1.0
User 26885 AUC after training: 1.0
User 26885 does not improve AUC. Reverting changes.
Training on augumented user 79333 36/50 current_auc = 1.0
User 79333 AUC after training: 1.0
User 79333 does not improve AUC. Reverting changes.
Training on augumented user 117766 37/50 current_auc = 1.0
User 117766 AUC after training: 1.0
User 117766 does not improve AUC. Reverting changes.
Training on augumented user 6017 38/50 current_auc = 1.0
User 6017 AUC after training: 1.0
User 6017 does not improve AUC. Reverting changes.
Training on augumented user 59263 39/50 current_auc = 1.0
User 59263 AUC after training: 1.0
User 59263 does not improve AUC. Reverting changes.
Training on augumented user 53832 40/50 current_auc = 1.0
User 53832 AUC after training: 1.0
User 53832 does not improve AUC. Reverting changes.
Training on augumented user 110208 41/50 current_auc = 1.0
User 110208 AUC after training: 1.0
User 110208 does not improve AUC. Reverting changes.
Training on augumented user 88949 42/50 current_auc = 1.0
User 88949 AUC after training: 1.0
User 88949 does not improve AUC. Reverting changes.
Training on augumented user 7953 43/50 current_auc = 1.0
User 7953 AUC after training: 1.0
User 7953 does not improve AUC. Reverting changes.
Training on augumented user 133705 44/50 current_auc = 1.0
User 133705 AUC after training: 1.0
User 133705 does not improve AUC. Reverting changes.
Training on augumented user 94665 45/50 current_auc = 1.0
User 94665 AUC after training: 1.0
User 94665 does not improve AUC. Reverting changes.
Training on augumented user 101736 46/50 current_auc = 1.0
User 101736 AUC after training: 1.0
User 101736 does not improve AUC. Reverting changes.
Training on augumented user 76438 47/50 current_auc = 1.0
User 76438 AUC after training: 1.0
User 76438 does not improve AUC. Reverting changes.
Training on augumented user 31954 48/50 current_auc = 1.0
User 31954 AUC after training: 1.0
User 31954 does not improve AUC. Reverting changes.
Training on augumented user 87326 49/50 current_auc = 1.0
User 87326 AUC after training: 1.0
User 87326 does not improve AUC. Reverting changes.
[2024-12-02 20:11:17.051956] start test user 76307 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:17.558722] start test user 76307 282/568 recall augumented users by random, augumented_users = [50476, 65096, 72754, 47754, 82963, 97559, 31671, 65236, 40474, 50599, 117517, 112553, 59945, 97129, 20484, 30891, 66355, 10702, 40050, 18857, 67449, 24377, 22017, 121534, 98840, 118205, 137254, 107825, 45605, 76181, 89943, 106164, 46798, 60092, 48769, 119310, 106905, 94414, 122410, 45056, 3052, 31360, 91077, 35467, 98781, 74915, 133023, 13376, 60545, 118044]
[2024-12-02 20:11:17.576638] user = 76307 Cloud 282/568
[2024-12-02 20:11:17.593918] user = 76307 Local 282/568
[2024-12-02 20:11:17.787574] user = 76307 Local+ 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:22.345923] user = 76307 MPDA- 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7743628185907047
Training on augumented user 50476 0/50 current_auc = 0.7743628185907047
User 50476 AUC after training: 0.7743628185907047
User 50476 does not improve AUC. Reverting changes.
Training on augumented user 65096 1/50 current_auc = 0.7743628185907047
User 65096 AUC after training: 0.7713643178410795
User 65096 does not improve AUC. Reverting changes.
Training on augumented user 72754 2/50 current_auc = 0.7743628185907047
User 72754 AUC after training: 0.7721139430284858
User 72754 does not improve AUC. Reverting changes.
Training on augumented user 47754 3/50 current_auc = 0.7743628185907047
User 47754 AUC after training: 0.7743628185907047
User 47754 does not improve AUC. Reverting changes.
Training on augumented user 82963 4/50 current_auc = 0.7743628185907047
User 82963 AUC after training: 0.7721139430284858
User 82963 does not improve AUC. Reverting changes.
Training on augumented user 97559 5/50 current_auc = 0.7743628185907047
User 97559 AUC after training: 0.7721139430284858
User 97559 does not improve AUC. Reverting changes.
Training on augumented user 31671 6/50 current_auc = 0.7743628185907047
User 31671 AUC after training: 0.775112443778111
User 31671 improves AUC. Keeping the model.
Training on augumented user 65236 7/50 current_auc = 0.775112443778111
User 65236 AUC after training: 0.7721139430284858
User 65236 does not improve AUC. Reverting changes.
Training on augumented user 40474 8/50 current_auc = 0.775112443778111
User 40474 AUC after training: 0.7736131934032984
User 40474 does not improve AUC. Reverting changes.
Training on augumented user 50599 9/50 current_auc = 0.775112443778111
User 50599 AUC after training: 0.7732383808095953
User 50599 does not improve AUC. Reverting changes.
Training on augumented user 117517 10/50 current_auc = 0.775112443778111
User 117517 AUC after training: 0.7736131934032984
User 117517 does not improve AUC. Reverting changes.
Training on augumented user 112553 11/50 current_auc = 0.775112443778111
User 112553 AUC after training: 0.7736131934032984
User 112553 does not improve AUC. Reverting changes.
Training on augumented user 59945 12/50 current_auc = 0.775112443778111
User 59945 AUC after training: 0.772863568215892
User 59945 does not improve AUC. Reverting changes.
Training on augumented user 97129 13/50 current_auc = 0.775112443778111
User 97129 AUC after training: 0.7769865067466267
User 97129 improves AUC. Keeping the model.
Training on augumented user 20484 14/50 current_auc = 0.7769865067466267
User 20484 AUC after training: 0.7769865067466267
User 20484 does not improve AUC. Reverting changes.
Training on augumented user 30891 15/50 current_auc = 0.7769865067466267
User 30891 AUC after training: 0.7736131934032984
User 30891 does not improve AUC. Reverting changes.
Training on augumented user 66355 16/50 current_auc = 0.7769865067466267
User 66355 AUC after training: 0.7769865067466267
User 66355 does not improve AUC. Reverting changes.
Training on augumented user 10702 17/50 current_auc = 0.7769865067466267
User 10702 AUC after training: 0.7781109445277361
User 10702 improves AUC. Keeping the model.
Training on augumented user 40050 18/50 current_auc = 0.7781109445277361
User 40050 AUC after training: 0.7766116941529235
User 40050 does not improve AUC. Reverting changes.
Training on augumented user 18857 19/50 current_auc = 0.7781109445277361
User 18857 AUC after training: 0.7758620689655172
User 18857 does not improve AUC. Reverting changes.
Training on augumented user 67449 20/50 current_auc = 0.7781109445277361
User 67449 AUC after training: 0.7736131934032984
User 67449 does not improve AUC. Reverting changes.
Training on augumented user 24377 21/50 current_auc = 0.7781109445277361
User 24377 AUC after training: 0.7781109445277361
User 24377 does not improve AUC. Reverting changes.
Training on augumented user 22017 22/50 current_auc = 0.7781109445277361
User 22017 AUC after training: 0.7713643178410794
User 22017 does not improve AUC. Reverting changes.
Training on augumented user 121534 23/50 current_auc = 0.7781109445277361
User 121534 AUC after training: 0.7781109445277361
User 121534 does not improve AUC. Reverting changes.
Training on augumented user 98840 24/50 current_auc = 0.7781109445277361
User 98840 AUC after training: 0.7758620689655172
User 98840 does not improve AUC. Reverting changes.
Training on augumented user 118205 25/50 current_auc = 0.7781109445277361
User 118205 AUC after training: 0.7856071964017991
User 118205 improves AUC. Keeping the model.
Training on augumented user 137254 26/50 current_auc = 0.7856071964017991
User 137254 AUC after training: 0.7863568215892054
User 137254 improves AUC. Keeping the model.
Training on augumented user 107825 27/50 current_auc = 0.7863568215892054
User 107825 AUC after training: 0.7867316341829085
User 107825 improves AUC. Keeping the model.
Training on augumented user 45605 28/50 current_auc = 0.7867316341829085
User 45605 AUC after training: 0.7889805097451275
User 45605 improves AUC. Keeping the model.
Training on augumented user 76181 29/50 current_auc = 0.7889805097451275
User 76181 AUC after training: 0.7882308845577212
User 76181 does not improve AUC. Reverting changes.
Training on augumented user 89943 30/50 current_auc = 0.7889805097451275
User 89943 AUC after training: 0.7856071964017992
User 89943 does not improve AUC. Reverting changes.
Training on augumented user 106164 31/50 current_auc = 0.7889805097451275
User 106164 AUC after training: 0.7874812593703149
User 106164 does not improve AUC. Reverting changes.
Training on augumented user 46798 32/50 current_auc = 0.7889805097451275
User 46798 AUC after training: 0.7897301349325337
User 46798 improves AUC. Keeping the model.
Training on augumented user 60092 33/50 current_auc = 0.7897301349325337
User 60092 AUC after training: 0.7889805097451275
User 60092 does not improve AUC. Reverting changes.
Training on augumented user 48769 34/50 current_auc = 0.7897301349325337
User 48769 AUC after training: 0.7889805097451275
User 48769 does not improve AUC. Reverting changes.
Training on augumented user 119310 35/50 current_auc = 0.7897301349325337
User 119310 AUC after training: 0.7889805097451275
User 119310 does not improve AUC. Reverting changes.
Training on augumented user 106905 36/50 current_auc = 0.7897301349325337
User 106905 AUC after training: 0.7897301349325337
User 106905 does not improve AUC. Reverting changes.
Training on augumented user 94414 37/50 current_auc = 0.7897301349325337
User 94414 AUC after training: 0.7889805097451275
User 94414 does not improve AUC. Reverting changes.
Training on augumented user 122410 38/50 current_auc = 0.7897301349325337
User 122410 AUC after training: 0.7889805097451275
User 122410 does not improve AUC. Reverting changes.
Training on augumented user 45056 39/50 current_auc = 0.7897301349325337
User 45056 AUC after training: 0.7897301349325336
User 45056 does not improve AUC. Reverting changes.
Training on augumented user 3052 40/50 current_auc = 0.7897301349325337
User 3052 AUC after training: 0.7886056971514243
User 3052 does not improve AUC. Reverting changes.
Training on augumented user 31360 41/50 current_auc = 0.7897301349325337
User 31360 AUC after training: 0.787856071964018
User 31360 does not improve AUC. Reverting changes.
Training on augumented user 91077 42/50 current_auc = 0.7897301349325337
User 91077 AUC after training: 0.7897301349325337
User 91077 does not improve AUC. Reverting changes.
Training on augumented user 35467 43/50 current_auc = 0.7897301349325337
User 35467 AUC after training: 0.7897301349325337
User 35467 does not improve AUC. Reverting changes.
Training on augumented user 98781 44/50 current_auc = 0.7897301349325337
User 98781 AUC after training: 0.787856071964018
User 98781 does not improve AUC. Reverting changes.
Training on augumented user 74915 45/50 current_auc = 0.7897301349325337
User 74915 AUC after training: 0.7897301349325337
User 74915 does not improve AUC. Reverting changes.
Training on augumented user 133023 46/50 current_auc = 0.7897301349325337
User 133023 AUC after training: 0.7889805097451275
User 133023 does not improve AUC. Reverting changes.
Training on augumented user 13376 47/50 current_auc = 0.7897301349325337
User 13376 AUC after training: 0.7859820089955023
User 13376 does not improve AUC. Reverting changes.
Training on augumented user 60545 48/50 current_auc = 0.7897301349325337
User 60545 AUC after training: 0.7889805097451275
User 60545 does not improve AUC. Reverting changes.
Training on augumented user 118044 49/50 current_auc = 0.7897301349325337
User 118044 AUC after training: 0.7889805097451275
User 118044 does not improve AUC. Reverting changes.
[2024-12-02 20:11:51.307661] start test user 76353 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:51.737404] start test user 76353 283/568 recall augumented users by random, augumented_users = [135606, 90319, 43331, 42159, 107434, 60779, 13933, 99982, 126095, 82033, 44479, 122350, 60126, 53386, 113321, 130902, 103461, 123334, 68926, 135646, 52854, 56715, 84773, 67926, 39076, 122924, 109154, 29912, 89491, 1510, 40328, 116496, 95886, 74952, 58058, 45733, 122189, 51749, 369, 51094, 33561, 112702, 135403, 11275, 73253, 89578, 104799, 68182, 34691, 100170]
[2024-12-02 20:11:51.752926] user = 76353 Cloud 283/568
[2024-12-02 20:11:51.769304] user = 76353 Local 283/568
[2024-12-02 20:11:51.809000] user = 76353 Local+ 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:54.345569] user = 76353 MPDA- 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8823529411764706
Training on augumented user 135606 0/50 current_auc = 0.8823529411764706
User 135606 AUC after training: 0.8823529411764706
User 135606 does not improve AUC. Reverting changes.
Training on augumented user 90319 1/50 current_auc = 0.8823529411764706
User 90319 AUC after training: 0.8823529411764706
User 90319 does not improve AUC. Reverting changes.
Training on augumented user 43331 2/50 current_auc = 0.8823529411764706
User 43331 AUC after training: 0.8823529411764706
User 43331 does not improve AUC. Reverting changes.
Training on augumented user 42159 3/50 current_auc = 0.8823529411764706
User 42159 AUC after training: 0.8823529411764706
User 42159 does not improve AUC. Reverting changes.
Training on augumented user 107434 4/50 current_auc = 0.8823529411764706
User 107434 AUC after training: 0.8790849673202614
User 107434 does not improve AUC. Reverting changes.
Training on augumented user 60779 5/50 current_auc = 0.8823529411764706
User 60779 AUC after training: 0.8823529411764706
User 60779 does not improve AUC. Reverting changes.
Training on augumented user 13933 6/50 current_auc = 0.8823529411764706
User 13933 AUC after training: 0.8823529411764706
User 13933 does not improve AUC. Reverting changes.
Training on augumented user 99982 7/50 current_auc = 0.8823529411764706
User 99982 AUC after training: 0.8823529411764706
User 99982 does not improve AUC. Reverting changes.
Training on augumented user 126095 8/50 current_auc = 0.8823529411764706
User 126095 AUC after training: 0.8823529411764706
User 126095 does not improve AUC. Reverting changes.
Training on augumented user 82033 9/50 current_auc = 0.8823529411764706
User 82033 AUC after training: 0.8823529411764706
User 82033 does not improve AUC. Reverting changes.
Training on augumented user 44479 10/50 current_auc = 0.8823529411764706
User 44479 AUC after training: 0.8856209150326797
User 44479 improves AUC. Keeping the model.
Training on augumented user 122350 11/50 current_auc = 0.8856209150326797
User 122350 AUC after training: 0.8823529411764706
User 122350 does not improve AUC. Reverting changes.
Training on augumented user 60126 12/50 current_auc = 0.8856209150326797
User 60126 AUC after training: 0.8856209150326797
User 60126 does not improve AUC. Reverting changes.
Training on augumented user 53386 13/50 current_auc = 0.8856209150326797
User 53386 AUC after training: 0.8823529411764706
User 53386 does not improve AUC. Reverting changes.
Training on augumented user 113321 14/50 current_auc = 0.8856209150326797
User 113321 AUC after training: 0.8856209150326797
User 113321 does not improve AUC. Reverting changes.
Training on augumented user 130902 15/50 current_auc = 0.8856209150326797
User 130902 AUC after training: 0.8856209150326797
User 130902 does not improve AUC. Reverting changes.
Training on augumented user 103461 16/50 current_auc = 0.8856209150326797
User 103461 AUC after training: 0.8856209150326797
User 103461 does not improve AUC. Reverting changes.
Training on augumented user 123334 17/50 current_auc = 0.8856209150326797
User 123334 AUC after training: 0.8856209150326797
User 123334 does not improve AUC. Reverting changes.
Training on augumented user 68926 18/50 current_auc = 0.8856209150326797
User 68926 AUC after training: 0.8856209150326797
User 68926 does not improve AUC. Reverting changes.
Training on augumented user 135646 19/50 current_auc = 0.8856209150326797
User 135646 AUC after training: 0.8856209150326797
User 135646 does not improve AUC. Reverting changes.
Training on augumented user 52854 20/50 current_auc = 0.8856209150326797
User 52854 AUC after training: 0.8725490196078431
User 52854 does not improve AUC. Reverting changes.
Training on augumented user 56715 21/50 current_auc = 0.8856209150326797
User 56715 AUC after training: 0.8856209150326797
User 56715 does not improve AUC. Reverting changes.
Training on augumented user 84773 22/50 current_auc = 0.8856209150326797
User 84773 AUC after training: 0.8856209150326797
User 84773 does not improve AUC. Reverting changes.
Training on augumented user 67926 23/50 current_auc = 0.8856209150326797
User 67926 AUC after training: 0.8856209150326797
User 67926 does not improve AUC. Reverting changes.
Training on augumented user 39076 24/50 current_auc = 0.8856209150326797
User 39076 AUC after training: 0.8856209150326797
User 39076 does not improve AUC. Reverting changes.
Training on augumented user 122924 25/50 current_auc = 0.8856209150326797
User 122924 AUC after training: 0.8823529411764706
User 122924 does not improve AUC. Reverting changes.
Training on augumented user 109154 26/50 current_auc = 0.8856209150326797
User 109154 AUC after training: 0.8856209150326797
User 109154 does not improve AUC. Reverting changes.
Training on augumented user 29912 27/50 current_auc = 0.8856209150326797
User 29912 AUC after training: 0.8823529411764706
User 29912 does not improve AUC. Reverting changes.
Training on augumented user 89491 28/50 current_auc = 0.8856209150326797
User 89491 AUC after training: 0.8823529411764706
User 89491 does not improve AUC. Reverting changes.
Training on augumented user 1510 29/50 current_auc = 0.8856209150326797
User 1510 AUC after training: 0.8856209150326797
User 1510 does not improve AUC. Reverting changes.
Training on augumented user 40328 30/50 current_auc = 0.8856209150326797
User 40328 AUC after training: 0.8856209150326797
User 40328 does not improve AUC. Reverting changes.
Training on augumented user 116496 31/50 current_auc = 0.8856209150326797
User 116496 AUC after training: 0.8856209150326797
User 116496 does not improve AUC. Reverting changes.
Training on augumented user 95886 32/50 current_auc = 0.8856209150326797
User 95886 AUC after training: 0.8823529411764706
User 95886 does not improve AUC. Reverting changes.
Training on augumented user 74952 33/50 current_auc = 0.8856209150326797
User 74952 AUC after training: 0.8823529411764706
User 74952 does not improve AUC. Reverting changes.
Training on augumented user 58058 34/50 current_auc = 0.8856209150326797
User 58058 AUC after training: 0.8856209150326797
User 58058 does not improve AUC. Reverting changes.
Training on augumented user 45733 35/50 current_auc = 0.8856209150326797
User 45733 AUC after training: 0.8856209150326797
User 45733 does not improve AUC. Reverting changes.
Training on augumented user 122189 36/50 current_auc = 0.8856209150326797
User 122189 AUC after training: 0.8856209150326797
User 122189 does not improve AUC. Reverting changes.
Training on augumented user 51749 37/50 current_auc = 0.8856209150326797
User 51749 AUC after training: 0.8856209150326797
User 51749 does not improve AUC. Reverting changes.
Training on augumented user 369 38/50 current_auc = 0.8856209150326797
User 369 AUC after training: 0.8823529411764706
User 369 does not improve AUC. Reverting changes.
Training on augumented user 51094 39/50 current_auc = 0.8856209150326797
User 51094 AUC after training: 0.8823529411764706
User 51094 does not improve AUC. Reverting changes.
Training on augumented user 33561 40/50 current_auc = 0.8856209150326797
User 33561 AUC after training: 0.8823529411764706
User 33561 does not improve AUC. Reverting changes.
Training on augumented user 112702 41/50 current_auc = 0.8856209150326797
User 112702 AUC after training: 0.8790849673202614
User 112702 does not improve AUC. Reverting changes.
Training on augumented user 135403 42/50 current_auc = 0.8856209150326797
User 135403 AUC after training: 0.8856209150326797
User 135403 does not improve AUC. Reverting changes.
Training on augumented user 11275 43/50 current_auc = 0.8856209150326797
User 11275 AUC after training: 0.8856209150326797
User 11275 does not improve AUC. Reverting changes.
Training on augumented user 73253 44/50 current_auc = 0.8856209150326797
User 73253 AUC after training: 0.8823529411764706
User 73253 does not improve AUC. Reverting changes.
Training on augumented user 89578 45/50 current_auc = 0.8856209150326797
User 89578 AUC after training: 0.8856209150326797
User 89578 does not improve AUC. Reverting changes.
Training on augumented user 104799 46/50 current_auc = 0.8856209150326797
User 104799 AUC after training: 0.8790849673202614
User 104799 does not improve AUC. Reverting changes.
Training on augumented user 68182 47/50 current_auc = 0.8856209150326797
User 68182 AUC after training: 0.8823529411764706
User 68182 does not improve AUC. Reverting changes.
Training on augumented user 34691 48/50 current_auc = 0.8856209150326797
User 34691 AUC after training: 0.8823529411764706
User 34691 does not improve AUC. Reverting changes.
Training on augumented user 100170 49/50 current_auc = 0.8856209150326797
User 100170 AUC after training: 0.8856209150326797
User 100170 does not improve AUC. Reverting changes.
[2024-12-02 20:12:26.045678] start test user 76368 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:26.752836] start test user 76368 284/568 recall augumented users by random, augumented_users = [51666, 114526, 108406, 72043, 113629, 94397, 50841, 80555, 118669, 95224, 32726, 115595, 127207, 61145, 5748, 100388, 68013, 73510, 22653, 73931, 3066, 132558, 60036, 90872, 57455, 48004, 101187, 90338, 123347, 7742, 53029, 28655, 87313, 38998, 83741, 46078, 99437, 61915, 42464, 10542, 73504, 129713, 18501, 17737, 76647, 54177, 72764, 73038, 121774, 30946]
[2024-12-02 20:12:26.767742] user = 76368 Cloud 284/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:12:26.774156] user = 76368 Local 284/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:12:26.852047] user = 76368 Local+ 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:12:29.180777] user = 76368 MPDA- 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 51666 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51666 AUC after training: 0.5
User 51666 does not improve AUC. Reverting changes.
Training on augumented user 114526 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114526 AUC after training: 0.5
User 114526 does not improve AUC. Reverting changes.
Training on augumented user 108406 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108406 AUC after training: 0.5
User 108406 does not improve AUC. Reverting changes.
Training on augumented user 72043 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72043 AUC after training: 0.5
User 72043 does not improve AUC. Reverting changes.
Training on augumented user 113629 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113629 AUC after training: 0.5
User 113629 does not improve AUC. Reverting changes.
Training on augumented user 94397 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94397 AUC after training: 0.5
User 94397 does not improve AUC. Reverting changes.
Training on augumented user 50841 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50841 AUC after training: 0.5
User 50841 does not improve AUC. Reverting changes.
Training on augumented user 80555 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80555 AUC after training: 0.5
User 80555 does not improve AUC. Reverting changes.
Training on augumented user 118669 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118669 AUC after training: 0.5
User 118669 does not improve AUC. Reverting changes.
Training on augumented user 95224 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95224 AUC after training: 0.5
User 95224 does not improve AUC. Reverting changes.
Training on augumented user 32726 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32726 AUC after training: 0.5
User 32726 does not improve AUC. Reverting changes.
Training on augumented user 115595 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115595 AUC after training: 0.5
User 115595 does not improve AUC. Reverting changes.
Training on augumented user 127207 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127207 AUC after training: 0.5
User 127207 does not improve AUC. Reverting changes.
Training on augumented user 61145 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61145 AUC after training: 0.5
User 61145 does not improve AUC. Reverting changes.
Training on augumented user 5748 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5748 AUC after training: 0.5
User 5748 does not improve AUC. Reverting changes.
Training on augumented user 100388 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100388 AUC after training: 0.5
User 100388 does not improve AUC. Reverting changes.
Training on augumented user 68013 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68013 AUC after training: 0.5
User 68013 does not improve AUC. Reverting changes.
Training on augumented user 73510 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73510 AUC after training: 0.5
User 73510 does not improve AUC. Reverting changes.
Training on augumented user 22653 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22653 AUC after training: 0.5
User 22653 does not improve AUC. Reverting changes.
Training on augumented user 73931 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73931 AUC after training: 0.5
User 73931 does not improve AUC. Reverting changes.
Training on augumented user 3066 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3066 AUC after training: 0.5
User 3066 does not improve AUC. Reverting changes.
Training on augumented user 132558 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132558 AUC after training: 0.5
User 132558 does not improve AUC. Reverting changes.
Training on augumented user 60036 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60036 AUC after training: 0.5
User 60036 does not improve AUC. Reverting changes.
Training on augumented user 90872 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90872 AUC after training: 0.5
User 90872 does not improve AUC. Reverting changes.
Training on augumented user 57455 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57455 AUC after training: 0.5
User 57455 does not improve AUC. Reverting changes.
Training on augumented user 48004 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48004 AUC after training: 0.5
User 48004 does not improve AUC. Reverting changes.
Training on augumented user 101187 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101187 AUC after training: 0.5
User 101187 does not improve AUC. Reverting changes.
Training on augumented user 90338 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90338 AUC after training: 0.5
User 90338 does not improve AUC. Reverting changes.
Training on augumented user 123347 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123347 AUC after training: 0.5
User 123347 does not improve AUC. Reverting changes.
Training on augumented user 7742 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7742 AUC after training: 0.5
User 7742 does not improve AUC. Reverting changes.
Training on augumented user 53029 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53029 AUC after training: 0.5
User 53029 does not improve AUC. Reverting changes.
Training on augumented user 28655 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28655 AUC after training: 0.5
User 28655 does not improve AUC. Reverting changes.
Training on augumented user 87313 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87313 AUC after training: 0.5
User 87313 does not improve AUC. Reverting changes.
Training on augumented user 38998 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38998 AUC after training: 0.5
User 38998 does not improve AUC. Reverting changes.
Training on augumented user 83741 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83741 AUC after training: 0.5
User 83741 does not improve AUC. Reverting changes.
Training on augumented user 46078 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46078 AUC after training: 0.5
User 46078 does not improve AUC. Reverting changes.
Training on augumented user 99437 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99437 AUC after training: 0.5
User 99437 does not improve AUC. Reverting changes.
Training on augumented user 61915 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61915 AUC after training: 0.5
User 61915 does not improve AUC. Reverting changes.
Training on augumented user 42464 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42464 AUC after training: 0.5
User 42464 does not improve AUC. Reverting changes.
Training on augumented user 10542 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10542 AUC after training: 0.5
User 10542 does not improve AUC. Reverting changes.
Training on augumented user 73504 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73504 AUC after training: 0.5
User 73504 does not improve AUC. Reverting changes.
Training on augumented user 129713 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129713 AUC after training: 0.5
User 129713 does not improve AUC. Reverting changes.
Training on augumented user 18501 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18501 AUC after training: 0.5
User 18501 does not improve AUC. Reverting changes.
Training on augumented user 17737 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17737 AUC after training: 0.5
User 17737 does not improve AUC. Reverting changes.
Training on augumented user 76647 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76647 AUC after training: 0.5
User 76647 does not improve AUC. Reverting changes.
Training on augumented user 54177 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54177 AUC after training: 0.5
User 54177 does not improve AUC. Reverting changes.
Training on augumented user 72764 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72764 AUC after training: 0.5
User 72764 does not improve AUC. Reverting changes.
Training on augumented user 73038 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73038 AUC after training: 0.5
User 73038 does not improve AUC. Reverting changes.
Training on augumented user 121774 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121774 AUC after training: 0.5
User 121774 does not improve AUC. Reverting changes.
Training on augumented user 30946 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30946 AUC after training: 0.5
User 30946 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:12:55.895039] start test user 76433 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:56.515717] start test user 76433 285/568 recall augumented users by random, augumented_users = [79773, 56404, 30065, 131923, 84451, 54252, 62388, 78704, 113412, 9738, 87585, 54129, 28053, 67319, 22477, 45349, 137934, 96097, 125989, 116931, 50091, 106724, 10378, 384, 37704, 56721, 34108, 45913, 127893, 125972, 81913, 43421, 283, 12762, 53253, 6661, 92535, 76514, 31171, 69672, 49061, 81095, 89353, 60242, 20632, 133505, 81426, 54630, 116698, 112645]
[2024-12-02 20:12:56.531329] user = 76433 Cloud 285/568
[2024-12-02 20:12:56.542884] user = 76433 Local 285/568
[2024-12-02 20:12:56.691694] user = 76433 Local+ 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:58.803048] user = 76433 MPDA- 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5699588477366255
Training on augumented user 79773 0/50 current_auc = 0.5699588477366255
User 79773 AUC after training: 0.5740740740740741
User 79773 improves AUC. Keeping the model.
Training on augumented user 56404 1/50 current_auc = 0.5740740740740741
User 56404 AUC after training: 0.5720164609053497
User 56404 does not improve AUC. Reverting changes.
Training on augumented user 30065 2/50 current_auc = 0.5740740740740741
User 30065 AUC after training: 0.5740740740740741
User 30065 does not improve AUC. Reverting changes.
Training on augumented user 131923 3/50 current_auc = 0.5740740740740741
User 131923 AUC after training: 0.5761316872427984
User 131923 improves AUC. Keeping the model.
Training on augumented user 84451 4/50 current_auc = 0.5761316872427984
User 84451 AUC after training: 0.5761316872427984
User 84451 does not improve AUC. Reverting changes.
Training on augumented user 54252 5/50 current_auc = 0.5761316872427984
User 54252 AUC after training: 0.5761316872427984
User 54252 does not improve AUC. Reverting changes.
Training on augumented user 62388 6/50 current_auc = 0.5761316872427984
User 62388 AUC after training: 0.5761316872427984
User 62388 does not improve AUC. Reverting changes.
Training on augumented user 78704 7/50 current_auc = 0.5761316872427984
User 78704 AUC after training: 0.5699588477366254
User 78704 does not improve AUC. Reverting changes.
Training on augumented user 113412 8/50 current_auc = 0.5761316872427984
User 113412 AUC after training: 0.5781893004115226
User 113412 improves AUC. Keeping the model.
Training on augumented user 9738 9/50 current_auc = 0.5781893004115226
User 9738 AUC after training: 0.5781893004115226
User 9738 does not improve AUC. Reverting changes.
Training on augumented user 87585 10/50 current_auc = 0.5781893004115226
User 87585 AUC after training: 0.5781893004115226
User 87585 does not improve AUC. Reverting changes.
Training on augumented user 54129 11/50 current_auc = 0.5781893004115226
User 54129 AUC after training: 0.5781893004115226
User 54129 does not improve AUC. Reverting changes.
Training on augumented user 28053 12/50 current_auc = 0.5781893004115226
User 28053 AUC after training: 0.5781893004115226
User 28053 does not improve AUC. Reverting changes.
Training on augumented user 67319 13/50 current_auc = 0.5781893004115226
User 67319 AUC after training: 0.574074074074074
User 67319 does not improve AUC. Reverting changes.
Training on augumented user 22477 14/50 current_auc = 0.5781893004115226
User 22477 AUC after training: 0.5781893004115226
User 22477 does not improve AUC. Reverting changes.
Training on augumented user 45349 15/50 current_auc = 0.5781893004115226
User 45349 AUC after training: 0.5781893004115226
User 45349 does not improve AUC. Reverting changes.
Training on augumented user 137934 16/50 current_auc = 0.5781893004115226
User 137934 AUC after training: 0.5781893004115226
User 137934 does not improve AUC. Reverting changes.
Training on augumented user 96097 17/50 current_auc = 0.5781893004115226
User 96097 AUC after training: 0.5761316872427983
User 96097 does not improve AUC. Reverting changes.
Training on augumented user 125989 18/50 current_auc = 0.5781893004115226
User 125989 AUC after training: 0.5761316872427983
User 125989 does not improve AUC. Reverting changes.
Training on augumented user 116931 19/50 current_auc = 0.5781893004115226
User 116931 AUC after training: 0.5781893004115226
User 116931 does not improve AUC. Reverting changes.
Training on augumented user 50091 20/50 current_auc = 0.5781893004115226
User 50091 AUC after training: 0.5761316872427983
User 50091 does not improve AUC. Reverting changes.
Training on augumented user 106724 21/50 current_auc = 0.5781893004115226
User 106724 AUC after training: 0.5781893004115226
User 106724 does not improve AUC. Reverting changes.
Training on augumented user 10378 22/50 current_auc = 0.5781893004115226
User 10378 AUC after training: 0.5761316872427983
User 10378 does not improve AUC. Reverting changes.
Training on augumented user 384 23/50 current_auc = 0.5781893004115226
User 384 AUC after training: 0.5781893004115226
User 384 does not improve AUC. Reverting changes.
Training on augumented user 37704 24/50 current_auc = 0.5781893004115226
User 37704 AUC after training: 0.5781893004115226
User 37704 does not improve AUC. Reverting changes.
Training on augumented user 56721 25/50 current_auc = 0.5781893004115226
User 56721 AUC after training: 0.5781893004115226
User 56721 does not improve AUC. Reverting changes.
Training on augumented user 34108 26/50 current_auc = 0.5781893004115226
User 34108 AUC after training: 0.5781893004115226
User 34108 does not improve AUC. Reverting changes.
Training on augumented user 45913 27/50 current_auc = 0.5781893004115226
User 45913 AUC after training: 0.5781893004115226
User 45913 does not improve AUC. Reverting changes.
Training on augumented user 127893 28/50 current_auc = 0.5781893004115226
User 127893 AUC after training: 0.5781893004115226
User 127893 does not improve AUC. Reverting changes.
Training on augumented user 125972 29/50 current_auc = 0.5781893004115226
User 125972 AUC after training: 0.5781893004115226
User 125972 does not improve AUC. Reverting changes.
Training on augumented user 81913 30/50 current_auc = 0.5781893004115226
User 81913 AUC after training: 0.5781893004115226
User 81913 does not improve AUC. Reverting changes.
Training on augumented user 43421 31/50 current_auc = 0.5781893004115226
User 43421 AUC after training: 0.5781893004115226
User 43421 does not improve AUC. Reverting changes.
Training on augumented user 283 32/50 current_auc = 0.5781893004115226
User 283 AUC after training: 0.5761316872427983
User 283 does not improve AUC. Reverting changes.
Training on augumented user 12762 33/50 current_auc = 0.5781893004115226
User 12762 AUC after training: 0.5781893004115226
User 12762 does not improve AUC. Reverting changes.
Training on augumented user 53253 34/50 current_auc = 0.5781893004115226
User 53253 AUC after training: 0.5781893004115226
User 53253 does not improve AUC. Reverting changes.
Training on augumented user 6661 35/50 current_auc = 0.5781893004115226
User 6661 AUC after training: 0.5823045267489712
User 6661 improves AUC. Keeping the model.
Training on augumented user 92535 36/50 current_auc = 0.5823045267489712
User 92535 AUC after training: 0.5781893004115226
User 92535 does not improve AUC. Reverting changes.
Training on augumented user 76514 37/50 current_auc = 0.5823045267489712
User 76514 AUC after training: 0.5802469135802468
User 76514 does not improve AUC. Reverting changes.
Training on augumented user 31171 38/50 current_auc = 0.5823045267489712
User 31171 AUC after training: 0.5823045267489712
User 31171 does not improve AUC. Reverting changes.
Training on augumented user 69672 39/50 current_auc = 0.5823045267489712
User 69672 AUC after training: 0.5823045267489712
User 69672 does not improve AUC. Reverting changes.
Training on augumented user 49061 40/50 current_auc = 0.5823045267489712
User 49061 AUC after training: 0.5823045267489712
User 49061 does not improve AUC. Reverting changes.
Training on augumented user 81095 41/50 current_auc = 0.5823045267489712
User 81095 AUC after training: 0.5823045267489712
User 81095 does not improve AUC. Reverting changes.
Training on augumented user 89353 42/50 current_auc = 0.5823045267489712
User 89353 AUC after training: 0.5823045267489712
User 89353 does not improve AUC. Reverting changes.
Training on augumented user 60242 43/50 current_auc = 0.5823045267489712
User 60242 AUC after training: 0.5802469135802469
User 60242 does not improve AUC. Reverting changes.
Training on augumented user 20632 44/50 current_auc = 0.5823045267489712
User 20632 AUC after training: 0.5843621399176955
User 20632 improves AUC. Keeping the model.
Training on augumented user 133505 45/50 current_auc = 0.5843621399176955
User 133505 AUC after training: 0.5823045267489712
User 133505 does not improve AUC. Reverting changes.
Training on augumented user 81426 46/50 current_auc = 0.5843621399176955
User 81426 AUC after training: 0.5843621399176955
User 81426 does not improve AUC. Reverting changes.
Training on augumented user 54630 47/50 current_auc = 0.5843621399176955
User 54630 AUC after training: 0.5823045267489712
User 54630 does not improve AUC. Reverting changes.
Training on augumented user 116698 48/50 current_auc = 0.5843621399176955
User 116698 AUC after training: 0.5843621399176955
User 116698 does not improve AUC. Reverting changes.
Training on augumented user 112645 49/50 current_auc = 0.5843621399176955
User 112645 AUC after training: 0.5843621399176955
User 112645 does not improve AUC. Reverting changes.
[2024-12-02 20:13:20.909873] start test user 76464 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:21.345567] start test user 76464 286/568 recall augumented users by random, augumented_users = [99899, 2000, 100402, 114305, 101398, 76754, 45928, 103492, 37891, 133071, 43414, 87907, 35270, 93763, 17720, 59916, 4886, 135922, 21928, 10300, 128951, 17076, 23218, 73226, 5110, 61897, 14272, 41393, 10220, 60276, 7302, 3704, 118872, 122818, 54391, 50561, 114632, 117472, 21152, 26337, 7663, 95117, 58789, 23837, 13469, 17211, 40954, 6519, 103225, 74675]
[2024-12-02 20:13:21.360491] user = 76464 Cloud 286/568
[2024-12-02 20:13:21.370334] user = 76464 Local 286/568
[2024-12-02 20:13:21.396163] user = 76464 Local+ 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:24.368790] user = 76464 MPDA- 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7023809523809524
Training on augumented user 99899 0/50 current_auc = 0.7023809523809524
User 99899 AUC after training: 0.7023809523809524
User 99899 does not improve AUC. Reverting changes.
Training on augumented user 2000 1/50 current_auc = 0.7023809523809524
User 2000 AUC after training: 0.7023809523809524
User 2000 does not improve AUC. Reverting changes.
Training on augumented user 100402 2/50 current_auc = 0.7023809523809524
User 100402 AUC after training: 0.7023809523809524
User 100402 does not improve AUC. Reverting changes.
Training on augumented user 114305 3/50 current_auc = 0.7023809523809524
User 114305 AUC after training: 0.7023809523809524
User 114305 does not improve AUC. Reverting changes.
Training on augumented user 101398 4/50 current_auc = 0.7023809523809524
User 101398 AUC after training: 0.7023809523809524
User 101398 does not improve AUC. Reverting changes.
Training on augumented user 76754 5/50 current_auc = 0.7023809523809524
User 76754 AUC after training: 0.7023809523809524
User 76754 does not improve AUC. Reverting changes.
Training on augumented user 45928 6/50 current_auc = 0.7023809523809524
User 45928 AUC after training: 0.7023809523809524
User 45928 does not improve AUC. Reverting changes.
Training on augumented user 103492 7/50 current_auc = 0.7023809523809524
User 103492 AUC after training: 0.7023809523809524
User 103492 does not improve AUC. Reverting changes.
Training on augumented user 37891 8/50 current_auc = 0.7023809523809524
User 37891 AUC after training: 0.7023809523809524
User 37891 does not improve AUC. Reverting changes.
Training on augumented user 133071 9/50 current_auc = 0.7023809523809524
User 133071 AUC after training: 0.7023809523809524
User 133071 does not improve AUC. Reverting changes.
Training on augumented user 43414 10/50 current_auc = 0.7023809523809524
User 43414 AUC after training: 0.7023809523809524
User 43414 does not improve AUC. Reverting changes.
Training on augumented user 87907 11/50 current_auc = 0.7023809523809524
User 87907 AUC after training: 0.7023809523809524
User 87907 does not improve AUC. Reverting changes.
Training on augumented user 35270 12/50 current_auc = 0.7023809523809524
User 35270 AUC after training: 0.7023809523809524
User 35270 does not improve AUC. Reverting changes.
Training on augumented user 93763 13/50 current_auc = 0.7023809523809524
User 93763 AUC after training: 0.7023809523809524
User 93763 does not improve AUC. Reverting changes.
Training on augumented user 17720 14/50 current_auc = 0.7023809523809524
User 17720 AUC after training: 0.7023809523809524
User 17720 does not improve AUC. Reverting changes.
Training on augumented user 59916 15/50 current_auc = 0.7023809523809524
User 59916 AUC after training: 0.7023809523809524
User 59916 does not improve AUC. Reverting changes.
Training on augumented user 4886 16/50 current_auc = 0.7023809523809524
User 4886 AUC after training: 0.7023809523809524
User 4886 does not improve AUC. Reverting changes.
Training on augumented user 135922 17/50 current_auc = 0.7023809523809524
User 135922 AUC after training: 0.7023809523809524
User 135922 does not improve AUC. Reverting changes.
Training on augumented user 21928 18/50 current_auc = 0.7023809523809524
User 21928 AUC after training: 0.7023809523809524
User 21928 does not improve AUC. Reverting changes.
Training on augumented user 10300 19/50 current_auc = 0.7023809523809524
User 10300 AUC after training: 0.7023809523809524
User 10300 does not improve AUC. Reverting changes.
Training on augumented user 128951 20/50 current_auc = 0.7023809523809524
User 128951 AUC after training: 0.7023809523809524
User 128951 does not improve AUC. Reverting changes.
Training on augumented user 17076 21/50 current_auc = 0.7023809523809524
User 17076 AUC after training: 0.7023809523809524
User 17076 does not improve AUC. Reverting changes.
Training on augumented user 23218 22/50 current_auc = 0.7023809523809524
User 23218 AUC after training: 0.7023809523809524
User 23218 does not improve AUC. Reverting changes.
Training on augumented user 73226 23/50 current_auc = 0.7023809523809524
User 73226 AUC after training: 0.7023809523809524
User 73226 does not improve AUC. Reverting changes.
Training on augumented user 5110 24/50 current_auc = 0.7023809523809524
User 5110 AUC after training: 0.7023809523809524
User 5110 does not improve AUC. Reverting changes.
Training on augumented user 61897 25/50 current_auc = 0.7023809523809524
User 61897 AUC after training: 0.6904761904761905
User 61897 does not improve AUC. Reverting changes.
Training on augumented user 14272 26/50 current_auc = 0.7023809523809524
User 14272 AUC after training: 0.7023809523809524
User 14272 does not improve AUC. Reverting changes.
Training on augumented user 41393 27/50 current_auc = 0.7023809523809524
User 41393 AUC after training: 0.7023809523809524
User 41393 does not improve AUC. Reverting changes.
Training on augumented user 10220 28/50 current_auc = 0.7023809523809524
User 10220 AUC after training: 0.7023809523809524
User 10220 does not improve AUC. Reverting changes.
Training on augumented user 60276 29/50 current_auc = 0.7023809523809524
User 60276 AUC after training: 0.7023809523809524
User 60276 does not improve AUC. Reverting changes.
Training on augumented user 7302 30/50 current_auc = 0.7023809523809524
User 7302 AUC after training: 0.7023809523809524
User 7302 does not improve AUC. Reverting changes.
Training on augumented user 3704 31/50 current_auc = 0.7023809523809524
User 3704 AUC after training: 0.7023809523809524
User 3704 does not improve AUC. Reverting changes.
Training on augumented user 118872 32/50 current_auc = 0.7023809523809524
User 118872 AUC after training: 0.7023809523809524
User 118872 does not improve AUC. Reverting changes.
Training on augumented user 122818 33/50 current_auc = 0.7023809523809524
User 122818 AUC after training: 0.7023809523809524
User 122818 does not improve AUC. Reverting changes.
Training on augumented user 54391 34/50 current_auc = 0.7023809523809524
User 54391 AUC after training: 0.7023809523809524
User 54391 does not improve AUC. Reverting changes.
Training on augumented user 50561 35/50 current_auc = 0.7023809523809524
User 50561 AUC after training: 0.7023809523809524
User 50561 does not improve AUC. Reverting changes.
Training on augumented user 114632 36/50 current_auc = 0.7023809523809524
User 114632 AUC after training: 0.7023809523809524
User 114632 does not improve AUC. Reverting changes.
Training on augumented user 117472 37/50 current_auc = 0.7023809523809524
User 117472 AUC after training: 0.7023809523809524
User 117472 does not improve AUC. Reverting changes.
Training on augumented user 21152 38/50 current_auc = 0.7023809523809524
User 21152 AUC after training: 0.7023809523809524
User 21152 does not improve AUC. Reverting changes.
Training on augumented user 26337 39/50 current_auc = 0.7023809523809524
User 26337 AUC after training: 0.7023809523809524
User 26337 does not improve AUC. Reverting changes.
Training on augumented user 7663 40/50 current_auc = 0.7023809523809524
User 7663 AUC after training: 0.7023809523809524
User 7663 does not improve AUC. Reverting changes.
Training on augumented user 95117 41/50 current_auc = 0.7023809523809524
User 95117 AUC after training: 0.7023809523809524
User 95117 does not improve AUC. Reverting changes.
Training on augumented user 58789 42/50 current_auc = 0.7023809523809524
User 58789 AUC after training: 0.7023809523809524
User 58789 does not improve AUC. Reverting changes.
Training on augumented user 23837 43/50 current_auc = 0.7023809523809524
User 23837 AUC after training: 0.7023809523809524
User 23837 does not improve AUC. Reverting changes.
Training on augumented user 13469 44/50 current_auc = 0.7023809523809524
User 13469 AUC after training: 0.7023809523809524
User 13469 does not improve AUC. Reverting changes.
Training on augumented user 17211 45/50 current_auc = 0.7023809523809524
User 17211 AUC after training: 0.7023809523809524
User 17211 does not improve AUC. Reverting changes.
Training on augumented user 40954 46/50 current_auc = 0.7023809523809524
User 40954 AUC after training: 0.7023809523809524
User 40954 does not improve AUC. Reverting changes.
Training on augumented user 6519 47/50 current_auc = 0.7023809523809524
User 6519 AUC after training: 0.7023809523809524
User 6519 does not improve AUC. Reverting changes.
Training on augumented user 103225 48/50 current_auc = 0.7023809523809524
User 103225 AUC after training: 0.7023809523809524
User 103225 does not improve AUC. Reverting changes.
Training on augumented user 74675 49/50 current_auc = 0.7023809523809524
User 74675 AUC after training: 0.7023809523809524
User 74675 does not improve AUC. Reverting changes.
[2024-12-02 20:13:47.424316] start test user 76487 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:47.853473] start test user 76487 287/568 recall augumented users by random, augumented_users = [97006, 53204, 680, 132840, 36888, 96765, 37817, 16784, 92365, 133644, 120181, 124967, 58138, 19687, 22125, 35901, 106917, 18691, 132552, 47118, 117903, 62933, 8325, 37751, 35282, 111811, 131546, 134931, 120084, 105191, 99587, 2123, 133253, 111582, 72280, 103560, 68063, 57043, 92847, 18272, 12637, 113210, 64577, 34192, 44173, 80747, 25592, 44754, 85484, 83117]
[2024-12-02 20:13:47.868239] user = 76487 Cloud 287/568
[2024-12-02 20:13:47.881675] user = 76487 Local 287/568
[2024-12-02 20:13:47.911849] user = 76487 Local+ 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:50.634552] user = 76487 MPDA- 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.699361820199778
Training on augumented user 97006 0/50 current_auc = 0.699361820199778
User 97006 AUC after training: 0.6999167591564928
User 97006 improves AUC. Keeping the model.
Training on augumented user 53204 1/50 current_auc = 0.6999167591564928
User 53204 AUC after training: 0.6999167591564928
User 53204 does not improve AUC. Reverting changes.
Training on augumented user 680 2/50 current_auc = 0.6999167591564928
User 680 AUC after training: 0.6992230854605993
User 680 does not improve AUC. Reverting changes.
Training on augumented user 132840 3/50 current_auc = 0.6999167591564928
User 132840 AUC after training: 0.7006104328523863
User 132840 improves AUC. Keeping the model.
Training on augumented user 36888 4/50 current_auc = 0.7006104328523863
User 36888 AUC after training: 0.6996392896781354
User 36888 does not improve AUC. Reverting changes.
Training on augumented user 96765 5/50 current_auc = 0.7006104328523863
User 96765 AUC after training: 0.6996392896781354
User 96765 does not improve AUC. Reverting changes.
Training on augumented user 37817 6/50 current_auc = 0.7006104328523863
User 37817 AUC after training: 0.7006104328523863
User 37817 does not improve AUC. Reverting changes.
Training on augumented user 16784 7/50 current_auc = 0.7006104328523863
User 16784 AUC after training: 0.6997780244173141
User 16784 does not improve AUC. Reverting changes.
Training on augumented user 92365 8/50 current_auc = 0.7006104328523863
User 92365 AUC after training: 0.7001942286348501
User 92365 does not improve AUC. Reverting changes.
Training on augumented user 133644 9/50 current_auc = 0.7006104328523863
User 133644 AUC after training: 0.6997780244173142
User 133644 does not improve AUC. Reverting changes.
Training on augumented user 120181 10/50 current_auc = 0.7006104328523863
User 120181 AUC after training: 0.7006104328523863
User 120181 does not improve AUC. Reverting changes.
Training on augumented user 124967 11/50 current_auc = 0.7006104328523863
User 124967 AUC after training: 0.7003329633740288
User 124967 does not improve AUC. Reverting changes.
Training on augumented user 58138 12/50 current_auc = 0.7006104328523863
User 58138 AUC after training: 0.6995005549389567
User 58138 does not improve AUC. Reverting changes.
Training on augumented user 19687 13/50 current_auc = 0.7006104328523863
User 19687 AUC after training: 0.6995005549389568
User 19687 does not improve AUC. Reverting changes.
Training on augumented user 22125 14/50 current_auc = 0.7006104328523863
User 22125 AUC after training: 0.7000554938956715
User 22125 does not improve AUC. Reverting changes.
Training on augumented user 35901 15/50 current_auc = 0.7006104328523863
User 35901 AUC after training: 0.6997780244173141
User 35901 does not improve AUC. Reverting changes.
Training on augumented user 106917 16/50 current_auc = 0.7006104328523863
User 106917 AUC after training: 0.6996392896781354
User 106917 does not improve AUC. Reverting changes.
Training on augumented user 18691 17/50 current_auc = 0.7006104328523863
User 18691 AUC after training: 0.6992230854605994
User 18691 does not improve AUC. Reverting changes.
Training on augumented user 132552 18/50 current_auc = 0.7006104328523863
User 132552 AUC after training: 0.6997780244173142
User 132552 does not improve AUC. Reverting changes.
Training on augumented user 47118 19/50 current_auc = 0.7006104328523863
User 47118 AUC after training: 0.7001942286348501
User 47118 does not improve AUC. Reverting changes.
Training on augumented user 117903 20/50 current_auc = 0.7006104328523863
User 117903 AUC after training: 0.6986681465038846
User 117903 does not improve AUC. Reverting changes.
Training on augumented user 62933 21/50 current_auc = 0.7006104328523863
User 62933 AUC after training: 0.6995005549389567
User 62933 does not improve AUC. Reverting changes.
Training on augumented user 8325 22/50 current_auc = 0.7006104328523863
User 8325 AUC after training: 0.7008879023307437
User 8325 improves AUC. Keeping the model.
Training on augumented user 37751 23/50 current_auc = 0.7008879023307437
User 37751 AUC after training: 0.701165371809101
User 37751 improves AUC. Keeping the model.
Training on augumented user 35282 24/50 current_auc = 0.701165371809101
User 35282 AUC after training: 0.7007491675915649
User 35282 does not improve AUC. Reverting changes.
Training on augumented user 111811 25/50 current_auc = 0.701165371809101
User 111811 AUC after training: 0.7003329633740287
User 111811 does not improve AUC. Reverting changes.
Training on augumented user 131546 26/50 current_auc = 0.701165371809101
User 131546 AUC after training: 0.700332963374029
User 131546 does not improve AUC. Reverting changes.
Training on augumented user 134931 27/50 current_auc = 0.701165371809101
User 134931 AUC after training: 0.7008879023307436
User 134931 does not improve AUC. Reverting changes.
Training on augumented user 120084 28/50 current_auc = 0.701165371809101
User 120084 AUC after training: 0.7008879023307435
User 120084 does not improve AUC. Reverting changes.
Training on augumented user 105191 29/50 current_auc = 0.701165371809101
User 105191 AUC after training: 0.7017203107658158
User 105191 improves AUC. Keeping the model.
Training on augumented user 99587 30/50 current_auc = 0.7017203107658158
User 99587 AUC after training: 0.7000554938956716
User 99587 does not improve AUC. Reverting changes.
Training on augumented user 2123 31/50 current_auc = 0.7017203107658158
User 2123 AUC after training: 0.701165371809101
User 2123 does not improve AUC. Reverting changes.
Training on augumented user 133253 32/50 current_auc = 0.7017203107658158
User 133253 AUC after training: 0.7003329633740288
User 133253 does not improve AUC. Reverting changes.
Training on augumented user 111582 33/50 current_auc = 0.7017203107658158
User 111582 AUC after training: 0.701165371809101
User 111582 does not improve AUC. Reverting changes.
Training on augumented user 72280 34/50 current_auc = 0.7017203107658158
User 72280 AUC after training: 0.7004716981132075
User 72280 does not improve AUC. Reverting changes.
Training on augumented user 103560 35/50 current_auc = 0.7017203107658158
User 103560 AUC after training: 0.7008879023307436
User 103560 does not improve AUC. Reverting changes.
Training on augumented user 68063 36/50 current_auc = 0.7017203107658158
User 68063 AUC after training: 0.6992230854605993
User 68063 does not improve AUC. Reverting changes.
Training on augumented user 57043 37/50 current_auc = 0.7017203107658158
User 57043 AUC after training: 0.7017203107658158
User 57043 does not improve AUC. Reverting changes.
Training on augumented user 92847 38/50 current_auc = 0.7017203107658158
User 92847 AUC after training: 0.7017203107658158
User 92847 does not improve AUC. Reverting changes.
Training on augumented user 18272 39/50 current_auc = 0.7017203107658158
User 18272 AUC after training: 0.700332963374029
User 18272 does not improve AUC. Reverting changes.
Training on augumented user 12637 40/50 current_auc = 0.7017203107658158
User 12637 AUC after training: 0.7014428412874584
User 12637 does not improve AUC. Reverting changes.
Training on augumented user 113210 41/50 current_auc = 0.7017203107658158
User 113210 AUC after training: 0.7006104328523862
User 113210 does not improve AUC. Reverting changes.
Training on augumented user 64577 42/50 current_auc = 0.7017203107658158
User 64577 AUC after training: 0.6992230854605993
User 64577 does not improve AUC. Reverting changes.
Training on augumented user 34192 43/50 current_auc = 0.7017203107658158
User 34192 AUC after training: 0.701165371809101
User 34192 does not improve AUC. Reverting changes.
Training on augumented user 44173 44/50 current_auc = 0.7017203107658158
User 44173 AUC after training: 0.7007491675915649
User 44173 does not improve AUC. Reverting changes.
Training on augumented user 80747 45/50 current_auc = 0.7017203107658158
User 80747 AUC after training: 0.7006104328523862
User 80747 does not improve AUC. Reverting changes.
Training on augumented user 25592 46/50 current_auc = 0.7017203107658158
User 25592 AUC after training: 0.7006104328523862
User 25592 does not improve AUC. Reverting changes.
Training on augumented user 44754 47/50 current_auc = 0.7017203107658158
User 44754 AUC after training: 0.7006104328523862
User 44754 does not improve AUC. Reverting changes.
Training on augumented user 85484 48/50 current_auc = 0.7017203107658158
User 85484 AUC after training: 0.7014428412874585
User 85484 does not improve AUC. Reverting changes.
Training on augumented user 83117 49/50 current_auc = 0.7017203107658158
User 83117 AUC after training: 0.7008879023307436
User 83117 does not improve AUC. Reverting changes.
[2024-12-02 20:14:17.619132] start test user 76514 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:18.042067] start test user 76514 288/568 recall augumented users by random, augumented_users = [46616, 131673, 54557, 125021, 121647, 132356, 67226, 33488, 65999, 81281, 99102, 42651, 84862, 71915, 46828, 85582, 41564, 2237, 105950, 10527, 72005, 33585, 3618, 32103, 94795, 79212, 80301, 39490, 25745, 27117, 107173, 106643, 2420, 54872, 53974, 130718, 121830, 26313, 114005, 106944, 97470, 20590, 132983, 100017, 4617, 6063, 117540, 52311, 115079, 130932]
[2024-12-02 20:14:18.056845] user = 76514 Cloud 288/568
[2024-12-02 20:14:18.067694] user = 76514 Local 288/568
[2024-12-02 20:14:18.094896] user = 76514 Local+ 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:20.647622] user = 76514 MPDA- 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6512896825396826
Training on augumented user 46616 0/50 current_auc = 0.6512896825396826
User 46616 AUC after training: 0.6512896825396826
User 46616 does not improve AUC. Reverting changes.
Training on augumented user 131673 1/50 current_auc = 0.6512896825396826
User 131673 AUC after training: 0.652281746031746
User 131673 improves AUC. Keeping the model.
Training on augumented user 54557 2/50 current_auc = 0.652281746031746
User 54557 AUC after training: 0.654265873015873
User 54557 improves AUC. Keeping the model.
Training on augumented user 125021 3/50 current_auc = 0.654265873015873
User 125021 AUC after training: 0.6532738095238095
User 125021 does not improve AUC. Reverting changes.
Training on augumented user 121647 4/50 current_auc = 0.654265873015873
User 121647 AUC after training: 0.6532738095238095
User 121647 does not improve AUC. Reverting changes.
Training on augumented user 132356 5/50 current_auc = 0.654265873015873
User 132356 AUC after training: 0.654265873015873
User 132356 does not improve AUC. Reverting changes.
Training on augumented user 67226 6/50 current_auc = 0.654265873015873
User 67226 AUC after training: 0.6537698412698412
User 67226 does not improve AUC. Reverting changes.
Training on augumented user 33488 7/50 current_auc = 0.654265873015873
User 33488 AUC after training: 0.652281746031746
User 33488 does not improve AUC. Reverting changes.
Training on augumented user 65999 8/50 current_auc = 0.654265873015873
User 65999 AUC after training: 0.650297619047619
User 65999 does not improve AUC. Reverting changes.
Training on augumented user 81281 9/50 current_auc = 0.654265873015873
User 81281 AUC after training: 0.652281746031746
User 81281 does not improve AUC. Reverting changes.
Training on augumented user 99102 10/50 current_auc = 0.654265873015873
User 99102 AUC after training: 0.652281746031746
User 99102 does not improve AUC. Reverting changes.
Training on augumented user 42651 11/50 current_auc = 0.654265873015873
User 42651 AUC after training: 0.652281746031746
User 42651 does not improve AUC. Reverting changes.
Training on augumented user 84862 12/50 current_auc = 0.654265873015873
User 84862 AUC after training: 0.6532738095238094
User 84862 does not improve AUC. Reverting changes.
Training on augumented user 71915 13/50 current_auc = 0.654265873015873
User 71915 AUC after training: 0.652281746031746
User 71915 does not improve AUC. Reverting changes.
Training on augumented user 46828 14/50 current_auc = 0.654265873015873
User 46828 AUC after training: 0.650297619047619
User 46828 does not improve AUC. Reverting changes.
Training on augumented user 85582 15/50 current_auc = 0.654265873015873
User 85582 AUC after training: 0.6532738095238095
User 85582 does not improve AUC. Reverting changes.
Training on augumented user 41564 16/50 current_auc = 0.654265873015873
User 41564 AUC after training: 0.6532738095238095
User 41564 does not improve AUC. Reverting changes.
Training on augumented user 2237 17/50 current_auc = 0.654265873015873
User 2237 AUC after training: 0.6532738095238095
User 2237 does not improve AUC. Reverting changes.
Training on augumented user 105950 18/50 current_auc = 0.654265873015873
User 105950 AUC after training: 0.6532738095238095
User 105950 does not improve AUC. Reverting changes.
Training on augumented user 10527 19/50 current_auc = 0.654265873015873
User 10527 AUC after training: 0.6532738095238095
User 10527 does not improve AUC. Reverting changes.
Training on augumented user 72005 20/50 current_auc = 0.654265873015873
User 72005 AUC after training: 0.652281746031746
User 72005 does not improve AUC. Reverting changes.
Training on augumented user 33585 21/50 current_auc = 0.654265873015873
User 33585 AUC after training: 0.6532738095238095
User 33585 does not improve AUC. Reverting changes.
Training on augumented user 3618 22/50 current_auc = 0.654265873015873
User 3618 AUC after training: 0.6502976190476191
User 3618 does not improve AUC. Reverting changes.
Training on augumented user 32103 23/50 current_auc = 0.654265873015873
User 32103 AUC after training: 0.652281746031746
User 32103 does not improve AUC. Reverting changes.
Training on augumented user 94795 24/50 current_auc = 0.654265873015873
User 94795 AUC after training: 0.654265873015873
User 94795 does not improve AUC. Reverting changes.
Training on augumented user 79212 25/50 current_auc = 0.654265873015873
User 79212 AUC after training: 0.654265873015873
User 79212 does not improve AUC. Reverting changes.
Training on augumented user 80301 26/50 current_auc = 0.654265873015873
User 80301 AUC after training: 0.6532738095238095
User 80301 does not improve AUC. Reverting changes.
Training on augumented user 39490 27/50 current_auc = 0.654265873015873
User 39490 AUC after training: 0.654265873015873
User 39490 does not improve AUC. Reverting changes.
Training on augumented user 25745 28/50 current_auc = 0.654265873015873
User 25745 AUC after training: 0.654265873015873
User 25745 does not improve AUC. Reverting changes.
Training on augumented user 27117 29/50 current_auc = 0.654265873015873
User 27117 AUC after training: 0.654265873015873
User 27117 does not improve AUC. Reverting changes.
Training on augumented user 107173 30/50 current_auc = 0.654265873015873
User 107173 AUC after training: 0.654265873015873
User 107173 does not improve AUC. Reverting changes.
Training on augumented user 106643 31/50 current_auc = 0.654265873015873
User 106643 AUC after training: 0.6512896825396826
User 106643 does not improve AUC. Reverting changes.
Training on augumented user 2420 32/50 current_auc = 0.654265873015873
User 2420 AUC after training: 0.6502976190476191
User 2420 does not improve AUC. Reverting changes.
Training on augumented user 54872 33/50 current_auc = 0.654265873015873
User 54872 AUC after training: 0.6532738095238095
User 54872 does not improve AUC. Reverting changes.
Training on augumented user 53974 34/50 current_auc = 0.654265873015873
User 53974 AUC after training: 0.654265873015873
User 53974 does not improve AUC. Reverting changes.
Training on augumented user 130718 35/50 current_auc = 0.654265873015873
User 130718 AUC after training: 0.652281746031746
User 130718 does not improve AUC. Reverting changes.
Training on augumented user 121830 36/50 current_auc = 0.654265873015873
User 121830 AUC after training: 0.6532738095238095
User 121830 does not improve AUC. Reverting changes.
Training on augumented user 26313 37/50 current_auc = 0.654265873015873
User 26313 AUC after training: 0.6527777777777778
User 26313 does not improve AUC. Reverting changes.
Training on augumented user 114005 38/50 current_auc = 0.654265873015873
User 114005 AUC after training: 0.6512896825396826
User 114005 does not improve AUC. Reverting changes.
Training on augumented user 106944 39/50 current_auc = 0.654265873015873
User 106944 AUC after training: 0.654265873015873
User 106944 does not improve AUC. Reverting changes.
Training on augumented user 97470 40/50 current_auc = 0.654265873015873
User 97470 AUC after training: 0.652281746031746
User 97470 does not improve AUC. Reverting changes.
Training on augumented user 20590 41/50 current_auc = 0.654265873015873
User 20590 AUC after training: 0.652281746031746
User 20590 does not improve AUC. Reverting changes.
Training on augumented user 132983 42/50 current_auc = 0.654265873015873
User 132983 AUC after training: 0.6532738095238095
User 132983 does not improve AUC. Reverting changes.
Training on augumented user 100017 43/50 current_auc = 0.654265873015873
User 100017 AUC after training: 0.654265873015873
User 100017 does not improve AUC. Reverting changes.
Training on augumented user 4617 44/50 current_auc = 0.654265873015873
User 4617 AUC after training: 0.6532738095238094
User 4617 does not improve AUC. Reverting changes.
Training on augumented user 6063 45/50 current_auc = 0.654265873015873
User 6063 AUC after training: 0.6532738095238095
User 6063 does not improve AUC. Reverting changes.
Training on augumented user 117540 46/50 current_auc = 0.654265873015873
User 117540 AUC after training: 0.654265873015873
User 117540 does not improve AUC. Reverting changes.
Training on augumented user 52311 47/50 current_auc = 0.654265873015873
User 52311 AUC after training: 0.6493055555555555
User 52311 does not improve AUC. Reverting changes.
Training on augumented user 115079 48/50 current_auc = 0.654265873015873
User 115079 AUC after training: 0.6532738095238095
User 115079 does not improve AUC. Reverting changes.
Training on augumented user 130932 49/50 current_auc = 0.654265873015873
User 130932 AUC after training: 0.6532738095238095
User 130932 does not improve AUC. Reverting changes.
[2024-12-02 20:14:47.852528] start test user 76536 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:48.304621] start test user 76536 289/568 recall augumented users by random, augumented_users = [83670, 73214, 91696, 12654, 100854, 64264, 82159, 119585, 16229, 124940, 121323, 51450, 111631, 13060, 102082, 59830, 51534, 75192, 7340, 87085, 33839, 34893, 59040, 130089, 82033, 126712, 48877, 110292, 114824, 29308, 115949, 125710, 35528, 125472, 23687, 84860, 103468, 22546, 3310, 95905, 41246, 81341, 71800, 46324, 86520, 91165, 9278, 81785, 35041, 112678]
[2024-12-02 20:14:48.319690] user = 76536 Cloud 289/568
[2024-12-02 20:14:48.331082] user = 76536 Local 289/568
[2024-12-02 20:14:48.417503] user = 76536 Local+ 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:50.836253] user = 76536 MPDA- 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6541666666666667
Training on augumented user 83670 0/50 current_auc = 0.6541666666666667
User 83670 AUC after training: 0.6558333333333334
User 83670 improves AUC. Keeping the model.
Training on augumented user 73214 1/50 current_auc = 0.6558333333333334
User 73214 AUC after training: 0.6541666666666667
User 73214 does not improve AUC. Reverting changes.
Training on augumented user 91696 2/50 current_auc = 0.6558333333333334
User 91696 AUC after training: 0.6558333333333334
User 91696 does not improve AUC. Reverting changes.
Training on augumented user 12654 3/50 current_auc = 0.6558333333333334
User 12654 AUC after training: 0.6558333333333334
User 12654 does not improve AUC. Reverting changes.
Training on augumented user 100854 4/50 current_auc = 0.6558333333333334
User 100854 AUC after training: 0.6575
User 100854 improves AUC. Keeping the model.
Training on augumented user 64264 5/50 current_auc = 0.6575
User 64264 AUC after training: 0.6566666666666666
User 64264 does not improve AUC. Reverting changes.
Training on augumented user 82159 6/50 current_auc = 0.6575
User 82159 AUC after training: 0.66
User 82159 improves AUC. Keeping the model.
Training on augumented user 119585 7/50 current_auc = 0.66
User 119585 AUC after training: 0.6566666666666666
User 119585 does not improve AUC. Reverting changes.
Training on augumented user 16229 8/50 current_auc = 0.66
User 16229 AUC after training: 0.6583333333333333
User 16229 does not improve AUC. Reverting changes.
Training on augumented user 124940 9/50 current_auc = 0.66
User 124940 AUC after training: 0.66
User 124940 does not improve AUC. Reverting changes.
Training on augumented user 121323 10/50 current_auc = 0.66
User 121323 AUC after training: 0.66
User 121323 does not improve AUC. Reverting changes.
Training on augumented user 51450 11/50 current_auc = 0.66
User 51450 AUC after training: 0.66
User 51450 does not improve AUC. Reverting changes.
Training on augumented user 111631 12/50 current_auc = 0.66
User 111631 AUC after training: 0.6633333333333333
User 111631 improves AUC. Keeping the model.
Training on augumented user 13060 13/50 current_auc = 0.6633333333333333
User 13060 AUC after training: 0.6633333333333333
User 13060 does not improve AUC. Reverting changes.
Training on augumented user 102082 14/50 current_auc = 0.6633333333333333
User 102082 AUC after training: 0.6633333333333333
User 102082 does not improve AUC. Reverting changes.
Training on augumented user 59830 15/50 current_auc = 0.6633333333333333
User 59830 AUC after training: 0.6633333333333333
User 59830 does not improve AUC. Reverting changes.
Training on augumented user 51534 16/50 current_auc = 0.6633333333333333
User 51534 AUC after training: 0.6633333333333333
User 51534 does not improve AUC. Reverting changes.
Training on augumented user 75192 17/50 current_auc = 0.6633333333333333
User 75192 AUC after training: 0.6633333333333333
User 75192 does not improve AUC. Reverting changes.
Training on augumented user 7340 18/50 current_auc = 0.6633333333333333
User 7340 AUC after training: 0.6633333333333333
User 7340 does not improve AUC. Reverting changes.
Training on augumented user 87085 19/50 current_auc = 0.6633333333333333
User 87085 AUC after training: 0.6633333333333333
User 87085 does not improve AUC. Reverting changes.
Training on augumented user 33839 20/50 current_auc = 0.6633333333333333
User 33839 AUC after training: 0.6633333333333333
User 33839 does not improve AUC. Reverting changes.
Training on augumented user 34893 21/50 current_auc = 0.6633333333333333
User 34893 AUC after training: 0.6649999999999999
User 34893 improves AUC. Keeping the model.
Training on augumented user 59040 22/50 current_auc = 0.6649999999999999
User 59040 AUC after training: 0.6649999999999999
User 59040 does not improve AUC. Reverting changes.
Training on augumented user 130089 23/50 current_auc = 0.6649999999999999
User 130089 AUC after training: 0.6633333333333333
User 130089 does not improve AUC. Reverting changes.
Training on augumented user 82033 24/50 current_auc = 0.6649999999999999
User 82033 AUC after training: 0.6633333333333333
User 82033 does not improve AUC. Reverting changes.
Training on augumented user 126712 25/50 current_auc = 0.6649999999999999
User 126712 AUC after training: 0.6649999999999999
User 126712 does not improve AUC. Reverting changes.
Training on augumented user 48877 26/50 current_auc = 0.6649999999999999
User 48877 AUC after training: 0.6616666666666666
User 48877 does not improve AUC. Reverting changes.
Training on augumented user 110292 27/50 current_auc = 0.6649999999999999
User 110292 AUC after training: 0.6649999999999999
User 110292 does not improve AUC. Reverting changes.
Training on augumented user 114824 28/50 current_auc = 0.6649999999999999
User 114824 AUC after training: 0.6649999999999999
User 114824 does not improve AUC. Reverting changes.
Training on augumented user 29308 29/50 current_auc = 0.6649999999999999
User 29308 AUC after training: 0.6649999999999999
User 29308 does not improve AUC. Reverting changes.
Training on augumented user 115949 30/50 current_auc = 0.6649999999999999
User 115949 AUC after training: 0.6649999999999999
User 115949 does not improve AUC. Reverting changes.
Training on augumented user 125710 31/50 current_auc = 0.6649999999999999
User 125710 AUC after training: 0.6649999999999999
User 125710 does not improve AUC. Reverting changes.
Training on augumented user 35528 32/50 current_auc = 0.6649999999999999
User 35528 AUC after training: 0.6616666666666666
User 35528 does not improve AUC. Reverting changes.
Training on augumented user 125472 33/50 current_auc = 0.6649999999999999
User 125472 AUC after training: 0.6649999999999999
User 125472 does not improve AUC. Reverting changes.
Training on augumented user 23687 34/50 current_auc = 0.6649999999999999
User 23687 AUC after training: 0.6649999999999999
User 23687 does not improve AUC. Reverting changes.
Training on augumented user 84860 35/50 current_auc = 0.6649999999999999
User 84860 AUC after training: 0.6666666666666666
User 84860 improves AUC. Keeping the model.
Training on augumented user 103468 36/50 current_auc = 0.6666666666666666
User 103468 AUC after training: 0.6649999999999999
User 103468 does not improve AUC. Reverting changes.
Training on augumented user 22546 37/50 current_auc = 0.6666666666666666
User 22546 AUC after training: 0.6658333333333333
User 22546 does not improve AUC. Reverting changes.
Training on augumented user 3310 38/50 current_auc = 0.6666666666666666
User 3310 AUC after training: 0.6649999999999999
User 3310 does not improve AUC. Reverting changes.
Training on augumented user 95905 39/50 current_auc = 0.6666666666666666
User 95905 AUC after training: 0.6666666666666666
User 95905 does not improve AUC. Reverting changes.
Training on augumented user 41246 40/50 current_auc = 0.6666666666666666
User 41246 AUC after training: 0.6649999999999999
User 41246 does not improve AUC. Reverting changes.
Training on augumented user 81341 41/50 current_auc = 0.6666666666666666
User 81341 AUC after training: 0.6633333333333333
User 81341 does not improve AUC. Reverting changes.
Training on augumented user 71800 42/50 current_auc = 0.6666666666666666
User 71800 AUC after training: 0.6666666666666666
User 71800 does not improve AUC. Reverting changes.
Training on augumented user 46324 43/50 current_auc = 0.6666666666666666
User 46324 AUC after training: 0.6649999999999999
User 46324 does not improve AUC. Reverting changes.
Training on augumented user 86520 44/50 current_auc = 0.6666666666666666
User 86520 AUC after training: 0.665
User 86520 does not improve AUC. Reverting changes.
Training on augumented user 91165 45/50 current_auc = 0.6666666666666666
User 91165 AUC after training: 0.6649999999999999
User 91165 does not improve AUC. Reverting changes.
Training on augumented user 9278 46/50 current_auc = 0.6666666666666666
User 9278 AUC after training: 0.6633333333333333
User 9278 does not improve AUC. Reverting changes.
Training on augumented user 81785 47/50 current_auc = 0.6666666666666666
User 81785 AUC after training: 0.6633333333333333
User 81785 does not improve AUC. Reverting changes.
Training on augumented user 35041 48/50 current_auc = 0.6666666666666666
User 35041 AUC after training: 0.6658333333333333
User 35041 does not improve AUC. Reverting changes.
Training on augumented user 112678 49/50 current_auc = 0.6666666666666666
User 112678 AUC after training: 0.6649999999999999
User 112678 does not improve AUC. Reverting changes.
[2024-12-02 20:15:21.779546] start test user 76595 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:22.201975] start test user 76595 290/568 recall augumented users by random, augumented_users = [78771, 390, 42296, 122166, 86775, 59732, 94221, 71811, 40609, 76564, 15635, 37178, 21675, 35143, 25588, 108074, 8985, 21960, 43994, 22668, 15265, 25135, 70083, 72356, 47392, 87107, 13414, 26765, 71761, 6027, 49966, 106213, 40671, 113521, 9066, 5234, 116517, 53190, 63031, 121448, 20391, 47184, 17218, 117409, 64522, 85612, 48973, 136751, 113322, 79320]
[2024-12-02 20:15:22.217967] user = 76595 Cloud 290/568
[2024-12-02 20:15:22.231202] user = 76595 Local 290/568
[2024-12-02 20:15:22.342300] user = 76595 Local+ 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:24.794396] user = 76595 MPDA- 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5384615384615385
Training on augumented user 78771 0/50 current_auc = 0.5384615384615385
User 78771 AUC after training: 0.5384615384615385
User 78771 does not improve AUC. Reverting changes.
Training on augumented user 390 1/50 current_auc = 0.5384615384615385
User 390 AUC after training: 0.5384615384615385
User 390 does not improve AUC. Reverting changes.
Training on augumented user 42296 2/50 current_auc = 0.5384615384615385
User 42296 AUC after training: 0.5384615384615385
User 42296 does not improve AUC. Reverting changes.
Training on augumented user 122166 3/50 current_auc = 0.5384615384615385
User 122166 AUC after training: 0.5446153846153846
User 122166 improves AUC. Keeping the model.
Training on augumented user 86775 4/50 current_auc = 0.5446153846153846
User 86775 AUC after training: 0.5446153846153846
User 86775 does not improve AUC. Reverting changes.
Training on augumented user 59732 5/50 current_auc = 0.5446153846153846
User 59732 AUC after training: 0.5446153846153846
User 59732 does not improve AUC. Reverting changes.
Training on augumented user 94221 6/50 current_auc = 0.5446153846153846
User 94221 AUC after training: 0.5415384615384615
User 94221 does not improve AUC. Reverting changes.
Training on augumented user 71811 7/50 current_auc = 0.5446153846153846
User 71811 AUC after training: 0.5415384615384615
User 71811 does not improve AUC. Reverting changes.
Training on augumented user 40609 8/50 current_auc = 0.5446153846153846
User 40609 AUC after training: 0.5415384615384615
User 40609 does not improve AUC. Reverting changes.
Training on augumented user 76564 9/50 current_auc = 0.5446153846153846
User 76564 AUC after training: 0.5476923076923077
User 76564 improves AUC. Keeping the model.
Training on augumented user 15635 10/50 current_auc = 0.5476923076923077
User 15635 AUC after training: 0.5507692307692308
User 15635 improves AUC. Keeping the model.
Training on augumented user 37178 11/50 current_auc = 0.5507692307692308
User 37178 AUC after training: 0.5507692307692308
User 37178 does not improve AUC. Reverting changes.
Training on augumented user 21675 12/50 current_auc = 0.5507692307692308
User 21675 AUC after training: 0.5476923076923077
User 21675 does not improve AUC. Reverting changes.
Training on augumented user 35143 13/50 current_auc = 0.5507692307692308
User 35143 AUC after training: 0.5507692307692308
User 35143 does not improve AUC. Reverting changes.
Training on augumented user 25588 14/50 current_auc = 0.5507692307692308
User 25588 AUC after training: 0.5446153846153846
User 25588 does not improve AUC. Reverting changes.
Training on augumented user 108074 15/50 current_auc = 0.5507692307692308
User 108074 AUC after training: 0.5507692307692308
User 108074 does not improve AUC. Reverting changes.
Training on augumented user 8985 16/50 current_auc = 0.5507692307692308
User 8985 AUC after training: 0.5476923076923077
User 8985 does not improve AUC. Reverting changes.
Training on augumented user 21960 17/50 current_auc = 0.5507692307692308
User 21960 AUC after training: 0.5476923076923077
User 21960 does not improve AUC. Reverting changes.
Training on augumented user 43994 18/50 current_auc = 0.5507692307692308
User 43994 AUC after training: 0.5476923076923077
User 43994 does not improve AUC. Reverting changes.
Training on augumented user 22668 19/50 current_auc = 0.5507692307692308
User 22668 AUC after training: 0.5507692307692308
User 22668 does not improve AUC. Reverting changes.
Training on augumented user 15265 20/50 current_auc = 0.5507692307692308
User 15265 AUC after training: 0.5507692307692308
User 15265 does not improve AUC. Reverting changes.
Training on augumented user 25135 21/50 current_auc = 0.5507692307692308
User 25135 AUC after training: 0.5507692307692308
User 25135 does not improve AUC. Reverting changes.
Training on augumented user 70083 22/50 current_auc = 0.5507692307692308
User 70083 AUC after training: 0.5476923076923077
User 70083 does not improve AUC. Reverting changes.
Training on augumented user 72356 23/50 current_auc = 0.5507692307692308
User 72356 AUC after training: 0.5507692307692308
User 72356 does not improve AUC. Reverting changes.
Training on augumented user 47392 24/50 current_auc = 0.5507692307692308
User 47392 AUC after training: 0.5507692307692308
User 47392 does not improve AUC. Reverting changes.
Training on augumented user 87107 25/50 current_auc = 0.5507692307692308
User 87107 AUC after training: 0.5507692307692308
User 87107 does not improve AUC. Reverting changes.
Training on augumented user 13414 26/50 current_auc = 0.5507692307692308
User 13414 AUC after training: 0.5446153846153846
User 13414 does not improve AUC. Reverting changes.
Training on augumented user 26765 27/50 current_auc = 0.5507692307692308
User 26765 AUC after training: 0.5507692307692308
User 26765 does not improve AUC. Reverting changes.
Training on augumented user 71761 28/50 current_auc = 0.5507692307692308
User 71761 AUC after training: 0.5476923076923077
User 71761 does not improve AUC. Reverting changes.
Training on augumented user 6027 29/50 current_auc = 0.5507692307692308
User 6027 AUC after training: 0.5507692307692308
User 6027 does not improve AUC. Reverting changes.
Training on augumented user 49966 30/50 current_auc = 0.5507692307692308
User 49966 AUC after training: 0.5507692307692308
User 49966 does not improve AUC. Reverting changes.
Training on augumented user 106213 31/50 current_auc = 0.5507692307692308
User 106213 AUC after training: 0.5507692307692308
User 106213 does not improve AUC. Reverting changes.
Training on augumented user 40671 32/50 current_auc = 0.5507692307692308
User 40671 AUC after training: 0.5507692307692308
User 40671 does not improve AUC. Reverting changes.
Training on augumented user 113521 33/50 current_auc = 0.5507692307692308
User 113521 AUC after training: 0.5476923076923077
User 113521 does not improve AUC. Reverting changes.
Training on augumented user 9066 34/50 current_auc = 0.5507692307692308
User 9066 AUC after training: 0.5507692307692308
User 9066 does not improve AUC. Reverting changes.
Training on augumented user 5234 35/50 current_auc = 0.5507692307692308
User 5234 AUC after training: 0.5476923076923077
User 5234 does not improve AUC. Reverting changes.
Training on augumented user 116517 36/50 current_auc = 0.5507692307692308
User 116517 AUC after training: 0.5507692307692308
User 116517 does not improve AUC. Reverting changes.
Training on augumented user 53190 37/50 current_auc = 0.5507692307692308
User 53190 AUC after training: 0.5507692307692308
User 53190 does not improve AUC. Reverting changes.
Training on augumented user 63031 38/50 current_auc = 0.5507692307692308
User 63031 AUC after training: 0.5476923076923077
User 63031 does not improve AUC. Reverting changes.
Training on augumented user 121448 39/50 current_auc = 0.5507692307692308
User 121448 AUC after training: 0.5507692307692308
User 121448 does not improve AUC. Reverting changes.
Training on augumented user 20391 40/50 current_auc = 0.5507692307692308
User 20391 AUC after training: 0.5507692307692308
User 20391 does not improve AUC. Reverting changes.
Training on augumented user 47184 41/50 current_auc = 0.5507692307692308
User 47184 AUC after training: 0.5476923076923077
User 47184 does not improve AUC. Reverting changes.
Training on augumented user 17218 42/50 current_auc = 0.5507692307692308
User 17218 AUC after training: 0.5507692307692308
User 17218 does not improve AUC. Reverting changes.
Training on augumented user 117409 43/50 current_auc = 0.5507692307692308
User 117409 AUC after training: 0.5507692307692308
User 117409 does not improve AUC. Reverting changes.
Training on augumented user 64522 44/50 current_auc = 0.5507692307692308
User 64522 AUC after training: 0.5476923076923077
User 64522 does not improve AUC. Reverting changes.
Training on augumented user 85612 45/50 current_auc = 0.5507692307692308
User 85612 AUC after training: 0.5476923076923077
User 85612 does not improve AUC. Reverting changes.
Training on augumented user 48973 46/50 current_auc = 0.5507692307692308
User 48973 AUC after training: 0.5476923076923077
User 48973 does not improve AUC. Reverting changes.
Training on augumented user 136751 47/50 current_auc = 0.5507692307692308
User 136751 AUC after training: 0.5476923076923077
User 136751 does not improve AUC. Reverting changes.
Training on augumented user 113322 48/50 current_auc = 0.5507692307692308
User 113322 AUC after training: 0.5507692307692308
User 113322 does not improve AUC. Reverting changes.
Training on augumented user 79320 49/50 current_auc = 0.5507692307692308
User 79320 AUC after training: 0.5507692307692308
User 79320 does not improve AUC. Reverting changes.
[2024-12-02 20:15:53.134165] start test user 76625 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:53.857727] start test user 76625 291/568 recall augumented users by random, augumented_users = [93629, 46293, 47650, 101863, 84005, 25222, 16888, 37775, 14150, 96069, 57589, 19896, 122653, 118998, 23916, 27201, 105310, 36593, 15468, 116421, 58103, 137034, 40431, 108533, 26843, 116301, 101897, 90058, 100929, 137531, 89452, 31191, 129665, 72573, 109839, 81927, 5877, 138056, 137938, 6672, 132868, 123223, 63975, 9388, 84657, 96574, 61434, 62524, 134086, 84293]
[2024-12-02 20:15:53.887339] user = 76625 Cloud 291/568
[2024-12-02 20:15:53.914968] user = 76625 Local 291/568
[2024-12-02 20:15:54.177535] user = 76625 Local+ 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:56.015602] user = 76625 MPDA- 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6465475615644617
Training on augumented user 93629 0/50 current_auc = 0.6465475615644617
User 93629 AUC after training: 0.6470304200869146
User 93629 improves AUC. Keeping the model.
Training on augumented user 46293 1/50 current_auc = 0.6470304200869146
User 46293 AUC after training: 0.6489618541767262
User 46293 improves AUC. Keeping the model.
Training on augumented user 47650 2/50 current_auc = 0.6489618541767262
User 47650 AUC after training: 0.6484789956542734
User 47650 does not improve AUC. Reverting changes.
Training on augumented user 101863 3/50 current_auc = 0.6489618541767262
User 101863 AUC after training: 0.650893288266538
User 101863 improves AUC. Keeping the model.
Training on augumented user 84005 4/50 current_auc = 0.650893288266538
User 84005 AUC after training: 0.6513761467889908
User 84005 improves AUC. Keeping the model.
Training on augumented user 25222 5/50 current_auc = 0.6513761467889908
User 25222 AUC after training: 0.6489618541767262
User 25222 does not improve AUC. Reverting changes.
Training on augumented user 16888 6/50 current_auc = 0.6513761467889908
User 16888 AUC after training: 0.6504104297440849
User 16888 does not improve AUC. Reverting changes.
Training on augumented user 37775 7/50 current_auc = 0.6513761467889908
User 37775 AUC after training: 0.6508932882665379
User 37775 does not improve AUC. Reverting changes.
Training on augumented user 14150 8/50 current_auc = 0.6513761467889908
User 14150 AUC after training: 0.6523418638338967
User 14150 improves AUC. Keeping the model.
Training on augumented user 96069 9/50 current_auc = 0.6523418638338967
User 96069 AUC after training: 0.6518590053114438
User 96069 does not improve AUC. Reverting changes.
Training on augumented user 57589 10/50 current_auc = 0.6523418638338967
User 57589 AUC after training: 0.6513761467889909
User 57589 does not improve AUC. Reverting changes.
Training on augumented user 19896 11/50 current_auc = 0.6523418638338967
User 19896 AUC after training: 0.6513761467889909
User 19896 does not improve AUC. Reverting changes.
Training on augumented user 122653 12/50 current_auc = 0.6523418638338967
User 122653 AUC after training: 0.6518590053114438
User 122653 does not improve AUC. Reverting changes.
Training on augumented user 118998 13/50 current_auc = 0.6523418638338967
User 118998 AUC after training: 0.650893288266538
User 118998 does not improve AUC. Reverting changes.
Training on augumented user 23916 14/50 current_auc = 0.6523418638338967
User 23916 AUC after training: 0.6513761467889909
User 23916 does not improve AUC. Reverting changes.
Training on augumented user 27201 15/50 current_auc = 0.6523418638338967
User 27201 AUC after training: 0.6523418638338967
User 27201 does not improve AUC. Reverting changes.
Training on augumented user 105310 16/50 current_auc = 0.6523418638338967
User 105310 AUC after training: 0.6518590053114438
User 105310 does not improve AUC. Reverting changes.
Training on augumented user 36593 17/50 current_auc = 0.6523418638338967
User 36593 AUC after training: 0.6513761467889909
User 36593 does not improve AUC. Reverting changes.
Training on augumented user 15468 18/50 current_auc = 0.6523418638338967
User 15468 AUC after training: 0.6518590053114438
User 15468 does not improve AUC. Reverting changes.
Training on augumented user 116421 19/50 current_auc = 0.6523418638338967
User 116421 AUC after training: 0.6528247223563497
User 116421 improves AUC. Keeping the model.
Training on augumented user 58103 20/50 current_auc = 0.6528247223563497
User 58103 AUC after training: 0.6542732979237084
User 58103 improves AUC. Keeping the model.
Training on augumented user 137034 21/50 current_auc = 0.6542732979237084
User 137034 AUC after training: 0.6542732979237084
User 137034 does not improve AUC. Reverting changes.
Training on augumented user 40431 22/50 current_auc = 0.6542732979237084
User 40431 AUC after training: 0.6542732979237084
User 40431 does not improve AUC. Reverting changes.
Training on augumented user 108533 23/50 current_auc = 0.6542732979237084
User 108533 AUC after training: 0.6552390149686143
User 108533 improves AUC. Keeping the model.
Training on augumented user 26843 24/50 current_auc = 0.6552390149686143
User 26843 AUC after training: 0.6562047320135201
User 26843 improves AUC. Keeping the model.
Training on augumented user 116301 25/50 current_auc = 0.6562047320135201
User 116301 AUC after training: 0.6552390149686143
User 116301 does not improve AUC. Reverting changes.
Training on augumented user 101897 26/50 current_auc = 0.6562047320135201
User 101897 AUC after training: 0.6557218734910671
User 101897 does not improve AUC. Reverting changes.
Training on augumented user 90058 27/50 current_auc = 0.6562047320135201
User 90058 AUC after training: 0.6562047320135201
User 90058 does not improve AUC. Reverting changes.
Training on augumented user 100929 28/50 current_auc = 0.6562047320135201
User 100929 AUC after training: 0.6562047320135201
User 100929 does not improve AUC. Reverting changes.
Training on augumented user 137531 29/50 current_auc = 0.6562047320135201
User 137531 AUC after training: 0.6562047320135201
User 137531 does not improve AUC. Reverting changes.
Training on augumented user 89452 30/50 current_auc = 0.6562047320135201
User 89452 AUC after training: 0.6557218734910671
User 89452 does not improve AUC. Reverting changes.
Training on augumented user 31191 31/50 current_auc = 0.6562047320135201
User 31191 AUC after training: 0.6547561564461614
User 31191 does not improve AUC. Reverting changes.
Training on augumented user 129665 32/50 current_auc = 0.6562047320135201
User 129665 AUC after training: 0.6557218734910671
User 129665 does not improve AUC. Reverting changes.
Training on augumented user 72573 33/50 current_auc = 0.6562047320135201
User 72573 AUC after training: 0.6576533075808789
User 72573 improves AUC. Keeping the model.
Training on augumented user 109839 34/50 current_auc = 0.6576533075808789
User 109839 AUC after training: 0.6571704490584259
User 109839 does not improve AUC. Reverting changes.
Training on augumented user 81927 35/50 current_auc = 0.6576533075808789
User 81927 AUC after training: 0.6562047320135201
User 81927 does not improve AUC. Reverting changes.
Training on augumented user 5877 36/50 current_auc = 0.6576533075808789
User 5877 AUC after training: 0.6571704490584259
User 5877 does not improve AUC. Reverting changes.
Training on augumented user 138056 37/50 current_auc = 0.6576533075808789
User 138056 AUC after training: 0.6557218734910671
User 138056 does not improve AUC. Reverting changes.
Training on augumented user 137938 38/50 current_auc = 0.6576533075808789
User 137938 AUC after training: 0.656687590535973
User 137938 does not improve AUC. Reverting changes.
Training on augumented user 6672 39/50 current_auc = 0.6576533075808789
User 6672 AUC after training: 0.656687590535973
User 6672 does not improve AUC. Reverting changes.
Training on augumented user 132868 40/50 current_auc = 0.6576533075808789
User 132868 AUC after training: 0.6571704490584259
User 132868 does not improve AUC. Reverting changes.
Training on augumented user 123223 41/50 current_auc = 0.6576533075808789
User 123223 AUC after training: 0.6576533075808789
User 123223 does not improve AUC. Reverting changes.
Training on augumented user 63975 42/50 current_auc = 0.6576533075808789
User 63975 AUC after training: 0.6571704490584259
User 63975 does not improve AUC. Reverting changes.
Training on augumented user 9388 43/50 current_auc = 0.6576533075808789
User 9388 AUC after training: 0.6571704490584259
User 9388 does not improve AUC. Reverting changes.
Training on augumented user 84657 44/50 current_auc = 0.6576533075808789
User 84657 AUC after training: 0.6562047320135201
User 84657 does not improve AUC. Reverting changes.
Training on augumented user 96574 45/50 current_auc = 0.6576533075808789
User 96574 AUC after training: 0.6542732979237084
User 96574 does not improve AUC. Reverting changes.
Training on augumented user 61434 46/50 current_auc = 0.6576533075808789
User 61434 AUC after training: 0.6552390149686143
User 61434 does not improve AUC. Reverting changes.
Training on augumented user 62524 47/50 current_auc = 0.6576533075808789
User 62524 AUC after training: 0.6571704490584259
User 62524 does not improve AUC. Reverting changes.
Training on augumented user 134086 48/50 current_auc = 0.6576533075808789
User 134086 AUC after training: 0.6557218734910671
User 134086 does not improve AUC. Reverting changes.
Training on augumented user 84293 49/50 current_auc = 0.6576533075808789
User 84293 AUC after training: 0.6571704490584259
User 84293 does not improve AUC. Reverting changes.
[2024-12-02 20:16:25.393223] start test user 76684 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:25.985318] start test user 76684 292/568 recall augumented users by random, augumented_users = [107579, 55135, 80895, 45489, 94951, 126334, 99843, 100584, 107635, 109298, 65992, 22551, 100239, 77730, 72946, 24692, 36437, 121105, 87930, 113728, 53220, 25693, 78016, 46657, 112550, 9760, 69788, 71128, 89413, 100578, 90936, 133216, 91631, 120992, 100126, 77355, 101028, 53100, 10250, 106109, 110323, 74700, 131730, 134747, 100691, 13133, 99439, 22880, 74062, 35149]
[2024-12-02 20:16:26.000044] user = 76684 Cloud 292/568
[2024-12-02 20:16:26.009436] user = 76684 Local 292/568
[2024-12-02 20:16:26.055730] user = 76684 Local+ 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:28.609962] user = 76684 MPDA- 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 107579 0/50 current_auc = 0.75
User 107579 AUC after training: 0.7321428571428572
User 107579 does not improve AUC. Reverting changes.
Training on augumented user 55135 1/50 current_auc = 0.75
User 55135 AUC after training: 0.75
User 55135 does not improve AUC. Reverting changes.
Training on augumented user 80895 2/50 current_auc = 0.75
User 80895 AUC after training: 0.75
User 80895 does not improve AUC. Reverting changes.
Training on augumented user 45489 3/50 current_auc = 0.75
User 45489 AUC after training: 0.75
User 45489 does not improve AUC. Reverting changes.
Training on augumented user 94951 4/50 current_auc = 0.75
User 94951 AUC after training: 0.75
User 94951 does not improve AUC. Reverting changes.
Training on augumented user 126334 5/50 current_auc = 0.75
User 126334 AUC after training: 0.75
User 126334 does not improve AUC. Reverting changes.
Training on augumented user 99843 6/50 current_auc = 0.75
User 99843 AUC after training: 0.75
User 99843 does not improve AUC. Reverting changes.
Training on augumented user 100584 7/50 current_auc = 0.75
User 100584 AUC after training: 0.75
User 100584 does not improve AUC. Reverting changes.
Training on augumented user 107635 8/50 current_auc = 0.75
User 107635 AUC after training: 0.75
User 107635 does not improve AUC. Reverting changes.
Training on augumented user 109298 9/50 current_auc = 0.75
User 109298 AUC after training: 0.75
User 109298 does not improve AUC. Reverting changes.
Training on augumented user 65992 10/50 current_auc = 0.75
User 65992 AUC after training: 0.75
User 65992 does not improve AUC. Reverting changes.
Training on augumented user 22551 11/50 current_auc = 0.75
User 22551 AUC after training: 0.75
User 22551 does not improve AUC. Reverting changes.
Training on augumented user 100239 12/50 current_auc = 0.75
User 100239 AUC after training: 0.75
User 100239 does not improve AUC. Reverting changes.
Training on augumented user 77730 13/50 current_auc = 0.75
User 77730 AUC after training: 0.75
User 77730 does not improve AUC. Reverting changes.
Training on augumented user 72946 14/50 current_auc = 0.75
User 72946 AUC after training: 0.75
User 72946 does not improve AUC. Reverting changes.
Training on augumented user 24692 15/50 current_auc = 0.75
User 24692 AUC after training: 0.75
User 24692 does not improve AUC. Reverting changes.
Training on augumented user 36437 16/50 current_auc = 0.75
User 36437 AUC after training: 0.75
User 36437 does not improve AUC. Reverting changes.
Training on augumented user 121105 17/50 current_auc = 0.75
User 121105 AUC after training: 0.75
User 121105 does not improve AUC. Reverting changes.
Training on augumented user 87930 18/50 current_auc = 0.75
User 87930 AUC after training: 0.75
User 87930 does not improve AUC. Reverting changes.
Training on augumented user 113728 19/50 current_auc = 0.75
User 113728 AUC after training: 0.75
User 113728 does not improve AUC. Reverting changes.
Training on augumented user 53220 20/50 current_auc = 0.75
User 53220 AUC after training: 0.75
User 53220 does not improve AUC. Reverting changes.
Training on augumented user 25693 21/50 current_auc = 0.75
User 25693 AUC after training: 0.75
User 25693 does not improve AUC. Reverting changes.
Training on augumented user 78016 22/50 current_auc = 0.75
User 78016 AUC after training: 0.75
User 78016 does not improve AUC. Reverting changes.
Training on augumented user 46657 23/50 current_auc = 0.75
User 46657 AUC after training: 0.75
User 46657 does not improve AUC. Reverting changes.
Training on augumented user 112550 24/50 current_auc = 0.75
User 112550 AUC after training: 0.75
User 112550 does not improve AUC. Reverting changes.
Training on augumented user 9760 25/50 current_auc = 0.75
User 9760 AUC after training: 0.75
User 9760 does not improve AUC. Reverting changes.
Training on augumented user 69788 26/50 current_auc = 0.75
User 69788 AUC after training: 0.75
User 69788 does not improve AUC. Reverting changes.
Training on augumented user 71128 27/50 current_auc = 0.75
User 71128 AUC after training: 0.75
User 71128 does not improve AUC. Reverting changes.
Training on augumented user 89413 28/50 current_auc = 0.75
User 89413 AUC after training: 0.75
User 89413 does not improve AUC. Reverting changes.
Training on augumented user 100578 29/50 current_auc = 0.75
User 100578 AUC after training: 0.75
User 100578 does not improve AUC. Reverting changes.
Training on augumented user 90936 30/50 current_auc = 0.75
User 90936 AUC after training: 0.75
User 90936 does not improve AUC. Reverting changes.
Training on augumented user 133216 31/50 current_auc = 0.75
User 133216 AUC after training: 0.75
User 133216 does not improve AUC. Reverting changes.
Training on augumented user 91631 32/50 current_auc = 0.75
User 91631 AUC after training: 0.75
User 91631 does not improve AUC. Reverting changes.
Training on augumented user 120992 33/50 current_auc = 0.75
User 120992 AUC after training: 0.75
User 120992 does not improve AUC. Reverting changes.
Training on augumented user 100126 34/50 current_auc = 0.75
User 100126 AUC after training: 0.75
User 100126 does not improve AUC. Reverting changes.
Training on augumented user 77355 35/50 current_auc = 0.75
User 77355 AUC after training: 0.75
User 77355 does not improve AUC. Reverting changes.
Training on augumented user 101028 36/50 current_auc = 0.75
User 101028 AUC after training: 0.75
User 101028 does not improve AUC. Reverting changes.
Training on augumented user 53100 37/50 current_auc = 0.75
User 53100 AUC after training: 0.75
User 53100 does not improve AUC. Reverting changes.
Training on augumented user 10250 38/50 current_auc = 0.75
User 10250 AUC after training: 0.75
User 10250 does not improve AUC. Reverting changes.
Training on augumented user 106109 39/50 current_auc = 0.75
User 106109 AUC after training: 0.75
User 106109 does not improve AUC. Reverting changes.
Training on augumented user 110323 40/50 current_auc = 0.75
User 110323 AUC after training: 0.75
User 110323 does not improve AUC. Reverting changes.
Training on augumented user 74700 41/50 current_auc = 0.75
User 74700 AUC after training: 0.75
User 74700 does not improve AUC. Reverting changes.
Training on augumented user 131730 42/50 current_auc = 0.75
User 131730 AUC after training: 0.75
User 131730 does not improve AUC. Reverting changes.
Training on augumented user 134747 43/50 current_auc = 0.75
User 134747 AUC after training: 0.75
User 134747 does not improve AUC. Reverting changes.
Training on augumented user 100691 44/50 current_auc = 0.75
User 100691 AUC after training: 0.75
User 100691 does not improve AUC. Reverting changes.
Training on augumented user 13133 45/50 current_auc = 0.75
User 13133 AUC after training: 0.75
User 13133 does not improve AUC. Reverting changes.
Training on augumented user 99439 46/50 current_auc = 0.75
User 99439 AUC after training: 0.75
User 99439 does not improve AUC. Reverting changes.
Training on augumented user 22880 47/50 current_auc = 0.75
User 22880 AUC after training: 0.75
User 22880 does not improve AUC. Reverting changes.
Training on augumented user 74062 48/50 current_auc = 0.75
User 74062 AUC after training: 0.75
User 74062 does not improve AUC. Reverting changes.
Training on augumented user 35149 49/50 current_auc = 0.75
User 35149 AUC after training: 0.75
User 35149 does not improve AUC. Reverting changes.
[2024-12-02 20:16:56.254147] start test user 76688 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:56.668199] start test user 76688 293/568 recall augumented users by random, augumented_users = [7145, 42103, 100252, 97291, 111164, 14708, 84464, 44945, 35440, 76110, 94782, 3734, 244, 80178, 87293, 101509, 19644, 35379, 76948, 135296, 121203, 87317, 10244, 80931, 135308, 77585, 57020, 43255, 28763, 36801, 52419, 40420, 56489, 135075, 69535, 33200, 96429, 133669, 56423, 127257, 28587, 114318, 57211, 116838, 81694, 121089, 81220, 55773, 61440, 61317]
[2024-12-02 20:16:56.684003] user = 76688 Cloud 293/568
[2024-12-02 20:16:56.722269] user = 76688 Local 293/568
[2024-12-02 20:16:56.819398] user = 76688 Local+ 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:59.129284] user = 76688 MPDA- 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6062556154537286
Training on augumented user 7145 0/50 current_auc = 0.6062556154537286
User 7145 AUC after training: 0.606233153638814
User 7145 does not improve AUC. Reverting changes.
Training on augumented user 42103 1/50 current_auc = 0.6062556154537286
User 42103 AUC after training: 0.6058400718778079
User 42103 does not improve AUC. Reverting changes.
Training on augumented user 100252 2/50 current_auc = 0.6062556154537286
User 100252 AUC after training: 0.6061769991015273
User 100252 does not improve AUC. Reverting changes.
Training on augumented user 97291 3/50 current_auc = 0.6062556154537286
User 97291 AUC after training: 0.6065476190476191
User 97291 improves AUC. Keeping the model.
Training on augumented user 111164 4/50 current_auc = 0.6065476190476191
User 111164 AUC after training: 0.6060759209344114
User 111164 does not improve AUC. Reverting changes.
Training on augumented user 14708 5/50 current_auc = 0.6065476190476191
User 14708 AUC after training: 0.606547619047619
User 14708 does not improve AUC. Reverting changes.
Training on augumented user 84464 6/50 current_auc = 0.6065476190476191
User 84464 AUC after training: 0.6060534591194968
User 84464 does not improve AUC. Reverting changes.
Training on augumented user 44945 7/50 current_auc = 0.6065476190476191
User 44945 AUC after training: 0.6062106918238992
User 44945 does not improve AUC. Reverting changes.
Training on augumented user 35440 8/50 current_auc = 0.6065476190476191
User 35440 AUC after training: 0.6069519317160827
User 35440 improves AUC. Keeping the model.
Training on augumented user 76110 9/50 current_auc = 0.6069519317160827
User 76110 AUC after training: 0.6069070080862534
User 76110 does not improve AUC. Reverting changes.
Training on augumented user 94782 10/50 current_auc = 0.6069519317160827
User 94782 AUC after training: 0.6067273135669362
User 94782 does not improve AUC. Reverting changes.
Training on augumented user 3734 11/50 current_auc = 0.6069519317160827
User 3734 AUC after training: 0.6068733153638813
User 3734 does not improve AUC. Reverting changes.
Training on augumented user 244 12/50 current_auc = 0.6069519317160827
User 244 AUC after training: 0.6066486972147349
User 244 does not improve AUC. Reverting changes.
Training on augumented user 80178 13/50 current_auc = 0.6069519317160827
User 80178 AUC after training: 0.606862084456424
User 80178 does not improve AUC. Reverting changes.
Training on augumented user 87293 14/50 current_auc = 0.6069519317160827
User 87293 AUC after training: 0.6069631626235399
User 87293 improves AUC. Keeping the model.
Training on augumented user 101509 15/50 current_auc = 0.6069631626235399
User 101509 AUC after training: 0.6069182389937107
User 101509 does not improve AUC. Reverting changes.
Training on augumented user 19644 16/50 current_auc = 0.6069631626235399
User 19644 AUC after training: 0.6068845462713387
User 19644 does not improve AUC. Reverting changes.
Training on augumented user 35379 17/50 current_auc = 0.6069631626235399
User 35379 AUC after training: 0.6067610062893081
User 35379 does not improve AUC. Reverting changes.
Training on augumented user 76948 18/50 current_auc = 0.6069631626235399
User 76948 AUC after training: 0.6073000898472596
User 76948 improves AUC. Keeping the model.
Training on augumented user 135296 19/50 current_auc = 0.6073000898472596
User 135296 AUC after training: 0.6071203953279425
User 135296 does not improve AUC. Reverting changes.
Training on augumented user 121203 20/50 current_auc = 0.6073000898472596
User 121203 AUC after training: 0.6073899371069182
User 121203 improves AUC. Keeping the model.
Training on augumented user 87317 21/50 current_auc = 0.6073899371069182
User 87317 AUC after training: 0.6073899371069182
User 87317 does not improve AUC. Reverting changes.
Training on augumented user 10244 22/50 current_auc = 0.6073899371069182
User 10244 AUC after training: 0.6074123989218329
User 10244 improves AUC. Keeping the model.
Training on augumented user 80931 23/50 current_auc = 0.6074123989218329
User 80931 AUC after training: 0.6072327044025156
User 80931 does not improve AUC. Reverting changes.
Training on augumented user 135308 24/50 current_auc = 0.6074123989218329
User 135308 AUC after training: 0.6070642407906559
User 135308 does not improve AUC. Reverting changes.
Training on augumented user 77585 25/50 current_auc = 0.6074123989218329
User 77585 AUC after training: 0.6074348607367476
User 77585 improves AUC. Keeping the model.
Training on augumented user 57020 26/50 current_auc = 0.6074348607367476
User 57020 AUC after training: 0.6072776280323451
User 57020 does not improve AUC. Reverting changes.
Training on augumented user 43255 27/50 current_auc = 0.6074348607367476
User 43255 AUC after training: 0.6075696316262353
User 43255 improves AUC. Keeping the model.
Training on augumented user 28763 28/50 current_auc = 0.6075696316262353
User 28763 AUC after training: 0.6077717879604672
User 28763 improves AUC. Keeping the model.
Training on augumented user 36801 29/50 current_auc = 0.6077717879604672
User 36801 AUC after training: 0.6078391734052112
User 36801 improves AUC. Keeping the model.
Training on augumented user 52419 30/50 current_auc = 0.6078391734052112
User 52419 AUC after training: 0.6077717879604673
User 52419 does not improve AUC. Reverting changes.
Training on augumented user 40420 31/50 current_auc = 0.6078391734052112
User 40420 AUC after training: 0.6071877807726864
User 40420 does not improve AUC. Reverting changes.
Training on augumented user 56489 32/50 current_auc = 0.6078391734052112
User 56489 AUC after training: 0.6076594788858939
User 56489 does not improve AUC. Reverting changes.
Training on augumented user 135075 33/50 current_auc = 0.6078391734052112
User 135075 AUC after training: 0.6066486972147349
User 135075 does not improve AUC. Reverting changes.
Training on augumented user 69535 34/50 current_auc = 0.6078391734052112
User 69535 AUC after training: 0.6079290206648698
User 69535 improves AUC. Keeping the model.
Training on augumented user 33200 35/50 current_auc = 0.6079290206648698
User 33200 AUC after training: 0.607659478885894
User 33200 does not improve AUC. Reverting changes.
Training on augumented user 96429 36/50 current_auc = 0.6079290206648698
User 96429 AUC after training: 0.6080413297394429
User 96429 improves AUC. Keeping the model.
Training on augumented user 133669 37/50 current_auc = 0.6080413297394429
User 133669 AUC after training: 0.6079964061096136
User 133669 does not improve AUC. Reverting changes.
Training on augumented user 56423 38/50 current_auc = 0.6080413297394429
User 56423 AUC after training: 0.6077942497753819
User 56423 does not improve AUC. Reverting changes.
Training on augumented user 127257 39/50 current_auc = 0.6080413297394429
User 127257 AUC after training: 0.6080637915543575
User 127257 improves AUC. Keeping the model.
Training on augumented user 28587 40/50 current_auc = 0.6080637915543575
User 28587 AUC after training: 0.6082210242587601
User 28587 improves AUC. Keeping the model.
Training on augumented user 114318 41/50 current_auc = 0.6082210242587601
User 114318 AUC after training: 0.6080413297394429
User 114318 does not improve AUC. Reverting changes.
Training on augumented user 57211 42/50 current_auc = 0.6082210242587601
User 57211 AUC after training: 0.60822102425876
User 57211 does not improve AUC. Reverting changes.
Training on augumented user 116838 43/50 current_auc = 0.6082210242587601
User 116838 AUC after training: 0.6076370170709794
User 116838 does not improve AUC. Reverting changes.
Training on augumented user 81694 44/50 current_auc = 0.6082210242587601
User 81694 AUC after training: 0.6063679245283018
User 81694 does not improve AUC. Reverting changes.
Training on augumented user 121089 45/50 current_auc = 0.6082210242587601
User 121089 AUC after training: 0.6084905660377359
User 121089 improves AUC. Keeping the model.
Training on augumented user 81220 46/50 current_auc = 0.6084905660377359
User 81220 AUC after training: 0.6084231805929919
User 81220 does not improve AUC. Reverting changes.
Training on augumented user 55773 47/50 current_auc = 0.6084905660377359
User 55773 AUC after training: 0.608355795148248
User 55773 does not improve AUC. Reverting changes.
Training on augumented user 61440 48/50 current_auc = 0.6084905660377359
User 61440 AUC after training: 0.6085354896675652
User 61440 improves AUC. Keeping the model.
Training on augumented user 61317 49/50 current_auc = 0.6085354896675652
User 61317 AUC after training: 0.6083108715184187
User 61317 does not improve AUC. Reverting changes.
[2024-12-02 20:17:31.761370] start test user 76691 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:32.632246] start test user 76691 294/568 recall augumented users by random, augumented_users = [58313, 108816, 137155, 41151, 121421, 45573, 66891, 87255, 17225, 46666, 6617, 61873, 54873, 47631, 137556, 24534, 83451, 130375, 116804, 104457, 25995, 73308, 77617, 47374, 68742, 47074, 135279, 72153, 112076, 7129, 112670, 109487, 108163, 50740, 116647, 132524, 14101, 69860, 48362, 34222, 115225, 91013, 33696, 45958, 25468, 6625, 136572, 114614, 126154, 133228]
[2024-12-02 20:17:32.650387] user = 76691 Cloud 294/568
[2024-12-02 20:17:32.661632] user = 76691 Local 294/568
[2024-12-02 20:17:32.719950] user = 76691 Local+ 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:35.864653] user = 76691 MPDA- 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 58313 0/50 current_auc = 0.6666666666666667
User 58313 AUC after training: 0.6666666666666667
User 58313 does not improve AUC. Reverting changes.
Training on augumented user 108816 1/50 current_auc = 0.6666666666666667
User 108816 AUC after training: 0.6666666666666667
User 108816 does not improve AUC. Reverting changes.
Training on augumented user 137155 2/50 current_auc = 0.6666666666666667
User 137155 AUC after training: 0.6666666666666667
User 137155 does not improve AUC. Reverting changes.
Training on augumented user 41151 3/50 current_auc = 0.6666666666666667
User 41151 AUC after training: 0.6666666666666667
User 41151 does not improve AUC. Reverting changes.
Training on augumented user 121421 4/50 current_auc = 0.6666666666666667
User 121421 AUC after training: 0.6666666666666667
User 121421 does not improve AUC. Reverting changes.
Training on augumented user 45573 5/50 current_auc = 0.6666666666666667
User 45573 AUC after training: 0.6666666666666667
User 45573 does not improve AUC. Reverting changes.
Training on augumented user 66891 6/50 current_auc = 0.6666666666666667
User 66891 AUC after training: 0.6666666666666667
User 66891 does not improve AUC. Reverting changes.
Training on augumented user 87255 7/50 current_auc = 0.6666666666666667
User 87255 AUC after training: 0.6666666666666667
User 87255 does not improve AUC. Reverting changes.
Training on augumented user 17225 8/50 current_auc = 0.6666666666666667
User 17225 AUC after training: 0.6666666666666667
User 17225 does not improve AUC. Reverting changes.
Training on augumented user 46666 9/50 current_auc = 0.6666666666666667
User 46666 AUC after training: 0.6666666666666667
User 46666 does not improve AUC. Reverting changes.
Training on augumented user 6617 10/50 current_auc = 0.6666666666666667
User 6617 AUC after training: 0.6666666666666667
User 6617 does not improve AUC. Reverting changes.
Training on augumented user 61873 11/50 current_auc = 0.6666666666666667
User 61873 AUC after training: 0.6666666666666667
User 61873 does not improve AUC. Reverting changes.
Training on augumented user 54873 12/50 current_auc = 0.6666666666666667
User 54873 AUC after training: 0.6666666666666667
User 54873 does not improve AUC. Reverting changes.
Training on augumented user 47631 13/50 current_auc = 0.6666666666666667
User 47631 AUC after training: 0.6666666666666667
User 47631 does not improve AUC. Reverting changes.
Training on augumented user 137556 14/50 current_auc = 0.6666666666666667
User 137556 AUC after training: 0.6666666666666667
User 137556 does not improve AUC. Reverting changes.
Training on augumented user 24534 15/50 current_auc = 0.6666666666666667
User 24534 AUC after training: 0.6666666666666667
User 24534 does not improve AUC. Reverting changes.
Training on augumented user 83451 16/50 current_auc = 0.6666666666666667
User 83451 AUC after training: 0.6666666666666667
User 83451 does not improve AUC. Reverting changes.
Training on augumented user 130375 17/50 current_auc = 0.6666666666666667
User 130375 AUC after training: 0.6666666666666667
User 130375 does not improve AUC. Reverting changes.
Training on augumented user 116804 18/50 current_auc = 0.6666666666666667
User 116804 AUC after training: 0.6666666666666667
User 116804 does not improve AUC. Reverting changes.
Training on augumented user 104457 19/50 current_auc = 0.6666666666666667
User 104457 AUC after training: 0.6666666666666667
User 104457 does not improve AUC. Reverting changes.
Training on augumented user 25995 20/50 current_auc = 0.6666666666666667
User 25995 AUC after training: 0.6666666666666667
User 25995 does not improve AUC. Reverting changes.
Training on augumented user 73308 21/50 current_auc = 0.6666666666666667
User 73308 AUC after training: 0.6666666666666667
User 73308 does not improve AUC. Reverting changes.
Training on augumented user 77617 22/50 current_auc = 0.6666666666666667
User 77617 AUC after training: 0.6666666666666667
User 77617 does not improve AUC. Reverting changes.
Training on augumented user 47374 23/50 current_auc = 0.6666666666666667
User 47374 AUC after training: 0.6666666666666667
User 47374 does not improve AUC. Reverting changes.
Training on augumented user 68742 24/50 current_auc = 0.6666666666666667
User 68742 AUC after training: 0.6666666666666667
User 68742 does not improve AUC. Reverting changes.
Training on augumented user 47074 25/50 current_auc = 0.6666666666666667
User 47074 AUC after training: 0.6666666666666667
User 47074 does not improve AUC. Reverting changes.
Training on augumented user 135279 26/50 current_auc = 0.6666666666666667
User 135279 AUC after training: 0.6666666666666667
User 135279 does not improve AUC. Reverting changes.
Training on augumented user 72153 27/50 current_auc = 0.6666666666666667
User 72153 AUC after training: 0.6666666666666667
User 72153 does not improve AUC. Reverting changes.
Training on augumented user 112076 28/50 current_auc = 0.6666666666666667
User 112076 AUC after training: 0.6666666666666667
User 112076 does not improve AUC. Reverting changes.
Training on augumented user 7129 29/50 current_auc = 0.6666666666666667
User 7129 AUC after training: 0.6666666666666667
User 7129 does not improve AUC. Reverting changes.
Training on augumented user 112670 30/50 current_auc = 0.6666666666666667
User 112670 AUC after training: 0.6666666666666667
User 112670 does not improve AUC. Reverting changes.
Training on augumented user 109487 31/50 current_auc = 0.6666666666666667
User 109487 AUC after training: 0.6666666666666667
User 109487 does not improve AUC. Reverting changes.
Training on augumented user 108163 32/50 current_auc = 0.6666666666666667
User 108163 AUC after training: 0.6666666666666667
User 108163 does not improve AUC. Reverting changes.
Training on augumented user 50740 33/50 current_auc = 0.6666666666666667
User 50740 AUC after training: 0.6666666666666667
User 50740 does not improve AUC. Reverting changes.
Training on augumented user 116647 34/50 current_auc = 0.6666666666666667
User 116647 AUC after training: 0.6666666666666667
User 116647 does not improve AUC. Reverting changes.
Training on augumented user 132524 35/50 current_auc = 0.6666666666666667
User 132524 AUC after training: 0.6666666666666667
User 132524 does not improve AUC. Reverting changes.
Training on augumented user 14101 36/50 current_auc = 0.6666666666666667
User 14101 AUC after training: 0.6666666666666667
User 14101 does not improve AUC. Reverting changes.
Training on augumented user 69860 37/50 current_auc = 0.6666666666666667
User 69860 AUC after training: 0.6666666666666667
User 69860 does not improve AUC. Reverting changes.
Training on augumented user 48362 38/50 current_auc = 0.6666666666666667
User 48362 AUC after training: 0.6666666666666667
User 48362 does not improve AUC. Reverting changes.
Training on augumented user 34222 39/50 current_auc = 0.6666666666666667
User 34222 AUC after training: 0.6666666666666667
User 34222 does not improve AUC. Reverting changes.
Training on augumented user 115225 40/50 current_auc = 0.6666666666666667
User 115225 AUC after training: 0.6666666666666667
User 115225 does not improve AUC. Reverting changes.
Training on augumented user 91013 41/50 current_auc = 0.6666666666666667
User 91013 AUC after training: 0.6666666666666667
User 91013 does not improve AUC. Reverting changes.
Training on augumented user 33696 42/50 current_auc = 0.6666666666666667
User 33696 AUC after training: 0.6666666666666667
User 33696 does not improve AUC. Reverting changes.
Training on augumented user 45958 43/50 current_auc = 0.6666666666666667
User 45958 AUC after training: 0.6666666666666667
User 45958 does not improve AUC. Reverting changes.
Training on augumented user 25468 44/50 current_auc = 0.6666666666666667
User 25468 AUC after training: 0.6666666666666667
User 25468 does not improve AUC. Reverting changes.
Training on augumented user 6625 45/50 current_auc = 0.6666666666666667
User 6625 AUC after training: 0.6666666666666667
User 6625 does not improve AUC. Reverting changes.
Training on augumented user 136572 46/50 current_auc = 0.6666666666666667
User 136572 AUC after training: 0.6666666666666667
User 136572 does not improve AUC. Reverting changes.
Training on augumented user 114614 47/50 current_auc = 0.6666666666666667
User 114614 AUC after training: 0.6666666666666667
User 114614 does not improve AUC. Reverting changes.
Training on augumented user 126154 48/50 current_auc = 0.6666666666666667
User 126154 AUC after training: 0.6666666666666667
User 126154 does not improve AUC. Reverting changes.
Training on augumented user 133228 49/50 current_auc = 0.6666666666666667
User 133228 AUC after training: 0.6666666666666667
User 133228 does not improve AUC. Reverting changes.
[2024-12-02 20:18:09.691062] start test user 76722 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:10.372813] start test user 76722 295/568 recall augumented users by random, augumented_users = [10050, 31810, 1956, 38960, 1809, 48302, 81562, 14244, 1450, 98312, 133763, 104092, 56440, 47480, 39195, 30352, 57620, 103463, 6518, 49384, 4804, 19385, 59586, 62441, 60510, 104530, 133548, 104843, 76344, 114793, 128384, 106341, 106304, 5267, 6235, 114949, 59420, 113833, 45075, 124003, 98751, 53614, 9405, 68261, 97667, 79262, 4506, 77551, 2613, 80761]
[2024-12-02 20:18:10.390765] user = 76722 Cloud 295/568
[2024-12-02 20:18:10.409645] user = 76722 Local 295/568
[2024-12-02 20:18:10.465684] user = 76722 Local+ 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:12.772004] user = 76722 MPDA- 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6342342342342342
Training on augumented user 10050 0/50 current_auc = 0.6342342342342342
User 10050 AUC after training: 0.6378378378378379
User 10050 improves AUC. Keeping the model.
Training on augumented user 31810 1/50 current_auc = 0.6378378378378379
User 31810 AUC after training: 0.6351351351351351
User 31810 does not improve AUC. Reverting changes.
Training on augumented user 1956 2/50 current_auc = 0.6378378378378379
User 1956 AUC after training: 0.6342342342342342
User 1956 does not improve AUC. Reverting changes.
Training on augumented user 38960 3/50 current_auc = 0.6378378378378379
User 38960 AUC after training: 0.6504504504504505
User 38960 improves AUC. Keeping the model.
Training on augumented user 1809 4/50 current_auc = 0.6504504504504505
User 1809 AUC after training: 0.6459459459459459
User 1809 does not improve AUC. Reverting changes.
Training on augumented user 48302 5/50 current_auc = 0.6504504504504505
User 48302 AUC after training: 0.645045045045045
User 48302 does not improve AUC. Reverting changes.
Training on augumented user 81562 6/50 current_auc = 0.6504504504504505
User 81562 AUC after training: 0.6414414414414414
User 81562 does not improve AUC. Reverting changes.
Training on augumented user 14244 7/50 current_auc = 0.6504504504504505
User 14244 AUC after training: 0.645045045045045
User 14244 does not improve AUC. Reverting changes.
Training on augumented user 1450 8/50 current_auc = 0.6504504504504505
User 1450 AUC after training: 0.6495495495495496
User 1450 does not improve AUC. Reverting changes.
Training on augumented user 98312 9/50 current_auc = 0.6504504504504505
User 98312 AUC after training: 0.6441441441441441
User 98312 does not improve AUC. Reverting changes.
Training on augumented user 133763 10/50 current_auc = 0.6504504504504505
User 133763 AUC after training: 0.645045045045045
User 133763 does not improve AUC. Reverting changes.
Training on augumented user 104092 11/50 current_auc = 0.6504504504504505
User 104092 AUC after training: 0.6477477477477478
User 104092 does not improve AUC. Reverting changes.
Training on augumented user 56440 12/50 current_auc = 0.6504504504504505
User 56440 AUC after training: 0.636036036036036
User 56440 does not improve AUC. Reverting changes.
Training on augumented user 47480 13/50 current_auc = 0.6504504504504505
User 47480 AUC after training: 0.654054054054054
User 47480 improves AUC. Keeping the model.
Training on augumented user 39195 14/50 current_auc = 0.654054054054054
User 39195 AUC after training: 0.6315315315315315
User 39195 does not improve AUC. Reverting changes.
Training on augumented user 30352 15/50 current_auc = 0.654054054054054
User 30352 AUC after training: 0.6545045045045045
User 30352 improves AUC. Keeping the model.
Training on augumented user 57620 16/50 current_auc = 0.6545045045045045
User 57620 AUC after training: 0.6531531531531531
User 57620 does not improve AUC. Reverting changes.
Training on augumented user 103463 17/50 current_auc = 0.6545045045045045
User 103463 AUC after training: 0.6468468468468468
User 103463 does not improve AUC. Reverting changes.
Training on augumented user 6518 18/50 current_auc = 0.6545045045045045
User 6518 AUC after training: 0.6545045045045045
User 6518 does not improve AUC. Reverting changes.
Training on augumented user 49384 19/50 current_auc = 0.6545045045045045
User 49384 AUC after training: 0.6545045045045045
User 49384 does not improve AUC. Reverting changes.
Training on augumented user 4804 20/50 current_auc = 0.6545045045045045
User 4804 AUC after training: 0.6554054054054054
User 4804 improves AUC. Keeping the model.
Training on augumented user 19385 21/50 current_auc = 0.6554054054054054
User 19385 AUC after training: 0.6536036036036036
User 19385 does not improve AUC. Reverting changes.
Training on augumented user 59586 22/50 current_auc = 0.6554054054054054
User 59586 AUC after training: 0.6572072072072073
User 59586 improves AUC. Keeping the model.
Training on augumented user 62441 23/50 current_auc = 0.6572072072072073
User 62441 AUC after training: 0.6549549549549549
User 62441 does not improve AUC. Reverting changes.
Training on augumented user 60510 24/50 current_auc = 0.6572072072072073
User 60510 AUC after training: 0.6531531531531531
User 60510 does not improve AUC. Reverting changes.
Training on augumented user 104530 25/50 current_auc = 0.6572072072072073
User 104530 AUC after training: 0.6572072072072073
User 104530 does not improve AUC. Reverting changes.
Training on augumented user 133548 26/50 current_auc = 0.6572072072072073
User 133548 AUC after training: 0.6558558558558558
User 133548 does not improve AUC. Reverting changes.
Training on augumented user 104843 27/50 current_auc = 0.6572072072072073
User 104843 AUC after training: 0.6527027027027027
User 104843 does not improve AUC. Reverting changes.
Training on augumented user 76344 28/50 current_auc = 0.6572072072072073
User 76344 AUC after training: 0.6531531531531531
User 76344 does not improve AUC. Reverting changes.
Training on augumented user 114793 29/50 current_auc = 0.6572072072072073
User 114793 AUC after training: 0.6563063063063063
User 114793 does not improve AUC. Reverting changes.
Training on augumented user 128384 30/50 current_auc = 0.6572072072072073
User 128384 AUC after training: 0.6513513513513514
User 128384 does not improve AUC. Reverting changes.
Training on augumented user 106341 31/50 current_auc = 0.6572072072072073
User 106341 AUC after training: 0.6441441441441441
User 106341 does not improve AUC. Reverting changes.
Training on augumented user 106304 32/50 current_auc = 0.6572072072072073
User 106304 AUC after training: 0.6531531531531531
User 106304 does not improve AUC. Reverting changes.
Training on augumented user 5267 33/50 current_auc = 0.6572072072072073
User 5267 AUC after training: 0.6554054054054055
User 5267 does not improve AUC. Reverting changes.
Training on augumented user 6235 34/50 current_auc = 0.6572072072072073
User 6235 AUC after training: 0.6545045045045045
User 6235 does not improve AUC. Reverting changes.
Training on augumented user 114949 35/50 current_auc = 0.6572072072072073
User 114949 AUC after training: 0.6554054054054054
User 114949 does not improve AUC. Reverting changes.
Training on augumented user 59420 36/50 current_auc = 0.6572072072072073
User 59420 AUC after training: 0.6549549549549549
User 59420 does not improve AUC. Reverting changes.
Training on augumented user 113833 37/50 current_auc = 0.6572072072072073
User 113833 AUC after training: 0.6549549549549549
User 113833 does not improve AUC. Reverting changes.
Training on augumented user 45075 38/50 current_auc = 0.6572072072072073
User 45075 AUC after training: 0.6531531531531531
User 45075 does not improve AUC. Reverting changes.
Training on augumented user 124003 39/50 current_auc = 0.6572072072072073
User 124003 AUC after training: 0.654054054054054
User 124003 does not improve AUC. Reverting changes.
Training on augumented user 98751 40/50 current_auc = 0.6572072072072073
User 98751 AUC after training: 0.6495495495495496
User 98751 does not improve AUC. Reverting changes.
Training on augumented user 53614 41/50 current_auc = 0.6572072072072073
User 53614 AUC after training: 0.654054054054054
User 53614 does not improve AUC. Reverting changes.
Training on augumented user 9405 42/50 current_auc = 0.6572072072072073
User 9405 AUC after training: 0.6554054054054054
User 9405 does not improve AUC. Reverting changes.
Training on augumented user 68261 43/50 current_auc = 0.6572072072072073
User 68261 AUC after training: 0.6558558558558558
User 68261 does not improve AUC. Reverting changes.
Training on augumented user 97667 44/50 current_auc = 0.6572072072072073
User 97667 AUC after training: 0.6531531531531531
User 97667 does not improve AUC. Reverting changes.
Training on augumented user 79262 45/50 current_auc = 0.6572072072072073
User 79262 AUC after training: 0.654054054054054
User 79262 does not improve AUC. Reverting changes.
Training on augumented user 4506 46/50 current_auc = 0.6572072072072073
User 4506 AUC after training: 0.6450450450450451
User 4506 does not improve AUC. Reverting changes.
Training on augumented user 77551 47/50 current_auc = 0.6572072072072073
User 77551 AUC after training: 0.654054054054054
User 77551 does not improve AUC. Reverting changes.
Training on augumented user 2613 48/50 current_auc = 0.6572072072072073
User 2613 AUC after training: 0.6558558558558558
User 2613 does not improve AUC. Reverting changes.
Training on augumented user 80761 49/50 current_auc = 0.6572072072072073
User 80761 AUC after training: 0.6472972972972972
User 80761 does not improve AUC. Reverting changes.
[2024-12-02 20:18:42.788731] start test user 76726 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:43.233802] start test user 76726 296/568 recall augumented users by random, augumented_users = [112263, 35020, 62018, 99232, 95698, 43977, 28193, 52346, 90135, 119586, 113367, 48179, 60297, 44908, 63908, 73784, 28415, 135610, 10242, 47568, 117290, 18783, 100831, 98735, 97490, 124045, 3995, 69353, 115907, 35991, 108917, 105148, 76275, 6846, 134500, 45944, 71677, 35967, 34975, 73682, 121130, 6444, 75042, 136035, 20556, 44683, 80470, 8584, 68180, 7161]
[2024-12-02 20:18:43.248598] user = 76726 Cloud 296/568
[2024-12-02 20:18:43.258284] user = 76726 Local 296/568
[2024-12-02 20:18:43.285570] user = 76726 Local+ 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:45.325901] user = 76726 MPDA- 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4347826086956522
Training on augumented user 112263 0/50 current_auc = 0.4347826086956522
User 112263 AUC after training: 0.4347826086956522
User 112263 does not improve AUC. Reverting changes.
Training on augumented user 35020 1/50 current_auc = 0.4347826086956522
User 35020 AUC after training: 0.43873517786561267
User 35020 improves AUC. Keeping the model.
Training on augumented user 62018 2/50 current_auc = 0.43873517786561267
User 62018 AUC after training: 0.4347826086956522
User 62018 does not improve AUC. Reverting changes.
Training on augumented user 99232 3/50 current_auc = 0.43873517786561267
User 99232 AUC after training: 0.43873517786561267
User 99232 does not improve AUC. Reverting changes.
Training on augumented user 95698 4/50 current_auc = 0.43873517786561267
User 95698 AUC after training: 0.43873517786561267
User 95698 does not improve AUC. Reverting changes.
Training on augumented user 43977 5/50 current_auc = 0.43873517786561267
User 43977 AUC after training: 0.43873517786561267
User 43977 does not improve AUC. Reverting changes.
Training on augumented user 28193 6/50 current_auc = 0.43873517786561267
User 28193 AUC after training: 0.43873517786561267
User 28193 does not improve AUC. Reverting changes.
Training on augumented user 52346 7/50 current_auc = 0.43873517786561267
User 52346 AUC after training: 0.4347826086956522
User 52346 does not improve AUC. Reverting changes.
Training on augumented user 90135 8/50 current_auc = 0.43873517786561267
User 90135 AUC after training: 0.43873517786561267
User 90135 does not improve AUC. Reverting changes.
Training on augumented user 119586 9/50 current_auc = 0.43873517786561267
User 119586 AUC after training: 0.43873517786561267
User 119586 does not improve AUC. Reverting changes.
Training on augumented user 113367 10/50 current_auc = 0.43873517786561267
User 113367 AUC after training: 0.4347826086956522
User 113367 does not improve AUC. Reverting changes.
Training on augumented user 48179 11/50 current_auc = 0.43873517786561267
User 48179 AUC after training: 0.4347826086956522
User 48179 does not improve AUC. Reverting changes.
Training on augumented user 60297 12/50 current_auc = 0.43873517786561267
User 60297 AUC after training: 0.43873517786561267
User 60297 does not improve AUC. Reverting changes.
Training on augumented user 44908 13/50 current_auc = 0.43873517786561267
User 44908 AUC after training: 0.43873517786561267
User 44908 does not improve AUC. Reverting changes.
Training on augumented user 63908 14/50 current_auc = 0.43873517786561267
User 63908 AUC after training: 0.43873517786561267
User 63908 does not improve AUC. Reverting changes.
Training on augumented user 73784 15/50 current_auc = 0.43873517786561267
User 73784 AUC after training: 0.43873517786561267
User 73784 does not improve AUC. Reverting changes.
Training on augumented user 28415 16/50 current_auc = 0.43873517786561267
User 28415 AUC after training: 0.43873517786561267
User 28415 does not improve AUC. Reverting changes.
Training on augumented user 135610 17/50 current_auc = 0.43873517786561267
User 135610 AUC after training: 0.43873517786561267
User 135610 does not improve AUC. Reverting changes.
Training on augumented user 10242 18/50 current_auc = 0.43873517786561267
User 10242 AUC after training: 0.43873517786561267
User 10242 does not improve AUC. Reverting changes.
Training on augumented user 47568 19/50 current_auc = 0.43873517786561267
User 47568 AUC after training: 0.4347826086956522
User 47568 does not improve AUC. Reverting changes.
Training on augumented user 117290 20/50 current_auc = 0.43873517786561267
User 117290 AUC after training: 0.43873517786561267
User 117290 does not improve AUC. Reverting changes.
Training on augumented user 18783 21/50 current_auc = 0.43873517786561267
User 18783 AUC after training: 0.43873517786561267
User 18783 does not improve AUC. Reverting changes.
Training on augumented user 100831 22/50 current_auc = 0.43873517786561267
User 100831 AUC after training: 0.43873517786561267
User 100831 does not improve AUC. Reverting changes.
Training on augumented user 98735 23/50 current_auc = 0.43873517786561267
User 98735 AUC after training: 0.4426877470355731
User 98735 improves AUC. Keeping the model.
Training on augumented user 97490 24/50 current_auc = 0.4426877470355731
User 97490 AUC after training: 0.4426877470355731
User 97490 does not improve AUC. Reverting changes.
Training on augumented user 124045 25/50 current_auc = 0.4426877470355731
User 124045 AUC after training: 0.4426877470355731
User 124045 does not improve AUC. Reverting changes.
Training on augumented user 3995 26/50 current_auc = 0.4426877470355731
User 3995 AUC after training: 0.4466403162055336
User 3995 improves AUC. Keeping the model.
Training on augumented user 69353 27/50 current_auc = 0.4466403162055336
User 69353 AUC after training: 0.4426877470355731
User 69353 does not improve AUC. Reverting changes.
Training on augumented user 115907 28/50 current_auc = 0.4466403162055336
User 115907 AUC after training: 0.4426877470355731
User 115907 does not improve AUC. Reverting changes.
Training on augumented user 35991 29/50 current_auc = 0.4466403162055336
User 35991 AUC after training: 0.4426877470355731
User 35991 does not improve AUC. Reverting changes.
Training on augumented user 108917 30/50 current_auc = 0.4466403162055336
User 108917 AUC after training: 0.4426877470355731
User 108917 does not improve AUC. Reverting changes.
Training on augumented user 105148 31/50 current_auc = 0.4466403162055336
User 105148 AUC after training: 0.43873517786561267
User 105148 does not improve AUC. Reverting changes.
Training on augumented user 76275 32/50 current_auc = 0.4466403162055336
User 76275 AUC after training: 0.4426877470355731
User 76275 does not improve AUC. Reverting changes.
Training on augumented user 6846 33/50 current_auc = 0.4466403162055336
User 6846 AUC after training: 0.43873517786561267
User 6846 does not improve AUC. Reverting changes.
Training on augumented user 134500 34/50 current_auc = 0.4466403162055336
User 134500 AUC after training: 0.43873517786561267
User 134500 does not improve AUC. Reverting changes.
Training on augumented user 45944 35/50 current_auc = 0.4466403162055336
User 45944 AUC after training: 0.4426877470355731
User 45944 does not improve AUC. Reverting changes.
Training on augumented user 71677 36/50 current_auc = 0.4466403162055336
User 71677 AUC after training: 0.4466403162055336
User 71677 does not improve AUC. Reverting changes.
Training on augumented user 35967 37/50 current_auc = 0.4466403162055336
User 35967 AUC after training: 0.43873517786561267
User 35967 does not improve AUC. Reverting changes.
Training on augumented user 34975 38/50 current_auc = 0.4466403162055336
User 34975 AUC after training: 0.4426877470355731
User 34975 does not improve AUC. Reverting changes.
Training on augumented user 73682 39/50 current_auc = 0.4466403162055336
User 73682 AUC after training: 0.4426877470355731
User 73682 does not improve AUC. Reverting changes.
Training on augumented user 121130 40/50 current_auc = 0.4466403162055336
User 121130 AUC after training: 0.43873517786561267
User 121130 does not improve AUC. Reverting changes.
Training on augumented user 6444 41/50 current_auc = 0.4466403162055336
User 6444 AUC after training: 0.4426877470355731
User 6444 does not improve AUC. Reverting changes.
Training on augumented user 75042 42/50 current_auc = 0.4466403162055336
User 75042 AUC after training: 0.4426877470355731
User 75042 does not improve AUC. Reverting changes.
Training on augumented user 136035 43/50 current_auc = 0.4466403162055336
User 136035 AUC after training: 0.4466403162055336
User 136035 does not improve AUC. Reverting changes.
Training on augumented user 20556 44/50 current_auc = 0.4466403162055336
User 20556 AUC after training: 0.4426877470355731
User 20556 does not improve AUC. Reverting changes.
Training on augumented user 44683 45/50 current_auc = 0.4466403162055336
User 44683 AUC after training: 0.4466403162055336
User 44683 does not improve AUC. Reverting changes.
Training on augumented user 80470 46/50 current_auc = 0.4466403162055336
User 80470 AUC after training: 0.4426877470355731
User 80470 does not improve AUC. Reverting changes.
Training on augumented user 8584 47/50 current_auc = 0.4466403162055336
User 8584 AUC after training: 0.43873517786561267
User 8584 does not improve AUC. Reverting changes.
Training on augumented user 68180 48/50 current_auc = 0.4466403162055336
User 68180 AUC after training: 0.4426877470355731
User 68180 does not improve AUC. Reverting changes.
Training on augumented user 7161 49/50 current_auc = 0.4466403162055336
User 7161 AUC after training: 0.43873517786561267
User 7161 does not improve AUC. Reverting changes.
[2024-12-02 20:19:14.476314] start test user 76728 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:14.907591] start test user 76728 297/568 recall augumented users by random, augumented_users = [122446, 67387, 107849, 61908, 93201, 3826, 28350, 71875, 130202, 62129, 136702, 47466, 106200, 67745, 1374, 117972, 38823, 63205, 135650, 80597, 130907, 41849, 51862, 14381, 79727, 132958, 96780, 125156, 31850, 47166, 71297, 54213, 88570, 90292, 74816, 55433, 16949, 69025, 104687, 82452, 89436, 18554, 104066, 122365, 114374, 20875, 32466, 22654, 37850, 130397]
[2024-12-02 20:19:14.923497] user = 76728 Cloud 297/568
[2024-12-02 20:19:14.933918] user = 76728 Local 297/568
[2024-12-02 20:19:14.968290] user = 76728 Local+ 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:17.216250] user = 76728 MPDA- 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5303030303030303
Training on augumented user 122446 0/50 current_auc = 0.5303030303030303
User 122446 AUC after training: 0.5303030303030303
User 122446 does not improve AUC. Reverting changes.
Training on augumented user 67387 1/50 current_auc = 0.5303030303030303
User 67387 AUC after training: 0.5265151515151515
User 67387 does not improve AUC. Reverting changes.
Training on augumented user 107849 2/50 current_auc = 0.5303030303030303
User 107849 AUC after training: 0.5303030303030303
User 107849 does not improve AUC. Reverting changes.
Training on augumented user 61908 3/50 current_auc = 0.5303030303030303
User 61908 AUC after training: 0.5303030303030303
User 61908 does not improve AUC. Reverting changes.
Training on augumented user 93201 4/50 current_auc = 0.5303030303030303
User 93201 AUC after training: 0.5303030303030303
User 93201 does not improve AUC. Reverting changes.
Training on augumented user 3826 5/50 current_auc = 0.5303030303030303
User 3826 AUC after training: 0.5303030303030303
User 3826 does not improve AUC. Reverting changes.
Training on augumented user 28350 6/50 current_auc = 0.5303030303030303
User 28350 AUC after training: 0.5303030303030303
User 28350 does not improve AUC. Reverting changes.
Training on augumented user 71875 7/50 current_auc = 0.5303030303030303
User 71875 AUC after training: 0.5303030303030303
User 71875 does not improve AUC. Reverting changes.
Training on augumented user 130202 8/50 current_auc = 0.5303030303030303
User 130202 AUC after training: 0.5303030303030303
User 130202 does not improve AUC. Reverting changes.
Training on augumented user 62129 9/50 current_auc = 0.5303030303030303
User 62129 AUC after training: 0.5303030303030303
User 62129 does not improve AUC. Reverting changes.
Training on augumented user 136702 10/50 current_auc = 0.5303030303030303
User 136702 AUC after training: 0.5303030303030303
User 136702 does not improve AUC. Reverting changes.
Training on augumented user 47466 11/50 current_auc = 0.5303030303030303
User 47466 AUC after training: 0.5303030303030303
User 47466 does not improve AUC. Reverting changes.
Training on augumented user 106200 12/50 current_auc = 0.5303030303030303
User 106200 AUC after training: 0.5303030303030303
User 106200 does not improve AUC. Reverting changes.
Training on augumented user 67745 13/50 current_auc = 0.5303030303030303
User 67745 AUC after training: 0.5303030303030303
User 67745 does not improve AUC. Reverting changes.
Training on augumented user 1374 14/50 current_auc = 0.5303030303030303
User 1374 AUC after training: 0.5303030303030303
User 1374 does not improve AUC. Reverting changes.
Training on augumented user 117972 15/50 current_auc = 0.5303030303030303
User 117972 AUC after training: 0.5303030303030303
User 117972 does not improve AUC. Reverting changes.
Training on augumented user 38823 16/50 current_auc = 0.5303030303030303
User 38823 AUC after training: 0.5303030303030303
User 38823 does not improve AUC. Reverting changes.
Training on augumented user 63205 17/50 current_auc = 0.5303030303030303
User 63205 AUC after training: 0.5303030303030303
User 63205 does not improve AUC. Reverting changes.
Training on augumented user 135650 18/50 current_auc = 0.5303030303030303
User 135650 AUC after training: 0.5303030303030303
User 135650 does not improve AUC. Reverting changes.
Training on augumented user 80597 19/50 current_auc = 0.5303030303030303
User 80597 AUC after training: 0.5303030303030303
User 80597 does not improve AUC. Reverting changes.
Training on augumented user 130907 20/50 current_auc = 0.5303030303030303
User 130907 AUC after training: 0.5303030303030303
User 130907 does not improve AUC. Reverting changes.
Training on augumented user 41849 21/50 current_auc = 0.5303030303030303
User 41849 AUC after training: 0.5303030303030303
User 41849 does not improve AUC. Reverting changes.
Training on augumented user 51862 22/50 current_auc = 0.5303030303030303
User 51862 AUC after training: 0.5303030303030303
User 51862 does not improve AUC. Reverting changes.
Training on augumented user 14381 23/50 current_auc = 0.5303030303030303
User 14381 AUC after training: 0.5303030303030303
User 14381 does not improve AUC. Reverting changes.
Training on augumented user 79727 24/50 current_auc = 0.5303030303030303
User 79727 AUC after training: 0.5303030303030303
User 79727 does not improve AUC. Reverting changes.
Training on augumented user 132958 25/50 current_auc = 0.5303030303030303
User 132958 AUC after training: 0.5303030303030303
User 132958 does not improve AUC. Reverting changes.
Training on augumented user 96780 26/50 current_auc = 0.5303030303030303
User 96780 AUC after training: 0.5340909090909091
User 96780 improves AUC. Keeping the model.
Training on augumented user 125156 27/50 current_auc = 0.5340909090909091
User 125156 AUC after training: 0.5340909090909091
User 125156 does not improve AUC. Reverting changes.
Training on augumented user 31850 28/50 current_auc = 0.5340909090909091
User 31850 AUC after training: 0.5340909090909091
User 31850 does not improve AUC. Reverting changes.
Training on augumented user 47166 29/50 current_auc = 0.5340909090909091
User 47166 AUC after training: 0.5227272727272727
User 47166 does not improve AUC. Reverting changes.
Training on augumented user 71297 30/50 current_auc = 0.5340909090909091
User 71297 AUC after training: 0.5340909090909091
User 71297 does not improve AUC. Reverting changes.
Training on augumented user 54213 31/50 current_auc = 0.5340909090909091
User 54213 AUC after training: 0.5340909090909091
User 54213 does not improve AUC. Reverting changes.
Training on augumented user 88570 32/50 current_auc = 0.5340909090909091
User 88570 AUC after training: 0.5265151515151515
User 88570 does not improve AUC. Reverting changes.
Training on augumented user 90292 33/50 current_auc = 0.5340909090909091
User 90292 AUC after training: 0.5340909090909091
User 90292 does not improve AUC. Reverting changes.
Training on augumented user 74816 34/50 current_auc = 0.5340909090909091
User 74816 AUC after training: 0.5340909090909091
User 74816 does not improve AUC. Reverting changes.
Training on augumented user 55433 35/50 current_auc = 0.5340909090909091
User 55433 AUC after training: 0.5303030303030303
User 55433 does not improve AUC. Reverting changes.
Training on augumented user 16949 36/50 current_auc = 0.5340909090909091
User 16949 AUC after training: 0.5340909090909091
User 16949 does not improve AUC. Reverting changes.
Training on augumented user 69025 37/50 current_auc = 0.5340909090909091
User 69025 AUC after training: 0.5340909090909091
User 69025 does not improve AUC. Reverting changes.
Training on augumented user 104687 38/50 current_auc = 0.5340909090909091
User 104687 AUC after training: 0.5340909090909091
User 104687 does not improve AUC. Reverting changes.
Training on augumented user 82452 39/50 current_auc = 0.5340909090909091
User 82452 AUC after training: 0.5340909090909091
User 82452 does not improve AUC. Reverting changes.
Training on augumented user 89436 40/50 current_auc = 0.5340909090909091
User 89436 AUC after training: 0.5303030303030303
User 89436 does not improve AUC. Reverting changes.
Training on augumented user 18554 41/50 current_auc = 0.5340909090909091
User 18554 AUC after training: 0.5340909090909091
User 18554 does not improve AUC. Reverting changes.
Training on augumented user 104066 42/50 current_auc = 0.5340909090909091
User 104066 AUC after training: 0.5340909090909091
User 104066 does not improve AUC. Reverting changes.
Training on augumented user 122365 43/50 current_auc = 0.5340909090909091
User 122365 AUC after training: 0.5340909090909091
User 122365 does not improve AUC. Reverting changes.
Training on augumented user 114374 44/50 current_auc = 0.5340909090909091
User 114374 AUC after training: 0.5340909090909091
User 114374 does not improve AUC. Reverting changes.
Training on augumented user 20875 45/50 current_auc = 0.5340909090909091
User 20875 AUC after training: 0.5340909090909091
User 20875 does not improve AUC. Reverting changes.
Training on augumented user 32466 46/50 current_auc = 0.5340909090909091
User 32466 AUC after training: 0.5340909090909091
User 32466 does not improve AUC. Reverting changes.
Training on augumented user 22654 47/50 current_auc = 0.5340909090909091
User 22654 AUC after training: 0.5340909090909091
User 22654 does not improve AUC. Reverting changes.
Training on augumented user 37850 48/50 current_auc = 0.5340909090909091
User 37850 AUC after training: 0.5303030303030303
User 37850 does not improve AUC. Reverting changes.
Training on augumented user 130397 49/50 current_auc = 0.5340909090909091
User 130397 AUC after training: 0.5340909090909091
User 130397 does not improve AUC. Reverting changes.
[2024-12-02 20:19:47.099672] start test user 76741 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:47.530262] start test user 76741 298/568 recall augumented users by random, augumented_users = [131213, 72175, 61605, 125147, 29815, 112209, 122684, 67438, 58721, 96011, 47722, 92471, 94027, 80414, 84803, 111532, 113001, 8502, 82136, 117123, 21203, 4243, 13330, 61192, 114873, 48632, 23565, 54562, 20651, 4303, 127179, 71079, 118170, 104293, 128046, 94840, 129117, 5621, 12221, 14971, 14573, 86979, 27555, 36489, 53857, 831, 78163, 41095, 14899, 83036]
[2024-12-02 20:19:47.546610] user = 76741 Cloud 298/568
[2024-12-02 20:19:47.591633] user = 76741 Local 298/568
[2024-12-02 20:19:47.664410] user = 76741 Local+ 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:49.481327] user = 76741 MPDA- 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7576617826617826
Training on augumented user 131213 0/50 current_auc = 0.7576617826617826
User 131213 AUC after training: 0.7580891330891331
User 131213 improves AUC. Keeping the model.
Training on augumented user 72175 1/50 current_auc = 0.7580891330891331
User 72175 AUC after training: 0.7581807081807082
User 72175 improves AUC. Keeping the model.
Training on augumented user 61605 2/50 current_auc = 0.7581807081807082
User 61605 AUC after training: 0.7582112332112332
User 61605 improves AUC. Keeping the model.
Training on augumented user 125147 3/50 current_auc = 0.7582112332112332
User 125147 AUC after training: 0.7583028083028083
User 125147 improves AUC. Keeping the model.
Training on augumented user 29815 4/50 current_auc = 0.7583028083028083
User 29815 AUC after training: 0.7581807081807082
User 29815 does not improve AUC. Reverting changes.
Training on augumented user 112209 5/50 current_auc = 0.7583028083028083
User 112209 AUC after training: 0.7593101343101343
User 112209 improves AUC. Keeping the model.
Training on augumented user 122684 6/50 current_auc = 0.7593101343101343
User 122684 AUC after training: 0.7597832722832724
User 122684 improves AUC. Keeping the model.
Training on augumented user 67438 7/50 current_auc = 0.7597832722832724
User 67438 AUC after training: 0.7595238095238096
User 67438 does not improve AUC. Reverting changes.
Training on augumented user 58721 8/50 current_auc = 0.7597832722832724
User 58721 AUC after training: 0.7597527472527473
User 58721 does not improve AUC. Reverting changes.
Training on augumented user 96011 9/50 current_auc = 0.7597832722832724
User 96011 AUC after training: 0.7593101343101344
User 96011 does not improve AUC. Reverting changes.
Training on augumented user 47722 10/50 current_auc = 0.7597832722832724
User 47722 AUC after training: 0.7591880341880342
User 47722 does not improve AUC. Reverting changes.
Training on augumented user 92471 11/50 current_auc = 0.7597832722832724
User 92471 AUC after training: 0.7596001221001221
User 92471 does not improve AUC. Reverting changes.
Training on augumented user 94027 12/50 current_auc = 0.7597832722832724
User 94027 AUC after training: 0.759508547008547
User 94027 does not improve AUC. Reverting changes.
Training on augumented user 80414 13/50 current_auc = 0.7597832722832724
User 80414 AUC after training: 0.7588064713064714
User 80414 does not improve AUC. Reverting changes.
Training on augumented user 84803 14/50 current_auc = 0.7597832722832724
User 84803 AUC after training: 0.7591727716727716
User 84803 does not improve AUC. Reverting changes.
Training on augumented user 111532 15/50 current_auc = 0.7597832722832724
User 111532 AUC after training: 0.7591727716727716
User 111532 does not improve AUC. Reverting changes.
Training on augumented user 113001 16/50 current_auc = 0.7597832722832724
User 113001 AUC after training: 0.7596611721611722
User 113001 does not improve AUC. Reverting changes.
Training on augumented user 8502 17/50 current_auc = 0.7597832722832724
User 8502 AUC after training: 0.7596611721611722
User 8502 does not improve AUC. Reverting changes.
Training on augumented user 82136 18/50 current_auc = 0.7597832722832724
User 82136 AUC after training: 0.7596306471306472
User 82136 does not improve AUC. Reverting changes.
Training on augumented user 117123 19/50 current_auc = 0.7597832722832724
User 117123 AUC after training: 0.7598443223443223
User 117123 improves AUC. Keeping the model.
Training on augumented user 21203 20/50 current_auc = 0.7598443223443223
User 21203 AUC after training: 0.7596306471306471
User 21203 does not improve AUC. Reverting changes.
Training on augumented user 4243 21/50 current_auc = 0.7598443223443223
User 4243 AUC after training: 0.7592643467643468
User 4243 does not improve AUC. Reverting changes.
Training on augumented user 13330 22/50 current_auc = 0.7598443223443223
User 13330 AUC after training: 0.7597222222222223
User 13330 does not improve AUC. Reverting changes.
Training on augumented user 61192 23/50 current_auc = 0.7598443223443223
User 61192 AUC after training: 0.7598748473748475
User 61192 improves AUC. Keeping the model.
Training on augumented user 114873 24/50 current_auc = 0.7598748473748475
User 114873 AUC after training: 0.7599053724053724
User 114873 improves AUC. Keeping the model.
Training on augumented user 48632 25/50 current_auc = 0.7599053724053724
User 48632 AUC after training: 0.7598137973137973
User 48632 does not improve AUC. Reverting changes.
Training on augumented user 23565 26/50 current_auc = 0.7599053724053724
User 23565 AUC after training: 0.7593253968253968
User 23565 does not improve AUC. Reverting changes.
Training on augumented user 54562 27/50 current_auc = 0.7599053724053724
User 54562 AUC after training: 0.7600885225885226
User 54562 improves AUC. Keeping the model.
Training on augumented user 20651 28/50 current_auc = 0.7600885225885226
User 20651 AUC after training: 0.7600579975579975
User 20651 does not improve AUC. Reverting changes.
Training on augumented user 4303 29/50 current_auc = 0.7600885225885226
User 4303 AUC after training: 0.7601190476190476
User 4303 improves AUC. Keeping the model.
Training on augumented user 127179 30/50 current_auc = 0.7601190476190476
User 127179 AUC after training: 0.7591575091575092
User 127179 does not improve AUC. Reverting changes.
Training on augumented user 71079 31/50 current_auc = 0.7601190476190476
User 71079 AUC after training: 0.7598443223443224
User 71079 does not improve AUC. Reverting changes.
Training on augumented user 118170 32/50 current_auc = 0.7601190476190476
User 118170 AUC after training: 0.7598137973137974
User 118170 does not improve AUC. Reverting changes.
Training on augumented user 104293 33/50 current_auc = 0.7601190476190476
User 104293 AUC after training: 0.7600885225885227
User 104293 does not improve AUC. Reverting changes.
Training on augumented user 128046 34/50 current_auc = 0.7601190476190476
User 128046 AUC after training: 0.7593253968253968
User 128046 does not improve AUC. Reverting changes.
Training on augumented user 94840 35/50 current_auc = 0.7601190476190476
User 94840 AUC after training: 0.759447496947497
User 94840 does not improve AUC. Reverting changes.
Training on augumented user 129117 36/50 current_auc = 0.7601190476190476
User 129117 AUC after training: 0.7598443223443224
User 129117 does not improve AUC. Reverting changes.
Training on augumented user 5621 37/50 current_auc = 0.7601190476190476
User 5621 AUC after training: 0.7600885225885226
User 5621 does not improve AUC. Reverting changes.
Training on augumented user 12221 38/50 current_auc = 0.7601190476190476
User 12221 AUC after training: 0.7601190476190476
User 12221 does not improve AUC. Reverting changes.
Training on augumented user 14971 39/50 current_auc = 0.7601190476190476
User 14971 AUC after training: 0.7596001221001221
User 14971 does not improve AUC. Reverting changes.
Training on augumented user 14573 40/50 current_auc = 0.7601190476190476
User 14573 AUC after training: 0.7596916971916973
User 14573 does not improve AUC. Reverting changes.
Training on augumented user 86979 41/50 current_auc = 0.7601190476190476
User 86979 AUC after training: 0.7600274725274726
User 86979 does not improve AUC. Reverting changes.
Training on augumented user 27555 42/50 current_auc = 0.7601190476190476
User 27555 AUC after training: 0.7602716727716727
User 27555 improves AUC. Keeping the model.
Training on augumented user 36489 43/50 current_auc = 0.7602716727716727
User 36489 AUC after training: 0.7595543345543345
User 36489 does not improve AUC. Reverting changes.
Training on augumented user 53857 44/50 current_auc = 0.7602716727716727
User 53857 AUC after training: 0.7596611721611722
User 53857 does not improve AUC. Reverting changes.
Training on augumented user 831 45/50 current_auc = 0.7602716727716727
User 831 AUC after training: 0.7600885225885227
User 831 does not improve AUC. Reverting changes.
Training on augumented user 78163 46/50 current_auc = 0.7602716727716727
User 78163 AUC after training: 0.7599969474969475
User 78163 does not improve AUC. Reverting changes.
Training on augumented user 41095 47/50 current_auc = 0.7602716727716727
User 41095 AUC after training: 0.7600579975579975
User 41095 does not improve AUC. Reverting changes.
Training on augumented user 14899 48/50 current_auc = 0.7602716727716727
User 14899 AUC after training: 0.7600579975579975
User 14899 does not improve AUC. Reverting changes.
Training on augumented user 83036 49/50 current_auc = 0.7602716727716727
User 83036 AUC after training: 0.7596153846153846
User 83036 does not improve AUC. Reverting changes.
[2024-12-02 20:20:24.065205] start test user 76751 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:24.590810] start test user 76751 299/568 recall augumented users by random, augumented_users = [96073, 21281, 122016, 91718, 7536, 1262, 81345, 19891, 34036, 100821, 124178, 70793, 56102, 33318, 118464, 33158, 33351, 92471, 69227, 47345, 56006, 73543, 63253, 49837, 131811, 18924, 65182, 49080, 126062, 107275, 19388, 32401, 62841, 124650, 54197, 93849, 53522, 121118, 54051, 45626, 120301, 70299, 9519, 111270, 27889, 94676, 22156, 13086, 100707, 111671]
[2024-12-02 20:20:24.607275] user = 76751 Cloud 299/568
[2024-12-02 20:20:24.634345] user = 76751 Local 299/568
[2024-12-02 20:20:24.715987] user = 76751 Local+ 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:26.341352] user = 76751 MPDA- 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6240530303030303
Training on augumented user 96073 0/50 current_auc = 0.6240530303030303
User 96073 AUC after training: 0.6231060606060607
User 96073 does not improve AUC. Reverting changes.
Training on augumented user 21281 1/50 current_auc = 0.6240530303030303
User 21281 AUC after training: 0.6240530303030303
User 21281 does not improve AUC. Reverting changes.
Training on augumented user 122016 2/50 current_auc = 0.6240530303030303
User 122016 AUC after training: 0.6248106060606061
User 122016 improves AUC. Keeping the model.
Training on augumented user 91718 3/50 current_auc = 0.6248106060606061
User 91718 AUC after training: 0.625378787878788
User 91718 improves AUC. Keeping the model.
Training on augumented user 7536 4/50 current_auc = 0.625378787878788
User 7536 AUC after training: 0.625189393939394
User 7536 does not improve AUC. Reverting changes.
Training on augumented user 1262 5/50 current_auc = 0.625378787878788
User 1262 AUC after training: 0.6246212121212122
User 1262 does not improve AUC. Reverting changes.
Training on augumented user 81345 6/50 current_auc = 0.625378787878788
User 81345 AUC after training: 0.6253787878787879
User 81345 does not improve AUC. Reverting changes.
Training on augumented user 19891 7/50 current_auc = 0.625378787878788
User 19891 AUC after training: 0.6257575757575757
User 19891 improves AUC. Keeping the model.
Training on augumented user 34036 8/50 current_auc = 0.6257575757575757
User 34036 AUC after training: 0.6248106060606061
User 34036 does not improve AUC. Reverting changes.
Training on augumented user 100821 9/50 current_auc = 0.6257575757575757
User 100821 AUC after training: 0.6244318181818183
User 100821 does not improve AUC. Reverting changes.
Training on augumented user 124178 10/50 current_auc = 0.6257575757575757
User 124178 AUC after training: 0.625
User 124178 does not improve AUC. Reverting changes.
Training on augumented user 70793 11/50 current_auc = 0.6257575757575757
User 70793 AUC after training: 0.6246212121212121
User 70793 does not improve AUC. Reverting changes.
Training on augumented user 56102 12/50 current_auc = 0.6257575757575757
User 56102 AUC after training: 0.6246212121212121
User 56102 does not improve AUC. Reverting changes.
Training on augumented user 33318 13/50 current_auc = 0.6257575757575757
User 33318 AUC after training: 0.625189393939394
User 33318 does not improve AUC. Reverting changes.
Training on augumented user 118464 14/50 current_auc = 0.6257575757575757
User 118464 AUC after training: 0.6257575757575757
User 118464 does not improve AUC. Reverting changes.
Training on augumented user 33158 15/50 current_auc = 0.6257575757575757
User 33158 AUC after training: 0.6259469696969697
User 33158 improves AUC. Keeping the model.
Training on augumented user 33351 16/50 current_auc = 0.6259469696969697
User 33351 AUC after training: 0.625378787878788
User 33351 does not improve AUC. Reverting changes.
Training on augumented user 92471 17/50 current_auc = 0.6259469696969697
User 92471 AUC after training: 0.6248106060606061
User 92471 does not improve AUC. Reverting changes.
Training on augumented user 69227 18/50 current_auc = 0.6259469696969697
User 69227 AUC after training: 0.6257575757575757
User 69227 does not improve AUC. Reverting changes.
Training on augumented user 47345 19/50 current_auc = 0.6259469696969697
User 47345 AUC after training: 0.6263257575757576
User 47345 improves AUC. Keeping the model.
Training on augumented user 56006 20/50 current_auc = 0.6263257575757576
User 56006 AUC after training: 0.6263257575757576
User 56006 does not improve AUC. Reverting changes.
Training on augumented user 73543 21/50 current_auc = 0.6263257575757576
User 73543 AUC after training: 0.6255681818181817
User 73543 does not improve AUC. Reverting changes.
Training on augumented user 63253 22/50 current_auc = 0.6263257575757576
User 63253 AUC after training: 0.6257575757575757
User 63253 does not improve AUC. Reverting changes.
Training on augumented user 49837 23/50 current_auc = 0.6263257575757576
User 49837 AUC after training: 0.6263257575757576
User 49837 does not improve AUC. Reverting changes.
Training on augumented user 131811 24/50 current_auc = 0.6263257575757576
User 131811 AUC after training: 0.6268939393939394
User 131811 improves AUC. Keeping the model.
Training on augumented user 18924 25/50 current_auc = 0.6268939393939394
User 18924 AUC after training: 0.6265151515151515
User 18924 does not improve AUC. Reverting changes.
Training on augumented user 65182 26/50 current_auc = 0.6268939393939394
User 65182 AUC after training: 0.6274621212121212
User 65182 improves AUC. Keeping the model.
Training on augumented user 49080 27/50 current_auc = 0.6274621212121212
User 49080 AUC after training: 0.6293560606060606
User 49080 improves AUC. Keeping the model.
Training on augumented user 126062 28/50 current_auc = 0.6293560606060606
User 126062 AUC after training: 0.6272727272727273
User 126062 does not improve AUC. Reverting changes.
Training on augumented user 107275 29/50 current_auc = 0.6293560606060606
User 107275 AUC after training: 0.6304924242424242
User 107275 improves AUC. Keeping the model.
Training on augumented user 19388 30/50 current_auc = 0.6304924242424242
User 19388 AUC after training: 0.6291666666666667
User 19388 does not improve AUC. Reverting changes.
Training on augumented user 32401 31/50 current_auc = 0.6304924242424242
User 32401 AUC after training: 0.6297348484848484
User 32401 does not improve AUC. Reverting changes.
Training on augumented user 62841 32/50 current_auc = 0.6304924242424242
User 62841 AUC after training: 0.6308712121212121
User 62841 improves AUC. Keeping the model.
Training on augumented user 124650 33/50 current_auc = 0.6308712121212121
User 124650 AUC after training: 0.6297348484848485
User 124650 does not improve AUC. Reverting changes.
Training on augumented user 54197 34/50 current_auc = 0.6308712121212121
User 54197 AUC after training: 0.631439393939394
User 54197 improves AUC. Keeping the model.
Training on augumented user 93849 35/50 current_auc = 0.631439393939394
User 93849 AUC after training: 0.6263257575757576
User 93849 does not improve AUC. Reverting changes.
Training on augumented user 53522 36/50 current_auc = 0.631439393939394
User 53522 AUC after training: 0.6312500000000001
User 53522 does not improve AUC. Reverting changes.
Training on augumented user 121118 37/50 current_auc = 0.631439393939394
User 121118 AUC after training: 0.6321969696969697
User 121118 improves AUC. Keeping the model.
Training on augumented user 54051 38/50 current_auc = 0.6321969696969697
User 54051 AUC after training: 0.6318181818181818
User 54051 does not improve AUC. Reverting changes.
Training on augumented user 45626 39/50 current_auc = 0.6321969696969697
User 45626 AUC after training: 0.631628787878788
User 45626 does not improve AUC. Reverting changes.
Training on augumented user 120301 40/50 current_auc = 0.6321969696969697
User 120301 AUC after training: 0.631628787878788
User 120301 does not improve AUC. Reverting changes.
Training on augumented user 70299 41/50 current_auc = 0.6321969696969697
User 70299 AUC after training: 0.6306818181818182
User 70299 does not improve AUC. Reverting changes.
Training on augumented user 9519 42/50 current_auc = 0.6321969696969697
User 9519 AUC after training: 0.6306818181818181
User 9519 does not improve AUC. Reverting changes.
Training on augumented user 111270 43/50 current_auc = 0.6321969696969697
User 111270 AUC after training: 0.6308712121212121
User 111270 does not improve AUC. Reverting changes.
Training on augumented user 27889 44/50 current_auc = 0.6321969696969697
User 27889 AUC after training: 0.631439393939394
User 27889 does not improve AUC. Reverting changes.
Training on augumented user 94676 45/50 current_auc = 0.6321969696969697
User 94676 AUC after training: 0.631439393939394
User 94676 does not improve AUC. Reverting changes.
Training on augumented user 22156 46/50 current_auc = 0.6321969696969697
User 22156 AUC after training: 0.6304924242424242
User 22156 does not improve AUC. Reverting changes.
Training on augumented user 13086 47/50 current_auc = 0.6321969696969697
User 13086 AUC after training: 0.6312500000000001
User 13086 does not improve AUC. Reverting changes.
Training on augumented user 100707 48/50 current_auc = 0.6321969696969697
User 100707 AUC after training: 0.6318181818181818
User 100707 does not improve AUC. Reverting changes.
Training on augumented user 111671 49/50 current_auc = 0.6321969696969697
User 111671 AUC after training: 0.6306818181818182
User 111671 does not improve AUC. Reverting changes.
[2024-12-02 20:20:55.772352] start test user 76758 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:56.285890] start test user 76758 300/568 recall augumented users by random, augumented_users = [49339, 35989, 55000, 102544, 126670, 61579, 59415, 51473, 4038, 81354, 49302, 2819, 99012, 50035, 46357, 57840, 10277, 130924, 56714, 96592, 57920, 50795, 3893, 128778, 102064, 66725, 3087, 53440, 118445, 71755, 87826, 48541, 102313, 131193, 74038, 74008, 20827, 4747, 16930, 105030, 105524, 118292, 120382, 104382, 56516, 113354, 39300, 57947, 19319, 58609]
[2024-12-02 20:20:56.302448] user = 76758 Cloud 300/568
[2024-12-02 20:20:56.315533] user = 76758 Local 300/568
[2024-12-02 20:20:56.454231] user = 76758 Local+ 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:58.986510] user = 76758 MPDA- 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6502325581395348
Training on augumented user 49339 0/50 current_auc = 0.6502325581395348
User 49339 AUC after training: 0.6530232558139535
User 49339 improves AUC. Keeping the model.
Training on augumented user 35989 1/50 current_auc = 0.6530232558139535
User 35989 AUC after training: 0.6511627906976744
User 35989 does not improve AUC. Reverting changes.
Training on augumented user 55000 2/50 current_auc = 0.6530232558139535
User 55000 AUC after training: 0.6530232558139535
User 55000 does not improve AUC. Reverting changes.
Training on augumented user 102544 3/50 current_auc = 0.6530232558139535
User 102544 AUC after training: 0.6558139534883721
User 102544 improves AUC. Keeping the model.
Training on augumented user 126670 4/50 current_auc = 0.6558139534883721
User 126670 AUC after training: 0.6548837209302326
User 126670 does not improve AUC. Reverting changes.
Training on augumented user 61579 5/50 current_auc = 0.6558139534883721
User 61579 AUC after training: 0.653953488372093
User 61579 does not improve AUC. Reverting changes.
Training on augumented user 59415 6/50 current_auc = 0.6558139534883721
User 59415 AUC after training: 0.6548837209302326
User 59415 does not improve AUC. Reverting changes.
Training on augumented user 51473 7/50 current_auc = 0.6558139534883721
User 51473 AUC after training: 0.653953488372093
User 51473 does not improve AUC. Reverting changes.
Training on augumented user 4038 8/50 current_auc = 0.6558139534883721
User 4038 AUC after training: 0.6511627906976745
User 4038 does not improve AUC. Reverting changes.
Training on augumented user 81354 9/50 current_auc = 0.6558139534883721
User 81354 AUC after training: 0.6548837209302326
User 81354 does not improve AUC. Reverting changes.
Training on augumented user 49302 10/50 current_auc = 0.6558139534883721
User 49302 AUC after training: 0.6548837209302325
User 49302 does not improve AUC. Reverting changes.
Training on augumented user 2819 11/50 current_auc = 0.6558139534883721
User 2819 AUC after training: 0.6548837209302326
User 2819 does not improve AUC. Reverting changes.
Training on augumented user 99012 12/50 current_auc = 0.6558139534883721
User 99012 AUC after training: 0.6558139534883721
User 99012 does not improve AUC. Reverting changes.
Training on augumented user 50035 13/50 current_auc = 0.6558139534883721
User 50035 AUC after training: 0.6548837209302326
User 50035 does not improve AUC. Reverting changes.
Training on augumented user 46357 14/50 current_auc = 0.6558139534883721
User 46357 AUC after training: 0.6548837209302326
User 46357 does not improve AUC. Reverting changes.
Training on augumented user 57840 15/50 current_auc = 0.6558139534883721
User 57840 AUC after training: 0.6530232558139534
User 57840 does not improve AUC. Reverting changes.
Training on augumented user 10277 16/50 current_auc = 0.6558139534883721
User 10277 AUC after training: 0.6548837209302326
User 10277 does not improve AUC. Reverting changes.
Training on augumented user 130924 17/50 current_auc = 0.6558139534883721
User 130924 AUC after training: 0.6530232558139535
User 130924 does not improve AUC. Reverting changes.
Training on augumented user 56714 18/50 current_auc = 0.6558139534883721
User 56714 AUC after training: 0.6558139534883721
User 56714 does not improve AUC. Reverting changes.
Training on augumented user 96592 19/50 current_auc = 0.6558139534883721
User 96592 AUC after training: 0.6520930232558139
User 96592 does not improve AUC. Reverting changes.
Training on augumented user 57920 20/50 current_auc = 0.6558139534883721
User 57920 AUC after training: 0.6493023255813953
User 57920 does not improve AUC. Reverting changes.
Training on augumented user 50795 21/50 current_auc = 0.6558139534883721
User 50795 AUC after training: 0.6511627906976744
User 50795 does not improve AUC. Reverting changes.
Training on augumented user 3893 22/50 current_auc = 0.6558139534883721
User 3893 AUC after training: 0.653953488372093
User 3893 does not improve AUC. Reverting changes.
Training on augumented user 128778 23/50 current_auc = 0.6558139534883721
User 128778 AUC after training: 0.6530232558139535
User 128778 does not improve AUC. Reverting changes.
Training on augumented user 102064 24/50 current_auc = 0.6558139534883721
User 102064 AUC after training: 0.6530232558139535
User 102064 does not improve AUC. Reverting changes.
Training on augumented user 66725 25/50 current_auc = 0.6558139534883721
User 66725 AUC after training: 0.652093023255814
User 66725 does not improve AUC. Reverting changes.
Training on augumented user 3087 26/50 current_auc = 0.6558139534883721
User 3087 AUC after training: 0.6548837209302325
User 3087 does not improve AUC. Reverting changes.
Training on augumented user 53440 27/50 current_auc = 0.6558139534883721
User 53440 AUC after training: 0.6548837209302326
User 53440 does not improve AUC. Reverting changes.
Training on augumented user 118445 28/50 current_auc = 0.6558139534883721
User 118445 AUC after training: 0.6548837209302326
User 118445 does not improve AUC. Reverting changes.
Training on augumented user 71755 29/50 current_auc = 0.6558139534883721
User 71755 AUC after training: 0.6576744186046511
User 71755 improves AUC. Keeping the model.
Training on augumented user 87826 30/50 current_auc = 0.6576744186046511
User 87826 AUC after training: 0.6567441860465116
User 87826 does not improve AUC. Reverting changes.
Training on augumented user 48541 31/50 current_auc = 0.6576744186046511
User 48541 AUC after training: 0.6548837209302326
User 48541 does not improve AUC. Reverting changes.
Training on augumented user 102313 32/50 current_auc = 0.6576744186046511
User 102313 AUC after training: 0.6567441860465116
User 102313 does not improve AUC. Reverting changes.
Training on augumented user 131193 33/50 current_auc = 0.6576744186046511
User 131193 AUC after training: 0.6576744186046511
User 131193 does not improve AUC. Reverting changes.
Training on augumented user 74038 34/50 current_auc = 0.6576744186046511
User 74038 AUC after training: 0.6576744186046511
User 74038 does not improve AUC. Reverting changes.
Training on augumented user 74008 35/50 current_auc = 0.6576744186046511
User 74008 AUC after training: 0.6576744186046511
User 74008 does not improve AUC. Reverting changes.
Training on augumented user 20827 36/50 current_auc = 0.6576744186046511
User 20827 AUC after training: 0.6567441860465116
User 20827 does not improve AUC. Reverting changes.
Training on augumented user 4747 37/50 current_auc = 0.6576744186046511
User 4747 AUC after training: 0.6558139534883721
User 4747 does not improve AUC. Reverting changes.
Training on augumented user 16930 38/50 current_auc = 0.6576744186046511
User 16930 AUC after training: 0.6604651162790698
User 16930 improves AUC. Keeping the model.
Training on augumented user 105030 39/50 current_auc = 0.6604651162790698
User 105030 AUC after training: 0.6586046511627907
User 105030 does not improve AUC. Reverting changes.
Training on augumented user 105524 40/50 current_auc = 0.6604651162790698
User 105524 AUC after training: 0.6558139534883721
User 105524 does not improve AUC. Reverting changes.
Training on augumented user 118292 41/50 current_auc = 0.6604651162790698
User 118292 AUC after training: 0.6613953488372093
User 118292 improves AUC. Keeping the model.
Training on augumented user 120382 42/50 current_auc = 0.6613953488372093
User 120382 AUC after training: 0.6595348837209303
User 120382 does not improve AUC. Reverting changes.
Training on augumented user 104382 43/50 current_auc = 0.6613953488372093
User 104382 AUC after training: 0.6567441860465116
User 104382 does not improve AUC. Reverting changes.
Training on augumented user 56516 44/50 current_auc = 0.6613953488372093
User 56516 AUC after training: 0.6576744186046513
User 56516 does not improve AUC. Reverting changes.
Training on augumented user 113354 45/50 current_auc = 0.6613953488372093
User 113354 AUC after training: 0.6604651162790698
User 113354 does not improve AUC. Reverting changes.
Training on augumented user 39300 46/50 current_auc = 0.6613953488372093
User 39300 AUC after training: 0.6567441860465116
User 39300 does not improve AUC. Reverting changes.
Training on augumented user 57947 47/50 current_auc = 0.6613953488372093
User 57947 AUC after training: 0.6586046511627908
User 57947 does not improve AUC. Reverting changes.
Training on augumented user 19319 48/50 current_auc = 0.6613953488372093
User 19319 AUC after training: 0.6586046511627908
User 19319 does not improve AUC. Reverting changes.
Training on augumented user 58609 49/50 current_auc = 0.6613953488372093
User 58609 AUC after training: 0.6613953488372093
User 58609 does not improve AUC. Reverting changes.
[2024-12-02 20:21:29.394457] start test user 76789 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:30.109892] start test user 76789 301/568 recall augumented users by random, augumented_users = [128411, 91948, 97384, 15865, 130207, 21662, 28538, 19827, 5543, 49897, 10722, 95834, 39303, 3539, 21737, 55801, 135546, 54035, 45270, 24117, 55643, 76808, 14711, 67582, 70475, 29910, 74022, 20906, 112729, 11175, 54862, 44393, 83502, 13713, 131725, 6368, 51564, 128255, 8889, 15252, 15762, 30085, 37678, 73533, 79607, 102112, 94386, 27366, 131994, 39872]
[2024-12-02 20:21:30.139065] user = 76789 Cloud 301/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:30.145316] user = 76789 Local 301/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:30.403471] user = 76789 Local+ 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:33.258977] user = 76789 MPDA- 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 128411 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128411 AUC after training: 0.5
User 128411 does not improve AUC. Reverting changes.
Training on augumented user 91948 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91948 AUC after training: 0.5
User 91948 does not improve AUC. Reverting changes.
Training on augumented user 97384 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97384 AUC after training: 0.5
User 97384 does not improve AUC. Reverting changes.
Training on augumented user 15865 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15865 AUC after training: 0.5
User 15865 does not improve AUC. Reverting changes.
Training on augumented user 130207 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130207 AUC after training: 0.5
User 130207 does not improve AUC. Reverting changes.
Training on augumented user 21662 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21662 AUC after training: 0.5
User 21662 does not improve AUC. Reverting changes.
Training on augumented user 28538 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28538 AUC after training: 0.5
User 28538 does not improve AUC. Reverting changes.
Training on augumented user 19827 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19827 AUC after training: 0.5
User 19827 does not improve AUC. Reverting changes.
Training on augumented user 5543 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5543 AUC after training: 0.5
User 5543 does not improve AUC. Reverting changes.
Training on augumented user 49897 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49897 AUC after training: 0.5
User 49897 does not improve AUC. Reverting changes.
Training on augumented user 10722 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10722 AUC after training: 0.5
User 10722 does not improve AUC. Reverting changes.
Training on augumented user 95834 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95834 AUC after training: 0.5
User 95834 does not improve AUC. Reverting changes.
Training on augumented user 39303 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39303 AUC after training: 0.5
User 39303 does not improve AUC. Reverting changes.
Training on augumented user 3539 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3539 AUC after training: 0.5
User 3539 does not improve AUC. Reverting changes.
Training on augumented user 21737 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21737 AUC after training: 0.5
User 21737 does not improve AUC. Reverting changes.
Training on augumented user 55801 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55801 AUC after training: 0.5
User 55801 does not improve AUC. Reverting changes.
Training on augumented user 135546 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135546 AUC after training: 0.5
User 135546 does not improve AUC. Reverting changes.
Training on augumented user 54035 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54035 AUC after training: 0.5
User 54035 does not improve AUC. Reverting changes.
Training on augumented user 45270 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45270 AUC after training: 0.5
User 45270 does not improve AUC. Reverting changes.
Training on augumented user 24117 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24117 AUC after training: 0.5
User 24117 does not improve AUC. Reverting changes.
Training on augumented user 55643 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55643 AUC after training: 0.5
User 55643 does not improve AUC. Reverting changes.
Training on augumented user 76808 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76808 AUC after training: 0.5
User 76808 does not improve AUC. Reverting changes.
Training on augumented user 14711 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14711 AUC after training: 0.5
User 14711 does not improve AUC. Reverting changes.
Training on augumented user 67582 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67582 AUC after training: 0.5
User 67582 does not improve AUC. Reverting changes.
Training on augumented user 70475 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70475 AUC after training: 0.5
User 70475 does not improve AUC. Reverting changes.
Training on augumented user 29910 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29910 AUC after training: 0.5
User 29910 does not improve AUC. Reverting changes.
Training on augumented user 74022 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74022 AUC after training: 0.5
User 74022 does not improve AUC. Reverting changes.
Training on augumented user 20906 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20906 AUC after training: 0.5
User 20906 does not improve AUC. Reverting changes.
Training on augumented user 112729 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112729 AUC after training: 0.5
User 112729 does not improve AUC. Reverting changes.
Training on augumented user 11175 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11175 AUC after training: 0.5
User 11175 does not improve AUC. Reverting changes.
Training on augumented user 54862 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54862 AUC after training: 0.5
User 54862 does not improve AUC. Reverting changes.
Training on augumented user 44393 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44393 AUC after training: 0.5
User 44393 does not improve AUC. Reverting changes.
Training on augumented user 83502 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83502 AUC after training: 0.5
User 83502 does not improve AUC. Reverting changes.
Training on augumented user 13713 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13713 AUC after training: 0.5
User 13713 does not improve AUC. Reverting changes.
Training on augumented user 131725 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131725 AUC after training: 0.5
User 131725 does not improve AUC. Reverting changes.
Training on augumented user 6368 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6368 AUC after training: 0.5
User 6368 does not improve AUC. Reverting changes.
Training on augumented user 51564 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51564 AUC after training: 0.5
User 51564 does not improve AUC. Reverting changes.
Training on augumented user 128255 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128255 AUC after training: 0.5
User 128255 does not improve AUC. Reverting changes.
Training on augumented user 8889 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8889 AUC after training: 0.5
User 8889 does not improve AUC. Reverting changes.
Training on augumented user 15252 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15252 AUC after training: 0.5
User 15252 does not improve AUC. Reverting changes.
Training on augumented user 15762 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15762 AUC after training: 0.5
User 15762 does not improve AUC. Reverting changes.
Training on augumented user 30085 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30085 AUC after training: 0.5
User 30085 does not improve AUC. Reverting changes.
Training on augumented user 37678 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37678 AUC after training: 0.5
User 37678 does not improve AUC. Reverting changes.
Training on augumented user 73533 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73533 AUC after training: 0.5
User 73533 does not improve AUC. Reverting changes.
Training on augumented user 79607 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79607 AUC after training: 0.5
User 79607 does not improve AUC. Reverting changes.
Training on augumented user 102112 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102112 AUC after training: 0.5
User 102112 does not improve AUC. Reverting changes.
Training on augumented user 94386 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94386 AUC after training: 0.5
User 94386 does not improve AUC. Reverting changes.
Training on augumented user 27366 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27366 AUC after training: 0.5
User 27366 does not improve AUC. Reverting changes.
Training on augumented user 131994 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131994 AUC after training: 0.5
User 131994 does not improve AUC. Reverting changes.
Training on augumented user 39872 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39872 AUC after training: 0.5
User 39872 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:03.399174] start test user 76842 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:04.043693] start test user 76842 302/568 recall augumented users by random, augumented_users = [9152, 132926, 10721, 59242, 85705, 104520, 30597, 89018, 27501, 86726, 32019, 50335, 106562, 19884, 34642, 65832, 96026, 28685, 133525, 4620, 71356, 104937, 50, 97508, 40549, 110022, 10423, 97592, 121079, 37601, 126392, 22450, 104021, 131499, 20339, 102404, 69658, 9494, 133864, 54829, 74580, 2164, 134163, 50195, 17565, 97089, 124268, 127590, 14381, 93072]
[2024-12-02 20:22:04.059727] user = 76842 Cloud 302/568
[2024-12-02 20:22:04.128414] user = 76842 Local 302/568
[2024-12-02 20:22:04.221346] user = 76842 Local+ 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:06.762239] user = 76842 MPDA- 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8929349517584811
Training on augumented user 9152 0/50 current_auc = 0.8929349517584811
User 9152 AUC after training: 0.8930386969602655
User 9152 improves AUC. Keeping the model.
Training on augumented user 132926 1/50 current_auc = 0.8930386969602655
User 132926 AUC after training: 0.8924680983504514
User 132926 does not improve AUC. Reverting changes.
Training on augumented user 10721 2/50 current_auc = 0.8930386969602655
User 10721 AUC after training: 0.8919753086419753
User 10721 does not improve AUC. Reverting changes.
Training on augumented user 59242 3/50 current_auc = 0.8930386969602655
User 59242 AUC after training: 0.8928312065566968
User 59242 does not improve AUC. Reverting changes.
Training on augumented user 85705 4/50 current_auc = 0.8930386969602655
User 85705 AUC after training: 0.8926237161531279
User 85705 does not improve AUC. Reverting changes.
Training on augumented user 104520 5/50 current_auc = 0.8930386969602655
User 104520 AUC after training: 0.8925718435522357
User 104520 does not improve AUC. Reverting changes.
Training on augumented user 30597 6/50 current_auc = 0.8930386969602655
User 30597 AUC after training: 0.8929868243593733
User 30597 does not improve AUC. Reverting changes.
Training on augumented user 89018 7/50 current_auc = 0.8930386969602655
User 89018 AUC after training: 0.8926755887540201
User 89018 does not improve AUC. Reverting changes.
Training on augumented user 27501 8/50 current_auc = 0.8930386969602655
User 27501 AUC after training: 0.8929868243593734
User 27501 does not improve AUC. Reverting changes.
Training on augumented user 86726 9/50 current_auc = 0.8930386969602655
User 86726 AUC after training: 0.8928312065566968
User 86726 does not improve AUC. Reverting changes.
Training on augumented user 32019 10/50 current_auc = 0.8930386969602655
User 32019 AUC after training: 0.8928312065566968
User 32019 does not improve AUC. Reverting changes.
Training on augumented user 50335 11/50 current_auc = 0.8930386969602655
User 50335 AUC after training: 0.8927274613549123
User 50335 does not improve AUC. Reverting changes.
Training on augumented user 106562 12/50 current_auc = 0.8930386969602655
User 106562 AUC after training: 0.8922865442473287
User 106562 does not improve AUC. Reverting changes.
Training on augumented user 19884 13/50 current_auc = 0.8930386969602655
User 19884 AUC after training: 0.8919493723415293
User 19884 does not improve AUC. Reverting changes.
Training on augumented user 34642 14/50 current_auc = 0.8930386969602655
User 34642 AUC after training: 0.8928312065566968
User 34642 does not improve AUC. Reverting changes.
Training on augumented user 65832 15/50 current_auc = 0.8930386969602655
User 65832 AUC after training: 0.8922087353459902
User 65832 does not improve AUC. Reverting changes.
Training on augumented user 96026 16/50 current_auc = 0.8930386969602655
User 96026 AUC after training: 0.8926755887540201
User 96026 does not improve AUC. Reverting changes.
Training on augumented user 28685 17/50 current_auc = 0.8930386969602655
User 28685 AUC after training: 0.8927793339558044
User 28685 does not improve AUC. Reverting changes.
Training on augumented user 133525 18/50 current_auc = 0.8930386969602655
User 133525 AUC after training: 0.8929349517584813
User 133525 does not improve AUC. Reverting changes.
Training on augumented user 4620 19/50 current_auc = 0.8930386969602655
User 4620 AUC after training: 0.8922346716464364
User 4620 does not improve AUC. Reverting changes.
Training on augumented user 71356 20/50 current_auc = 0.8930386969602655
User 71356 AUC after training: 0.8923124805477747
User 71356 does not improve AUC. Reverting changes.
Training on augumented user 104937 21/50 current_auc = 0.8930386969602655
User 104937 AUC after training: 0.8920012449424215
User 104937 does not improve AUC. Reverting changes.
Training on augumented user 50 22/50 current_auc = 0.8930386969602655
User 50 AUC after training: 0.8929349517584813
User 50 does not improve AUC. Reverting changes.
Training on augumented user 97508 23/50 current_auc = 0.8930386969602655
User 97508 AUC after training: 0.8921049901442059
User 97508 does not improve AUC. Reverting changes.
Training on augumented user 40549 24/50 current_auc = 0.8930386969602655
User 40549 AUC after training: 0.892130926444652
User 40549 does not improve AUC. Reverting changes.
Training on augumented user 110022 25/50 current_auc = 0.8930386969602655
User 110022 AUC after training: 0.8930386969602656
User 110022 improves AUC. Keeping the model.
Training on augumented user 10423 26/50 current_auc = 0.8930386969602656
User 10423 AUC after training: 0.8927274613549123
User 10423 does not improve AUC. Reverting changes.
Training on augumented user 97592 27/50 current_auc = 0.8930386969602656
User 97592 AUC after training: 0.8929868243593734
User 97592 does not improve AUC. Reverting changes.
Training on augumented user 121079 28/50 current_auc = 0.8930386969602656
User 121079 AUC after training: 0.892883079157589
User 121079 does not improve AUC. Reverting changes.
Training on augumented user 37601 29/50 current_auc = 0.8930386969602656
User 37601 AUC after training: 0.8929868243593735
User 37601 does not improve AUC. Reverting changes.
Training on augumented user 126392 30/50 current_auc = 0.8930386969602656
User 126392 AUC after training: 0.8925718435522357
User 126392 does not improve AUC. Reverting changes.
Training on augumented user 22450 31/50 current_auc = 0.8930386969602656
User 22450 AUC after training: 0.892883079157589
User 22450 does not improve AUC. Reverting changes.
Training on augumented user 104021 32/50 current_auc = 0.8930386969602656
User 104021 AUC after training: 0.8925718435522357
User 104021 does not improve AUC. Reverting changes.
Training on augumented user 131499 33/50 current_auc = 0.8930386969602656
User 131499 AUC after training: 0.8930905695611578
User 131499 improves AUC. Keeping the model.
Training on augumented user 20339 34/50 current_auc = 0.8930905695611578
User 20339 AUC after training: 0.8929349517584811
User 20339 does not improve AUC. Reverting changes.
Training on augumented user 102404 35/50 current_auc = 0.8930905695611578
User 102404 AUC after training: 0.8931943147629422
User 102404 improves AUC. Keeping the model.
Training on augumented user 69658 36/50 current_auc = 0.8931943147629422
User 69658 AUC after training: 0.8931943147629422
User 69658 does not improve AUC. Reverting changes.
Training on augumented user 9494 37/50 current_auc = 0.8931943147629422
User 9494 AUC after training: 0.8930386969602656
User 9494 does not improve AUC. Reverting changes.
Training on augumented user 133864 38/50 current_auc = 0.8931943147629422
User 133864 AUC after training: 0.8924680983504513
User 133864 does not improve AUC. Reverting changes.
Training on augumented user 54829 39/50 current_auc = 0.8931943147629422
User 54829 AUC after training: 0.89314244216205
User 54829 does not improve AUC. Reverting changes.
Training on augumented user 74580 40/50 current_auc = 0.8931943147629422
User 74580 AUC after training: 0.8929349517584811
User 74580 does not improve AUC. Reverting changes.
Training on augumented user 2164 41/50 current_auc = 0.8931943147629422
User 2164 AUC after training: 0.8927533976553584
User 2164 does not improve AUC. Reverting changes.
Training on augumented user 134163 42/50 current_auc = 0.8931943147629422
User 134163 AUC after training: 0.8929608880589273
User 134163 does not improve AUC. Reverting changes.
Training on augumented user 50195 43/50 current_auc = 0.8931943147629422
User 50195 AUC after training: 0.8930386969602657
User 50195 does not improve AUC. Reverting changes.
Training on augumented user 17565 44/50 current_auc = 0.8931943147629422
User 17565 AUC after training: 0.893401805166511
User 17565 improves AUC. Keeping the model.
Training on augumented user 97089 45/50 current_auc = 0.893401805166511
User 97089 AUC after training: 0.8931165058616038
User 97089 does not improve AUC. Reverting changes.
Training on augumented user 124268 46/50 current_auc = 0.893401805166511
User 124268 AUC after training: 0.8932461873638344
User 124268 does not improve AUC. Reverting changes.
Training on augumented user 127590 47/50 current_auc = 0.893401805166511
User 127590 AUC after training: 0.8932461873638344
User 127590 does not improve AUC. Reverting changes.
Training on augumented user 14381 48/50 current_auc = 0.893401805166511
User 14381 AUC after training: 0.8931683784624962
User 14381 does not improve AUC. Reverting changes.
Training on augumented user 93072 49/50 current_auc = 0.893401805166511
User 93072 AUC after training: 0.8929349517584813
User 93072 does not improve AUC. Reverting changes.
[2024-12-02 20:22:40.986037] start test user 76843 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:41.471809] start test user 76843 303/568 recall augumented users by random, augumented_users = [81683, 68706, 101768, 94720, 55083, 119281, 129750, 53404, 108143, 136058, 30018, 91661, 1359, 83202, 63787, 18928, 21135, 61060, 114071, 12565, 104457, 119408, 98388, 48977, 79163, 104851, 119167, 44431, 31574, 54826, 54338, 52630, 24847, 18304, 84318, 35156, 137485, 42978, 100977, 116272, 74700, 9717, 20318, 40819, 60545, 73290, 19759, 107654, 91962, 32817]
[2024-12-02 20:22:41.500143] user = 76843 Cloud 303/568
[2024-12-02 20:22:41.510864] user = 76843 Local 303/568
[2024-12-02 20:22:41.748373] user = 76843 Local+ 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:44.132291] user = 76843 MPDA- 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4815668202764977
Training on augumented user 81683 0/50 current_auc = 0.4815668202764977
User 81683 AUC after training: 0.47235023041474655
User 81683 does not improve AUC. Reverting changes.
Training on augumented user 68706 1/50 current_auc = 0.4815668202764977
User 68706 AUC after training: 0.4608294930875576
User 68706 does not improve AUC. Reverting changes.
Training on augumented user 101768 2/50 current_auc = 0.4815668202764977
User 101768 AUC after training: 0.48847926267281105
User 101768 improves AUC. Keeping the model.
Training on augumented user 94720 3/50 current_auc = 0.48847926267281105
User 94720 AUC after training: 0.4930875576036866
User 94720 improves AUC. Keeping the model.
Training on augumented user 55083 4/50 current_auc = 0.4930875576036866
User 55083 AUC after training: 0.48847926267281105
User 55083 does not improve AUC. Reverting changes.
Training on augumented user 119281 5/50 current_auc = 0.4930875576036866
User 119281 AUC after training: 0.49539170506912444
User 119281 improves AUC. Keeping the model.
Training on augumented user 129750 6/50 current_auc = 0.49539170506912444
User 129750 AUC after training: 0.49539170506912444
User 129750 does not improve AUC. Reverting changes.
Training on augumented user 53404 7/50 current_auc = 0.49539170506912444
User 53404 AUC after training: 0.4976958525345622
User 53404 improves AUC. Keeping the model.
Training on augumented user 108143 8/50 current_auc = 0.4976958525345622
User 108143 AUC after training: 0.4838709677419355
User 108143 does not improve AUC. Reverting changes.
Training on augumented user 136058 9/50 current_auc = 0.4976958525345622
User 136058 AUC after training: 0.49308755760368667
User 136058 does not improve AUC. Reverting changes.
Training on augumented user 30018 10/50 current_auc = 0.4976958525345622
User 30018 AUC after training: 0.4861751152073733
User 30018 does not improve AUC. Reverting changes.
Training on augumented user 91661 11/50 current_auc = 0.4976958525345622
User 91661 AUC after training: 0.4976958525345622
User 91661 does not improve AUC. Reverting changes.
Training on augumented user 1359 12/50 current_auc = 0.4976958525345622
User 1359 AUC after training: 0.4976958525345622
User 1359 does not improve AUC. Reverting changes.
Training on augumented user 83202 13/50 current_auc = 0.4976958525345622
User 83202 AUC after training: 0.4976958525345622
User 83202 does not improve AUC. Reverting changes.
Training on augumented user 63787 14/50 current_auc = 0.4976958525345622
User 63787 AUC after training: 0.4976958525345622
User 63787 does not improve AUC. Reverting changes.
Training on augumented user 18928 15/50 current_auc = 0.4976958525345622
User 18928 AUC after training: 0.49539170506912444
User 18928 does not improve AUC. Reverting changes.
Training on augumented user 21135 16/50 current_auc = 0.4976958525345622
User 21135 AUC after training: 0.4838709677419355
User 21135 does not improve AUC. Reverting changes.
Training on augumented user 61060 17/50 current_auc = 0.4976958525345622
User 61060 AUC after training: 0.47695852534562216
User 61060 does not improve AUC. Reverting changes.
Training on augumented user 114071 18/50 current_auc = 0.4976958525345622
User 114071 AUC after training: 0.49078341013824883
User 114071 does not improve AUC. Reverting changes.
Training on augumented user 12565 19/50 current_auc = 0.4976958525345622
User 12565 AUC after training: 0.4976958525345622
User 12565 does not improve AUC. Reverting changes.
Training on augumented user 104457 20/50 current_auc = 0.4976958525345622
User 104457 AUC after training: 0.49539170506912444
User 104457 does not improve AUC. Reverting changes.
Training on augumented user 119408 21/50 current_auc = 0.4976958525345622
User 119408 AUC after training: 0.49308755760368667
User 119408 does not improve AUC. Reverting changes.
Training on augumented user 98388 22/50 current_auc = 0.4976958525345622
User 98388 AUC after training: 0.4907834101382489
User 98388 does not improve AUC. Reverting changes.
Training on augumented user 48977 23/50 current_auc = 0.4976958525345622
User 48977 AUC after training: 0.49308755760368667
User 48977 does not improve AUC. Reverting changes.
Training on augumented user 79163 24/50 current_auc = 0.4976958525345622
User 79163 AUC after training: 0.49539170506912444
User 79163 does not improve AUC. Reverting changes.
Training on augumented user 104851 25/50 current_auc = 0.4976958525345622
User 104851 AUC after training: 0.4976958525345622
User 104851 does not improve AUC. Reverting changes.
Training on augumented user 119167 26/50 current_auc = 0.4976958525345622
User 119167 AUC after training: 0.48847926267281105
User 119167 does not improve AUC. Reverting changes.
Training on augumented user 44431 27/50 current_auc = 0.4976958525345622
User 44431 AUC after training: 0.49539170506912444
User 44431 does not improve AUC. Reverting changes.
Training on augumented user 31574 28/50 current_auc = 0.4976958525345622
User 31574 AUC after training: 0.5
User 31574 improves AUC. Keeping the model.
Training on augumented user 54826 29/50 current_auc = 0.5
User 54826 AUC after training: 0.49078341013824883
User 54826 does not improve AUC. Reverting changes.
Training on augumented user 54338 30/50 current_auc = 0.5
User 54338 AUC after training: 0.4976958525345622
User 54338 does not improve AUC. Reverting changes.
Training on augumented user 52630 31/50 current_auc = 0.5
User 52630 AUC after training: 0.48847926267281105
User 52630 does not improve AUC. Reverting changes.
Training on augumented user 24847 32/50 current_auc = 0.5
User 24847 AUC after training: 0.5
User 24847 does not improve AUC. Reverting changes.
Training on augumented user 18304 33/50 current_auc = 0.5
User 18304 AUC after training: 0.5
User 18304 does not improve AUC. Reverting changes.
Training on augumented user 84318 34/50 current_auc = 0.5
User 84318 AUC after training: 0.4953917050691244
User 84318 does not improve AUC. Reverting changes.
Training on augumented user 35156 35/50 current_auc = 0.5
User 35156 AUC after training: 0.4930875576036866
User 35156 does not improve AUC. Reverting changes.
Training on augumented user 137485 36/50 current_auc = 0.5
User 137485 AUC after training: 0.49308755760368667
User 137485 does not improve AUC. Reverting changes.
Training on augumented user 42978 37/50 current_auc = 0.5
User 42978 AUC after training: 0.49539170506912444
User 42978 does not improve AUC. Reverting changes.
Training on augumented user 100977 38/50 current_auc = 0.5
User 100977 AUC after training: 0.49078341013824883
User 100977 does not improve AUC. Reverting changes.
Training on augumented user 116272 39/50 current_auc = 0.5
User 116272 AUC after training: 0.46313364055299533
User 116272 does not improve AUC. Reverting changes.
Training on augumented user 74700 40/50 current_auc = 0.5
User 74700 AUC after training: 0.49539170506912444
User 74700 does not improve AUC. Reverting changes.
Training on augumented user 9717 41/50 current_auc = 0.5
User 9717 AUC after training: 0.49539170506912444
User 9717 does not improve AUC. Reverting changes.
Training on augumented user 20318 42/50 current_auc = 0.5
User 20318 AUC after training: 0.5
User 20318 does not improve AUC. Reverting changes.
Training on augumented user 40819 43/50 current_auc = 0.5
User 40819 AUC after training: 0.49539170506912444
User 40819 does not improve AUC. Reverting changes.
Training on augumented user 60545 44/50 current_auc = 0.5
User 60545 AUC after training: 0.49539170506912444
User 60545 does not improve AUC. Reverting changes.
Training on augumented user 73290 45/50 current_auc = 0.5
User 73290 AUC after training: 0.4976958525345622
User 73290 does not improve AUC. Reverting changes.
Training on augumented user 19759 46/50 current_auc = 0.5
User 19759 AUC after training: 0.4930875576036866
User 19759 does not improve AUC. Reverting changes.
Training on augumented user 107654 47/50 current_auc = 0.5
User 107654 AUC after training: 0.4976958525345622
User 107654 does not improve AUC. Reverting changes.
Training on augumented user 91962 48/50 current_auc = 0.5
User 91962 AUC after training: 0.5
User 91962 does not improve AUC. Reverting changes.
Training on augumented user 32817 49/50 current_auc = 0.5
User 32817 AUC after training: 0.4976958525345622
User 32817 does not improve AUC. Reverting changes.
[2024-12-02 20:23:11.592162] start test user 76854 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:12.129268] start test user 76854 304/568 recall augumented users by random, augumented_users = [118798, 134122, 28553, 14783, 17543, 97771, 116741, 30441, 116797, 13018, 40204, 76006, 21028, 18469, 80811, 109026, 77632, 122010, 7616, 50433, 4413, 93318, 60785, 21619, 15797, 128904, 92383, 125821, 61940, 100164, 122998, 99996, 1682, 123243, 120698, 11839, 1541, 104938, 108742, 132553, 62055, 107172, 453, 75625, 106343, 82438, 130002, 1037, 1942, 28569]
[2024-12-02 20:23:12.143378] user = 76854 Cloud 304/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:23:12.149261] user = 76854 Local 304/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:23:12.176273] user = 76854 Local+ 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:23:14.328840] user = 76854 MPDA- 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 118798 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118798 AUC after training: 0.5
User 118798 does not improve AUC. Reverting changes.
Training on augumented user 134122 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134122 AUC after training: 0.5
User 134122 does not improve AUC. Reverting changes.
Training on augumented user 28553 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28553 AUC after training: 0.5
User 28553 does not improve AUC. Reverting changes.
Training on augumented user 14783 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14783 AUC after training: 0.5
User 14783 does not improve AUC. Reverting changes.
Training on augumented user 17543 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17543 AUC after training: 0.5
User 17543 does not improve AUC. Reverting changes.
Training on augumented user 97771 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97771 AUC after training: 0.5
User 97771 does not improve AUC. Reverting changes.
Training on augumented user 116741 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116741 AUC after training: 0.5
User 116741 does not improve AUC. Reverting changes.
Training on augumented user 30441 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30441 AUC after training: 0.5
User 30441 does not improve AUC. Reverting changes.
Training on augumented user 116797 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116797 AUC after training: 0.5
User 116797 does not improve AUC. Reverting changes.
Training on augumented user 13018 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13018 AUC after training: 0.5
User 13018 does not improve AUC. Reverting changes.
Training on augumented user 40204 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40204 AUC after training: 0.5
User 40204 does not improve AUC. Reverting changes.
Training on augumented user 76006 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76006 AUC after training: 0.5
User 76006 does not improve AUC. Reverting changes.
Training on augumented user 21028 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21028 AUC after training: 0.5
User 21028 does not improve AUC. Reverting changes.
Training on augumented user 18469 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18469 AUC after training: 0.5
User 18469 does not improve AUC. Reverting changes.
Training on augumented user 80811 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80811 AUC after training: 0.5
User 80811 does not improve AUC. Reverting changes.
Training on augumented user 109026 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109026 AUC after training: 0.5
User 109026 does not improve AUC. Reverting changes.
Training on augumented user 77632 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77632 AUC after training: 0.5
User 77632 does not improve AUC. Reverting changes.
Training on augumented user 122010 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122010 AUC after training: 0.5
User 122010 does not improve AUC. Reverting changes.
Training on augumented user 7616 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7616 AUC after training: 0.5
User 7616 does not improve AUC. Reverting changes.
Training on augumented user 50433 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50433 AUC after training: 0.5
User 50433 does not improve AUC. Reverting changes.
Training on augumented user 4413 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4413 AUC after training: 0.5
User 4413 does not improve AUC. Reverting changes.
Training on augumented user 93318 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93318 AUC after training: 0.5
User 93318 does not improve AUC. Reverting changes.
Training on augumented user 60785 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60785 AUC after training: 0.5
User 60785 does not improve AUC. Reverting changes.
Training on augumented user 21619 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21619 AUC after training: 0.5
User 21619 does not improve AUC. Reverting changes.
Training on augumented user 15797 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15797 AUC after training: 0.5
User 15797 does not improve AUC. Reverting changes.
Training on augumented user 128904 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128904 AUC after training: 0.5
User 128904 does not improve AUC. Reverting changes.
Training on augumented user 92383 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92383 AUC after training: 0.5
User 92383 does not improve AUC. Reverting changes.
Training on augumented user 125821 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125821 AUC after training: 0.5
User 125821 does not improve AUC. Reverting changes.
Training on augumented user 61940 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61940 AUC after training: 0.5
User 61940 does not improve AUC. Reverting changes.
Training on augumented user 100164 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100164 AUC after training: 0.5
User 100164 does not improve AUC. Reverting changes.
Training on augumented user 122998 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122998 AUC after training: 0.5
User 122998 does not improve AUC. Reverting changes.
Training on augumented user 99996 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99996 AUC after training: 0.5
User 99996 does not improve AUC. Reverting changes.
Training on augumented user 1682 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1682 AUC after training: 0.5
User 1682 does not improve AUC. Reverting changes.
Training on augumented user 123243 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123243 AUC after training: 0.5
User 123243 does not improve AUC. Reverting changes.
Training on augumented user 120698 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120698 AUC after training: 0.5
User 120698 does not improve AUC. Reverting changes.
Training on augumented user 11839 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11839 AUC after training: 0.5
User 11839 does not improve AUC. Reverting changes.
Training on augumented user 1541 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1541 AUC after training: 0.5
User 1541 does not improve AUC. Reverting changes.
Training on augumented user 104938 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104938 AUC after training: 0.5
User 104938 does not improve AUC. Reverting changes.
Training on augumented user 108742 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108742 AUC after training: 0.5
User 108742 does not improve AUC. Reverting changes.
Training on augumented user 132553 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132553 AUC after training: 0.5
User 132553 does not improve AUC. Reverting changes.
Training on augumented user 62055 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62055 AUC after training: 0.5
User 62055 does not improve AUC. Reverting changes.
Training on augumented user 107172 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107172 AUC after training: 0.5
User 107172 does not improve AUC. Reverting changes.
Training on augumented user 453 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 453 AUC after training: 0.5
User 453 does not improve AUC. Reverting changes.
Training on augumented user 75625 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75625 AUC after training: 0.5
User 75625 does not improve AUC. Reverting changes.
Training on augumented user 106343 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106343 AUC after training: 0.5
User 106343 does not improve AUC. Reverting changes.
Training on augumented user 82438 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82438 AUC after training: 0.5
User 82438 does not improve AUC. Reverting changes.
Training on augumented user 130002 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130002 AUC after training: 0.5
User 130002 does not improve AUC. Reverting changes.
Training on augumented user 1037 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1037 AUC after training: 0.5
User 1037 does not improve AUC. Reverting changes.
Training on augumented user 1942 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1942 AUC after training: 0.5
User 1942 does not improve AUC. Reverting changes.
Training on augumented user 28569 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28569 AUC after training: 0.5
User 28569 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:23:40.287830] start test user 76869 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:40.719072] start test user 76869 305/568 recall augumented users by random, augumented_users = [113529, 94755, 101329, 122942, 43514, 11858, 8613, 89721, 120033, 25914, 87924, 129438, 42453, 107215, 110119, 135709, 69388, 80492, 116688, 107688, 85537, 60434, 33554, 34617, 76895, 17288, 41794, 91732, 114138, 3817, 57732, 72430, 35239, 10633, 58354, 91012, 71859, 116504, 39580, 61605, 10918, 7837, 15363, 20263, 76009, 38770, 2331, 82824, 39432, 36202]
[2024-12-02 20:23:40.734458] user = 76869 Cloud 305/568
[2024-12-02 20:23:40.744338] user = 76869 Local 305/568
[2024-12-02 20:23:40.819763] user = 76869 Local+ 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:42.515618] user = 76869 MPDA- 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.58125
Training on augumented user 113529 0/50 current_auc = 0.58125
User 113529 AUC after training: 0.58125
User 113529 does not improve AUC. Reverting changes.
Training on augumented user 94755 1/50 current_auc = 0.58125
User 94755 AUC after training: 0.56875
User 94755 does not improve AUC. Reverting changes.
Training on augumented user 101329 2/50 current_auc = 0.58125
User 101329 AUC after training: 0.56875
User 101329 does not improve AUC. Reverting changes.
Training on augumented user 122942 3/50 current_auc = 0.58125
User 122942 AUC after training: 0.58125
User 122942 does not improve AUC. Reverting changes.
Training on augumented user 43514 4/50 current_auc = 0.58125
User 43514 AUC after training: 0.58125
User 43514 does not improve AUC. Reverting changes.
Training on augumented user 11858 5/50 current_auc = 0.58125
User 11858 AUC after training: 0.56875
User 11858 does not improve AUC. Reverting changes.
Training on augumented user 8613 6/50 current_auc = 0.58125
User 8613 AUC after training: 0.58125
User 8613 does not improve AUC. Reverting changes.
Training on augumented user 89721 7/50 current_auc = 0.58125
User 89721 AUC after training: 0.58125
User 89721 does not improve AUC. Reverting changes.
Training on augumented user 120033 8/50 current_auc = 0.58125
User 120033 AUC after training: 0.58125
User 120033 does not improve AUC. Reverting changes.
Training on augumented user 25914 9/50 current_auc = 0.58125
User 25914 AUC after training: 0.58125
User 25914 does not improve AUC. Reverting changes.
Training on augumented user 87924 10/50 current_auc = 0.58125
User 87924 AUC after training: 0.56875
User 87924 does not improve AUC. Reverting changes.
Training on augumented user 129438 11/50 current_auc = 0.58125
User 129438 AUC after training: 0.58125
User 129438 does not improve AUC. Reverting changes.
Training on augumented user 42453 12/50 current_auc = 0.58125
User 42453 AUC after training: 0.58125
User 42453 does not improve AUC. Reverting changes.
Training on augumented user 107215 13/50 current_auc = 0.58125
User 107215 AUC after training: 0.56875
User 107215 does not improve AUC. Reverting changes.
Training on augumented user 110119 14/50 current_auc = 0.58125
User 110119 AUC after training: 0.59375
User 110119 improves AUC. Keeping the model.
Training on augumented user 135709 15/50 current_auc = 0.59375
User 135709 AUC after training: 0.59375
User 135709 does not improve AUC. Reverting changes.
Training on augumented user 69388 16/50 current_auc = 0.59375
User 69388 AUC after training: 0.59375
User 69388 does not improve AUC. Reverting changes.
Training on augumented user 80492 17/50 current_auc = 0.59375
User 80492 AUC after training: 0.59375
User 80492 does not improve AUC. Reverting changes.
Training on augumented user 116688 18/50 current_auc = 0.59375
User 116688 AUC after training: 0.59375
User 116688 does not improve AUC. Reverting changes.
Training on augumented user 107688 19/50 current_auc = 0.59375
User 107688 AUC after training: 0.59375
User 107688 does not improve AUC. Reverting changes.
Training on augumented user 85537 20/50 current_auc = 0.59375
User 85537 AUC after training: 0.59375
User 85537 does not improve AUC. Reverting changes.
Training on augumented user 60434 21/50 current_auc = 0.59375
User 60434 AUC after training: 0.58125
User 60434 does not improve AUC. Reverting changes.
Training on augumented user 33554 22/50 current_auc = 0.59375
User 33554 AUC after training: 0.58125
User 33554 does not improve AUC. Reverting changes.
Training on augumented user 34617 23/50 current_auc = 0.59375
User 34617 AUC after training: 0.58125
User 34617 does not improve AUC. Reverting changes.
Training on augumented user 76895 24/50 current_auc = 0.59375
User 76895 AUC after training: 0.59375
User 76895 does not improve AUC. Reverting changes.
Training on augumented user 17288 25/50 current_auc = 0.59375
User 17288 AUC after training: 0.59375
User 17288 does not improve AUC. Reverting changes.
Training on augumented user 41794 26/50 current_auc = 0.59375
User 41794 AUC after training: 0.59375
User 41794 does not improve AUC. Reverting changes.
Training on augumented user 91732 27/50 current_auc = 0.59375
User 91732 AUC after training: 0.59375
User 91732 does not improve AUC. Reverting changes.
Training on augumented user 114138 28/50 current_auc = 0.59375
User 114138 AUC after training: 0.58125
User 114138 does not improve AUC. Reverting changes.
Training on augumented user 3817 29/50 current_auc = 0.59375
